cscope 15 /usr/src/rtai-4.1/testsuite/kern/oneshot-test               0002688853
	@/usr/src/rtai/base/arch/arm/hal/hal.c

47 
	~<löux/vîsi⁄.h
>

48 
	~<löux/autoc⁄f.h
>

49 
	~<löux/moduÀ.h
>

50 
	~<löux/öô.h
>

51 
	~<löux/°ddef.h
>

52 
	~<löux/sched.h
>

53 
	~<löux/timî.h
>

54 
	~<löux/öãºu±.h
>

55 
	~<asm/mach/úq.h
>

56 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

57 
	~<asm/¥oc/±ø˚.h
>

59 
	~<asm/±ø˚.h
>

60 
	~<asm/uac˚ss.h
>

61 
	~<asm/uni°d.h
>

62 
	~<°d¨g.h
>

64 
	#__RTAI_HAL__


	)

65 
	~<asm/πai_hÆ.h
>

66 
	~<asm/πai_lxπ.h
>

67 
	~<asm/πai_usi.h
>

68 #ifde‡
CONFIG_PROC_FS


69 
	~<löux/¥oc_fs.h
>

70 
	~<πai_¥oc_fs.h
>

72 
	~<πai_vîsi⁄.h
>

74 
	~<asm/πai_usi.h
>

75 
	~<asm/uni°d.h
>

77 
MODULE_LICENSE
("GPL");

79 
	gπai_˝u‰eq_¨g
 = 
RTAI_CALIBRATED_CPU_FREQ
;

80 
RTAI_MODULE_PARM
(
πai_˝u‰eq_¨g
, 
ul⁄g
);

82 
	gIsﬁCpusMask
 = 0;

83 
RTAI_MODULE_PARM
(
IsﬁCpusMask
, 
ul⁄g
);

85 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,4,31) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)) || LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,9)

87 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

88 
	#πai_úq_desc
(
úq
Ë(
úq_desc
[úq].
h™dÀr
)

	)

90 
	#πai_úq_desc
(
úq
Ë(
úq_desc
[úq].
chù
)

	)

93 
	#BEGIN_PIC
()

	)

94 
	#END_PIC
()

	)

95 #unde‡
hÆ_lock_úq


96 #unde‡
hÆ_u∆ock_úq


97 
	#hÆ_lock_úq
(
x
, 
y
, 
z
)

	)

98 
	#hÆ_u∆ock_úq
(
x
, 
y
)

	)

102 
hw_öãºu±_ty≥
 
hÆ_°d_úq_dty≥
[];

103 
	#πai_úq_desc
(
úq
Ë(&
hÆ_°d_úq_dty≥
[úq])

	)

105 
	#BEGIN_PIC
() \

107 
Êags
, 
pÊags
, 
˝uid
; \

108 
	`πai_ßve_Êags_™d_˛i
(
Êags
); \

109 
˝uid
 = 
	`πai_˝uid
(); \

110 
pÊags
 = 
	`xchg
(
ùùe_roŸ_°©us
[
˝uid
], 1 << 
IPIPE_STALL_FLAG
); \

111 
	`πai_ßve_™d_lock_¥ìm±_cou¡
()

	)

113 
	#END_PIC
() \

114 
	`πai_ª°‹e_¥ìm±_cou¡
(); \

115 *
ùùe_roŸ_°©us
[
˝uid
] = 
pÊags
; \

116 
	`πai_ª°‹e_Êags
(
Êags
); \

117 } 0)

	)

123 
πai_ªÆtime_úq_s
 
	gπai_ªÆtime_úq
[
RTAI_NR_IRQS
];

124 
hÆ_domaö_°ru˘
 
	gπai_domaö
;

125 
π_times
 
	gπ_times
;

126 
π_times
 
	gπ_smp_times
[
RTAI_NR_CPUS
] = { { 0 } };

127 
πai_swôch_d©a
 
	gπai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

128 vﬁ©ûê*
	gùùe_roŸ_°©us
[
RTAI_NR_CPUS
];

129 
ˇlibøti⁄_d©a
 
	gπai_tu«bÀs
;

130 vﬁ©ûê
	gπai_˝u_ªÆtime
;

131 vﬁ©ûê
	gπai_˝u_lock
;

132 (*
πai_lxπ_övoke_íåy
)(, *);

133 °ru˘ { vﬁ©ûê
locked
, 
rq°ed
; } 
π_schedulög
[
RTAI_NR_CPUS
];

134 #ifde‡
CONFIG_PROC_FS


135 
¥oc_dú_íåy
 *
πai_¥oc_roŸ
 = 
NULL
;

138 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


139 (*
πai_i§_hook
)(
˝uid
);

142 
	#CHECK_KERCTX
()

	)

147 
Êags
;

148 
cou¡
;

149 } 
πai_löux_úq
[
NR_IRQS
];

151 (*
k_h™dÀr
)();

152 (*
u_h™dÀr
)();

153 
œbñ
;

154 } 
πai_sy§eq_èbÀ
[
RTAI_NR_SRQS
];

155 
πai_sy§eq_vúq
;

156 
πai_sy§eq_m≠
 = 3;

157 
πai_sy§eq_≥ndög
;

158 
πai_sy§eq_ru¬ög
;

159 
•ölock_t
 
πai_l§q_lock
 = 
SPIN_LOCK_UNLOCKED
;

160 vﬁ©ûê
πai_sync_Àvñ
;

161 
©omic_t
 
πai_sync_cou¡
 = 
	`ATOMIC_INIT
(1);

162 
RT_TRAP_HANDLER
 
πai_å≠_h™dÀr
;

163 vﬁ©ûê
hÆ_≥nded
;

166 
	`πai_¸ôiˇl_íãr
((*
synch
)())

168 
Êags
 = 
	`hÆ_¸ôiˇl_íãr
(
synch
);

170 i‡(
	`©omic_dec_™d_ã°
(&
πai_sync_cou¡
))

171 
πai_sync_Àvñ
 = 0;

172 i‡(
synch
 !
NULL
)

173 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: warning:Çested sync will fail.\n");

175  
Êags
;

176 
	}
}

179 
	$πai_¸ôiˇl_exô
(
Êags
)

181 
	`©omic_öc
(&
πai_sync_cou¡
);

182 
	`hÆ_¸ôiˇl_exô
(
Êags
);

183 
	}
}

186 
π_ªque°_úq
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
)

188 
Êags
;

190 i‡(
h™dÀr
 =
NULL
 || 
úq
 >
RTAI_NR_IRQS
)

191  -
EINVAL
;

193 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
 !
NULL
)

194  -
EBUSY
;

196 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

197 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = (*)handler;

198 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = 
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

199 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

200 
	`πai_¸ôiˇl_exô
(
Êags
);

202 
	}
}

205 
	$π_ªÀa£_úq
(
úq
)

207 
Êags
;

208 i‡(
úq
 >
RTAI_NR_IRQS
 || !
πai_ªÆtime_úq
[úq].
h™dÀr
) {

209  -
EINVAL
;

211 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

212 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = 
NULL
;

213 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = 
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

214 
	`πai_¸ôiˇl_exô
(
Êags
);

216 
	}
}

218 
π_£t_úq_ack
(
úq
, (*
úq_ack
)())

220 i‡(
úq
 >
RTAI_NR_IRQS
) {

221  -
EINVAL
;

223 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = irq_ack ? irq_ack : 
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

225 
	}
}

228 
	$π_£t_úq_cookõ
(
úq
, *
cookõ
)

230 i‡(
úq
 < 
NR_IRQS
)

231 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

232 
	}
}

238 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
Ë{ ; 
	}
}

239 
	$π_‰ì_≠ic_timîs
(Ë{ 
	`π_‰ì_timî
(); 
	}
}

240 
	$π_assign_úq_to_˝u
 (
úq
, 
˝us_mask
Ë{  0; 
	}
}

241 
	$π_ª£t_úq_to_sym_mode
 (
úq
Ë{  0; 
	}
}

243 
	$π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
)

245 
	`π_¥ötk
("*** RTC NOT IMPLEMENTED YET ON THIS ARCH ***\n");

246 
	}
}

248 
	$π_ªÀa£_πc
()

250 
	`π_¥ötk
("*** RTC NOT IMPLEMENTED YET ON THIS ARCH ***\n");

251 
	}
}

283 
	$π_°¨tup_úq
(
úq
)

285 
ªtvÆ
;

287 
	`BEGIN_PIC
();

288 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

289 
	`πai_úq_desc
(
úq
)->
	`unmask
(irq);

290 
ªtvÆ
 = 
	`πai_úq_desc
(
úq
)->
	`°¨tup
(irq);

291 
	`END_PIC
();

292  
ªtvÆ
;

293 
	}
}

296 
	$π_shutdown_úq
(
úq
)

298 
	`BEGIN_PIC
();

299 
	`πai_úq_desc
(
úq
)->
	`shutdown
(irq);

300 
	`hÆ_˛ór_úq
(
hÆ_roŸ_domaö
, 
úq
);

301 
	`END_PIC
();

302 
	}
}

305 
	$π_íabÀ_úq
(
úq
)

307 
	`BEGIN_PIC
();

308 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

309 
	`πai_úq_desc
(
úq
)->
	`íabÀ
(irq);

310 
	`END_PIC
();

311 
	}
}

314 
	$π_dißbÀ_úq
(
úq
)

316 
	`BEGIN_PIC
();

317 
	`πai_úq_desc
(
úq
)->
	`dißbÀ
(irq);

318 
	`hÆ_lock_úq
(
hÆ_roŸ_domaö
, 
˝uid
, 
úq
);

319 
	`END_PIC
();

320 
	}
}

323 
	$π_mask_™d_ack_úq
(
úq
)

325 
	`BEGIN_PIC
();

326 
	`πai_úq_desc
(
úq
)->
	`mask
(irq);

327 
	`END_PIC
();

328 
	}
}

330 
ölöe
 
	$_π_íd_úq
 (
úq
)

332 
	`BEGIN_PIC
();

334 !(
úq_desc
[
úq
].
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

335 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

337 
	`πai_úq_desc
(
úq
)->
	`íd
(irq);

338 
	`END_PIC
();

339 
	}
}

342 
	$π_unmask_úq
(
úq
)

344 
	`BEGIN_PIC
();

345 
	`πai_úq_desc
(
úq
)->
	`unmask
(irq);

346 
	`END_PIC
();

347 
	}
}

350 
	$π_ack_úq
(
úq
)

352 
	`BEGIN_PIC
();

353 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

354 
	`πai_úq_desc
(
úq
)->
	`íabÀ
(irq);

355 
	`END_PIC
();

356 
	}
}

358 
	$π_íd_úq
 (
úq
)

360 
	`_π_íd_úq
(
úq
);

361 
	}
}

389 
	$π_ªque°_löux_úq
 (
úq
, *
h™dÀr
, *
«me
, *
dev_id
)

391 
Êags
;

393 i‡(
úq
 >
RTAI_NR_IRQS
 || !
h™dÀr
) {

394  -
EINVAL
;

397 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

398 
	`•ö_lock
(&
úq_desc
[
úq
].
lock
);

399 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
úq_desc
[úq].
a˘i⁄
) {

400 
πai_löux_úq
[
úq
].
Êags
 = 
úq_desc
[úq].
a˘i⁄
->flags;

401 
úq_desc
[
úq
].
a˘i⁄
->
Êags
 |
SA_SHIRQ
;

403 
	`•ö_u∆ock
(&
úq_desc
[
úq
].
lock
);

404 
	`πai_ª°‹e_Êags
(
Êags
);

406 
	`ªque°_úq
(
úq
, 
h™dÀr
, 
SA_SHIRQ
, 
«me
, 
dev_id
);

409 
	}
}

423 
	$π_‰ì_löux_úq
(
úq
, *
dev_id
)

425 
Êags
;

427 i‡(
úq
 >
RTAI_NR_IRQS
 || 
πai_löux_úq
[úq].
cou¡
 == 0) {

428  -
EINVAL
;

431 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

432 
	`‰ì_úq
(
úq
, 
dev_id
);

434 
	`•ö_lock
(&
úq_desc
[
úq
].
lock
);

435 i‡(--
πai_löux_úq
[
úq
].
cou¡
 =0 && 
úq_desc
[úq].
a˘i⁄
) {

436 
úq_desc
[
úq
].
a˘i⁄
->
Êags
 = 
πai_löux_úq
[irq].flags;

438 
	`•ö_u∆ock
(&
úq_desc
[
úq
].
lock
);

440 
	`πai_ª°‹e_Êags
(
Êags
);

443 
	}
}

454 
	$π_≥nd_löux_úq
(
úq
)

456 
Êags
;

457 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

458 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

459 
	`πai_ª°‹e_Êags
(
Êags
);

460 
	}
}

462 
RTAI_SYSCALL_MODE
 
	$u§_π_≥nd_löux_úq
 (
úq
)

464 
Êags
;

465 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

466 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

467 
	`πai_ª°‹e_Êags
(
Êags
);

468 
	}
}

490 
π_ªque°_§q
(
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)())

492 
Êags
;

493 
§q
;

495 i‡(
k_h™dÀr
 =
NULL
)

496  -
EINVAL
;

498 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

500 i‡(
πai_sy§eq_m≠
 != ~0) {

501 
§q
 = 
	`ffz
(
πai_sy§eq_m≠
);

502 
	`£t_bô
(
§q
, &
πai_sy§eq_m≠
);

503 
πai_sy§eq_èbÀ
[
§q
].
k_h™dÀr
 = k_handler;

504 
πai_sy§eq_èbÀ
[
§q
].
u_h™dÀr
 = u_handler;

505 
πai_sy§eq_èbÀ
[
§q
].
œbñ
 =Üabel;

507 
§q
 = -
EBUSY
;

509 
	`πai_ª°‹e_Êags
(
Êags
);

511  
§q
;

512 
	}
}

523 
	$π_‰ì_§q
(
§q
)

525  (
§q
 < 2 || srq >
RTAI_NR_SRQS
 || !
	`ã°_™d_˛ór_bô
(§q, &
πai_sy§eq_m≠
))

526 ? -
EINVAL


528 
	}
}

541 
	$π_≥nd_löux_§q
(
§q
)

543 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
) {

544 
Êags
;

545 
	`£t_bô
(
§q
, &
πai_sy§eq_≥ndög
);

546 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

547 
	`hÆ_≥nd_unc⁄d
(
πai_sy§eq_vúq
, 
	`πai_˝uid
());

548 
	`πai_ª°‹e_Êags
(
Êags
);

550 
	}
}

552 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


553 (*
πai_i§_hook
)(
˝uid
);

554 
	#RTAI_SCHED_ISR_LOCK
() \

556 i‡(!
π_schedulög
[
˝uid
 = 
	`πai_˝uid
()].
locked
++) { \

557 
π_schedulög
[
˝uid
].
rq°ed
 = 0; \

559 
	}
} 0)

	)

560 
	#RTAI_SCHED_ISR_UNLOCK
() \

562 i‡(
π_schedulög
[
˝uid
].
locked
 && !(--rt_scheduling[cpuid].locked)) { \

563 i‡(
π_schedulög
[
˝uid
].
rq°ed
 > 0 && 
πai_i§_hook
) { \

564 
	`πai_i§_hook
(
˝uid
); \

567 } 0)

	)

569 
	#RTAI_SCHED_ISR_LOCK
() \

570 dÿ{ 
˝uid
 = 
	`πai_˝uid
(); } 0)

	)

571 
	#RTAI_SCHED_ISR_UNLOCK
() \

572 dÿ{ } 0)

	)

575 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,4,31) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)) || LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,9)

576 
	#HAL_TICK_REGS
 
hÆ_tick_ªgs
[
˝uid
]

	)

578 
	#HAL_TICK_REGS
 
hÆ_tick_ªgs


	)

581 #ifde‡
LOCKED_LINUX_IN_IRQ_HANDLER


582 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
); } 0)

	)

583 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

585 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`xchg
(
ùùe_roŸ_°©us
[
˝uid
], (1 << 
IPIPE_STALL_FLAG
)); } 0)

	)

586 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); *
ùùe_roŸ_°©us
[
˝uid
] = 
sÊags
; } 0)

	)

590 
	$πai_timî_h™dÀr
(
±_ªgs
 *
ªgs
)

592 
˝uid
=
	`πai_˝uid
();

593 
sÊags
;

595 
	`RTAI_SCHED_ISR_LOCK
();

596 
	`HAL_LOCK_LINUX
();

597 
πai_ªÆtime_úq
[
RTAI_TIMER_IRQ
].
	`úq_ack
(RTAI_TIMER_IRQ);

598 (((*)())
πai_ªÆtime_úq
[
RTAI_TIMER_IRQ
].
h™dÀr
)();

599 
	`HAL_UNLOCK_LINUX
();

600 
	`RTAI_SCHED_ISR_UNLOCK
();

602 i‡(
	`ã°_™d_˛ór_bô
(
˝uid
, &
hÆ_≥nded
Ë&& !
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
ùùe_roŸ_°©us
[cpuid])) {

603 
	`πai_°i
();

604 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

608 
	}
}

625 
	$πai_húq_di•©chî
(
úq
, 
±_ªgs
 *
ªgs
)

627 
˝uid
;

628 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
) {

629 
sÊags
;

631 
	`RTAI_SCHED_ISR_LOCK
();

632 
	`HAL_LOCK_LINUX
();

633 
πai_ªÆtime_úq
[
úq
].
	`úq_ack
(úq); 
	`mb
();

634 
πai_ªÆtime_úq
[
úq
].
	`h™dÀr
(úq,Ñèi_ªÆtime_úq[úq].
cookõ
);

635 
	`HAL_UNLOCK_LINUX
();

636 
	`RTAI_SCHED_ISR_UNLOCK
();

637 i‡(
πai_ªÆtime_úq
[
úq
].
ªtmode
 || !
	`ã°_™d_˛ór_bô
(
˝uid
, &
hÆ_≥nded
Ë|| 
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
ùùe_roŸ_°©us
[cpuid])) {

641 
lÊags
;

643 
lÊags
 = 
	`xchg
(
ùùe_roŸ_°©us
[
˝uid
 = 
	`πai_˝uid
()], (1 << 
IPIPE_STALL_FLAG
));

644 
πai_ªÆtime_úq
[
úq
].
	`úq_ack
(úq); 
	`mb
();

645 
	`hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
);

646 *
ùùe_roŸ_°©us
[
˝uid
] = 
lÊags
;

647 i‡(
	`ã°_bô
(
IPIPE_STALL_FLAG
, &
lÊags
)) {

651 
	`πai_°i
();

652 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

654 
	}
}

656 
RT_TRAP_HANDLER


657 
	$π_£t_å≠_h™dÀr
(
RT_TRAP_HANDLER
 
h™dÀr
)

659  (
RT_TRAP_HANDLER
)
	`xchg
(&
πai_å≠_h™dÀr
, 
h™dÀr
);

660 
	}
}

662 
	$πai_å≠_Áu…
 (
evít
, *
evd©a
)

664 c⁄° 
å≠2sig
[] = {

665 
SIGSEGV
,

666 
SIGBUS
,

667 
SIGFPE
,

668 
SIGFPE
,

669 
SIGFPE
,

670 
SIGFPE
,

671 
SIGTRAP
,

672 
SIGFPE
,

673 
SIGTRAP
,

674 
SIGSEGV
,

675 
SIGILL
,

676 
SIGTRAP
,

677 
SIGSEGV
,

678 
SIGFPE
,

685 
	`TRACE_RTAI_TRAP_ENTRY
(
evd©a
->
evít
, 0);

687 i‡(!
	`ö_hπ_mode
(
	`πai_˝uid
())) {

688 
¥›ag©e
;

697 i‡(
πai_å≠_h™dÀr
 && 
	`πai_å≠_h™dÀr
(
evít
, 
å≠2sig
[evít], (
±_ªgs
 *)
evd©a
, 
NULL
)) {

698 
ídå≠
;

701 
¥›ag©e
:

704 
ídå≠
:

705 
	`TRACE_RTAI_TRAP_EXIT
();

707 
	}
}

713 
	$πai_l§q_di•©chî
 (
vúq
)

715 
≥ndög
, 
§q
;

717 
	`•ö_lock
(&
πai_l§q_lock
);

718 (
≥ndög
 = 
πai_sy§eq_≥ndög
 & ~
πai_sy§eq_ru¬ög
)) {

719 
	`£t_bô
(
§q
 = 
	`f‚z
(
≥ndög
), &
πai_sy§eq_ru¬ög
);

720 
	`˛ór_bô
(
§q
, &
πai_sy§eq_≥ndög
);

721 
	`•ö_u∆ock
(&
πai_l§q_lock
);

723 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
)) {

724 
πai_sy§eq_èbÀ
[
§q
].
	`k_h™dÀr
();

727 
	`˛ór_bô
(
§q
, &
πai_sy§eq_ru¬ög
);

728 
	`•ö_lock
(&
πai_l§q_lock
);

730 
	`•ö_u∆ock
(&
πai_l§q_lock
);

731 
	}
}

738 
ölöe
 
	$πai_u§q_di•©chî
 (
§q
, 
œbñ
)

740 
	`TRACE_RTAI_SRQ_ENTRY
(
§q
);

742 i‡(
§q
 > 1 && srq < 
RTAI_NR_SRQS
 && 
	`ã°_bô
(§q, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
u_h™dÀr
) {

743  
πai_sy§eq_èbÀ
[
§q
].
	`u_h™dÀr
(
œbñ
);

746 
§q
 = 2; srq < 
RTAI_NR_SRQS
; srq++) {

747 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
œbñ
 ==Üabel) {

748  ()
§q
;

753 
	`TRACE_RTAI_SRQ_EXIT
();

756 
	}
}

758 (*
πai_lxπ_di•©chî
)(, , *);

760 (*
sched_öãr˚±_sysˇŒ_¥ﬁogue
)(
±_ªgs
 *);

762 
	$öãr˚±_sysˇŒ_¥ﬁogue
(
evít
, 
±_ªgs
 *
ªgs
){

763 i‡(
	`likñy
(
ªgs
->
ARM_r0
 >
RTAI_SYSCALL_NR
)) {

764 
§q
 = 
ªgs
->
ARM_r1
;

765 
¨g
 = 
ªgs
->
ARM_r2
;

767 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨g
, (*)
ªgs
->
ARM_r5
,Ñegs->
m§
, 1);

768 *((*)
ªgs
->
ARM_r3
Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
(§q, 
¨g
,ÑegsË: 
	`πai_u§q_di•©chî
(srq,árg);

769 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

770 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

775  
	`likñy
(
sched_öãr˚±_sysˇŒ_¥ﬁogue
 !
NULL
Ë? 
	`sched_öãr˚±_sysˇŒ_¥ﬁogue
(
ªgs
) : 0;

776 
	}
}

778 
	$πai_sysˇŒ_di•©chî
 (
±_ªgs
 *
ªgs
)

780 
§q
 = 
ªgs
->
ARM_r0
;

781 
¨g
 = 
ªgs
->
ARM_r1
;

783 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
ARM_r2
, (*Ïegs->
ARM_r3
,Ñegs->
m§
, 1);

785 *((*)&
ªgs
->
ARM_r0
Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
(§q, 
¨g
,ÑegsË: 
	`πai_u§q_di•©chî
(srq,árg);

786 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

787 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

791 
	}
}

793 
	$πai_domaö_íåy
(
iÊag
)

795 i‡(
iÊag
) {

796 
	`π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: <%s> mou¡ed ovî %†%s.\n", 
PACKAGE_VERSION
, 
HAL_TYPE
, 
HAL_VERSION_STRING
);

797 
	`π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: compûed wôh %s.\n", 
CONFIG_RTAI_COMPILER
);

799 ;;Ë
	`hÆ_su•íd_domaö
();

800 
	}
}

802 
πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
‰om
, 
evít
, (*
h™dÀr
)(, *))

804 i‡(
evít
 =
HAL_SYSCALL_PROLOGUE
) {

805 
sched_öãr˚±_sysˇŒ_¥ﬁogue
 = (*)
h™dÀr
;

808  ()
	`hÆ_ˇtch_evít
(
‰om
, 
evít
, (*)
h™dÀr
);

809 
	}
}

811 *
	gßved_hÆ_úq_h™dÀr
;

812 *
hÆ_úq_h™dÀr
;

814 #ifde‡
CONFIG_PROC_FS


817 
	$πai_ªad_¥oc
(*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

819 
PROC_PRINT_VARS
;

820 
i
, 
n⁄e
;

822 
	`PROC_PRINT
("\n** RTAI/ARM %†ovî Adeo†%s\n\n", 
RTAI_RELEASE
, 
HAL_VERSION_STRING
);

823 
	`PROC_PRINT
(" TSC fªquícy: %d Hz\n", 
RTAI_TSC_FREQ
);

824 
	`PROC_PRINT
(" Timî fªquícy: %d Hz\n", 
RTAI_TIMER_FREQ
);

825 
	`PROC_PRINT
(" TimîÜ©ícy: %dÇs, %d TSCÅicks\n", 
RTAI_TIMER_LATENCY
,

826 
	`πai_imuldiv
(
RTAI_TIMER_LATENCY
, 
RTAI_TSC_FREQ
, 1000000000));

827 
	`PROC_PRINT
(" Timî sëup: %dÇs\n", 
RTAI_TIMER_SETUP_TIME
);

828 
	`PROC_PRINT
(" Timer setup: %d TSCÅicks, %d IRQ-timerÅicks\n",

829 
	`πai_imuldiv
(
RTAI_TIMER_SETUP_TIME
, 
RTAI_TSC_FREQ
, 1000000000),

830 
	`πai_imuldiv
(
RTAI_TIMER_SETUP_TIME
, 
RTAI_TIMER_FREQ
, 1000000000));

832 
n⁄e
 = 1;

834 
	`PROC_PRINT
("\n** Real-time IRQs used by RTAI: ");

836 
i
 = 0; i < 
NR_IRQS
; i++) {

837 i‡(
πai_ªÆtime_úq
[
i
].
h™dÀr
) {

838 i‡(
n⁄e
) {

839 
	`PROC_PRINT
("\n");

840 
n⁄e
 = 0;

842 
	`PROC_PRINT
("\¿ #%dáà%p", 
i
, 
πai_ªÆtime_úq
[i].
h™dÀr
);

846 i‡(
n⁄e
)

847 
	`PROC_PRINT
("none");

849 
	`PROC_PRINT
("\n\n");

851 
	`PROC_PRINT
("** RTAIÉxtensionÅraps: \n\n");

852 
	`PROC_PRINT
(" SYSREQ=0x%x\n", 
RTAI_SYS_VECTOR
);

854 
	`PROC_PRINT
(" SHM=0x%x\n", 
RTAI_SHM_VECTOR
);

856 
	`PROC_PRINT
("\n");

858 
n⁄e
 = 1;

859 
	`PROC_PRINT
("** RTAI SYSREQs in use: ");

861 
i
 = 0; i < 
RTAI_NR_SRQS
; i++) {

862 i‡(
πai_sy§eq_èbÀ
[
i
].
k_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
u_h™dÀr
) {

863 
	`PROC_PRINT
("#%d ", 
i
);

864 
n⁄e
 = 0;

868 i‡(
n⁄e
)

869 
	`PROC_PRINT
("none");

871 
	`PROC_PRINT
("\n\n");

873 
PROC_PRINT_DONE
;

874 
	}
}

877 
	$πai_¥oc_ªgi°î
()

879 
¥oc_dú_íåy
 *
ít
;

881 
πai_¥oc_roŸ
 = 
	`¸óã_¥oc_íåy
("πai", 
S_IFDIR
, 0);

883 i‡(!
πai_¥oc_roŸ
) {

884 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: UnableÅo initialize /proc/rtai.\n");

888 
πai_¥oc_roŸ
->
ow√r
 = 
THIS_MODULE
;

890 
ít
 = 
	`¸óã_¥oc_íåy
("πai", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
);

892 i‡(!
ít
) {

893 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: UnableÅo initialize /proc/rtai/rtai.\n");

897 
ít
->
ªad_¥oc
 = 
πai_ªad_¥oc
;

900 
	}
}

903 
	$πai_¥oc_uƒegi°î
()

905 
	`ªmove_¥oc_íåy
("πai", 
πai_¥oc_roŸ
);

906 
	`ªmove_¥oc_íåy
("rtai", 0);

907 
	}
}

912 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

913 
ölöe
 *
	$hÆ_£t_úq_h™dÀr
(*
húq_di•©chî
)

915 i‡(
ßved_hÆ_úq_h™dÀr
 !
húq_di•©chî
) {

916 
ßved_hÆ_úq_h™dÀr
 = 
hÆ_úq_h™dÀr
;

917 
hÆ_úq_h™dÀr
 = 
húq_di•©chî
;

918  
ßved_hÆ_úq_h™dÀr
;

920 
hÆ_úq_h™dÀr
 = 
húq_di•©chî
;

921  
πai_húq_di•©chî
;

922 
	}
}

925 (*
π_£t_ihook
 ((*
hook‚
)()))()

927 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


928  ((*)())
	`xchg
(&
πai_i§_hook
, 
hook‚
);

930  
NULL
;

932 
	}
}

934 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

936 
	`hÆ_£t_löux_èsk_¥i‹ôy
(
èsk
, 
pﬁicy
, 
¥io
);

937 i‡(
èsk
->
π_¥i‹ôy
 !
¥io
 ||Åask->
pﬁicy
 !=Öolicy) {

938 
	`¥ötk
("RTAI[hÆ]: sched_£tscheduÀr’ﬁicy = %d,Öriÿ%dËÁûed, (%†--Öid = %d)\n", 
pﬁicy
, 
¥io
, 
èsk
->
comm
,Åask->
pid
);

940 
	}
}

946 
	$πai_ö°Æl_¨chdï
 ()

948 
hÆ_sysöfo_°ru˘
 
sysöfo
;

950 #i‡!
	`deföed
(
USE_LINUX_SYSCALL
Ë&& !deföed(
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL
)

954 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
öãr˚±_sysˇŒ_¥ﬁogue
);

956 
	`hÆ_gë_sysöfo
(&
sysöfo
);

958 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

960 
πai_tu«bÀs
.
˝u_‰eq
 = 
πai_˝u‰eq_¨g
;

961 
	}
}

967 
	$πai_unö°Æl_¨chdï
 ()

970 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
NULL
);

971 
	`πai_¨chdï_exô
();

972 
	}
}

974 
	#RT_PRINTK_SRQ
 1

	)

976 *
	gßved_hÆ_úq_h™dÀr
;

977 *
hÆ_úq_h™dÀr
;

980 
	$__πai_hÆ_öô
()

982 
å≠ƒ
, 
hÆöv
;

983 
hÆ_©å_°ru˘
 
©å
;

986 
hÆöv
 = 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_EVENTS
;Årapnr++) {

987 i‡(
hÆ_roŸ_domaö
->
	`hÆ_evít_h™dÀr_fun
(
å≠ƒ
)) {

988 
hÆöv
 = 1;

989 
	`¥ötk
("EVENT %d INVALID\n", 
å≠ƒ
);

992 i‡(
hÆöv
) {

993 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: HAL IMMEDIATE EVENT DISPATCHING BROKEN\n");

998 i‡(!(
πai_sy§eq_vúq
 = 
	`hÆ_Æloc_úq
())) {

999 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]:Ço virtual interruptávailable.\n");

1004 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_IRQS
;Årapnr++) {

1005 
πai_ªÆtime_úq
[
å≠ƒ
].
úq_ack
 = 
hÆ_roŸ_domaö
->
úqs
[å≠ƒ].
acknowÀdge
;

1007 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_CPUS
;Årapnr++) {

1008 
ùùe_roŸ_°©us
[
å≠ƒ
] = &
hÆ_roŸ_domaö
->
˝ud©a
[å≠ƒ].
°©us
;

1012 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, &
πai_l§q_di•©chî
, 
NULL
, 
IPIPE_HANDLE_MASK
);

1013 
ßved_hÆ_úq_h™dÀr
 = 
hÆ_úq_h™dÀr
;

1014 
hÆ_úq_h™dÀr
 = 
πai_húq_di•©chî
;

1017 
	`πai_ö°Æl_¨chdï
();

1019 #ifde‡
CONFIG_PROC_FS


1020 
	`πai_¥oc_ªgi°î
();

1024 
	`hÆ_öô_©å
(&
©å
);

1025 
©å
.
«me
 = "RTAI";

1026 
©å
.
domid
 = 
RTAI_DOMAIN_ID
;

1027 
©å
.
íåy
 = (*)
πai_domaö_íåy
;

1028 
©å
.
¥i‹ôy
 = 
	`gë_domaö_poöãr
(1)->priority + 100;

1029 
	`hÆ_ªgi°î_domaö
(&
πai_domaö
, &
©å
);

1032 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1033 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, (*)
πai_å≠_Áu…
);

1037 
	`¥ötk
(
KERN_INFO
 "RTAI[hÆ]: mou¡ed (%s, IMMEDIATE (INTERNAL IRQ†%s).\n", 
HAL_TYPE
, 
CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 ? "VECTORED" : "DISPATCHED");

1040 
	`¥ötk
("PIPELINEÜayers:\n");

1041 
å≠ƒ
 = 1; ;Årapnr++) {

1042 
hÆ_domaö_°ru˘
 *
√xt_domaö
;

1043 
√xt_domaö
 = 
	`gë_domaö_poöãr
(
å≠ƒ
);

1044 i‡(()
√xt_domaö
 < 10) ;

1045 
	`¥ötk
("%∞%x %†%d\n", 
√xt_domaö
,Çext_domaö->
domid
,Çext_domaö->
«me
,Çext_domaö->
¥i‹ôy
);

1048 #ifde‡
CONFIG_RTAI_DIAG_TSC_SYNC


1049 
	`öô_tsc_sync
();

1053 
	}
}

1056 
	$__πai_hÆ_exô
()

1058 
å≠ƒ
;

1059 #ifde‡
CONFIG_PROC_FS


1060 
	`πai_¥oc_uƒegi°î
();

1063 
hÆ_úq_h™dÀr
 = 
ßved_hÆ_úq_h™dÀr
;

1064 
	`hÆ_uƒegi°î_domaö
(&
πai_domaö
);

1065 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1066 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, 
NULL
);

1068 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, 
NULL
, NULL, 0);

1069 
	`hÆ_‰ì_úq
(
πai_sy§eq_vúq
);

1071 
	`πai_unö°Æl_¨chdï
();

1073 #ifde‡
CONFIG_RTAI_DIAG_TSC_SYNC


1074 
	`˛ónup_tsc_sync
();

1077 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: unmounted.\n");

1078 
	}
}

1080 
moduÀ_öô
(
__πai_hÆ_öô
);

1081 
moduÀ_exô
(
__πai_hÆ_exô
);

1087 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1089 
va_li°
 
¨gs
;

1090 
r
;

1092 
	`va_°¨t
(
¨gs
, 
fmt
);

1093 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1094 
	`va_íd
(
¨gs
);

1096  
r
;

1097 
	}
}

1103 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1105 
va_li°
 
¨gs
;

1106 
r
;

1108 
	`va_°¨t
(
¨gs
, 
fmt
);

1109 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1110 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1111 
	`hÆ_£t_¥ötk_async
(&
πai_domaö
);

1112 
	`va_íd
(
¨gs
);

1114  
r
;

1115 
	}
}

1117 
EXPORT_SYMBOL
(
πai_ªÆtime_úq
);

1118 
EXPORT_SYMBOL
(
π_ªque°_úq
);

1119 
EXPORT_SYMBOL
(
π_ªÀa£_úq
);

1120 
EXPORT_SYMBOL
(
π_£t_úq_cookõ
);

1121 
EXPORT_SYMBOL
(
π_°¨tup_úq
);

1122 
EXPORT_SYMBOL
(
π_shutdown_úq
);

1123 
EXPORT_SYMBOL
(
π_íabÀ_úq
);

1124 
EXPORT_SYMBOL
(
π_dißbÀ_úq
);

1125 
EXPORT_SYMBOL
(
π_mask_™d_ack_úq
);

1126 
EXPORT_SYMBOL
(
π_unmask_úq
);

1127 
EXPORT_SYMBOL
(
π_ack_úq
);

1128 
EXPORT_SYMBOL
(
π_ªque°_löux_úq
);

1129 
EXPORT_SYMBOL
(
π_‰ì_löux_úq
);

1130 
EXPORT_SYMBOL
(
π_≥nd_löux_úq
);

1131 
EXPORT_SYMBOL
(
u§_π_≥nd_löux_úq
);

1132 
EXPORT_SYMBOL
(
π_£t_úq_ack
);

1134 
EXPORT_SYMBOL
(
π_ªque°_§q
);

1135 
EXPORT_SYMBOL
(
π_‰ì_§q
);

1136 
EXPORT_SYMBOL
(
π_≥nd_löux_§q
);

1137 
EXPORT_SYMBOL
(
π_assign_úq_to_˝u
);

1139 
EXPORT_SYMBOL
(
π_ª£t_úq_to_sym_mode
);

1140 
EXPORT_SYMBOL
(
π_ªque°_timî
);

1141 
EXPORT_SYMBOL
(
π_‰ì_timî
);

1142 
EXPORT_SYMBOL
(
π_ªque°_πc
);

1143 
EXPORT_SYMBOL
(
π_ªÀa£_πc
);

1145 
πai_ˇlibøã_TC
 ();

1146 
EXPORT_SYMBOL
(
πai_ˇlibøã_TC
);

1148 
EXPORT_SYMBOL
(
π_£t_å≠_h™dÀr
);

1150 
EXPORT_SYMBOL
(
π_£t_ihook
);

1152 
EXPORT_SYMBOL
(
πai_¸ôiˇl_íãr
);

1153 
EXPORT_SYMBOL
(
πai_¸ôiˇl_exô
);

1154 
EXPORT_SYMBOL
(
πai_£t_löux_èsk_¥i‹ôy
);

1155 
EXPORT_SYMBOL
(
πai_löux_c⁄ãxt
);

1156 
EXPORT_SYMBOL
(
πai_domaö
);

1157 
EXPORT_SYMBOL
(
πai_¥oc_roŸ
);

1158 
EXPORT_SYMBOL
(
πai_tu«bÀs
);

1159 
EXPORT_SYMBOL
(
πai_˝u_lock
);

1160 
EXPORT_SYMBOL
(
πai_˝u_ªÆtime
);

1161 
EXPORT_SYMBOL
(
π_times
);

1162 
EXPORT_SYMBOL
(
π_smp_times
);

1164 
EXPORT_SYMBOL
(
π_¥ötk
);

1165 
EXPORT_SYMBOL
(
π_sync_¥ötk
);

1167 
EXPORT_SYMBOL
(
πai_ˇtch_evít
);

1169 
EXPORT_SYMBOL
(
πai_lxπ_di•©chî
);

1170 
EXPORT_SYMBOL
(
π_schedulög
);

1171 
EXPORT_SYMBOL
(
hÆ_≥nded
);

1172 
EXPORT_SYMBOL
(
ùùe_roŸ_°©us
);

	@/usr/src/rtai/base/arch/arm/hal/mach-at91/at91-timer.c

29 
	~<löux/sched.h
>

30 
	~<löux/öãºu±.h
>

31 
	~<löux/öô.h
>

32 
	~<asm/mach/úq.h
>

33 
	~<asm/sy°em.h
>

34 
	~<πai.h
>

35 
	~<asm/¨ch/timex.h
>

36 
	~<asm/¨ch/πai_timî.h
>

37 
	~<πai_åa˚.h
>

39 
	~<asm/¨ch/πai_timî.h
>

41 (*
exã∫_timî_i§
)(
±_ªgs
 *
ªgs
);

42 
	`πai_timî_h™dÀr
(
±_ªgs
 *
ªgs
);

44 
π_≥riodic
;

45 
	`EXPORT_SYMBOL
(
π_≥riodic
);

47 
	`π_ªque°_timî
 ((*
h™dÀr
)(), 
tick
, 
u£_≠ic
)

49 
Êags
;

51 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

53 
__ùùe_mach_timî°ﬁí
 = 1;

55 
π_times
.
tick_time
 = 
	`πai_rdtsc
();

56 
π_times
.
löux_tick
 = 
__ùùe_mach_ticks_≥r_jiffy
;

57 i‡(
tick
 > 0) {

58 
π_≥riodic
 = 1;

62 i‡(
tick
 > 
__ùùe_mach_ticks_≥r_jiffy
) {

63 
tick
 = 
__ùùe_mach_ticks_≥r_jiffy
;

65 
π_times
.
öå_time
 =Ñt_times.
tick_time
 + 
tick
;

66 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

67 
π_times
.
≥riodic_tick
 = 
tick
;

70 
	`©91_tc_wrôe
(
AT91_TC_CCR
, 
AT91_TC_CLKDIS
);

71 
	`©91_tc_wrôe
(
AT91_TC_CMR
, 
AT91_TC_TIMER_CLOCK3
 | 
AT91_TC_WAVESEL_UP_AUTO
 | 
AT91_TC_WAVE
);

72 
	`©91_tc_wrôe
(
AT91_TC_RC
, 
π_times
.
≥riodic_tick
);

73 
	`©91_tc_wrôe
(
AT91_TC_CCR
, 
AT91_TC_CLKEN
 | 
AT91_TC_SWTRG
);

75 
π_≥riodic
 = 0;

78 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

79 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

80 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

83 
	`©91_tc_wrôe
(
AT91_TC_CMR
, 
AT91_TC_TIMER_CLOCK3
);

84 
	`π_£t_timî_dñay
(
π_times
.
≥riodic_tick
);

87 
	`π_ªÀa£_úq
(
RTAI_TIMER_IRQ
);

89 
	`π_ªque°_úq
(
RTAI_TIMER_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

90 
exã∫_timî_i§
 = 
πai_timî_h™dÀr
;

92 
	`πai_¸ôiˇl_exô
(
Êags
);

95 
	}
}

97 
	$π_‰ì_timî
 ()

99 
Êags
;

101 
π_≥riodic
 = 0;

102 
__ùùe_mach_timî°ﬁí
 = 0;

103 
	`©91_tc_wrôe
(
AT91_TC_CMR
, 
AT91_TC_TIMER_CLOCK3
);

104 
	`π_£t_timî_dñay
(
__ùùe_mach_ticks_≥r_jiffy
);

105 
	`π_ªÀa£_úq
(
RTAI_TIMER_IRQ
);

106 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

107 
exã∫_timî_i§
 = 
NULL
;

108 
	`πai_ª°‹e_Êags
(
Êags
);

109 
	}
}

111 
	$πai_ˇlibøã_TC
 ()

113 
Êags
;

114 
RTIME
 
t
, 
dt
;

115 
i
;

117 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

118 
	`π_£t_timî_dñay
(
LATCH
);

119 
t
 = 
	`πai_rdtsc
();

120 
i
 = 0; i < 10000; i++) {

121 
	`π_£t_timî_dñay
(
LATCH
);

123 
dt
 = 
	`πai_rdtsc
(Ë- 
t
;

124 
	`πai_¸ôiˇl_exô
(
Êags
);

126  
	`πai_imuldiv
(
dt
, 100000, 
RTAI_CPU_FREQ
);

127 
	}
}

	@/usr/src/rtai/base/arch/arm/hal/mach-ep9301/ep9301-timer.c

23 
	~<πai.h
>

24 
	~<πai_åa˚.h
>

25 
	~<asm/¨ch/ï93xx_tsc.h
>

34 
	$π_ªque°_timî
(
π_timî_úq_h™dÀr_t
 
h™dÀr
, 
tick
, 
i386_Àgacy_dummy
)

36 
Êags
;

37 
is_⁄eshŸ
 = (
tick
 == 0);

39 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
, 
h™dÀr
, 
tick
);

42 i‡(
is_⁄eshŸ
)

43 
tick
 = 
LATCH
;

45 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

48 
	`oué
(0, 
TIMER1CONTROL
);

49 
	`oué
(
tick
 - 1, 
TIMER1LOAD
);

52 
π_times
.
tick_time
 = ({

53 
ï93xx_tsc_t
 
t0
;

54 
èrgë_off£t
;

55 
t
;

59 
t0
.
Œ
 = 
	`ï93xx_rdtsc
();

60 c⁄° 
ªÆtime_jiffõs
 = ()(
t0
.
Œ
 * 
HZ
Ë/ ()
RTAI_TSC_FREQ
;

61 c⁄° 
cuºít_off£t
 = 
t0
.
Œ
 - (
ªÆtime_jiffõs
 * 
RTAI_TSC_FREQ
Ë/ 
HZ
;

62 
èrgë_off£t
 = ((
RTAI_TSC_FREQ
 + 
HZ
/2Ë/ HZË- 
cuºít_off£t
;

63 } 
èrgë_off£t
 < 10);

67 
t
 = 
	`öl
(
TIMER4VALUELOW
);

68 } (
t
 - 
t0
.
u
.
low
Ë< 
èrgë_off£t
);

71 
	`oué
((
is_⁄eshŸ
Ë? 0x88 : 0xc8, 
TIMER1CONTROL
);

74 i‡(
t
 < 
t0
.
u
.
low
)

75 ++
t0
.
u
.
high
;

76 
t0
.
u
.
low
 = 
t
;

78 
t0
.
Œ
;

82 
	`oué
(1, 
TIMER1CLEAR
);

85 i‡(
is_⁄eshŸ
) {

87 
π_times
.
löux_time
 = 
	`πai_Œimd
(
ï93xx_jiffõs_d⁄e
 * 
LATCH
, 
RTAI_TSC_FREQ
, 
RTAI_TIMER_FREQ
);

88 
π_times
.
löux_tick
 = 
	`πai_imuldiv
(
LATCH
, 
RTAI_TSC_FREQ
, 
RTAI_TIMER_FREQ
);

89 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

92 
π_times
.
tick_time
 = 
	`πai_Œimd
‘t_times.tick_time, 
RTAI_TIMER_FREQ
, 
RTAI_TSC_FREQ
);

93 
π_times
.
löux_time
 = 
ï93xx_jiffõs_d⁄e
 * 
LATCH
;

94 
π_times
.
löux_tick
 = 
LATCH
;

95 
π_times
.
≥riodic_tick
 = 
tick
;

97 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
≥riodic_tick
;

99 
	`π_ªÀa£_úq
(
RTAI_TIMER_IRQ
);

100 i‡(
	`π_ªque°_úq
(
RTAI_TIMER_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0) < 0) {

101 
	`πai_¸ôiˇl_exô
(
Êags
);

102  -
EINVAL
;

112 
	`πai_¸ôiˇl_exô
(
Êags
);

114 
	}
}

121 
	$π_‰ì_timî
()

123 
Êags
;

125 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
, 0, 0);

127 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

133 
	`oué
(0, 
TIMER1CONTROL
);

135 
	`oué
(
LATCH
 - 1, 
TIMER1LOAD
);

137 
	`oué
(0xc8, 
TIMER1CONTROL
);

139 
	`oué
(1, 
TIMER1CLEAR
);

141 
	`π_ªÀa£_úq
(
RTAI_TIMER_IRQ
);

143 
	`πai_¸ôiˇl_exô
(
Êags
);

144 
	}
}

	@/usr/src/rtai/base/arch/arm/hal/mach-imx/imx-timer.c

31 
	~<löux/sched.h
>

32 
	~<löux/öãºu±.h
>

33 
	~<löux/öô.h
>

34 
	~<asm/mach/úq.h
>

35 
	~<asm/sy°em.h
>

36 
	~<πai.h
>

37 
	~<asm-¨m/¨ch-imx/timex.h
>

38 
	~<asm-¨m/¨ch-imx/πai_timî.h
>

39 
	~<πai_åa˚.h
>

41 vﬁ©ûê
πai_tsc
 
	gπai_tsc
;

42 
EXPORT_SYMBOL
(
πai_tsc
);

43 (*
ßved_adeos_timî_h™dÀr
)(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
);

46 vﬁ©ûê
πai_tsc
 
lx_timî
;

48 
	$•lô_timî
 () {

49 
lx_timî
.
tsc
 = 
π_times
.
löux_time
;

50  
lx_timî
.
h…sc
[0];

51 
	}
}

53 
	$so·_timî_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

55 
Êags
;

57 
	`rdtsc
();

59 
	`loˇl_úq_ßve
(
Êags
);

61 
	`do_timî
(
ªgs
);

62 
	`•lô_timî
();

64 
	`loˇl_úq_ª°‹e
(
Êags
);

66  
IRQ_HANDLED
;

67 
	}
}

69 
	$π_ªque°_timî
(
π_timî_úq_h™dÀr_t
 
h™dÀr
, 
tick
, 
u£_≠ic
)

71 
RTIME
 
t
;

72 
Êags
;

74 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
, 
h™dÀr
, 
tick
);

76 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

79 
πai_tsc
.
tsc
 = 0;

80 dÿ{} (sig√d )(
	`IMX_TCMP
(0Ë- 
	`IMX_TCN
(0)) > 0);

83 
π_times
.
löux_tick
 = 
LATCH
;

84 
π_times
.
≥riodic_tick
 = (
tick
 > 0 &&Åick < (
RTIME
Ït_times.
löux_tick
) ?Åick :Ñt_times.linux_tick;

85 
π_times
.
tick_time
 = 
t
 = 
	`rdtsc
();

86 
π_times
.
öå_time
 = 
t
 +Ñt_times.
≥riodic_tick
;

87 
π_times
.
löux_time
 = 
t
 +Ñt_times.
löux_tick
;

93 
	`π_£t_timî_dñay
(
π_times
.
≥riodic_tick
);

95 
ßved_adeos_timî_h™dÀr
 = 
	`xchg
(&
úq_desc
[
TIMER_8254_IRQ
].
a˘i⁄
->
h™dÀr
, (*)
so·_timî_öãºu±
);

97 
	`π_‰ì_globÆ_úq
(
TIMER_8254_IRQ
);

99 
	`π_ªque°_globÆ_úq
(
TIMER_8254_IRQ
, 
h™dÀr
);

102 
	`π_≥nd_löux_úq
(
TIMER_8254_IRQ
);

103 
	`πai_¸ôiˇl_exô
(
Êags
);

106 
	}
}

108 
	$π_‰ì_timî
()

110 
Êags
;

112 if(
ßved_adeos_timî_h™dÀr
 =
NULL
)

115 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
, 0, 0);

117 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

119 
	`π_‰ì_globÆ_úq
(
TIMER_8254_IRQ
);

120 
úq_desc
[
TIMER_8254_IRQ
].
a˘i⁄
->
h™dÀr
 =(*)
ßved_adeos_timî_h™dÀr
 ;

122 
	`πai_¸ôiˇl_exô
(
Êags
);

123 
	}
}

	@/usr/src/rtai/base/arch/arm/hal/mach-pxa/pxa-timer.c

28 
	~<löux/sched.h
>

29 
	~<löux/öãºu±.h
>

30 
	~<löux/öô.h
>

31 
	~<asm/mach/úq.h
>

32 
	~<asm/sy°em.h
>

33 
	~<πai.h
>

34 
	#do_Àds
()

	)

35 
	#do_£t_πc
()

	)

36 
	#do_¥ofûe
(
x
)

	)

37 
úqa˘i⁄
 
timî_úq
;

38 (*
gëtimeoff£t
)();

39 (*
£t_πc
)();

40 
	~<asm-¨m/¨ch-pxa/timex.h
>

41 
	~<asm-¨m/¨ch-pxa/πai_timî.h
>

42 
	~<πai_åa˚.h
>

44 vﬁ©ûê
πai_tsc
Ñtai_tsc;

45 
	`EXPORT_SYMBOL
(
πai_tsc
);

46 vﬁ©ûê
u32
 
so·_timî_m©ch
;

47 
	`timî_tick
(
±_ªgs
 *);

48 (*
ßved_adeos_timî_h™dÀr
)(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
);

51 
	$πai_pxa_GPIO_2_80_demux
–
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
 )

54 
	}
}

57 vﬁ©ûê
πai_tsc
 
	glx_timî
;

59 
	$•lô_timî
 () {

60 
lx_timî
.
tsc
 = 
π_times
.
löux_time
;

61  
lx_timî
.
h…sc
[0];

62 
	}
}

64 
	$so·_timî_öãºu±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

66 
Êags
;

68 
	`rdtsc
();

70 
	`loˇl_úq_ßve
(
Êags
);

72 
	`timî_tick
(
ªgs
);

73 
so·_timî_m©ch
 = 
	`•lô_timî
();

75 
	`loˇl_úq_ª°‹e
(
Êags
);

77  
IRQ_HANDLED
;

78 
	}
}

80 
	$π_ªque°_timî
(
π_timî_úq_h™dÀr_t
 
h™dÀr
, 
tick
, 
u£_≠ic
)

82 
RTIME
 
t
;

83 
Êags
;

85 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
, 
h™dÀr
, 
tick
);

86 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

91 
πai_tsc
.
tsc
 = 0;

96 }  (sig√d )(
OSMR0
 - 
OSCR
) >= 0 );

97 
OSSR
 = 
OSSR_M0
;

100 
π_times
.
löux_tick
 = 
LATCH
;

101 
π_times
.
≥riodic_tick
 = 
tick
 > 0 &&Åick < (
RTIME
Ït_times.
löux_tick
 ?Åick :Ñt_times.linux_tick;

102 
π_times
.
tick_time
 = 
t
 = 
	`rdtsc
();

103 
π_times
.
öå_time
 = 
t
 + (
RTIME
Ït_times.
≥riodic_tick
;

104 
π_times
.
löux_time
 = 
t
 + (
RTIME
Ït_times.
löux_tick
;

110 
	`π_£t_timî_m©ch_ªg
(
π_times
.
≥riodic_tick
);

112 
ßved_adeos_timî_h™dÀr
 = 
	`xchg
(&
úq_desc
[
TIMER_8254_IRQ
].
a˘i⁄
->
h™dÀr
,(*)
so·_timî_öãºu±
);

114 
	`π_‰ì_globÆ_úq
(
TIMER_8254_IRQ
);

116 
	`π_ªque°_globÆ_úq
(
TIMER_8254_IRQ
, 
h™dÀr
);

121 
	`π_≥nd_löux_úq
(
TIMER_8254_IRQ
);

122 
	`πai_¸ôiˇl_exô
(
Êags
);

125 
	}
}

127 
	$π_‰ì_timî
()

129 
Êags
;

131 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
, 0, 0);

133 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

135 
	`π_‰ì_globÆ_úq
(
TIMER_8254_IRQ
);

136 
úq_desc
[
TIMER_8254_IRQ
].
a˘i⁄
->
h™dÀr
 =(*)
ßved_adeos_timî_h™dÀr
 ;

138 
	`πai_¸ôiˇl_exô
(
Êags
);

139 
	}
}

	@/usr/src/rtai/base/arch/m68k/hal/hal.c

43 
	~<löux/moduÀ.h
>

44 
	~<löux/dñay.h
>

46 
MODULE_LICENSE
("GPL");

48 
	~<asm/πai_hÆ.h
>

50 #unde‡
INCLUDED_BY_HAL_C


51 
	#INCLUDED_BY_HAL_C


	)

53 
	#CHECK_STACK_IN_IRQ
 0

	)

55 
	~<löux/vîsi⁄.h
>

56 
	~<löux/¶ab.h
>

57 
	~<löux/î∫o.h
>

58 
	~<löux/moduÀ.h
>

59 
	~<löux/öãºu±.h
>

61 
	~<löux/c⁄sﬁe.h
>

62 
	~<asm/sy°em.h
>

64 
	~<asm/úq.h
>

65 
	~<asm/machdï.h
>

66 
	~<asm/io.h
>

67 
	~<asm/mmu_c⁄ãxt.h
>

68 
	~<asm/uac˚ss.h
>

69 
	~<asm/uni°d.h
>

70 
	~<asm/mcfsim.h
>

71 
	#__RTAI_HAL__


	)

72 
	~<asm/πai_hÆ.h
>

73 
	~<asm/πai_lxπ.h
>

74 #ifde‡
CONFIG_PROC_FS


75 
	~<löux/°©.h
>

76 
	~<löux/¥oc_fs.h
>

77 
	~<πai_¥oc_fs.h
>

79 
	~<°d¨g.h
>

81 
	gπai_˝u‰eq_¨g
 = 
MCF_CLK
;

82 
RTAI_MODULE_PARM
(
πai_˝u‰eq_¨g
, 
ul⁄g
);

84 
	#RTAI_NR_IRQS
 
IPIPE_NR_XIRQS


	)

90 
	#πai_£tup_≥riodic_≠ic
(
cou¡
, 
ve˘‹
)

	)

92 
	#πai_£tup_⁄eshŸ_≠ic
(
cou¡
, 
ve˘‹
)

	)

94 
	#__ack_APIC_úq
()

	)

96 °ru˘ { vﬁ©ûê
	mlocked
, 
	mrq°ed
; } 
	gπ_schedulög
[
RTAI_NR_CPUS
];

98 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


99 (*
πai_i§_hook
)(
˝uid
);

102 
hÆ_domaö_°ru˘
 
πai_domaö
;

104 
πai_ªÆtime_úq_s
 
πai_ªÆtime_úq
[
RTAI_NR_IRQS
];

107 
Êags
;

108 
cou¡
;

109 } 
πai_löux_úq
[
RTAI_NR_IRQS
];

112 (*
k_h™dÀr
)();

113 (*
u_h™dÀr
)();

114 
œbñ
;

115 } 
πai_sy§eq_èbÀ
[
RTAI_NR_SRQS
];

117 
πai_sy§eq_vúq
;

119 
πai_sy§eq_m≠
 = 1;

121 
πai_sy§eq_≥ndög
;

123 
πai_sy§eq_ru¬ög
;

125 
•ölock_t
 
πai_l§q_lock
 = 
SPIN_LOCK_UNLOCKED
;

127 vﬁ©ûê
πai_sync_Àvñ
;

129 
©omic_t
 
πai_sync_cou¡
 = 
	`ATOMIC_INIT
(1);

131 
desc_°ru˘
 
πai_sysvec
;

133 
desc_°ru˘
 
πai_cmpxchg_å≠_vec
;

134 
desc_°ru˘
 
πai_xchg_å≠_vec
;

136 
RT_TRAP_HANDLER
 
πai_å≠_h™dÀr
;

138 
π_times
Ñt_times;

140 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

142 
πai_swôch_d©a
 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

144 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


145 vﬁ©ûê*
ùùe_roŸ_°©us
[
RTAI_NR_CPUS
];

148 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

150 vﬁ©ûê
πai_˝u_ªÆtime
;

152 vﬁ©ûê
πai_˝u_lock
[2];

154 
	`πai_¸ôiˇl_íãr
 ((*
synch
)())

156 
Êags
;

158 
Êags
 = 
	`hÆ_¸ôiˇl_íãr
(
synch
);

159 i‡(
	`©omic_dec_™d_ã°
(&
πai_sync_cou¡
)) {

160 
πai_sync_Àvñ
 = 0;

161 } i‡(
synch
 !
NULL
) {

162 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: warning:Çested sync will fail.\n");

164  
Êags
;

165 
	}
}

167 
	$πai_¸ôiˇl_exô
 (
Êags
)

169 
	`©omic_öc
(&
πai_sync_cou¡
);

170 
	`hÆ_¸ôiˇl_exô
(
Êags
);

171 
	}
}

173 
	gIsﬁCpusMask
 = 0;

174 
RTAI_MODULE_PARM
(
IsﬁCpusMask
, 
ul⁄g
);

176 
π_ªque°_úq
 (
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
)

178 
Êags
;

180 i‡(
h™dÀr
 =
NULL
 || 
úq
 >
RTAI_NR_IRQS
) {

181  -
EINVAL
;

183 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
 !
NULL
) {

184  -
EBUSY
;

186 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

187 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = (*)handler;

188 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

189 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

190 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = 0;

191 
	`πai_¸ôiˇl_exô
(
Êags
);

192 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

193 
πai_ªÆtime_úq
[
úq
].
˝umask
 = 
	`π_assign_úq_to_˝u
(úq, 
IsﬁCpusMask
);

196 
	}
}

198 
	$π_ªÀa£_úq
 (
úq
)

200 
Êags
;

201 i‡(
úq
 >
RTAI_NR_IRQS
 || !
πai_ªÆtime_úq
[úq].
h™dÀr
) {

202  -
EINVAL
;

204 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

205 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = 
NULL
;

207 
	`πai_¸ôiˇl_exô
(
Êags
);

208 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

209 
	`π_assign_úq_to_˝u
(
úq
, 
πai_ªÆtime_úq
[úq].
˝umask
);

212 
	}
}

214 
	gtimî_öu£
 = 0;

216 
	$π_ack_tmr
(
úq
)

219 
	`__øw_wrôeb
(
MCFTIMER_TER_CAP
 | 
MCFTIMER_TER_REF
, 
	`TA
(
MCFTIMER_TER
));

222 
	`ªad_timî_˙t
();

224 
	}
}

226 
π_£t_úq_ack
(
úq
, (*
úq_ack
)())

228 i‡(
úq
 >
RTAI_NR_IRQS
) {

229  -
EINVAL
;

231 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = irq_ack;

233 
	}
}

235 
	$π_£t_úq_cookõ
 (
úq
, *
cookõ
)

237 i‡(
úq
 < 
RTAI_NR_IRQS
) {

238 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

240 
	}
}

242 
	$π_£t_úq_ªtmode
 (
úq
, 
ªtmode
)

244 i‡(
úq
 < 
RTAI_NR_IRQS
) {

245 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

247 
	}
}

249 
io_≠ic_úqs
;

251 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
deföed
 (
CONFIG_M54455
)

252 
	#πai_úq_desc
(
úq
Ë(
úq_desc
[úq].
chù
)

	)

255 
	#BEGIN_PIC
()

	)

256 
	#END_PIC
()

	)

257 #unde‡
hÆ_lock_úq


258 #unde‡
hÆ_u∆ock_úq


259 
	#hÆ_lock_úq
(
x
, 
y
, 
z
)

	)

260 
	#hÆ_u∆ock_úq
(
x
, 
y
)

	)

289 
	$π_°¨tup_úq
 (
úq
)

291 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

292 
ªtvÆ
;

294 
	`BEGIN_PIC
();

295 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

296 
ªtvÆ
 = 
	`πai_úq_desc
(
úq
)->
	`°¨tup
(irq);

297 
	`END_PIC
();

298  
ªtvÆ
;

302 
	}
}

333 
	$π_shutdown_úq
 (
úq
)

335 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

336 
	`BEGIN_PIC
();

337 
	`πai_úq_desc
(
úq
)->
	`shutdown
(irq);

338 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


339 
	`hÆ_˛ór_úq
(
hÆ_roŸ_domaö
, 
úq
);

341 
	`END_PIC
();

343 
	}
}

345 
ölöe
 
	$_π_íabÀ_úq
 (
úq
)

347 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

348 
	`BEGIN_PIC
();

349 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

350 
	`πai_úq_desc
(
úq
)->
	`íabÀ
(irq);

351 
	`END_PIC
();

353 
	}
}

382 
	$π_íabÀ_úq
 (
úq
)

384 
	`_π_íabÀ_úq
(
úq
);

385 
	}
}

414 
	$π_dißbÀ_úq
 (
úq
)

416 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

417 
	`BEGIN_PIC
();

418 
	`πai_úq_desc
(
úq
)->
	`dißbÀ
(irq);

419 
	`hÆ_lock_úq
(
hÆ_roŸ_domaö
, 0, 
úq
);

420 
	`END_PIC
();

422 
	}
}

455 
	$π_mask_™d_ack_úq
 (
úq
)

457 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

458 
	`πai_úq_desc
(
úq
)->
	`ack
(irq);

460 
	}
}

462 
ölöe
 
	$_π_íd_úq
 (
úq
)

464 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

465 
	`BEGIN_PIC
();

466 i‡(!(
úq_desc
[
úq
].
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

467 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

469 
	`πai_úq_desc
(
úq
)->
	`íd
(irq);

470 
	`END_PIC
();

472 
	}
}

504 
	$π_unmask_úq
 (
úq
)

506 
	`_π_íd_úq
(
úq
);

507 
	}
}

539 
	$π_ack_úq
 (
úq
)

541 
	`_π_íabÀ_úq
(
úq
);

542 
	}
}

544 
	$π_íd_úq
 (
úq
)

546 
	`_π_íd_úq
(
úq
);

547 
	}
}

549 
	$π_eoi_úq
 (
úq
)

551 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

552 
	`BEGIN_PIC
();

553 i‡(!(
úq_desc
[
úq
].
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

554 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

556 
	`πai_úq_desc
(
úq
)->
	`íd
(irq);

557 
	`END_PIC
();

559 
	}
}

585 
	$π_ªque°_löux_úq
 (
úq
, *
h™dÀr
, *
«me
, *
dev_id
)

587 
Êags
;

588 
ªtvÆ
;

590 i‡(
úq
 >
RTAI_NR_IRQS
 || !
h™dÀr
) {

591  -
EINVAL
;

594 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

595 #i‡(
LINUX_VERSION_CODE
 >
RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
Ë&& !
	`deföed
 (
CONFIG_M54455
)

596 
	`•ö_lock
(&
úq_desc
[
úq
].
lock
);

597 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
úq_desc
[úq].
a˘i⁄
) {

598 
πai_löux_úq
[
úq
].
Êags
 = 
úq_desc
[úq].
a˘i⁄
->flags;

599 
úq_desc
[
úq
].
a˘i⁄
->
Êags
 |
IRQF_SHARED
;

601 
	`•ö_u∆ock
(&
úq_desc
[
úq
].
lock
);

602 #ñi‡
	`deföed
 (
CONFIG_M54455
)

603 
	`•ö_lock
(&
úq_c⁄åﬁÀr
[
úq
]->
lock
);

604 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
úq_li°
[irq]) {

605 
πai_löux_úq
[
úq
].
Êags
 = 
úq_li°
[irq]->flags;

606 
úq_li°
[
úq
]->
Êags
 |
IRQF_SHARED
;

608 
	`•ö_u∆ock
(&
úq_c⁄åﬁÀr
[
úq
]->
lock
);

610 
	`πai_ª°‹e_Êags
(
Êags
);

612 
ªtvÆ
 = 
	`ªque°_úq
(
úq
, 
h™dÀr
, 
IRQF_SHARED
, 
«me
, 
dev_id
);

614  
ªtvÆ
;

615 
	}
}

628 
	$π_‰ì_löux_úq
 (
úq
, *
dev_id
)

630 
Êags
;

632 i‡(
úq
 >
RTAI_NR_IRQS
 || 
πai_löux_úq
[úq].
cou¡
 == 0) {

633  -
EINVAL
;

636 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

637 
	`‰ì_úq
(
úq
,
dev_id
);

638 --
πai_löux_úq
[
úq
].
cou¡
;

639 
	`πai_ª°‹e_Êags
(
Êags
);

642 
	}
}

652 
	$π_≥nd_löux_úq
 (
úq
)

654 
Êags
;

655 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

656 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

657 
	`πai_ª°‹e_Êags
(
Êags
);

658 
	}
}

660 
RTAI_SYSCALL_MODE
 
	$u§_π_≥nd_löux_úq
 (
úq
)

662 
Êags
;

663 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

664 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

665 
	`πai_ª°‹e_Êags
(
Êags
);

666 
	}
}

687 
π_ªque°_§q
 (
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)())

689 
Êags
;

690 
§q
;

692 i‡(
k_h™dÀr
 =
NULL
) {

693  -
EINVAL
;

696 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

697 i‡(
πai_sy§eq_m≠
 != ~0) {

698 
	`£t_bô
(
§q
 = 
	`ffz
(
πai_sy§eq_m≠
), &rtai_sysreq_map);

699 
πai_sy§eq_èbÀ
[
§q
].
k_h™dÀr
 = k_handler;

700 
πai_sy§eq_èbÀ
[
§q
].
u_h™dÀr
 = u_handler;

701 
πai_sy§eq_èbÀ
[
§q
].
œbñ
 =Üabel;

703 
§q
 = -
EBUSY
;

705 
	`πai_ª°‹e_Êags
(
Êags
);

707  
§q
;

708 
	}
}

718 
	$π_‰ì_§q
 (
§q
)

720  (
§q
 < 1 || srq >
RTAI_NR_SRQS
 || !
	`ã°_™d_˛ór_bô
(§q, &
πai_sy§eq_m≠
)Ë? -
EINVAL
 : 0;

721 
	}
}

733 
	$π_≥nd_löux_§q
 (
§q
)

735 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
) {

736 
Êags
;

737 
	`£t_bô
(
§q
, &
πai_sy§eq_≥ndög
);

738 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

739 
	`hÆ_≥nd_unc⁄d
(
πai_sy§eq_vúq
, 
	`πai_˝uid
());

740 
	`πai_ª°‹e_Êags
(
Êags
);

742 
	}
}

744 
úqªtu∫_t
 
	$πai_brﬂdˇ°_to_loˇl_timîs
 (
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

746  
RTAI_LINUX_IRQ_HANDLED
;

747 
	}
}

749 
	#REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë0

	)

751 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

	)

753 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


754 
	#RTAI_SCHED_ISR_LOCK
() \

756 i‡(!
π_schedulög
[0].
locked
++) { \

757 
π_schedulög
[0].
rq°ed
 = 0; \

759 } 0)

	)

760 
	#RTAI_SCHED_ISR_UNLOCK
() \

762 i‡(
π_schedulög
[0].
locked
 && !(--rt_scheduling[0].locked)) { \

763 i‡(
π_schedulög
[0].
rq°ed
 > 0 && 
πai_i§_hook
) { \

764 
	`πai_i§_hook
(0); \

767 } 0)

	)

769 
	#RTAI_SCHED_ISR_LOCK
() \

770 dÿ{ 
˝uid
 = 0; } 0)

	)

771 
	#RTAI_SCHED_ISR_UNLOCK
() \

772 dÿ{ } 0)

	)

775 
	#HAL_TICK_REGS
 
hÆ_tick_ªgs
[
˝uid
]

	)

777 #ifde‡
LOCKED_LINUX_IN_IRQ_HANDLER


778 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
); } 0)

	)

779 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

781 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`xchg
(
	`ROOT_STATUS_ADR
(
˝uid
), (1 << 
IPIPE_STALL_FLAG
)); } 0)

	)

782 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); 
	`ROOT_STATUS_VAL
(
˝uid
Ë
sÊags
; } 0)

	)

785 #i‚de‡
STR


786 
	#__STR
(
x
Ë#x

	)

787 
	#STR
(
x
Ë
	`__STR
(x)

	)

790 #i‚de‡
SYMBOL_NAME_STR


791 
	#SYMBOL_NAME_STR
(
X
Ë#X

	)

794 #ifde‡
CONFIG_MMU


796 
	#SAVE_REG
 \

805 "move #0x2000, %§\n\t"

	)

807 
	#RSTR_REG
 \

814 "πe\n\t"

	)

816 
	#_GET_CURRENT
 \

820 "movñ %a2@,%a2\n\t"

	)

822 
	#DEFINE_VECTORED_ISR
(
«me
, 
fun
) \

823 
	`__asm__
 ( \

824 
	`SYMBOL_NAME_STR
(
«me
) ":\n\t" \

825 
SAVE_REG
 \

826 
_GET_CURRENT
 \

827 "j§ "
	`SYMBOL_NAME_STR
(
fun
)"\n\t" \

828 
RSTR_REG
);

	)

832 
	#SAVE_REG
 \

856 "move #0x2000,%§\n\t"

	)

858 
	#RSTR_REG
 \

881 "πe"

	)

883 
	#DEFINE_VECTORED_ISR
(
«me
, 
fun
) \

884 
	`__asm__
 ( \

885 
	`SYMBOL_NAME_STR
(
«me
) ":\n\t" \

886 
SAVE_REG
 \

887 "j§ "
	`SYMBOL_NAME_STR
(
fun
)"\n\t" \

888 
RSTR_REG
);

	)

892 
	#πai_¸ôiˇl_sync
 
NULL


	)

894 
	$π_assign_úq_to_˝u
 (
úq
, 
˝us_mask
)

897 
	}
}

899 
	$π_ª£t_úq_to_sym_mode
 (
úq
)

902 
	}
}

904 
mcf_£âimîi¸
(
timî
, 
Àvñ
);

916 
π_ªque°_timî
 ((*
h™dÀr
)(), 
tick
, 
unu£d
)

918 
Êags
;

919 
ªtvÆ
;

921 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
,
h™dÀr
,
tick
);

922 i‡(
timî_öu£
Ë -
EINVAL
;

923 
timî_öu£
 = 1;

925 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

928 i‡(
tick
 > 0)

930 
π_times
.
löux_tick
 = 
LATCH
;

931 
π_times
.
tick_time
 = 
	`ªad_timî_˙t
();

932 
π_times
.
öå_time
 =Ñt_times.
tick_time
 + 
tick
;

933 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

934 
π_times
.
≥riodic_tick
 = 
tick
;

936 
	`π_£t_timî_dñay
(
tick
);

940 
π_times
.
tick_time
 = 
	`rdtsc
();

941 
π_times
.
löux_tick
 = 
	`imuldiv
(
LATCH
,
πai_tu«bÀs
.
˝u_‰eq
,
RTAI_FREQ_8254
);

942 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

943 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

944 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

946 
	`π_£t_timî_dñay
(
LATCH
);

949 
	`π_ªÀa£_úq
(
RT_TIMER_IRQ
);

950 
ªtvÆ
 = 
	`π_ªque°_globÆ_úq
(
RT_TIMER_IRQ
, 
h™dÀr
);

951 
	`π_£t_úq_ack
(
RT_TIMER_IRQ
, 
π_ack_tmr
);

952 
	`πai_ª°‹e_Êags
(
Êags
);

953  
ªtvÆ
;

954 
	}
}

961 
	$π_‰ì_timî
 ()

963 
Êags
;

965 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
,0,0);

967 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

968 
timî_öu£
 = 0;

970 
	`π_‰ì_globÆ_úq
(
RT_TIMER_IRQ
);

971 
hÆ_roŸ_domaö
->
úqs
[
RTAI_TIMER_LINUX_IRQ
].
	`acknowÀdge
(RTAI_TIMER_LINUX_IRQ);

973 
	`πai_ª°‹e_Êags
(
Êags
);

974 
	}
}

976 
	$rdtsc
()

978  
	`ªad_timî_˙t
(Ë* (
tu√d
.
˝u_‰eq
 / 
TIMER_FREQ
);

979 
	}
}

981 
RT_TRAP_HANDLER
 
	$π_£t_å≠_h™dÀr
 (
RT_TRAP_HANDLER
 
h™dÀr
)

983  (
RT_TRAP_HANDLER
)
	`xchg
(&
πai_å≠_h™dÀr
, 
h™dÀr
);

984 
	}
}

986 
	#CHECK_KERCTX
();

	)

988 
πai_8254_timî_h™dÀr
(
±_ªgs
 
ªgs
);

990 
	$πai_húq_di•©chî
 (
úq
, 
±_ªgs
 *
ªgs
)

992 
˝uid
 = 0;

994 
	`CHECK_KERCTX
();

996 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
) {

997 
sÊags
;

999 i‡(
úq
 =
RT_TIMER_IRQ
)

1001 
sÊags
 = 0;

1002 
	`HAL_LOCK_LINUX
();

1003 
	`RTAI_SCHED_ISR_LOCK
();

1004 i‡(
πai_ªÆtime_úq
[
RT_TIMER_IRQ
].
úq_ack
)

1005 
πai_ªÆtime_úq
[
RT_TIMER_IRQ
].
	`úq_ack
(RT_TIMER_IRQ);

1006 (((*)())
πai_ªÆtime_úq
[
RT_TIMER_IRQ
].
h™dÀr
)();

1007 
	`RTAI_SCHED_ISR_UNLOCK
();

1008 
	`HAL_UNLOCK_LINUX
();

1009 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

1010 
	`πai_°i
();

1011 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1012 
HAL_TICK_REGS
.
§
 = 
ªgs
->sr;

1013 
HAL_TICK_REGS
.
pc
 = 
ªgs
->pc;

1015 
	`__øw_gë_˝u_v¨
(
__ùùe_tick_ªgs
).
§
 = 
ªgs
->sr;

1016 
	`__øw_gë_˝u_v¨
(
__ùùe_tick_ªgs
).
pc
 = 
ªgs
->pc;

1018 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

1024 
	`HAL_LOCK_LINUX
();

1025 i‡(
πai_ªÆtime_úq
[
úq
].
úq_ack
)

1026 
πai_ªÆtime_úq
[
úq
].
	`úq_ack
(irq);

1027 
	`mb
();

1028 
	`RTAI_SCHED_ISR_LOCK
();

1029 i‡(
πai_ªÆtime_úq
[
úq
].
ªtmode
 &&Ñèi_ªÆtime_úq[úq].
	`h™dÀr
(úq,Ñèi_ªÆtime_úq[úq].
cookõ
)) {

1030 
	`RTAI_SCHED_ISR_UNLOCK
();

1031 
	`HAL_UNLOCK_LINUX
();

1034 
πai_ªÆtime_úq
[
úq
].
	`h™dÀr
(úq,Ñèi_ªÆtime_úq[úq].
cookõ
);

1035 
	`RTAI_SCHED_ISR_UNLOCK
();

1036 
	`HAL_UNLOCK_LINUX
();

1037 i‡(
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

1042 
lÊags
;

1043 
˝uid
 = 
	`πai_˝uid
();

1045 
lÊags
 = 
	`ROOT_STATUS_VAL
(
˝uid
);

1046 
	`ROOT_STATUS_VAL
(
˝uid
Ë(1 << 
IPIPE_STALL_FLAG
);

1047 i‡(
hÆ_roŸ_domaö
->
úqs
[
úq
].
acknowÀdge
)

1048 
hÆ_roŸ_domaö
->
úqs
[
úq
].
	`acknowÀdge
(irq);

1049 
	`mb
();

1050 
	`hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
);

1051 
	`ROOT_STATUS_VAL
(
˝uid
Ë
lÊags
;

1053 i‡(
	`ã°_bô
(
IPIPE_STALL_FLAG
, &
lÊags
)) {

1058 i‡(
úq
 =
hÆ_tick_úq
) {

1059 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1060 
HAL_TICK_REGS
.
§
 = 
ªgs
->sr;

1061 
HAL_TICK_REGS
.
pc
 = 
ªgs
->pc;

1063 
	`__øw_gë_˝u_v¨
(
__ùùe_tick_ªgs
).
§
 = 
ªgs
->sr;

1064 
	`__øw_gë_˝u_v¨
(
__ùùe_tick_ªgs
).
pc
 = 
ªgs
->pc;

1067 
	`πai_°i
();

1068 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

1070 
	}
}

1072 #ifde‡
HINT_DIAG_ECHO


1073 
	#HINT_DIAG_MSG
(
x
Ë
	)
x

1075 
	#HINT_DIAG_MSG
(
x
)

	)

1078 
	gPrötFpuTøp
 = 0;

1079 
RTAI_MODULE_PARM
(
PrötFpuTøp
, );

1080 
	gPrötFpuInô
 = 0;

1081 
RTAI_MODULE_PARM
(
PrötFpuInô
, );

1083 
	$πai_å≠_Áu…
 (
evít
, *
evd©a
)

1085 #ifde‡
HINT_DIAG_TRAPS


1086 
å≠s_ö_h¨d_öå
 = 0;

1088 
Êags
;

1089 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1090 i‡(
Êags
 & ~
ALLOWINT
) {

1091 i‡(!
	`ã°_™d_£t_bô
(
evít
, &
å≠s_ö_h¨d_öå
)) {

1092 
	`HINT_DIAG_MSG
(
	`π_¥ötk
("TRAP %d HAS INTERRUPT DISABLED (TRAPS PICTURE %lx).\n", 
evít
, 
å≠s_ö_h¨d_öå
););

1098 c⁄° 
å≠2sig
[] = {

1101 
SIGSEGV
,

1102 
SIGBUS
,

1103 
SIGILL
,

1104 
SIGFPE
,

1105 
SIGFPE
,

1106 
SIGFPE
,

1107 
SIGILL
,

1108 
SIGTRAP
,

1109 
SIGILL
,

1110 
SIGILL
,

1111 
SIGILL
,

1112 
SIGILL
,

1113 
SIGILL
,

1114 
SIGILL
,

1115 
SIGILL
,

1116 
SIGILL
,

1117 
SIGILL
,

1118 
SIGILL
,

1119 
SIGILL
,

1120 
SIGILL
,

1121 
SIGILL
,

1122 
SIGILL
,

1123 
SIGILL
,

1132 
SIGTRAP
,

1133 
SIGILL
,

1134 
SIGILL
,

1135 
SIGILL
,

1136 
SIGILL
,

1137 
SIGILL
,

1138 
SIGILL
,

1139 
SIGILL
,

1140 
SIGILL
,

1141 
SIGILL
,

1142 
SIGILL
,

1143 
SIGILL
,

1144 
SIGILL
,

1145 
SIGILL
,

1146 
SIGTRAP
,

1147 
SIGFPE
,

1148 
SIGFPE
,

1149 
SIGFPE
,

1150 
SIGFPE
,

1151 
SIGFPE
,

1152 
SIGFPE
,

1153 
SIGFPE
,

1154 
SIGILL
,

1155 
SIGILL
,

1156 
SIGILL
,

1157 
SIGILL
,

1158 
SIGILL
,

1159 
SIGILL
,

1160 
SIGILL
,

1161 
SIGILL
,

1162 
SIGFPE


1165 
	`TRACE_RTAI_TRAP_ENTRY
(
evöfo
->
evít
, 0);

1167 i‡(!
	`ö_hπ_mode
(
	`πai_˝uid
())) {

1168 
¥›ag©e
;

1171 i‡(
πai_å≠_h™dÀr
 && 
	`πai_å≠_h™dÀr
(
evít
, 
å≠2sig
[evít], (
±_ªgs
 *)
evd©a
, 
NULL
)) {

1172 
ídå≠
;

1174 
¥›ag©e
:

1176 
ídå≠
:

1177 
	`TRACE_RTAI_TRAP_EXIT
();

1179 
	}
}

1181 
	$πai_l§q_di•©chî
 (
vúq
)

1183 
≥ndög
, 
§q
;

1185 
	`•ö_lock
(&
πai_l§q_lock
);

1186 (
≥ndög
 = 
πai_sy§eq_≥ndög
 & ~
πai_sy§eq_ru¬ög
)) {

1187 
	`£t_bô
(
§q
 = 
	`f‚z
(
≥ndög
), &
πai_sy§eq_ru¬ög
);

1188 
	`˛ór_bô
(
§q
, &
πai_sy§eq_≥ndög
);

1189 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1190 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
)) {

1191 
πai_sy§eq_èbÀ
[
§q
].
	`k_h™dÀr
();

1193 
	`˛ór_bô
(
§q
, &
πai_sy§eq_ru¬ög
);

1194 
	`•ö_lock
(&
πai_l§q_lock
);

1196 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1197 
	}
}

1199 
ölöe
 
	$πai_u§q_di•©chî
 (
§q
, 
œbñ
)

1201 
	`TRACE_RTAI_SRQ_ENTRY
(
§q
);

1202 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
 && 
	`ã°_bô
(§q, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
u_h™dÀr
) {

1203  
πai_sy§eq_èbÀ
[
§q
].
	`u_h™dÀr
(
œbñ
);

1205 
§q
 = 1; srq < 
RTAI_NR_SRQS
; srq++) {

1206 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
œbñ
 ==Üabel) {

1207  ()
§q
;

1211 
	`TRACE_RTAI_SRQ_EXIT
();

1213 
	}
}

1215 
	~<asm/πai_usi.h
>

1216 (*
πai_lxπ_di•©chî
)(, );

1218 (*
sched_öãr˚±_sysˇŒ_¥ﬁogue
)(
±_ªgs
 *);

1220 
	$öãr˚±_sysˇŒ_¥ﬁogue
(
evít
, 
±_ªgs
 *
ªgs
)

1222 i‡(
	`likñy
(
ªgs
->
LINUX_SYSCALL_NR
 >
RTAI_SYSCALL_NR
)) {

1223 
§q
 = 
ªgs
->
LINUX_SYSCALL_REG1
;

1224 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
LINUX_SYSCALL_REG2
, (*Ïegs->
LINUX_SYSCALL_REG3
,Ñegs->
LINUX_SYSCALL_FLAGS
, 1);

1225 *((*)
ªgs
->
LINUX_SYSCALL_REG3
Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
(§q,Ñegs->
LINUX_SYSCALL_REG2
Ë: 
	`πai_u§q_di•©chî
(srq,Ñegs->LINUX_SYSCALL_REG2);

1226 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

1227 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

1232  
	`likñy
(
sched_öãr˚±_sysˇŒ_¥ﬁogue
 !
NULL
Ë? 
	`sched_öãr˚±_sysˇŒ_¥ﬁogue
(
ªgs
) : 0;

1233 
	}
}

1235 
ölöe
 
	$usi_SRQ_ˇŒ
(
§q
, 
¨gs
, * 
ªsu…
, 
l§
)

1237 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªsu…
, 
l§
, 1);

1239 
	}
}

1242 
asmlökage
 
	$πai_sysˇŒ_di•©chî
 (
__vﬁ©ûe
 
±_ªgs
 
±
)

1244 
˝uid
;

1246 
ªsu…
;

1248 i‡(
	`usi_SRQ_ˇŒ
(
±
.
d0
,Öt.
d1
, &
ªsu…
,Öt.
§
))

1250 
ªsu…
 = 
±
.
d0
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
’t.d0,Öt.
d1
Ë: 
	`πai_u§q_di•©chî
(pt.d0,Öt.d1);

1251 
±
.
d2
 = 
ªsu…
 & 0xFFFFFFFF;

1252 
±
.
d3
 = (
ªsu…
 >> 32);

1253 i‡(!
	`ö_hπ_mode
(
˝uid
 = 
	`πai_˝uid
())) {

1254 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
);

1258 
	}
}

1260 
πai_uvec_h™dÀr
();

1261 
DEFINE_VECTORED_ISR
(
πai_uvec_h™dÀr
, 
πai_sysˇŒ_di•©chî
);

1263 *
_ømvec
;

1265 
desc_°ru˘
 
	$πai_£t_g©e_ve˘‹
 (
ve˘‹
, 
ty≥
, 
d∂
, *
h™dÀr
)

1267 
desc_°ru˘
* 
ve˘‹_èbÀ
 = (desc_°ru˘*)
_ømvec
;

1268 
desc_°ru˘
 
idt_ñemít
 = 
ve˘‹_èbÀ
[
ve˘‹
];

1269 
ve˘‹_èbÀ
[
ve˘‹
].
a
 = 
h™dÀr
;

1270  
idt_ñemít
;

1271 
	}
}

1273 
πai_cmpxchg_å≠_h™dÀr
();

1274 
__asm__
 ( \

1284 
πai_xchg_å≠_h™dÀr
();

1285 
__asm__
 ( \

1292 
	$πai_ª£t_g©e_ve˘‹
 (
ve˘‹
, 
desc_°ru˘
 
e
)

1294 
desc_°ru˘
* 
ve˘‹_èbÀ
 = (desc_°ru˘*)
_ømvec
;

1295 
ve˘‹_èbÀ
[
ve˘‹
] = 
e
;

1296 
	}
}

1298 
	$πai_ö°Æl_¨chdï
 ()

1301 
Êags
;

1303 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1305 
πai_sysvec
 = 
	`πai_£t_g©e_ve˘‹
(
RTAI_SYS_VECTOR
, 15, 3, &
πai_uvec_h™dÀr
);

1306 
πai_cmpxchg_å≠_vec
 = 
	`πai_£t_g©e_ve˘‹
(
RTAI_CMPXCHG_TRAP_SYS_VECTOR
, 15, 3, &
πai_cmpxchg_å≠_h™dÀr
);

1307 
πai_xchg_å≠_vec
 = 
	`πai_£t_g©e_ve˘‹
(
RTAI_XCHG_TRAP_SYS_VECTOR
, 15, 3, &
πai_xchg_å≠_h™dÀr
);

1308 
	`πai_¸ôiˇl_exô
(
Êags
);

1310 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
öãr˚±_sysˇŒ_¥ﬁogue
);

1312 i‡(
πai_˝u‰eq_¨g
 == 0) {

1313 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1314 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1315 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

1317 
πai_tu«bÀs
.
˝u_‰eq
 = 
πai_˝u‰eq_¨g
;

1318 
	}
}

1320 
	$πai_unö°Æl_¨chdï
()

1322 
Êags
;

1324 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1325 
	`πai_ª£t_g©e_ve˘‹
(
RTAI_SYS_VECTOR
, 
πai_sysvec
);

1326 
	`πai_ª£t_g©e_ve˘‹
(
RTAI_CMPXCHG_TRAP_SYS_VECTOR
, 
πai_cmpxchg_å≠_vec
);

1327 
	`πai_ª£t_g©e_ve˘‹
(
RTAI_XCHG_TRAP_SYS_VECTOR
, 
πai_xchg_å≠_vec
);

1328 
	`πai_¸ôiˇl_exô
(
Êags
);

1330 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
NULL
);

1331 
	}
}

1334 
	$πai_ˇlibøã_8254
 ()

1336 
	`π_¥ötk
("RTAI WARNING:Ñtai_calibrate_8254() isn't implemented for Coldfire\n");

1338 
	}
}

1340 (*
π_£t_ihook
 ((*
hook‚
)()))()

1342 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


1343  ((*)())
	`xchg
(&
πai_i§_hook
, 
hook‚
);

1345  
NULL
;

1347 
	}
}

1349 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1351 
	`hÆ_£t_löux_èsk_¥i‹ôy
(
èsk
, 
pﬁicy
, 
¥io
);

1352 i‡(
èsk
->
π_¥i‹ôy
 !
¥io
 ||Åask->
pﬁicy
 !=Öolicy) {

1353 
	`¥ötk
("RTAI[hÆ]: sched_£tscheduÀr’ﬁicy = %d,Öriÿ%dËÁûed, (%†--Öid = %d)\n", 
pﬁicy
, 
¥io
, 
èsk
->
comm
,Åask->
pid
);

1355 
	}
}

1357 #ifde‡
CONFIG_PROC_FS


1359 
¥oc_dú_íåy
 *
	gπai_¥oc_roŸ
 = 
NULL
;

1361 
	$πai_ªad_¥oc
 (*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

1363 
PROC_PRINT_VARS
;

1364 
i
, 
n⁄e
;

1366 #ifde‡
CONFIG_MMU


1367 
	`PROC_PRINT
("\n** RTAI/m68k:\n\n");

1369 
	`PROC_PRINT
("\n** RTAI/m68knommu:\n\n");

1371 
n⁄e
 = 1;

1372 
	`PROC_PRINT
("\n** Real-time IRQs used by RTAI: ");

1373 
i
 = 0; i < 
RTAI_NR_IRQS
; i++) {

1374 i‡(
πai_ªÆtime_úq
[
i
].
h™dÀr
) {

1375 i‡(
n⁄e
) {

1376 
	`PROC_PRINT
("\n");

1377 
n⁄e
 = 0;

1379 
	`PROC_PRINT
("\¿ #%dáà%p", 
i
, 
πai_ªÆtime_úq
[i].
h™dÀr
);

1382 i‡(
n⁄e
) {

1383 
	`PROC_PRINT
("none");

1385 
	`PROC_PRINT
("\n\n");

1387 
	`PROC_PRINT
("** RTAIÉxtensionÅraps: \n\n");

1388 
	`PROC_PRINT
(" SYSREQ=0x%x\n\n", 
RTAI_SYS_VECTOR
);

1390 
n⁄e
 = 1;

1391 
	`PROC_PRINT
("** RTAI SYSREQs in use: ");

1392 
i
 = 0; i < 
RTAI_NR_SRQS
; i++) {

1393 i‡(
πai_sy§eq_èbÀ
[
i
].
k_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
u_h™dÀr
) {

1394 
	`PROC_PRINT
("#%d ", 
i
);

1395 
n⁄e
 = 0;

1398 i‡(
n⁄e
) {

1399 
	`PROC_PRINT
("none");

1401 
	`PROC_PRINT
("\n\n");

1403 
PROC_PRINT_DONE
;

1404 
	}
}

1406 
	$πai_¥oc_ªgi°î
 ()

1408 
¥oc_dú_íåy
 *
ít
;

1410 
πai_¥oc_roŸ
 = 
	`¸óã_¥oc_íåy
("πai",
S_IFDIR
, 0);

1411 i‡(!
πai_¥oc_roŸ
) {

1412 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai.\n");

1415 
πai_¥oc_roŸ
->
ow√r
 = 
THIS_MODULE
;

1416 
ít
 = 
	`¸óã_¥oc_íåy
("hÆ",
S_IFREG
|
S_IRUGO
|
S_IWUSR
,
πai_¥oc_roŸ
);

1417 i‡(!
ít
) {

1418 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai/hal.\n");

1421 
ít
->
ªad_¥oc
 = 
πai_ªad_¥oc
;

1424 
	}
}

1426 
	$πai_¥oc_uƒegi°î
 ()

1428 
	`ªmove_¥oc_íåy
("hÆ",
πai_¥oc_roŸ
);

1429 
	`ªmove_¥oc_íåy
("rtai",0);

1430 
	}
}

1434 
	gFIRST_LINE_OF_RTAI_DOMAIN_ENTRY


1437 
π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: <%s> mou¡ed ovî %†%s.\n", 
PACKAGE_VERSION
, 
HAL_TYPE
, 
HAL_VERSION_STRING
);

1438 
π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: compûed wôh %s.\n", 
CONFIG_RTAI_COMPILER
);

1440 
loˇl_úq_dißbÀ_hw
();

1441 ;;Ë
hÆ_su•íd_domaö
();

1443 
LAST_LINE_OF_RTAI_DOMAIN_ENTRY


1445 
πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
‰om
, 
evít
, (*
h™dÀr
)(, *))

1447 i‡(
evít
 =
HAL_SYSCALL_PROLOGUE
) {

1448 
sched_öãr˚±_sysˇŒ_¥ﬁogue
 = (*)
h™dÀr
;

1451  ()
	`hÆ_ˇtch_evít
(
‰om
, 
evít
, (*)
h™dÀr
);

1452 
	}
}

1454 *
	gßved_hÆ_úq_h™dÀr
;

1455 *
hÆ_úq_h™dÀr
;

1457 #unde‡
ack_bad_úq


1458 
	$ack_bad_úq
(
úq
)

1460 
	`¥ötk
("u√x≥˘ed IRQÅø∞© ve˘‹ %02x\n", 
úq
);

1461 
	}
}

1463 
	$__πai_hÆ_öô
 ()

1465 
å≠ƒ
, 
hÆöv
 = 0;

1466 
hÆ_©å_°ru˘
 
©å
;

1468 
hÆöv
 = 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_EVENTS
;Årapnr++) {

1469 i‡(
hÆ_roŸ_domaö
->
	`hÆ_evít_h™dÀr_fun
(
å≠ƒ
)) {

1470 
hÆöv
 = 1;

1471 
	`¥ötk
("EVENT %d INVALID.\n", 
å≠ƒ
);

1474 i‡(
hÆöv
) {

1475 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: HAL IMMEDIATE EVENT DISPATCHING BROKEN.\n");

1478 i‡(!(
πai_sy§eq_vúq
 = 
	`hÆ_Æloc_úq
())) {

1479 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: NO VIRTUAL INTERRUPT AVAILABLE.\n");

1480 
hÆöv
 = 1;

1483 i‡(
hÆöv
) {

1487 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1488 
å≠ƒ
 = 0;Åø≤∏< 
	`num_⁄löe_˝us
();Årapnr++) {

1489 
ùùe_roŸ_°©us
[
å≠ƒ
] = &
hÆ_roŸ_domaö
->
˝ud©a
[å≠ƒ].
°©us
;

1493 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, &
πai_l§q_di•©chî
, 
NULL
, 
IPIPE_HANDLE_MASK
);

1494 
ßved_hÆ_úq_h™dÀr
 = 
hÆ_úq_h™dÀr
;

1495 
hÆ_úq_h™dÀr
 = 
πai_húq_di•©chî
;

1497 
	`πai_ö°Æl_¨chdï
();

1499 #ifde‡
CONFIG_PROC_FS


1500 
	`πai_¥oc_ªgi°î
();

1503 
	`hÆ_öô_©å
(&
©å
);

1504 
©å
.
«me
 = "RTAI";

1505 
©å
.
domid
 = 
RTAI_DOMAIN_ID
;

1506 
©å
.
íåy
 = (*)
πai_domaö_íåy
;

1507 
©å
.
¥i‹ôy
 = 
	`gë_domaö_poöãr
(1)->priority + 100;

1508 
	`hÆ_ªgi°î_domaö
(&
πai_domaö
, &
©å
);

1509 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1510 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, (*)
πai_å≠_Áu…
);

1512 
	`πai_öô_èsk¥i_úqs
();

1514 
IsﬁCpusMask
 = 0;

1516 
	`¥ötk
(
KERN_INFO
 "RTAI[hÆ]: mou¡ed (%s, IMMEDIATE (INTERNAL IRQ†VECTORED)).\n", 
HAL_TYPE
);

1518 
	`¥ötk
("PIPELINEÜayers:\n");

1519 
å≠ƒ
 = 1; ;Årapnr++) {

1520 
hÆ_domaö_°ru˘
 *
√xt_domaö
;

1521 
√xt_domaö
 = 
	`gë_domaö_poöãr
(
å≠ƒ
);

1522 i‡(()
√xt_domaö
 < 10) ;

1523 
	`¥ötk
("%∞%x %†%d\n", 
√xt_domaö
,Çext_domaö->
domid
,Çext_domaö->
«me
,Çext_domaö->
¥i‹ôy
);

1527 
	}
}

1529 
	$__πai_hÆ_exô
 ()

1531 
å≠ƒ
;

1532 #ifde‡
CONFIG_PROC_FS


1533 
	`πai_¥oc_uƒegi°î
();

1535 
hÆ_úq_h™dÀr
 = 
ßved_hÆ_úq_h™dÀr
;

1536 
	`hÆ_uƒegi°î_domaö
(&
πai_domaö
);

1537 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1538 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, 
NULL
);

1540 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, 
NULL
, NULL, 0);

1541 
	`hÆ_‰ì_úq
(
πai_sy§eq_vúq
);

1542 
	`πai_unö°Æl_¨chdï
();

1544 i‡(
IsﬁCpusMask
) {

1545 
å≠ƒ
 = 0;Åø≤∏< 
IPIPE_NR_XIRQS
;Årapnr++) {

1546 
	`π_ª£t_úq_to_sym_mode
(
å≠ƒ
);

1550 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: unmounted.\n");

1551 
	}
}

1553 
moduÀ_öô
(
__πai_hÆ_öô
);

1554 
moduÀ_exô
(
__πai_hÆ_exô
);

1556 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,60,0)

1557 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1559 
va_li°
 
¨gs
;

1560 
r
;

1562 
	`va_°¨t
(
¨gs
, 
fmt
);

1563 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1564 
	`va_íd
(
¨gs
);

1566  
r
;

1567 
	}
}

1569 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1571 
va_li°
 
¨gs
;

1572 
r
;

1574 
	`va_°¨t
(
¨gs
, 
fmt
);

1575 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1576 
r
 = 
	`v¥ötk
(
fmt
, 
¨gs
);

1577 
	`hÆ_£t_¥ötk_async
(&
πai_domaö
);

1578 
	`va_íd
(
¨gs
);

1580  
r
;

1581 
	}
}

1583 
	#VSNPRINTF_BUF
 256

	)

1584 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1586 
buf
[
VSNPRINTF_BUF
];

1587 
va_li°
 
¨gs
;

1589 
	`va_°¨t
(
¨gs
, 
fmt
);

1590 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1591 
	`va_íd
(
¨gs
);

1592  
	`¥ötk
("%s", 
buf
);

1593 
	}
}

1595 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1597 
buf
[
VSNPRINTF_BUF
];

1598 
va_li°
 
¨gs
;

1599 
r
;

1601 
	`va_°¨t
(
¨gs
, 
fmt
);

1602 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1603 
	`va_íd
(
¨gs
);

1604 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1605 
r
 = 
	`¥ötk
("%s", 
buf
);

1606 
	`hÆ_£t_¥ötk_async
(&
πai_domaö
);

1608  
r
;

1609 
	}
}

1616 *
	$Œ2a
 (
Œ
, *
s
)

1618 
i
, 
k
, 
ul
;

1619 
a
[20];

1621 i‡(
Œ
 < 0) {

1622 
s
[0] = 1;

1623 
Œ
 = -ll;

1625 
s
[0] = 0;

1627 
i
 = 0;

1628 
Œ
 > 0xFFFFFFFF) {

1629 
Œ
 = 
	`πai_uŒdiv
÷l, 10, &
k
);

1630 
a
[++
i
] = 
k
 + '0';

1632 
ul
 = ((*)&
Œ
)[1];

1634 
ul
 = (
k
 = ul)/10;

1635 
a
[++
i
] = 
k
 - 
ul
*10 + '0';

1636 } 
ul
);

1637 i‡(
s
[0]) {

1638 
k
 = 1;

1639 
s
[0] = '-';

1641 
k
 = 0;

1643 
a
[0] = 0;

1644 (
s
[
k
++] = 
a
[
i
--]));

1645  
s
;

1646 
	}
}

1648 
EXPORT_SYMBOL
(
πai_ªÆtime_úq
);

1649 
EXPORT_SYMBOL
(
π_ªque°_úq
);

1650 
EXPORT_SYMBOL
(
π_ªÀa£_úq
);

1651 
EXPORT_SYMBOL
(
π_£t_úq_cookõ
);

1652 
EXPORT_SYMBOL
(
π_£t_úq_ªtmode
);

1653 
EXPORT_SYMBOL
(
π_°¨tup_úq
);

1654 
EXPORT_SYMBOL
(
π_shutdown_úq
);

1655 
EXPORT_SYMBOL
(
π_íabÀ_úq
);

1656 
EXPORT_SYMBOL
(
π_dißbÀ_úq
);

1657 
EXPORT_SYMBOL
(
π_mask_™d_ack_úq
);

1658 
EXPORT_SYMBOL
(
π_unmask_úq
);

1659 
EXPORT_SYMBOL
(
π_ack_úq
);

1660 
EXPORT_SYMBOL
(
π_íd_úq
);

1661 
EXPORT_SYMBOL
(
π_eoi_úq
);

1662 
EXPORT_SYMBOL
(
π_ªque°_löux_úq
);

1663 
EXPORT_SYMBOL
(
π_‰ì_löux_úq
);

1664 
EXPORT_SYMBOL
(
π_≥nd_löux_úq
);

1665 
EXPORT_SYMBOL
(
u§_π_≥nd_löux_úq
);

1666 
EXPORT_SYMBOL
(
π_ªque°_§q
);

1667 
EXPORT_SYMBOL
(
π_‰ì_§q
);

1668 
EXPORT_SYMBOL
(
π_≥nd_löux_§q
);

1669 
EXPORT_SYMBOL
(
π_assign_úq_to_˝u
);

1670 
EXPORT_SYMBOL
(
π_ª£t_úq_to_sym_mode
);

1671 
EXPORT_SYMBOL
(
π_ªque°_timî
);

1672 
EXPORT_SYMBOL
(
π_‰ì_timî
);

1673 
EXPORT_SYMBOL
(
rdtsc
);

1674 
EXPORT_SYMBOL
(
π_£t_å≠_h™dÀr
);

1675 
EXPORT_SYMBOL
(
π_£t_ihook
);

1676 
EXPORT_SYMBOL
(
π_£t_úq_ack
);

1678 
EXPORT_SYMBOL
(
πai_ˇlibøã_8254
);

1679 
EXPORT_SYMBOL
(
πai_brﬂdˇ°_to_loˇl_timîs
);

1680 
EXPORT_SYMBOL
(
πai_¸ôiˇl_íãr
);

1681 
EXPORT_SYMBOL
(
πai_¸ôiˇl_exô
);

1682 
EXPORT_SYMBOL
(
πai_£t_löux_èsk_¥i‹ôy
);

1684 
EXPORT_SYMBOL
(
πai_löux_c⁄ãxt
);

1685 
EXPORT_SYMBOL
(
πai_domaö
);

1686 
EXPORT_SYMBOL
(
πai_¥oc_roŸ
);

1687 
EXPORT_SYMBOL
(
πai_tu«bÀs
);

1688 
EXPORT_SYMBOL
(
πai_˝u_lock
);

1689 
EXPORT_SYMBOL
(
πai_˝u_ªÆtime
);

1690 
EXPORT_SYMBOL
(
π_times
);

1691 
EXPORT_SYMBOL
(
π_smp_times
);

1693 
EXPORT_SYMBOL
(
π_¥ötk
);

1694 
EXPORT_SYMBOL
(
π_sync_¥ötk
);

1695 
EXPORT_SYMBOL
(
Œ2a
);

1697 
EXPORT_SYMBOL
(
πai_£t_g©e_ve˘‹
);

1698 
EXPORT_SYMBOL
(
πai_ª£t_g©e_ve˘‹
);

1699 
EXPORT_SYMBOL
(
πai_ˇtch_evít
);

1701 
EXPORT_SYMBOL
(
πai_lxπ_di•©chî
);

1702 
EXPORT_SYMBOL
(
π_schedulög
);

1703 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1704 
EXPORT_SYMBOL
(
ùùe_roŸ_°©us
);

1709 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, *);

1710 (*
π_löux_hπ_√xt_shŸ
)(, *);

1716 
	`EXPORT_SYMBOL
(
π_löux_hπ_£t_mode
);

1717 
	`EXPORT_SYMBOL
(
π_löux_hπ_√xt_shŸ
);

1719 
	$π_ªÀa£_πc
()

1721 
	}
}

1723 
	$π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
)

1725 
	}
}

1727 
EXPORT_SYMBOL
(
π_ªque°_πc
);

1728 
EXPORT_SYMBOL
(
π_ªÀa£_πc
);

	@/usr/src/rtai/base/arch/ppc/hal/hal.c

34 
	~<löux/vîsi⁄.h
>

35 
	~<löux/¶ab.h
>

36 
	~<löux/î∫o.h
>

37 
	~<löux/moduÀ.h
>

38 
	~<löux/öô.h
>

39 
	~<löux/öãºu±.h
>

40 
	~<löux/úq.h
>

41 
	~<löux/c⁄sﬁe.h
>

43 
	~<asm/sy°em.h
>

44 
	~<asm/hw_úq.h
>

45 
	~<asm/úq.h
>

46 
	~<asm/io.h
>

47 
	~<asm/mmu_c⁄ãxt.h
>

48 
	~<asm/uac˚ss.h
>

49 
	~<asm/time.h
>

50 
	~<asm/ty≥s.h
>

51 
	~<asm/machdï.h
>

53 
	#__RTAI_HAL__


	)

54 
	~<asm/πai_hÆ.h
>

55 
	~<asm/πai_lxπ.h
>

58 #ifde‡
CONFIG_PROC_FS


59 
	~<löux/°©.h
>

60 
	~<löux/¥oc_fs.h
>

61 
	~<πai_¥oc_fs.h
>

64 
	~<°d¨g.h
>

67 
MODULE_LICENSE
("GPL");

69 
	#INTR_VECTOR
 5

	)

70 
	#DECR_VECTOR
 9

	)

72 
	gπai_˝u‰eq_¨g
 = 
RTAI_CALIBRATED_CPU_FREQ
;

73 
RTAI_MODULE_PARM
(
πai_˝u‰eq_¨g
, 
ul⁄g
);

75 
	#RTAI_NR_IRQS
 
IPIPE_NR_XIRQS


	)

77 
	gPrötFpuTøp
 = 0;

78 
RTAI_MODULE_PARM
(
PrötFpuTøp
, );

79 
	gPrötFpuInô
 = 0;

80 
RTAI_MODULE_PARM
(
PrötFpuInô
, );

81 
	gIsﬁCpusMask
 = 0;

82 
RTAI_MODULE_PARM
(
IsﬁCpusMask
, 
ul⁄g
);

84 °ru˘ { vﬁ©ûê
	mlocked
, 
	mrq°ed
; } 
	gπ_schedulög
[
RTAI_NR_CPUS
];

86 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


87 (*
πai_i§_hook
)(
˝uid
);

90 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


91 
	#RTAI_SCHED_ISR_LOCK
() \

93 i‡(!
π_schedulög
[
˝uid
].
locked
++) { \

94 
π_schedulög
[
˝uid
].
rq°ed
 = 0; \

96 
	}
} 0)

	)

97 
	#RTAI_SCHED_ISR_UNLOCK
() \

99 i‡(
π_schedulög
[
˝uid
].
locked
 && !(--rt_scheduling[cpuid].locked)) { \

100 i‡(
π_schedulög
[
˝uid
].
rq°ed
 > 0 && 
πai_i§_hook
) { \

101 
	`πai_i§_hook
(
˝uid
); \

104 } 0)

	)

106 
	#RTAI_SCHED_ISR_LOCK
() \

107 dÿ{ 
˝uid
 = 
	`πai_˝uid
(); } 0)

	)

108 
	#RTAI_SCHED_ISR_UNLOCK
() \

109 dÿ{ } 0)

	)

112 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,4,31) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)) || LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,9)

113 
	#HAL_TICK_REGS
 
hÆ_tick_ªgs
[
˝uid
]

	)

115 
	#HAL_TICK_REGS
 
hÆ_tick_ªgs


	)

118 #ifde‡
LOCKED_LINUX_IN_IRQ_HANDLER


119 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
 = 
	`πai_˝uid
()); } 0)

	)

120 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

122 
	#HAL_LOCK_LINUX
(Ëdÿ{ 
sÊags
 = 
	`xchg
((*)
	`ROOT_STATUS_ADR
(
˝uid
), (1 << 
IPIPE_STALL_FLAG
)); } 0)

	)

123 
	#HAL_UNLOCK_LINUX
(Ëdÿ{ 
	`πai_˛i
(); 
	`ROOT_STATUS_VAL
(
˝uid
Ë
sÊags
; } 0)

	)

126 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

128 
	#RTAI_IRQ_ACK
(
úq
) \

130 
πai_ªÆtime_úq
[
úq
].
	`úq_ack
(úq, 
úq_desc
 + irq); \

131 } 0)

	)

135 
	#RTAI_IRQ_ACK
(
úq
) \

137 (((*)())
πai_ªÆtime_úq
[
úq
].
úq_ack
)(irq); \

138 } 0)

	)

142 
	#CHECK_KERCTX
()

	)

144 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,11)

146 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

147 
	#πai_úq_desc
(
úq
Ë(
úq_desc
[úq].
h™dÀr
)

	)

149 
	#πai_úq_desc
(
úq
Ë(
úq_desc
[úq].
chù
)

	)

152 
	#BEGIN_PIC
()

	)

153 
	#END_PIC
()

	)

154 #unde‡
hÆ_lock_úq


155 #unde‡
hÆ_u∆ock_úq


156 
	#hÆ_lock_úq
(
x
, 
y
, 
z
)

	)

157 
	#hÆ_u∆ock_úq
(
x
, 
y
)

	)

161 
hw_öãºu±_ty≥
 
hÆ_°d_úq_dty≥
[];

162 
	#πai_úq_desc
(
úq
Ë(&
hÆ_°d_úq_dty≥
[úq])

	)

164 
	#BEGIN_PIC
() \

166 
Êags
, 
pÊags
, 
˝uid
; \

167 
	`πai_ßve_Êags_™d_˛i
(
Êags
); \

168 
˝uid
 = 
	`πai_˝uid
(); \

169 
pÊags
 = 
	`xchg
((*)
	`ROOT_STATUS_ADR
(
˝uid
), 1 << 
IPIPE_STALL_FLAG
); \

170 
	`πai_ßve_™d_lock_¥ìm±_cou¡
()

	)

172 
	#END_PIC
() \

173 
	`πai_ª°‹e_¥ìm±_cou¡
(); \

174 
	`ROOT_STATUS_VAL
(
˝uid
Ë
pÊags
; \

175 
	`πai_ª°‹e_Êags
(
Êags
); \

176 } 0)

	)

182 
©omic_t
 
	gπai_sync_cou¡
 = 
ATOMIC_INIT
(1);

183 vﬁ©ûê
	gπai_sync_Àvñ
;

184 
	gπai_sy§eq_vúq
;

185 
πai_ªÆtime_úq_s
 
	gπai_ªÆtime_úq
[
RTAI_NR_IRQS
];

187 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


188 vﬁ©ûê*
	gùùe_roŸ_°©us
[
RTAI_NR_CPUS
];

191 
ˇlibøti⁄_d©a
 
	gπai_tu«bÀs
;

193 *
hÆ_sysˇŒ_h™dÀr
;

195 
RT_TRAP_HANDLER
 
	gπai_å≠_h™dÀr
;

196 
machdï_ˇŒs
 
µc_md
;

197 
	gπai_sy§eq_vúq
;

198 
	gπai_sy§eq_m≠
 = 1;

199 
	gπai_sy§eq_≥ndög
;

200 
	gπai_sy§eq_ru¬ög
;

201 
•ölock_t
 
	gπai_l§q_lock
 = 
SPIN_LOCK_UNLOCKED
;

204 
	mÊags
;

205 
	mcou¡
;

206 } 
	gπai_löux_úq
[
RTAI_NR_IRQS
];

209 (*
	mk_h™dÀr
)();

210 (*
	mu_h™dÀr
)();

211 
	mœbñ
;

212 } 
	gπai_sy§eq_èbÀ
[
RTAI_NR_SRQS
];

214 vﬁ©ûê
	gπai_˝u_lock
[2];

215 
hÆ_domaö_°ru˘
 
	gπai_domaö
;

216 vﬁ©ûê
	gπai_˝u_ªÆtime
;

217 
π_times
 
	gπ_times
;

218 
πai_swôch_d©a
 
	gπai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

219 
π_times
 
	gπ_smp_times
[
RTAI_NR_CPUS
];

226 
πai_¸ôiˇl_íãr
 ((*
synch
)())

228 
Êags
;

230 
Êags
 = 
	`hÆ_¸ôiˇl_íãr
(
synch
);

231 i‡(
	`©omic_dec_™d_ã°
(&
πai_sync_cou¡
)) {

232 
πai_sync_Àvñ
 = 0;

233 } i‡(
synch
 !
NULL
) {

234 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: warning:Çested sync will fail.\n");

236  
Êags
;

237 
	}
}

244 
	$πai_¸ôiˇl_exô
 (
Êags
)

246 
	`©omic_öc
(&
πai_sync_cou¡
);

247 
	`hÆ_¸ôiˇl_exô
(
Êags
);

248 
	}
}

255 
π_ªque°_úq
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
)

257 
Êags
;

259 i‡(
h™dÀr
 =
NULL
 || 
úq
 >
RTAI_NR_IRQS
) {

260  -
EINVAL
;

262 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
 !
NULL
) {

263  -
EBUSY
;

266 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

267 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = (*)handler;

268 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

269 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

270 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = (*)
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

271 
	`πai_¸ôiˇl_exô
(
Êags
);

273 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

274 
πai_ªÆtime_úq
[
úq
].
˝umask
 = 
	`π_assign_úq_to_˝u
(úq, 
IsﬁCpusMask
);

278 
	}
}

285 
	$π_ªÀa£_úq
 (
úq
)

287 
Êags
;

288 i‡(
úq
 >
RTAI_NR_IRQS
 || !
πai_ªÆtime_úq
[úq].
h™dÀr
) {

289  -
EINVAL
;

292 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

293 
πai_ªÆtime_úq
[
úq
].
h™dÀr
 = 
NULL
;

294 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = (*)
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

295 
	`πai_¸ôiˇl_exô
(
Êags
);

297 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

298 
	`π_assign_úq_to_˝u
(
úq
, 
πai_ªÆtime_úq
[úq].
˝umask
);

302 
	}
}

309 
π_£t_úq_ack
(
úq
, (*
úq_ack
)())

311 i‡(
úq
 >
RTAI_NR_IRQS
) {

312  -
EINVAL
;

314 
πai_ªÆtime_úq
[
úq
].
úq_ack
 = irq_ack ? irq_ack : (*)
hÆ_roŸ_domaö
->
úqs
[úq].
acknowÀdge
;

316 
	}
}

323 
	$π_£t_úq_cookõ
 (
úq
, *
cookõ
)

325 i‡(
úq
 < 
RTAI_NR_IRQS
) {

326 
πai_ªÆtime_úq
[
úq
].
cookõ
 = cookie;

328 
	}
}

335 
	$π_£t_úq_ªtmode
 (
úq
, 
ªtmode
)

337 i‡(
úq
 < 
RTAI_NR_IRQS
) {

338 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

340 
	}
}

347 
	$π_°¨tup_úq
 (
úq
)

349 
ªtvÆ
;

351 
	`BEGIN_PIC
();

352 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

353 
ªtvÆ
 = 
	`πai_úq_desc
(
úq
)->
	`°¨tup
(irq);

354 
	`END_PIC
();

355  
ªtvÆ
;

356 
	}
}

363 
	$π_shutdown_úq
 (
úq
)

365 
	`BEGIN_PIC
();

366 
	`πai_úq_desc
(
úq
)->
	`shutdown
(irq);

367 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


368 
	`hÆ_˛ór_úq
(
hÆ_roŸ_domaö
, 
úq
);

370 
	`END_PIC
();

371 
	}
}

377 
ölöe
 
	$_π_íabÀ_úq
 (
úq
)

379 
	`BEGIN_PIC
();

380 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

381 
	`πai_úq_desc
(
úq
)->
	`íabÀ
(irq);

382 
	`END_PIC
();

383 
	}
}

390 
	$π_dißbÀ_úq
 (
úq
)

392 
	`BEGIN_PIC
();

393 
	`πai_úq_desc
(
úq
)->
	`dißbÀ
(irq);

394 
	`hÆ_lock_úq
(
hÆ_roŸ_domaö
, 
˝uid
, 
úq
);

395 
	`END_PIC
();

396 
	}
}

403 
ölöe
 
	$_π_íd_úq
 (
úq
)

405 
	`BEGIN_PIC
();

406 i‡(!(
úq_desc
[
úq
].
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

407 
	`hÆ_u∆ock_úq
(
hÆ_roŸ_domaö
, 
úq
);

409 
	`πai_úq_desc
(
úq
)->
	`íd
(irq);

410 
	`END_PIC
();

411 
	}
}

415 
	$π_mask_™d_ack_úq
 (
úq
Ë{ 
	`πai_úq_desc
(úq)->
	`ack
(úq); 
	}
}

417 
	$π_íabÀ_úq
 (
úq
Ë{ 
	`_π_íabÀ_úq
(úq); 
	}
}

419 
	$π_unmask_úq
 (
úq
Ë{ 
	`_π_íd_úq
(úq); 
	}
}

421 
	$π_ack_úq
 (
úq
Ë{ 
	`_π_íabÀ_úq
(úq); 
	}
}

423 
	$π_íd_úq
 (
úq
Ë{ 
	`_π_íd_úq
(úq); 
	}
}

430 
	$π_ªque°_löux_úq
 (
úq
, *
h™dÀr
, *
«me
, *
dev_id
)

432 
Êags
;

433 
ªtvÆ
;

435 i‡(
úq
 >
RTAI_NR_IRQS
 || !
h™dÀr
) {

436  -
EINVAL
;

439 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

440 
	`•ö_lock
(&
úq_desc
[
úq
].
lock
);

441 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
úq_desc
[úq].
a˘i⁄
) {

442 
πai_löux_úq
[
úq
].
Êags
 = 
úq_desc
[úq].
a˘i⁄
->flags;

443 
úq_desc
[
úq
].
a˘i⁄
->
Êags
 |
IRQF_SHARED
;

445 
	`•ö_u∆ock
(&
úq_desc
[
úq
].
lock
);

446 
	`πai_ª°‹e_Êags
(
Êags
);

448 
ªtvÆ
 = 
	`ªque°_úq
(
úq
, 
h™dÀr
, 
IRQF_SHARED
, 
«me
, 
dev_id
);

451 
	}
}

458 
	$π_‰ì_löux_úq
 (
úq
, *
dev_id
)

460 
Êags
;

462 i‡(
úq
 >
RTAI_NR_IRQS
 || 
πai_löux_úq
[úq].
cou¡
 == 0) {

463  -
EINVAL
;

466 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

467 
	`‰ì_úq
(
úq
, 
dev_id
);

469 
	`•ö_lock
(&
úq_desc
[
úq
].
lock
);

470 i‡(--
πai_löux_úq
[
úq
].
cou¡
 =0 && 
úq_desc
[úq].
a˘i⁄
) {

471 
úq_desc
[
úq
].
a˘i⁄
->
Êags
 = 
πai_löux_úq
[irq].flags;

473 
	`•ö_u∆ock
(&
úq_desc
[
úq
].
lock
);

475 
	`πai_ª°‹e_Êags
(
Êags
);

478 
	}
}

485 
	$π_≥nd_löux_úq
 (
úq
)

487 
Êags
;

488 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

489 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

490 
	`πai_ª°‹e_Êags
(
Êags
);

491 
	}
}

498 
RTAI_SYSCALL_MODE
 
	$u§_π_≥nd_löux_úq
 (
úq
)

500 
Êags
;

501 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

502 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

503 
	`πai_ª°‹e_Êags
(
Êags
);

504 
	}
}

511 
π_ªque°_§q
 (
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)())

513 
Êags
;

514 
§q
;

516 i‡(
k_h™dÀr
 =
NULL
) {

517  -
EINVAL
;

520 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

522 i‡(
πai_sy§eq_m≠
 != ~0) {

523 
	`£t_bô
(
§q
 = 
	`ffz
(
πai_sy§eq_m≠
), &rtai_sysreq_map);

524 
πai_sy§eq_èbÀ
[
§q
].
k_h™dÀr
 = k_handler;

525 
πai_sy§eq_èbÀ
[
§q
].
u_h™dÀr
 = u_handler;

526 
πai_sy§eq_èbÀ
[
§q
].
œbñ
 =Üabel;

528 
§q
 = -
EBUSY
;

530 
	`πai_ª°‹e_Êags
(
Êags
);

532  
§q
;

533 
	}
}

540 
	$π_‰ì_§q
 (
§q
)

542  (
§q
 < 1 || srq >
RTAI_NR_SRQS
 || !
	`ã°_™d_˛ór_bô
(§q, &
πai_sy§eq_m≠
)Ë? -
EINVAL
 : 0;

543 
	}
}

550 
	$π_≥nd_löux_§q
 (
§q
)

552 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
) {

553 
Êags
;

554 
	`£t_bô
(
§q
, &
πai_sy§eq_≥ndög
);

555 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

556 
	`hÆ_≥nd_unc⁄d
(
πai_sy§eq_vúq
, 
	`πai_˝uid
());

557 
	`πai_ª°‹e_Êags
(
Êags
);

559 
	}
}

561 
	#NR_EXCEPT
 48

	)

563 
	söãr˚±_íåy
 { 
	mh™dÀr
, 
	mªth™dÀr
; };

564 
öãr˚±_íåy
 *
öãr˚±_èbÀ
[];

565 
öãr˚±_íåy
 
	gﬁd_öãr˚±_èbÀ
[
NR_EXCEPT
];

571 
öãr˚±_íåy
 
	$πai_£t_g©e_ve˘‹
(
ve˘‹
, *
h™dÀr
, *
ªth™dÀr
)

573 
ﬁd_öãr˚±_èbÀ
[
ve˘‹
].
h™dÀr
 = 
öãr˚±_èbÀ
[vector]->handler;

574 
ﬁd_öãr˚±_èbÀ
[
ve˘‹
].
ªth™dÀr
 = 
öãr˚±_èbÀ
[vector]->rethandler;

575 i‡(
h™dÀr
) {

576 
öãr˚±_èbÀ
[
ve˘‹
]->
h™dÀr
 = ()handler;

578 i‡(
ªth™dÀr
) {

579 
öãr˚±_èbÀ
[
ve˘‹
]->
ªth™dÀr
 = ()rethandler;

581  
ﬁd_öãr˚±_èbÀ
[
ve˘‹
];

582 
	}
}

588 
	$πai_ª£t_g©e_ve˘‹
 (
ve˘‹
, 
h™dÀr
, 
ªth™dÀr
)

590 i‡(!((
h™dÀr
 | 
ﬁd_öãr˚±_èbÀ
[
ve˘‹
].h™dÀrË&& (
ªth™dÀr
 | old_intercept_table[vector].rethandler))) {

593 
öãr˚±_èbÀ
[
ve˘‹
]->
h™dÀr
 = h™dÀ∏? h™dÀ∏: 
ﬁd_öãr˚±_èbÀ
[vector].handler;

594 
öãr˚±_èbÀ
[
ve˘‹
]->
ªth™dÀr
 =Ñëh™dÀ∏?Ñëh™dÀ∏: 
ﬁd_öãr˚±_èbÀ
[vector].rethandler;

595 
	}
}

597 (*
de¸_timî_h™dÀr
)();

600 
	$πai_de¸_timî_h™dÀr
(
±_ªgs
 *
ªgs
)

602 
˝uid
;

603 
sÊags
;

605 
	`HAL_LOCK_LINUX
();

606 
	`RTAI_SCHED_ISR_LOCK
();

607 
	`de¸_timî_h™dÀr
();

608 
	`RTAI_SCHED_ISR_UNLOCK
();

609 
	`HAL_UNLOCK_LINUX
();

610 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

611 
	`πai_°i
();

612 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

616 
	}
}

623 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
Ë{ ; 
	}
}

624 
	$π_‰ì_≠ic_timîs
(Ë{ 
	`π_‰ì_timî
(); 
	}
}

625 
	$π_assign_úq_to_˝u
 (
úq
, 
˝us_mask
Ë{  0; 
	}
}

626 
	$π_ª£t_úq_to_sym_mode
 (
úq
Ë{  0; 
	}
}

629 
πai_ªque°_tickdev
();

631 
πai_ªÀa£_tickdev
();

637 
π_ªque°_timî
 ((*
h™dÀr
)(), 
tick
, 
u£_≠ic
)

639 
Êags
;

641 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

644 
π_times
.
tick_time
 = 
	`πai_rdtsc
();

645 
π_times
.
löux_tick
 = 
tb_ticks_≥r_jiffy
;

646 i‡(
tick
 > 0) {

648 i‡(
tick
 > 
tb_ticks_≥r_jiffy
) {

649 
tick
 = 
tb_ticks_≥r_jiffy
;

651 
π_times
.
öå_time
 =Ñt_times.
tick_time
 + 
tick
;

652 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

653 
π_times
.
≥riodic_tick
 = 
tick
;

654 #ifde‡
CONFIG_40x


656 
	`mt•r
(
SPRN_TCR
, 
	`mf•r
(SPRN_TCRË| 
TCR_ARE
);

658 
	`mt•r
(
SPRN_PIT
, 
tick
);

662 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

663 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

664 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

665 #ifde‡
CONFIG_40x


667 
	`mt•r
(
SPRN_TCR
, 
	`mf•r
(SPRN_TCRË& ~
TCR_ARE
);

672 
	`π_ªÀa£_úq
(
RTAI_TIMER_DECR_IRQ
);

673 
de¸_timî_h™dÀr
 = 
h™dÀr
;

677 
	`πai_dißrm_de¸
(
	`πai_˝uid
(), 1);

678 
	`π_£t_timî_dñay
(
π_times
.
≥riodic_tick
);

679 
	`πai_£t_g©e_ve˘‹
(
DECR_VECTOR
, 
πai_de¸_timî_h™dÀr
, 0);

681 
	`πai_ªque°_tickdev
();

682 
	`πai_ª°‹e_Êags
(
Êags
);

684 
	}
}

691 
	$π_‰ì_timî
 ()

693 
Êags
;

695 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

696 
	`πai_ªÀa£_tickdev
();

697 #ifde‡
CONFIG_40x


699 
	`mt•r
(
SPRN_TCR
, 
	`mf•r
(SPRN_TCRË| 
TCR_ARE
);

701 
	`mt•r
(
SPRN_PIT
, 
tb_ticks_≥r_jiffy
);

703 
	`πai_ª£t_g©e_ve˘‹
(
DECR_VECTOR
, 0, 0);

704 
	`πai_dißrm_de¸
(
	`πai_˝uid
(), 0);

705 
	`πai_ª°‹e_Êags
(
Êags
);

706 
	}
}

708 
	$π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
)

710 
	`π_¥ötk
("*** RTC NOT IMPLEMENTED YET ON THIS ARCH ***\n");

711 
	}
}

713 
	$π_ªÀa£_πc
()

715 
	`π_¥ötk
("*** RTC NOT IMPLEMENTED YET ON THIS ARCH ***\n");

716 
	}
}

723 
	g•urious_öãºu±s
;

725 
	$πai_húq_di•©chî
(
±_ªgs
 *
ªgs
)

727 
˝uid
;

728 
úq
;

730 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,14)

731 i‡((
úq
 = 
µc_md
.
	`gë_úq
()Ë>
RTAI_NR_IRQS
) {

733 i‡((
úq
 = 
µc_md
.
	`gë_úq
(
ªgs
)Ë>
RTAI_NR_IRQS
) {

735 
•urious_öãºu±s
++;

739 i‡(
πai_ªÆtime_úq
[
úq
].
h™dÀr
) {

740 
sÊags
;

742 
	`HAL_LOCK_LINUX
();

743 
	`RTAI_IRQ_ACK
(
úq
);

745 
	`RTAI_SCHED_ISR_LOCK
();

746 
πai_ªÆtime_úq
[
úq
].
	`h™dÀr
(úq,Ñèi_ªÆtime_úq[úq].
cookõ
);

747 
	`RTAI_SCHED_ISR_UNLOCK
();

748 
	`HAL_UNLOCK_LINUX
();

750 i‡(
πai_ªÆtime_úq
[
úq
].
ªtmode
 || 
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

754 
lÊags
;

755 
lÊags
 = 
	`xchg
((*)
	`ROOT_STATUS_ADR
(
˝uid
 = 
	`πai_˝uid
()), (1 << 
IPIPE_STALL_FLAG
));

756 
	`RTAI_IRQ_ACK
(
úq
);

758 
	`hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
);

759 
	`ROOT_STATUS_VAL
(
˝uid
Ë
lÊags
;

760 i‡(
	`ã°_bô
(
IPIPE_STALL_FLAG
, &
lÊags
)) {

764 
	`πai_°i
();

765 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

767 
	}
}

774 
RT_TRAP_HANDLER
 
	$π_£t_å≠_h™dÀr
 (
RT_TRAP_HANDLER
 
h™dÀr
)

776  (
RT_TRAP_HANDLER
)
	`xchg
(&
πai_å≠_h™dÀr
, 
h™dÀr
);

777 
	}
}

784 
	$πai_å≠_Áu…
 (
evít
, *
evd©a
)

786 #ifde‡
HINT_DIAG_TRAPS


787 
å≠s_ö_h¨d_öå
 = 0;

789 
Êags
;

790 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

791 i‡(!
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

792 i‡(!
	`ã°_™d_£t_bô
(
evít
, &
å≠s_ö_h¨d_öå
)) {

793 
	`HINT_DIAG_MSG
(
	`π_¥ötk
("TRAP %d HAS INTERRUPT DISABLED (TRAPS PICTURE %lx).\n", 
evít
, 
å≠s_ö_h¨d_öå
););

799 c⁄° 
å≠2sig
[] = {

800 
SIGSEGV
,

801 
SIGBUS
,

802 
SIGFPE
,

803 
SIGFPE
,

804 
SIGFPE
,

805 
SIGFPE
,

806 
SIGTRAP
,

807 
SIGFPE
,

808 
SIGTRAP
,

809 
SIGSEGV
,

810 
SIGILL
,

811 
SIGTRAP
,

812 
SIGSEGV
,

813 
SIGFPE
,

820 
	`TRACE_RTAI_TRAP_ENTRY
(
evd©a
->
evít
, 0);

822 i‡(!
	`ö_hπ_mode
(
	`πai_˝uid
())) {

823 
¥›ag©e
;

826 i‡(
evít
 == 2) {

841 
ídå≠
;

845 i‡(
πai_å≠_h™dÀr
 && 
	`πai_å≠_h™dÀr
(
evít
, 
å≠2sig
[evít], (
±_ªgs
 *)
evd©a
, 
NULL
)) {

846 
ídå≠
;

849 
¥›ag©e
:

852 
ídå≠
:

853 
	`TRACE_RTAI_TRAP_EXIT
();

855 
	}
}

862 
	$πai_l§q_di•©chî
 (
vúq
)

864 
≥ndög
, 
§q
;

866 
	`•ö_lock
(&
πai_l§q_lock
);

867 (
≥ndög
 = 
πai_sy§eq_≥ndög
 & ~
πai_sy§eq_ru¬ög
)) {

868 
	`£t_bô
(
§q
 = 
	`f‚z
(
≥ndög
), &
πai_sy§eq_ru¬ög
);

869 
	`˛ór_bô
(
§q
, &
πai_sy§eq_≥ndög
);

870 
	`•ö_u∆ock
(&
πai_l§q_lock
);

872 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
)) {

873 
πai_sy§eq_èbÀ
[
§q
].
	`k_h™dÀr
();

876 
	`˛ór_bô
(
§q
, &
πai_sy§eq_ru¬ög
);

877 
	`•ö_lock
(&
πai_l§q_lock
);

879 
	`•ö_u∆ock
(&
πai_l§q_lock
);

880 
	}
}

887 
ölöe
 
	$πai_u§q_di•©chî
 (
§q
, 
œbñ
)

889 
	`TRACE_RTAI_SRQ_ENTRY
(
§q
);

891 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
 && 
	`ã°_bô
(§q, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
u_h™dÀr
) {

892  
πai_sy§eq_èbÀ
[
§q
].
	`u_h™dÀr
(
œbñ
);

894 
§q
 = 1; srq < 
RTAI_NR_SRQS
; srq++) {

895 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
œbñ
 ==Üabel) {

896  ()
§q
;

901 
	`TRACE_RTAI_SRQ_EXIT
();

904 
	}
}

920 
	~<asm/πai_usi.h
>

921 (*
πai_lxπ_di•©chî
)(, , *);

923 (*
sched_öãr˚±_sysˇŒ_¥ﬁogue
)(
±_ªgs
 *);

925 
	$öãr˚±_sysˇŒ_¥ﬁogue
(
evít
, 
±_ªgs
 *
ªgs
){

926 i‡(
	`likñy
(
ªgs
->
g¥
[0] >
RTAI_SYSCALL_NR
)) {

927 
§q
 = 
ªgs
->
g¥
[3];

928 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
g¥
[4], (*Ïegs->g¥[5],Ñegs->
m§
, 1);

929 *((*)
ªgs
->
g¥
[5]Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
(§q,Ñegs->g¥[4],ÑegsË: 
	`πai_u§q_di•©chî
(srq,Ñegs->gpr[4]);

930 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

931 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

936  
	`likñy
(
sched_öãr˚±_sysˇŒ_¥ﬁogue
 !
NULL
Ë? 
	`sched_öãr˚±_sysˇŒ_¥ﬁogue
(
ªgs
) : 0;

937 
	}
}

940 
asmlökage
 
	$πai_sysˇŒ_di•©chî
 (
±_ªgs
 *
ªgs
)

942 
§q
 = 
ªgs
->
g¥
[0];

944 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
g¥
[4], (*Ïegs->g¥[5],Ñegs->
m§
, 1);

946 *((*)
ªgs
->
g¥
[3]Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_di•©chî
(§q,Ñegs->g¥[4],ÑegsË: 
	`πai_u§q_di•©chî
(srq,Ñegs->gpr[4]);

948 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

949 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

953 
	}
}

959 
	$πai_ö°Æl_¨chdï
 ()

961 
hÆ_sysöfo_°ru˘
 
sysöfo
;

963 #i‡!
	`deföed
(
USE_LINUX_SYSCALL
Ë&& !deföed(
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL
)

967 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
öãr˚±_sysˇŒ_¥ﬁogue
);

969 
	`hÆ_gë_sysöfo
(&
sysöfo
);

971 i‡(
sysöfo
.
¨chdï
.
tmúq
 !
RTAI_TIMER_DECR_IRQ
) {

972 
	`¥ötk
("RTAI/ùùe:Åhêtimî i¡îru± %d i†nŸ suµ‹ãd\n", 
sysöfo
.
¨chdï
.
tmúq
);

975 i‡(
πai_˝u‰eq_¨g
 == 0) {

976 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

978 
πai_tu«bÀs
.
˝u_‰eq
 = 
πai_˝u‰eq_¨g
;

979 
	}
}

986 
	$πai_unö°Æl_¨chdï
 ()

989 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
NULL
);

990 
	}
}

997 (*
π_£t_ihook
 ((*
hook‚
)()))()

999 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


1000  ((*)())
	`xchg
(&
πai_i§_hook
, 
hook‚
);

1002  
NULL
;

1004 
	}
}

1011 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1013 
	`hÆ_£t_löux_èsk_¥i‹ôy
(
èsk
, 
pﬁicy
, 
¥io
);

1014 i‡(
èsk
->
π_¥i‹ôy
 !
¥io
 ||Åask->
pﬁicy
 !=Öolicy) {

1015 
	`¥ötk
("RTAI[hÆ]: sched_£tscheduÀr’ﬁicy = %d,Öriÿ%dËÁûed, (%†--Öid = %d)\n", 
pﬁicy
, 
¥io
, 
èsk
->
comm
,Åask->
pid
);

1017 
	}
}

1019 #ifde‡
CONFIG_PROC_FS


1021 
¥oc_dú_íåy
 *
	gπai_¥oc_roŸ
 = 
NULL
;

1028 
	$πai_ªad_¥oc
 (*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

1030 
PROC_PRINT_VARS
;

1031 
i
, 
n⁄e
;

1033 
	`PROC_PRINT
("\n** RTAI/ppc over ADEOS/ipipe:\n\n");

1034 
	`PROC_PRINT
(" De¸. Fªquícy: %lu\n", 
πai_tu«bÀs
.
˝u_‰eq
);

1035 
	`PROC_PRINT
(" De¸. L©ícy: %dÇs\n", 
RTAI_LATENCY_8254
);

1036 
	`PROC_PRINT
(" De¸. Sëu∞Time: %dÇs\n", 
RTAI_SETUP_TIME_8254
);

1038 
n⁄e
 = 1;

1039 
	`PROC_PRINT
("\n** Real-time IRQs used by RTAI: ");

1040 
i
 = 0; i < 
RTAI_NR_IRQS
; i++) {

1041 i‡(
πai_ªÆtime_úq
[
i
].
h™dÀr
) {

1042 i‡(
n⁄e
) {

1043 
	`PROC_PRINT
("\n");

1044 
n⁄e
 = 0;

1046 
	`PROC_PRINT
("\¿ #%dáà%p", 
i
, 
πai_ªÆtime_úq
[i].
h™dÀr
);

1049 i‡(
n⁄e
) {

1050 
	`PROC_PRINT
("none");

1052 
	`PROC_PRINT
("\n\n");

1054 
	`PROC_PRINT
("** RTAIÉxtensionÅraps: \n\n");

1055 
	`PROC_PRINT
(" SYSREQ=0x%x\n", 0xC00);

1057 
	`PROC_PRINT
(" IRQ spuriou†%d\n", 
•urious_öãºu±s
);

1058 
	`PROC_PRINT
("\n");

1060 
n⁄e
 = 1;

1061 
	`PROC_PRINT
("** RTAI SYSREQs in use: \n");

1062 
i
 = 0; i < 
RTAI_NR_SRQS
; i++) {

1063 i‡(
πai_sy§eq_èbÀ
[
i
].
k_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
u_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
œbñ
) {

1064 
	`PROC_PRINT
(" #%dÜabñ:%lu\n", 
i
, 
πai_sy§eq_èbÀ
[i].
œbñ
);

1065 
n⁄e
 = 0;

1069 i‡(
n⁄e
) {

1070 
	`PROC_PRINT
("Çone");

1072 
	`PROC_PRINT
("\n\n");

1074 
PROC_PRINT_DONE
;

1075 
	}
}

1082 
	$πai_¥oc_ªgi°î
 ()

1084 
¥oc_dú_íåy
 *
ít
;

1086 
πai_¥oc_roŸ
 = 
	`¸óã_¥oc_íåy
("πai", 
S_IFDIR
, 0);

1087 i‡(!
πai_¥oc_roŸ
) {

1088 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai.\n");

1091 
πai_¥oc_roŸ
->
ow√r
 = 
THIS_MODULE
;

1092 
ít
 = 
	`¸óã_¥oc_íåy
("hÆ", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
);

1093 i‡(!
ít
) {

1094 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai/hal.\n");

1098 
ít
->
ªad_¥oc
 = 
πai_ªad_¥oc
;

1101 
	}
}

1108 
	$πai_¥oc_uƒegi°î
 ()

1110 
	`ªmove_¥oc_íåy
("hÆ", 
πai_¥oc_roŸ
);

1111 
	`ªmove_¥oc_íåy
("rtai", 0);

1112 
	}
}

1121 
	$πai_domaö_íåy
 (
iÊag
)

1123 i‡(
iÊag
) {

1124 
	`π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: <%s> mou¡ed ovî %†%s.\n", 
PACKAGE_VERSION
, 
HAL_TYPE
, 
HAL_VERSION_STRING
);

1125 
	`π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: compûed wôh %s.\n", 
CONFIG_RTAI_COMPILER
);

1127 ;;Ë
	`hÆ_su•íd_domaö
();

1128 
	}
}

1135 
πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
‰om
, 
evít
, (*
h™dÀr
)(, *)) {

1136 i‡(
evít
 =
HAL_SYSCALL_PROLOGUE
) {

1137 
sched_öãr˚±_sysˇŒ_¥ﬁogue
 = (*)
h™dÀr
;

1140  ()
	`hÆ_ˇtch_evít
(
‰om
, 
evít
, (*)
h™dÀr
);

1141 
	}
}

1148 
ùùe_evíts_divîãd
;

1150 
	$__πai_hÆ_öô
 ()

1152 
å≠ƒ
, 
hÆöv
;

1153 
hÆ_©å_°ru˘
 
©å
;

1156 
hÆöv
 = 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_EVENTS
;Årapnr++) {

1157 i‡(
hÆ_roŸ_domaö
->
	`hÆ_evít_h™dÀr_fun
(
å≠ƒ
)) {

1158 
hÆöv
 = 1;

1159 
	`¥ötk
("EVENT %d INVALID\n", 
å≠ƒ
);

1162 i‡(
hÆöv
) {

1163 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: HAL IMMEDIATE EVENT DISPATCHING BROKEN\n");

1168 i‡(!(
πai_sy§eq_vúq
 = 
	`hÆ_Æloc_úq
())) {

1169 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]:Ço virtual interruptávailable.\n");

1174 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_IRQS
;Årapnr++) {

1175 
πai_ªÆtime_úq
[
å≠ƒ
].
úq_ack
 = (*)
hÆ_roŸ_domaö
->
úqs
[å≠ƒ].
acknowÀdge
;

1177 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1178 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_CPUS
;Årapnr++) {

1179 
ùùe_roŸ_°©us
[
å≠ƒ
] = &
hÆ_roŸ_domaö
->
˝ud©a
[å≠ƒ].
°©us
;

1184 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, &
πai_l§q_di•©chî
, 
NULL
, 
IPIPE_HANDLE_MASK
);

1187 
	`πai_£t_g©e_ve˘‹
(
INTR_VECTOR
, 
πai_húq_di•©chî
, 0);

1190 
ùùe_evíts_divîãd
 = 1;

1191 
	`πai_ö°Æl_¨chdï
();

1193 #ifde‡
CONFIG_PROC_FS


1194 
	`πai_¥oc_ªgi°î
();

1198 
	`hÆ_öô_©å
(&
©å
);

1199 
©å
.
«me
 = "RTAI";

1200 
©å
.
domid
 = 
RTAI_DOMAIN_ID
;

1201 
©å
.
íåy
 = (*)
πai_domaö_íåy
;

1202 
©å
.
¥i‹ôy
 = 
	`gë_domaö_poöãr
(1)->priority + 100;

1203 
	`hÆ_ªgi°î_domaö
(&
πai_domaö
, &
©å
);

1206 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1207 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, (*)
πai_å≠_Áu…
);

1211 
	`¥ötk
(
KERN_INFO
 "RTAI[hÆ]: mou¡ed (%s, IMMEDIATE (INTERNAL IRQ†%s).\n", 
HAL_TYPE
, 
CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 ? "VECTORED" : "DISPATCHED");

1214 
	`¥ötk
("PIPELINEÜayers:\n");

1215 
å≠ƒ
 = 1; ;Årapnr++) {

1216 
hÆ_domaö_°ru˘
 *
√xt_domaö
;

1217 
√xt_domaö
 = 
	`gë_domaö_poöãr
(
å≠ƒ
);

1218 i‡(()
√xt_domaö
 < 10) ;

1219 
	`¥ötk
("%∞%x %†%d\n", 
√xt_domaö
,Çext_domaö->
domid
,Çext_domaö->
«me
,Çext_domaö->
¥i‹ôy
);

1223 
	}
}

1230 
	$__πai_hÆ_exô
 ()

1232 
å≠ƒ
;

1233 
Êags
;

1235 #ifde‡
CONFIG_PROC_FS


1236 
	`πai_¥oc_uƒegi°î
();

1240 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1241 
	`πai_ª£t_g©e_ve˘‹
(
INTR_VECTOR
, 0, 0);

1242 
	`πai_ª°‹e_Êags
(
Êags
);

1245 
	`hÆ_uƒegi°î_domaö
(&
πai_domaö
);

1248 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1249 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, 
NULL
);

1253 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, 
NULL
, NULL, 0);

1254 
	`hÆ_‰ì_úq
(
πai_sy§eq_vúq
);

1257 
	`πai_unö°Æl_¨chdï
();

1258 
ùùe_evíts_divîãd
 = 0;

1261 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: unmounted.\n");

1262 
	}
}

1264 
moduÀ_öô
(
__πai_hÆ_öô
);

1265 
moduÀ_exô
(
__πai_hÆ_exô
);

1272 
	#LINE_LENGTH
 200

	)

1274 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1276 
löe
[
LINE_LENGTH
];

1277 
va_li°
 
¨gs
;

1278 
r
;

1280 
	`va_°¨t
(
¨gs
, 
fmt
);

1281 
r
 = 
	`v¢¥ötf
(
löe
, 
LINE_LENGTH
, 
fmt
, 
¨gs
);

1282 
	`va_íd
(
¨gs
);

1283 
	`¥ötk
("%s", 
löe
);

1285  
r
;

1286 
	}
}

1293 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1295 
löe
[
LINE_LENGTH
];

1296 
va_li°
 
¨gs
;

1297 
r
;

1299 
	`va_°¨t
(
¨gs
, 
fmt
);

1300 
r
 = 
	`v¢¥ötf
(
löe
, 
LINE_LENGTH
, 
fmt
, 
¨gs
);

1301 
	`va_íd
(
¨gs
);

1302 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1303 
	`¥ötk
("%s", 
löe
);

1304 
	`hÆ_£t_¥ötk_async
(&
πai_domaö
);

1306  
r
;

1307 
	}
}

1313 *
	$Œ2a
 (
Œ
, *
s
)

1315 
i
, 
k
, 
ul
;

1316 
a
[20];

1318 i‡(
Œ
 < 0) {

1319 
s
[0] = 1;

1320 
Œ
 = -ll;

1322 
s
[0] = 0;

1324 
i
 = 0;

1325 
Œ
 > 0xFFFFFFFF) {

1326 
Œ
 = 
	`πai_uŒdiv
÷l, 10, &
k
);

1327 
a
[++
i
] = 
k
 + '0';

1329 
ul
 = ((*)&
Œ
)[
LOW
];

1331 
ul
 = (
k
 = ul)/10;

1332 
a
[++
i
] = 
k
 - 
ul
*10 + '0';

1333 } 
ul
);

1334 i‡(
s
[0]) {

1335 
k
 = 1;

1336 
s
[0] = '-';

1338 
k
 = 0;

1340 
a
[0] = 0;

1341 (
s
[
k
++] = 
a
[
i
--]));

1342  
s
;

1343 
	}
}

1350 
EXPORT_SYMBOL
(
πai_ªÆtime_úq
);

1352 
EXPORT_SYMBOL
(
π_ªque°_úq
);

1353 
EXPORT_SYMBOL
(
π_ªÀa£_úq
);

1354 
EXPORT_SYMBOL
(
π_£t_úq_cookõ
);

1355 
EXPORT_SYMBOL
(
π_£t_úq_ªtmode
);

1356 
EXPORT_SYMBOL
(
π_£t_úq_ack
);

1358 
EXPORT_SYMBOL
(
π_°¨tup_úq
);

1359 
EXPORT_SYMBOL
(
π_shutdown_úq
);

1360 
EXPORT_SYMBOL
(
π_íabÀ_úq
);

1361 
EXPORT_SYMBOL
(
π_dißbÀ_úq
);

1362 
EXPORT_SYMBOL
(
π_mask_™d_ack_úq
);

1363 
EXPORT_SYMBOL
(
π_unmask_úq
);

1364 
EXPORT_SYMBOL
(
π_ack_úq
);

1366 
EXPORT_SYMBOL
(
π_ªque°_löux_úq
);

1367 
EXPORT_SYMBOL
(
π_‰ì_löux_úq
);

1368 
EXPORT_SYMBOL
(
π_≥nd_löux_úq
);

1369 
EXPORT_SYMBOL
(
u§_π_≥nd_löux_úq
);

1371 
EXPORT_SYMBOL
(
π_ªque°_§q
);

1372 
EXPORT_SYMBOL
(
π_‰ì_§q
);

1373 
EXPORT_SYMBOL
(
π_≥nd_löux_§q
);

1375 
EXPORT_SYMBOL
(
π_assign_úq_to_˝u
);

1376 
EXPORT_SYMBOL
(
π_ª£t_úq_to_sym_mode
);

1377 
EXPORT_SYMBOL
(
π_ªque°_≠ic_timîs
);

1378 
EXPORT_SYMBOL
(
π_‰ì_≠ic_timîs
);

1380 
EXPORT_SYMBOL
(
π_ªque°_timî
);

1381 
EXPORT_SYMBOL
(
π_‰ì_timî
);

1382 
EXPORT_SYMBOL
(
π_ªque°_πc
);

1383 
EXPORT_SYMBOL
(
π_ªÀa£_πc
);

1385 
EXPORT_SYMBOL
(
π_£t_å≠_h™dÀr
);

1386 
EXPORT_SYMBOL
(
π_£t_ihook
);

1388 
EXPORT_SYMBOL
(
πai_¸ôiˇl_íãr
);

1389 
EXPORT_SYMBOL
(
πai_¸ôiˇl_exô
);

1391 
EXPORT_SYMBOL
(
πai_£t_löux_èsk_¥i‹ôy
);

1392 
EXPORT_SYMBOL
(
πai_löux_c⁄ãxt
);

1393 
EXPORT_SYMBOL
(
πai_domaö
);

1394 
EXPORT_SYMBOL
(
πai_¥oc_roŸ
);

1395 
EXPORT_SYMBOL
(
πai_tu«bÀs
);

1396 
EXPORT_SYMBOL
(
πai_˝u_lock
);

1397 
EXPORT_SYMBOL
(
πai_˝u_ªÆtime
);

1398 
EXPORT_SYMBOL
(
π_times
);

1399 
EXPORT_SYMBOL
(
π_smp_times
);

1401 
EXPORT_SYMBOL
(
π_¥ötk
);

1402 
EXPORT_SYMBOL
(
π_sync_¥ötk
);

1403 
EXPORT_SYMBOL
(
Œ2a
);

1405 
EXPORT_SYMBOL
(
πai_£t_g©e_ve˘‹
);

1406 
EXPORT_SYMBOL
(
πai_ª£t_g©e_ve˘‹
);

1407 
EXPORT_SYMBOL
(
πai_ˇtch_evít
);

1409 
EXPORT_SYMBOL
(
πai_lxπ_di•©chî
);

1410 
EXPORT_SYMBOL
(
π_schedulög
);

1411 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1412 
EXPORT_SYMBOL
(
ùùe_roŸ_°©us
);

1415 
up_èsk_sw
(*, *);

1416 
EXPORT_SYMBOL
(
up_èsk_sw
);

1418 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


1419 
__ßve_Âív
(*
Âív
);

1420 
EXPORT_SYMBOL
(
__ßve_Âív
);

1421 
__ª°‹e_Âív
(*
Âív
);

1422 
EXPORT_SYMBOL
(
__ª°‹e_Âív
);

1425 
EXPORT_SYMBOL
(
IsﬁCpusMask
);

1427 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


1429 
	~<löux/˛ockchùs.h
>

1430 
	~<löux/ùùe_tickdev.h
>

1432 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, 
ùùe_tick_devi˚
 *);

1433 (*
π_löux_hπ_√xt_shŸ
)(, 
ùùe_tick_devi˚
 *);

1440 
	$_π_löux_hπ_£t_mode
(
˛ock_evít_mode
 
mode
, 
ùùe_tick_devi˚
 *
hπ_dev
)

1442 i‡(
mode
 =
CLOCK_EVT_MODE_ONESHOT
 || modê=
CLOCK_EVT_MODE_SHUTDOWN
) {

1443 
π_times
.
löux_tick
 = 0;

1444 } i‡(
mode
 =
CLOCK_EVT_MODE_PERIODIC
) {

1445 
π_times
.
löux_tick
 = 
	`πai_Œimd
((1000000000 + 
HZ
/2)/HZ, 
TIMER_FREQ
, 1000000000);

1447 
	}
}

1449 
	$_π_löux_hπ_√xt_shŸ
(
dñay
, 
ùùe_tick_devi˚
 *
hπ_dev
)

1451 
π_times
.
löux_time
 =Ñt_times.
tick_time
 + 
	`πai_Œimd
(
dñay
, 
TIMER_FREQ
, 1000000000);

1453 
	}
}

1455 #ifde‡
__IPIPE_FEATURE_REQUEST_TICKDEV


1456 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, (*)(b), (*)(c), d,É)

	)

1458 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, b, c, d)

	)

1461 
	$πai_ªque°_tickdev
()

1463 
mode
, 
˝uid
;

1464 
timî_‰eq
;

1465 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1466 i‡((*)
π_löux_hπ_£t_mode
 !(*)
π_löux_hπ_√xt_shŸ
) {

1467 
mode
 = 
	`IPIPE_REQUEST_TICKDEV
("de¸emíãr", 
π_löux_hπ_£t_mode
, 
π_löux_hπ_√xt_shŸ
, 
˝uid
, &
timî_‰eq
);

1469 
mode
 = 
	`IPIPE_REQUEST_TICKDEV
("de¸emíãr", 
_π_löux_hπ_£t_mode
, 
_π_löux_hπ_√xt_shŸ
, 
˝uid
, &
timî_‰eq
);

1471 i‡(
mode
 =
CLOCK_EVT_MODE_UNUSED
 || modê=
CLOCK_EVT_MODE_ONESHOT
) {

1472 
π_times
.
löux_tick
 = 0;

1473 } i‡(
mode
 !
CLOCK_EVT_MODE_PERIODIC
) {

1474  
mode
;

1478 
	}
}

1480 
	$πai_ªÀa£_tickdev
()

1482 
˝uid
;

1483 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1484 
	`ùùe_ªÀa£_tickdev
(
˝uid
);

1486 
	}
}

1490 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, *);

1491 (*
π_löux_hπ_√xt_shŸ
)(, *);

1493 
	$πai_ªque°_tickdev
(Ë{  0; 
	}
}

1495 
	$πai_ªÀa£_tickdev
(Ë{ ; 
	}
}

1499 
EXPORT_SYMBOL
(
π_löux_hπ_£t_mode
);

1500 
EXPORT_SYMBOL
(
π_löux_hπ_√xt_shŸ
);

	@/usr/src/rtai/base/arch/x86/calibration/calibrate-module.c

19 
	~<löux/sched.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/úq.h
>

22 
	~<asm/uac˚ss.h
>

23 
	~<asm/io.h
>

24 
	~<πai_sched.h
>

25 
	~<πai_fifos.h
>

26 
	~"ˇlibøã.h
"

28 
MODULE_LICENSE
("GPL");

30 
	#COUNT
 0xFFFFFFFFU

	)

32 
∑øms_t
 
	g∑øms
 = { 0, 
SETUP_TIME_8254
, 
LATENCY_8254
, 0, 
LATENCY_APIC
, 
SETUP_TIME_APIC
, 
CALIBRATED_APIC_FREQ
, 0, 
CALIBRATED_CPU_FREQ
, 
CLOCK_TICK_RATE
, 
LATCH
 };

34 
	gª£t_cou¡
, 
	gcou¡
;

35 
times_t
 
	gtimes
;

37 
	$ˇlibøã
()

39 
RTIME
 
˝u_tba£
;

40 
≠ic_tba£
;

42 
times
.
˝u_time
 = 
	`rd_CPU_ts
();

43 #ifde‡
CONFIG_X86_LOCAL_APIC


44 i‡(
∑øms
.
mp
) {

45 
times
.
≠ic_time
 = 
	`≠ic_ªad
(
APIC_TMCCT
);

48 i‡(
times
.
öås
 < 0) {

49 
˝u_tba£
 = 
times
.
˝u_time
;

50 
≠ic_tba£
 = 
times
.
≠ic_time
;

52 
times
.
öås
++;

53 i‡(++
cou¡
 =
ª£t_cou¡
) {

54 
cou¡
 = 0;

55 
times
.
˝u_time
 -
˝u_tba£
;

56 
times
.
≠ic_time
 = 
≠ic_tba£
 -Åimes.apic_time;

57 
	`πf_put
(0, &
times
, (times));

59 
	`π_≥nd_löux_úq
(
TIMER_8254_IRQ
);

60 #ifde‡
CONFIG_X86_LOCAL_APIC


61 i‡(
∑øms
.
mp
) {

62 
ãmp
 = (
	`≠ic_ªad
(
APIC_ICR
Ë& (~0xCDFFF)Ë| (
APIC_DM_FIXED
 | 
APIC_DEST_ALLINC
 | 
LOCAL_TIMER_VECTOR
);

63 
	`≠ic_wrôe
(
APIC_ICR
, 
ãmp
);

66 
	}
}

68 
	$ju°_ªt
()

71 
	}
}

73 
RT_TASK
 
	gπask
;

74 
	g≥riod
;

75 
RTIME
 
	gex≥˘ed
;

77 
	$•v
(
lo›s
)

79 
skù
, 
avîage
 = 0;

80 
skù
 = 0; skù < 
lo›s
; skip++) {

81 
ex≥˘ed
 +
≥riod
;

82 
	`π_èsk_waô_≥riod
();

83 
avîage
 +()
	`cou¡2«no
(
	`π_gë_time
(Ë- 
ex≥˘ed
);

85 
	`πf_put
(0, &
avîage
, (average));

86 
	`π_èsk_su•íd
(0);

87 
	}
}

89 
RTIME
 
	gt0
;

90 
	gbus_≥riod
, 
	gbus_thªshﬁd
, 
	gu£_∑Ω‹t
, 
	glo›s
, 
	gmaxj
, 
	gbô
;

92 
	$π_timî_tick_ext
(
úq
, 
d©a
)

94 
RTIME
 
t
;

95 
jô
;

97 i‡(
lo›s
++ < 
INILOOPS
) {

98 
t0
 = 
	`rdtsc
();

100 
t
 = 
	`rdtsc
();

101 i‡(
u£_∑Ω‹t
) {

102 
	`outb
(
bô
 = 1 - bô, 
PARPORT
);

104 i‡((
jô
 = 
	`abs
(()(
t
 - 
t0
Ë- 
bus_≥riod
)Ë> 
maxj
) {

105 
maxj
 = 
jô
;

106 i‡(
maxj
 > 
bus_thªshﬁd
) {

107 
msg
;

108 
msg
 = 
	`imuldiv
(
maxj
, 1000000000, 
CPU_FREQ
);

109 
	`πf_put
(0, &
msg
, (msg));

112 
t0
 = 
t
;

114 
π_times
.
tick_time
 =Ñt_times.
öå_time
;

115 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
≥riodic_tick
;

116 
	`π_£t_timî_dñay
(0);

117 i‡(
π_times
.
tick_time
 >π_times.
löux_time
) {

118 
π_times
.
löux_time
 +π_times.
löux_tick
;

119 
	`h¨d_°i
();

120 
	`π_≥nd_löux_úq
(
TIMER_8254_IRQ
);

123 
	`h¨d_°i
();

125 
	}
}

127 
	$u£r_§q
(
wh©evî
)

129 
	`ˇlibøã_8254
();

130 
¨gs
[
MAXARGS
];

131 
ªt
;

133 
ªt
 = 
	`c›y_‰om_u£r
(
¨gs
, (*)
wh©evî
, 
MAXARGS
*());

134 
¨gs
[0]) {

135 
CAL_8254
: {

136  
	`ˇlibøã_8254
();

140 
KTHREADS
:

141 
KLATENCY
: {

142 
	`π_£t_⁄eshŸ_mode
();

143 
≥riod
 = 
	`°¨t_π_timî
(
	`«no2cou¡
(
¨gs
[1]));

144 i‡(
¨gs
[0] =
KLATENCY
) {

145 
	`π_èsk_öô_˝uid
(&
πask
, 
•v
, 
¨gs
[2], 
STACKSIZE
, 0, 0, 0, 
	`h¨d_˝u_id
());

149 
ex≥˘ed
 = 
	`π_gë_time
(Ë+ 100*
≥riod
;

150 
	`π_èsk_make_≥riodic
(&
πask
, 
ex≥˘ed
, 
≥riod
);

154 
END_KLATENCY
: {

155 
	`°›_π_timî
();

156 
	`π_èsk_dñëe
(&
πask
);

160 
FREQ_CAL
: {

161 
times
.
öås
 = -1;

162 
ª£t_cou¡
 = 
¨gs
[1]*
HZ
;

163 
cou¡
 = 0;

164 
	`π_assign_úq_to_˝u
(
TIMER_8254_IRQ
, 1 << 
	`h¨d_˝u_id
());

165 
	`π_ªque°_timî
(
ju°_ªt
, 
COUNT
, 1);

166 
	`π_ªque°_globÆ_úq
(
TIMER_8254_IRQ
, 
ˇlibøã
);

170 
END_FREQ_CAL
: {

171 
	`π_‰ì_timî
();

172 
	`π_ª£t_úq_to_sym_mode
(
TIMER_8254_IRQ
);

173 
	`π_‰ì_globÆ_úq
(
TIMER_8254_IRQ
);

177 
BUS_CHECK
: {

178 
lo›s
 = 
maxj
 = 0;

179 
bus_≥riod
 = 
	`imuldiv
(
¨gs
[1], 
CPU_FREQ
, 1000000000);

180 
bus_thªshﬁd
 = 
	`imuldiv
(
¨gs
[2], 
CPU_FREQ
, 1000000000);

181 
u£_∑Ω‹t
 = 
¨gs
[3];

182 
	`π_assign_úq_to_˝u
(
TIMER_8254_IRQ
, 1 << 
	`h¨d_˝u_id
());

183 
	`π_ªque°_timî
((*)
π_timî_tick_ext
, 
	`imuldiv
(
¨gs
[1], 
FREQ_8254
, 1000000000), 0);

184 
	`π_£t_globÆ_úq_ext
(
TIMER_8254_IRQ
, 1, 0);

188 
END_BUS_CHECK
: {

189 
	`π_‰ì_timî
();

190 
	`π_ª£t_úq_to_sym_mode
(
TIMER_8254_IRQ
);

193 
GET_PARAMS
: {

194 
	`πf_put
(0, &
∑øms
, (params));

199 
	}
}

201 
	g§q
;

203 
	$öô_moduÀ
()

205 #ifde‡
CONFIG_X86_LOCAL_APIC


206 
∑øms
.
mp
 = 1;

208 
∑øms
.
‰eq_≠ic
 = 
RTAI_FREQ_APIC
;

209 
∑øms
.
˝u_‰eq
 = 
RTAI_CPU_FREQ
;

210 
	`πf_¸óã
(0, 
FIFOBUFSIZE
);

211 i‡((
§q
 = 
	`π_ªque°_§q
(
CALSRQ
, (*)
u£r_§q
, user_srq)) < 0) {

212 
	`¥ötk
("No sysrqávailable forÅhe calibration.\n");

213  
§q
;

216 
	}
}

218 
	$˛ónup_moduÀ
()

220 
	`π_‰ì_§q
(
§q
);

221 
	`πf_de°roy
(0);

223 
	}
}

	@/usr/src/rtai/base/arch/x86/calibration/calibrate.c

19 
	~<Êﬂt.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<˘y≥.h
>

23 
	~<sig«l.h
>

24 
	~<°rög.h
>

25 
	~<sys/mm™.h
>

26 
	~<sys/io.h
>

27 
	~<gë›t.h
>

28 
	~<±hªad.h
>

29 
	~<m©h.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<î∫o.h
>

34 
	~<ãrmio.h
>

35 
	~<sys/pﬁl.h
>

36 
	~<sys/waô.h
>

37 
	~<f˙é.h
>

38 
	~<uni°d.h
>

39 
	~<˘y≥.h
>

40 
	~<time.h
>

41 
	~<sig«l.h
>

43 
	~<asm/πai_§q.h
>

44 
	~<πai_fifos.h
>

45 
	~"ˇlibøã.h
"

47 
›ti⁄
 
	g›ti⁄s
[] = {

60 { 
NULL
, 0, 0, 0 }

63 
	$¥öt_ußge
()

65 
	`Âuts
(

94 , 
°dîr
);

95 
	}
}

97 
	$ídme
(
dummy
Ë{ 
	}
}

99 
	$u∆ﬂd_kî√l_hñ≥r
 ()

102 
modu∆ﬂd
[1024];

104 
	`¢¥ötf
(
modu∆ﬂd
,(modu∆ﬂd),"/sbö/rmmod %†>/dev/nuŒ 2>&1",
KERNEL_HELPER_PATH
);

105 
	`sy°em
(
modu∆ﬂd
);

106 
	}
}

108 
	$maö
(
¨gc
, *
¨gv
[])

110 
§q
, 
fifo
, 
comm™d
, 
comm™ds
[20], 
ncomm™ds
, 
c
, 
›ti⁄_ödex
, 
i
;

111 
∑øms_t
 
∑øms
;

112 
°r
[80], 
nm
[
RTF_NAMELEN
+1], 
modlﬂd
[1024];

113 
≥riod
 = 100, 
duøti⁄
 = 5, 
∑Ω‹t
 = 'y';

114 
¨gs
[
MAXARGS
];

115 
pﬁlfd
 
pﬁls
[2] = { { 0, 
POLLIN
 }, { 0, POLLIN } };

117 
›ti⁄_ödex
 = 
ncomm™ds
 = 0;

119 i‡((
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hrkxuˇbù:t:s:", 
›ti⁄s
, &
›ti⁄_ödex
)) == -1) {

122 
c
) {

124 
	`¥öt_ußge
();

125 
	`exô
(0);

135 
comm™ds
[
ncomm™ds
++] = 
c
;

139 
≥riod
 = 
	`©oi
(
›èrg
);

143 
duøti⁄
 = 
	`©oi
(
›èrg
);

147 
∑Ω‹t
 = 
›èrg
[0] == 'y' ? 'y' : 'n';

152 i‡(
ncomm™ds
 <= 0) {

153 
	`¥ötf
("\n*** NOTHING TO BE DONE ***\n");

154 
	`exô
(0);

157 
	`©exô
(&
u∆ﬂd_kî√l_hñ≥r
);

159 
	`¢¥ötf
(
modlﬂd
,(modlﬂd),"/sbö/ösmod %†>/dev/nuŒ 2>&1",
KERNEL_HELPER_PATH
);

160 
	`sy°em
(
modlﬂd
);

162 
	`sig«l
(
SIGINT
, 
ídme
);

164 
§q
 = 
	`πai_›í_§q
(
CALSRQ
);

165 i‡((
fifo
 = 
	`›í
(
	`πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

166 
	`¥ötf
("Eº‹ o≥nög %s\n",
nm
);

167 
	`exô
(1);

169 
pﬁls
[1].
fd
 = 
fifo
;

171 
¨gs
[0] = 
GET_PARAMS
;

172 
	`πai_§q
(
§q
, ()
¨gs
);

173 
	`ªad
(
fifo
, &
∑øms
, (params));

174 
	`¥ötf
("\n*** NUMBER OF REQUESTS: %d. ***\n", 
ncomm™ds
);

176 
i
 = 0; i < 
ncomm™ds
; i++) {

177 
comm™d
 = 
comm™ds
[
i
]) {

180 
¨gs
[0] = 
CAL_8254
;

181 
	`¥ötf
("\n*** '#deföêSETUP_TIME_8254 %lu', IN USE %lu ***\n\n", (Ë
	`πai_§q
(
§q
, ()
¨gs
), 
∑øms
.
£tup_time_8254
);

187 
avîage
;

188 
¨gs
[0] = 
comm™d
 ='k' ? 
KLATENCY
 : 
KTHREADS
;

189 
¨gs
[1] = 
≥riod
;

190 
¨gs
[2] = 
duøti⁄
;

191 
	`¥ötf
("\n*** KERNEL SPACE LATENCY CALIBRATION (%s), waô %lu sec⁄d†f‹ ià... ***\n", 
comm™d
 ='k' ? "RTAI TASKS" : "KTHREADS", 
¨gs
[2]);

192 
¨gs
[2] = (1000000*args[2])/args[1];

193 
¨gs
[1] *= 1000;

194 
	`πai_§q
(
§q
, ()
¨gs
);

195 
	`ªad
(
fifo
, &
avîage
, (average));

196 
avîage
 /()
¨gs
[2];

197 i‡(
∑øms
.
mp
) {

198 
	`¥ötf
("\n*** '#deföêLATENCY_APIC %d' (IN USE %lu)\n\n", ()
∑øms
.
œãncy_≠ic
 + 
avîage
,Öarams.latency_apic);

200 
	`¥ötf
("\n*** '#deföêLATENCY_8254 %d' (IN USE %lu)\n\n", ()
∑øms
.
œãncy_8254
 + 
avîage
,Öarams.latency_8254);

202 
¨gs
[0] = 
END_KLATENCY
;

203 
	`πai_§q
(
§q
, ()
¨gs
);

208 
pid
, 
avîage
;

209 
¨gs
[1] = 
≥riod
;

210 
¨gs
[2] = 
duøti⁄
;

211 
	`¥ötf
("\n*** USER SPACE LATENCY CALIBRATION, waô %lu sec⁄d†f‹ ià... ***\n", 
¨gs
[2]);

212 
¨gs
[2] = (1000000*args[2])/args[1];

213 
¨gs
[1] *= 1000;

214 
	`•rötf
(
°r
, "%lu", 
¨gs
[1]);

215 
	`•rötf
(
°r
 + (°r)/2, "%lu", 
¨gs
[2]);

216 
pid
 = 
	`f‹k
();

217 i‡(!
pid
) {

218 
	`exe˛
(
USER_HELPER_PATH
, USER_HELPER_PATH, 
°r
, så + (°r)/2, 
NULL
);

219 
	`_exô
(1);

221 
	`ªad
(
fifo
, &
avîage
, (average));

222 
	`waôpid
(
pid
, 0, 0);

223 i‡(
	`kûl
(
pid
,0) < 0)

228 
avîage
 /()
¨gs
[2];

229 i‡(
∑øms
.
mp
) {

230 
	`¥ötf
("\n*** '#deföêLATENCY_APIC %d' (IN USE %lu)\n\n", ()
∑øms
.
œãncy_≠ic
 + 
avîage
,Öarams.latency_apic);

232 
	`¥ötf
("\n*** '#deföêLATENCY_8254 %d' (IN USE %lu)\n\n", ()
∑øms
.
œãncy_8254
 + 
avîage
,Öarams.latency_8254);

238 i‡(!
∑øms
.
mp
) {

239 
	`¥ötf
("*** APIC FREQUENCY CALIBRATION NOT AVAILABLE UNDER UP ***\n");

244 
time
, 
˝u_‰eq
 = 0, 
≠ic_‰eq
 = 0;

245 
times_t
 
times
;

246 
¨gs
[0] = 
FREQ_CAL
;

247 
¨gs
[1] = 
duøti⁄
;

248 
	`¥ötf
("\n->>> FREQ CALIB (PRINTING EVERY %lu SECONDS,Öªs†íã∏tÿíd cÆibøtögË<<<-\n\n", 
¨gs
[1]);

249 
	`πai_§q
(
§q
, ()
¨gs
);

250 
time
 = 0;

252 
time
 +
¨gs
[1];

253 i‡(
	`pﬁl
(
pﬁls
, 2, 1000*
duøti⁄
Ë> 0 &&pﬁls[0].
ªvíts
) {

254 
	`gëch¨
();

255 
¨gs
[0] = 
END_FREQ_CAL
;

256 
	`πai_§q
(
§q
, ()
¨gs
);

257 i‡(
comm™d
 == 'c' || command == 'b') {

258 
	`¥ötf
("\n*** '#deföêCPU_FREQ %lu', IN USE %lu ***\n\n", 
˝u_‰eq
, 
∑øms
.cpu_freq);

260 i‡(
∑øms
.
mp
 && (
comm™d
 == 'a' || command == 'b')) {

261 
	`¥ötf
("\n*** '#deföêAPIC_FREQ %lu', IN USE %lu ***\n\n", 
≠ic_‰eq
, 
∑øms
.
‰eq_≠ic
);

265 
	`ªad
(
fifo
, &
times
, (times));

266 i‡(
comm™d
 == 'c' || command == 'b') {

267 
˝u_‰eq
 = ((()
times
.
˝u_time
)*
∑øms
.
˛ock_tick_øã
)/(((Èimes.
öås
)*∑øms.
œtch
) + 0.49999999999999999;

268 
	`¥ötf
("\n->>> MEASURED CPU_FREQ: %lu (HzË[%lu (s)], IN USE %lu (HzË<<<-\n", 
˝u_‰eq
, 
time
, 
∑øms
.cpu_freq);

270 i‡(
∑øms
.
mp
 && (
comm™d
 == 'a' || command == 'b')) {

271 
≠ic_‰eq
 = ((()
times
.
≠ic_time
)*
∑øms
.
˛ock_tick_øã
)/(((Èimes.
öås
)*∑øms.
œtch
) + 0.49999999999999999;

272 
	`¥ötf
("\n->>> MEASURED APIC_FREQ: %lu (HzË[%lu (s)], IN USE %lu (HzË<<<-\n", 
≠ic_‰eq
, 
time
, 
∑øms
.
‰eq_≠ic
);

279 
time_t
 
time°amp
;

280 
tm
 *
tm_time°amp
;

281 
¨gs
[0] = 
BUS_CHECK
;

282 
¨gs
[1] = 
≥riod
;

283 
¨gs
[2] = 1;

284 
¨gs
[3] = 
∑Ω‹t
;

285 
	`¥ötf
("\n->>> INTERRUPT LATENCY CHECK (pressÉnterÅoÉnd check) <<<-\n\n");

286 
¨gs
[1] *= 1000;

287 
¨gs
[2] *= 1000;

288 
	`πai_§q
(
§q
, ()
¨gs
);

290 
maxj
;

291 i‡(
	`pﬁl
(
pﬁls
, 2, 100) > 0) {

292 i‡(
pﬁls
[0].
ªvíts
) {

293 
	`gëch¨
();

294 
¨gs
[0] = 
END_BUS_CHECK
;

295 
	`πai_§q
(
§q
, ()
¨gs
);

298 
	`ªad
(
fifo
, &
maxj
, (maxj));

299 
	`time
(&
time°amp
);

300 
tm_time°amp
 = 
	`loˇ…ime
(&
time°amp
);

301 
	`¥ötf
("%04d/%02d/%0d-%02d:%02d:%02d -> ", 
tm_time°amp
->
tm_yór
+1900,Åm_time°amp->
tm_m⁄
+1,Åm_time°amp->
tm_mday
,Åm_time°amp->
tm_hour
,Åm_time°amp->
tm_mö
,Åm_time°amp->
tm_£c
);

302 
	`¥ötf
("%d.%-3d (us)\n", 
maxj
/1000, maxj%1000);

310 
	`exô
(0);

311 
	}
}

	@/usr/src/rtai/base/arch/x86/calibration/calibrate.h

1 
	#CALSRQ
 0xˇcˇ

	)

3 
	#CAL_8254
 1

	)

4 
	#KLATENCY
 2

	)

5 
	#KTHREADS
 3

	)

6 
	#END_KLATENCY
 4

	)

7 
	#FREQ_CAL
 5

	)

8 
	#END_FREQ_CAL
 6

	)

9 
	#BUS_CHECK
 7

	)

10 
	#END_BUS_CHECK
 8

	)

11 
	#GET_PARAMS
 9

	)

13 
	#PARPORT
 0x370

	)

15 
	#MAXARGS
 4

	)

16 
	#STACKSIZE
 5000

	)

17 
	#FIFOBUFSIZE
 1000

	)

18 
	#INILOOPS
 100

	)

20 
	s∑øms_t
 { 

21 
	mmp
,

22 
	m£tup_time_8254
,

23 
	mœãncy_8254
,

24 
	m‰eq_≠ic
,

25 
	mœãncy_≠ic
,

26 
	m£tup_time_≠ic
,

27 
	mˇlibøãd_≠ic_‰eq
,

28 
	m˝u_‰eq
,

29 
	mˇlibøãd_˝u_‰eq
,

30 
	m˛ock_tick_øã
,

31 
	mœtch
;

34 
	stimes_t
 {

35 
	m˝u_time
;

36 
	m≠ic_time
;

37 
	möås
;

	@/usr/src/rtai/base/arch/x86/calibration/calibration_helper.c

19 
	~<°dio.h
>

20 
	~<gë›t.h
>

22 
	~<πai_lxπ.h
>

24 
›ti⁄
 
	g›ti⁄s
[] = {

29 { 
NULL
, 0, 0, 0 }

32 
	$¥öt_ußge
()

34 
	`Âuts
(

47 , 
°dîr
);

48 
	}
}

50 
	g≥riod
 = 200 , 
	glo›s
 = 1 , 
	gtﬁ
 = 100 ;

52 
ölöe
 
	$sign
(
v
Ë{  v > 0 ? 1 : (v < 0 ? -1 : 0); 
	}
}

53 
	gu£r_œãncy
;

54 
RT_TASK
 *
	gˇlmng
;

56 
	$u£r_ˇlibøt‹
(
lo›s
)

58 
RTIME
 
ex≥˘ed
;

59 
s
 = 0;

61 i‡(!
	`π_thªad_öô
(
	`«m2num
("USRCAL"), 0, 0, 
SCHED_FIFO
, 0xF)) {

62 
	`¥ötf
("*** CANNOT INIT USER LATENCY CALIBRATOR TASK ***\n");

65 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

67 
	`π_make_h¨d_ªÆ_time
();

68 
ex≥˘ed
 = 
	`π_gë_ts˙t
(Ë+ 10*
≥riod
;

69 
	`π_èsk_make_≥riodic
(
NULL
, 
ex≥˘ed
, 
≥riod
);

70 
lo›s
--) {

71 
ex≥˘ed
 +
≥riod
;

72 
	`π_èsk_waô_≥riod
();

73 
u£r_œãncy
 +
	`π_gë_ts˙t
(Ë- 
ex≥˘ed
;

74 
s
 += 3.14;

76 
	`π_make_so·_ªÆ_time
();

77 
	`π_èsk_ªsume
(
ˇlmng
);

80 
	`π_thªad_dñëe
(
NULL
);

81  
s
;

82 
	}
}

84 
	$maö
(
¨gc
, *
¨gv
[])

86 
kîn_œãncy
, 
U£rL©ícy
 = 0, 
KînL©ícy
 = 0, 
tﬁ
 = 100;

89 
c
;

90 i‡((
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "hp:t:l:", 
›ti⁄s
, 
NULL
)) < 0) {

93 
c
) {

94 'h': { 
	`¥öt_ußge
();  0; }

95 'p': { 
≥riod
 = 
	`©oi
(
›èrg
); ; }

96 't': { 
lo›s
 = 
	`©oi
(
›èrg
); ; }

97 'l': { 
tﬁ
 = 
	`©oi
(
›èrg
); ; }

101 
	`sy°em
("/sbö/ösmod \"" 
HAL_SCHED_PATH
 "\"/πai_hÆ" 
HAL_SCHED_MODEXT
 " >/dev/null 2>&1");

102 
	`sy°em
("/sbö/ösmod \"" 
HAL_SCHED_PATH
 "\"/πai_sched" 
HAL_SCHED_MODEXT
 " >/dev/null 2>&1");

104 i‡(!(
ˇlmng
 = 
	`π_thªad_öô
(
	`«m2num
("CALMNG"), 10, 0, 
SCHED_FIFO
, 0xF)) ) {

105 
	`¥ötf
("*** CANNOT INIT CALIBRATION TASK ***\n");

108 
	`¥ötf
("\n* CALIBRATING SCHEDULING LATENCIES FOR %d (s):", 
lo›s
);

109 
lo›s
 = (lo›s*1000000 + 
≥riod
/2)/period;

110 
	`¥ötf
(" PERIOD %d (us), LOOPS %d. *\n", 
≥riod
, 
lo›s
);

112 
	`°¨t_π_timî
(0);

113 
≥riod
 = 
	`«no2cou¡
(1000*period);

115 
	`¥ötf
("\n* KERNEL SPACE. *\n");

117 
kîn_œãncy
 = 
	`kî√l_ˇlibøt‹
(
≥riod
, 
lo›s
, 
KînL©ícy
);

119 
kîn_œãncy
 = (kîn_œãncy + 
lo›s
/2)/loops;

120 
kîn_œãncy
 = 
	`sign
(kîn_œãncy)*
	`cou¡2«no
(
	`abs
(kern_latency));

121 #i‡
CONFIG_RTAI_BUSY_TIME_ALIGN


122 
	`¥ötf
("* KERNEL SPACE RETURN DELAY: %d (ns), ADD TO THE ONE CONFIGURED. *\n", 
kîn_œãncy
);

124 
	`¥ötf
("* KERNEL SPACE SCHED LATENCY: %d (ns), ADD TO THE ONE CONFIGURED. *\n", 
kîn_œãncy
);

127 
KînL©ícy
 +
kîn_œãncy
;

128 
	`¥ötf
("* KERNEL SPACE LATENCY: %d. *\n", 
KînL©ícy
);

129 } 
	`abs
(
kîn_œãncy
Ë> 
tﬁ
 && !
CONFIG_RTAI_BUSY_TIME_ALIGN
);

131 
	`¥ötf
("\n* USER SPACE. *\n");

133 
	`kî√l_ˇlibøt‹
(
≥riod
, 
lo›s
, -
U£rL©ícy
);

134 
	`π_thªad_¸óã
((*)
u£r_ˇlibøt‹
, (*)
lo›s
, 0);

135 
	`π_èsk_su•íd
(
ˇlmng
);

137 
u£r_œãncy
 = (u£r_œãncy + 
lo›s
/2)/loops;

138 
u£r_œãncy
 = 
	`sign
(u£r_œãncy)*
	`cou¡2«no
(
	`abs
(user_latency));

139 #i‡
CONFIG_RTAI_BUSY_TIME_ALIGN


140 
	`¥ötf
("* USER SPACE RETURN DELAY: %d (ns), ADD TO THE ONE CONFIGURED. *\n", 
u£r_œãncy
);

142 
	`¥ötf
("* USER SPACE SCHED LATENCY: %d (ns), ADD TO THE ONE CONFIGURED. *\n", 
u£r_œãncy
);

144 
U£rL©ícy
 +
u£r_œãncy
;

145 
	`¥ötf
("* USER SPACE LATENCY: %d. *\n", 
U£rL©ícy
);

146 } 
	`abs
(
u£r_œãncy
Ë> 
tﬁ
 && !
CONFIG_RTAI_BUSY_TIME_ALIGN
);

148 
	`°›_π_timî
();

149 
	`π_thªad_dñëe
(
NULL
);

150 
	`¥ötf
("\n");

152 
	`sy°em
("/sbin/rmmodÑtai_sched >/dev/null 2>&1");

153 
	`sy°em
("/sbin/rmmodÑtai_hal >/dev/null 2>&1");

156 
	}
}

	@/usr/src/rtai/base/arch/x86/calibration/rtai_calibrate.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa6e8109e, 
__VMLINUX_SYMBOL_STR
(
π_èsk_waô_≥riod
) },

22 { 0x993735d, 
__VMLINUX_SYMBOL_STR
(
π_£t_úq_cookõ
) },

23 { 0xe57a5e63, 
__VMLINUX_SYMBOL_STR
(
π_ª£t_úq_to_sym_mode
) },

24 { 0x8bdf0ed5, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_timî
) },

25 { 0xa3536b55, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô_˝uid
) },

26 { 0x22040e90, 
__VMLINUX_SYMBOL_STR
(
cou¡2«no
) },

27 { 0x164f3123, 
__VMLINUX_SYMBOL_STR
(
πai_ˇlibøã_8254
) },

28 { 0x3546dc4f, 
__VMLINUX_SYMBOL_STR
(
π_ªÀa£_úq
) },

29 { 0x58256487, 
__VMLINUX_SYMBOL_STR
(
πf_¸óã
) },

30 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

31 { 0xeb5f2c5e, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_úq
) },

32 { 0x99058382, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_timî
) },

33 { 0xeb73855b, 
__VMLINUX_SYMBOL_STR
(
π_£t_⁄eshŸ_mode
) },

34 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

35 { 0xb3911fba, 
__VMLINUX_SYMBOL_STR
(
π_times
) },

36 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

37 { 0x4a01971c, 
__VMLINUX_SYMBOL_STR
(
πf_de°roy
) },

38 { 0x5f50e4eb, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_§q
) },

39 { 0xf46a8afb, 
__VMLINUX_SYMBOL_STR
(
°›_π_timî
) },

40 { 0xe0917a6e, 
__VMLINUX_SYMBOL_STR
(
πf_put
) },

41 { 0x12c0d4b7, 
__VMLINUX_SYMBOL_STR
(
π_èsk_su•íd
) },

42 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

43 { 0xa05a4b6b, 
__VMLINUX_SYMBOL_STR
(
π_assign_úq_to_˝u
) },

44 { 0x141719e3, 
__VMLINUX_SYMBOL_STR
(
πai_tu«bÀs
) },

45 { 0x33e581ab, 
__VMLINUX_SYMBOL_STR
(
°¨t_π_timî
) },

46 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

47 { 0x6c1cc1f7, 
__VMLINUX_SYMBOL_STR
(
π_≥nd_löux_úq
) },

48 { 0x1846a841, 
__VMLINUX_SYMBOL_STR
(
π_èsk_make_≥riodic
) },

49 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

50 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

51 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

52 { 0x7d056198, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_§q
) },

53 { 0x4f6b400b, 
__VMLINUX_SYMBOL_STR
(
_c›y_‰om_u£r
) },

56 c⁄° 
	g__moduÀ_dïíds
[]

57 
__u£d


58 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

62 
MODULE_INFO
(
§cvîsi⁄
, "17F75741E5D0E231D1CE785");

	@/usr/src/rtai/base/arch/x86/calibration/rtai_smi.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x2b71a554, 
__VMLINUX_SYMBOL_STR
(
pci_bus_ªad_c⁄fig_byã
) },

22 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

23 { 0xac1a55be, 
__VMLINUX_SYMBOL_STR
(
uƒegi°î_ªboŸ_nŸifõr
) },

24 { 0x3517383e, 
__VMLINUX_SYMBOL_STR
(
ªgi°î_ªboŸ_nŸifõr
) },

25 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

26 { 0x6bcc9d82, 
__VMLINUX_SYMBOL_STR
(
pci_gë_devi˚
) },

27 { 0x7027Øad, 
__VMLINUX_SYMBOL_STR
(
pci_dev_put
) },

28 { 0xe5d95985, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_ul⁄g
) },

31 c⁄° 
	g__moduÀ_dïíds
[]

32 
__u£d


33 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

37 
MODULE_INFO
(
§cvîsi⁄
, "062A2C6395CA06F3AA883A0");

	@/usr/src/rtai/base/arch/x86/calibration/smi-module.c

25 
	~<löux/vîsi⁄.h
>

26 
	~<löux/kî√l.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/pci.h
>

29 
	~<löux/pci_ids.h
>

30 
	~<löux/ªboŸ.h
>

32 
	~<πai_wøµîs.h
>

35 
	#CONFIG_RTAI_HW_SMI_ALL
 0

	)

36 
	#CONFIG_RTAI_HW_SMI_INTEL_USB2
 0

	)

37 
	#CONFIG_RTAI_HW_SMI_LEGACY_USB2
 0

	)

38 
	#CONFIG_RTAI_HW_SMI_PERIODIC
 0

	)

39 
	#CONFIG_RTAI_HW_SMI_TCO
 1

	)

40 
	#CONFIG_RTAI_HW_SMI_MC
 0

	)

41 
	#CONFIG_RTAI_HW_SMI_APMC
 0

	)

42 
	#CONFIG_RTAI_HW_SMI_LEGACY_USB
 0

	)

43 
	#CONFIG_RTAI_HW_SMI_BIOS
 0

	)

45 #i‚de‡
PCI_DEVICE_ID_INTEL_ICH7_0


46 
	#PCI_DEVICE_ID_INTEL_ICH7_0
 0x27b8

	)

48 #i‚de‡
PCI_DEVICE_ID_INTEL_ICH7_1


49 
	#PCI_DEVICE_ID_INTEL_ICH7_1
 0x27b9

	)

51 #i‚de‡
PCI_DEVICE_ID_INTEL_ICH8_4


52 
	#PCI_DEVICE_ID_INTEL_ICH8_4
 0x2815

	)

54 #i‚de‡
PCI_DEVICE_ID_INTEL_ICH10_1


55 #deföê
	#PCI_DEVICE_ID_INTEL_ICH10_1
 0x3a16

	)

59 
pci_devi˚_id
 
	ghÆ_smi_pci_tbl
[] = {

60 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801AA_0
) },

61 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801AB_0
) },

62 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801BA_0
) },

63 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801BA_10
) },

64 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801E_0
) },

65 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801CA_0
) },

66 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801CA_12
) },

67 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801DB_0
) },

68 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801DB_12
) },

69 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_82801EB_0
) },

70 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH6_0
) },

71 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH6_1
) },

72 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH6_2
) },

73 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH7_0
) },

74 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH7_1
) },

75 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH8_4
) },

76 { 
PCI_DEVICE
(
PCI_VENDOR_ID_INTEL
, 
PCI_DEVICE_ID_INTEL_ICH10_1
) },

88 
	#DEVFN
 0xf8

	)

90 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

91 
	#pci_gë_devi˚
(
a
, 
b
, 
c
Ë
	`pci_föd_devi˚
◊, b, c)

	)

92 
	#pci_dev_put
(
a
Ëdÿ{ } 0)

	)

95 
	#PMBASE_B0
 0x40

	)

96 
	#PMBASE_B1
 0x41

	)

98 
	#SMI_CTRL_ADDR
 0x30

	)

99 
	#SMI_STATUS_ADDR
 0x34

	)

100 
	#SMI_MON_ADDR
 0x40

	)

103 
	#INTEL_USB2_EN_BIT
 (0x01 << 18Ë

	)

104 
	#LEGACY_USB2_EN_BIT
 (0x01 << 17Ë

	)

105 
	#PERIODIC_EN_BIT
 (0x01 << 14Ë

	)

106 
	#TCO_EN_BIT
 (0x01 << 13)

	)

107 
	#MCSMI_EN_BIT
 (0x01 << 11)

	)

108 
	#SWSMI_TMR_EN_BIT
 (0x01 << 6)

	)

109 
	#APMC_EN_BIT
 (0x01 << 5)

	)

110 
	#SLP_EN_BIT
 (0x01 << 4)

	)

111 
	#LEGACY_USB_EN_BIT
 (0x01 << 3)

	)

112 
	#BIOS_EN_BIT
 (0x01 << 2)

	)

113 
	#GBL_SMI_EN_BIT
 (0x01 << 0Ë

	)

115 
	ghÆ_smi_masked_bôs
 = 0

116 #i‡
CONFIG_RTAI_HW_SMI_ALL


117 | 
GBL_SMI_EN_BIT


119 #i‡
CONFIG_RTAI_HW_SMI_INTEL_USB2


120 | 
INTEL_USB2_EN_BIT


122 #i‡
CONFIG_RTAI_HW_SMI_LEGACY_USB2


123 | 
LEGACY_USB2_EN_BIT


125 #i‡
CONFIG_RTAI_HW_SMI_PERIODIC


126 | 
PERIODIC_EN_BIT


128 #i‡
CONFIG_RTAI_HW_SMI_TCO


129 | 
TCO_EN_BIT


131 #i‡
CONFIG_RTAI_HW_SMI_MC


132 | 
MCSMI_EN_BIT


134 #i‡
CONFIG_RTAI_HW_SMI_APMC


135 | 
APMC_EN_BIT


137 #i‡
CONFIG_RTAI_HW_SMI_LEGACY_USB


138 | 
LEGACY_USB_EN_BIT


140 #i‡
CONFIG_RTAI_HW_SMI_BIOS


141 | 
BIOS_EN_BIT


146 
RTAI_MODULE_PARM
(
hÆ_smi_masked_bôs
, 
ul⁄g
);

148 
	ghÆ_smi_ßved_bôs
;

149 
	ghÆ_smi_í_addr
;

150 
pci_dev
 *
	gsmi_dev
;

152 
	#mask_bôs
(
v
, 
p
Ë
	`oué
(
	`öl
’Ë& ~(v), (p))

	)

153 
	#£t_bôs
(
v
, 
p
Ë
	`oué
(
	`öl
’Ë| (v), (p))

	)

155 
	$πai_smi_nŸify_ªboŸ
(
nŸifõr_block
 *
nb
, 
evít
, *
p
)

157 
evít
) {

158 
SYS_DOWN
:

159 
SYS_HALT
:

160 
SYS_POWER_OFF
:

161 i‡(
hÆ_smi_í_addr
) {

162 
	`£t_bôs
(
hÆ_smi_ßved_bôs
, 
hÆ_smi_í_addr
);

165  
NOTIFY_DONE
;

166 
	}
}

168 
nŸifõr_block
 
	gπai_smi_ªboŸ_nŸifõr
 = {

169 .
nŸifõr_ˇŒ
 = &
πai_smi_nŸify_ªboŸ
,

170 .
	g√xt
 = 
NULL
,

171 .
	g¥i‹ôy
 = 0

174 
	$hÆ_smi_ª°‹e
()

176 i‡(
hÆ_smi_í_addr
) {

177 
	`£t_bôs
(
hÆ_smi_ßved_bôs
, 
hÆ_smi_í_addr
);

178 
	`pci_dev_put
(
smi_dev
);

179 
	`uƒegi°î_ªboŸ_nŸifõr
(&
πai_smi_ªboŸ_nŸifõr
);

181 
	}
}

183 
	$hÆ_smi_dißbÀ
()

185 i‡(
hÆ_smi_í_addr
) {

186 
hÆ_smi_ßved_bôs
 = 
	`öl
(
hÆ_smi_í_addr
Ë& 
hÆ_smi_masked_bôs
;

187 
	`mask_bôs
(
hÆ_smi_masked_bôs
, 
hÆ_smi_í_addr
);

188 
	`ªgi°î_ªboŸ_nŸifõr
(&
πai_smi_ªboŸ_nŸifõr
);

190 
	}
}

192 
	$gë_smi_í_addr
(
pci_dev
 *
dev
)

194 
u_öt8_t
 
byã0
, 
byã1
;

196 
	`pci_ªad_c⁄fig_byã
(
dev
, 
PMBASE_B0
, &
byã0
);

197 
	`pci_ªad_c⁄fig_byã
(
dev
, 
PMBASE_B1
, &
byã1
);

198  
SMI_CTRL_ADDR
 + (((
byã1
 << 1Ë| (
byã0
 >> 7)) << 7);

199 
	}
}

201 
	$hÆ_smi_öô
()

203 
pci_dev
 *
dev
 = 
NULL
;

204 
pci_devi˚_id
 *
id
;

210 
id
 = &
hÆ_smi_pci_tbl
[0]; 
dev
 =
NULL
 && id->
víd‹
 != 0; id++) {

211 
dev
 = 
	`pci_gë_devi˚
(
id
->
víd‹
, id->
devi˚
, 
NULL
);

214 i‡(
dev
 =
NULL
 || dev->
bus
->
numbî
 || dev->
dev‚
 !
DEVFN
) {

215 
	`pci_dev_put
(
dev
);

216 
	`¥ötk
("RTAI: Intel chipsetÇot found.\n");

217  -
ENODEV
;

220 
	`¥ötk
("RTAI: Intel chipset found,Énabling SMI workaround.\n");

221 
hÆ_smi_í_addr
 = 
	`gë_smi_í_addr
(
dev
);

222 
smi_dev
 = 
dev
;

223 
	`hÆ_smi_dißbÀ
();

225 
	}
}

229 
	$öô_moduÀ
()

231 
ªtvÆ
;

232 i‡(!(
ªtvÆ
 = 
	`hÆ_smi_öô
())) {

233 
	`¥ötk
("SMI c⁄figuøti⁄ ha†bì¿˛óªd, mask u£d = %lx (ßved mask sëtög %lx).\n", 
hÆ_smi_masked_bôs
, 
hÆ_smi_ßved_bôs
);

235  
ªtvÆ
;

236 
	}
}

238 
	$˛ónup_moduÀ
()

240 
	`hÆ_smi_ª°‹e
();

241 
	`¥ötk
("SMI c⁄figuøti⁄ ha†bì¿ª£t, saved mask u£d = %lx.\n", 
hÆ_smi_ßved_bôs
);

243 
	}
}

245 
MODULE_LICENSE
("GPL");

	@/usr/src/rtai/base/arch/x86/hal/hal.c

42 
	~<löux/moduÀ.h
>

43 
	~<löux/dñay.h
>

45 
MODULE_LICENSE
("GPL");

47 
	~<πai.h
>

49 #i‡
deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

57 #ifde‡
DIAG_OUT_OF_SYNC_TSC


58 
	gsync_˙t
[
RTAI_NR_CPUS
];

61 vﬁ©ûê
	gπai_tsc_of°
[
RTAI_NR_CPUS
];

62 
EXPORT_SYMBOL
(
πai_tsc_of°
);

64 
ölöe
 
	$ªadtsc
()

66 
t
;

67 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "=A" (
t
));

68  
t
;

69 
	}
}

71 
	#MASTER
 (0)

	)

72 
	#SLAVE
 (
SMP_CACHE_BYTES
/8)

	)

74 
	#NUM_ITERS
 10

	)

76 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

77 
•ölock_t
 
	gtsc_sync_lock
 = 
SPIN_LOCK_UNLOCKED
;

78 
•ölock_t
 
	gts˛ock
 = 
SPIN_LOCK_UNLOCKED
;

80 
DEFINE_SPINLOCK
(
tsc_sync_lock
);

81 
DEFINE_SPINLOCK
(
ts˛ock
);

84 vﬁ©ûê
	ggo
[
SLAVE
 + 1];

86 
	$sync_ma°î
(*
¨g
)

88 
Êags
, 
lÊags
, 
i
;

90 i‡(()
¨g
 !
	`hÆ_¥o˚ss‹_id
()) {

94 
go
[
MASTER
] = 0;

95 
	`loˇl_úq_ßve
(
Êags
);

96 
i
 = 0; i < 
NUM_ITERS
; ++i) {

97 !
go
[
MASTER
]) {

98 
	`˝u_ªœx
();

100 
go
[
MASTER
] = 0;

101 
	`•ö_lock_úqßve
(&
ts˛ock
, 
lÊags
);

102 
go
[
SLAVE
] = 
	`ªadtsc
();

103 
	`•ö_u∆ock_úqª°‹e
(&
ts˛ock
, 
lÊags
);

105 
	`loˇl_úq_ª°‹e
(
Êags
);

106 
	}
}

108 
	gfú°_sync_lo›_d⁄e
;

109 
	gw‹°_tsc_round_åù
[
RTAI_NR_CPUS
];

111 
ölöe
 
	$gë_dñè
(*
π
, *
ma°î
, 
¶ave
)

113 
be°_t0
 = 0, 
be°_t1
 = ~0ULL, 
be°_tm
 = 0;

114 
t˚¡î
 = 0, 
t0
, 
t1
, 
tm
, 
dt
;

115 
lÊags
;

116 
i
, 
d⁄e
;

118 
d⁄e
 = 
i
 = 0; i < 
NUM_ITERS
; ++i) {

119 
t0
 = 
	`ªadtsc
();

120 
go
[
MASTER
] = 1;

121 
	`•ö_lock_úqßve
(&
ts˛ock
, 
lÊags
);

122 !(
tm
 = 
go
[
SLAVE
])) {

123 
	`•ö_u∆ock_úqª°‹e
(&
ts˛ock
, 
lÊags
);

124 
	`˝u_ªœx
();

125 
	`•ö_lock_úqßve
(&
ts˛ock
, 
lÊags
);

127 
	`•ö_u∆ock_úqª°‹e
(&
ts˛ock
, 
lÊags
);

128 
go
[
SLAVE
] = 0;

129 
t1
 = 
	`ªadtsc
();

130 
dt
 = 
t1
 - 
t0
;

131 i‡(!
fú°_sync_lo›_d⁄e
 && 
dt
 > 
w‹°_tsc_round_åù
[
¶ave
]) {

132 
w‹°_tsc_round_åù
[
¶ave
] = 
dt
;

134 i‡(
dt
 < (
be°_t1
 - 
be°_t0
Ë&& (dà<
w‹°_tsc_round_åù
[
¶ave
] || !
fú°_sync_lo›_d⁄e
)) {

135 
d⁄e
 = 1;

136 
be°_t0
 = 
t0
, 
be°_t1
 = 
t1
, 
be°_tm
 = 
tm
;

140 i‡(
d⁄e
) {

141 *
π
 = 
be°_t1
 - 
be°_t0
;

142 *
ma°î
 = 
be°_tm
 - 
be°_t0
;

143 
t˚¡î
 = 
be°_t0
/2 + 
be°_t1
/2;

144 i‡(
be°_t0
 % 2 + 
be°_t1
 % 2 == 2) {

145 ++
t˚¡î
;

148 i‡(!
fú°_sync_lo›_d⁄e
) {

149 
w‹°_tsc_round_åù
[
¶ave
] = (worst_tsc_round_trip[slave]*120)/100;

150 
fú°_sync_lo›_d⁄e
 = 1;

151  
d⁄e
 ? 
πai_tsc_of°
[
¶ave
] = 
t˚¡î
 - 
be°_tm
 : 0;

153  
d⁄e
 ? 
πai_tsc_of°
[
¶ave
] = (8*πai_tsc_of°[¶ave] + 2*(()(
t˚¡î
 - 
be°_tm
)))/10 : 0;

154 
	}
}

156 
	$sync_tsc
(
ma°î
, 
¶ave
)

158 
Êags
;

159 
dñè
, 
π
 = 0, 
ma°î_time_°amp
 = 0;

161 
go
[
MASTER
] = 1;

162 i‡(
	`smp_ˇŒ_fun˘i⁄
(
sync_ma°î
, (*)
ma°î
,

163 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,27)

170 
go
[
MASTER
]) {

171 
	`˝u_ªœx
();

173 
	`•ö_lock_úqßve
(&
tsc_sync_lock
, 
Êags
);

174 
dñè
 = 
	`gë_dñè
(&
π
, &
ma°î_time_°amp
, 
¶ave
);

175 
	`•ö_u∆ock_úqª°‹e
(&
tsc_sync_lock
, 
Êags
);

177 #ifde‡
DIAG_OUT_OF_SYNC_TSC


178 
	`¥ötk
(
KERN_INFO
 "# %d - CPU %u: syn˚d it†TSC wôh CPU %u (ma°îÅimê°am∞%Œu cy˛es, < - OFFSET %Œd cy˛e†- > , max doubÀÅs¯ªad s∑¿%Œu cy˛es)\n", ++
sync_˙t
[
¶ave
], sœve, 
ma°î
, 
ma°î_time_°amp
, 
dñè
, 
π
);

180 
	}
}

183 
	#SLEEP0
 500

184 
	#DSLEEP
 500

185 vﬁ©ûê
íd
;

	)

187 
	$kthªad_fun
(*
nuŒ
)

189 
i
;

190 !
íd
) {

191 
i
 = 0; i < 
	`num_⁄löe_˝us
(); i++) {

192 i‡(
i
 !
CONFIG_RTAI_MASTER_TSC_CPU
) {

193 
	`£t_˝us_Ælowed
(
cuºít
, 
	`˝umask_of_˝u
(
i
));

194 
	`sync_tsc
(
CONFIG_RTAI_MASTER_TSC_CPU
, 
i
);

197 
	`m¶ìp
(
SLEEP0
 + 
	`ú™du
(
DSLEEP
));

199 
íd
 = 0;

200 
	}
}

202 
	~<löux/kthªad.h
>

204 
	$öô_tsc_sync
()

206 i‡(
	`num_⁄löe_˝us
() > 1) {

207 
	`kthªad_run
((*)
kthªad_fun
, 
NULL
, "RTAI_TSC_SYNC");

208 !
fú°_sync_lo›_d⁄e
) {

209 
	`m¶ìp
(100);

212 
	}
}

214 
	$˛ónup_tsc_sync
()

216 i‡(
	`num_⁄löe_˝us
() > 1) {

217 
íd
 = 1;

218 
íd
) {

219 
	`m¶ìp
(100);

222 
	}
}

226 
	#CAL_LOOPS
 200

	)

227 
	$πai_ˇlibøã_h¨d_timî
()

229 
Êags
;

230 
RTIME
 
t
;

231 
i
, 
dt
;

233 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

234 #ifde‡
CONFIG_X86_LOCAL_APIC


235 
t
 = 
	`πai_rdtsc
();

236 
i
 = 0; i < 
CAL_LOOPS
; i++) {

237 
	`≠ic_wrôe_¨ound
(
APIC_TMICT
, 8000);

240 
	`outb
(0x34, 0x43);

241 
t
 = 
	`πai_rdtsc
();

242 
i
 = 0; i < 
CAL_LOOPS
; i++) {

243 
	`outb
(
LATCH
 & 0xff,0x40);

244 
	`outb
(
LATCH
 >> 8,0x40);

247 
dt
 = ()(
	`πai_rdtsc
(Ë- 
t
);

248 
	`πai_¸ôiˇl_exô
(
Êags
);

249  
	`πai_imuldiv
((
dt
 + 
CAL_LOOPS
/2)/CAL_LOOPS, 1000000000, 
πai_tu«bÀs
.
˝u_‰eq
);

250 
	}
}

251 
EXPORT_SYMBOL
(
πai_ˇlibøã_h¨d_timî
);

253 #ifde‡
CONFIG_SMP


256 
	$‰ì_isﬁ˝us_‰om_löux
(*
IsﬁCpusMask
)

258 
èsk_°ru˘
 *
p
;

259 
˝umask
 
mask
;

261 
	`f‹_óch_¥o˚ss
(
p
) {

262 i‡(
p
->
	`πai_tskext
(
TSKEXT0
)) {

265 
	`˝umask_™dnŸ
(&
mask
, &
p
->
˝us_Ælowed
, (
˝umask
 *)
IsﬁCpusMask
);

266 i‡(!
	`˝umask_weight
(&
mask
)) {

267 
	`˝umask_com∂emít
(&
mask
, (
˝umask
 *)
IsﬁCpusMask
);

271 
buf
[4*(
˝umask
)];

272 
	`˝umask_s˙¥ötf
(
buf
, (buf), &
p
->
˝us_Ælowed
);

273 
	`¥ötk
("PID: %d, ORIG: %†", 
p
->
pid
, 
buf
);

274 
	`˝uli°_s˙¥ötf
(
buf
, (buf), &
p
->
˝us_Ælowed
);

275 
	`¥ötk
("(%s), ", 
buf
);

276 
	`˝umask_s˙¥ötf
(
buf
, (buf), &
mask
);

277 
	`¥ötk
("NEW: %†", 
buf
);

278 
	`˝uli°_s˙¥ötf
(
buf
, (buf), &
mask
);

279 
	`¥ötk
("(%s).\n", 
buf
);

282 
	`£t_˝us_Ælowed_±r
(
p
, &
mask
);

284 
	}
}

288 
	$‰ì_isﬁ˝us_‰om_löux
(*
IsﬁCpusMask
Ë{ ; 
	}
}

	@/usr/src/rtai/base/arch/x86/hal/hal_32.c

44 
	#CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 1

	)

46 
	#CHECK_STACK_IN_IRQ
 0

	)

48 
	~<löux/vîsi⁄.h
>

49 
	~<löux/¶ab.h
>

50 
	~<löux/î∫o.h
>

51 
	~<löux/moduÀ.h
>

52 
	~<löux/öãºu±.h
>

53 
	~<löux/úq.h
>

54 
	~<löux/c⁄sﬁe.h
>

56 
	~<asm/hw_úq.h
>

57 
	~<asm/úq.h
>

58 
	~<asm/desc.h
>

59 
	~<asm/io.h
>

60 
	~<asm/mmu_c⁄ãxt.h
>

61 
	~<asm/uac˚ss.h
>

62 
	~<asm/uni°d.h
>

63 #ifde‡
CONFIG_X86_LOCAL_APIC


64 
	~<asm/fixm≠.h
>

65 
	~<asm/bô›s.h
>

66 
	~<asm/mp•ec.h
>

67 #ifde‡
CONFIG_X86_IO_APIC


68 
	~<asm/io_≠ic.h
>

70 
	~<asm/≠ic.h
>

72 
	#__RTAI_HAL__


	)

73 
	~<asm/πai_hÆ.h
>

74 
	~<asm/πai_lxπ.h
>

75 #ifde‡
CONFIG_PROC_FS


76 
	~<löux/°©.h
>

77 
	~<löux/¥oc_fs.h
>

78 
	~<πai_¥oc_fs.h
>

80 
	~<°d¨g.h
>

82 #i‚de‡
MODULE_LICENSE


83 
MODULE_LICENSE
("GPL");

86 
	gπai_˝u‰eq_¨g
 = 
RTAI_CALIBRATED_CPU_FREQ
;

87 
RTAI_MODULE_PARM
(
πai_˝u‰eq_¨g
, 
ul⁄g
);

89 
	#RTAI_NR_IRQS
 
IPIPE_NR_IRQS


	)

91 
πai_ªque°_tickdev
(*);

93 
πai_ªÀa£_tickdev
();

95 #ifde‡
CONFIG_X86_LOCAL_APIC


97 
	gπai_≠ic‰eq_¨g
 = 
RTAI_CALIBRATED_APIC_FREQ
;

98 
RTAI_MODULE_PARM
(
πai_≠ic‰eq_¨g
, 
ul⁄g
);

100 
ölöe
 
	$πai_£tup_≥riodic_≠ic
 (
cou¡
, 
ve˘‹
)

102 i‡(!
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

103 
	`≠ic_ªad
(
APIC_LVTT
);

104 
	`≠ic_wrôe
(
APIC_LVTT
, 
	`APIC_INTEGRATED
(
	`GET_APIC_VERSION
(
	`≠ic_ªad
(
APIC_LVR
))Ë? 
	`SET_APIC_TIMER_BASE
(
APIC_TIMER_BASE_DIV
Ë| 
APIC_LVT_TIMER_PERIODIC
 | 
ve˘‹
 : APIC_LVT_TIMER_PERIODIC | vector);

105 
	`≠ic_ªad
(
APIC_TMICT
);

106 
	`≠ic_wrôe
(
APIC_TMICT
, 
cou¡
);

108 
	}
}

110 
ölöe
 
	$πai_£tup_⁄eshŸ_≠ic
 (
cou¡
, 
ve˘‹
)

112 i‡(!
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

113 
	`≠ic_ªad
(
APIC_LVTT
);

114 
	`≠ic_wrôe
(
APIC_LVTT
, 
	`APIC_INTEGRATED
(
	`GET_APIC_VERSION
(
	`≠ic_ªad
(
APIC_LVR
))Ë? 
	`SET_APIC_TIMER_BASE
(
APIC_TIMER_BASE_DIV
Ë| 
ve˘‹
 : vector);

115 
	`≠ic_ªad
(
APIC_TMICT
);

116 
	`≠ic_wrôe
(
APIC_TMICT
, 
cou¡
);

118 
	}
}

120 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,32) || (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,9))

121 
	#__ack_APIC_úq
 
ack_APIC_úq


	)

126 
	#πai_£tup_≥riodic_≠ic
(
cou¡
, 
ve˘‹
)

	)

128 
	#πai_£tup_⁄eshŸ_≠ic
(
cou¡
, 
ve˘‹
)

	)

130 
	#__ack_APIC_úq
()

	)

134 °ru˘ { vﬁ©ûê
	mlocked
, 
	mrq°ed
; } 
	gπ_schedulög
[
RTAI_NR_CPUS
];

136 
hÆ_domaö_°ru˘
 
	gπai_domaö
;

138 
πai_ªÆtime_úq_s
 
	gπai_ªÆtime_úq
[
RTAI_NR_IRQS
];

141 
	mÊags
;

142 
	mcou¡
;

143 } 
	gπai_löux_úq
[
RTAI_NR_IRQS
];

146 (*
	mk_h™dÀr
)();

147 (*
	mu_h™dÀr
)();

148 
	mœbñ
;

149 } 
	gπai_sy§eq_èbÀ
[
RTAI_NR_SRQS
];

151 
	gπai_sy§eq_vúq
;

153 
	gπai_sy§eq_m≠
 = 1;

155 
	gπai_sy§eq_≥ndög
;

157 
	gπai_sy§eq_ru¬ög
;

160 
DEFINE_SPINLOCK
(
πai_l§q_lock
);

162 vﬁ©ûê
	gπai_sync_Àvñ
;

164 
©omic_t
 
	gπai_sync_cou¡
 = 
ATOMIC_INIT
(1);

166 
	gπai_œ°_8254_cou¡î2
;

168 
RTIME
 
	gπai_ts_8254
;

170 
RT_TRAP_HANDLER
 
	gπai_å≠_h™dÀr
;

172 
π_times
 
	gπ_times
;

174 
π_times
 
	gπ_smp_times
[
RTAI_NR_CPUS
];

176 
πai_swôch_d©a
 
	gπai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

178 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


179 vﬁ©ûê*
	gùùe_roŸ_°©us
[
RTAI_NR_CPUS
];

182 
ˇlibøti⁄_d©a
 
	gπai_tu«bÀs
;

184 vﬁ©ûê
	gπai_˝u_ªÆtime
;

186 vﬁ©ûê
	gπai_˝u_lock
[2];

188 
πai_¸ôiˇl_íãr
 ((*
synch
)())

190 
Êags
;

192 
Êags
 = 
	`hÆ_¸ôiˇl_íãr
(
synch
);

193 i‡(
	`©omic_dec_™d_ã°
(&
πai_sync_cou¡
)) {

194 
πai_sync_Àvñ
 = 0;

195 } i‡(
synch
 !
NULL
) {

196 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: warning:Çested sync will fail.\n");

198  
Êags
;

199 
	}
}

201 
	$πai_¸ôiˇl_exô
 (
Êags
)

203 
	`©omic_öc
(&
πai_sync_cou¡
);

204 
	`hÆ_¸ôiˇl_exô
(
Êags
);

205 
	}
}

207 
	gIsﬁCpusMask
 = 0;

208 
RTAI_MODULE_PARM
(
IsﬁCpusMask
, 
ul⁄g
);

210 
π_ªque°_úq
 (
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
)

212 
ªt
;

213 
ªt
 = 
	`ùùe_vútuÆize_úq
(&
πai_domaö
, 
úq
, (*)
h™dÀr
, 
cookõ
, 
NULL
, 
IPIPE_HANDLE_MASK
 | 
IPIPE_WIRED_MASK
);

214 i‡(!
ªt
) {

215 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

216 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

217 
πai_ªÆtime_úq
[
úq
].
˝umask
 = 
	`π_assign_úq_to_˝u
(úq, 
IsﬁCpusMask
);

220  
ªt
;

221 
	}
}

223 
	$π_ªÀa£_úq
 (
úq
)

225 
ªt
;

226 
ªt
 = 
	`ùùe_vútuÆize_úq
(&
πai_domaö
, 
úq
, 
NULL
, NULL, NULL, 0);

227 i‡(!
ªt
 && 
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

228 
	`π_assign_úq_to_˝u
(
úq
, 
πai_ªÆtime_úq
[úq].
˝umask
);

231 
	}
}

233 #ifde‡
CONFIG_X86_IO_APIC


234 
	$ack_8259A_úq
(
úq
)

237 
	}
}

239 
	$ack_8259A_úq
(
úq
)

241 
•ölock_t
 
i8259A_lock
;

242 
	`•ö_lock
(&
i8259A_lock
);

243 i‡(
úq
 & 8) {

244 
	`outb
(0x62,0x20);

245 
	`outb
(0x20,0xA0);

247 
	`outb
(0x20,0x20);

249 
	`•ö_u∆ock
(&
i8259A_lock
);

251 
	}
}

254 
π_£t_úq_ack
(
úq
, (*
úq_ack
)(, *))

256 #ifde‡
CONFIG_X86_IO_APIC


257 i‡(
úq_ack
 =(*)
ack_8259A_úq
) {

258  -
ENODEV
;

261 i‡(
úq
 >
RTAI_NR_IRQS
) {

262  -
EINVAL
;

265 
πai_domaö
.
úqs
[
úq
].
ack‚
 = 
úq_ack
 ? (*)úq_ack : 
hÆ_roŸ_domaö
->irqs[irq].ackfn;

267 
	}
}

269 
	$π_£t_úq_cookõ
 (
úq
, *
cookõ
)

271 i‡(
úq
 < 
RTAI_NR_IRQS
) {

272 
πai_domaö
.
úqs
[
úq
].
cookõ
 = cookie;

274 
	}
}

276 
	$π_£t_úq_ªtmode
 (
úq
, 
ªtmode
)

278 i‡(
úq
 < 
RTAI_NR_IRQS
) {

279 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

281 
	}
}

289 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,18)

290 
	#πai_úq_desc
(
úq
Ë
úq_desc
[úq]

	)

291 
	#πai_úq_desc_chù
(
úq
Ë(
úq_desc
[úq].
h™dÀr
)

	)

294 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,19) && LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,27)

295 
	#πai_úq_desc_chù
(
úq
Ë(
úq_desc
[úq].
chù
)

	)

296 
	#πai_úq_desc
(
úq
Ë
úq_desc
[úq]

	)

299 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

300 
	#πai_úq_desc
(
úq
Ë(
	`úq_to_desc
(úq))[0]

	)

301 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,35)

302 
	#πai_úq_desc_chù
(
úq
Ë(
	`úq_to_desc
(úq)->
úq_d©a
.
chù
)

	)

304 
	#πai_úq_desc_chù
(
úq
Ë(
	`úq_to_desc
(úq)->
chù
)

	)

309 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,32)

310 
	#πai_úq_desc_lock
(
úq
, 
Êags
Ë
	`•ö_lock_úqßve
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

311 
	#πai_úq_desc_u∆ock
(
úq
, 
Êags
Ë
	`•ö_u∆ock_úqª°‹e
(&
	`πai_úq_desc
(úq)->
lock
, fœgs)

	)

313 
	#πai_úq_desc_lock
(
úq
, 
Êags
Ë
	`øw_•ö_lock_úqßve
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

314 
	#πai_úq_desc_u∆ock
(
úq
, 
Êags
Ë
	`øw_•ö_u∆ock_úqª°‹e
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

318 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,37)

319 
	#πai_úq_ídis_fun
(
fun
, 
úq
Ë
	`fun
(úq)

	)

321 
	#πai_úq_ídis_fun
(
fun
, 
úq
Ë
úq_
##
	`fun
(&(
	`πai_úq_desc
(úq).
úq_d©a
))

	)

351 
	$π_°¨tup_úq
 (
úq
)

353  
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
°¨tup
, irq);

354 
	}
}

385 
	$π_shutdown_úq
 (
úq
)

387 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
shutdown
, irq);

388 
	}
}

390 
ölöe
 
	$_π_íabÀ_úq
 (
úq
)

392 i‡(
	`πai_úq_desc_chù
(
úq
)->
úq_íabÀ
) {

393 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
íabÀ
, irq);

395 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
unmask
, irq);

397 
	}
}

426 
	$π_íabÀ_úq
 (
úq
)

428 
	`_π_íabÀ_úq
(
úq
);

429 
	}
}

458 
	$π_dißbÀ_úq
 (
úq
)

460 i‡(
	`πai_úq_desc_chù
(
úq
)->
úq_dißbÀ
) {

461 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
dißbÀ
, irq);

463 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask
, irq);

465 
	}
}

498 
	$π_mask_™d_ack_úq
 (
úq
)

500 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask_ack
, irq);

501 
	}
}

503 
ölöe
 
	$_π_íd_úq
 (
úq
)

506 #ifde‡
CONFIG_X86_IO_APIC


507 !
	`IO_APIC_IRQ
(
úq
) ||

509 !(
	`πai_úq_desc
(
úq
).
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

511 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
íd
, irq);

512 
	}
}

545 
	$π_mask_úq
 (
úq
)

547 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask
, irq);

548 
	}
}

550 
	$π_unmask_úq
 (
úq
)

552 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
unmask
, irq);

553 
	}
}

585 
	$π_ack_úq
 (
úq
)

587 
	`_π_íabÀ_úq
(
úq
);

588 
	}
}

590 
	$π_íd_úq
 (
úq
)

593 
	`_π_íabÀ_úq
(
úq
);

594 
	}
}

596 
	$π_eoi_úq
 (
úq
)

598 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
eoi
, irq);

599 
	}
}

625 
	$π_ªque°_löux_úq
 (
úq
, *
h™dÀr
, *
«me
, *
dev_id
)

627 
Êags
;

628 
ªtvÆ
;

630 i‡(
úq
 >
RTAI_NR_IRQS
 || !
h™dÀr
) {

631  -
EINVAL
;

634 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

635 
	`•ö_lock
(&
	`πai_úq_desc
(
úq
).
lock
);

636 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
	`πai_úq_desc
(úq).
a˘i⁄
) {

637 
πai_löux_úq
[
úq
].
Êags
 = 
	`πai_úq_desc
(úq).
a˘i⁄
->flags;

638 
	`πai_úq_desc
(
úq
).
a˘i⁄
->
Êags
 |
IRQF_SHARED
;

640 
	`•ö_u∆ock
(&
	`πai_úq_desc
(
úq
).
lock
);

641 
	`πai_ª°‹e_Êags
(
Êags
);

643 
ªtvÆ
 = 
	`ªque°_úq
(
úq
, 
h™dÀr
, 
IRQF_SHARED
, 
«me
, 
dev_id
);

645  
ªtvÆ
;

646 
	}
}

659 
	$π_‰ì_löux_úq
 (
úq
, *
dev_id
)

661 
Êags
;

663 i‡(
úq
 >
RTAI_NR_IRQS
 || 
πai_löux_úq
[úq].
cou¡
 == 0) {

664  -
EINVAL
;

667 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

668 
	`‰ì_úq
(
úq
, 
dev_id
);

669 
	`•ö_lock
(&
	`πai_úq_desc
(
úq
).
lock
);

670 i‡(--
πai_löux_úq
[
úq
].
cou¡
 =0 && 
	`πai_úq_desc
(úq).
a˘i⁄
) {

671 
	`πai_úq_desc
(
úq
).
a˘i⁄
->
Êags
 = 
πai_löux_úq
[irq].flags;

673 
	`•ö_u∆ock
(&
	`πai_úq_desc
(
úq
).
lock
);

674 
	`πai_ª°‹e_Êags
(
Êags
);

677 
	}
}

687 
	$π_≥nd_löux_úq
 (
úq
)

689 
Êags
;

690 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

691 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

692 
	`πai_ª°‹e_Êags
(
Êags
);

693 
	}
}

695 
RTAI_SYSCALL_MODE
 
	$u§_π_≥nd_löux_úq
 (
úq
)

697 
Êags
;

698 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

699 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

700 
	`πai_ª°‹e_Êags
(
Êags
);

701 
	}
}

722 
π_ªque°_§q
 (
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)())

724 
Êags
;

725 
§q
;

727 i‡(
k_h™dÀr
 =
NULL
) {

728  -
EINVAL
;

731 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

732 i‡(
πai_sy§eq_m≠
 != ~0) {

733 
	`£t_bô
(
§q
 = 
	`ffz
(
πai_sy§eq_m≠
), &rtai_sysreq_map);

734 
πai_sy§eq_èbÀ
[
§q
].
k_h™dÀr
 = k_handler;

735 
πai_sy§eq_èbÀ
[
§q
].
u_h™dÀr
 = u_handler;

736 
πai_sy§eq_èbÀ
[
§q
].
œbñ
 =Üabel;

738 
§q
 = -
EBUSY
;

740 
	`πai_ª°‹e_Êags
(
Êags
);

742  
§q
;

743 
	}
}

753 
	$π_‰ì_§q
 (
§q
)

755  (
§q
 < 1 || srq >
RTAI_NR_SRQS
 || !
	`ã°_™d_˛ór_bô
(§q, &
πai_sy§eq_m≠
)Ë? -
EINVAL
 : 0;

756 
	}
}

768 
	$π_≥nd_löux_§q
 (
§q
)

770 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
) {

771 
Êags
;

772 
	`£t_bô
(
§q
, &
πai_sy§eq_≥ndög
);

773 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

774 
	`hÆ_≥nd_unc⁄d
(
πai_sy§eq_vúq
, 
	`πai_˝uid
());

775 
	`πai_ª°‹e_Êags
(
Êags
);

777 
	}
}

779 #ifde‡
CONFIG_X86_LOCAL_APIC


781 
úqªtu∫_t
 
	$πai_brﬂdˇ°_to_loˇl_timîs
 (
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

783 
Êags
;

785 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

786 #ifde‡
CONFIG_SMP


787 
	`≠ic_waô_i¸_idÀ
();

789 
	`≠ic_wrôe_¨ound
(
APIC_ICR
,
APIC_DM_FIXED
|
APIC_DEST_ALLBUT
|
LOCAL_TIMER_VECTOR
);

791 
	`hÆ_≥nd_unc⁄d
(
LOCAL_TIMER_IPI
, 
	`πai_˝uid
());

792 
	`πai_hw_ª°‹e_Êags
(
Êags
);

794  
RTAI_LINUX_IRQ_HANDLED
;

795 
	}
}

797 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


799 
ölöe
 
	$REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
()

802 
	}
}

804 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

	)

808 
	#REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë
	`π_ªque°_löux_úq
(
RTAI_TIMER_8254_IRQ
, &
πai_brﬂdˇ°_to_loˇl_timîs
, "πai_brﬂdˇ°", &πai_brﬂdˇ°_to_loˇl_timîs)

	)

810 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë
	`π_‰ì_löux_úq
(
RTAI_TIMER_8254_IRQ
, &
πai_brﬂdˇ°_to_loˇl_timîs
)

	)

816 
úqªtu∫_t
 
	$πai_brﬂdˇ°_to_loˇl_timîs
 (
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

818  
RTAI_LINUX_IRQ_HANDLED
;

819 
	}
}

821 
	#REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë0

	)

823 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

	)

827 #ifde‡
CONFIG_SMP


829 
	gπai_ﬁd_úq_afföôy
[
IPIPE_NR_XIRQS
];

830 
	gπai_‹ig_úq_afföôy
[
IPIPE_NR_XIRQS
];

833 
DEFINE_SPINLOCK
(
πai_i£t_lock
);

835 
	gπai_timîs_sync_time
;

837 
≠ic_timî_£tup_d©a
 
	gπai_timî_mode
[
RTAI_NR_CPUS
];

839 
	$πai_¸ôiˇl_sync
 ()

841 
≠ic_timî_£tup_d©a
 *
p
;

843 
πai_sync_Àvñ
) {

845 
p
 = &
πai_timî_mode
[
	`πai_˝uid
()];

846 
	`πai_rdtsc
(Ë< 
πai_timîs_sync_time
);

847 i‡(
p
->
mode
) {

848 
	`πai_£tup_≥riodic_≠ic
(
p
->
cou¡
, 
RTAI_APIC_TIMER_VECTOR
);

850 
	`πai_£tup_⁄eshŸ_≠ic
(
p
->
cou¡
, 
RTAI_APIC_TIMER_VECTOR
);

855 
	`πai_£tup_⁄eshŸ_≠ic
(0, 
RTAI_APIC_TIMER_VECTOR
);

859 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
, 
LOCAL_TIMER_VECTOR
);

863 
	}
}

891 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
)

893 vﬁ©ûê
π_times
 *
πimes
;

894 
≠ic_timî_£tup_d©a
 *
p
;

895 
Êags
;

896 
˝uid
;

898 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST_APIC
,
h™dÀr
,0);

900 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
πai_¸ôiˇl_sync
);

901 
πai_sync_Àvñ
 = 1;

902 
πai_timîs_sync_time
 = 
	`πai_rdtsc
(Ë+ 
	`πai_imuldiv
(
LATCH
, 
πai_tu«bÀs
.
˝u_‰eq
, 
RTAI_FREQ_8254
);

903 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

904 
p
 = &
πai_timî_mode
[
˝uid
];

905 *
p
 = 
tmd©a
[
˝uid
];

906 
πimes
 = &
π_smp_times
[
˝uid
];

907 i‡(
p
->
mode
) {

908 
πimes
->
löux_tick
 = 
RTAI_APIC_ICOUNT
;

909 
πimes
->
tick_time
 = 
	`πai_Œimd
(
πai_timîs_sync_time
, 
RTAI_FREQ_APIC
, 
πai_tu«bÀs
.
˝u_‰eq
);

910 
πimes
->
≥riodic_tick
 = 
	`πai_imuldiv
(
p
->
cou¡
, 
RTAI_FREQ_APIC
, 1000000000);

911 
p
->
cou¡
 = 
πimes
->
≥riodic_tick
;

913 
πimes
->
löux_tick
 = 
	`πai_imuldiv
(
LATCH
, 
πai_tu«bÀs
.
˝u_‰eq
, 
RTAI_FREQ_8254
);

914 
πimes
->
tick_time
 = 
πai_timîs_sync_time
;

915 
πimes
->
≥riodic_tick
 =Ñtimes->
löux_tick
;

916 
p
->
cou¡
 = 
RTAI_APIC_ICOUNT
;

918 
πimes
->
öå_time
 =Ñtimes->
tick_time
 +Ñtimes->
≥riodic_tick
;

919 
πimes
->
löux_time
 =Ñtimes->
tick_time
 +Ñtimes->
löux_tick
;

922 
p
 = &
πai_timî_mode
[
	`πai_˝uid
()];

923 
	`πai_rdtsc
(Ë< 
πai_timîs_sync_time
) ;

925 i‡(
p
->
mode
) {

926 
	`πai_£tup_≥riodic_≠ic
(
p
->
cou¡
,
RTAI_APIC_TIMER_VECTOR
);

928 
	`πai_£tup_⁄eshŸ_≠ic
(
p
->
cou¡
,
RTAI_APIC_TIMER_VECTOR
);

931 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

932 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

934 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

936 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

937 
p
 = &
tmd©a
[
˝uid
];

938 i‡(
p
->
mode
) {

939 
p
->
cou¡
 = 
	`πai_imuldiv
’->cou¡,
RTAI_FREQ_APIC
,1000000000);

941 
p
->
cou¡
 = 
	`πai_imuldiv
’->cou¡,
πai_tu«bÀs
.
˝u_‰eq
,1000000000);

945 
	`πai_¸ôiˇl_exô
(
Êags
);

946 
	`πai_ªque°_tickdev
(
h™dÀr
);

947 
	}
}

952 
	$π_‰ì_≠ic_timîs
()

954 
Êags
;

956 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_APIC_FREE
,0,0);

958 
	`FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

959 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
πai_¸ôiˇl_sync
);

960 
	`πai_ªÀa£_tickdev
();

961 
πai_sync_Àvñ
 = 3;

962 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
,
LOCAL_TIMER_VECTOR
);

963 
	`πai_¸ôiˇl_exô
(
Êags
);

964 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

965 
	}
}

985 
	$π_assign_úq_to_˝u
 (
úq
, 
˝umask
)

987 i‡(
úq
 >
IPIPE_NR_XIRQS
 || &
	`πai_úq_desc
(úqË=
NULL
 || 
	`πai_úq_desc_chù
(úqË=NULL ||Ñèi_úq_desc_chù(úq)->
úq_£t_afföôy
 == NULL) {

990 
ﬁdmask
, 
Êags
;

992 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

993 
	`•ö_lock
(&
πai_i£t_lock
);

994 
	`˝umask_c›y
((*)&
ﬁdmask
, 
	`úq_to_desc
(
úq
)->
úq_d©a
.
afföôy
);

995 
	`hÆ_£t_úq_afföôy
(
úq
, 
	`CPUMASK_T
(
˝umask
));

996 i‡(
ﬁdmask
) {

997 
πai_ﬁd_úq_afföôy
[
úq
] = 
ﬁdmask
;

999 
	`•ö_u∆ock
(&
πai_i£t_lock
);

1000 
	`πai_ª°‹e_Êags
(
Êags
);

1002  
ﬁdmask
;

1004 
	}
}

1025 
	$π_ª£t_úq_to_sym_mode
 (
úq
)

1027 
ﬁdmask
, 
Êags
;

1029 i‡(
úq
 >
IPIPE_NR_XIRQS
) {

1032 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1033 
	`•ö_lock
(&
πai_i£t_lock
);

1034 i‡(
πai_ﬁd_úq_afföôy
[
úq
] == 0) {

1035 
	`•ö_u∆ock
(&
πai_i£t_lock
);

1036 
	`πai_ª°‹e_Êags
(
Êags
);

1037  -
EINVAL
;

1039 
	`˝umask_c›y
((*)&
ﬁdmask
, 
	`úq_to_desc
(
úq
)->
úq_d©a
.
afföôy
);

1040 i‡(
πai_ﬁd_úq_afföôy
[
úq
]) {

1041 
	`hÆ_£t_úq_afföôy
(
úq
, 
	`CPUMASK_T
(
πai_ﬁd_úq_afföôy
[irq]));

1042 
πai_ﬁd_úq_afföôy
[
úq
] = 0;

1044 
	`•ö_u∆ock
(&
πai_i£t_lock
);

1045 
	`πai_ª°‹e_Êags
(
Êags
);

1047  
ﬁdmask
;

1049 
	}
}

1053 
	#πai_¸ôiˇl_sync
 
NULL


	)

1055 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
)

1058 
	}
}

1060 
	$π_‰ì_≠ic_timîs
()

1062 
	`π_‰ì_timî
();

1063 
	}
}

1065 
	$π_assign_úq_to_˝u
 (
úq
, 
˝us_mask
)

1068 
	}
}

1070 
	$π_ª£t_úq_to_sym_mode
 (
úq
)

1073 
	}
}

1088 
	gu£d_≠ic
;

1090 
π_ªque°_timî
 ((*
h™dÀr
)(), 
tick
, 
u£_≠ic
)

1092 
Êags
;

1093 
ªtvÆ
;

1095 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
,
h™dÀr
,
tick
);

1097 
u£d_≠ic
 = 
u£_≠ic
;

1098 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1099 
π_times
.
tick_time
 = 
	`πai_rdtsc
();

1100 i‡(
tick
 > 0) {

1101 
π_times
.
löux_tick
 = 
u£_≠ic
 ? 
RTAI_APIC_ICOUNT
 : 
LATCH
;

1102 
π_times
.
tick_time
 = ((
RTIME
Ït_times.
löux_tick
)*(
jiffõs
 + 1);

1103 
π_times
.
öå_time
 =Ñt_times.
tick_time
 + 
tick
;

1104 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1105 
π_times
.
≥riodic_tick
 = 
tick
;

1107 i‡(
u£_≠ic
) {

1108 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1109 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1110 
	`πai_£tup_≥riodic_≠ic
(
tick
,
RTAI_APIC_TIMER_VECTOR
);

1111 
ªtvÆ
 = 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1113 
	`outb
(0x34, 0x43);

1114 
	`outb
(
tick
 & 0xff, 0x40);

1115 
	`outb
(
tick
 >> 8, 0x40);

1116 
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
);

1117 
ªtvÆ
 = 
	`π_ªque°_úq
(
RTAI_TIMER_8254_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1126 
π_times
.
löux_tick
 = 
	`πai_imuldiv
(
LATCH
,
πai_tu«bÀs
.
˝u_‰eq
,
RTAI_FREQ_8254
);

1127 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1128 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1129 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

1131 i‡(
u£_≠ic
) {

1132 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1133 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1134 
	`πai_£tup_⁄eshŸ_≠ic
(
RTAI_APIC_ICOUNT
,
RTAI_APIC_TIMER_VECTOR
);

1135 
ªtvÆ
 = 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1137 
	`outb
(0x30, 0x43);

1138 
	`outb
(
LATCH
 & 0xff, 0x40);

1139 
	`outb
(
LATCH
 >> 8, 0x40);

1140 
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
);

1141 
ªtvÆ
 = 
	`π_ªque°_úq
(
RTAI_TIMER_8254_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1150 
	`πai_ªque°_tickdev
(
h™dÀr
);

1151 
	`πai_ª°‹e_Êags
(
Êags
);

1152  
ªtvÆ
;

1153 
	}
}

1160 
	$π_‰ì_timî
 ()

1162 
Êags
;

1164 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
,0,0);

1166 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1167 
	`πai_ªÀa£_tickdev
();

1168 i‡(
u£d_≠ic
) {

1169 
	`FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1170 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
, 
LOCAL_TIMER_VECTOR
);

1171 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1172 
u£d_≠ic
 = 0;

1174 
	`outb
(0x34, 0x43);

1175 
	`outb
(
LATCH
 & 0xff, 0x40);

1176 
	`outb
(
LATCH
 >> 8,0x40);

1177 i‡(!
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
)) {

1180 
	`πai_ª°‹e_Êags
(
Êags
);

1181 
	}
}

1183 
RT_TRAP_HANDLER
 
	$π_£t_å≠_h™dÀr
 (
RT_TRAP_HANDLER
 
h™dÀr
)

1185  (
RT_TRAP_HANDLER
)
	`xchg
(&
πai_å≠_h™dÀr
, 
h™dÀr
);

1186 
	}
}

1188 
RTIME
 
	$rd_8254_ts
 ()

1190 
Êags
;

1191 
öc
, 
c2
;

1192 
RTIME
 
t
;

1194 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

1195 
	`outb
(0xD8, 0x43);

1196 
c2
 = 
	`öb
(0x42);

1197 
öc
 = 
πai_œ°_8254_cou¡î2
 - (
c2
 |(
	`öb
(0x42) << 8));

1198 
πai_œ°_8254_cou¡î2
 = 
c2
;

1199 
t
 = (
πai_ts_8254
 +(
öc
 > 0 ? in¯: in¯+ 
RTAI_COUNTER_2_LATCH
));

1200 
	`πai_hw_ª°‹e_Êags
(
Êags
);

1202  
t
;

1203 
	}
}

1205 
	$π_£tup_8254_tsc
 ()

1207 
Êags
;

1208 
c
;

1210 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1211 
	`outb_p
(0x00, 0x43);

1212 
c
 = 
	`öb_p
(0x40);

1213 
c
 |
	`öb_p
(0x40) << 8;

1214 
	`outb_p
(0xB4, 0x43);

1215 
	`outb_p
(
RTAI_COUNTER_2_LATCH
 & 0xff, 0x42);

1216 
	`outb_p
(
RTAI_COUNTER_2_LATCH
 >> 8, 0x42);

1217 
πai_ts_8254
 = 
c
 + ((
RTIME
)
LATCH
)*
jiffõs
;

1218 
πai_œ°_8254_cou¡î2
 = 0;

1219 
	`outb_p
((
	`öb_p
(0x61) & 0xFD) | 1, 0x61);

1220 
	`πai_¸ôiˇl_exô
(
Êags
);

1221 
	}
}

1223 
	#HAL_LOCK_LINUX
() \

1224 dÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
 = 
	`πai_˝uid
()); } 0)

	)

1225 
	#HAL_UNLOCK_LINUX
() \

1226 dÿ{ 
	`πai_˛i
(); 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

1228 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


1229 (*
πai_i§_sched
)(
˝uid
);

1230 
	`EXPORT_SYMBOL
(
πai_i§_sched
);

1231 
	#RTAI_SCHED_ISR_LOCK
() \

1233 i‡(!
π_schedulög
[
˝uid
].
locked
++) { \

1234 
π_schedulög
[
˝uid
].
rq°ed
 = 0; \

1236 
	}
} 0)

	)

1237 
	#RTAI_SCHED_ISR_UNLOCK
() \

1239 i‡(
π_schedulög
[
˝uid
].
locked
 && !(--rt_scheduling[cpuid].locked)) { \

1240 i‡(
π_schedulög
[
˝uid
].
rq°ed
 > 0 && 
πai_i§_sched
) { \

1241 
	`πai_i§_sched
(
˝uid
); \

1244 } 0)

	)

1246 
	#RTAI_SCHED_ISR_LOCK
() \

1247 dÿ{ } 0)

	)

1249 
	#RTAI_SCHED_ISR_UNLOCK
() \

1250 dÿ{ } 0)

	)

1253 
	$πai_húq_di•©chî
 (
úq
)

1255 
˝uid
;

1256 i‡(
πai_domaö
.
úqs
[
úq
].
h™dÀr
) {

1257 
sÊags
;

1258 
	`HAL_LOCK_LINUX
();

1259 
	`RTAI_SCHED_ISR_LOCK
();

1260 
πai_domaö
.
úqs
[
úq
].
	`h™dÀr
(úq,Ñèi_domaö.úqs[úq].
cookõ
);

1261 
	`RTAI_SCHED_ISR_UNLOCK
();

1262 
	`HAL_UNLOCK_LINUX
();

1263 i‡(
πai_ªÆtime_úq
[
úq
].
ªtmode
 || 
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

1267 
	`πai_°i
();

1268 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

1270 
	}
}

1272 
	gPrötFpuTøp
 = 0;

1273 
RTAI_MODULE_PARM
(
PrötFpuTøp
, );

1274 
	gPrötFpuInô
 = 0;

1275 
RTAI_MODULE_PARM
(
PrötFpuInô
, );

1277 
	$πai_å≠_Áu…
 (
evít
, *
evd©a
)

1279 #ifde‡
HINT_DIAG_TRAPS


1280 
å≠s_ö_h¨d_öå
 = 0;

1282 
Êags
;

1283 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1284 i‡(!
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

1285 i‡(!
	`ã°_™d_£t_bô
(
evít
, &
å≠s_ö_h¨d_öå
)) {

1286 
	`HINT_DIAG_MSG
(
	`π_¥ötk
("TRAP %d HAS INTERRUPT DISABLED (TRAPS PICTURE %lx).\n", 
evít
, 
å≠s_ö_h¨d_öå
););

1292 c⁄° 
å≠2sig
[] = {

1293 
SIGFPE
,

1294 
SIGTRAP
,

1295 
SIGSEGV
,

1296 
SIGTRAP
,

1297 
SIGSEGV
,

1298 
SIGSEGV
,

1299 
SIGILL
,

1300 
SIGSEGV
,

1301 
SIGSEGV
,

1302 
SIGFPE
,

1303 
SIGSEGV
,

1304 
SIGBUS
,

1305 
SIGBUS
,

1306 
SIGSEGV
,

1307 
SIGSEGV
,

1309 
SIGFPE
,

1310 
SIGBUS
,

1311 
SIGSEGV
,

1312 
SIGFPE
,

1316 
	`TRACE_RTAI_TRAP_ENTRY
(
evöfo
->
evít
, 0);

1341 i‡(!
	`ö_hπ_mode
(
	`πai_˝uid
())) {

1342 
¥›ag©e
;

1345 i‡(
evít
 == 7) {

1348 
èsk_°ru˘
 *
löux_èsk
 = 
cuºít
;

1359 
	`πai_hw_˛i
();

1360 i‡(
	` xtsk_u£s_Âu
(
löux_èsk
)) {

1361 
	`ª°‹e_Âu
(
löux_èsk
);

1362 i‡(
PrötFpuTøp
) {

1363 
	`π_¥ötk
("\nWARNING: FPU TRAP FROM HARD PID = %d\n", 
löux_èsk
->
pid
);

1366 
	`öô_h¨d_Âu
(
löux_èsk
);

1367 i‡(
PrötFpuInô
) {

1368 
	`π_¥ötk
("\nWARNING: FPU INITIALIZATION FROM HARD PID = %d\n", 
löux_èsk
->
pid
);

1371 
	`πai_hw_°i
();

1372 
ídå≠
;

1376 i‡(
evít
 == 14) {

1377 
±_ªgs
 *
ªgs
 = 
evd©a
;

1378 
addªss
;

1386 
	`πai_hw_˛i
();

1387 
	`__asm__
("mov»%%¸2,%0":"Ù" (
addªss
));

1388 i‡(
addªss
 >
TASK_SIZE
 && !(
ªgs
->
‹ig_óx
 & 5)) {

1389 
asmlökage
 
	`do_∑ge_Áu…
(
±_ªgs
 *
ªgs
, 
îr‹_code
);

1390 
	`do_∑ge_Áu…
(
ªgs
,ªgs->
‹ig_óx
);

1391 
ídå≠
;

1393 
	`πai_hw_°i
();

1397 i‡(
πai_å≠_h™dÀr
 && 
	`πai_å≠_h™dÀr
(
evít
, 
å≠2sig
[evít], (
±_ªgs
 *)
evd©a
, 
NULL
)) {

1398 
ídå≠
;

1400 
¥›ag©e
:

1402 
ídå≠
:

1403 
	`TRACE_RTAI_TRAP_EXIT
();

1405 
	}
}

1407 
	$πai_l§q_di•©chî
 (
vúq
)

1409 
≥ndög
, 
§q
;

1411 
	`•ö_lock
(&
πai_l§q_lock
);

1412 (
≥ndög
 = 
πai_sy§eq_≥ndög
 & ~
πai_sy§eq_ru¬ög
)) {

1413 
	`£t_bô
(
§q
 = 
	`f‚z
(
≥ndög
), &
πai_sy§eq_ru¬ög
);

1414 
	`˛ór_bô
(
§q
, &
πai_sy§eq_≥ndög
);

1415 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1416 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
)) {

1417 
πai_sy§eq_èbÀ
[
§q
].
	`k_h™dÀr
();

1419 
	`˛ór_bô
(
§q
, &
πai_sy§eq_ru¬ög
);

1420 
	`•ö_lock
(&
πai_l§q_lock
);

1422 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1423 
	}
}

1425 
	$πai_u§q_di•©chî
 (
§q
, 
œbñ
)

1427 
	`TRACE_RTAI_SRQ_ENTRY
(
§q
);

1428 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
 && 
	`ã°_bô
(§q, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
u_h™dÀr
) {

1429  
πai_sy§eq_èbÀ
[
§q
].
	`u_h™dÀr
(
œbñ
);

1431 
§q
 = 1; srq < 
RTAI_NR_SRQS
; srq++) {

1432 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
œbñ
 ==Üabel) {

1433  ()
§q
;

1437 
	`TRACE_RTAI_SRQ_EXIT
();

1439 
	}
}

1440 
EXPORT_SYMBOL
(
πai_u§q_di•©chî
);

1442 
	~<asm/πai_usi.h
>

1444 
	$öãr˚±_sysˇŒ_¥ﬁogue
(
evít
, 
±_ªgs
 *
ªgs
)

1446 i‡(
	`likñy
(
ªgs
->
LINUX_SYSCALL_NR
 >
RTAI_SYSCALL_NR
)) {

1447 
§q
 = 
ªgs
->
LINUX_SYSCALL_REG1
;

1448 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
LINUX_SYSCALL_REG2
, (*Ïegs->
LINUX_SYSCALL_REG3
,Ñegs->
LINUX_SYSCALL_FLAGS
, 1);

1449 *((*)
ªgs
->
LINUX_SYSCALL_REG3
Ë
	`πai_u§q_di•©chî
(
§q
,Ñegs->
LINUX_SYSCALL_REG2
);

1450 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
	`πai_˝uid
());

1454 
	}
}

1456 
πai_uvec_h™dÀr
();

1458 #ifde‡
CONFIG_X86_LOCAL_APIC


1459 
hÆ_ªque°_≠ic_‰eq
();

1462 
	~<löux/˛ockchùs.h
>

1463 
	~<löux/ùùe_tickdev.h
>

1465 
	$πai_ö°Æl_¨chdï
 ()

1467 
	`ùùe_£À˘_timîs
(
˝u_a˘ive_mask
);

1468 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
öãr˚±_sysˇŒ_¥ﬁogue
);

1470 i‡(
πai_˝u‰eq_¨g
 == 0) {

1471 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1472 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1474 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,37)

1475 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
sys_˝u_‰eq
;

1477 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

1480 
πai_tu«bÀs
.
˝u_‰eq
 = 
πai_˝u‰eq_¨g
;

1482 #ifde‡
CONFIG_X86_LOCAL_APIC


1483 i‡(
πai_≠ic‰eq_¨g
 == 0) {

1484 
πai_≠ic‰eq_¨g
 = 
HZ
*
	`≠ic_ªad
(
APIC_TMICT
);

1485 
πai_≠ic‰eq_¨g
 = 
	`hÆ_ªque°_≠ic_‰eq
();

1487 
πai_tu«bÀs
.
≠ic_‰eq
 = 
πai_≠ic‰eq_¨g
;

1489 
	}
}

1491 
	$πai_unö°Æl_¨chdï
()

1493 
	`ùùe_timîs_ªÀa£
();

1494 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
NULL
);

1495 
	}
}

1497 
	$πai_ˇlibøã_8254
 ()

1499 
Êags
;

1500 
RTIME
 
t
, 
dt
;

1501 
i
;

1503 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1504 
	`outb
(0x34,0x43);

1505 
t
 = 
	`πai_rdtsc
();

1506 
i
 = 0; i < 10000; i++) {

1507 
	`outb
(
LATCH
 & 0xff,0x40);

1508 
	`outb
(
LATCH
 >> 8,0x40);

1510 
dt
 = 
	`πai_rdtsc
(Ë- 
t
;

1511 
	`πai_¸ôiˇl_exô
(
Êags
);

1513  
	`πai_imuldiv
(
dt
, 100000, 
RTAI_CPU_FREQ
);

1514 
	}
}

1516 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

1517 
	gî∫o
;

1519 
ölöe
 
	$_sysˇŒ3
(, 
sched_£tscheduÀr
, 
pid_t
,
pid
, ,
pﬁicy
, 
sched_∑øm
 *,
∑øm
)

1522 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,4,32)

1524 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1526 
èsk
->
π_¥i‹ôy
 = 
¥io
;

1527 
èsk
->
pﬁicy
 =Öolicy;

1528 
	`£t_tsk_√ed_ªsched
(
cuºít
);

1529 
	}
}

1534 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1536 
	`hÆ_£t_löux_èsk_¥i‹ôy
(
èsk
, 
pﬁicy
, 
¥io
);

1537 i‡(
èsk
->
π_¥i‹ôy
 !
¥io
 ||Åask->
pﬁicy
 !=Öolicy) {

1538 
	`¥ötk
("RTAI[hÆ]: sched_£tscheduÀr’ﬁicy = %d,Öriÿ%dËÁûed, (%†--Öid = %d)\n", 
pﬁicy
, 
¥io
, 
èsk
->
comm
,Åask->
pid
);

1540 
	}
}

1543 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1545 
rc
;

1546 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

1547 
sched_∑øm
 
__u£r
 
∑øm
;

1548 
mm_£gmít_t
 
ﬁd_fs
;

1550 
∑øm
.
sched_¥i‹ôy
 = 
¥io
;

1551 
ﬁd_fs
 = 
	`gë_fs
();

1552 
	`£t_fs
(
KERNEL_DS
);

1553 
rc
 = 
	`sched_£tscheduÀr
(
èsk
->
pid
, 
pﬁicy
, &
∑øm
);

1554 
	`£t_fs
(
ﬁd_fs
);

1556 
sched_∑øm
 
∑øm
 = { 
¥io
 };

1557 
rc
 = 
	`sched_£tscheduÀr
(
èsk
, 
pﬁicy
, &
∑øm
);

1560 i‡(
rc
) {

1563 
	}
}

1568 #ifde‡
CONFIG_PROC_FS


1570 
¥oc_dú_íåy
 *
	gπai_¥oc_roŸ
 = 
NULL
;

1572 #i‡
deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1573 
öô_tsc_sync
();

1574 
˛ónup_tsc_sync
();

1575 vﬁ©ûê
πai_tsc_of°
[];

1578 
	$PROC_READ_FUN
(
πai_ªad_¥oc
)

1580 
i
, 
n⁄e
;

1581 
PROC_PRINT_VARS
;

1583 
	`PROC_PRINT
("\n** RTAI/x86:\n\n");

1584 
	`PROC_PRINT
(" CPU Fªquícy: %lu (Hz)\n", 
πai_tu«bÀs
.
˝u_‰eq
);

1585 
	`PROC_PRINT
(" TIMER Fªquícy: %lu (Hz)\n", 
TIMER_FREQ
);

1586 
	`PROC_PRINT
(" TIMER L©ícy: %d (ns)\n", 
	`πai_imuldiv
(
πai_tu«bÀs
.
œãncy
, 1000000000,Ñèi_tu«bÀs.
˝u_‰eq
));

1587 
	`PROC_PRINT
(" TIMER Sëup: %d (ns)\n", 
	`πai_imuldiv
(
πai_tu«bÀs
.
£tup_time_TIMER_CPUNIT
, 1000000000,Ñèi_tu«bÀs.
˝u_‰eq
));

1589 
n⁄e
 = 1;

1590 
	`PROC_PRINT
("\n** Real-time IRQs used by RTAI: ");

1591 
i
 = 0; i < 
RTAI_NR_IRQS
; i++) {

1592 i‡(
πai_domaö
.
úqs
[
i
].
h™dÀr
) {

1593 i‡(
n⁄e
) {

1594 
	`PROC_PRINT
("\n");

1595 
n⁄e
 = 0;

1597 
	`PROC_PRINT
("\¿ #%dáà%p", 
i
, 
πai_domaö
.
úqs
[i].
h™dÀr
);

1600 i‡(
n⁄e
) {

1601 
	`PROC_PRINT
("none");

1603 
	`PROC_PRINT
("\n\n");

1605 
	`PROC_PRINT
("** RTAIÉxtensionÅraps: \n\n");

1608 
n⁄e
 = 1;

1609 
	`PROC_PRINT
("** RTAI SYSREQs in use: ");

1610 
i
 = 0; i < 
RTAI_NR_SRQS
; i++) {

1611 i‡(
πai_sy§eq_èbÀ
[
i
].
k_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
u_h™dÀr
) {

1612 
	`PROC_PRINT
("#%d ", 
i
);

1613 
n⁄e
 = 0;

1616 i‡(
n⁄e
) {

1617 
	`PROC_PRINT
("none");

1619 
	`PROC_PRINT
("\n\n");

1621 #ifde‡
CONFIG_SMP


1622 #ifde‡
CONFIG_RTAI_DIAG_TSC_SYNC


1623 
	`PROC_PRINT
("** RTAI TSC OFFSETs (TSC units, 0Ñef. CPU): ");

1624 
i
 = 0; i < 
	`num_⁄löe_˝us
(); i++) {

1625 
	`PROC_PRINT
("CPU#%d: %ld; ", 
i
, 
πai_tsc_of°
[i]);

1627 
	`PROC_PRINT
("\n\n");

1629 
	`PROC_PRINT
("** MASK OF CPU†ISOLATED FOR RTAI: 0x%lx.", 
IsﬁCpusMask
);

1630 
	`PROC_PRINT
("\n\n");

1633 
PROC_PRINT_DONE
;

1634 
	}
}

1636 
PROC_READ_OPEN_OPS
(
πai_hÆ_¥oc_f›s
, 
πai_ªad_¥oc
);

1638 
	$πai_¥oc_ªgi°î
 ()

1640 
¥oc_dú_íåy
 *
ít
;

1642 
πai_¥oc_roŸ
 = 
	`CREATE_PROC_ENTRY
("πai", 
S_IFDIR
, 
NULL
, &
πai_hÆ_¥oc_f›s
);

1643 i‡(!
πai_¥oc_roŸ
) {

1644 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai.\n");

1647 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,30)

1648 
πai_¥oc_roŸ
->
ow√r
 = 
THIS_MODULE
;

1650 
ít
 = 
	`CREATE_PROC_ENTRY
("hÆ", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
,

1651 &
πai_hÆ_¥oc_f›s
);

1652 i‡(!
ít
) {

1653 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai/hal.\n");

1656 
	`SET_PROC_READ_ENTRY
(
ít
, 
πai_ªad_¥oc
);

1659 
	}
}

1661 
	$πai_¥oc_uƒegi°î
 ()

1663 
	`ªmove_¥oc_íåy
("hÆ", 
πai_¥oc_roŸ
);

1664 
	`ªmove_¥oc_íåy
("rtai", 0);

1665 
	}
}

1669 
	gFIRST_LINE_OF_RTAI_DOMAIN_ENTRY


1673 
π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: compûed wôh %s.\n", 
CONFIG_RTAI_COMPILER
);

1675 ;;Ë
hÆ_su•íd_domaö
();

1677 
LAST_LINE_OF_RTAI_DOMAIN_ENTRY


1679 
πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
‰om
, 
evít
, (*
h™dÀr
)(, *))

1681  ()
	`hÆ_ˇtch_evít
(
‰om
, 
evít
, (*)
h™dÀr
);

1682 
	}
}

1684 *
hÆ_úq_h™dÀr
;

1686 #unde‡
ack_bad_úq


1687 
	$ack_bad_úq
(
úq
)

1689 
	`¥ötk
("u√x≥˘ed IRQÅø∞© ve˘‹ %02x\n", 
úq
);

1690 #ifde‡
CONFIG_X86_LOCAL_APIC


1691 i‡(
˝u_has_≠ic
) {

1692 
	`__ack_APIC_úq
();

1695 
	}
}

1697 
ùùe_domaö
 
ùùe_roŸ
;

1698 
‰ì_isﬁ˝us_‰om_löux
(*);

1699 
˝u_isﬁ©ed_m≠
;

1701 
	$__πai_hÆ_öô
 ()

1703 
å≠ƒ
, 
hÆöv
 = 0;

1704 
hÆ_©å_°ru˘
 
©å
;

1706 
	`ùùe_ˇtch_evít
(
hÆ_roŸ_domaö
, 0, 0);

1707 
hÆöv
 = 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_EVENTS
;Årapnr++) {

1708 i‡(
hÆ_roŸ_domaö
->
Àgacy
.
h™dÀrs
[
å≠ƒ
] && hal_root_domain->legacy.handlers[trapnr] != hal_root_domain->legacy.handlers[0]) {

1709 
hÆöv
 = 1;

1710 
	`¥ötk
("EVENT %d INVALID %p.\n", 
å≠ƒ
, 
hÆ_roŸ_domaö
->
Àgacy
.
h™dÀrs
[trapnr]);

1713 i‡(
hÆöv
) {

1714 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: HAL IMMEDIATE EVENT DISPATCHING BROKEN.\n");

1717 i‡(
	`num_⁄löe_˝us
(Ë> 
RTAI_NR_CPUS
) {

1718 
	`¥ötk
("RTAI[hal]: RTAI CONFIGURED WITH LESS THAN NUM ONLINE CPUS.\n");

1719 
hÆöv
 = 1;

1722 #i‚de‡
CONFIG_X86_TSC


1723 i‡(
	`num_⁄löe_˝us
() > 1) {

1724 
	`¥ötk
("RTAI[hÆ]: MULTI PROCESSOR SEEN AS A 486, WONT WORK; CONFIGURE LINUX APPROPRIATELY. %d \n", 
πai_˝u‰eq_¨g
);

1725 
hÆöv
 = 1;

1729 #ifde‡
CONFIG_X86_LOCAL_APIC


1730 i‡(!
	`boŸ_˝u_has
(
X86_FEATURE_APIC
)) {

1731 
	`¥ötk
("RTAI[hal]: ERROR, LOCAL APIC CONFIGURED BUT NOT AVAILABLE/ENABLED.\n");

1732 
hÆöv
 = 1;

1736 i‡(!(
πai_sy§eq_vúq
 = 
	`hÆ_Æloc_úq
())) {

1737 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: NO VIRTUAL INTERRUPT AVAILABLE.\n");

1738 
hÆöv
 = 1;

1741 i‡(
hÆöv
) {

1745 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_IRQS
;Årapnr++) {

1746 
πai_domaö
.
úqs
[
å≠ƒ
].
ack‚
 = (*)
hÆ_roŸ_domaö
->irqs[trapnr].ackfn;

1748 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1749 
å≠ƒ
 = 0;Åø≤∏< 
	`num_⁄löe_˝us
();Årapnr++) {

1750 
ùùe_roŸ_°©us
[
å≠ƒ
] = &
hÆ_roŸ_domaö
->
˝ud©a
[å≠ƒ].
°©us
;

1754 
	`ùùe_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, (*)
πai_l§q_di•©chî
, 
NULL
, NULL, 
IPIPE_HANDLE_MASK
);

1755 
hÆ_úq_h™dÀr
 = 
πai_húq_di•©chî
;

1757 
	`πai_ö°Æl_¨chdï
();

1759 #ifde‡
CONFIG_PROC_FS


1760 
	`πai_¥oc_ªgi°î
();

1763 
	`hÆ_öô_©å
(&
©å
);

1764 
©å
.
«me
 = "RTAI";

1765 
©å
.
domid
 = 
RTAI_DOMAIN_ID
;

1766 
©å
.
íåy
 = (*)
πai_domaö_íåy
;

1767 
©å
.
¥i‹ôy
 = 
IPIPE_HEAD_PRIORITY
;

1768 
	`hÆ_ªgi°î_domaö
(&
πai_domaö
, &
©å
);

1769 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1770 
	`ùùe_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, (*)
πai_å≠_Áu…
);

1772 
	`πai_öô_èsk¥i_úqs
();

1774 #ifde‡
CONFIG_SMP


1775 i‡(
IsﬁCpusMask
 && (IsﬁCpusMask !
˝u_isﬁ©ed_m≠
)) {

1776 
	`¥ötk
("\nWARNING: IsﬁCpusMask (%luËd€†nŸ m©ch cpu_isﬁ©ed_m≠ (%luË£à© boŸÅime.\n", 
IsﬁCpusMask
, 
˝u_isﬁ©ed_m≠
);

1778 i‡(!
IsﬁCpusMask
) {

1779 
IsﬁCpusMask
 = 
˝u_isﬁ©ed_m≠
;

1781 i‡(
IsﬁCpusMask
) {

1782 
å≠ƒ
 = 0;Åø≤∏< 
IPIPE_NR_XIRQS
;Årapnr++) {

1783 
πai_‹ig_úq_afföôy
[
å≠ƒ
] = 
	`π_assign_úq_to_˝u
—ø≤r, ~
IsﬁCpusMask
);

1788 
IsﬁCpusMask
 = 0;

1791 
	`¥ötk
(
KERN_INFO
 "RTAI[hÆ]: mou¡ed (%s, IMMEDIATE (INTERNAL IRQ†%s), ISOL_CPUS_MASK: %lx).\n", 
HAL_TYPE
, 
CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 ? "VECTORED" : "DISPATCHED", 
IsﬁCpusMask
);

1793 #i‡
	`deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1794 
	`öô_tsc_sync
();

1799 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1800 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1801 
	`¥ötk
("SYSINFO: CPU†%d, LINUX APIC IRQ %d, TIM_FREQ %Œu, CLK_FREQ %Œu, CPU_FREQ %Œu\n", 
sysöfo
.
sys_ƒ_˝us
, sysöfo.
sys_hπimî_úq
, sysöfo.
sys_hπimî_‰eq
, sysöfo.
sys_hr˛ock_‰eq
, sysöfo.
sys_˝u_‰eq
);

1802 #ifde‡
CONFIG_X86_LOCAL_APIC


1803 
	`¥ötk
("RTAI_APIC_TIMER_IPI: RTAI DEFINED %d, VECTOR %d; LINUX_APIC_TIMER_IPI: RTAI DEFINED %d, VECTOR %d\n", 
RTAI_APIC_TIMER_IPI
, 
	`ùùe_≠ic_ve˘‹_úq
(0xf1), 
LOCAL_TIMER_IPI
, ipipe_apic_vector_irq(0xef));

1804 
	`¥ötk
("TIMER NAME: %s; VARIOUSLY FOUND APIC FREQs: %lu, %lu, %u\n", 
	`ùùe_timî_«me
(), 
	`hÆ_ªque°_≠ic_‰eq
(), hÆ_ªque°_≠ic_‰eq(), 
	`≠ic_ªad
(
APIC_TMICT
)*
HZ
);

1809 
	}
}

1811 
	$__πai_hÆ_exô
 ()

1813 
å≠ƒ
;

1814 #ifde‡
CONFIG_PROC_FS


1815 
	`πai_¥oc_uƒegi°î
();

1817 
hÆ_úq_h™dÀr
 = 
NULL
;

1818 
	`hÆ_uƒegi°î_domaö
(&
πai_domaö
);

1819 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1820 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, 
NULL
);

1822 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, 
NULL
, NULL, 0);

1823 
	`hÆ_‰ì_úq
(
πai_sy§eq_vúq
);

1824 
	`πai_unö°Æl_¨chdï
();

1826 i‡(
IsﬁCpusMask
) {

1827 
å≠ƒ
 = 0;Åø≤∏< 
IPIPE_NR_XIRQS
;Årapnr++) {

1828 
	`π_ª£t_úq_to_sym_mode
(
å≠ƒ
);

1832 #i‡
	`deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1833 
	`˛ónup_tsc_sync
();

1836 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: unmounted.\n");

1837 
	}
}

1839 
moduÀ_öô
(
__πai_hÆ_öô
);

1840 
moduÀ_exô
(
__πai_hÆ_exô
);

1842 
	#VSNPRINTF_BUF
 256

	)

1843 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1845 
buf
[
VSNPRINTF_BUF
];

1846 
va_li°
 
¨gs
;

1848 
	`va_°¨t
(
¨gs
, 
fmt
);

1849 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1850 
	`va_íd
(
¨gs
);

1851  
	`¥ötk
("%s", 
buf
);

1852 
	}
}

1854 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1856 
buf
[
VSNPRINTF_BUF
];

1857 
va_li°
 
¨gs
;

1859 
	`va_°¨t
(
¨gs
, 
fmt
);

1860 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1861 
	`va_íd
(
¨gs
);

1862 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1863  
	`¥ötk
("%s", 
buf
);

1864 
	}
}

1870 *
	$Œ2a
 (
Œ
, *
s
)

1872 
i
, 
k
, 
ul
;

1873 
a
[20];

1875 i‡(
Œ
 < 0) {

1876 
s
[0] = 1;

1877 
Œ
 = -ll;

1879 
s
[0] = 0;

1881 
i
 = 0;

1882 
Œ
 > 0xFFFFFFFF) {

1883 
Œ
 = 
	`πai_uŒdiv
÷l, 10, &
k
);

1884 
a
[++
i
] = 
k
 + '0';

1886 
ul
 = ((*)&
Œ
)[
LOW
];

1888 
ul
 = (
k
 = ul)/10;

1889 
a
[++
i
] = 
k
 - 
ul
*10 + '0';

1890 } 
ul
);

1891 i‡(
s
[0]) {

1892 
k
 = 1;

1893 
s
[0] = '-';

1895 
k
 = 0;

1897 
a
[0] = 0;

1898 (
s
[
k
++] = 
a
[
i
--]));

1899  
s
;

1900 
	}
}

1902 
EXPORT_SYMBOL
(
πai_ªÆtime_úq
);

1903 
EXPORT_SYMBOL
(
π_ªque°_úq
);

1904 
EXPORT_SYMBOL
(
π_ªÀa£_úq
);

1905 
EXPORT_SYMBOL
(
π_£t_úq_cookõ
);

1906 
EXPORT_SYMBOL
(
π_£t_úq_ªtmode
);

1907 
EXPORT_SYMBOL
(
π_°¨tup_úq
);

1908 
EXPORT_SYMBOL
(
π_shutdown_úq
);

1909 
EXPORT_SYMBOL
(
π_íabÀ_úq
);

1910 
EXPORT_SYMBOL
(
π_dißbÀ_úq
);

1911 
EXPORT_SYMBOL
(
π_mask_™d_ack_úq
);

1912 
EXPORT_SYMBOL
(
π_mask_úq
);

1913 
EXPORT_SYMBOL
(
π_unmask_úq
);

1914 
EXPORT_SYMBOL
(
π_ack_úq
);

1915 
EXPORT_SYMBOL
(
π_íd_úq
);

1916 
EXPORT_SYMBOL
(
π_eoi_úq
);

1917 
EXPORT_SYMBOL
(
π_ªque°_löux_úq
);

1918 
EXPORT_SYMBOL
(
π_‰ì_löux_úq
);

1919 
EXPORT_SYMBOL
(
π_≥nd_löux_úq
);

1920 
EXPORT_SYMBOL
(
u§_π_≥nd_löux_úq
);

1921 
EXPORT_SYMBOL
(
π_ªque°_§q
);

1922 
EXPORT_SYMBOL
(
π_‰ì_§q
);

1923 
EXPORT_SYMBOL
(
π_≥nd_löux_§q
);

1924 
EXPORT_SYMBOL
(
π_assign_úq_to_˝u
);

1925 
EXPORT_SYMBOL
(
π_ª£t_úq_to_sym_mode
);

1926 
EXPORT_SYMBOL
(
π_ªque°_≠ic_timîs
);

1927 
EXPORT_SYMBOL
(
π_‰ì_≠ic_timîs
);

1928 
EXPORT_SYMBOL
(
π_ªque°_timî
);

1929 
EXPORT_SYMBOL
(
π_‰ì_timî
);

1930 
EXPORT_SYMBOL
(
π_£t_å≠_h™dÀr
);

1931 
EXPORT_SYMBOL
(
rd_8254_ts
);

1932 
EXPORT_SYMBOL
(
π_£tup_8254_tsc
);

1933 
EXPORT_SYMBOL
(
π_£t_úq_ack
);

1934 
EXPORT_SYMBOL
(
ack_8259A_úq
);

1936 
EXPORT_SYMBOL
(
πai_ˇlibøã_8254
);

1937 
EXPORT_SYMBOL
(
πai_brﬂdˇ°_to_loˇl_timîs
);

1938 
EXPORT_SYMBOL
(
πai_¸ôiˇl_íãr
);

1939 
EXPORT_SYMBOL
(
πai_¸ôiˇl_exô
);

1940 
EXPORT_SYMBOL
(
πai_£t_löux_èsk_¥i‹ôy
);

1942 
EXPORT_SYMBOL
(
πai_löux_c⁄ãxt
);

1943 
EXPORT_SYMBOL
(
πai_domaö
);

1944 
EXPORT_SYMBOL
(
πai_¥oc_roŸ
);

1945 
EXPORT_SYMBOL
(
πai_tu«bÀs
);

1946 
EXPORT_SYMBOL
(
πai_˝u_lock
);

1947 
EXPORT_SYMBOL
(
πai_˝u_ªÆtime
);

1948 
EXPORT_SYMBOL
(
π_times
);

1949 
EXPORT_SYMBOL
(
π_smp_times
);

1951 
EXPORT_SYMBOL
(
π_¥ötk
);

1952 
EXPORT_SYMBOL
(
π_sync_¥ötk
);

1953 
EXPORT_SYMBOL
(
Œ2a
);

1955 
EXPORT_SYMBOL
(
πai_ˇtch_evít
);

1957 
EXPORT_SYMBOL
(
π_schedulög
);

1958 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


1959 
EXPORT_SYMBOL
(
ùùe_roŸ_°©us
);

1962 
EXPORT_SYMBOL
(
IsﬁCpusMask
);

1966 #i‡
deföed
(
CONFIG_GENERIC_CLOCKEVENTS
Ë&& 
CONFIG_RTAI_RTC_FREQ
 == 0

1971 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, 
˛ock_evít_devi˚
 *);

1972 (*
π_löux_hπ_√xt_shŸ
)(, 
˛ock_evít_devi˚
 *);

1979 
	$_π_löux_hπ_£t_mode
(
˛ock_evít_mode
 
mode
, 
˛ock_evít_devi˚
 *
hπ_dev
)

1981 i‡(
mode
 =
CLOCK_EVT_MODE_ONESHOT
 || modê=
CLOCK_EVT_MODE_SHUTDOWN
) {

1982 
π_times
.
löux_tick
 = 0;

1983 } i‡(
mode
 =
CLOCK_EVT_MODE_PERIODIC
) {

1984 
π_times
.
löux_tick
 = 
	`πai_Œimd
((1000000000 + 
HZ
/2)/HZ, 
TIMER_FREQ
, 1000000000);

1986 
	}
}

1988 
	$_π_löux_hπ_√xt_shŸ
(
dñay
, 
˛ock_evít_devi˚
 *
hπ_dev
)

1990 
π_times
.
löux_time
 =Ñt_times.
tick_time
 + 
	`πai_Œimd
(
dñay
, 
TIMER_FREQ
, 1000000000);

1992 
	}
}

1994 #ifde‡
__IPIPE_FEATURE_REQUEST_TICKDEV


1995 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, (*)(b), (*)(c), d,É)

	)

1997 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, b, c, d)

	)

2000 
	$πai_ªque°_tickdev
(*
h™dÀr
)

2002 
mode
, 
˝uid
;

2003 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

2004 i‡((*)
π_löux_hπ_£t_mode
 !(*)
π_löux_hπ_√xt_shŸ
) {

2005 
mode
 = 
	`ùùe_timî_°¨t
(
h™dÀr
, 
π_löux_hπ_£t_mode
, 
π_löux_hπ_√xt_shŸ
, 
˝uid
);

2008 
mode
 = 
	`ùùe_timî_°¨t
(
h™dÀr
, 
_π_löux_hπ_£t_mode
, 
_π_löux_hπ_√xt_shŸ
, 
˝uid
);

2011 i‡(
mode
 =
CLOCK_EVT_MODE_UNUSED
 || modê=
CLOCK_EVT_MODE_ONESHOT
) {

2012 
π_times
.
löux_tick
 = 0;

2013 } i‡(
mode
 !
CLOCK_EVT_MODE_PERIODIC
) {

2014  
mode
;

2018 
	}
}

2020 
	$πai_ªÀa£_tickdev
()

2022 
˝uid
;

2023 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

2025 
	`ùùe_timî_°›
(
˝uid
);

2027 
	}
}

2029 #ifde‡
CONFIG_X86_LOCAL_APIC


2031 
	$hÆ_ªque°_≠ic_‰eq
()

2033 
hÆ_sysöfo_°ru˘
 
sysöfo
;

2034 
	`hÆ_gë_sysöfo
(&
sysöfo
);

2035  
sysöfo
.
sys_hπimî_‰eq
;

2037 
˝uid
, 
avrg_‰eq
, 
‰eq
;

2038 
avrg_‰eq
 = 
‰eq
 = 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

2039 
	`IPIPE_REQUEST_TICKDEV
(
HRT_LINUX_TIMER_NAME
, 
_π_löux_hπ_£t_mode
, 
_π_löux_hπ_√xt_shŸ
, 
˝uid
, &
‰eq
);

2040 
	`ùùe_ªÀa£_tickdev
(
˝uid
);

2041 
avrg_‰eq
 +
‰eq
;

2043 i‡(
avrg_‰eq
) {

2044 i‡((
avrg_‰eq
 /
	`num_⁄löe_˝us
()Ë!
‰eq
) {

2045 
	`¥ötk
("*** APICs FREQs DIFFER ***\n");

2047 *
≠ic_‰eq
 = 
avrg_‰eq
;

2050 
	}
}

2056 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, *);

2057 (*
π_löux_hπ_√xt_shŸ
)(, *);

2059 
	$πai_ªque°_tickdev
(Ë{  0; 
	}
}

2061 
	$πai_ªÀa£_tickdev
(Ë{ ; 
	}
}

2063 
	$hÆ_ªque°_≠ic_‰eq
(*
≠ic_‰eq
Ë{ ; 
	}
}

2067 
EXPORT_SYMBOL
(
π_löux_hπ_£t_mode
);

2068 
EXPORT_SYMBOL
(
π_löux_hπ_√xt_shŸ
);

	@/usr/src/rtai/base/arch/x86/hal/hal_64.c

46 
	~<löux/vîsi⁄.h
>

47 
	~<löux/¶ab.h
>

48 
	~<löux/î∫o.h
>

49 
	~<löux/moduÀ.h
>

50 
	~<löux/öãºu±.h
>

51 
	~<löux/úq.h
>

52 
	~<löux/c⁄sﬁe.h
>

54 
	~<asm/hw_úq.h
>

55 
	~<asm/úq.h
>

56 
	~<asm/desc.h
>

57 
	~<asm/io.h
>

58 
	~<asm/mmu_c⁄ãxt.h
>

59 
	~<asm/uac˚ss.h
>

60 
	~<asm/uni°d.h
>

61 #ifde‡
CONFIG_X86_LOCAL_APIC


62 
	~<asm/fixm≠.h
>

63 
	~<asm/bô›s.h
>

64 
	~<asm/mp•ec.h
>

65 #ifde‡
CONFIG_X86_IO_APIC


66 
	~<asm/io_≠ic.h
>

68 
	~<asm/≠ic.h
>

70 
	#__RTAI_HAL__


	)

71 
	~<asm/πai_hÆ.h
>

72 
	~<asm/πai_lxπ.h
>

73 #ifde‡
CONFIG_PROC_FS


74 
	~<löux/°©.h
>

75 
	~<löux/¥oc_fs.h
>

76 
	~<πai_¥oc_fs.h
>

78 
	~<°d¨g.h
>

80 
MODULE_LICENSE
("GPL");

82 
	gπai_˝u‰eq_¨g
 = 
RTAI_CALIBRATED_CPU_FREQ
;

83 
RTAI_MODULE_PARM
(
πai_˝u‰eq_¨g
, 
ul⁄g
);

85 
	#RTAI_NR_IRQS
 
IPIPE_NR_IRQS


	)

87 #ifde‡
CONFIG_X86_LOCAL_APIC


89 
	gπai_≠ic‰eq_¨g
 = 
RTAI_CALIBRATED_APIC_FREQ
;

90 
RTAI_MODULE_PARM
(
πai_≠ic‰eq_¨g
, 
ul⁄g
);

92 
πai_ªque°_tickdev
(*);

94 
πai_ªÀa£_tickdev
();

96 
ölöe
 
	$πai_£tup_≥riodic_≠ic
 (
cou¡
, 
ve˘‹
)

98 i‡(!
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

99 
	`≠ic_ªad
(
APIC_LVTT
);

100 
	`≠ic_wrôe
(
APIC_LVTT
, 
APIC_LVT_TIMER_PERIODIC
 | 
ve˘‹
);

101 
	`≠ic_ªad
(
APIC_TMICT
);

102 
	`≠ic_wrôe
(
APIC_TMICT
, 
cou¡
);

104 
	}
}

106 
ölöe
 
	$πai_£tup_⁄eshŸ_≠ic
 (
cou¡
, 
ve˘‹
)

108 i‡(!
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

109 
	`≠ic_ªad
(
APIC_LVTT
);

110 
	`≠ic_wrôe
(
APIC_LVTT
, 
ve˘‹
);

111 
	`≠ic_ªad
(
APIC_TMICT
);

112 
	`≠ic_wrôe
(
APIC_TMICT
, 
cou¡
);

114 
	}
}

116 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

117 
	#__ack_APIC_úq
 
ack_APIC_úq


	)

122 
	#πai_£tup_≥riodic_≠ic
(
cou¡
, 
ve˘‹
)

	)

124 
	#πai_£tup_⁄eshŸ_≠ic
(
cou¡
, 
ve˘‹
)

	)

126 
	#__ack_APIC_úq
()

	)

130 °ru˘ { vﬁ©ûê
	mlocked
, 
	mrq°ed
; } 
	gπ_schedulög
[
RTAI_NR_CPUS
];

132 
hÆ_domaö_°ru˘
 
	gπai_domaö
;

134 
πai_ªÆtime_úq_s
 
	gπai_ªÆtime_úq
[
RTAI_NR_IRQS
];

137 
	mÊags
;

138 
	mcou¡
;

139 } 
	gπai_löux_úq
[
RTAI_NR_IRQS
];

142 (*
	mk_h™dÀr
)();

143 (*
	mu_h™dÀr
)();

144 
	mœbñ
;

145 } 
	gπai_sy§eq_èbÀ
[
RTAI_NR_SRQS
];

147 
	gπai_sy§eq_vúq
;

149 
	gπai_sy§eq_m≠
 = 1;

151 
	gπai_sy§eq_≥ndög
;

153 
	gπai_sy§eq_ru¬ög
;

156 
DEFINE_SPINLOCK
(
πai_l§q_lock
);

158 vﬁ©ûê
	gπai_sync_Àvñ
;

160 
©omic_t
 
	gπai_sync_cou¡
 = 
ATOMIC_INIT
(1);

162 
	gπai_œ°_8254_cou¡î2
;

164 
RTIME
 
	gπai_ts_8254
;

166 
RT_TRAP_HANDLER
 
	gπai_å≠_h™dÀr
;

168 
π_times
 
	gπ_times
;

170 
π_times
 
	gπ_smp_times
[
RTAI_NR_CPUS
];

172 
πai_swôch_d©a
 
	gπai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

174 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

175 vﬁ©ûê*
	gùùe_roŸ_°©us
[
RTAI_NR_CPUS
];

178 
ˇlibøti⁄_d©a
 
	gπai_tu«bÀs
;

180 vﬁ©ûê
	gπai_˝u_ªÆtime
;

182 vﬁ©ûê
	gπai_˝u_lock
[2];

184 
πai_¸ôiˇl_íãr
 ((*
synch
)())

186 
Êags
;

188 
Êags
 = 
	`hÆ_¸ôiˇl_íãr
(
synch
);

189 i‡(
	`©omic_dec_™d_ã°
(&
πai_sync_cou¡
)) {

190 
πai_sync_Àvñ
 = 0;

191 } i‡(
synch
 !
NULL
) {

192 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: warning:Çested sync will fail.\n");

194  
Êags
;

195 
	}
}

197 
	$πai_¸ôiˇl_exô
 (
Êags
)

199 
	`©omic_öc
(&
πai_sync_cou¡
);

200 
	`hÆ_¸ôiˇl_exô
(
Êags
);

201 
	}
}

203 
	gIsﬁCpusMask
 = 0;

204 
RTAI_MODULE_PARM
(
IsﬁCpusMask
, 
ul⁄g
);

206 
π_ªque°_úq
 (
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
)

208 
ªt
;

209 
ªt
 = 
	`ùùe_vútuÆize_úq
(&
πai_domaö
, 
úq
, (*)
h™dÀr
, 
cookõ
, 
NULL
, 
IPIPE_HANDLE_MASK
 | 
IPIPE_WIRED_MASK
);

210 i‡(!
ªt
) {

211 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

212 i‡(
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

213 
πai_ªÆtime_úq
[
úq
].
˝umask
 = 
	`π_assign_úq_to_˝u
(úq, 
IsﬁCpusMask
);

216  
ªt
;

217 
	}
}

219 
	$π_ªÀa£_úq
 (
úq
)

221 
ªt
;

222 
ªt
 = 
	`ùùe_vútuÆize_úq
(&
πai_domaö
, 
úq
, 
NULL
, NULL, NULL, 0);

223 i‡(!
ªt
 && 
IsﬁCpusMask
 && 
úq
 < 
IPIPE_NR_XIRQS
) {

224 
	`π_assign_úq_to_˝u
(
úq
, 
πai_ªÆtime_úq
[úq].
˝umask
);

227 
	}
}

229 
π_£t_úq_ack
(
úq
, (*
úq_ack
)(, *))

231 i‡(
úq
 >
RTAI_NR_IRQS
) {

232  -
EINVAL
;

235 
πai_domaö
.
úqs
[
úq
].
ack‚
 = 
úq_ack
 ? (*)úq_ack : 
hÆ_roŸ_domaö
->irqs[irq].ackfn;

237 
	}
}

239 
	$π_£t_úq_cookõ
 (
úq
, *
cookõ
)

241 i‡(
úq
 < 
RTAI_NR_IRQS
) {

242 
πai_domaö
.
úqs
[
úq
].
cookõ
 = cookie;

244 
	}
}

246 
	$π_£t_úq_ªtmode
 (
úq
, 
ªtmode
)

248 i‡(
úq
 < 
RTAI_NR_IRQS
) {

249 
πai_ªÆtime_úq
[
úq
].
ªtmode
 =Ñetmode ? 1 : 0;

251 
	}
}

259 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,18)

260 
	#πai_úq_desc
(
úq
Ë
úq_desc
[úq]

	)

261 
	#πai_úq_desc_chù
(
úq
Ë(
úq_desc
[úq].
h™dÀr
)

	)

264 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,19) && LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,27)

265 
	#πai_úq_desc_chù
(
úq
Ë(
úq_desc
[úq].
chù
)

	)

266 
	#πai_úq_desc
(
úq
Ë
úq_desc
[úq]

	)

269 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,28)

270 
	#πai_úq_desc
(
úq
Ë(
	`úq_to_desc
(úq))[0]

	)

271 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,35)

272 
	#πai_úq_desc_chù
(
úq
Ë(
	`úq_to_desc
(úq)->
úq_d©a
.
chù
)

	)

274 
	#πai_úq_desc_chù
(
úq
Ë(
	`úq_to_desc
(úq)->
chù
)

	)

279 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,32)

280 
	#πai_úq_desc_lock
(
úq
, 
Êags
Ë
	`•ö_lock_úqßve
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

281 
	#πai_úq_desc_u∆ock
(
úq
, 
Êags
Ë
	`•ö_u∆ock_úqª°‹e
(&
	`πai_úq_desc
(úq)->
lock
, fœgs)

	)

283 
	#πai_úq_desc_lock
(
úq
, 
Êags
Ë
	`øw_•ö_lock_úqßve
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

284 
	#πai_úq_desc_u∆ock
(
úq
, 
Êags
Ë
	`øw_•ö_u∆ock_úqª°‹e
(&
	`πai_úq_desc
(úq).
lock
, fœgs)

	)

288 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,37)

289 
	#πai_úq_ídis_fun
(
fun
, 
úq
Ë
	`fun
(úq)

	)

291 
	#πai_úq_ídis_fun
(
fun
, 
úq
Ë
úq_
##
	`fun
(&(
	`πai_úq_desc
(úq).
úq_d©a
))

	)

321 
	$π_°¨tup_úq
 (
úq
)

323  
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
°¨tup
, irq);

324 
	}
}

355 
	$π_shutdown_úq
 (
úq
)

357 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
shutdown
, irq);

358 
	}
}

360 
ölöe
 
	$_π_íabÀ_úq
 (
úq
)

362 i‡(
	`πai_úq_desc_chù
(
úq
)->
úq_íabÀ
) {

363 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
íabÀ
, irq);

365 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
unmask
, irq);

367 
	}
}

396 
	$π_íabÀ_úq
 (
úq
)

398 
	`_π_íabÀ_úq
(
úq
);

399 
	}
}

428 
	$π_dißbÀ_úq
 (
úq
)

430 i‡(
	`πai_úq_desc_chù
(
úq
)->
úq_dißbÀ
) {

431 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
dißbÀ
, irq);

433 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask
, irq);

435 
	}
}

468 
	$π_mask_™d_ack_úq
 (
úq
)

470 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask_ack
, irq);

471 
	}
}

473 
ölöe
 
	$_π_íd_úq
 (
úq
)

476 #ifde‡
CONFIG_X86_IO_APIC


477 !
	`IO_APIC_IRQ
(
úq
) ||

479 !(
	`πai_úq_desc
(
úq
).
°©us
 & (
IRQ_DISABLED
 | 
IRQ_INPROGRESS
))) {

481 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
íd
, irq);

482 
	}
}

515 
	$π_mask_úq
 (
úq
)

517 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
mask
, irq);

518 
	}
}

520 
	$π_unmask_úq
 (
úq
)

522 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
unmask
, irq);

523 
	}
}

555 
	$π_ack_úq
 (
úq
)

557 
	`_π_íabÀ_úq
(
úq
);

558 
	}
}

560 
	$π_íd_úq
 (
úq
)

563 
	`_π_íabÀ_úq
(
úq
);

564 
	}
}

566 
	$π_eoi_úq
 (
úq
)

568 
	`πai_úq_desc_chù
(
úq
)->
	`πai_úq_ídis_fun
(
eoi
, irq);

569 
	}
}

595 
	$π_ªque°_löux_úq
 (
úq
, *
h™dÀr
, *
«me
, *
dev_id
)

597 
Êags
;

598 
ªtvÆ
;

600 i‡(
úq
 >
RTAI_NR_IRQS
 || !
h™dÀr
) {

601  -
EINVAL
;

604 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

605 
	`•ö_lock
(&
	`πai_úq_desc
(
úq
).
lock
);

606 i‡(
πai_löux_úq
[
úq
].
cou¡
++ =0 && 
	`πai_úq_desc
(úq).
a˘i⁄
) {

607 
πai_löux_úq
[
úq
].
Êags
 = 
	`πai_úq_desc
(úq).
a˘i⁄
->flags;

608 
	`πai_úq_desc
(
úq
).
a˘i⁄
->
Êags
 |
IRQF_SHARED
;

610 
	`•ö_u∆ock
(&
	`πai_úq_desc
(
úq
).
lock
);

611 
	`πai_ª°‹e_Êags
(
Êags
);

613 
ªtvÆ
 = 
	`ªque°_úq
(
úq
, 
h™dÀr
, 
IRQF_SHARED
, 
«me
, 
dev_id
);

615  
ªtvÆ
;

616 
	}
}

629 
	$π_‰ì_löux_úq
 (
úq
, *
dev_id
)

631 
Êags
;

633 i‡(
úq
 >
RTAI_NR_IRQS
 || 
πai_löux_úq
[úq].
cou¡
 == 0) {

634  -
EINVAL
;

637 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

638 
	`‰ì_úq
(
úq
, 
dev_id
);

639 
	`•ö_lock
(&
	`πai_úq_desc
(
úq
).
lock
);

640 i‡(--
πai_löux_úq
[
úq
].
cou¡
 =0 && 
	`πai_úq_desc
(úq).
a˘i⁄
) {

641 
	`πai_úq_desc
(
úq
).
a˘i⁄
->
Êags
 = 
πai_löux_úq
[irq].flags;

643 
	`•ö_u∆ock
(&
	`πai_úq_desc
(
úq
).
lock
);

644 
	`πai_ª°‹e_Êags
(
Êags
);

647 
	}
}

657 
	$π_≥nd_löux_úq
 (
úq
)

659 
Êags
;

660 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

661 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

662 
	`πai_ª°‹e_Êags
(
Êags
);

663 
	}
}

665 
RTAI_SYSCALL_MODE
 
	$u§_π_≥nd_löux_úq
 (
úq
)

667 
Êags
;

668 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

669 
	`hÆ_≥nd_unc⁄d
(
úq
, 
	`πai_˝uid
());

670 
	`πai_ª°‹e_Êags
(
Êags
);

671 
	}
}

692 
π_ªque°_§q
 (
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)())

694 
Êags
;

695 
§q
;

697 i‡(
k_h™dÀr
 =
NULL
) {

698  -
EINVAL
;

701 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

702 i‡(
πai_sy§eq_m≠
 != ~0) {

703 
	`£t_bô
(
§q
 = 
	`ffz
(
πai_sy§eq_m≠
), &rtai_sysreq_map);

704 
πai_sy§eq_èbÀ
[
§q
].
k_h™dÀr
 = k_handler;

705 
πai_sy§eq_èbÀ
[
§q
].
u_h™dÀr
 = u_handler;

706 
πai_sy§eq_èbÀ
[
§q
].
œbñ
 =Üabel;

708 
§q
 = -
EBUSY
;

710 
	`πai_ª°‹e_Êags
(
Êags
);

712  
§q
;

713 
	}
}

723 
	$π_‰ì_§q
 (
§q
)

725  (
§q
 < 1 || srq >
RTAI_NR_SRQS
 || !
	`ã°_™d_˛ór_bô
(§q, &
πai_sy§eq_m≠
)Ë? -
EINVAL
 : 0;

726 
	}
}

738 
	$π_≥nd_löux_§q
 (
§q
)

740 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
) {

741 
Êags
;

742 
	`£t_bô
(
§q
, &
πai_sy§eq_≥ndög
);

743 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

744 
	`hÆ_≥nd_unc⁄d
(
πai_sy§eq_vúq
, 
	`πai_˝uid
());

745 
	`πai_ª°‹e_Êags
(
Êags
);

747 
	}
}

749 #ifde‡
CONFIG_X86_LOCAL_APIC


751 
úqªtu∫_t
 
	$πai_brﬂdˇ°_to_loˇl_timîs
 (
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

753 
Êags
;

755 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

756 #ifde‡
CONFIG_SMP


757 
	`≠ic_waô_i¸_idÀ
();

759 
	`≠ic_wrôe_¨ound
(
APIC_ICR
,
APIC_DM_FIXED
|
APIC_DEST_ALLBUT
|
LOCAL_TIMER_VECTOR
);

761 
	`hÆ_≥nd_unc⁄d
(
LOCAL_TIMER_IPI
, 
	`πai_˝uid
());

762 
	`πai_hw_ª°‹e_Êags
(
Êags
);

764  
RTAI_LINUX_IRQ_HANDLED
;

765 
	}
}

767 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


769 
ölöe
 
	$REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
()

772 
	}
}

774 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

	)

778 
	#REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë
	`π_ªque°_löux_úq
(
RTAI_TIMER_8254_IRQ
, &
πai_brﬂdˇ°_to_loˇl_timîs
, "πai_brﬂdˇ°", &πai_brﬂdˇ°_to_loˇl_timîs)

	)

780 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë
	`π_‰ì_löux_úq
(
RTAI_TIMER_8254_IRQ
, &
πai_brﬂdˇ°_to_loˇl_timîs
)

	)

786 
úqªtu∫_t
 
	$πai_brﬂdˇ°_to_loˇl_timîs
 (
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

788  
RTAI_LINUX_IRQ_HANDLED
;

789 
	}
}

791 
	#REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
(Ë0

	)

793 
	#FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

	)

797 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

799 
	#RTAI_IRQ_ACK
(
úq
) \

801 
πai_ªÆtime_úq
[
úq
].
	`úq_ack
(úq, &(
	`πai_úq_desc
(irq))); \

802 } 0)

	)

806 
	#RTAI_IRQ_ACK
(
úq
) \

808 (((*)())
πai_ªÆtime_úq
[
úq
].
úq_ack
)(irq); \

809 } 0)

	)

813 #ifde‡
CONFIG_SMP


815 
	gπai_ﬁd_úq_afföôy
[
IPIPE_NR_XIRQS
];

816 
	gπai_‹ig_úq_afföôy
[
IPIPE_NR_XIRQS
];

819 
DEFINE_SPINLOCK
(
πai_i£t_lock
);

821 
	gπai_timîs_sync_time
;

823 
≠ic_timî_£tup_d©a
 
	gπai_timî_mode
[
RTAI_NR_CPUS
];

825 
	$πai_¸ôiˇl_sync
 ()

827 
≠ic_timî_£tup_d©a
 *
p
;

829 
πai_sync_Àvñ
) {

831 
p
 = &
πai_timî_mode
[
	`πai_˝uid
()];

832 
	`πai_rdtsc
(Ë< 
πai_timîs_sync_time
);

833 i‡(
p
->
mode
) {

834 
	`πai_£tup_≥riodic_≠ic
(
p
->
cou¡
, 
RTAI_APIC_TIMER_VECTOR
);

836 
	`πai_£tup_⁄eshŸ_≠ic
(
p
->
cou¡
, 
RTAI_APIC_TIMER_VECTOR
);

841 
	`πai_£tup_⁄eshŸ_≠ic
(0, 
RTAI_APIC_TIMER_VECTOR
);

845 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
, 
LOCAL_TIMER_VECTOR
);

849 
	}
}

877 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
)

879 vﬁ©ûê
π_times
 *
πimes
;

880 
≠ic_timî_£tup_d©a
 *
p
;

881 
Êags
;

882 
˝uid
;

884 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST_APIC
,
h™dÀr
,0);

886 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
πai_¸ôiˇl_sync
);

887 
πai_sync_Àvñ
 = 1;

888 
πai_timîs_sync_time
 = 
	`πai_rdtsc
(Ë+ 
	`πai_imuldiv
(
LATCH
, 
πai_tu«bÀs
.
˝u_‰eq
, 
RTAI_FREQ_8254
);

889 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

890 
p
 = &
πai_timî_mode
[
˝uid
];

891 *
p
 = 
tmd©a
[
˝uid
];

892 
πimes
 = &
π_smp_times
[
˝uid
];

893 i‡(
p
->
mode
) {

894 
πimes
->
löux_tick
 = 
RTAI_APIC_ICOUNT
;

895 
πimes
->
tick_time
 = 
	`πai_Œimd
(
πai_timîs_sync_time
, 
RTAI_FREQ_APIC
, 
πai_tu«bÀs
.
˝u_‰eq
);

896 
πimes
->
≥riodic_tick
 = 
	`πai_imuldiv
(
p
->
cou¡
, 
RTAI_FREQ_APIC
, 1000000000);

897 
p
->
cou¡
 = 
πimes
->
≥riodic_tick
;

899 
πimes
->
löux_tick
 = 
	`πai_imuldiv
(
LATCH
, 
πai_tu«bÀs
.
˝u_‰eq
, 
RTAI_FREQ_8254
);

900 
πimes
->
tick_time
 = 
πai_timîs_sync_time
;

901 
πimes
->
≥riodic_tick
 =Ñtimes->
löux_tick
;

902 
p
->
cou¡
 = 
RTAI_APIC_ICOUNT
;

904 
πimes
->
öå_time
 =Ñtimes->
tick_time
 +Ñtimes->
≥riodic_tick
;

905 
πimes
->
löux_time
 =Ñtimes->
tick_time
 +Ñtimes->
löux_tick
;

908 
p
 = &
πai_timî_mode
[
	`πai_˝uid
()];

909 
	`πai_rdtsc
(Ë< 
πai_timîs_sync_time
) ;

911 i‡(
p
->
mode
) {

912 
	`πai_£tup_≥riodic_≠ic
(
p
->
cou¡
,
RTAI_APIC_TIMER_VECTOR
);

914 
	`πai_£tup_⁄eshŸ_≠ic
(
p
->
cou¡
,
RTAI_APIC_TIMER_VECTOR
);

917 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

918 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

920 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

922 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

923 
p
 = &
tmd©a
[
˝uid
];

924 i‡(
p
->
mode
) {

925 
p
->
cou¡
 = 
	`πai_imuldiv
’->cou¡,
RTAI_FREQ_APIC
,1000000000);

927 
p
->
cou¡
 = 
	`πai_imuldiv
’->cou¡,
πai_tu«bÀs
.
˝u_‰eq
,1000000000);

931 
	`πai_¸ôiˇl_exô
(
Êags
);

932 
	`πai_ªque°_tickdev
(
h™dÀr
);

933 
	}
}

938 
	$π_‰ì_≠ic_timîs
()

940 
Êags
;

942 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_APIC_FREE
,0,0);

944 
	`FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

945 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
πai_¸ôiˇl_sync
);

946 
	`πai_ªÀa£_tickdev
();

947 
πai_sync_Àvñ
 = 3;

948 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
,
LOCAL_TIMER_VECTOR
);

949 
	`πai_¸ôiˇl_exô
(
Êags
);

950 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

951 
	}
}

971 
	$π_assign_úq_to_˝u
 (
úq
, 
˝umask
)

973 i‡(
úq
 >
IPIPE_NR_XIRQS
 || &
	`πai_úq_desc
(úqË=
NULL
 || 
	`πai_úq_desc_chù
(úqË=NULL ||Ñèi_úq_desc_chù(úq)->
úq_£t_afföôy
 == NULL) {

976 
ﬁdmask
, 
Êags
;

978 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

979 
	`•ö_lock
(&
πai_i£t_lock
);

980 
	`˝umask_c›y
((*)&
ﬁdmask
, 
	`úq_to_desc
(
úq
)->
úq_d©a
.
afföôy
);

981 
	`hÆ_£t_úq_afföôy
(
úq
, 
	`CPUMASK_T
(
˝umask
));

982 i‡(
ﬁdmask
) {

983 
πai_ﬁd_úq_afföôy
[
úq
] = 
ﬁdmask
;

985 
	`•ö_u∆ock
(&
πai_i£t_lock
);

986 
	`πai_ª°‹e_Êags
(
Êags
);

988  
ﬁdmask
;

990 
	}
}

1011 
	$π_ª£t_úq_to_sym_mode
 (
úq
)

1013 
ﬁdmask
, 
Êags
;

1015 i‡(
úq
 >
IPIPE_NR_XIRQS
) {

1018 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1019 
	`•ö_lock
(&
πai_i£t_lock
);

1020 i‡(
πai_ﬁd_úq_afföôy
[
úq
] == 0) {

1021 
	`•ö_u∆ock
(&
πai_i£t_lock
);

1022 
	`πai_ª°‹e_Êags
(
Êags
);

1023  -
EINVAL
;

1025 
	`˝umask_c›y
((*)&
ﬁdmask
, 
	`úq_to_desc
(
úq
)->
úq_d©a
.
afföôy
);

1026 i‡(
πai_ﬁd_úq_afföôy
[
úq
]) {

1027 
	`hÆ_£t_úq_afföôy
(
úq
, 
	`CPUMASK_T
(
πai_ﬁd_úq_afföôy
[irq]));

1028 
πai_ﬁd_úq_afföôy
[
úq
] = 0;

1030 
	`•ö_u∆ock
(&
πai_i£t_lock
);

1031 
	`πai_ª°‹e_Êags
(
Êags
);

1033  
ﬁdmask
;

1035 
	}
}

1039 
	#πai_¸ôiˇl_sync
 
NULL


	)

1041 
π_ªque°_≠ic_timîs
 ((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
tmd©a
)

1044 
	}
}

1046 
	$π_‰ì_≠ic_timîs
()

1048 
	`π_‰ì_timî
();

1049 
	}
}

1051 
	$π_assign_úq_to_˝u
 (
úq
, 
˝us_mask
)

1054 
	}
}

1056 
	$π_ª£t_úq_to_sym_mode
 (
úq
)

1059 
	}
}

1074 
	gu£d_≠ic
;

1076 
π_ªque°_timî
 ((*
h™dÀr
)(), 
tick
, 
u£_≠ic
)

1078 
Êags
;

1079 
ªtvÆ
;

1081 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_REQUEST
,
h™dÀr
,
tick
);

1083 
u£d_≠ic
 = 
u£_≠ic
;

1084 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1085 
π_times
.
tick_time
 = 
	`πai_rdtsc
();

1086 i‡(
tick
 > 0) {

1087 
π_times
.
löux_tick
 = 
u£_≠ic
 ? 
RTAI_APIC_ICOUNT
 : 
LATCH
;

1088 
π_times
.
tick_time
 = ((
RTIME
Ït_times.
löux_tick
)*(
jiffõs
 + 1);

1089 
π_times
.
öå_time
 =Ñt_times.
tick_time
 + 
tick
;

1090 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1091 
π_times
.
≥riodic_tick
 = 
tick
;

1093 i‡(
u£_≠ic
) {

1094 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1095 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1096 
	`πai_£tup_≥riodic_≠ic
(
tick
,
RTAI_APIC_TIMER_VECTOR
);

1097 
ªtvÆ
 = 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1099 
	`outb
(0x34, 0x43);

1100 
	`outb
(
tick
 & 0xff, 0x40);

1101 
	`outb
(
tick
 >> 8, 0x40);

1102 
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
);

1103 
ªtvÆ
 = 
	`π_ªque°_úq
(
RTAI_TIMER_8254_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1112 
π_times
.
löux_tick
 = 
	`πai_imuldiv
(
LATCH
,
πai_tu«bÀs
.
˝u_‰eq
,
RTAI_FREQ_8254
);

1113 
π_times
.
öå_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1114 
π_times
.
löux_time
 =Ñt_times.
tick_time
 +Ñt_times.
löux_tick
;

1115 
π_times
.
≥riodic_tick
 =Ñt_times.
löux_tick
;

1117 i‡(
u£_≠ic
) {

1118 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1119 
	`π_ªque°_úq
(
RTAI_APIC_TIMER_IPI
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1120 
	`πai_£tup_⁄eshŸ_≠ic
(
RTAI_APIC_ICOUNT
,
RTAI_APIC_TIMER_VECTOR
);

1121 
ªtvÆ
 = 
	`REQUEST_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1123 
	`outb
(0x30, 0x43);

1124 
	`outb
(
LATCH
 & 0xff, 0x40);

1125 
	`outb
(
LATCH
 >> 8, 0x40);

1126 
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
);

1127 
ªtvÆ
 = 
	`π_ªque°_úq
(
RTAI_TIMER_8254_IRQ
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

1136 
	`πai_ªque°_tickdev
(
h™dÀr
);

1137 
	`πai_ª°‹e_Êags
(
Êags
);

1138  
ªtvÆ
;

1139 
	}
}

1146 
	$π_‰ì_timî
 ()

1148 
Êags
;

1150 
	`TRACE_RTAI_TIMER
(
TRACE_RTAI_EV_TIMER_FREE
,0,0);

1152 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1153 
	`πai_ªÀa£_tickdev
();

1154 i‡(
u£d_≠ic
) {

1155 
	`FREE_LINUX_IRQ_BROADCAST_TO_APIC_TIMERS
();

1156 
	`πai_£tup_≥riodic_≠ic
(
RTAI_APIC_ICOUNT
, 
LOCAL_TIMER_VECTOR
);

1157 
	`π_ªÀa£_úq
(
RTAI_APIC_TIMER_IPI
);

1158 
u£d_≠ic
 = 0;

1160 
	`outb
(0x34, 0x43);

1161 
	`outb
(
LATCH
 & 0xff, 0x40);

1162 
	`outb
(
LATCH
 >> 8,0x40);

1163 i‡(!
	`π_ªÀa£_úq
(
RTAI_TIMER_8254_IRQ
)) {

1166 
	`πai_ª°‹e_Êags
(
Êags
);

1167 
	}
}

1169 
RT_TRAP_HANDLER
 
	$π_£t_å≠_h™dÀr
 (
RT_TRAP_HANDLER
 
h™dÀr
)

1171  (
RT_TRAP_HANDLER
)
	`xchg
(&
πai_å≠_h™dÀr
, 
h™dÀr
);

1172 
	}
}

1174 
RTIME
 
	$rd_8254_ts
 ()

1176 
Êags
;

1177 
öc
, 
c2
;

1178 
RTIME
 
t
;

1180 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

1181 
	`outb
(0xD8, 0x43);

1182 
c2
 = 
	`öb
(0x42);

1183 
öc
 = 
πai_œ°_8254_cou¡î2
 - (
c2
 |(
	`öb
(0x42) << 8));

1184 
πai_œ°_8254_cou¡î2
 = 
c2
;

1185 
t
 = (
πai_ts_8254
 +(
öc
 > 0 ? in¯: in¯+ 
RTAI_COUNTER_2_LATCH
));

1186 
	`πai_hw_ª°‹e_Êags
(
Êags
);

1188  
t
;

1189 
	}
}

1191 
	$π_£tup_8254_tsc
 ()

1193 
Êags
;

1194 
c
;

1196 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1197 
	`outb_p
(0x00, 0x43);

1198 
c
 = 
	`öb_p
(0x40);

1199 
c
 |
	`öb_p
(0x40) << 8;

1200 
	`outb_p
(0xB4, 0x43);

1201 
	`outb_p
(
RTAI_COUNTER_2_LATCH
 & 0xff, 0x42);

1202 
	`outb_p
(
RTAI_COUNTER_2_LATCH
 >> 8, 0x42);

1203 
πai_ts_8254
 = 
c
 + ((
RTIME
)
LATCH
)*
jiffõs
;

1204 
πai_œ°_8254_cou¡î2
 = 0;

1205 
	`outb_p
((
	`öb_p
(0x61) & 0xFD) | 1, 0x61);

1206 
	`πai_¸ôiˇl_exô
(
Êags
);

1207 
	}
}

1209 
	#HAL_LOCK_LINUX
() \

1210 dÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
 = 
	`πai_˝uid
()); } 0)

	)

1211 
	#HAL_UNLOCK_LINUX
() \

1212 dÿ{ 
	`πai_˛i
(); 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

1214 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


1215 (*
πai_i§_sched
)(
˝uid
);

1216 
	`EXPORT_SYMBOL
(
πai_i§_sched
);

1217 
	#RTAI_SCHED_ISR_LOCK
() \

1219 i‡(!
π_schedulög
[
˝uid
].
locked
++) { \

1220 
π_schedulög
[
˝uid
].
rq°ed
 = 0; \

1222 
	}
} 0)

	)

1223 
	#RTAI_SCHED_ISR_UNLOCK
() \

1225 i‡(
π_schedulög
[
˝uid
].
locked
 && !(--rt_scheduling[cpuid].locked)) { \

1226 i‡(
π_schedulög
[
˝uid
].
rq°ed
 > 0 && 
πai_i§_sched
) { \

1227 
	`πai_i§_sched
(
˝uid
); \

1230 } 0)

	)

1232 
	#RTAI_SCHED_ISR_LOCK
() \

1233 dÿ{ } 0)

	)

1235 
	#RTAI_SCHED_ISR_UNLOCK
() \

1236 dÿ{ } 0)

	)

1239 
	$πai_húq_di•©chî
 (
úq
)

1241 
˝uid
;

1242 i‡(
πai_domaö
.
úqs
[
úq
].
h™dÀr
) {

1243 
sÊags
;

1244 
	`HAL_LOCK_LINUX
();

1245 
	`RTAI_SCHED_ISR_LOCK
();

1246 
πai_domaö
.
úqs
[
úq
].
	`h™dÀr
(úq,Ñèi_domaö.úqs[úq].
cookõ
);

1247 
	`RTAI_SCHED_ISR_UNLOCK
();

1248 
	`HAL_UNLOCK_LINUX
();

1249 i‡(
πai_ªÆtime_úq
[
úq
].
ªtmode
 || 
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) {

1253 
	`πai_°i
();

1254 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
);

1256 
	}
}

1261 #ifde‡
HINT_DIAG_ECHO


1262 
	#HINT_DIAG_MSG
(
x
Ë
	)
x

1264 
	#HINT_DIAG_MSG
(
x
)

	)

1267 
	gPrötFpuTøp
 = 0;

1268 
RTAI_MODULE_PARM
(
PrötFpuTøp
, );

1269 
	gPrötFpuInô
 = 0;

1270 
RTAI_MODULE_PARM
(
PrötFpuInô
, );

1272 
	$πai_å≠_Áu…
 (
evít
, *
evd©a
)

1274 #ifde‡
HINT_DIAG_TRAPS


1275 
å≠s_ö_h¨d_öå
 = 0;

1277 
Êags
;

1278 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1279 i‡(!
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

1280 i‡(!
	`ã°_™d_£t_bô
(
evít
, &
å≠s_ö_h¨d_öå
)) {

1281 
	`HINT_DIAG_MSG
(
	`π_¥ötk
("TRAP %d HAS INTERRUPT DISABLED (TRAPS PICTURE %lx).\n", 
evít
, 
å≠s_ö_h¨d_öå
););

1287 c⁄° 
å≠2sig
[] = {

1288 
SIGFPE
,

1289 
SIGTRAP
,

1290 
SIGSEGV
,

1291 
SIGTRAP
,

1292 
SIGSEGV
,

1293 
SIGSEGV
,

1294 
SIGILL
,

1295 
SIGSEGV
,

1296 
SIGSEGV
,

1297 
SIGFPE
,

1298 
SIGSEGV
,

1299 
SIGBUS
,

1300 
SIGBUS
,

1301 
SIGSEGV
,

1302 
SIGSEGV
,

1304 
SIGFPE
,

1305 
SIGBUS
,

1306 
SIGSEGV
,

1307 
SIGFPE
,

1311 i‡(!
	`ö_hπ_mode
(
	`πai_˝uid
())) {

1312 
¥›ag©e
;

1315 i‡(
evít
 == 7) {

1316 
èsk_°ru˘
 *
löux_èsk
 = 
cuºít
;

1317 
	`πai_hw_˛i
();

1318 i‡(
	` xtsk_u£s_Âu
(
löux_èsk
)) {

1319 
	`ª°‹e_Âu
(
löux_èsk
);

1320 i‡(
PrötFpuTøp
) {

1321 
	`π_¥ötk
("\nWARNING: FPU TRAP FROM HARD PID = %d\n", 
löux_èsk
->
pid
);

1324 
	`öô_h¨d_Âu
(
löux_èsk
);

1325 i‡(
PrötFpuInô
) {

1326 
	`π_¥ötk
("\nWARNING: FPU INITIALIZATION FROM HARD PID = %d\n", 
löux_èsk
->
pid
);

1329 
	`πai_hw_°i
();

1330 
ídå≠
;

1332 i‡(
πai_å≠_h™dÀr
 && 
	`πai_å≠_h™dÀr
(
evít
, 
å≠2sig
[evít], (
±_ªgs
 *)
evd©a
, 
NULL
)) {

1333 
ídå≠
;

1335 
¥›ag©e
:

1337 
ídå≠
:

1339 
	}
}

1341 
	$πai_l§q_di•©chî
 (
vúq
)

1343 
≥ndög
, 
§q
;

1345 
	`•ö_lock
(&
πai_l§q_lock
);

1346 (
≥ndög
 = 
πai_sy§eq_≥ndög
 & ~
πai_sy§eq_ru¬ög
)) {

1347 
	`£t_bô
(
§q
 = 
	`f‚z
(
≥ndög
), &
πai_sy§eq_ru¬ög
);

1348 
	`˛ór_bô
(
§q
, &
πai_sy§eq_≥ndög
);

1349 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1350 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
)) {

1351 
πai_sy§eq_èbÀ
[
§q
].
	`k_h™dÀr
();

1353 
	`˛ór_bô
(
§q
, &
πai_sy§eq_ru¬ög
);

1354 
	`•ö_lock
(&
πai_l§q_lock
);

1356 
	`•ö_u∆ock
(&
πai_l§q_lock
);

1357 
	}
}

1359 
	$πai_u§q_di•©chî
 (
§q
, 
œbñ
)

1361 
	`TRACE_RTAI_SRQ_ENTRY
(
§q
);

1362 i‡(
§q
 > 0 && srq < 
RTAI_NR_SRQS
 && 
	`ã°_bô
(§q, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
u_h™dÀr
) {

1363  
πai_sy§eq_èbÀ
[
§q
].
	`u_h™dÀr
(
œbñ
);

1365 
§q
 = 1; srq < 
RTAI_NR_SRQS
; srq++) {

1366 i‡(
	`ã°_bô
(
§q
, &
πai_sy§eq_m≠
Ë&& 
πai_sy§eq_èbÀ
[§q].
œbñ
 ==Üabel) {

1367  ()
§q
;

1371 
	`TRACE_RTAI_SRQ_EXIT
();

1373 
	}
}

1374 
EXPORT_SYMBOL
(
πai_u§q_di•©chî
);

1376 
	~<asm/πai_usi.h
>

1378 
	$öãr˚±_sysˇŒ_¥ﬁogue
(
evít
, 
±_ªgs
 *
ªgs
)

1380 i‡(
	`likñy
(
ªgs
->
LINUX_SYSCALL_NR
 >
RTAI_SYSCALL_NR
)) {

1381 
§q
 = 
ªgs
->
LINUX_SYSCALL_REG1
;

1382 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
LINUX_SYSCALL_REG2
, (*Ïegs->
LINUX_SYSCALL_REG3
,Ñegs->
LINUX_SYSCALL_FLAGS
, 1);

1383 *((*)
ªgs
->
LINUX_SYSCALL_REG3
Ë
	`πai_u§q_di•©chî
(
§q
,Ñegs->
LINUX_SYSCALL_REG2
);

1384 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
	`πai_˝uid
());

1388 
	}
}

1390 
πai_uvec_h™dÀr
();

1392 #ifde‡
CONFIG_X86_LOCAL_APIC


1393 
hÆ_ªque°_≠ic_‰eq
();

1396 
	~<löux/˛ockchùs.h
>

1397 
	~<löux/ùùe_tickdev.h
>

1399 
	$πai_ö°Æl_¨chdï
 ()

1401 
	`ùùe_£À˘_timîs
(
˝u_a˘ive_mask
);

1402 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
öãr˚±_sysˇŒ_¥ﬁogue
);

1404 i‡(
πai_˝u‰eq_¨g
 == 0) {

1405 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1406 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1408 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,37)

1409 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
sys_˝u_‰eq
;

1411 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

1414 
πai_tu«bÀs
.
˝u_‰eq
 = 
πai_˝u‰eq_¨g
;

1416 #ifde‡
CONFIG_X86_LOCAL_APIC


1417 i‡(
πai_≠ic‰eq_¨g
 == 0) {

1418 
πai_≠ic‰eq_¨g
 = 
HZ
*
	`≠ic_ªad
(
APIC_TMICT
);

1419 
πai_≠ic‰eq_¨g
 = 
	`hÆ_ªque°_≠ic_‰eq
();

1421 
πai_tu«bÀs
.
≠ic_‰eq
 = 
πai_≠ic‰eq_¨g
;

1423 
	}
}

1425 
	$πai_unö°Æl_¨chdï
()

1427 
	`ùùe_timîs_ªÀa£
();

1428 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
NULL
);

1429 
	}
}

1431 
	$πai_ˇlibøã_8254
 ()

1433 
Êags
;

1434 
RTIME
 
t
, 
dt
;

1435 
i
;

1437 
Êags
 = 
	`πai_¸ôiˇl_íãr
(
NULL
);

1438 
	`outb
(0x34,0x43);

1439 
t
 = 
	`πai_rdtsc
();

1440 
i
 = 0; i < 10000; i++) {

1441 
	`outb
(
LATCH
 & 0xff,0x40);

1442 
	`outb
(
LATCH
 >> 8,0x40);

1444 
dt
 = 
	`πai_rdtsc
(Ë- 
t
;

1445 
	`πai_¸ôiˇl_exô
(
Êags
);

1447  
	`πai_imuldiv
(
dt
, 100000, 
RTAI_CPU_FREQ
);

1448 
	}
}

1450 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

1451 
	gî∫o
;

1453 
ölöe
 
	$_sysˇŒ3
(, 
sched_£tscheduÀr
, 
pid_t
,
pid
, ,
pﬁicy
, 
sched_∑øm
 *,
∑øm
)

1456 *
sys_ˇŒ_èbÀ
[];

1458 
	$πai_£t_löux_èsk_¥i‹ôy
 (
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
)

1460 
	`hÆ_£t_löux_èsk_¥i‹ôy
(
èsk
, 
pﬁicy
, 
¥io
);

1461 i‡(
èsk
->
π_¥i‹ôy
 !
¥io
 ||Åask->
pﬁicy
 !=Öolicy) {

1462 
	`¥ötk
("RTAI[hÆ]: sched_£tscheduÀr’ﬁicy = %d,Öriÿ%dËÁûed, (%†--Öid = %d)\n", 
pﬁicy
, 
¥io
, 
èsk
->
comm
,Åask->
pid
);

1464 
	}
}

1466 #ifde‡
CONFIG_PROC_FS


1468 
¥oc_dú_íåy
 *
	gπai_¥oc_roŸ
 = 
NULL
;

1470 #i‡
deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1471 
öô_tsc_sync
();

1472 
˛ónup_tsc_sync
();

1473 vﬁ©ûê
πai_tsc_of°
[];

1476 
	$PROC_READ_FUN
(
πai_ªad_¥oc
)

1478 
i
, 
n⁄e
;

1479 
PROC_PRINT_VARS
;

1481 
	`PROC_PRINT
("\n** RTAI/x86:\n\n");

1482 
	`PROC_PRINT
(" CPU Fªquícy: %lu (Hz)\n", 
πai_tu«bÀs
.
˝u_‰eq
);

1483 
	`PROC_PRINT
(" TIMER Fªquícy: %lu (Hz)\n", 
TIMER_FREQ
);

1484 
	`PROC_PRINT
(" TIMER L©ícy: %ld (ns)\n", 
	`πai_imuldiv
(
πai_tu«bÀs
.
œãncy
, 1000000000,Ñèi_tu«bÀs.
˝u_‰eq
));

1485 
	`PROC_PRINT
(" TIMER Sëup: %ld (ns)\n", 
	`πai_imuldiv
(
πai_tu«bÀs
.
£tup_time_TIMER_CPUNIT
, 1000000000,Ñèi_tu«bÀs.
˝u_‰eq
));

1487 
n⁄e
 = 1;

1488 
	`PROC_PRINT
("\n** Real-time IRQs used by RTAI: ");

1489 
i
 = 0; i < 
RTAI_NR_IRQS
; i++) {

1490 i‡(
πai_domaö
.
úqs
[
i
].
h™dÀr
) {

1491 i‡(
n⁄e
) {

1492 
	`PROC_PRINT
("\n");

1493 
n⁄e
 = 0;

1495 
	`PROC_PRINT
("\¿ #%dáà%p", 
i
, 
πai_domaö
.
úqs
[i].
h™dÀr
);

1498 i‡(
n⁄e
) {

1499 
	`PROC_PRINT
("none");

1501 
	`PROC_PRINT
("\n\n");

1503 
	`PROC_PRINT
("** RTAIÉxtensionÅraps: \n\n");

1506 
n⁄e
 = 1;

1507 
	`PROC_PRINT
("** RTAI SYSREQs in use: ");

1508 
i
 = 0; i < 
RTAI_NR_SRQS
; i++) {

1509 i‡(
πai_sy§eq_èbÀ
[
i
].
k_h™dÀr
 ||Ñèi_sy§eq_èbÀ[i].
u_h™dÀr
) {

1510 
	`PROC_PRINT
("#%d ", 
i
);

1511 
n⁄e
 = 0;

1514 i‡(
n⁄e
) {

1515 
	`PROC_PRINT
("none");

1517 
	`PROC_PRINT
("\n\n");

1519 #ifde‡
CONFIG_SMP


1520 #ifde‡
CONFIG_RTAI_DIAG_TSC_SYNC


1521 
	`PROC_PRINT
("** RTAI TSC OFFSETs (TSC units, 0Ñef. CPU): ");

1522 
i
 = 0; i < 
	`num_⁄löe_˝us
(); i++) {

1523 
	`PROC_PRINT
("CPU#%d: %ld; ", 
i
, 
πai_tsc_of°
[i]);

1525 
	`PROC_PRINT
("\n\n");

1527 
	`PROC_PRINT
("** MASK OF CPU†ISOLATED FOR RTAI: 0x%lx.", 
IsﬁCpusMask
);

1528 
	`PROC_PRINT
("\n\n");

1531 
PROC_PRINT_DONE
;

1532 
	}
}

1534 
PROC_READ_OPEN_OPS
(
πai_hÆ_¥oc_f›s
, 
πai_ªad_¥oc
);

1536 
	$πai_¥oc_ªgi°î
 ()

1538 
¥oc_dú_íåy
 *
ít
;

1540 
πai_¥oc_roŸ
 = 
	`CREATE_PROC_ENTRY
("πai", 
S_IFDIR
, 
NULL
, &
πai_hÆ_¥oc_f›s
);

1541 i‡(!
πai_¥oc_roŸ
) {

1542 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai.\n");

1545 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,30)

1546 
πai_¥oc_roŸ
->
ow√r
 = 
THIS_MODULE
;

1548 
ít
 = 
	`CREATE_PROC_ENTRY
("hÆ", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
,

1549 &
πai_hÆ_¥oc_f›s
);

1550 i‡(!
ít
) {

1551 
	`¥ötk
(
KERN_ERR
 "UnableÅo initialize /proc/rtai/hal.\n");

1554 
	`SET_PROC_READ_ENTRY
(
ít
, 
πai_ªad_¥oc
);

1557 
	}
}

1559 
	$πai_¥oc_uƒegi°î
 ()

1561 
	`ªmove_¥oc_íåy
("hÆ", 
πai_¥oc_roŸ
);

1562 
	`ªmove_¥oc_íåy
("rtai", 0);

1563 
	}
}

1567 
	gFIRST_LINE_OF_RTAI_DOMAIN_ENTRY


1571 
π_¥ötk
(
KERN_INFO
 "RTAI[hÆ]: compûed wôh %s.\n", 
CONFIG_RTAI_COMPILER
);

1573 ;;Ë
hÆ_su•íd_domaö
();

1575 
LAST_LINE_OF_RTAI_DOMAIN_ENTRY


1577 
πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
‰om
, 
evít
, (*
h™dÀr
)(, *))

1579  ()
	`hÆ_ˇtch_evít
(
‰om
, 
evít
, (*)
h™dÀr
);

1580 
	}
}

1582 *
hÆ_úq_h™dÀr
;

1584 #unde‡
ack_bad_úq


1585 
	$ack_bad_úq
(
úq
)

1587 
	`¥ötk
("u√x≥˘ed IRQÅø∞© ve˘‹ %02x\n", 
úq
);

1588 #ifde‡
CONFIG_X86_LOCAL_APIC


1589 i‡(
˝u_has_≠ic
) {

1590 
	`__ack_APIC_úq
();

1593 
	}
}

1595 
ùùe_domaö
 
ùùe_roŸ
;

1596 
‰ì_isﬁ˝us_‰om_löux
(*);

1597 
˝u_isﬁ©ed_m≠
;

1599 
	$__πai_hÆ_öô
 ()

1601 
å≠ƒ
, 
hÆöv
 = 0;

1602 
hÆ_©å_°ru˘
 
©å
;

1604 
	`ùùe_ˇtch_evít
(
hÆ_roŸ_domaö
, 0, 0);

1605 
hÆöv
 = 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_EVENTS
;Årapnr++) {

1606 i‡(
hÆ_roŸ_domaö
->
Àgacy
.
h™dÀrs
[
å≠ƒ
] && hal_root_domain->legacy.handlers[trapnr] != hal_root_domain->legacy.handlers[0]) {

1607 
hÆöv
 = 1;

1608 
	`¥ötk
("EVENT %d INVALID %p.\n", 
å≠ƒ
, 
hÆ_roŸ_domaö
->
Àgacy
.
h™dÀrs
[trapnr]);

1611 i‡(
hÆöv
) {

1612 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: HAL IMMEDIATE EVENT DISPATCHING BROKEN.\n");

1615 i‡(
	`num_⁄löe_˝us
(Ë> 
RTAI_NR_CPUS
) {

1616 
	`¥ötk
("RTAI[hal]: RTAI CONFIGURED WITH LESS THAN NUM ONLINE CPUS.\n");

1617 
hÆöv
 = 1;

1620 i‡(!(
πai_sy§eq_vúq
 = 
	`hÆ_Æloc_úq
())) {

1621 
	`¥ötk
(
KERN_ERR
 "RTAI[hal]: NO VIRTUAL INTERRUPT AVAILABLE.\n");

1622 
hÆöv
 = 1;

1625 i‡(
hÆöv
) {

1629 
å≠ƒ
 = 0;Åø≤∏< 
RTAI_NR_IRQS
;Årapnr++) {

1630 
πai_domaö
.
úqs
[
å≠ƒ
].
ack‚
 = (*)
hÆ_roŸ_domaö
->irqs[trapnr].ackfn;

1632 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,22)

1633 
å≠ƒ
 = 0;Åø≤∏< 
	`num_⁄löe_˝us
();Årapnr++) {

1634 
ùùe_roŸ_°©us
[
å≠ƒ
] = &
hÆ_roŸ_domaö
->
˝ud©a
[å≠ƒ].
°©us
;

1638 
	`ùùe_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, (*)
πai_l§q_di•©chî
, 
NULL
, NULL, 
IPIPE_HANDLE_MASK
);

1639 
hÆ_úq_h™dÀr
 = 
πai_húq_di•©chî
;

1641 
	`πai_ö°Æl_¨chdï
();

1643 #ifde‡
CONFIG_PROC_FS


1644 
	`πai_¥oc_ªgi°î
();

1647 
	`hÆ_öô_©å
(&
©å
);

1648 
©å
.
«me
 = "RTAI";

1649 
©å
.
domid
 = 
RTAI_DOMAIN_ID
;

1650 
©å
.
íåy
 = (*)
πai_domaö_íåy
;

1651 
©å
.
¥i‹ôy
 = 
IPIPE_HEAD_PRIORITY
;

1652 
	`hÆ_ªgi°î_domaö
(&
πai_domaö
, &
©å
);

1653 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1654 
	`ùùe_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, (*)
πai_å≠_Áu…
);

1656 
	`πai_öô_èsk¥i_úqs
();

1658 #ifde‡
CONFIG_SMP


1659 i‡(
IsﬁCpusMask
 && (IsﬁCpusMask !
˝u_isﬁ©ed_m≠
)) {

1660 
	`¥ötk
("\nWARNING: IsﬁCpusMask (%luËd€†nŸ m©ch cpu_isﬁ©ed_m≠ (%luË£à© boŸÅime.\n", 
IsﬁCpusMask
, 
˝u_isﬁ©ed_m≠
);

1662 i‡(!
IsﬁCpusMask
) {

1663 
IsﬁCpusMask
 = 
˝u_isﬁ©ed_m≠
;

1665 i‡(
IsﬁCpusMask
) {

1666 
å≠ƒ
 = 0;Åø≤∏< 
IPIPE_NR_XIRQS
;Årapnr++) {

1667 
πai_‹ig_úq_afföôy
[
å≠ƒ
] = 
	`π_assign_úq_to_˝u
—ø≤r, ~
IsﬁCpusMask
);

1672 
IsﬁCpusMask
 = 0;

1675 
	`¥ötk
(
KERN_INFO
 "RTAI[hÆ]: mou¡ed (%s, IMMEDIATE (INTERNAL IRQ†%s), ISOL_CPUS_MASK: %lx).\n", 
HAL_TYPE
, 
CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 ? "VECTORED" : "DISPATCHED", 
IsﬁCpusMask
);

1677 #i‡
	`deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1678 
	`öô_tsc_sync
();

1683 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1684 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1685 
	`¥ötk
("SYSINFO: CPU†%d, LINUX APIC IRQ %d, TIM_FREQ %Œu, CLK_FREQ %Œu, CPU_FREQ %Œu\n", 
sysöfo
.
sys_ƒ_˝us
, sysöfo.
sys_hπimî_úq
, sysöfo.
sys_hπimî_‰eq
, sysöfo.
sys_hr˛ock_‰eq
, sysöfo.
sys_˝u_‰eq
);

1686 #ifde‡
CONFIG_X86_LOCAL_APIC


1687 
	`¥ötk
("RTAI_APIC_TIMER_IPI: RTAI DEFINED %d, VECTOR %d; LINUX_APIC_TIMER_IPI: RTAI DEFINED %d, VECTOR %d\n", 
RTAI_APIC_TIMER_IPI
, 
	`ùùe_≠ic_ve˘‹_úq
(0xf1), 
LOCAL_TIMER_IPI
, ipipe_apic_vector_irq(0xef));

1688 
	`¥ötk
("TIMER NAME: %s; VARIOUSLY FOUND APIC FREQs: %lu, %lu, %u\n", 
	`ùùe_timî_«me
(), 
	`hÆ_ªque°_≠ic_‰eq
(), hÆ_ªque°_≠ic_‰eq(), 
	`≠ic_ªad
(
APIC_TMICT
)*
HZ
);

1693 
	}
}

1695 
	$__πai_hÆ_exô
 ()

1697 
å≠ƒ
;

1698 #ifde‡
CONFIG_PROC_FS


1699 
	`πai_¥oc_uƒegi°î
();

1701 
hÆ_úq_h™dÀr
 = 
NULL
;

1702 
	`hÆ_uƒegi°î_domaö
(&
πai_domaö
);

1703 
å≠ƒ
 = 0;Åø≤∏< 
HAL_NR_FAULTS
;Årapnr++) {

1704 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
å≠ƒ
, 
NULL
);

1706 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
πai_sy§eq_vúq
, 
NULL
, NULL, 0);

1707 
	`hÆ_‰ì_úq
(
πai_sy§eq_vúq
);

1708 
	`πai_unö°Æl_¨chdï
();

1710 i‡(
IsﬁCpusMask
) {

1711 
å≠ƒ
 = 0;Åø≤∏< 
IPIPE_NR_XIRQS
;Årapnr++) {

1712 
	`π_ª£t_úq_to_sym_mode
(
å≠ƒ
);

1716 #i‡
	`deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
)

1717 
	`˛ónup_tsc_sync
();

1720 
	`¥ötk
(
KERN_INFO
 "RTAI[hal]: unmounted.\n");

1721 
	}
}

1723 
moduÀ_öô
(
__πai_hÆ_öô
);

1724 
moduÀ_exô
(
__πai_hÆ_exô
);

1726 
	#VSNPRINTF_BUF
 256

	)

1727 
asmlökage
 
	$π_¥ötk
(c⁄° *
fmt
, ...)

1729 
buf
[
VSNPRINTF_BUF
];

1730 
va_li°
 
¨gs
;

1732 
	`va_°¨t
(
¨gs
, 
fmt
);

1733 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1734 
	`va_íd
(
¨gs
);

1735  
	`¥ötk
("%s", 
buf
);

1736 
	}
}

1738 
asmlökage
 
	$π_sync_¥ötk
(c⁄° *
fmt
, ...)

1740 
buf
[
VSNPRINTF_BUF
];

1741 
va_li°
 
¨gs
;

1743 
	`va_°¨t
(
¨gs
, 
fmt
);

1744 
	`v¢¥ötf
(
buf
, 
VSNPRINTF_BUF
, 
fmt
, 
¨gs
);

1745 
	`va_íd
(
¨gs
);

1746 
	`hÆ_£t_¥ötk_sync
(&
πai_domaö
);

1747  
	`¥ötk
("%s", 
buf
);

1748 
	}
}

1750 
EXPORT_SYMBOL
(
πai_ªÆtime_úq
);

1751 
EXPORT_SYMBOL
(
π_ªque°_úq
);

1752 
EXPORT_SYMBOL
(
π_ªÀa£_úq
);

1753 
EXPORT_SYMBOL
(
π_£t_úq_cookõ
);

1754 
EXPORT_SYMBOL
(
π_£t_úq_ªtmode
);

1755 
EXPORT_SYMBOL
(
π_°¨tup_úq
);

1756 
EXPORT_SYMBOL
(
π_shutdown_úq
);

1757 
EXPORT_SYMBOL
(
π_íabÀ_úq
);

1758 
EXPORT_SYMBOL
(
π_dißbÀ_úq
);

1759 
EXPORT_SYMBOL
(
π_mask_™d_ack_úq
);

1760 
EXPORT_SYMBOL
(
π_mask_úq
);

1761 
EXPORT_SYMBOL
(
π_unmask_úq
);

1762 
EXPORT_SYMBOL
(
π_ack_úq
);

1763 
EXPORT_SYMBOL
(
π_íd_úq
);

1764 
EXPORT_SYMBOL
(
π_eoi_úq
);

1765 
EXPORT_SYMBOL
(
π_ªque°_löux_úq
);

1766 
EXPORT_SYMBOL
(
π_‰ì_löux_úq
);

1767 
EXPORT_SYMBOL
(
π_≥nd_löux_úq
);

1768 
EXPORT_SYMBOL
(
u§_π_≥nd_löux_úq
);

1769 
EXPORT_SYMBOL
(
π_ªque°_§q
);

1770 
EXPORT_SYMBOL
(
π_‰ì_§q
);

1771 
EXPORT_SYMBOL
(
π_≥nd_löux_§q
);

1772 
EXPORT_SYMBOL
(
π_assign_úq_to_˝u
);

1773 
EXPORT_SYMBOL
(
π_ª£t_úq_to_sym_mode
);

1774 
EXPORT_SYMBOL
(
π_ªque°_≠ic_timîs
);

1775 
EXPORT_SYMBOL
(
π_‰ì_≠ic_timîs
);

1776 
EXPORT_SYMBOL
(
π_ªque°_timî
);

1777 
EXPORT_SYMBOL
(
π_‰ì_timî
);

1778 
EXPORT_SYMBOL
(
π_£t_å≠_h™dÀr
);

1779 
EXPORT_SYMBOL
(
rd_8254_ts
);

1780 
EXPORT_SYMBOL
(
π_£tup_8254_tsc
);

1781 
EXPORT_SYMBOL
(
π_£t_úq_ack
);

1784 
EXPORT_SYMBOL
(
πai_ˇlibøã_8254
);

1785 
EXPORT_SYMBOL
(
πai_brﬂdˇ°_to_loˇl_timîs
);

1786 
EXPORT_SYMBOL
(
πai_¸ôiˇl_íãr
);

1787 
EXPORT_SYMBOL
(
πai_¸ôiˇl_exô
);

1788 
EXPORT_SYMBOL
(
πai_£t_löux_èsk_¥i‹ôy
);

1790 
EXPORT_SYMBOL
(
πai_löux_c⁄ãxt
);

1791 
EXPORT_SYMBOL
(
πai_domaö
);

1792 
EXPORT_SYMBOL
(
πai_¥oc_roŸ
);

1793 
EXPORT_SYMBOL
(
πai_tu«bÀs
);

1794 
EXPORT_SYMBOL
(
πai_˝u_lock
);

1795 
EXPORT_SYMBOL
(
πai_˝u_ªÆtime
);

1796 
EXPORT_SYMBOL
(
π_times
);

1797 
EXPORT_SYMBOL
(
π_smp_times
);

1799 
EXPORT_SYMBOL
(
π_¥ötk
);

1800 
EXPORT_SYMBOL
(
π_sync_¥ötk
);

1801 
EXPORT_SYMBOL
(
πai_ˇtch_evít
);

1803 
EXPORT_SYMBOL
(
π_schedulög
);

1804 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

1805 
EXPORT_SYMBOL
(
ùùe_roŸ_°©us
);

1808 
EXPORT_SYMBOL
(
IsﬁCpusMask
);

1812 #i‡
deföed
(
CONFIG_GENERIC_CLOCKEVENTS
Ë&& 
CONFIG_RTAI_RTC_FREQ
 == 0

1817 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, 
˛ock_evít_devi˚
 *);

1818 (*
π_löux_hπ_√xt_shŸ
)(, 
˛ock_evít_devi˚
 *);

1820 #ifde‡
CONFIG_SMP


1821 
	#TEST_LINUX_TICK
 
RTAI_APIC_ICOUNT


	)

1823 
	#TEST_LINUX_TICK
 (
u£d_≠ic
 ? 
RTAI_APIC_ICOUNT
 : 
LATCH
)

	)

1831 
	$_π_löux_hπ_£t_mode
(
˛ock_evít_mode
 
mode
, 
˛ock_evít_devi˚
 *
hπ_dev
)

1833 i‡(
mode
 =
CLOCK_EVT_MODE_ONESHOT
 || modê=
CLOCK_EVT_MODE_SHUTDOWN
) {

1834 
π_times
.
löux_tick
 = 0;

1835 } i‡(
mode
 =
CLOCK_EVT_MODE_PERIODIC
) {

1836 
π_times
.
löux_tick
 = 
	`πai_Œimd
((1000000000 + 
HZ
/2)/HZ, 
TIMER_FREQ
, 1000000000);

1838 
	}
}

1840 
	$_π_löux_hπ_√xt_shŸ
(
dñay
, 
˛ock_evít_devi˚
 *
hπ_dev
)

1842 
π_times
.
löux_time
 =Ñt_times.
tick_time
 + 
	`πai_Œimd
(
dñay
, 
TIMER_FREQ
, 1000000000);

1844 
	}
}

1846 #ifde‡
__IPIPE_FEATURE_REQUEST_TICKDEV


1847 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, (*)(b), (*)(c), d,É)

	)

1849 
	#IPIPE_REQUEST_TICKDEV
(
a
, 
b
, 
c
, 
d
, 
e
Ë
	`ùùe_ªque°_tickdev
◊, b, c, d)

	)

1852 
	$πai_ªque°_tickdev
(*
h™dÀr
)

1854 
mode
, 
˝uid
;

1855 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1856 i‡((*)
π_löux_hπ_£t_mode
 !(*)
π_löux_hπ_√xt_shŸ
) {

1857 
mode
 = 
	`ùùe_timî_°¨t
(
h™dÀr
, 
π_löux_hπ_£t_mode
, 
π_löux_hπ_√xt_shŸ
, 
˝uid
);

1860 
mode
 = 
	`ùùe_timî_°¨t
(
h™dÀr
, 
_π_löux_hπ_£t_mode
, 
_π_löux_hπ_√xt_shŸ
, 
˝uid
);

1863 i‡(
mode
 =
CLOCK_EVT_MODE_UNUSED
 || modê=
CLOCK_EVT_MODE_ONESHOT
) {

1864 
π_times
.
löux_tick
 = 0;

1865 } i‡(
mode
 !
CLOCK_EVT_MODE_PERIODIC
) {

1866  
mode
;

1870 
	}
}

1872 
	$πai_ªÀa£_tickdev
()

1874 
˝uid
;

1875 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1877 
	`ùùe_timî_°›
(
˝uid
);

1879 
	}
}

1881 #ifde‡
CONFIG_X86_LOCAL_APIC


1883 
	$hÆ_ªque°_≠ic_‰eq
()

1885 
hÆ_sysöfo_°ru˘
 
sysöfo
;

1886 
	`hÆ_gë_sysöfo
(&
sysöfo
);

1887  
sysöfo
.
sys_hπimî_‰eq
;

1889 
˝uid
, 
avrg_‰eq
, 
‰eq
;

1890 
avrg_‰eq
 = 
‰eq
 = 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1891 
	`IPIPE_REQUEST_TICKDEV
(
HRT_LINUX_TIMER_NAME
, 
_π_löux_hπ_£t_mode
, 
_π_löux_hπ_√xt_shŸ
, 
˝uid
, &
‰eq
);

1892 
	`ùùe_ªÀa£_tickdev
(
˝uid
);

1893 
avrg_‰eq
 +
‰eq
;

1895 i‡(
avrg_‰eq
) {

1896 i‡((
avrg_‰eq
 /
	`num_⁄löe_˝us
()Ë!
‰eq
) {

1897 
	`¥ötk
("*** APICs FREQs DIFFER ***\n");

1899 *
≠ic_‰eq
 = 
avrg_‰eq
;

1902 
	}
}

1908 (*
π_löux_hπ_£t_mode
)(
˛ock_evít_mode
, *);

1909 (*
π_löux_hπ_√xt_shŸ
)(, *);

1911 
	$πai_ªque°_tickdev
(Ë{  0; 
	}
}

1913 
	$πai_ªÀa£_tickdev
(Ë{ ; 
	}
}

1915 
	$hÆ_ªque°_≠ic_‰eq
(*
≠ic_‰eq
Ë{ ; 
	}
}

1919 
EXPORT_SYMBOL
(
π_löux_hπ_£t_mode
);

1920 
EXPORT_SYMBOL
(
π_löux_hπ_√xt_shŸ
);

	@/usr/src/rtai/base/arch/x86/hal/rtai_hal.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x8be4ba99, 
__VMLINUX_SYMBOL_STR
(
ùùe_gë_sysöfo
) },

22 { 0x907072˚, 
__VMLINUX_SYMBOL_STR
(
ùùe_¸ôiˇl_exô
) },

23 { 0x5603e8bd, 
__VMLINUX_SYMBOL_STR
(
sögÀ_›í
) },

24 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

25 { 0x8b6fd25c, 
__VMLINUX_SYMBOL_STR
(
úq_to_desc
) },

26 { 0xeÁ6f1Ø, 
__VMLINUX_SYMBOL_STR
(
ùùe_ªgi°î_domaö
) },

27 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

28 { 0xa9475aˇ, 
__VMLINUX_SYMBOL_STR
(
sögÀ_ªÀa£
) },

29 { 0x6f7eˇ2c, 
__VMLINUX_SYMBOL_STR
(
ùùe_‰ì_vúq
) },

30 { 0xc715d9e0, 
__VMLINUX_SYMBOL_STR
(
boŸ_˝u_d©a
) },

31 { 0x4a70f94a, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

32 { 0x24ˇfbeb, 
__VMLINUX_SYMBOL_STR
(
ªmove_¥oc_íåy
) },

33 { 0x440c78f4, 
__VMLINUX_SYMBOL_STR
(
Âu_ow√r_èsk
) },

34 { 0x846f59a, 
__VMLINUX_SYMBOL_STR
(
˝u_öfo
) },

35 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

36 { 0xcf012e93, 
__VMLINUX_SYMBOL_STR
(
£q_ªad
) },

37 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

38 { 0x88914405, 
__VMLINUX_SYMBOL_STR
(
ùùe_timî_°›
) },

39 { 0x7d11c268, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

40 { 0x796825´, 
__VMLINUX_SYMBOL_STR
(
ùùe_timî_«me
) },

41 { 0xa6ìe462, 
__VMLINUX_SYMBOL_STR
(
ùùe_timî_°¨t
) },

42 { 0x985fˇbb, 
__VMLINUX_SYMBOL_STR
(
¥oc_mkdú
) },

43 { 0x3c79dde3, 
__VMLINUX_SYMBOL_STR
(
ùùe_£t_úq_afföôy
) },

44 { 0xc7651326, 
__VMLINUX_SYMBOL_STR
(
ùùe_uƒegi°î_domaö
) },

45 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

46 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

47 { 0xf99c8f28, 
__VMLINUX_SYMBOL_STR
(
ùùe_≥r˝u
) },

48 { 0x5b89b5a8, 
__VMLINUX_SYMBOL_STR
(
πai_úq_h™dÀr
) },

49 { 0x20b76Ø5, 
__VMLINUX_SYMBOL_STR
(
£t_˝us_Ælowed_±r
) },

50 { 0x94b541b5, 
__VMLINUX_SYMBOL_STR
(
˝u_a˘ive_mask
) },

51 { 0x2072ì9b, 
__VMLINUX_SYMBOL_STR
(
ªque°_thªaded_úq
) },

52 { 0x7bba9d05, 
__VMLINUX_SYMBOL_STR
(
ùùe_¥ï¨e_∑nic
) },

53 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

54 { 0xf2285a57, 
__VMLINUX_SYMBOL_STR
(
öô_èsk
) },

55 { 0x7647733f, 
__VMLINUX_SYMBOL_STR
(
ùùe_vútuÆize_úq
) },

56 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

57 { 0x7792c844, 
__VMLINUX_SYMBOL_STR
(
ùùe_£À˘_timîs
) },

58 { 0xb98cba5c, 
__VMLINUX_SYMBOL_STR
(
ùùe_ˇtch_evít
) },

59 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

60 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

61 { 0x99195078, 
__VMLINUX_SYMBOL_STR
(
v¢¥ötf
) },

62 { 0x8c98615, 
__VMLINUX_SYMBOL_STR
(
¥oc_¸óã_d©a
) },

63 { 0xf894ef19, 
__VMLINUX_SYMBOL_STR
(
ùùe_öô_©å
) },

64 { 0xf2cb2´0, 
__VMLINUX_SYMBOL_STR
(
£q_l£ek
) },

65 { 0x´7a3c80, 
__VMLINUX_SYMBOL_STR
(
__ùùe_do_sync_°age
) },

66 { 0x7628f3c7, 
__VMLINUX_SYMBOL_STR
(
this_˝u_off
) },

67 { 0x735a0bd5, 
__VMLINUX_SYMBOL_STR
(
«tive_io_dñay
) },

68 { 0xd916bc57, 
__VMLINUX_SYMBOL_STR
(
ùùe_£tscheduÀr_roŸ
) },

69 { 0x46f7ˇ08, 
__VMLINUX_SYMBOL_STR
(
˝u_isﬁ©ed_m≠
) },

70 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

71 { 0x˚c10e8b, 
__VMLINUX_SYMBOL_STR
(
ùùe_timîs_ªÀa£
) },

72 { 0xe5d95985, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_ul⁄g
) },

73 { 0x5fcf8089, 
__VMLINUX_SYMBOL_STR
(
ùùe_¸ôiˇl_íãr
) },

74 { 0xec30354e, 
__VMLINUX_SYMBOL_STR
(
ùùe_Æloc_vúq
) },

75 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

76 { 0xf20dabd8, 
__VMLINUX_SYMBOL_STR
(
‰ì_úq
) },

79 c⁄° 
	g__moduÀ_dïíds
[]

80 
__u£d


81 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

85 
MODULE_INFO
(
§cvîsi⁄
, "F7E5CE768ADF9A6246EA908");

	@/usr/src/rtai/base/config/kconfig/conf.c

6 
	~<˘y≥.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<uni°d.h
>

10 
	~<time.h
>

11 
	~<sys/°©.h
>

13 
	#LKC_DIRECT_LINK


	)

14 
	~"lkc.h
"

16 
c⁄f
(
míu
 *menu);

17 
check_c⁄f
(
míu
 *menu);

20 
	mask_Æl
,

21 
	mask_√w
,

22 
	mask_sûít
,

23 
	m£t_deÁu…
,

24 
	m£t_yes
,

25 
	m£t_mod
,

26 
	m£t_no
,

27 
	m£t_øndom


28 } 
	göput_mode
 = 
ask_Æl
;

29 *
	gdefc⁄fig_fûe
;

31 
	gödít
 = 1;

32 
	gvÆid_°dö
 = 1;

33 
	gc⁄f_˙t
;

34 
	glöe
[128];

35 
míu
 *
	groŸE¡ry
;

37 
	gnohñp_ãxt
[] = "Sorry,Ço helpávailable forÅhis option yet.\n";

39 
	$°rù
(*
°r
)

41 *
p
 = 
°r
;

42 
l
;

44 (
	`is•a˚
(*
p
)))

45 
p
++;

46 
l
 = 
	`°æí
(
p
);

47 i‡(
p
 !
°r
)

48 
	`memmove
(
°r
, 
p
, 
l
 + 1);

49 i‡(!
l
)

51 
p
 = 
°r
 + 
l
 - 1;

52 (
	`is•a˚
(*
p
)))

53 *
p
-- = 0;

54 
	}
}

56 
	$check_°dö
()

58 i‡(!
vÆid_°dö
 && 
öput_mode
 =
ask_sûít
) {

59 
	`¥ötf
("aborted!\n\n");

60 
	`¥ötf
("Console input/output isÑedirected. ");

61 
	`¥ötf
("Run 'make oldconfig'Åo update configuration.\n\n");

62 
	`exô
(1);

64 
	}
}

66 
	$c⁄f_askvÆue
(
symbﬁ
 *
sym
, c⁄° *
def
)

68 
symbﬁ_ty≥
 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

69 
åi°©e
 
vÆ
;

71 i‡(!
	`sym_has_vÆue
(
sym
))

72 
	`¥ötf
("(NEW) ");

74 
löe
[0] = '\n';

75 
löe
[1] = 0;

77 i‡(!
	`sym_is_ch™gabÀ
(
sym
)) {

78 
	`¥ötf
("%s\n", 
def
);

79 
löe
[0] = '\n';

80 
löe
[1] = 0;

84 
öput_mode
) {

85 
ask_√w
:

86 
ask_sûít
:

87 i‡(
	`sym_has_vÆue
(
sym
)) {

88 
	`¥ötf
("%s\n", 
def
);

91 
	`check_°dö
();

92 
ask_Æl
:

93 
	`fÊush
(
°dout
);

94 
	`fgës
(
löe
, 128, 
°dö
);

96 
£t_deÁu…
:

97 
	`¥ötf
("%s\n", 
def
);

103 
ty≥
) {

104 
S_INT
:

105 
S_HEX
:

106 
S_STRING
:

107 
	`¥ötf
("%s\n", 
def
);

112 
öput_mode
) {

113 
£t_yes
:

114 i‡(
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
)) {

115 
löe
[0] = 'y';

116 
löe
[1] = '\n';

117 
löe
[2] = 0;

120 
£t_mod
:

121 i‡(
ty≥
 =
S_TRISTATE
) {

122 i‡(
	`sym_åi°©e_wôhö_ønge
(
sym
, 
mod
)) {

123 
löe
[0] = 'm';

124 
löe
[1] = '\n';

125 
löe
[2] = 0;

129 i‡(
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
)) {

130 
löe
[0] = 'y';

131 
löe
[1] = '\n';

132 
löe
[2] = 0;

136 
£t_no
:

137 i‡(
	`sym_åi°©e_wôhö_ønge
(
sym
, 
no
)) {

138 
löe
[0] = 'n';

139 
löe
[1] = '\n';

140 
löe
[2] = 0;

143 
£t_øndom
:

145 
vÆ
 = (
åi°©e
)(
	`øndom
() % 3);

146 } !
	`sym_åi°©e_wôhö_ønge
(
sym
, 
vÆ
));

147 
vÆ
) {

148 
no
: 
löe
[0] = 'n'; ;

149 
mod
: 
löe
[0] = 'm'; ;

150 
yes
: 
löe
[0] = 'y'; ;

152 
löe
[1] = '\n';

153 
löe
[2] = 0;

158 
	`¥ötf
("%s", 
löe
);

159 
	}
}

161 
	$c⁄f_°rög
(
míu
 *menu)

163 
symbﬁ
 *
sym
 = 
míu
->sym;

164 c⁄° *
def
, *
hñp
;

167 
	`¥ötf
("%*s%†", 
ödít
 - 1, "", 
míu
->
¥om±
->
ãxt
);

168 
	`¥ötf
("(%sË", 
sym
->
«me
);

169 
def
 = 
	`sym_gë_°rög_vÆue
(
sym
);

170 i‡(
	`sym_gë_°rög_vÆue
(
sym
))

171 
	`¥ötf
("[%s] ", 
def
);

172 
	`c⁄f_askvÆue
(
sym
, 
def
);

173 
löe
[0]) {

178 i‡(
löe
[1] == 0) {

179 
hñp
 = 
nohñp_ãxt
;

180 i‡(
míu
->
sym
->
hñp
)

181 
hñp
 = 
míu
->
sym
->help;

182 
	`¥ötf
("\n%s\n", 
míu
->
sym
->
hñp
);

183 
def
 = 
NULL
;

187 
löe
[
	`°æí
(line)-1] = 0;

188 
def
 = 
löe
;

190 i‡(
def
 && 
	`sym_£t_°rög_vÆue
(
sym
, def))

193 
	}
}

195 
	$c⁄f_sym
(
míu
 *menu)

197 
symbﬁ
 *
sym
 = 
míu
->sym;

198 
ty≥
;

199 
åi°©e
 
ﬁdvÆ
, 
√wvÆ
;

200 c⁄° *
hñp
;

203 
	`¥ötf
("%*s%†", 
ödít
 - 1, "", 
míu
->
¥om±
->
ãxt
);

204 i‡(
sym
->
«me
)

205 
	`¥ötf
("(%sË", 
sym
->
«me
);

206 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

207 
	`putch¨
('[');

208 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

209 
ﬁdvÆ
) {

210 
no
:

211 
	`putch¨
('N');

213 
mod
:

214 
	`putch¨
('M');

216 
yes
:

217 
	`putch¨
('Y');

220 i‡(
ﬁdvÆ
 !
no
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
,Ço))

221 
	`¥ötf
("/n");

222 i‡(
ﬁdvÆ
 !
mod
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, mod))

223 
	`¥ötf
("/m");

224 i‡(
ﬁdvÆ
 !
yes
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, yes))

225 
	`¥ötf
("/y");

226 i‡(
sym
->
hñp
)

227 
	`¥ötf
("/?");

228 
	`¥ötf
("] ");

229 
	`c⁄f_askvÆue
(
sym
, 
	`sym_gë_°rög_vÆue
(sym));

230 
	`°rù
(
löe
);

232 
löe
[0]) {

235 
√wvÆ
 = 
no
;

236 i‡(!
löe
[1] || !
	`°rcmp
(&line[1], "o"))

241 
√wvÆ
 = 
mod
;

242 i‡(!
löe
[1])

247 
√wvÆ
 = 
yes
;

248 i‡(!
löe
[1] || !
	`°rcmp
(&line[1], "es"))

252 
√wvÆ
 = 
ﬁdvÆ
;

255 
hñp
;

259 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
))

261 
hñp
:

262 
hñp
 = 
nohñp_ãxt
;

263 i‡(
sym
->
hñp
)

264 
hñp
 = 
sym
->help;

265 
	`¥ötf
("\n%s\n", 
hñp
);

267 
	}
}

269 
	$c⁄f_choi˚
(
míu
 *menu)

271 
symbﬁ
 *
sym
, *
def_sym
;

272 
míu
 *
chûd
;

273 
ty≥
;

274 
boﬁ
 
is_√w
;

276 
sym
 = 
míu
->sym;

277 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

278 
is_√w
 = !
	`sym_has_vÆue
(
sym
);

279 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

280 
	`c⁄f_sym
(
míu
);

281 
	`sym_ˇlc_vÆue
(
sym
);

282 
	`sym_gë_åi°©e_vÆue
(
sym
)) {

283 
no
:

285 
mod
:

287 
yes
:

291 
	`sym_gë_åi°©e_vÆue
(
sym
)) {

292 
no
:

294 
mod
:

295 
	`¥ötf
("%*s%s\n", 
ödít
 - 1, "", 
	`míu_gë_¥om±
(
míu
));

297 
yes
:

303 
˙t
, 
def
;

305 
	`¥ötf
("%*s%s\n", 
ödít
 - 1, "", 
	`míu_gë_¥om±
(
míu
));

306 
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

307 
˙t
 = 
def
 = 0;

308 
löe
[0] = '0';

309 
löe
[1] = 0;

310 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

311 i‡(!
	`míu_is_visibÀ
(
chûd
))

313 i‡(!
chûd
->
sym
) {

314 
	`¥ötf
("%*¯%s\n", 
ödít
, '*', 
	`míu_gë_¥om±
(
chûd
));

317 
˙t
++;

318 i‡(
chûd
->
sym
 =
def_sym
) {

319 
def
 = 
˙t
;

320 
	`¥ötf
("%*c", 
ödít
, '>');

322 
	`¥ötf
("%*c", 
ödít
, ' ');

323 
	`¥ötf
(" %d. %s", 
˙t
, 
	`míu_gë_¥om±
(
chûd
));

324 i‡(
chûd
->
sym
->
«me
)

325 
	`¥ötf
(" (%s)", 
chûd
->
sym
->
«me
);

326 i‡(!
	`sym_has_vÆue
(
chûd
->
sym
))

327 
	`¥ötf
(" (NEW)");

328 
	`¥ötf
("\n");

330 
	`¥ötf
("%*schoi˚", 
ödít
 - 1, "");

331 i‡(
˙t
 == 1) {

332 
	`¥ötf
("[1]: 1\n");

333 
c⁄f_chûds
;

335 
	`¥ötf
("[1-%d", 
˙t
);

336 i‡(
sym
->
hñp
)

337 
	`¥ötf
("?");

338 
	`¥ötf
("]: ");

339 
öput_mode
) {

340 
ask_√w
:

341 
ask_sûít
:

342 i‡(!
is_√w
) {

343 
˙t
 = 
def
;

344 
	`¥ötf
("%d\n", 
˙t
);

347 
	`check_°dö
();

348 
ask_Æl
:

349 
	`fÊush
(
°dout
);

350 
	`fgës
(
löe
, 128, 
°dö
);

351 
	`°rù
(
löe
);

352 i‡(
löe
[0] == '?') {

353 
	`¥ötf
("\n%s\n", 
míu
->
sym
->
hñp
 ?

354 
míu
->
sym
->
hñp
 : 
nohñp_ãxt
);

357 i‡(!
löe
[0])

358 
˙t
 = 
def
;

359 i‡(
	`isdigô
(
löe
[0]))

360 
˙t
 = 
	`©oi
(
löe
);

364 
£t_øndom
:

365 
def
 = (
	`øndom
(Ë% 
˙t
) + 1;

366 
£t_deÁu…
:

367 
£t_yes
:

368 
£t_mod
:

369 
£t_no
:

370 
˙t
 = 
def
;

371 
	`¥ötf
("%d\n", 
˙t
);

375 
c⁄f_chûds
:

376 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

377 i‡(!
chûd
->
sym
 || !
	`míu_is_visibÀ
(child))

379 i‡(!--
˙t
)

382 i‡(!
chûd
)

384 i‡(
löe
[
	`°æí
(line) - 1] == '?') {

385 
	`¥ötf
("\n%s\n", 
chûd
->
sym
->
hñp
 ?

386 
chûd
->
sym
->
hñp
 : 
nohñp_ãxt
);

389 
	`sym_£t_choi˚_vÆue
(
sym
, 
chûd
->sym);

390 i‡(
chûd
->
li°
) {

391 
ödít
 += 2;

392 
	`c⁄f
(
chûd
->
li°
);

393 
ödít
 -= 2;

397 
	}
}

399 
	$c⁄f
(
míu
 *menu)

401 
symbﬁ
 *
sym
;

402 
¥›îty
 *
¥›
;

403 
míu
 *
chûd
;

405 i‡(!
	`míu_is_visibÀ
(
míu
))

408 
sym
 = 
míu
->sym;

409 
¥›
 = 
míu
->
¥om±
;

410 i‡(
¥›
) {

411 c⁄° *
¥om±
;

413 
¥›
->
ty≥
) {

414 
P_MENU
:

415 i‡(
öput_mode
 =
ask_sûít
 && 
roŸE¡ry
 !
míu
) {

416 
	`check_c⁄f
(
míu
);

419 
P_COMMENT
:

420 
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

421 i‡(
¥om±
)

422 
	`¥ötf
("%*c\n%*c %s\n%*c\n",

423 
ödít
, '*',

424 
ödít
, '*', 
¥om±
,

425 
ödít
, '*');

431 i‡(!
sym
)

432 
c⁄f_chûds
;

434 i‡(
	`sym_is_choi˚
(
sym
)) {

435 
	`c⁄f_choi˚
(
míu
);

436 i‡(
sym
->
cuº
.
åi
 !
mod
)

438 
c⁄f_chûds
;

441 
sym
->
ty≥
) {

442 
S_INT
:

443 
S_HEX
:

444 
S_STRING
:

445 
	`c⁄f_°rög
(
míu
);

448 
	`c⁄f_sym
(
míu
);

452 
c⁄f_chûds
:

453 i‡(
sym
)

454 
ödít
 += 2;

455 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

456 
	`c⁄f
(
chûd
);

457 i‡(
sym
)

458 
ödít
 -= 2;

459 
	}
}

461 
	$check_c⁄f
(
míu
 *menu)

463 
symbﬁ
 *
sym
;

464 
míu
 *
chûd
;

466 i‡(!
	`míu_is_visibÀ
(
míu
))

469 
sym
 = 
míu
->sym;

470 i‡(
sym
) {

471 i‡(
	`sym_is_ch™gabÀ
(
sym
Ë&& !
	`sym_has_vÆue
(sym)) {

472 i‡(!
c⁄f_˙t
++)

473 
	`¥ötf
("*\n* Restart config...\n*\n");

474 
roŸE¡ry
 = 
	`míu_gë_∑ª¡_míu
(
míu
);

475 
	`c⁄f
(
roŸE¡ry
);

477 i‡(
	`sym_is_choi˚
(
sym
Ë&& 
	`sym_gë_åi°©e_vÆue
(symË!
mod
)

481 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

482 
	`check_c⁄f
(
chûd
);

483 
	}
}

485 
	$maö
(
ac
, **
av
)

487 
i
 = 1;

488 c⁄° *
«me
;

489 
°©
 
tmp°©
;

491 i‡(
ac
 > 
i
 && 
av
[i][0] == '-') {

492 
av
[
i
++][1]) {

494 
öput_mode
 = 
ask_√w
;

497 
öput_mode
 = 
ask_sûít
;

498 
vÆid_°dö
 = 
	`ißây
(0) && isatty(1) && isatty(2);

501 
öput_mode
 = 
£t_deÁu…
;

504 
öput_mode
 = 
£t_deÁu…
;

505 
defc⁄fig_fûe
 = 
av
[
i
++];

506 i‡(!
defc⁄fig_fûe
) {

507 
	`¥ötf
("%s: No default config file specified\n",

508 
av
[0]);

509 
	`exô
(1);

513 
öput_mode
 = 
£t_no
;

516 
öput_mode
 = 
£t_mod
;

519 
öput_mode
 = 
£t_yes
;

522 
öput_mode
 = 
£t_øndom
;

523 
	`§™dom
(
	`time
(
NULL
));

527 
	`¥ötf
("%†[-o|-s] c⁄fig\n", 
av
[0]);

528 
	`exô
(0);

531 
«me
 = 
av
[
i
];

532 i‡(!
«me
) {

533 
	`¥ötf
("%s: Kc⁄fig fûêmissög\n", 
av
[0]);

535 
	`c⁄f_∑r£
(
«me
);

537 
öput_mode
) {

538 
£t_deÁu…
:

539 i‡(!
defc⁄fig_fûe
)

540 
defc⁄fig_fûe
 = 
	`c⁄f_gë_deÁu…_c⁄‚ame
();

541 i‡(
	`c⁄f_ªad
(
defc⁄fig_fûe
)) {

542 
	`¥ötf
("***\n"

544 "***\n", 
defc⁄fig_fûe
);

545 
	`exô
(1);

548 
ask_sûít
:

549 i‡(
	`°©
("../../../.πai_c⁄fig", &
tmp°©
)) {

550 
	`¥ötf
("***\n"

556 
	`exô
(1);

558 
ask_Æl
:

559 
ask_√w
:

560 
	`c⁄f_ªad
(
NULL
);

566 i‡(
öput_mode
 !
ask_sûít
) {

567 
roŸE¡ry
 = &
roŸmíu
;

568 
	`c⁄f
(&
roŸmíu
);

569 i‡(
öput_mode
 =
ask_Æl
) {

570 
öput_mode
 = 
ask_sûít
;

571 
vÆid_°dö
 = 1;

575 
c⁄f_˙t
 = 0;

576 
	`check_c⁄f
(&
roŸmíu
);

577 } 
c⁄f_˙t
);

578 
	`c⁄f_wrôe
(
NULL
);

580 
	}
}

	@/usr/src/rtai/base/config/kconfig/confdata.c

6 
	~<sys/°©.h
>

7 
	~<˘y≥.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

13 
	#LKC_DIRECT_LINK


	)

14 
	~"lkc.h
"

16 c⁄° 
	gc⁄f_def_fûíame
[] = "../../../.rtai_config";

18 c⁄° 
	gc⁄f_de‚ame
[] = "base/arch/$ARCH/defconfig";

20 c⁄° *
	gc⁄f_c⁄‚ames
[] = {

24 
c⁄f_de‚ame
,

25 
NULL


28 *
	$c⁄f_ex∑nd_vÆue
(c⁄° *
ö
)

30 
symbﬁ
 *
sym
;

31 c⁄° *
§c
;

32 
ªs_vÆue
[
SYMBOL_MAXLENGTH
];

33 *
d°
, 
«me
[
SYMBOL_MAXLENGTH
];

35 
ªs_vÆue
[0] = 0;

36 
d°
 = 
«me
;

37 (
§c
 = 
	`°rchr
(
ö
, '$'))) {

38 
	`°∫ˇt
(
ªs_vÆue
, 
ö
, 
§c
 - in);

39 
§c
++;

40 
d°
 = 
«me
;

41 
	`iß um
(*
§c
) || *src == '_')

42 *
d°
++ = *
§c
++;

43 *
d°
 = 0;

44 
sym
 = 
	`sym_lookup
(
«me
, 0);

45 
	`sym_ˇlc_vÆue
(
sym
);

46 
	`°rˇt
(
ªs_vÆue
, 
	`sym_gë_°rög_vÆue
(
sym
));

47 
ö
 = 
§c
;

49 
	`°rˇt
(
ªs_vÆue
, 
ö
);

51  
ªs_vÆue
;

52 
	}
}

54 *
	$c⁄f_gë_deÁu…_c⁄‚ame
()

56 
°©
 
buf
;

57 
fuŒ«me
[
PATH_MAX
+1];

58 *
ív
, *
«me
;

60 
«me
 = 
	`c⁄f_ex∑nd_vÆue
(
c⁄f_de‚ame
);

61 
ív
 = 
	`gëív
(
SRCTREE
);

62 i‡(
ív
) {

63 
	`•rötf
(
fuŒ«me
, "%s/%s", 
ív
, 
«me
);

64 i‡(!
	`°©
(
fuŒ«me
, &
buf
))

65  
fuŒ«me
;

67  
«me
;

68 
	}
}

70 
	$c⁄f_ªad
(c⁄° *
«me
)

72 
FILE
 *
ö
 = 
NULL
;

73 
löe
[1024];

74 *
p
, *
p2
;

75 
löío
 = 0;

76 
symbﬁ
 *
sym
;

77 
¥›îty
 *
¥›
;

78 
ex¥
 *
e
;

79 
i
;

81 i‡(
«me
) {

82 
ö
 = 
	`zc⁄f_f›í
(
«me
);

84 c⁄° **
«mes
 = 
c⁄f_c⁄‚ames
;

85 (
«me
 = *
«mes
++)) {

86 
«me
 = 
	`c⁄f_ex∑nd_vÆue
(name);

87 
ö
 = 
	`zc⁄f_f›í
(
«me
);

88 i‡(
ö
) {

89 
	`¥ötf
("#\n"

91 "#\n", 
«me
);

97 i‡(!
ö
)

100 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

101 
sym
->
Êags
 |
SYMBOL_NEW
 | 
SYMBOL_CHANGED
;

102 
sym
->
Êags
 &~
SYMBOL_VALID
;

103 
sym
->
ty≥
) {

104 
S_INT
:

105 
S_HEX
:

106 
S_STRING
:

107 i‡(
sym
->
u£r
.
vÆ
)

108 
	`‰ì
(
sym
->
u£r
.
vÆ
);

110 
sym
->
u£r
.
vÆ
 = 
NULL
;

111 
sym
->
u£r
.
åi
 = 
no
;

115 
	`fgës
(
löe
, ÷öe), 
ö
)) {

116 
löío
++;

117 
sym
 = 
NULL
;

118 
löe
[0]) {

120 i‡(
	`memcmp
(
löe
 + 2, "CONFIG_", 7))

122 
p
 = 
	`°rchr
(
löe
 + 9, ' ');

123 i‡(!
p
)

125 *
p
++ = 0;

126 i‡(
	`°∫cmp
(
p
, "isÇot set", 10))

128 
sym
 = 
	`sym_föd
(
löe
 + 9);

129 i‡(!
sym
) {

130 
	`Ârötf
(
°dîr
, "%s:%d:ÅryögÅÿassig¿n⁄exi°íàsymbﬁ %s\n", 
«me
, 
löío
, 
löe
 + 9);

133 
sym
->
ty≥
) {

134 
S_BOOLEAN
:

135 
S_TRISTATE
:

136 
sym
->
u£r
.
åi
 = 
no
;

137 
sym
->
Êags
 &~
SYMBOL_NEW
;

144 i‡(
	`memcmp
(
löe
, "CONFIG_", 7))

146 
p
 = 
	`°rchr
(
löe
 + 7, '=');

147 i‡(!
p
)

149 *
p
++ = 0;

150 
p2
 = 
	`°rchr
(
p
, '\n');

151 i‡(
p2
)

152 *
p2
 = 0;

153 
sym
 = 
	`sym_föd
(
löe
 + 7);

154 i‡(!
sym
) {

155 
	`Ârötf
(
°dîr
, "%s:%d:ÅryögÅÿassig¿n⁄exi°íàsymbﬁ %s\n", 
«me
, 
löío
, 
löe
 + 7);

158 
sym
->
ty≥
) {

159 
S_TRISTATE
:

160 i‡(
p
[0] == 'm') {

161 
sym
->
u£r
.
åi
 = 
mod
;

162 
sym
->
Êags
 &~
SYMBOL_NEW
;

165 
S_BOOLEAN
:

166 i‡(
p
[0] == 'y') {

167 
sym
->
u£r
.
åi
 = 
yes
;

168 
sym
->
Êags
 &~
SYMBOL_NEW
;

171 i‡(
p
[0] == 'n') {

172 
sym
->
u£r
.
åi
 = 
no
;

173 
sym
->
Êags
 &~
SYMBOL_NEW
;

177 
S_STRING
:

178 i‡(*
p
++ != '"')

180 
p2
 = 
p
; (p2 = 
	`°Ωbrk
(p2, "\"\\"));Ö2++) {

181 i‡(*
p2
 == '"') {

182 *
p2
 = 0;

185 
	`memmove
(
p2
,Ö2 + 1, 
	`°æí
(p2));

187 i‡(!
p2
) {

188 
	`Ârötf
(
°dîr
, "%s:%d: invÆid såög found\n", 
«me
, 
löío
);

189 
	`exô
(1);

191 
S_INT
:

192 
S_HEX
:

193 i‡(
	`sym_°rög_vÆid
(
sym
, 
p
)) {

194 
sym
->
u£r
.
vÆ
 = 
	`°rdup
(
p
);

195 
sym
->
Êags
 &~
SYMBOL_NEW
;

197 
	`Ârötf
(
°dîr
, "%s:%d: symbﬁ vÆuê'%s' invÆid f‹ %s\n", 
«me
, 
löío
, 
p
, 
sym
->name);

198 
	`exô
(1);

210 i‡(
sym
 && 
	`sym_is_choi˚_vÆue
(sym)) {

211 
symbﬁ
 *
cs
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym
));

212 
sym
->
u£r
.
åi
) {

213 
no
:

215 
mod
:

216 i‡(
cs
->
u£r
.
åi
 =
yes
)

219 
yes
:

220 i‡(
cs
->
u£r
.
åi
 !
no
)

222 
cs
->
u£r
.
vÆ
 = 
sym
;

225 
cs
->
u£r
.
åi
 = 
	`E_OR
(cs->u£r.åi, 
sym
->user.tri);

226 
cs
->
Êags
 &~
SYMBOL_NEW
;

229 
	`f˛o£
(
ö
);

231 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

232 
	`sym_ˇlc_vÆue
(
sym
);

233 i‡(
	`sym_has_vÆue
(
sym
Ë&& !
	`sym_is_choi˚_vÆue
(sym)) {

234 i‡(
sym
->
visibÀ
 =
no
)

235 
sym
->
Êags
 |
SYMBOL_NEW
;

236 
sym
->
ty≥
) {

237 
S_STRING
:

238 
S_INT
:

239 
S_HEX
:

240 i‡(!
	`sym_°rög_wôhö_ønge
(
sym
, sym->
u£r
.
vÆ
))

241 
sym
->
Êags
 |
SYMBOL_NEW
;

246 i‡(!
	`sym_is_choi˚
(
sym
))

248 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

249 
e
 = 
¥›
->
ex¥
;É;É =É->
À·
.expr)

250 i‡(
e
->
right
.
sym
->
visibÀ
 !
no
)

251 
sym
->
Êags
 |
e
->
right
.sym->Êag†& 
SYMBOL_NEW
;

254 
sym_ch™ge_cou¡
 = 1;

257 
	}
}

259 
	$c⁄f_wrôe
(c⁄° *
«me
)

261 
FILE
 *
out
;

262 
symbﬁ
 *
sym
;

263 
míu
 *menu;

264 c⁄° *
ba£«me
;

265 
dú«me
[128], 
tm≤ame
[128], 
√w«me
[128];

266 
ty≥
, 
l
;

267 c⁄° *
°r
;

269 
dú«me
[0] = 0;

270 i‡(
«me
 &&Çame[0]) {

271 *
¶ash
 = 
	`°ºchr
(
«me
, '/');

272 i‡(
¶ash
) {

273 
size
 = 
¶ash
 - 
«me
 + 1;

274 
	`mem˝y
(
dú«me
, 
«me
, 
size
);

275 
dú«me
[
size
] = 0;

276 i‡(
¶ash
[1])

277 
ba£«me
 = 
¶ash
 + 1;

279 
ba£«me
 = 
c⁄f_def_fûíame
;

281 
ba£«me
 = 
«me
;

283 
ba£«me
 = 
c⁄f_def_fûíame
;

285 
	`•rötf
(
√w«me
, "%s.tmpc⁄fig.%d", 
dú«me
, 
	`gëpid
());

286 
out
 = 
	`f›í
(
√w«me
, "w");

287 i‡(!
out
)

289 
	`Ârötf
(
out
, "#\n"

292 i‡(!
sym_ch™ge_cou¡
)

293 
	`sym_˛ór_Æl_vÆid
();

295 
míu
 = 
roŸmíu
.
li°
;

296 
míu
) {

297 
sym
 = 
míu
->sym;

298 i‡(!
sym
) {

299 i‡(!
	`míu_is_visibÀ
(
míu
))

300 
√xt
;

301 
°r
 = 
	`míu_gë_¥om±
(
míu
);

302 
	`Ârötf
(
out
, "\n"

305 "#\n", 
°r
);

306 } i‡(!(
sym
->
Êags
 & 
SYMBOL_CHOICE
)) {

307 
	`sym_ˇlc_vÆue
(
sym
);

308 i‡(!(
sym
->
Êags
 & 
SYMBOL_WRITE
))

309 
√xt
;

310 
sym
->
Êags
 &~
SYMBOL_WRITE
;

311 
ty≥
 = 
sym
->type;

312 i‡(
ty≥
 =
S_TRISTATE
) {

313 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

314 i‡(
moduÀs_sym
->
cuº
.
åi
 =
no
)

315 
ty≥
 = 
S_BOOLEAN
;

317 
ty≥
) {

318 
S_BOOLEAN
:

319 
S_TRISTATE
:

320 
	`sym_gë_åi°©e_vÆue
(
sym
)) {

321 
no
:

322 
	`Ârötf
(
out
, "# CONFIG_%†i†nŸ së\n", 
sym
->
«me
);

324 
mod
:

325 
	`Ârötf
(
out
, "CONFIG_%s=m\n", 
sym
->
«me
);

327 
yes
:

328 
	`Ârötf
(
out
, "CONFIG_%s=y\n", 
sym
->
«me
);

332 
S_STRING
:

334 
°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

335 
	`Ârötf
(
out
, "CONFIG_%s=\"", 
sym
->
«me
);

337 
l
 = 
	`°rc•n
(
°r
, "\"\\");

338 i‡(
l
) {

339 
	`fwrôe
(
°r
, 
l
, 1, 
out
);

341 
°r
 +
l
;

342 *
°r
 == '\\' || *str == '"') {

343 
	`Ârötf
(
out
, "\\%c", *
°r
);

344 
°r
++;

346 } *
°r
);

347 
	`Âuts
("\"\n", 
out
);

349 
S_HEX
:

350 
°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

351 i‡(
°r
[0] != '0' || (str[1] != 'x' && str[1] != 'X')) {

352 
	`Ârötf
(
out
, "CONFIG_%s=%s\n", 
sym
->
«me
, 
°r
);

355 
S_INT
:

356 
°r
 = 
	`sym_gë_°rög_vÆue
(
sym
);

357 
	`Ârötf
(
out
, "CONFIG_%s=%s\n", 
sym
->
«me
, 
°r
);

362 
√xt
:

363 i‡(
míu
->
li°
) {

364 
míu
 = míu->
li°
;

367 i‡(
míu
->
√xt
)

368 
míu
 = míu->
√xt
;

369 (
míu
 = míu->
∑ª¡
)) {

370 i‡(
míu
->
√xt
) {

371 
míu
 = míu->
√xt
;

376 
	`f˛o£
(
out
);

378 i‡(!
«me
 || 
ba£«me
 !
c⁄f_def_fûíame
) {

379 i‡(!
«me
)

380 
«me
 = 
c⁄f_def_fûíame
;

381 
	`•rötf
(
tm≤ame
, "%s.ﬁd", 
«me
);

382 
	`ª«me
(
«me
, 
tm≤ame
);

384 
	`•rötf
(
tm≤ame
, "%s%s", 
dú«me
, 
ba£«me
);

385 i‡(
	`ª«me
(
√w«me
, 
tm≤ame
))

388 
sym_ch™ge_cou¡
 = 0;

391 
	}
}

	@/usr/src/rtai/base/config/kconfig/expr.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
	#LKC_DIRECT_LINK


	)

11 
	~"lkc.h
"

13 
ex¥
 *
	$ex¥_Æloc_symbﬁ
(
symbﬁ
 *
sym
)

15 
ex¥
 *
e
 = 
	`mÆloc
((*e));

16 
	`mem£t
(
e
, 0, (*e));

17 
e
->
ty≥
 = 
E_SYMBOL
;

18 
e
->
À·
.
sym
 = sym;

19  
e
;

20 
	}
}

22 
ex¥
 *
	$ex¥_Æloc_⁄e
(
ex¥_ty≥
 
ty≥
, 
ex¥
 *
˚
)

24 
ex¥
 *
e
 = 
	`mÆloc
((*e));

25 
	`mem£t
(
e
, 0, (*e));

26 
e
->
ty≥
 =Åype;

27 
e
->
À·
.
ex¥
 = 
˚
;

28  
e
;

29 
	}
}

31 
ex¥
 *
	$ex¥_Æloc_two
(
ex¥_ty≥
 
ty≥
, 
ex¥
 *
e1
, ex¥ *
e2
)

33 
ex¥
 *
e
 = 
	`mÆloc
((*e));

34 
	`mem£t
(
e
, 0, (*e));

35 
e
->
ty≥
 =Åype;

36 
e
->
À·
.
ex¥
 = 
e1
;

37 
e
->
right
.
ex¥
 = 
e2
;

38  
e
;

39 
	}
}

41 
ex¥
 *
	$ex¥_Æloc_comp
(
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
s1
, symbﬁ *
s2
)

43 
ex¥
 *
e
 = 
	`mÆloc
((*e));

44 
	`mem£t
(
e
, 0, (*e));

45 
e
->
ty≥
 =Åype;

46 
e
->
À·
.
sym
 = 
s1
;

47 
e
->
right
.
sym
 = 
s2
;

48  
e
;

49 
	}
}

51 
ex¥
 *
	$ex¥_Æloc_™d
(
ex¥
 *
e1
, ex¥ *
e2
)

53 i‡(!
e1
)

54  
e2
;

55  
e2
 ? 
	`ex¥_Æloc_two
(
E_AND
, 
e1
,É2) :É1;

56 
	}
}

58 
ex¥
 *
	$ex¥_Æloc_‹
(
ex¥
 *
e1
, ex¥ *
e2
)

60 i‡(!
e1
)

61  
e2
;

62  
e2
 ? 
	`ex¥_Æloc_two
(
E_OR
, 
e1
,É2) :É1;

63 
	}
}

65 
ex¥
 *
	$ex¥_c›y
(
ex¥
 *
‹g
)

67 
ex¥
 *
e
;

69 i‡(!
‹g
)

70  
NULL
;

72 
e
 = 
	`mÆloc
((*
‹g
));

73 
	`mem˝y
(
e
, 
‹g
, (*org));

74 
‹g
->
ty≥
) {

75 
E_SYMBOL
:

76 
e
->
À·
 = 
‹g
->left;

78 
E_NOT
:

79 
e
->
À·
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->left.expr);

81 
E_EQUAL
:

82 
E_UNEQUAL
:

83 
e
->
À·
.
sym
 = 
‹g
->left.sym;

84 
e
->
right
.
sym
 = 
‹g
->right.sym;

86 
E_AND
:

87 
E_OR
:

88 
E_CHOICE
:

89 
e
->
À·
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->left.expr);

90 
e
->
right
.
ex¥
 = 
	`ex¥_c›y
(
‹g
->right.expr);

93 
	`¥ötf
("ˇn'àc›yÅy≥ %d\n", 
e
->
ty≥
);

94 
	`‰ì
(
e
);

95 
e
 = 
NULL
;

99  
e
;

100 
	}
}

102 
	$ex¥_‰ì
(
ex¥
 *
e
)

104 i‡(!
e
)

107 
e
->
ty≥
) {

108 
E_SYMBOL
:

110 
E_NOT
:

111 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

113 
E_EQUAL
:

114 
E_UNEQUAL
:

116 
E_OR
:

117 
E_AND
:

118 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

119 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

122 
	`¥ötf
("howÅÿ‰ìÅy≥ %d?\n", 
e
->
ty≥
);

125 
	`‰ì
(
e
);

126 
	}
}

128 
	gå™s_cou¡
;

130 
	#e1
 (*
ï1
)

	)

131 
	#e2
 (*
ï2
)

	)

133 
	$__ex¥_ñimö©e_eq
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï1
, ex¥ **
ï2
)

135 i‡(
e1
->
ty≥
 ==Åype) {

136 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
->
À·
.
ex¥
, &
e2
);

137 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
->
right
.
ex¥
, &
e2
);

140 i‡(
e2
->
ty≥
 ==Åype) {

141 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
, &
e2
->
À·
.
ex¥
);

142 
	`__ex¥_ñimö©e_eq
(
ty≥
, &
e1
, &
e2
->
right
.
ex¥
);

145 i‡(
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->type == E_SYMBOL &&

146 
e1
->
À·
.
sym
 =
e2
->À·.sym && (e1->À·.sym->
Êags
 & (
SYMBOL_YES
|
SYMBOL_NO
)))

148 i‡(!
	`ex¥_eq
(
e1
, 
e2
))

150 
å™s_cou¡
++;

151 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

152 
ty≥
) {

153 
E_OR
:

154 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

155 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

157 
E_AND
:

158 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

159 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

164 
	}
}

166 
	$ex¥_ñimö©e_eq
(
ex¥
 **
ï1
, ex¥ **
ï2
)

168 i‡(!
e1
 || !
e2
)

170 
e1
->
ty≥
) {

171 
E_OR
:

172 
E_AND
:

173 
	`__ex¥_ñimö©e_eq
(
e1
->
ty≥
, 
ï1
, 
ï2
);

177 i‡(
e1
->
ty≥
 !
e2
->type) e2->type) {

178 
E_OR
:

179 
E_AND
:

180 
	`__ex¥_ñimö©e_eq
(
e2
->
ty≥
, 
ï1
, 
ï2
);

184 
e1
 = 
	`ex¥_ñimö©e_yn
(e1);

185 
e2
 = 
	`ex¥_ñimö©e_yn
(e2);

186 
	}
}

188 #unde‡
e1


189 #unde‡
e2


191 
	$ex¥_eq
(
ex¥
 *
e1
, ex¥ *
e2
)

193 
ªs
, 
ﬁd_cou¡
;

195 i‡(
e1
->
ty≥
 !
e2
->type)

197 
e1
->
ty≥
) {

198 
E_EQUAL
:

199 
E_UNEQUAL
:

200  
e1
->
À·
.
sym
 =
e2
->À·.sym &&É1->
right
.sym ==É2->right.sym;

201 
E_SYMBOL
:

202  
e1
->
À·
.
sym
 =
e2
->left.sym;

203 
E_NOT
:

204  
	`ex¥_eq
(
e1
->
À·
.
ex¥
, 
e2
->left.expr);

205 
E_AND
:

206 
E_OR
:

207 
e1
 = 
	`ex¥_c›y
(e1);

208 
e2
 = 
	`ex¥_c›y
(e2);

209 
ﬁd_cou¡
 = 
å™s_cou¡
;

210 
	`ex¥_ñimö©e_eq
(&
e1
, &
e2
);

211 
ªs
 = (
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->type == E_SYMBOL &&

212 
e1
->
À·
.
sym
 =
e2
->left.sym);

213 
	`ex¥_‰ì
(
e1
);

214 
	`ex¥_‰ì
(
e2
);

215 
å™s_cou¡
 = 
ﬁd_cou¡
;

216  
ªs
;

217 
E_CHOICE
:

218 
E_RANGE
:

219 
E_NONE
:

223 
	`¥öt_ex¥
(0, 
e1
, 0);

224 
	`¥ötf
(" = ");

225 
	`¥öt_ex¥
(0, 
e2
, 0);

226 
	`¥ötf
(" ?\n");

229 
	}
}

231 
ex¥
 *
	$ex¥_ñimö©e_yn
(
ex¥
 *
e
)

233 
ex¥
 *
tmp
;

235 i‡(
e
Ëe->
ty≥
) {

236 
E_AND
:

237 
e
->
À·
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->left.expr);

238 
e
->
right
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->right.expr);

239 i‡(
e
->
À·
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

240 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

241 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

242 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

243 
e
->
ty≥
 = 
E_SYMBOL
;

244 
e
->
À·
.
sym
 = &
symbﬁ_no
;

245 
e
->
right
.
ex¥
 = 
NULL
;

246  
e
;

247 } i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

248 
	`‰ì
(
e
->
À·
.
ex¥
);

249 
tmp
 = 
e
->
right
.
ex¥
;

250 *
e
 = *”->
right
.
ex¥
);

251 
	`‰ì
(
tmp
);

252  
e
;

255 i‡(
e
->
right
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

256 i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_no
) {

257 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

258 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

259 
e
->
ty≥
 = 
E_SYMBOL
;

260 
e
->
À·
.
sym
 = &
symbﬁ_no
;

261 
e
->
right
.
ex¥
 = 
NULL
;

262  
e
;

263 } i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_yes
) {

264 
	`‰ì
(
e
->
right
.
ex¥
);

265 
tmp
 = 
e
->
À·
.
ex¥
;

266 *
e
 = *”->
À·
.
ex¥
);

267 
	`‰ì
(
tmp
);

268  
e
;

272 
E_OR
:

273 
e
->
À·
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->left.expr);

274 
e
->
right
.
ex¥
 = 
	`ex¥_ñimö©e_yn
(e->right.expr);

275 i‡(
e
->
À·
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

276 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

277 
	`‰ì
(
e
->
À·
.
ex¥
);

278 
tmp
 = 
e
->
right
.
ex¥
;

279 *
e
 = *”->
right
.
ex¥
);

280 
	`‰ì
(
tmp
);

281  
e
;

282 } i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

283 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

284 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

285 
e
->
ty≥
 = 
E_SYMBOL
;

286 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

287 
e
->
right
.
ex¥
 = 
NULL
;

288  
e
;

291 i‡(
e
->
right
.
ex¥
->
ty≥
 =
E_SYMBOL
) {

292 i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_no
) {

293 
	`‰ì
(
e
->
right
.
ex¥
);

294 
tmp
 = 
e
->
À·
.
ex¥
;

295 *
e
 = *”->
À·
.
ex¥
);

296 
	`‰ì
(
tmp
);

297  
e
;

298 } i‡(
e
->
right
.
ex¥
->
À·
.
sym
 =&
symbﬁ_yes
) {

299 
	`ex¥_‰ì
(
e
->
À·
.
ex¥
);

300 
	`ex¥_‰ì
(
e
->
right
.
ex¥
);

301 
e
->
ty≥
 = 
E_SYMBOL
;

302 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

303 
e
->
right
.
ex¥
 = 
NULL
;

304  
e
;

311  
e
;

312 
	}
}

317 
ex¥
 *
	$ex¥_å™s_boﬁ
(
ex¥
 *
e
)

319 i‡(!
e
)

320  
NULL
;

321 
e
->
ty≥
) {

322 
E_AND
:

323 
E_OR
:

324 
E_NOT
:

325 
e
->
À·
.
ex¥
 = 
	`ex¥_å™s_boﬁ
(e->left.expr);

326 
e
->
right
.
ex¥
 = 
	`ex¥_å™s_boﬁ
(e->right.expr);

328 
E_UNEQUAL
:

330 i‡(
e
->
À·
.
sym
->
ty≥
 =
S_TRISTATE
) {

331 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

332 
e
->
ty≥
 = 
E_SYMBOL
;

333 
e
->
right
.
sym
 = 
NULL
;

340  
e
;

341 
	}
}

346 
ex¥
 *
	$ex¥_joö_‹
(
ex¥
 *
e1
, ex¥ *
e2
)

348 
ex¥
 *
tmp
;

349 
symbﬁ
 *
sym1
, *
sym2
;

351 i‡(
	`ex¥_eq
(
e1
, 
e2
))

352  
	`ex¥_c›y
(
e1
);

353 i‡(
e1
->
ty≥
 !
E_EQUAL
 &&É1->ty≥ !
E_UNEQUAL
 &&É1->ty≥ !
E_SYMBOL
 &&É1->ty≥ !
E_NOT
)

354  
NULL
;

355 i‡(
e2
->
ty≥
 !
E_EQUAL
 &&É2->ty≥ !
E_UNEQUAL
 &&É2->ty≥ !
E_SYMBOL
 &&É2->ty≥ !
E_NOT
)

356  
NULL
;

357 i‡(
e1
->
ty≥
 =
E_NOT
) {

358 
tmp
 = 
e1
->
À·
.
ex¥
;

359 i‡(
tmp
->
ty≥
 !
E_EQUAL
 &&Åmp->ty≥ !
E_UNEQUAL
 &&Åmp->ty≥ !
E_SYMBOL
)

360  
NULL
;

361 
sym1
 = 
tmp
->
À·
.
sym
;

363 
sym1
 = 
e1
->
À·
.
sym
;

364 i‡(
e2
->
ty≥
 =
E_NOT
) {

365 i‡(
e2
->
À·
.
ex¥
->
ty≥
 !
E_SYMBOL
)

366  
NULL
;

367 
sym2
 = 
e2
->
À·
.
ex¥
->À·.
sym
;

369 
sym2
 = 
e2
->
À·
.
sym
;

370 i‡(
sym1
 !
sym2
)

371  
NULL
;

372 i‡(
sym1
->
ty≥
 !
S_BOOLEAN
 && sym1->ty≥ !
S_TRISTATE
)

373  
NULL
;

374 i‡(
sym1
->
ty≥
 =
S_TRISTATE
) {

375 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

376 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_mod
) ||

377 (
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_yes
))) {

379  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_no
);

381 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

382 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_no
) ||

383 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_yes
))) {

385  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_mod
);

387 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->type == E_EQUAL &&

388 ((
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_no
) ||

389 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_mod
))) {

391  
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
sym1
, &
symbﬁ_yes
);

394 i‡(
sym1
->
ty≥
 =
S_BOOLEAN
 && sym1 =
sym2
) {

395 i‡((
e1
->
ty≥
 =
E_NOT
 &&É1->
À·
.
ex¥
->ty≥ =
E_SYMBOL
 && 
e2
->type == E_SYMBOL) ||

396 (
e2
->
ty≥
 =
E_NOT
 &&É2->
À·
.
ex¥
->ty≥ =
E_SYMBOL
 && 
e1
->type == E_SYMBOL))

397  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

400 
	`¥ötf
("optimize ");

401 
	`¥öt_ex¥
(0, 
e1
, 0);

402 
	`¥ötf
(" || ");

403 
	`¥öt_ex¥
(0, 
e2
, 0);

404 
	`¥ötf
(" ?\n");

405  
NULL
;

406 
	}
}

408 
ex¥
 *
	$ex¥_joö_™d
(
ex¥
 *
e1
, ex¥ *
e2
)

410 
ex¥
 *
tmp
;

411 
symbﬁ
 *
sym1
, *
sym2
;

413 i‡(
	`ex¥_eq
(
e1
, 
e2
))

414  
	`ex¥_c›y
(
e1
);

415 i‡(
e1
->
ty≥
 !
E_EQUAL
 &&É1->ty≥ !
E_UNEQUAL
 &&É1->ty≥ !
E_SYMBOL
 &&É1->ty≥ !
E_NOT
)

416  
NULL
;

417 i‡(
e2
->
ty≥
 !
E_EQUAL
 &&É2->ty≥ !
E_UNEQUAL
 &&É2->ty≥ !
E_SYMBOL
 &&É2->ty≥ !
E_NOT
)

418  
NULL
;

419 i‡(
e1
->
ty≥
 =
E_NOT
) {

420 
tmp
 = 
e1
->
À·
.
ex¥
;

421 i‡(
tmp
->
ty≥
 !
E_EQUAL
 &&Åmp->ty≥ !
E_UNEQUAL
 &&Åmp->ty≥ !
E_SYMBOL
)

422  
NULL
;

423 
sym1
 = 
tmp
->
À·
.
sym
;

425 
sym1
 = 
e1
->
À·
.
sym
;

426 i‡(
e2
->
ty≥
 =
E_NOT
) {

427 i‡(
e2
->
À·
.
ex¥
->
ty≥
 !
E_SYMBOL
)

428  
NULL
;

429 
sym2
 = 
e2
->
À·
.
ex¥
->À·.
sym
;

431 
sym2
 = 
e2
->
À·
.
sym
;

432 i‡(
sym1
 !
sym2
)

433  
NULL
;

434 i‡(
sym1
->
ty≥
 !
S_BOOLEAN
 && sym1->ty≥ !
S_TRISTATE
)

435  
NULL
;

437 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_EQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_yes
) ||

438 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_EQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_yes
))

440  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_yes
);

442 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_UNEQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_no
) ||

443 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_UNEQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_no
))

445  
	`ex¥_Æloc_symbﬁ
(
sym1
);

447 i‡(
sym1
->
ty≥
 =
S_TRISTATE
) {

448 i‡(
e1
->
ty≥
 =
E_EQUAL
 && 
e2
->ty≥ =
E_UNEQUAL
) {

450 
sym2
 = 
e1
->
right
.
sym
;

451 i‡((
e2
->
right
.
sym
->
Êags
 & 
SYMBOL_CONST
Ë&& (
sym2
->flags & SYMBOL_CONST))

452  
sym2
 !
e2
->
right
.
sym
 ? 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, sym2)

453 : 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

455 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->ty≥ =
E_EQUAL
) {

457 
sym2
 = 
e2
->
right
.
sym
;

458 i‡((
e1
->
right
.
sym
->
Êags
 & 
SYMBOL_CONST
Ë&& (
sym2
->flags & SYMBOL_CONST))

459  
sym2
 !
e1
->
right
.
sym
 ? 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, sym2)

460 : 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

462 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

463 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_no
) ||

464 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_yes
)))

466  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_mod
);

468 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

469 ((
e1
->
right
.
sym
 =&
symbﬁ_yes
 && 
e2
->right.sym =&
symbﬁ_mod
) ||

470 (
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_yes
)))

472  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_no
);

474 i‡(
e1
->
ty≥
 =
E_UNEQUAL
 && 
e2
->type == E_UNEQUAL &&

475 ((
e1
->
right
.
sym
 =&
symbﬁ_mod
 && 
e2
->right.sym =&
symbﬁ_no
) ||

476 (
e1
->
right
.
sym
 =&
symbﬁ_no
 && 
e2
->right.sym =&
symbﬁ_mod
)))

478  
	`ex¥_Æloc_comp
(
E_EQUAL
, 
sym1
, &
symbﬁ_yes
);

480 i‡((
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_EQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_mod
) ||

481 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_EQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_mod
) ||

482 (
e1
->
ty≥
 =
E_SYMBOL
 && 
e2
->ty≥ =
E_UNEQUAL
 &&É2->
right
.
sym
 =&
symbﬁ_yes
) ||

483 (
e2
->
ty≥
 =
E_SYMBOL
 && 
e1
->ty≥ =
E_UNEQUAL
 &&É1->
right
.
sym
 =&
symbﬁ_yes
))

484  
NULL
;

486 
	`¥ötf
("optimize ");

487 
	`¥öt_ex¥
(0, 
e1
, 0);

488 
	`¥ötf
(" && ");

489 
	`¥öt_ex¥
(0, 
e2
, 0);

490 
	`¥ötf
(" ?\n");

491  
NULL
;

492 
	}
}

494 
	$ex¥_ñimö©e_dups1
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï1
, ex¥ **
ï2
)

496 
	#e1
 (*
ï1
)

	)

497 
	#e2
 (*
ï2
)

	)

498 
ex¥
 *
tmp
;

500 i‡(
e1
->
ty≥
 ==Åype) {

501 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
->
À·
.
ex¥
, &
e2
);

502 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
->
right
.
ex¥
, &
e2
);

505 i‡(
e2
->
ty≥
 ==Åype) {

506 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
, &
e2
->
À·
.
ex¥
);

507 
	`ex¥_ñimö©e_dups1
(
ty≥
, &
e1
, &
e2
->
right
.
ex¥
);

510 i‡(
e1
 =
e2
)

513 
e1
->
ty≥
) {

514 
E_OR
: 
E_AND
:

515 
	`ex¥_ñimö©e_dups1
(
e1
->
ty≥
, &e1, &e1);

520 
ty≥
) {

521 
E_OR
:

522 
tmp
 = 
	`ex¥_joö_‹
(
e1
, 
e2
);

523 i‡(
tmp
) {

524 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

525 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

526 
e2
 = 
tmp
;

527 
å™s_cou¡
++;

530 
E_AND
:

531 
tmp
 = 
	`ex¥_joö_™d
(
e1
, 
e2
);

532 i‡(
tmp
) {

533 
	`ex¥_‰ì
(
e1
);Éx¥_‰ì(
e2
);

534 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

535 
e2
 = 
tmp
;

536 
å™s_cou¡
++;

542 #unde‡
e1


543 #unde‡
e2


544 
	}
}

546 
	$ex¥_ñimö©e_dups2
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï1
, ex¥ **
ï2
)

548 
	#e1
 (*
ï1
)

	)

549 
	#e2
 (*
ï2
)

	)

550 
ex¥
 *
tmp
, *
tmp1
, *
tmp2
;

552 i‡(
e1
->
ty≥
 ==Åype) {

553 
	`ex¥_ñimö©e_dups2
(
ty≥
, &
e1
->
À·
.
ex¥
, &
e2
);

554 
	`ex¥_ñimö©e_dups2
(
ty≥
, &
e1
->
right
.
ex¥
, &
e2
);

557 i‡(
e2
->
ty≥
 ==Åype) {

558 
	`ex¥_ñimö©e_dups2
(
ty≥
, &
e1
, &
e2
->
À·
.
ex¥
);

559 
	`ex¥_ñimö©e_dups2
(
ty≥
, &
e1
, &
e2
->
right
.
ex¥
);

561 i‡(
e1
 =
e2
)

564 
e1
->
ty≥
) {

565 
E_OR
:

566 
	`ex¥_ñimö©e_dups2
(
e1
->
ty≥
, &e1, &e1);

568 
tmp1
 = 
	`ex¥_å™sf‹m
(
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e1
)));

569 
tmp2
 = 
	`ex¥_c›y
(
e2
);

570 
tmp
 = 
	`ex¥_exåa˘_eq_™d
(&
tmp1
, &
tmp2
);

571 i‡(
	`ex¥_is_yes
(
tmp1
)) {

572 
	`ex¥_‰ì
(
e1
);

573 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

574 
å™s_cou¡
++;

576 
	`ex¥_‰ì
(
tmp2
);

577 
	`ex¥_‰ì
(
tmp1
);

578 
	`ex¥_‰ì
(
tmp
);

580 
E_AND
:

581 
	`ex¥_ñimö©e_dups2
(
e1
->
ty≥
, &e1, &e1);

583 
tmp1
 = 
	`ex¥_å™sf‹m
(
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e1
)));

584 
tmp2
 = 
	`ex¥_c›y
(
e2
);

585 
tmp
 = 
	`ex¥_exåa˘_eq_‹
(&
tmp1
, &
tmp2
);

586 i‡(
	`ex¥_is_no
(
tmp1
)) {

587 
	`ex¥_‰ì
(
e1
);

588 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

589 
å™s_cou¡
++;

591 
	`ex¥_‰ì
(
tmp2
);

592 
	`ex¥_‰ì
(
tmp1
);

593 
	`ex¥_‰ì
(
tmp
);

598 #unde‡
e1


599 #unde‡
e2


600 
	}
}

602 
ex¥
 *
	$ex¥_ñimö©e_dups
(
ex¥
 *
e
)

604 
ﬁdcou¡
;

605 i‡(!
e
)

606  
e
;

608 
ﬁdcou¡
 = 
å™s_cou¡
;

610 
å™s_cou¡
 = 0;

611 
e
->
ty≥
) {

612 
E_OR
: 
E_AND
:

613 
	`ex¥_ñimö©e_dups1
(
e
->
ty≥
, &e, &e);

614 
	`ex¥_ñimö©e_dups2
(
e
->
ty≥
, &e, &e);

618 i‡(!
å™s_cou¡
)

620 
e
 = 
	`ex¥_ñimö©e_yn
(e);

622 
å™s_cou¡
 = 
ﬁdcou¡
;

623  
e
;

624 
	}
}

626 
ex¥
 *
	$ex¥_å™sf‹m
(
ex¥
 *
e
)

628 
ex¥
 *
tmp
;

630 i‡(!
e
)

631  
NULL
;

632 
e
->
ty≥
) {

633 
E_EQUAL
:

634 
E_UNEQUAL
:

635 
E_SYMBOL
:

636 
E_CHOICE
:

639 
e
->
À·
.
ex¥
 = 
	`ex¥_å™sf‹m
(e->left.expr);

640 
e
->
right
.
ex¥
 = 
	`ex¥_å™sf‹m
(e->right.expr);

643 
e
->
ty≥
) {

644 
E_EQUAL
:

645 i‡(
e
->
À·
.
sym
->
ty≥
 !
S_BOOLEAN
)

647 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

648 
e
->
ty≥
 = 
E_NOT
;

649 
e
->
À·
.
ex¥
 = 
	`ex¥_Æloc_symbﬁ
”->À·.
sym
);

650 
e
->
right
.
sym
 = 
NULL
;

653 i‡(
e
->
right
.
sym
 =&
symbﬁ_mod
) {

654 
	`¥ötf
("boﬁó¿symbﬁ %†ã°ed f‹ 'm'?Åe° f‹˚dÅÿ'n'\n", 
e
->
À·
.
sym
->
«me
);

655 
e
->
ty≥
 = 
E_SYMBOL
;

656 
e
->
À·
.
sym
 = &
symbﬁ_no
;

657 
e
->
right
.
sym
 = 
NULL
;

660 i‡(
e
->
right
.
sym
 =&
symbﬁ_yes
) {

661 
e
->
ty≥
 = 
E_SYMBOL
;

662 
e
->
right
.
sym
 = 
NULL
;

666 
E_UNEQUAL
:

667 i‡(
e
->
À·
.
sym
->
ty≥
 !
S_BOOLEAN
)

669 i‡(
e
->
right
.
sym
 =&
symbﬁ_no
) {

670 
e
->
ty≥
 = 
E_SYMBOL
;

671 
e
->
right
.
sym
 = 
NULL
;

674 i‡(
e
->
right
.
sym
 =&
symbﬁ_mod
) {

675 
	`¥ötf
("boﬁó¿symbﬁ %†ã°ed f‹ 'm'?Åe° f‹˚dÅÿ'y'\n", 
e
->
À·
.
sym
->
«me
);

676 
e
->
ty≥
 = 
E_SYMBOL
;

677 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

678 
e
->
right
.
sym
 = 
NULL
;

681 i‡(
e
->
right
.
sym
 =&
symbﬁ_yes
) {

682 
e
->
ty≥
 = 
E_NOT
;

683 
e
->
À·
.
ex¥
 = 
	`ex¥_Æloc_symbﬁ
”->À·.
sym
);

684 
e
->
right
.
sym
 = 
NULL
;

688 
E_NOT
:

689 
e
->
À·
.
ex¥
->
ty≥
) {

690 
E_NOT
:

692 
tmp
 = 
e
->
À·
.
ex¥
->left.expr;

693 
	`‰ì
(
e
->
À·
.
ex¥
);

694 
	`‰ì
(
e
);

695 
e
 = 
tmp
;

696 
e
 = 
	`ex¥_å™sf‹m
(e);

698 
E_EQUAL
:

699 
E_UNEQUAL
:

701 
tmp
 = 
e
->
À·
.
ex¥
;

702 
	`‰ì
(
e
);

703 
e
 = 
tmp
;

704 
e
->
ty≥
 =É->ty≥ =
E_EQUAL
 ? 
E_UNEQUAL
 : E_EQUAL;

706 
E_OR
:

708 
tmp
 = 
e
->
À·
.
ex¥
;

709 
e
->
ty≥
 = 
E_AND
;

710 
e
->
right
.
ex¥
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
tmp
->right.expr);

711 
tmp
->
ty≥
 = 
E_NOT
;

712 
tmp
->
right
.
ex¥
 = 
NULL
;

713 
e
 = 
	`ex¥_å™sf‹m
(e);

715 
E_AND
:

717 
tmp
 = 
e
->
À·
.
ex¥
;

718 
e
->
ty≥
 = 
E_OR
;

719 
e
->
right
.
ex¥
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
tmp
->right.expr);

720 
tmp
->
ty≥
 = 
E_NOT
;

721 
tmp
->
right
.
ex¥
 = 
NULL
;

722 
e
 = 
	`ex¥_å™sf‹m
(e);

724 
E_SYMBOL
:

725 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_yes
) {

727 
tmp
 = 
e
->
À·
.
ex¥
;

728 
	`‰ì
(
e
);

729 
e
 = 
tmp
;

730 
e
->
ty≥
 = 
E_SYMBOL
;

731 
e
->
À·
.
sym
 = &
symbﬁ_no
;

734 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_mod
) {

736 
tmp
 = 
e
->
À·
.
ex¥
;

737 
	`‰ì
(
e
);

738 
e
 = 
tmp
;

739 
e
->
ty≥
 = 
E_SYMBOL
;

740 
e
->
À·
.
sym
 = &
symbﬁ_mod
;

743 i‡(
e
->
À·
.
ex¥
->À·.
sym
 =&
symbﬁ_no
) {

745 
tmp
 = 
e
->
À·
.
ex¥
;

746 
	`‰ì
(
e
);

747 
e
 = 
tmp
;

748 
e
->
ty≥
 = 
E_SYMBOL
;

749 
e
->
À·
.
sym
 = &
symbﬁ_yes
;

760  
e
;

761 
	}
}

763 
	$ex¥_c⁄èös_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
)

765 i‡(!
dï
)

768 
dï
->
ty≥
) {

769 
E_AND
:

770 
E_OR
:

771  
	`ex¥_c⁄èös_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
) ||

772 
	`ex¥_c⁄èös_symbﬁ
(
dï
->
right
.
ex¥
, 
sym
);

773 
E_SYMBOL
:

774  
dï
->
À·
.
sym
 == sym;

775 
E_EQUAL
:

776 
E_UNEQUAL
:

777  
dï
->
À·
.
sym
 == sym ||

778 
dï
->
right
.
sym
 == sym;

779 
E_NOT
:

780  
	`ex¥_c⁄èös_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
);

785 
	}
}

787 
boﬁ
 
	$ex¥_dïíds_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
)

789 i‡(!
dï
)

790  
Ál£
;

792 
dï
->
ty≥
) {

793 
E_AND
:

794  
	`ex¥_dïíds_symbﬁ
(
dï
->
À·
.
ex¥
, 
sym
) ||

795 
	`ex¥_dïíds_symbﬁ
(
dï
->
right
.
ex¥
, 
sym
);

796 
E_SYMBOL
:

797  
dï
->
À·
.
sym
 == sym;

798 
E_EQUAL
:

799 i‡(
dï
->
À·
.
sym
 == sym) {

800 i‡(
dï
->
right
.
sym
 =&
symbﬁ_yes
 || dï->right.sym =&
symbﬁ_mod
)

801  
åue
;

804 
E_UNEQUAL
:

805 i‡(
dï
->
À·
.
sym
 == sym) {

806 i‡(
dï
->
right
.
sym
 =&
symbﬁ_no
)

807  
åue
;

813  
Ál£
;

814 
	}
}

816 
ex¥
 *
	$ex¥_exåa˘_eq_™d
(
ex¥
 **
ï1
, ex¥ **
ï2
)

818 
ex¥
 *
tmp
 = 
NULL
;

819 
	`ex¥_exåa˘_eq
(
E_AND
, &
tmp
, 
ï1
, 
ï2
);

820 i‡(
tmp
) {

821 *
ï1
 = 
	`ex¥_ñimö©e_yn
(*ep1);

822 *
ï2
 = 
	`ex¥_ñimö©e_yn
(*ep2);

824  
tmp
;

825 
	}
}

827 
ex¥
 *
	$ex¥_exåa˘_eq_‹
(
ex¥
 **
ï1
, ex¥ **
ï2
)

829 
ex¥
 *
tmp
 = 
NULL
;

830 
	`ex¥_exåa˘_eq
(
E_OR
, &
tmp
, 
ï1
, 
ï2
);

831 i‡(
tmp
) {

832 *
ï1
 = 
	`ex¥_ñimö©e_yn
(*ep1);

833 *
ï2
 = 
	`ex¥_ñimö©e_yn
(*ep2);

835  
tmp
;

836 
	}
}

838 
	$ex¥_exåa˘_eq
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï
, ex¥ **
ï1
, ex¥ **
ï2
)

840 
	#e1
 (*
ï1
)

	)

841 
	#e2
 (*
ï2
)

	)

842 i‡(
e1
->
ty≥
 ==Åype) {

843 
	`ex¥_exåa˘_eq
(
ty≥
, 
ï
, &
e1
->
À·
.
ex¥
, &
e2
);

844 
	`ex¥_exåa˘_eq
(
ty≥
, 
ï
, &
e1
->
right
.
ex¥
, &
e2
);

847 i‡(
e2
->
ty≥
 ==Åype) {

848 
	`ex¥_exåa˘_eq
(
ty≥
, 
ï
, 
ï1
, &
e2
->
À·
.
ex¥
);

849 
	`ex¥_exåa˘_eq
(
ty≥
, 
ï
, 
ï1
, &
e2
->
right
.
ex¥
);

852 i‡(
	`ex¥_eq
(
e1
, 
e2
)) {

853 *
ï
 = *ï ? 
	`ex¥_Æloc_two
(
ty≥
, *ï, 
e1
) :É1;

854 
	`ex¥_‰ì
(
e2
);

855 i‡(
ty≥
 =
E_AND
) {

856 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

857 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

858 } i‡(
ty≥
 =
E_OR
) {

859 
e1
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

860 
e2
 = 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

863 #unde‡
e1


864 #unde‡
e2


865 
	}
}

867 
ex¥
 *
	$ex¥_å™s_com∑ª
(
ex¥
 *
e
, 
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
sym
)

869 
ex¥
 *
e1
, *
e2
;

871 i‡(!
e
) {

872 
e
 = 
	`ex¥_Æloc_symbﬁ
(
sym
);

873 i‡(
ty≥
 =
E_UNEQUAL
)

874 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

875  
e
;

877 
e
->
ty≥
) {

878 
E_AND
:

879 
e1
 = 
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
E_EQUAL
, 
sym
);

880 
e2
 = 
	`ex¥_å™s_com∑ª
(
e
->
right
.
ex¥
, 
E_EQUAL
, 
sym
);

881 i‡(
sym
 =&
symbﬁ_yes
)

882 
e
 = 
	`ex¥_Æloc_two
(
E_AND
, 
e1
, 
e2
);

883 i‡(
sym
 =&
symbﬁ_no
)

884 
e
 = 
	`ex¥_Æloc_two
(
E_OR
, 
e1
, 
e2
);

885 i‡(
ty≥
 =
E_UNEQUAL
)

886 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

887  
e
;

888 
E_OR
:

889 
e1
 = 
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
E_EQUAL
, 
sym
);

890 
e2
 = 
	`ex¥_å™s_com∑ª
(
e
->
right
.
ex¥
, 
E_EQUAL
, 
sym
);

891 i‡(
sym
 =&
symbﬁ_yes
)

892 
e
 = 
	`ex¥_Æloc_two
(
E_OR
, 
e1
, 
e2
);

893 i‡(
sym
 =&
symbﬁ_no
)

894 
e
 = 
	`ex¥_Æloc_two
(
E_AND
, 
e1
, 
e2
);

895 i‡(
ty≥
 =
E_UNEQUAL
)

896 
e
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
,É);

897  
e
;

898 
E_NOT
:

899  
	`ex¥_å™s_com∑ª
(
e
->
À·
.
ex¥
, 
ty≥
 =
E_EQUAL
 ? 
E_UNEQUAL
 : E_EQUAL, 
sym
);

900 
E_UNEQUAL
:

901 
E_EQUAL
:

902 i‡(
ty≥
 =
E_EQUAL
) {

903 i‡(
sym
 =&
symbﬁ_yes
)

904  
	`ex¥_c›y
(
e
);

905 i‡(
sym
 =&
symbﬁ_mod
)

906  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_no
);

907 i‡(
sym
 =&
symbﬁ_no
)

908  
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e
));

910 i‡(
sym
 =&
symbﬁ_yes
)

911  
	`ex¥_Æloc_⁄e
(
E_NOT
, 
	`ex¥_c›y
(
e
));

912 i‡(
sym
 =&
symbﬁ_mod
)

913  
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_yes
);

914 i‡(
sym
 =&
symbﬁ_no
)

915  
	`ex¥_c›y
(
e
);

918 
E_SYMBOL
:

919  
	`ex¥_Æloc_comp
(
ty≥
, 
e
->
À·
.
sym
, sym);

920 
E_CHOICE
:

921 
E_RANGE
:

922 
E_NONE
:

925  
NULL
;

926 
	}
}

928 
åi°©e
 
	$ex¥_ˇlc_vÆue
(
ex¥
 *
e
)

930 
åi°©e
 
vÆ1
, 
vÆ2
;

931 c⁄° *
°r1
, *
°r2
;

933 i‡(!
e
)

934  
yes
;

936 
e
->
ty≥
) {

937 
E_SYMBOL
:

938 
	`sym_ˇlc_vÆue
(
e
->
À·
.
sym
);

939  
e
->
À·
.
sym
->
cuº
.
åi
;

940 
E_AND
:

941 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

942 
vÆ2
 = 
	`ex¥_ˇlc_vÆue
(
e
->
right
.
ex¥
);

943  
	`E_AND
(
vÆ1
, 
vÆ2
);

944 
E_OR
:

945 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

946 
vÆ2
 = 
	`ex¥_ˇlc_vÆue
(
e
->
right
.
ex¥
);

947  
	`E_OR
(
vÆ1
, 
vÆ2
);

948 
E_NOT
:

949 
vÆ1
 = 
	`ex¥_ˇlc_vÆue
(
e
->
À·
.
ex¥
);

950  
	`E_NOT
(
vÆ1
);

951 
E_EQUAL
:

952 
	`sym_ˇlc_vÆue
(
e
->
À·
.
sym
);

953 
	`sym_ˇlc_vÆue
(
e
->
right
.
sym
);

954 
°r1
 = 
	`sym_gë_°rög_vÆue
(
e
->
À·
.
sym
);

955 
°r2
 = 
	`sym_gë_°rög_vÆue
(
e
->
right
.
sym
);

956  !
	`°rcmp
(
°r1
, 
°r2
Ë? 
yes
 : 
no
;

957 
E_UNEQUAL
:

958 
	`sym_ˇlc_vÆue
(
e
->
À·
.
sym
);

959 
	`sym_ˇlc_vÆue
(
e
->
right
.
sym
);

960 
°r1
 = 
	`sym_gë_°rög_vÆue
(
e
->
À·
.
sym
);

961 
°r2
 = 
	`sym_gë_°rög_vÆue
(
e
->
right
.
sym
);

962  !
	`°rcmp
(
°r1
, 
°r2
Ë? 
no
 : 
yes
;

964 
	`¥ötf
("ex¥_ˇlc_vÆue: %d?\n", 
e
->
ty≥
);

965  
no
;

967 
	}
}

969 
	$ex¥_com∑ª_ty≥
(
ex¥_ty≥
 
t1
, ex¥_ty≥ 
t2
)

974 i‡(
t1
 =
t2
)

976 
t1
) {

977 
E_EQUAL
:

978 
E_UNEQUAL
:

979 i‡(
t2
 =
E_NOT
)

981 
E_NOT
:

982 i‡(
t2
 =
E_AND
)

984 
E_AND
:

985 i‡(
t2
 =
E_OR
)

987 
E_OR
:

988 i‡(
t2
 =
E_CHOICE
)

990 
E_CHOICE
:

991 i‡(
t2
 == 0)

996 
	`¥ötf
("[%dgt%d?]", 
t1
, 
t2
);

999 
	}
}

1001 
ex¥_¥öt
(
ex¥
 *
e
, (*
‚
)(*, c⁄° *), *
d©a
, 
¥evtokí
)

1003 i‡(!
e
) {

1004 
	`‚
(
d©a
, "y");

1008 i‡(
	`ex¥_com∑ª_ty≥
(
¥evtokí
, 
e
->
ty≥
) > 0)

1009 
	`‚
(
d©a
, "(");

1010 
e
->
ty≥
) {

1011 
E_SYMBOL
:

1012 i‡(
e
->
À·
.
sym
->
«me
)

1013 
	`‚
(
d©a
, 
e
->
À·
.
sym
->
«me
);

1015 
	`‚
(
d©a
, "<choice>");

1017 
E_NOT
:

1018 
	`‚
(
d©a
, "!");

1019 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_NOT
);

1021 
E_EQUAL
:

1022 
	`‚
(
d©a
, 
e
->
À·
.
sym
->
«me
);

1023 
	`‚
(
d©a
, "=");

1024 
	`‚
(
d©a
, 
e
->
right
.
sym
->
«me
);

1026 
E_UNEQUAL
:

1027 
	`‚
(
d©a
, 
e
->
À·
.
sym
->
«me
);

1028 
	`‚
(
d©a
, "!=");

1029 
	`‚
(
d©a
, 
e
->
right
.
sym
->
«me
);

1031 
E_OR
:

1032 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_OR
);

1033 
	`‚
(
d©a
, " || ");

1034 
	`ex¥_¥öt
(
e
->
right
.
ex¥
, 
‚
, 
d©a
, 
E_OR
);

1036 
E_AND
:

1037 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_AND
);

1038 
	`‚
(
d©a
, " && ");

1039 
	`ex¥_¥öt
(
e
->
right
.
ex¥
, 
‚
, 
d©a
, 
E_AND
);

1041 
E_CHOICE
:

1042 
	`‚
(
d©a
, 
e
->
right
.
sym
->
«me
);

1043 i‡(
e
->
À·
.
ex¥
) {

1044 
	`‚
(
d©a
, " ^ ");

1045 
	`ex¥_¥öt
(
e
->
À·
.
ex¥
, 
‚
, 
d©a
, 
E_CHOICE
);

1048 
E_RANGE
:

1049 
	`‚
(
d©a
, "[");

1050 
	`‚
(
d©a
, 
e
->
À·
.
sym
->
«me
);

1051 
	`‚
(
d©a
, " ");

1052 
	`‚
(
d©a
, 
e
->
right
.
sym
->
«me
);

1053 
	`‚
(
d©a
, "]");

1057 
buf
[32];

1058 
	`•rötf
(
buf
, "<unknow¿ty≥ %d>", 
e
->
ty≥
);

1059 
	`‚
(
d©a
, 
buf
);

1063 i‡(
	`ex¥_com∑ª_ty≥
(
¥evtokí
, 
e
->
ty≥
) > 0)

1064 
	`‚
(
d©a
, ")");

1065 
	}
}

1067 
	$ex¥_¥öt_fûe_hñ≥r
(*
d©a
, c⁄° *
°r
)

1069 
	`fwrôe
(
°r
, 
	`°æí
(°r), 1, 
d©a
);

1070 
	}
}

1072 
	$ex¥_Âröt
(
ex¥
 *
e
, 
FILE
 *
out
)

1074 
	`ex¥_¥öt
(
e
, 
ex¥_¥öt_fûe_hñ≥r
, 
out
, 
E_NONE
);

1075 
	}
}

1077 
	$¥öt_ex¥
(
mask
, 
ex¥
 *
e
, 
¥evtokí
)

1079 i‡(!(
cdebug
 & 
mask
))

1081 
	`ex¥_Âröt
(
e
, 
°dout
);

1082 
	}
}

	@/usr/src/rtai/base/config/kconfig/expr.h

6 #i‚de‡
EXPR_H


7 
	#EXPR_H


	)

9 #ifde‡
__˝lu•lus


13 
	~<°dio.h
>

14 #i‚de‡
__˝lu•lus


15 
	~<°dboﬁ.h
>

18 
	sfûe
 {

19 
fûe
 *
√xt
;

20 
fûe
 *
∑ª¡
;

21 *
«me
;

22 
löío
;

23 
Êags
;

26 
	#FILE_BUSY
 0x0001

	)

27 
	#FILE_SCANNED
 0x0002

	)

28 
	#FILE_PRINTED
 0x0004

	)

30 
	eåi°©e
 {

31 
no
, 
mod
, 
yes


32 } 
	tåi°©e
;

34 
	eex¥_ty≥
 {

35 
E_NONE
, 
E_OR
, 
E_AND
, 
E_NOT
, 
E_EQUAL
, 
E_UNEQUAL
, 
E_CHOICE
, 
E_SYMBOL
, 
E_RANGE


38 
	uex¥_d©a
 {

39 
ex¥
 *expr;

40 
symbﬁ
 *
sym
;

43 
	sex¥
 {

44 
ex¥_ty≥
 
ty≥
;

45 
ex¥_d©a
 
À·
, 
right
;

48 
	#E_OR
(
dï1
, 
dï2
Ë(((dï1)>(dï2))?(dï1):(dï2))

	)

49 
	#E_AND
(
dï1
, 
dï2
Ë(((dï1)<(dï2))?(dï1):(dï2))

	)

50 
	#E_NOT
(
dï
Ë(2-(dï))

	)

52 
	sex¥_vÆue
 {

53 
ex¥
 *expr;

54 
åi°©e
 
åi
;

57 
	ssymbﬁ_vÆue
 {

58 *
vÆ
;

59 
åi°©e
 
åi
;

62 
	esymbﬁ_ty≥
 {

63 
S_UNKNOWN
, 
S_BOOLEAN
, 
S_TRISTATE
, 
S_INT
, 
S_HEX
, 
S_STRING
, 
S_OTHER


66 
	ssymbﬁ
 {

67 
symbﬁ
 *
√xt
;

68 *
«me
;

69 *
hñp
;

70 
symbﬁ_ty≥
 
ty≥
;

71 
symbﬁ_vÆue
 
cuº
, 
u£r
;

72 
åi°©e
 
visibÀ
;

73 
Êags
;

74 
¥›îty
 *
¥›
;

75 
ex¥
 *
dï
, *
dï2
;

76 
ex¥_vÆue
 
ªv_dï
;

79 
	#f‹_Æl_symbﬁs
(
i
, 
sym
Ëò0; i < 257; i++Ësym = 
symbﬁ_hash
[i]; sym; sym = sym->
√xt
Ëi‡(sym->
ty≥
 !
S_OTHER
)

	)

81 
	#SYMBOL_YES
 0x0001

	)

82 
	#SYMBOL_MOD
 0x0002

	)

83 
	#SYMBOL_NO
 0x0004

	)

84 
	#SYMBOL_CONST
 0x0007

	)

85 
	#SYMBOL_CHECK
 0x0008

	)

86 
	#SYMBOL_CHOICE
 0x0010

	)

87 
	#SYMBOL_CHOICEVAL
 0x0020

	)

88 
	#SYMBOL_PRINTED
 0x0040

	)

89 
	#SYMBOL_VALID
 0x0080

	)

90 
	#SYMBOL_OPTIONAL
 0x0100

	)

91 
	#SYMBOL_WRITE
 0x0200

	)

92 
	#SYMBOL_CHANGED
 0x0400

	)

93 
	#SYMBOL_NEW
 0x0800

	)

94 
	#SYMBOL_AUTO
 0x1000

	)

95 
	#SYMBOL_CHECKED
 0x2000

	)

96 
	#SYMBOL_CHECK_DONE
 0x4000

	)

97 
	#SYMBOL_WARNED
 0x8000

	)

99 
	#SYMBOL_MAXLENGTH
 256

	)

100 
	#SYMBOL_HASHSIZE
 257

	)

101 
	#SYMBOL_HASHMASK
 0xff

	)

103 
	e¥›_ty≥
 {

104 
P_UNKNOWN
, 
P_PROMPT
, 
P_COMMENT
, 
P_MENU
, 
P_DEFAULT
, 
P_CHOICE
, 
P_SELECT
, 
P_RANGE


107 
	s¥›îty
 {

108 
¥›îty
 *
√xt
;

109 
symbﬁ
 *
sym
;

110 
¥›_ty≥
 
ty≥
;

111 c⁄° *
ãxt
;

112 
ex¥_vÆue
 
visibÀ
;

113 
ex¥
 *expr;

114 
míu
 *menu;

115 
fûe
 *file;

116 
löío
;

119 
	#f‹_Æl_¥›îtõs
(
sym
, 
°
, 
tok
) \

120 
°
 = 
sym
->
¥›
; st; sà°->
√xt
) \

121 i‡(
°
->
ty≥
 =(
tok
))

	)

122 
	#f‹_Æl_deÁu…s
(
sym
, 
°
Ë
	`f‹_Æl_¥›îtõs
(sym, st, 
P_DEFAULT
)

	)

123 
	#f‹_Æl_choi˚s
(
sym
, 
°
Ë
	`f‹_Æl_¥›îtõs
(sym, st, 
P_CHOICE
)

	)

124 
	#f‹_Æl_¥om±s
(
sym
, 
°
) \

125 
°
 = 
sym
->
¥›
; st; sà°->
√xt
) \

126 i‡(
°
->
ãxt
)

	)

128 
	smíu
 {

129 
míu
 *
√xt
;

130 
míu
 *
∑ª¡
;

131 
míu
 *
li°
;

132 
symbﬁ
 *
sym
;

133 
¥›îty
 *
¥om±
;

134 
ex¥
 *
dï
;

135 
Êags
;

137 
fûe
 *file;

138 
löío
;

139 *
d©a
;

142 
	#MENU_CHANGED
 0x0001

	)

143 
	#MENU_ROOT
 0x0002

	)

145 #i‚de‡
SWIG


147 
fûe
 *
fûe_li°
;

148 
fûe
 *
cuºít_fûe
;

149 
fûe
 *
lookup_fûe
(c⁄° *
«me
);

151 
symbﬁ
 
symbﬁ_yes
, 
symbﬁ_no
, 
symbﬁ_mod
;

152 
symbﬁ
 *
moduÀs_sym
;

153 
cdebug
;

154 
ex¥
 *
ex¥_Æloc_symbﬁ
(
symbﬁ
 *
sym
);

155 
ex¥
 *
ex¥_Æloc_⁄e
(
ex¥_ty≥
 
ty≥
, ex¥ *
˚
);

156 
ex¥
 *
ex¥_Æloc_two
(
ex¥_ty≥
 
ty≥
, ex¥ *
e1
, ex¥ *
e2
);

157 
ex¥
 *
ex¥_Æloc_comp
(
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
s1
, symbﬁ *
s2
);

158 
ex¥
 *
ex¥_Æloc_™d
(ex¥ *
e1
, ex¥ *
e2
);

159 
ex¥
 *
ex¥_Æloc_‹
(ex¥ *
e1
, ex¥ *
e2
);

160 
ex¥
 *
ex¥_c›y
(ex¥ *
‹g
);

161 
ex¥_‰ì
(
ex¥
 *
e
);

162 
ex¥_eq
(
ex¥
 *
e1
, ex¥ *
e2
);

163 
ex¥_ñimö©e_eq
(
ex¥
 **
ï1
, ex¥ **
ï2
);

164 
åi°©e
 
ex¥_ˇlc_vÆue
(
ex¥
 *
e
);

165 
ex¥
 *
ex¥_ñimö©e_yn
(ex¥ *
e
);

166 
ex¥
 *
ex¥_å™s_boﬁ
(ex¥ *
e
);

167 
ex¥
 *
ex¥_ñimö©e_dups
(ex¥ *
e
);

168 
ex¥
 *
ex¥_å™sf‹m
(ex¥ *
e
);

169 
ex¥_c⁄èös_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
);

170 
boﬁ
 
ex¥_dïíds_symbﬁ
(
ex¥
 *
dï
, 
symbﬁ
 *
sym
);

171 
ex¥
 *
ex¥_exåa˘_eq_™d
(ex¥ **
ï1
, ex¥ **
ï2
);

172 
ex¥
 *
ex¥_exåa˘_eq_‹
(ex¥ **
ï1
, ex¥ **
ï2
);

173 
ex¥_exåa˘_eq
(
ex¥_ty≥
 
ty≥
, 
ex¥
 **
ï
, ex¥ **
ï1
, ex¥ **
ï2
);

174 
ex¥
 *
ex¥_å™s_com∑ª
(ex¥ *
e
, 
ex¥_ty≥
 
ty≥
, 
symbﬁ
 *
sym
);

176 
ex¥_Âröt
(
ex¥
 *
e
, 
FILE
 *
out
);

177 
¥öt_ex¥
(
mask
, 
ex¥
 *
e
, 
¥evtokí
);

179 
ölöe
 
ex¥_is_yes
(
ex¥
 *
e
)

181  !
	ge
 || (e->
	gty≥
 =
E_SYMBOL
 && 
e
->
À·
.
sym
 =&
symbﬁ_yes
);

184 
ölöe
 
ex¥_is_no
(
ex¥
 *
e
)

186  
	ge
 && (e->
	gty≥
 =
E_SYMBOL
 && 
e
->
À·
.
sym
 =&
symbﬁ_no
);

190 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/config/kconfig/gconf.c

9 #ifde‡
HAVE_CONFIG_H


10 
	~<c⁄fig.h
>

13 
	~"lkc.h
"

14 
	~"images.c
"

16 
	~<gœde/gœde.h
>

17 
	~<gtk/gtk.h
>

18 
	~<glib.h
>

19 
	~<gdk/gdkkeysyms.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<time.h
>

25 
	~<°dlib.h
>

30 
	mSINGLE_VIEW
, 
	mSPLIT_VIEW
, 
	mFULL_VIEW


33 
göt
 
	gvõw_mode
 = 
FULL_VIEW
;

34 
gboﬁón
 
	gshow_«me
 = 
TRUE
;

35 
gboﬁón
 
	gshow_ønge
 = 
TRUE
;

36 
gboﬁón
 
	gshow_vÆue
 = 
TRUE
;

37 
gboﬁón
 
	gshow_Æl
 = 
FALSE
;

38 
gboﬁón
 
	gshow_debug
 = 
FALSE
;

39 
gboﬁón
 
	gªsizóbÀ
 = 
FALSE
;

41 
gboﬁón
 
	gc⁄fig_ch™ged
 = 
FALSE
;

43 
	gnohñp_ãxt
[] =

46 
GtkWidgë
 *
	gmaö_wnd
 = 
NULL
;

47 
GtkWidgë
 *
	gåì1_w
 = 
NULL
;

48 
GtkWidgë
 *
	gåì2_w
 = 
NULL
;

49 
GtkWidgë
 *
	gãxt_w
 = 
NULL
;

50 
GtkWidgë
 *
	gh∑√d
 = 
NULL
;

51 
GtkWidgë
 *
	gv∑√d
 = 
NULL
;

52 
GtkWidgë
 *
	gback_bä
 = 
NULL
;

54 
GtkTextTag
 *
	gèg1
, *
	gèg2
;

55 
GdkCﬁ‹
 
	gcﬁ‹
;

57 
GtkTªeSt‹e
 *
	gåì1
, *
	gåì2
, *
	gåì
;

58 
GtkTªeModñ
 *
	gmodñ1
, *
	gmodñ2
;

59 
GtkTªeIãr
 *
	g∑ª¡s
[256];

60 
göt
 
	gödít
;

62 
míu
 *
	gcuºít
;

63 
míu
 *
	gbrow£d
;

66 
	mCOL_OPTION
, 
	mCOL_NAME
, 
	mCOL_NO
, 
	mCOL_MOD
, 
	mCOL_YES
, 
	mCOL_VALUE
,

67 
	mCOL_MENU
, 
	mCOL_COLOR
, 
	mCOL_EDIT
, 
	mCOL_PIXBUF
,

68 
	mCOL_PIXVIS
, 
	mCOL_BTNVIS
, 
	mCOL_BTNACT
, 
	mCOL_BTNINC
, 
	mCOL_BTNRAD
,

69 
	mCOL_NUMBER


72 
di•œy_li°
();

73 
di•œy_åì
(
míu
 *menu);

74 
di•œy_åì_∑π
();

75 
upd©e_åì
(
míu
 *
§c
, 
GtkTªeIãr
 * 
d°
);

76 
£t_node
(
GtkTªeIãr
 * 
node
, 
míu
 *míu, 
gch¨
 ** 
row
);

77 
gch¨
 **
fûl_row
(
míu
 *menu);

83 c⁄° *
	$dbg_¥öt_°y≥
(
vÆ
)

85 
buf
[256];

87 
	`bzîo
(
buf
, 256);

89 i‡(
vÆ
 =
S_UNKNOWN
)

90 
	`°r˝y
(
buf
, "unknown");

91 i‡(
vÆ
 =
S_BOOLEAN
)

92 
	`°r˝y
(
buf
, "boolean");

93 i‡(
vÆ
 =
S_TRISTATE
)

94 
	`°r˝y
(
buf
, "tristate");

95 i‡(
vÆ
 =
S_INT
)

96 
	`°r˝y
(
buf
, "int");

97 i‡(
vÆ
 =
S_HEX
)

98 
	`°r˝y
(
buf
, "hex");

99 i‡(
vÆ
 =
S_STRING
)

100 
	`°r˝y
(
buf
, "string");

101 i‡(
vÆ
 =
S_OTHER
)

102 
	`°r˝y
(
buf
, "other");

104 #ifde‡
DEBUG


105 
	`¥ötf
("%s", 
buf
);

108  
buf
;

109 
	}
}

111 c⁄° *
	$dbg_¥öt_Êags
(
vÆ
)

113 
buf
[256];

115 
	`bzîo
(
buf
, 256);

117 i‡(
vÆ
 & 
SYMBOL_YES
)

118 
	`°rˇt
(
buf
, "yes/");

119 i‡(
vÆ
 & 
SYMBOL_MOD
)

120 
	`°rˇt
(
buf
, "mod/");

121 i‡(
vÆ
 & 
SYMBOL_NO
)

122 
	`°rˇt
(
buf
, "no/");

123 i‡(
vÆ
 & 
SYMBOL_CONST
)

124 
	`°rˇt
(
buf
, "const/");

125 i‡(
vÆ
 & 
SYMBOL_CHECK
)

126 
	`°rˇt
(
buf
, "check/");

127 i‡(
vÆ
 & 
SYMBOL_CHOICE
)

128 
	`°rˇt
(
buf
, "choice/");

129 i‡(
vÆ
 & 
SYMBOL_CHOICEVAL
)

130 
	`°rˇt
(
buf
, "choiceval/");

131 i‡(
vÆ
 & 
SYMBOL_PRINTED
)

132 
	`°rˇt
(
buf
, "printed/");

133 i‡(
vÆ
 & 
SYMBOL_VALID
)

134 
	`°rˇt
(
buf
, "valid/");

135 i‡(
vÆ
 & 
SYMBOL_OPTIONAL
)

136 
	`°rˇt
(
buf
, "optional/");

137 i‡(
vÆ
 & 
SYMBOL_WRITE
)

138 
	`°rˇt
(
buf
, "write/");

139 i‡(
vÆ
 & 
SYMBOL_CHANGED
)

140 
	`°rˇt
(
buf
, "changed/");

141 i‡(
vÆ
 & 
SYMBOL_NEW
)

142 
	`°rˇt
(
buf
, "new/");

143 i‡(
vÆ
 & 
SYMBOL_AUTO
)

144 
	`°rˇt
(
buf
, "auto/");

146 
buf
[
	`°æí
(buf) - 1] = '\0';

147 #ifde‡
DEBUG


148 
	`¥ötf
("%s", 
buf
);

151  
buf
;

152 
	}
}

154 c⁄° *
	$dbg_¥öt_±y≥
(
vÆ
)

156 
buf
[256];

158 
	`bzîo
(
buf
, 256);

160 i‡(
vÆ
 =
P_UNKNOWN
)

161 
	`°r˝y
(
buf
, "unknown");

162 i‡(
vÆ
 =
P_PROMPT
)

163 
	`°r˝y
(
buf
, "prompt");

164 i‡(
vÆ
 =
P_COMMENT
)

165 
	`°r˝y
(
buf
, "comment");

166 i‡(
vÆ
 =
P_MENU
)

167 
	`°r˝y
(
buf
, "menu");

168 i‡(
vÆ
 =
P_DEFAULT
)

169 
	`°r˝y
(
buf
, "default");

170 i‡(
vÆ
 =
P_CHOICE
)

171 
	`°r˝y
(
buf
, "choice");

173 #ifde‡
DEBUG


174 
	`¥ötf
("%s", 
buf
);

177  
buf
;

178 
	}
}

184 
	$öô_maö_wödow
(c⁄° 
gch¨
 * 
gœde_fûe
)

186 
GœdeXML
 *
xml
;

187 
GtkWidgë
 *
widgë
;

188 
GtkTextBuf„r
 *
txtbuf
;

189 
GdkPixm≠
 *
pixm≠
;

190 
GdkBôm≠
 *
mask
;

191 
GtkStyÀ
 *
°yÀ
;

193 
xml
 = 
	`gœde_xml_√w
(
gœde_fûe
, "wödow1", 
NULL
);

194 i‡(!
xml
)

195 
	`g_îr‹
("GUIÜoading failed !\n");

196 
	`gœde_xml_sig«l_autoc⁄√˘
(
xml
);

198 
maö_wnd
 = 
	`gœde_xml_gë_widgë
(
xml
, "window1");

199 
h∑√d
 = 
	`gœde_xml_gë_widgë
(
xml
, "hpaned1");

200 
v∑√d
 = 
	`gœde_xml_gë_widgë
(
xml
, "vpaned1");

201 
åì1_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "treeview1");

202 
åì2_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "treeview2");

203 
ãxt_w
 = 
	`gœde_xml_gë_widgë
(
xml
, "textview3");

205 
back_bä
 = 
	`gœde_xml_gë_widgë
(
xml
, "button1");

206 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

208 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_name1");

209 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

210 
show_«me
);

212 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_range1");

213 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

214 
show_ønge
);

216 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "show_data1");

217 
	`gtk_check_míu_ôem_£t_a˘ive
((
GtkCheckMíuIãm
 *Ë
widgë
,

218 
show_vÆue
);

220 
°yÀ
 = 
	`gtk_widgë_gë_°yÀ
(
maö_wnd
);

221 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "toolbar1");

223 
pixm≠
 = 
	`gdk_pixm≠_¸óã_‰om_xpm_d
(
maö_wnd
->
wödow
, &
mask
,

224 &
°yÀ
->
bg
[
GTK_STATE_NORMAL
],

225 (
gch¨
 **Ë
xpm_sögÀ_võw
);

226 
	`gtk_image_£t_‰om_pixm≠
(
GTK_IMAGE


227 (((
GtkToﬁb¨Chûd


228 *Ë(
	`g_li°_¡h
(
	`GTK_TOOLBAR
(
widgë
)->

229 
chûdªn
,

230 5)->
d©a
))->
ic⁄
),

231 
pixm≠
, 
mask
);

232 
pixm≠
 =

233 
	`gdk_pixm≠_¸óã_‰om_xpm_d
(
maö_wnd
->
wödow
, &
mask
,

234 &
°yÀ
->
bg
[
GTK_STATE_NORMAL
],

235 (
gch¨
 **Ë
xpm_•lô_võw
);

236 
	`gtk_image_£t_‰om_pixm≠
(
GTK_IMAGE


237 (((
GtkToﬁb¨Chûd


238 *Ë(
	`g_li°_¡h
(
	`GTK_TOOLBAR
(
widgë
)->

239 
chûdªn
,

240 6)->
d©a
))->
ic⁄
),

241 
pixm≠
, 
mask
);

242 
pixm≠
 =

243 
	`gdk_pixm≠_¸óã_‰om_xpm_d
(
maö_wnd
->
wödow
, &
mask
,

244 &
°yÀ
->
bg
[
GTK_STATE_NORMAL
],

245 (
gch¨
 **Ë
xpm_åì_võw
);

246 
	`gtk_image_£t_‰om_pixm≠
(
GTK_IMAGE


247 (((
GtkToﬁb¨Chûd


248 *Ë(
	`g_li°_¡h
(
	`GTK_TOOLBAR
(
widgë
)->

249 
chûdªn
,

250 7)->
d©a
))->
ic⁄
),

251 
pixm≠
, 
mask
);

253 
võw_mode
) {

254 
SINGLE_VIEW
:

255 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "button4");

256 
	`gtk_buâ⁄_˛icked
(
	`GTK_BUTTON
(
widgë
));

258 
SPLIT_VIEW
:

259 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "button5");

260 
	`gtk_buâ⁄_˛icked
(
	`GTK_BUTTON
(
widgë
));

262 
FULL_VIEW
:

263 
widgë
 = 
	`gœde_xml_gë_widgë
(
xml
, "button6");

264 
	`gtk_buâ⁄_˛icked
(
	`GTK_BUTTON
(
widgë
));

268 
txtbuf
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

269 
èg1
 = 
	`gtk_ãxt_buf„r_¸óã_èg
(
txtbuf
, "mytag1",

271 "weight", 
PANGO_WEIGHT_BOLD
,

272 
NULL
);

273 
èg2
 = 
	`gtk_ãxt_buf„r_¸óã_èg
(
txtbuf
, "mytag2",

275 
NULL
);

276 
	}
}

278 
	$öô_åì_modñ
()

280 
göt
 
i
;

282 
åì
 = 
åì2
 = 
	`gtk_åì_°‹e_√w
(
COL_NUMBER
,

283 
G_TYPE_STRING
, G_TYPE_STRING,

284 
G_TYPE_STRING
, G_TYPE_STRING,

285 
G_TYPE_STRING
, G_TYPE_STRING,

286 
G_TYPE_POINTER
, 
GDK_TYPE_COLOR
,

287 
G_TYPE_BOOLEAN
, 
GDK_TYPE_PIXBUF
,

288 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

289 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

290 
G_TYPE_BOOLEAN
);

291 
modñ2
 = 
	`GTK_TREE_MODEL
(
åì2
);

293 
∑ª¡s
[0] = 
NULL
, 
i
 = 1; i < 256; i++)

294 
∑ª¡s
[
i
] = (
GtkTªeIãr
 *Ë
	`g_mÆloc
((GtkTreeIter));

296 
åì1
 = 
	`gtk_åì_°‹e_√w
(
COL_NUMBER
,

297 
G_TYPE_STRING
, G_TYPE_STRING,

298 
G_TYPE_STRING
, G_TYPE_STRING,

299 
G_TYPE_STRING
, G_TYPE_STRING,

300 
G_TYPE_POINTER
, 
GDK_TYPE_COLOR
,

301 
G_TYPE_BOOLEAN
, 
GDK_TYPE_PIXBUF
,

302 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

303 
G_TYPE_BOOLEAN
, G_TYPE_BOOLEAN,

304 
G_TYPE_BOOLEAN
);

305 
modñ1
 = 
	`GTK_TREE_MODEL
(
åì1
);

306 
	}
}

308 
	$öô_À·_åì
()

310 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
åì1_w
);

311 
GtkCñlRídîî
 *
ªndîî
;

312 
GtkTªeSñe˘i⁄
 *
£l
;

313 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

315 
	`gtk_åì_võw_£t_modñ
(
võw
, 
modñ1
);

316 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
võw
, 
TRUE
);

317 
	`gtk_åì_võw_£t_ruÀs_höt
(
võw
, 
FALSE
);

319 
cﬁumn
 = 
	`gtk_åì_võw_cﬁumn_√w
();

320 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
võw
, 
cﬁumn
);

321 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁumn
, "Options");

323 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_toggÀ_√w
();

324 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

325 
ªndîî
, 
FALSE
);

326 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

327 
ªndîî
,

328 "a˘ive", 
COL_BTNACT
,

329 "öc⁄si°ít", 
COL_BTNINC
,

330 "visibÀ", 
COL_BTNVIS
,

331 "ødio", 
COL_BTNRAD
, 
NULL
);

332 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

333 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

334 
ªndîî
, 
FALSE
);

335 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

336 
ªndîî
,

337 "ãxt", 
COL_OPTION
,

339 
COL_COLOR
, 
NULL
);

341 
£l
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
võw
);

342 
	`gtk_åì_£À˘i⁄_£t_mode
(
£l
, 
GTK_SELECTION_SINGLE
);

343 
	`gtk_widgë_ªÆize
(
åì1_w
);

344 
	}
}

346 
ªndîî_edôed
(
GtkCñlRídîîText
 * 
˚Œ
,

347 c⁄° 
gch¨
 * 
∑th_°rög
,

348 c⁄° 
gch¨
 * 
√w_ãxt
, 
gpoöãr
 
u£r_d©a
);

349 
ªndîî_toggÀd
(
GtkCñlRídîîToggÀ
 * 
˚ŒªndîîtoggÀ
,

350 
gch¨
 * 
¨g1
, 
gpoöãr
 
u£r_d©a
);

352 
	$öô_right_åì
()

354 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
åì2_w
);

355 
GtkCñlRídîî
 *
ªndîî
;

356 
GtkTªeSñe˘i⁄
 *
£l
;

357 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

358 
göt
 
i
;

360 
	`gtk_åì_võw_£t_modñ
(
võw
, 
modñ2
);

361 
	`gtk_åì_võw_£t_hódîs_visibÀ
(
võw
, 
TRUE
);

362 
	`gtk_åì_võw_£t_ruÀs_höt
(
võw
, 
FALSE
);

364 
cﬁumn
 = 
	`gtk_åì_võw_cﬁumn_√w
();

365 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
võw
, 
cﬁumn
);

366 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁumn
, "Options");

368 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_pixbuf_√w
();

369 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

370 
ªndîî
, 
FALSE
);

371 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

372 
ªndîî
,

373 "pixbuf", 
COL_PIXBUF
,

374 "visibÀ", 
COL_PIXVIS
, 
NULL
);

375 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_toggÀ_√w
();

376 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

377 
ªndîî
, 
FALSE
);

378 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

379 
ªndîî
,

380 "a˘ive", 
COL_BTNACT
,

381 "öc⁄si°ít", 
COL_BTNINC
,

382 "visibÀ", 
COL_BTNVIS
,

383 "ødio", 
COL_BTNRAD
, 
NULL
);

386 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

387 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

388 
ªndîî
, 
FALSE
);

389 
	`gtk_åì_võw_cﬁumn_£t_©åibuãs
(
	`GTK_TREE_VIEW_COLUMN
(
cﬁumn
),

390 
ªndîî
,

391 "ãxt", 
COL_OPTION
,

393 
COL_COLOR
, 
NULL
);

395 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

396 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

397 "Name", 
ªndîî
,

398 "ãxt", 
COL_NAME
,

400 
COL_COLOR
, 
NULL
);

401 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

402 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

403 "N", 
ªndîî
,

404 "ãxt", 
COL_NO
,

406 
COL_COLOR
, 
NULL
);

407 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

408 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

409 "M", 
ªndîî
,

410 "ãxt", 
COL_MOD
,

412 
COL_COLOR
, 
NULL
);

413 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

414 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

415 "Y", 
ªndîî
,

416 "ãxt", 
COL_YES
,

418 
COL_COLOR
, 
NULL
);

419 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

420 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
(
võw
, -1,

421 "VÆue", 
ªndîî
,

422 "ãxt", 
COL_VALUE
,

424 
COL_EDIT
,

426 
COL_COLOR
, 
NULL
);

427 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ªndîî
), "edited",

428 
	`G_CALLBACK
(
ªndîî_edôed
), 
NULL
);

430 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_NAME
);

431 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_«me
);

432 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_NO
);

433 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

434 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_MOD
);

435 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

436 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_YES
);

437 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_ønge
);

438 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
COL_VALUE
);

439 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁumn
, 
show_vÆue
);

441 i‡(
ªsizóbÀ
) {

442 
i
 = 0; i < 
COL_VALUE
; i++) {

443 
cﬁumn
 = 
	`gtk_åì_võw_gë_cﬁumn
(
võw
, 
i
);

444 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
(
cﬁumn
, 
TRUE
);

448 
£l
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
võw
);

449 
	`gtk_åì_£À˘i⁄_£t_mode
(
£l
, 
GTK_SELECTION_SINGLE
);

450 
	}
}

456 
	$ãxt_ö£π_hñp
(
míu
 *menu)

458 
GtkTextBuf„r
 *
buf„r
;

459 
GtkTextIãr
 
°¨t
, 
íd
;

460 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

461 
gch¨
 *
«me
;

462 c⁄° *
hñp
 = 
nohñp_ãxt
;

464 i‡(!
míu
->
sym
)

465 
hñp
 = "";

466 i‡(
míu
->
sym
->
hñp
)

467 
hñp
 = 
míu
->
sym
->help;

469 i‡(
míu
->
sym
 && míu->sym->
«me
)

470 
«me
 = 
	`g_°rdup_¥ötf
(
míu
->
sym
->name);

472 
«me
 = 
	`g_°rdup
("");

474 
buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

475 
	`gtk_ãxt_buf„r_gë_bounds
(
buf„r
, &
°¨t
, &
íd
);

476 
	`gtk_ãxt_buf„r_dñëe
(
buf„r
, &
°¨t
, &
íd
);

477 
	`gtk_ãxt_võw_£t_À·_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_w
), 15);

479 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

480 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
¥om±
, -1, 
èg1
,

481 
NULL
);

482 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
(
buf„r
, " ", 1);

483 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

484 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
«me
, -1, 
èg1
,

485 
NULL
);

486 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
(
buf„r
, "\n\n", 2);

487 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

488 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
hñp
, -1, 
èg2
,

489 
NULL
);

490 
	}
}

493 
	$ãxt_ö£π_msg
(c⁄° *
tôÀ
, c⁄° *
mesßge
)

495 
GtkTextBuf„r
 *
buf„r
;

496 
GtkTextIãr
 
°¨t
, 
íd
;

497 c⁄° *
msg
 = 
mesßge
;

499 
buf„r
 = 
	`gtk_ãxt_võw_gë_buf„r
(
	`GTK_TEXT_VIEW
(
ãxt_w
));

500 
	`gtk_ãxt_buf„r_gë_bounds
(
buf„r
, &
°¨t
, &
íd
);

501 
	`gtk_ãxt_buf„r_dñëe
(
buf„r
, &
°¨t
, &
íd
);

502 
	`gtk_ãxt_võw_£t_À·_m¨gö
(
	`GTK_TEXT_VIEW
(
ãxt_w
), 15);

504 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

505 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
tôÀ
, -1, 
èg1
,

506 
NULL
);

507 
	`gtk_ãxt_buf„r_ö£π_©_curs‹
(
buf„r
, "\n\n", 2);

508 
	`gtk_ãxt_buf„r_gë_íd_ôî
(
buf„r
, &
íd
);

509 
	`gtk_ãxt_buf„r_ö£π_wôh_ègs
(
buf„r
, &
íd
, 
msg
, -1, 
èg2
,

510 
NULL
);

511 
	}
}

516 
⁄_ßve1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
);

517 
gboﬁón
 
	$⁄_wödow1_dñëe_evít
(
GtkWidgë
 * 
widgë
, 
GdkEvít
 * 
evít
,

518 
gpoöãr
 
u£r_d©a
)

520 
GtkWidgë
 *
dülog
, *
œbñ
;

521 
göt
 
ªsu…
;

523 i‡(
c⁄fig_ch™ged
 =
FALSE
)

524  
FALSE
;

526 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Warning !",

527 
	`GTK_WINDOW
(
maö_wnd
),

528 (
GtkDülogFœgs
)

529 (
GTK_DIALOG_MODAL
 |

530 
GTK_DIALOG_DESTROY_WITH_PARENT
),

531 
GTK_STOCK_OK
,

532 
GTK_RESPONSE_YES
,

533 
GTK_STOCK_NO
,

534 
GTK_RESPONSE_NO
,

535 
GTK_STOCK_CANCEL
,

536 
GTK_RESPONSE_CANCEL
, 
NULL
);

537 
	`gtk_dülog_£t_deÁu…_ª•⁄£
(
	`GTK_DIALOG
(
dülog
),

538 
GTK_RESPONSE_CANCEL
);

540 
œbñ
 = 
	`gtk_œbñ_√w
("\nSave configuration ?\n");

541 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
	`GTK_DIALOG
(
dülog
)->
vbox
), 
œbñ
);

542 
	`gtk_widgë_show
(
œbñ
);

544 
ªsu…
 = 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

545 
ªsu…
) {

546 
GTK_RESPONSE_YES
:

547 
	`⁄_ßve1_a˘iv©e
(
NULL
, NULL);

548  
FALSE
;

549 
GTK_RESPONSE_NO
:

550  
FALSE
;

551 
GTK_RESPONSE_CANCEL
:

552 
GTK_RESPONSE_DELETE_EVENT
:

554 
	`gtk_widgë_de°roy
(
dülog
);

555  
TRUE
;

558  
FALSE
;

559 
	}
}

562 
	$⁄_wödow1_de°roy
(
GtkObje˘
 * 
obje˘
, 
gpoöãr
 
u£r_d©a
)

564 
	`gtk_maö_quô
();

565 
	}
}

569 
	$⁄_wödow1_size_ªque°
(
GtkWidgë
 * 
widgë
,

570 
GtkRequisôi⁄
 * 
ªquisôi⁄
, 
gpoöãr
 
u£r_d©a
)

572 
göt
 
ﬁd_h
;

573 
göt
 
w
, 
h
;

575 i‡(
widgë
->
wödow
 =
NULL
)

576 
	`gtk_wödow_gë_deÁu…_size
(
	`GTK_WINDOW
(
maö_wnd
), &
w
, &
h
);

578 
	`gdk_wödow_gë_size
(
widgë
->
wödow
, &
w
, &
h
);

580 i‡(
h
 =
ﬁd_h
)

582 
ﬁd_h
 = 
h
;

584 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
v∑√d
), 2 * 
h
 / 3);

585 
	}
}

592 
	$lﬂd_fûíame
(
GtkFûeSñe˘i⁄
 * 
fûe_£À˘‹
, 
gpoöãr
 
u£r_d©a
)

594 c⁄° 
gch¨
 *
‚
;

596 
‚
 = 
	`gtk_fûe_£À˘i⁄_gë_fûíame
(
GTK_FILE_SELECTION


597 (
u£r_d©a
));

599 i‡(
	`c⁄f_ªad
(
‚
))

600 
	`ãxt_ö£π_msg
("Error", "UnableÅoÜoad configuration !");

602 
	`di•œy_åì
(&
roŸmíu
);

603 
	}
}

605 
	$⁄_lﬂd1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

607 
GtkWidgë
 *
fs
;

609 
fs
 = 
	`gtk_fûe_£À˘i⁄_√w
("Load file...");

610 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

612 
	`G_CALLBACK
(
lﬂd_fûíame
), (
gpoöãr
Ë
fs
);

613 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


614 (
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

615 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

616 (
gpoöãr
Ë
fs
);

617 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


618 (
	`GTK_FILE_SELECTION
(
fs
)->
ˇn˚l_buâ⁄
),

619 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

620 (
gpoöãr
Ë
fs
);

621 
	`gtk_widgë_show
(
fs
);

622 
	}
}

625 
	$⁄_ßve1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

627 i‡(
	`c⁄f_wrôe
(
NULL
))

628 
	`ãxt_ö£π_msg
("Error", "UnableÅo save configuration !");

630 
c⁄fig_ch™ged
 = 
FALSE
;

631 
	}
}

635 
	$°‹e_fûíame
(
GtkFûeSñe˘i⁄
 * 
fûe_£À˘‹
, 
gpoöãr
 
u£r_d©a
)

637 c⁄° 
gch¨
 *
‚
;

639 
‚
 = 
	`gtk_fûe_£À˘i⁄_gë_fûíame
(
GTK_FILE_SELECTION


640 (
u£r_d©a
));

642 i‡(
	`c⁄f_wrôe
(
‚
))

643 
	`ãxt_ö£π_msg
("Error", "UnableÅo save configuration !");

645 
	`gtk_widgë_de°roy
(
	`GTK_WIDGET
(
u£r_d©a
));

646 
	}
}

648 
	$⁄_ßve_as1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

650 
GtkWidgë
 *
fs
;

652 
fs
 = 
	`gtk_fûe_£À˘i⁄_√w
("Save fileás...");

653 
	`g_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

655 
	`G_CALLBACK
(
°‹e_fûíame
), (
gpoöãr
Ë
fs
);

656 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


657 (
	`GTK_FILE_SELECTION
(
fs
)->
ok_buâ⁄
),

658 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

659 (
gpoöãr
Ë
fs
);

660 
	`g_sig«l_c⁄√˘_sw≠≥d
(
GTK_OBJECT


661 (
	`GTK_FILE_SELECTION
(
fs
)->
ˇn˚l_buâ⁄
),

662 "˛icked", 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

663 (
gpoöãr
Ë
fs
);

664 
	`gtk_widgë_show
(
fs
);

665 
	}
}

668 
	$⁄_quô1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

670 i‡(!
	`⁄_wödow1_dñëe_evít
(
NULL
, NULL, NULL))

671 
	`gtk_widgë_de°roy
(
	`GTK_WIDGET
(
maö_wnd
));

672 
	}
}

675 
	$⁄_show_«me1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

677 
GtkTªeVõwCﬁumn
 *
cﬁ
;

679 
show_«me
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

680 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_NAME
);

681 i‡(
cﬁ
)

682 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_«me
);

683 
	}
}

686 
	$⁄_show_ønge1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

688 
GtkTªeVõwCﬁumn
 *
cﬁ
;

690 
show_ønge
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

691 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_NO
);

692 i‡(
cﬁ
)

693 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

694 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_MOD
);

695 i‡(
cﬁ
)

696 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

697 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_YES
);

698 i‡(
cﬁ
)

699 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_ønge
);

701 
	}
}

704 
	$⁄_show_d©a1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

706 
GtkTªeVõwCﬁumn
 *
cﬁ
;

708 
show_vÆue
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

709 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
COL_VALUE
);

710 i‡(
cﬁ
)

711 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
show_vÆue
);

712 
	}
}

716 
	$⁄_show_Æl_›ti⁄s1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

718 
show_Æl
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

720 
	`gtk_åì_°‹e_˛ór
(
åì2
);

721 
	`di•œy_åì
(&
roŸmíu
);

722 
	}
}

726 
	$⁄_show_debug_öfo1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

728 
show_debug
 = 
	`GTK_CHECK_MENU_ITEM
(
míuôem
)->
a˘ive
;

729 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

730 
	}
}

733 
	$⁄_öåodu˘i⁄1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

735 
GtkWidgë
 *
dülog
;

736 c⁄° 
gch¨
 *
öåo_ãxt
 =

754 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

755 
GTK_DIALOG_DESTROY_WITH_PARENT
,

756 
GTK_MESSAGE_INFO
,

757 
GTK_BUTTONS_CLOSE
, 
öåo_ãxt
);

758 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

759 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

760 
	`GTK_OBJECT
(
dülog
));

761 
	`gtk_widgë_show_Æl
(
dülog
);

762 
	}
}

765 
	$⁄_about1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

767 
GtkWidgë
 *
dülog
;

768 c⁄° 
gch¨
 *
about_ãxt
 =

772 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

773 
GTK_DIALOG_DESTROY_WITH_PARENT
,

774 
GTK_MESSAGE_INFO
,

775 
GTK_BUTTONS_CLOSE
, 
about_ãxt
);

776 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

777 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

778 
	`GTK_OBJECT
(
dülog
));

779 
	`gtk_widgë_show_Æl
(
dülog
);

780 
	}
}

783 
	$⁄_li˚n£1_a˘iv©e
(
GtkMíuIãm
 * 
míuôem
, 
gpoöãr
 
u£r_d©a
)

785 
GtkWidgë
 *
dülog
;

786 c⁄° 
gch¨
 *
li˚n£_ãxt
 =

791 
dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
maö_wnd
),

792 
GTK_DIALOG_DESTROY_WITH_PARENT
,

793 
GTK_MESSAGE_INFO
,

794 
GTK_BUTTONS_CLOSE
, 
li˚n£_ãxt
);

795 
	`g_sig«l_c⁄√˘_sw≠≥d
(
	`GTK_OBJECT
(
dülog
), "response",

796 
	`G_CALLBACK
(
gtk_widgë_de°roy
),

797 
	`GTK_OBJECT
(
dülog
));

798 
	`gtk_widgë_show_Æl
(
dülog
);

799 
	}
}

802 
	$⁄_back_¥es£d
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

804 
¥›_ty≥
 
±y≥
;

806 
cuºít
 = cuºít->
∑ª¡
;

807 
±y≥
 = 
cuºít
->
¥om±
 ? cuºít->¥om±->
ty≥
 : 
P_UNKNOWN
;

808 i‡(
±y≥
 !
P_MENU
)

809 
cuºít
 = cuºít->
∑ª¡
;

810 
	`di•œy_åì_∑π
();

812 i‡(
cuºít
 =&
roŸmíu
)

813 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

814 
	}
}

817 
	$⁄_lﬂd_¥es£d
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

819 
	`⁄_lﬂd1_a˘iv©e
(
NULL
, 
u£r_d©a
);

820 
	}
}

823 
	$⁄_ßve_¥es£d
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

825 
	`⁄_ßve1_a˘iv©e
(
NULL
, 
u£r_d©a
);

826 
	}
}

829 
	$⁄_sögÀ_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

831 
võw_mode
 = 
SINGLE_VIEW
;

832 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
h∑√d
), 0);

833 
	`gtk_widgë_hide
(
åì1_w
);

834 
cuºít
 = &
roŸmíu
;

835 
	`di•œy_åì_∑π
();

836 
	}
}

839 
	$⁄_•lô_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

841 
göt
 
w
, 
h
;

842 
võw_mode
 = 
SPLIT_VIEW
;

843 
	`gtk_widgë_show
(
åì1_w
);

844 
	`gtk_wödow_gë_deÁu…_size
(
	`GTK_WINDOW
(
maö_wnd
), &
w
, &
h
);

845 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
h∑√d
), 
w
 / 2);

846 i‡(
åì2
)

847 
	`gtk_åì_°‹e_˛ór
(
åì2
);

848 
	`di•œy_li°
();

849 
	}
}

852 
	$⁄_fuŒ_˛icked
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

854 
võw_mode
 = 
FULL_VIEW
;

855 
	`gtk_∑√d_£t_posôi⁄
(
	`GTK_PANED
(
h∑√d
), 0);

856 
	`gtk_widgë_hide
(
åì1_w
);

857 i‡(
åì2
)

858 
	`gtk_åì_°‹e_˛ór
(
åì2
);

859 
	`di•œy_åì
(&
roŸmíu
);

860 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
FALSE
);

861 
	}
}

864 
	$⁄_cﬁœp£_¥es£d
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

866 
	`gtk_åì_võw_cﬁœp£_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

867 
	}
}

870 
	$⁄_ex∑nd_¥es£d
(
GtkBuâ⁄
 * 
buâ⁄
, 
gpoöãr
 
u£r_d©a
)

872 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

873 
	}
}

879 
	$ªndîî_edôed
(
GtkCñlRídîîText
 * 
˚Œ
,

880 c⁄° 
gch¨
 * 
∑th_°rög
,

881 c⁄° 
gch¨
 * 
√w_ãxt
, 
gpoöãr
 
u£r_d©a
)

883 
GtkTªeP©h
 *
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
∑th_°rög
);

884 
GtkTªeIãr
 
ôî
;

885 c⁄° *
ﬁd_def
, *
√w_def
;

886 
míu
 *menu;

887 
symbﬁ
 *
sym
;

889 i‡(!
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
))

892 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

893 
sym
 = 
míu
->sym;

895 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_VALUE
, &
ﬁd_def
, -1);

896 
√w_def
 = 
√w_ãxt
;

898 
	`sym_£t_°rög_vÆue
(
sym
, 
√w_def
);

900 
c⁄fig_ch™ged
 = 
TRUE
;

901 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

903 
	`gtk_åì_∑th_‰ì
(
∑th
);

904 
	}
}

907 
	$ch™ge_sym_vÆue
(
míu
 *míu, 
göt
 
cﬁ
)

909 
symbﬁ
 *
sym
 = 
míu
->sym;

910 
åi°©e
 
ﬁdvÆ
, 
√wvÆ
;

912 i‡(!
sym
)

915 i‡(
cﬁ
 =
COL_NO
)

916 
√wvÆ
 = 
no
;

917 i‡(
cﬁ
 =
COL_MOD
)

918 
√wvÆ
 = 
mod
;

919 i‡(
cﬁ
 =
COL_YES
)

920 
√wvÆ
 = 
yes
;

924 
	`sym_gë_ty≥
(
sym
)) {

925 
S_BOOLEAN
:

926 
S_TRISTATE
:

927 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

928 i‡(!
	`sym_åi°©e_wôhö_ønge
(
sym
, 
√wvÆ
))

929 
√wvÆ
 = 
yes
;

930 
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
);

931 
c⁄fig_ch™ged
 = 
TRUE
;

932 i‡(
võw_mode
 =
FULL_VIEW
)

933 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

934 i‡(
võw_mode
 =
SPLIT_VIEW
) {

935 
	`upd©e_åì
(
brow£d
, 
NULL
);

936 
	`di•œy_li°
();

938 i‡(
võw_mode
 =
SINGLE_VIEW
)

939 
	`di•œy_åì_∑π
();

941 
S_INT
:

942 
S_HEX
:

943 
S_STRING
:

947 
	}
}

949 
	$toggÀ_sym_vÆue
(
míu
 *menu)

951 c⁄° 
åi°©e
 
√xt_vÆ
[3] = { 
no
, 
mod
, 
yes
 };

952 
åi°©e
 
√wvÆ
;

954 i‡(!
míu
->
sym
)

957 
√wvÆ
 = 
√xt_vÆ
[(
	`sym_gë_åi°©e_vÆue
(
míu
->
sym
) + 1) % 3];

958 i‡(!
	`sym_åi°©e_wôhö_ønge
(
míu
->
sym
, 
√wvÆ
))

959 
√wvÆ
 = 
yes
;

960 
	`sym_£t_åi°©e_vÆue
(
míu
->
sym
, 
√wvÆ
);

961 i‡(
võw_mode
 =
FULL_VIEW
)

962 
	`upd©e_åì
(&
roŸmíu
, 
NULL
);

963 i‡(
võw_mode
 =
SPLIT_VIEW
) {

964 
	`upd©e_åì
(
brow£d
, 
NULL
);

965 
	`di•œy_li°
();

967 i‡(
võw_mode
 =
SINGLE_VIEW
)

968 
	`di•œy_åì_∑π
();

969 
	}
}

971 
	$ªndîî_toggÀd
(
GtkCñlRídîîToggÀ
 * 
˚Œ
,

972 
gch¨
 * 
∑th_°rög
, 
gpoöãr
 
u£r_d©a
)

974 
GtkTªeP©h
 *
∑th
, *
£l_∑th
 = 
NULL
;

975 
GtkTªeIãr
 
ôî
, 
£l_ôî
;

976 
GtkTªeSñe˘i⁄
 *
£l
;

977 
míu
 *menu;

979 
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
∑th_°rög
);

980 i‡(!
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
))

983 
£l
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì2_w
));

984 i‡(
	`gtk_åì_£À˘i⁄_gë_£À˘ed
(
£l
, 
NULL
, &
£l_ôî
))

985 
£l_∑th
 = 
	`gtk_åì_modñ_gë_∑th
(
modñ2
, &
£l_ôî
);

986 i‡(!
£l_∑th
)

987 
out1
;

988 i‡(
	`gtk_åì_∑th_com∑ª
(
∑th
, 
£l_∑th
))

989 
out2
;

991 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

992 
	`toggÀ_sym_vÆue
(
míu
);

994 
out2
:

995 
	`gtk_åì_∑th_‰ì
(
£l_∑th
);

996 
out1
:

997 
	`gtk_åì_∑th_‰ì
(
∑th
);

998 
	}
}

1000 
göt
 
	$cﬁumn2ödex
(
GtkTªeVõwCﬁumn
 * 
cﬁumn
)

1002 
göt
 
i
;

1004 
i
 = 0; i < 
COL_NUMBER
; i++) {

1005 
GtkTªeVõwCﬁumn
 *
cﬁ
;

1007 
cﬁ
 = 
	`gtk_åì_võw_gë_cﬁumn
(
	`GTK_TREE_VIEW
(
åì2_w
), 
i
);

1008 i‡(
cﬁ
 =
cﬁumn
)

1009  
i
;

1013 
	}
}

1017 
gboﬁón


1018 
	$⁄_åìvõw2_buâ⁄_¥ess_evít
(
GtkWidgë
 * 
widgë
,

1019 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

1021 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

1022 
GtkTªeP©h
 *
∑th
;

1023 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

1024 
GtkTªeIãr
 
ôî
;

1025 
míu
 *menu;

1026 
göt
 
cﬁ
;

1028 #i‡
	`GTK_CHECK_VERSION
(2,1,4)

1029 
göt
 
tx
 = (götË
evít
->
x
;

1030 
göt
 
ty
 = (götË
evít
->
y
;

1031 
göt
 
cx
, 
cy
;

1033 
	`gtk_åì_võw_gë_∑th_©_pos
(
võw
, 
tx
, 
ty
, &
∑th
, &
cﬁumn
, &
cx
,

1034 &
cy
);

1036 
	`gtk_åì_võw_gë_curs‹
(
võw
, &
∑th
, &
cﬁumn
);

1038 i‡(
∑th
 =
NULL
)

1039  
FALSE
;

1041 
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
);

1042 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

1044 
cﬁ
 = 
	`cﬁumn2ödex
(
cﬁumn
);

1045 i‡(
evít
->
ty≥
 =
GDK_2BUTTON_PRESS
) {

1046 
¥›_ty≥
 
±y≥
;

1047 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

1049 i‡(
±y≥
 =
P_MENU
 && 
võw_mode
 !
FULL_VIEW
 && 
cﬁ
 =
COL_OPTION
) {

1051 
cuºít
 = 
míu
;

1052 
	`di•œy_åì_∑π
();

1053 
	`gtk_widgë_£t_£nsôive
(
back_bä
, 
TRUE
);

1054 } i‡((
cﬁ
 =
COL_OPTION
)) {

1055 
	`toggÀ_sym_vÆue
(
míu
);

1056 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

1059 i‡(
cﬁ
 =
COL_VALUE
) {

1060 
	`toggÀ_sym_vÆue
(
míu
);

1061 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

1062 } i‡(
cﬁ
 =
COL_NO
 || cﬁ =
COL_MOD


1063 || 
cﬁ
 =
COL_YES
) {

1064 
	`ch™ge_sym_vÆue
(
míu
, 
cﬁ
);

1065 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
TRUE
);

1069  
FALSE
;

1070 
	}
}

1073 
gboﬁón


1074 
	$⁄_åìvõw2_key_¥ess_evít
(
GtkWidgë
 * 
widgë
,

1075 
GdkEvítKey
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

1077 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

1078 
GtkTªeP©h
 *
∑th
;

1079 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

1080 
GtkTªeIãr
 
ôî
;

1081 
míu
 *menu;

1082 
göt
 
cﬁ
;

1084 
	`gtk_åì_võw_gë_curs‹
(
võw
, &
∑th
, &
cﬁumn
);

1085 i‡(
∑th
 =
NULL
)

1086  
FALSE
;

1088 i‡(
evít
->
keyvÆ
 =
GDK_•a˚
) {

1089 i‡(
	`gtk_åì_võw_row_ex∑nded
(
võw
, 
∑th
))

1090 
	`gtk_åì_võw_cﬁœp£_row
(
võw
, 
∑th
);

1092 
	`gtk_åì_võw_ex∑nd_row
(
võw
, 
∑th
, 
FALSE
);

1093  
TRUE
;

1095 i‡(
evít
->
keyvÆ
 =
GDK_KP_E¡î
) {

1097 i‡(
widgë
 =
åì1_w
)

1098  
FALSE
;

1100 
	`gtk_åì_modñ_gë_ôî
(
modñ2
, &
ôî
, 
∑th
);

1101 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

1103 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "n"))

1104 
cﬁ
 = 
COL_NO
;

1105 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "m"))

1106 
cﬁ
 = 
COL_MOD
;

1107 i‡(!
	`°rˇ£cmp
(
evít
->
°rög
, "y"))

1108 
cﬁ
 = 
COL_YES
;

1110 
cﬁ
 = -1;

1111 
	`ch™ge_sym_vÆue
(
míu
, 
cﬁ
);

1113  
FALSE
;

1114 
	}
}

1119 
	$⁄_åìvõw2_curs‹_ch™ged
(
GtkTªeVõw
 * 
åìvõw
, 
gpoöãr
 
u£r_d©a
)

1121 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

1122 
GtkTªeIãr
 
ôî
;

1123 
míu
 *menu;

1125 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
åìvõw
);

1126 i‡(
	`gtk_åì_£À˘i⁄_gë_£À˘ed
(
£À˘i⁄
, &
modñ2
, &
ôî
)) {

1127 
	`gtk_åì_modñ_gë
(
modñ2
, &
ôî
, 
COL_MENU
, &
míu
, -1);

1128 
	`ãxt_ö£π_hñp
(
míu
);

1130 
	}
}

1134 
gboﬁón


1135 
	$⁄_åìvõw1_buâ⁄_¥ess_evít
(
GtkWidgë
 * 
widgë
,

1136 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
u£r_d©a
)

1138 
GtkTªeVõw
 *
võw
 = 
	`GTK_TREE_VIEW
(
widgë
);

1139 
GtkTªeP©h
 *
∑th
;

1140 
GtkTªeVõwCﬁumn
 *
cﬁumn
;

1141 
GtkTªeIãr
 
ôî
;

1142 
míu
 *menu;

1144 
göt
 
tx
 = (götË
evít
->
x
;

1145 
göt
 
ty
 = (götË
evít
->
y
;

1146 
göt
 
cx
, 
cy
;

1148 
	`gtk_åì_võw_gë_∑th_©_pos
(
võw
, 
tx
, 
ty
, &
∑th
, &
cﬁumn
, &
cx
,

1149 &
cy
);

1150 i‡(
∑th
 =
NULL
)

1151  
FALSE
;

1153 
	`gtk_åì_modñ_gë_ôî
(
modñ1
, &
ôî
, 
∑th
);

1154 
	`gtk_åì_modñ_gë
(
modñ1
, &
ôî
, 
COL_MENU
, &
míu
, -1);

1156 i‡(
evít
->
ty≥
 =
GDK_2BUTTON_PRESS
) {

1157 
	`toggÀ_sym_vÆue
(
míu
);

1158 
cuºít
 = 
míu
;

1159 
	`di•œy_åì_∑π
();

1161 
brow£d
 = 
míu
;

1162 
	`di•œy_åì_∑π
();

1165 
	`gtk_widgë_ªÆize
(
åì2_w
);

1166 
	`gtk_åì_võw_£t_curs‹
(
võw
, 
∑th
, 
NULL
, 
FALSE
);

1167 
	`gtk_widgë_gøb_focus
(
	`GTK_TREE_VIEW
(
åì2_w
));

1169  
FALSE
;

1170 
	}
}

1177 
gch¨
 **
	$fûl_row
(
míu
 *menu)

1179 
gch¨
 *
row
[
COL_NUMBER
];

1180 
symbﬁ
 *
sym
 = 
míu
->sym;

1181 c⁄° *
def
;

1182 
°y≥
;

1183 
åi°©e
 
vÆ
;

1184 
¥›_ty≥
 
±y≥
;

1185 
i
;

1187 
i
 = 
COL_OPTION
; i <
COL_COLOR
; i++)

1188 
	`g_‰ì
(
row
[
i
]);

1189 
	`bzîo
(
row
, (row));

1191 
row
[
COL_OPTION
] =

1192 
	`g_°rdup_¥ötf
("%†%s", 
	`míu_gë_¥om±
(
míu
),

1193 
sym
 ? (sym->

1194 
Êags
 & 
SYMBOL_NEW
 ? "(NEW)" : "") :

1197 i‡(
show_Æl
 && !
	`míu_is_visibÀ
(
míu
))

1198 
row
[
COL_COLOR
] = 
	`g_°rdup
("DarkGray");

1200 
row
[
COL_COLOR
] = 
	`g_°rdup
("Black");

1202 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

1203 
±y≥
) {

1204 
P_MENU
:

1205 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_míu
;

1206 i‡(
võw_mode
 =
SINGLE_VIEW
)

1207 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1208 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1210 
P_COMMENT
:

1211 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_void
;

1212 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1213 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1216 
row
[
COL_PIXBUF
] = (
gch¨
 *Ë
xpm_void
;

1217 
row
[
COL_PIXVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1218 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1222 i‡(!
sym
)

1223  
row
;

1224 
row
[
COL_NAME
] = 
	`g_°rdup
(
sym
->
«me
);

1226 
	`sym_ˇlc_vÆue
(
sym
);

1227 
sym
->
Êags
 &~
SYMBOL_CHANGED
;

1229 i‡(
	`sym_is_choi˚
(
sym
)) {

1230 
míu
 *
chûd
;

1231 
symbﬁ
 *
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

1232 
míu
 *
def_míu
 = 
NULL
;

1234 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1236 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1237 i‡(
	`míu_is_visibÀ
(
chûd
)

1238 && 
chûd
->
sym
 =
def_sym
)

1239 
def_míu
 = 
chûd
;

1242 i‡(
def_míu
)

1243 
row
[
COL_VALUE
] =

1244 
	`g_°rdup
(
	`míu_gë_¥om±
(
def_míu
));

1246 if(
sym
->
Êags
 & 
SYMBOL_CHOICEVAL
)

1247 
row
[
COL_BTNRAD
] = 
	`GINT_TO_POINTER
(
TRUE
);

1249 
°y≥
 = 
	`sym_gë_ty≥
(
sym
);

1250 
°y≥
) {

1251 
S_BOOLEAN
:

1252 if(
	`GPOINTER_TO_INT
(
row
[
COL_PIXVIS
]Ë=
FALSE
)

1253 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
TRUE
);

1254 i‡(
	`sym_is_choi˚
(
sym
))

1256 
S_TRISTATE
:

1257 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

1258 
vÆ
) {

1259 
no
:

1260 
row
[
COL_NO
] = 
	`g_°rdup
("N");

1261 
row
[
COL_VALUE
] = 
	`g_°rdup
("N");

1262 
row
[
COL_BTNACT
] = 
	`GINT_TO_POINTER
(
FALSE
);

1263 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
FALSE
);

1265 
mod
:

1266 
row
[
COL_MOD
] = 
	`g_°rdup
("M");

1267 
row
[
COL_VALUE
] = 
	`g_°rdup
("M");

1268 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
TRUE
);

1270 
yes
:

1271 
row
[
COL_YES
] = 
	`g_°rdup
("Y");

1272 
row
[
COL_VALUE
] = 
	`g_°rdup
("Y");

1273 
row
[
COL_BTNACT
] = 
	`GINT_TO_POINTER
(
TRUE
);

1274 
row
[
COL_BTNINC
] = 
	`GINT_TO_POINTER
(
FALSE
);

1278 i‡(
vÆ
 !
no
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
,Ço))

1279 
row
[
COL_NO
] = 
	`g_°rdup
("_");

1280 i‡(
vÆ
 !
mod
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, mod))

1281 
row
[
COL_MOD
] = 
	`g_°rdup
("_");

1282 i‡(
vÆ
 !
yes
 && 
	`sym_åi°©e_wôhö_ønge
(
sym
, yes))

1283 
row
[
COL_YES
] = 
	`g_°rdup
("_");

1285 
S_INT
:

1286 
S_HEX
:

1287 
S_STRING
:

1288 
def
 = 
	`sym_gë_°rög_vÆue
(
sym
);

1289 
row
[
COL_VALUE
] = 
	`g_°rdup
(
def
);

1290 
row
[
COL_EDIT
] = 
	`GINT_TO_POINTER
(
TRUE
);

1291 
row
[
COL_BTNVIS
] = 
	`GINT_TO_POINTER
(
FALSE
);

1295  
row
;

1296 
	}
}

1300 
	$£t_node
(
GtkTªeIãr
 * 
node
, 
míu
 *míu, 
gch¨
 ** 
row
)

1302 
GdkCﬁ‹
 
cﬁ‹
;

1303 
gboﬁón
 
suc˚ss
;

1304 
GdkPixbuf
 *
pix
;

1306 
pix
 = 
	`gdk_pixbuf_√w_‰om_xpm_d©a
((const **)

1307 
row
[
COL_PIXBUF
]);

1309 
	`gdk_cﬁ‹_∑r£
(
row
[
COL_COLOR
], &
cﬁ‹
);

1310 
	`gdk_cﬁ‹m≠_Æloc_cﬁ‹s
(
	`gdk_cﬁ‹m≠_gë_sy°em
(), &
cﬁ‹
, 1,

1311 
FALSE
, FALSE, &
suc˚ss
);

1313 
	`gtk_åì_°‹e_£t
(
åì
, 
node
,

1314 
COL_OPTION
, 
row
[COL_OPTION],

1315 
COL_NAME
, 
row
[COL_NAME],

1316 
COL_NO
, 
row
[COL_NO],

1317 
COL_MOD
, 
row
[COL_MOD],

1318 
COL_YES
, 
row
[COL_YES],

1319 
COL_VALUE
, 
row
[COL_VALUE],

1320 
COL_MENU
, (
gpoöãr
Ë
míu
,

1321 
COL_COLOR
, &
cﬁ‹
,

1322 
COL_EDIT
, 
	`GPOINTER_TO_INT
(
row
[COL_EDIT]),

1323 
COL_PIXBUF
, 
pix
,

1324 
COL_PIXVIS
, 
	`GPOINTER_TO_INT
(
row
[COL_PIXVIS]),

1325 
COL_BTNVIS
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNVIS]),

1326 
COL_BTNACT
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNACT]),

1327 
COL_BTNINC
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNINC]),

1328 
COL_BTNRAD
, 
	`GPOINTER_TO_INT
(
row
[COL_BTNRAD]),

1331 
	`g_obje˘_uƒef
(
pix
);

1332 
	}
}

1336 
	$∂a˚_node
(
míu
 *míu, **
row
)

1338 
GtkTªeIãr
 *
∑ª¡
 = 
∑ª¡s
[
ödít
 - 1];

1339 
GtkTªeIãr
 *
node
 = 
∑ª¡s
[
ödít
];

1341 
	`gtk_åì_°‹e_≠≥nd
(
åì
, 
node
, 
∑ª¡
);

1342 
	`£t_node
(
node
, 
míu
, 
row
);

1343 
	}
}

1347 
GtkTªeIãr
 
	gfound
;

1352 
GtkTªeIãr
 *
	$gtkåì_ôî_föd_node
(
GtkTªeIãr
 * 
∑ª¡
,

1353 
míu
 *
toföd
)

1355 
GtkTªeIãr
 
ôî
;

1356 
GtkTªeIãr
 *
chûd
 = &
ôî
;

1357 
gboﬁón
 
vÆid
;

1358 
GtkTªeIãr
 *
ªt
;

1360 
vÆid
 = 
	`gtk_åì_modñ_ôî_chûdªn
(
modñ2
, 
chûd
, 
∑ª¡
);

1361 
vÆid
) {

1362 
míu
 *menu;

1364 
	`gtk_åì_modñ_gë
(
modñ2
, 
chûd
, 6, &
míu
, -1);

1366 i‡(
míu
 =
toföd
) {

1367 
	`mem˝y
(&
found
, 
chûd
, (
GtkTªeIãr
));

1368  &
found
;

1371 
ªt
 = 
	`gtkåì_ôî_föd_node
(
chûd
, 
toföd
);

1372 i‡(
ªt
)

1373  
ªt
;

1375 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
, 
chûd
);

1378  
NULL
;

1379 
	}
}

1386 
	$upd©e_åì
(
míu
 *
§c
, 
GtkTªeIãr
 * 
d°
)

1388 
míu
 *
chûd1
;

1389 
GtkTªeIãr
 
ôî
, 
tmp
;

1390 
GtkTªeIãr
 *
chûd2
 = &
ôî
;

1391 
gboﬁón
 
vÆid
;

1392 
GtkTªeIãr
 *
siblög
;

1393 
symbﬁ
 *
sym
;

1394 
¥›îty
 *
¥›
;

1395 
míu
 *
míu1
, *
míu2
;

1396 
GtkTªeP©h
 *
∑th
 = 
NULL
;

1398 i‡(
§c
 =&
roŸmíu
)

1399 
ödít
 = 1;

1401 
vÆid
 = 
	`gtk_åì_modñ_ôî_chûdªn
(
modñ2
, 
chûd2
, 
d°
);

1402 
chûd1
 = 
§c
->
li°
; chûd1; chûd1 = chûd1->
√xt
) {

1404 
¥›
 = 
chûd1
->
¥om±
;

1405 
sym
 = 
chûd1
->sym;

1407 
ª∑r£
:

1408 
míu1
 = 
chûd1
;

1409 i‡(
vÆid
)

1410 
	`gtk_åì_modñ_gë
(
modñ2
, 
chûd2
, 
COL_MENU
,

1411 &
míu2
, -1);

1413 
míu2
 = 
NULL
;

1415 #ifde‡
DEBUG


1416 
	`¥ötf
("%*c%†| %s\n", 
ödít
, ' ',

1417 
míu1
 ? 
	`míu_gë_¥om±
(menu1) : "nil",

1418 
míu2
 ? 
	`míu_gë_¥om±
(menu2) : "nil");

1421 i‡(!
	`míu_is_visibÀ
(
chûd1
Ë&& !
show_Æl
) {

1422 i‡(
	`gtkåì_ôî_föd_node
(
d°
, 
míu1
Ë!
NULL
) {

1423 
	`mem˝y
(&
tmp
, 
chûd2
, (
GtkTªeIãr
));

1424 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
,

1425 
chûd2
);

1426 
	`gtk_åì_°‹e_ªmove
(
åì2
, &
tmp
);

1427 i‡(!
vÆid
)

1430 
ª∑r£
;

1435 i‡(
míu1
 !
míu2
) {

1436 i‡(
	`gtkåì_ôî_föd_node
(
d°
, 
míu1
Ë=
NULL
) {

1437 i‡(!
vÆid
 && !
míu2
)

1438 
siblög
 = 
NULL
;

1440 
siblög
 = 
chûd2
;

1441 
	`gtk_åì_°‹e_ö£π_bef‹e
(
åì2
,

1442 
chûd2
,

1443 
d°
, 
siblög
);

1444 
	`£t_node
(
chûd2
, 
míu1
, 
	`fûl_row
(menu1));

1445 i‡(
míu2
 =
NULL
)

1446 
vÆid
 = 
TRUE
;

1448 
	`mem˝y
(&
tmp
, 
chûd2
, (
GtkTªeIãr
));

1449 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
,

1450 
chûd2
);

1451 
	`gtk_åì_°‹e_ªmove
(
åì2
, &
tmp
);

1452 i‡(!
vÆid
)

1455 
ª∑r£
;

1457 } i‡(
sym
 && (sym->
Êags
 & 
SYMBOL_CHANGED
)) {

1458 
	`£t_node
(
chûd2
, 
míu1
, 
	`fûl_row
(menu1));

1461 
ödít
++;

1462 
	`upd©e_åì
(
chûd1
, 
chûd2
);

1463 
ödít
--;

1465 
vÆid
 = 
	`gtk_åì_modñ_ôî_√xt
(
modñ2
, 
chûd2
);

1467 
	}
}

1471 
	$di•œy_åì
(
míu
 *menu)

1473 
symbﬁ
 *
sym
;

1474 
¥›îty
 *
¥›
;

1475 
míu
 *
chûd
;

1476 
¥›_ty≥
 
±y≥
;

1478 i‡(
míu
 =&
roŸmíu
) {

1479 
ödít
 = 1;

1480 
cuºít
 = &
roŸmíu
;

1483 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1484 
¥›
 = 
chûd
->
¥om±
;

1485 
sym
 = 
chûd
->sym;

1486 
±y≥
 = 
¥›
 ?Ör›->
ty≥
 : 
P_UNKNOWN
;

1488 i‡(
sym
)

1489 
sym
->
Êags
 &~
SYMBOL_CHANGED
;

1491 i‡((
võw_mode
 =
SPLIT_VIEW
Ë&& !(
chûd
->
Êags
 & 
MENU_ROOT
) &&

1492 (
åì
 =
åì1
))

1495 i‡((
võw_mode
 =
SPLIT_VIEW
Ë&& (
chûd
->
Êags
 & 
MENU_ROOT
) &&

1496 (
åì
 =
åì2
))

1499 i‡(
	`míu_is_visibÀ
(
chûd
Ë|| 
show_Æl
)

1500 
	`∂a˚_node
(
chûd
, 
	`fûl_row
(child));

1501 #ifde‡
DEBUG


1502 
	`¥ötf
("%*c%s: ", 
ödít
, ' ', 
	`míu_gë_¥om±
(
chûd
));

1503 
	`¥ötf
("%s", 
chûd
->
Êags
 & 
MENU_ROOT
 ? "rootmenu | " : "");

1504 
	`dbg_¥öt_±y≥
(
±y≥
);

1505 
	`¥ötf
(" | ");

1506 i‡(
sym
) {

1507 
	`dbg_¥öt_°y≥
(
sym
->
ty≥
);

1508 
	`¥ötf
(" | ");

1509 
	`dbg_¥öt_Êags
(
sym
->
Êags
);

1510 
	`¥ötf
("\n");

1512 
	`¥ötf
("\n");

1514 i‡((
võw_mode
 !
FULL_VIEW
Ë&& (
±y≥
 =
P_MENU
)

1515 && (
åì
 =
åì2
))

1521 i‡((
võw_mode
 =
SINGLE_VIEW
Ë&& (
míu
->
Êags
 & 
MENU_ROOT
)

1522 || (
võw_mode
 =
FULL_VIEW
Ë|| (võw_modê=
SPLIT_VIEW
)) {

1523 
ödít
++;

1524 
	`di•œy_åì
(
chûd
);

1525 
ödít
--;

1528 
	}
}

1531 
	$di•œy_åì_∑π
()

1533 i‡(
åì2
)

1534 
	`gtk_åì_°‹e_˛ór
(
åì2
);

1535 if(
võw_mode
 =
SINGLE_VIEW
)

1536 
	`di•œy_åì
(
cuºít
);

1537 if(
võw_mode
 =
SPLIT_VIEW
)

1538 
	`di•œy_åì
(
brow£d
);

1539 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì2_w
));

1540 
	}
}

1543 
	$di•œy_li°
()

1545 i‡(
åì1
)

1546 
	`gtk_åì_°‹e_˛ór
(
åì1
);

1548 
åì
 = 
åì1
;

1549 
	`di•œy_åì
(&
roŸmíu
);

1550 
	`gtk_åì_võw_ex∑nd_Æl
(
	`GTK_TREE_VIEW
(
åì1_w
));

1551 
åì
 = 
åì2
;

1552 
	}
}

1554 
	$fixup_roŸmíu
(
míu
 *menu)

1556 
míu
 *
chûd
;

1557 
míu_˙t
 = 0;

1559 
míu
->
Êags
 |
MENU_ROOT
;

1560 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1561 i‡(
chûd
->
¥om±
 && chûd->¥om±->
ty≥
 =
P_MENU
) {

1562 
míu_˙t
++;

1563 
	`fixup_roŸmíu
(
chûd
);

1564 
míu_˙t
--;

1565 } i‡(!
míu_˙t
)

1566 
	`fixup_roŸmíu
(
chûd
);

1568 
	}
}

1574 
	$maö
(
ac
, *
av
[])

1576 c⁄° *
«me
, *
§˘ªe
;

1577 
gch¨
 *
cur_dú
, *
exe_∑th
;

1578 
gch¨
 *
gœde_fûe
;

1579 
symbﬁ
 *
sym
;

1580 
tôÀ
[256];

1582 #i‚de‡
LKC_DIRECT_LINK


1583 
	`kc⁄fig_lﬂd
();

1587 
	`gtk_£t_loˇÀ
();

1588 
	`gtk_öô
(&
ac
, &
av
);

1589 
	`gœde_öô
();

1596 
§˘ªe
 = 
	`gëív
(
SRCTREE
);

1597 
gœde_fûe
 = 
	`g_°rc⁄ˇt
(
§˘ªe
 ?: ".", "/ba£/c⁄fig/kc⁄fig/",
av
[0], ".gœde", 
NULL
);

1600 
	`öô_maö_wödow
(
gœde_fûe
);

1601 
	`gtk_widgë_show
(
maö_wnd
);

1602 
	`öô_åì_modñ
();

1603 
	`öô_À·_åì
();

1604 
	`öô_right_åì
();

1607 i‡(
ac
 > 1 && 
av
[1][0] == '-') {

1608 
av
[1][1]) {

1614 
	`¥ötf
("%†<c⁄fig>\n", 
av
[0]);

1615 
	`exô
(0);

1617 
«me
 = 
av
[2];

1619 
«me
 = 
av
[1];

1621 
	`c⁄f_∑r£
(
«me
);

1622 
	`fixup_roŸmíu
(&
roŸmíu
);

1623 
	`c⁄f_ªad
(
NULL
);

1625 
võw_mode
) {

1626 
SINGLE_VIEW
:

1627 
	`di•œy_åì_∑π
();

1629 
SPLIT_VIEW
:

1630 
	`di•œy_li°
();

1632 
FULL_VIEW
:

1633 
	`di•œy_åì
(&
roŸmíu
);

1637 
sym
 = 
	`sym_lookup
("RTAI_VERSION",0);

1638 
	`sym_ˇlc_vÆue
(
sym
);

1639 
	`•rötf
(
tôÀ
, "RTAI C⁄figuøti⁄ [ %†]",
	`sym_gë_°rög_vÆue
(
sym
));

1640 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
maö_wnd
), 
tôÀ
);

1642 
	`gtk_maö
();

1645 
	}
}

	@/usr/src/rtai/base/config/kconfig/images.c

6 c⁄° *
	gxpm_lﬂd
[] = {

36 c⁄° *
	gxpm_ßve
[] = {

66 c⁄° *
	gxpm_back
[] = {

94 c⁄° *
	gxpm_åì_võw
[] = {

121 c⁄° *
	gxpm_sögÀ_võw
[] = {

148 c⁄° *
	gxpm_•lô_võw
[] = {

175 c⁄° *
	gxpm_symbﬁ_no
[] = {

192 c⁄° *
	gxpm_symbﬁ_mod
[] = {

209 c⁄° *
	gxpm_symbﬁ_yes
[] = {

226 c⁄° *
	gxpm_choi˚_no
[] = {

243 c⁄° *
	gxpm_choi˚_yes
[] = {

260 c⁄° *
	gxpm_míu
[] = {

277 c⁄° *
	gxpm_míu_öv
[] = {

294 c⁄° *
	gxpm_míuback
[] = {

311 c⁄° *
	gxpm_void
[] = {

	@/usr/src/rtai/base/config/kconfig/kconfig_load.c

1 
	~<dlf˙.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

5 
	~"lkc.h
"

7 
	#P
(
«me
,
ty≥
,
¨g
Ë
	`ty≥
 (*«mê## 
_p
Ë
	)
arg

8 
	~"lkc_¥Ÿo.h
"

9 #unde‡
P


11 
	$kc⁄fig_lﬂd
()

13 *
h™dÀ
;

14 *
îr‹
;

16 
h™dÀ
 = 
	`dl›í
("./libkc⁄fig.so", 
RTLD_LAZY
);

17 i‡(!
h™dÀ
) {

18 
h™dÀ
 = 
	`dl›í
("./ba£/c⁄fig/kc⁄fig/libkc⁄fig.so", 
RTLD_LAZY
);

19 i‡(!
h™dÀ
) {

20 
	`Ârötf
(
°dîr
, "%s\n", 
	`dÀº‹
());

21 
	`exô
(1);

25 
	#P
(
«me
,
ty≥
,
¨g
) \

27 
«me
 ## 
_p
 = 
	`dlsym
(
h™dÀ
, #name); \

28 i‡((
îr‹
 = 
	`dÀº‹
())) { \

29 
	`Ârötf
(
°dîr
, "%s\n", 
îr‹
); \

30 
	`exô
(1); \

32 }

	)

33 
	~"lkc_¥Ÿo.h
"

34 #unde‡
P


35 
	}
}

	@/usr/src/rtai/base/config/kconfig/lex.zconf.c

4 
	#YY_INT_ALIGNED
 

	)

8 
	#FLEX_SCANNER


	)

9 
	#YY_FLEX_MAJOR_VERSION
 2

	)

10 
	#YY_FLEX_MINOR_VERSION
 5

	)

11 
	#YY_FLEX_SUBMINOR_VERSION
 31

	)

12 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

13 
	#FLEX_BETA


	)

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

22 
	~<°dlib.h
>

28 #i‚de‡
FLEXINT_H


29 
	#FLEXINT_H


	)

33 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

34 
	~<öây≥s.h
>

35 
öt8_t
 
	tÊex_öt8_t
;

36 
uöt8_t
 
	tÊex_uöt8_t
;

37 
öt16_t
 
	tÊex_öt16_t
;

38 
uöt16_t
 
	tÊex_uöt16_t
;

39 
öt32_t
 
	tÊex_öt32_t
;

40 
uöt32_t
 
	tÊex_uöt32_t
;

42 sig√d 
	tÊex_öt8_t
;

43 
	tÊex_öt16_t
;

44 
	tÊex_öt32_t
;

45 
	tÊex_uöt8_t
;

46 
	tÊex_uöt16_t
;

47 
	tÊex_uöt32_t
;

51 #i‚de‡
INT8_MIN


52 
	#INT8_MIN
 (-128)

	)

54 #i‚de‡
INT16_MIN


55 
	#INT16_MIN
 (-32767-1)

	)

57 #i‚de‡
INT32_MIN


58 
	#INT32_MIN
 (-2147483647-1)

	)

60 #i‚de‡
INT8_MAX


61 
	#INT8_MAX
 (127)

	)

63 #i‚de‡
INT16_MAX


64 
	#INT16_MAX
 (32767)

	)

66 #i‚de‡
INT32_MAX


67 
	#INT32_MAX
 (2147483647)

	)

69 #i‚de‡
UINT8_MAX


70 
	#UINT8_MAX
 (255U)

	)

72 #i‚de‡
UINT16_MAX


73 
	#UINT16_MAX
 (65535U)

	)

75 #i‚de‡
UINT32_MAX


76 
	#UINT32_MAX
 (4294967295U)

	)

81 #ifde‡
__˝lu•lus


84 
	#YY_USE_CONST


	)

88 #i‡
__STDC__


90 
	#YY_USE_CONST


	)

95 #ifde‡
YY_USE_CONST


96 
	#yyc⁄°
 c⁄°

	)

98 
	#yyc⁄°


	)

102 
	#YY_NULL
 0

	)

109 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

115 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

121 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

122 
	#YYSTATE
 
YY_START


	)

125 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

128 
	#YY_NEW_FILE
 
	`zc⁄‰e°¨t
(
zc⁄fö
 )

	)

130 
	#YY_END_OF_BUFFER_CHAR
 0

	)

133 #i‚de‡
YY_BUF_SIZE


134 
	#YY_BUF_SIZE
 16384

	)

137 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


138 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

139 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

142 
zc⁄Êíg
;

144 
FILE
 *
zc⁄fö
, *
zc⁄fout
;

146 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

147 
	#EOB_ACT_END_OF_FILE
 1

	)

148 
	#EOB_ACT_LAST_MATCH
 2

	)

150 
	#YY_LESS_LINENO
(
n
)

	)

153 
	#yyÀss
(
n
) \

157 
yyÀss_ma¸o_¨g
 = (
n
); \

158 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

159 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

160 
YY_RESTORE_YY_MORE_OFFSET
 \

161 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

162 
YY_DO_BEFORE_ACTION
; \

164  0 )

	)

166 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

173 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


174 
	#YY_TYPEDEF_YY_SIZE_T


	)

175 
	tyy_size_t
;

178 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


179 
	#YY_STRUCT_YY_BUFFER_STATE


	)

180 
	syy_buf„r_°©e


182 
FILE
 *
	myy_öput_fûe
;

184 *
	myy_ch_buf
;

185 *
	myy_buf_pos
;

190 
yy_size_t
 
	myy_buf_size
;

195 
	myy_n_ch¨s
;

201 
	myy_is_our_buf„r
;

208 
	myy_is_öãø˘ive
;

214 
	myy_©_bﬁ
;

216 
	myy_bs_löío
;

217 
	myy_bs_cﬁumn
;

222 
	myy_fûl_buf„r
;

224 
	myy_buf„r_°©us
;

226 
	#YY_BUFFER_NEW
 0

	)

227 
	#YY_BUFFER_NORMAL
 1

	)

238 
	#YY_BUFFER_EOF_PENDING
 2

	)

244 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

245 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

246 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

254 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

255 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

256 : 
NULL
)

	)

261 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

264 
	gyy_hﬁd_ch¨
;

265 
	gyy_n_ch¨s
;

266 
	gzc⁄Êíg
;

269 *
	gyy_c_buf_p
 = (*) 0;

270 
	gyy_öô
 = 1;

271 
	gyy_°¨t
 = 0;

276 
	gyy_did_buf„r_swôch_⁄_eof
;

278 
zc⁄‰e°¨t
 (
FILE
 *
öput_fûe
 );

279 
zc⁄f_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

280 
YY_BUFFER_STATE
 
zc⁄f_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

281 
zc⁄f_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

282 
zc⁄f_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

283 
zc⁄Âush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

284 
zc⁄Â›_buf„r_°©e
 ();

286 
zc⁄„nsuª_buf„r_°ack
 ();

287 
zc⁄f_lﬂd_buf„r_°©e
 ();

288 
zc⁄f_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

290 
	#YY_FLUSH_BUFFER
 
	`zc⁄f_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

292 
YY_BUFFER_STATE
 
zc⁄f_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

293 
YY_BUFFER_STATE
 
zc⁄f_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

294 
YY_BUFFER_STATE
 
zc⁄f_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

296 *
zc⁄ÁŒoc
 (
yy_size_t
 );

297 *
zc⁄‰óŒoc
 (*,
yy_size_t
 );

298 
zc⁄f‰ì
 (* );

300 
	#yy_√w_buf„r
 
zc⁄f_¸óã_buf„r


	)

302 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

304 i‡–! 
YY_CURRENT_BUFFER
 ){ \

305 
	`zc⁄„nsuª_buf„r_°ack
 (); \

306 
YY_CURRENT_BUFFER_LVALUE
 = \

307 
	`zc⁄f_¸óã_buf„r
(
zc⁄fö
,
YY_BUF_SIZE
 ); \

309 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

310 }

	)

312 
	#yy_£t_bﬁ
(
©_bﬁ
) \

314 i‡–! 
YY_CURRENT_BUFFER
 ){\

315 
	`zc⁄„nsuª_buf„r_°ack
 (); \

316 
YY_CURRENT_BUFFER_LVALUE
 = \

317 
	`zc⁄f_¸óã_buf„r
(
zc⁄fö
,
YY_BUF_SIZE
 ); \

319 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

320 }

	)

322 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

326 
	#zc⁄fwøp
(
n
Ë1

	)

327 
	#YY_SKIP_YYWRAP


	)

329 
	tYY_CHAR
;

331 
FILE
 *
	gzc⁄fö
 = (FILE *Ë0, *
	gzc⁄fout
 = (FILE *) 0;

333 
	tyy_°©e_ty≥
;

335 
zc⁄Êöío
;

337 
	gzc⁄Êöío
 = 1;

339 *
zc⁄·ext
;

340 
	#yyãxt_±r
 
zc⁄·ext


	)

341 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[][38] =

1906 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

1907 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

1908 
yy_gë_√xt_buf„r
 ();

1909 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

1914 
	#YY_DO_BEFORE_ACTION
 \

1915 (
yyãxt_±r
Ë
yy_bp
; \

1916 
zc⁄Êíg
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

1917 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

1918 *
yy_˝
 = '\0'; \

1919 (
yy_c_buf_p
Ë
yy_˝
;

	)

1921 
	#YY_NUM_RULES
 64

	)

1922 
	#YY_END_OF_BUFFER
 65

	)

1925 
	syy_å™s_öfo


1927 
Êex_öt32_t
 
	myy_vîify
;

1928 
Êex_öt32_t
 
	myy_nxt
;

1930 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[211] =

1957 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

1989 
zc⁄f_Êex_debug
;

1990 
	gzc⁄f_Êex_debug
 = 0;

1995 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1996 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1997 
	#YY_MORE_ADJ
 0

	)

1998 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1999 *
	gzc⁄·ext
;

2006 
	~<limôs.h
>

2007 
	~<°dio.h
>

2008 
	~<°dlib.h
>

2009 
	~<°rög.h
>

2010 
	~<uni°d.h
>

2012 
	#LKC_DIRECT_LINK


	)

2013 
	~"lkc.h
"

2015 
	#START_STRSIZE
 16

	)

2017 *
	gãxt
;

2018 *
	gãxt_±r
;

2019 
	gãxt_size
, 
	gãxt_asize
;

2021 
	sbuf„r
 {

2022 
buf„r
 *
	m∑ª¡
;

2023 
YY_BUFFER_STATE
 
	m°©e
;

2026 
buf„r
 *
	gcuºít_buf
;

2028 
	gœ°_ts
, 
	gfú°_ts
;

2030 
zc⁄f_ídhñp
();

2031 
buf„r
 *
zc⁄f_ídfûe
();

2033 
	$√w_°rög
()

2035 
ãxt
 = 
	`mÆloc
(
START_STRSIZE
);

2036 
ãxt_asize
 = 
START_STRSIZE
;

2037 
ãxt_±r
 = 
ãxt
;

2038 
ãxt_size
 = 0;

2039 *
ãxt_±r
 = 0;

2040 
	}
}

2042 
	$≠≥nd_°rög
(c⁄° *
°r
, 
size
)

2044 
√w_size
 = 
ãxt_size
 + 
size
 + 1;

2045 i‡(
√w_size
 > 
ãxt_asize
) {

2046 
ãxt
 = 
	`ªÆloc
—ext, 
√w_size
);

2047 
ãxt_asize
 = 
√w_size
;

2048 
ãxt_±r
 = 
ãxt
 + 
ãxt_size
;

2050 
	`mem˝y
(
ãxt_±r
, 
°r
, 
size
);

2051 
ãxt_±r
 +
size
;

2052 
ãxt_size
 +
size
;

2053 *
ãxt_±r
 = 0;

2054 
	}
}

2056 
	$Æloc_°rög
(c⁄° *
°r
, 
size
)

2058 
ãxt
 = 
	`mÆloc
(
size
 + 1);

2059 
	`mem˝y
(
ãxt
, 
°r
, 
size
);

2060 
ãxt
[
size
] = 0;

2061 
	}
}

2063 
	#INITIAL
 0

	)

2064 
	#COMMAND
 1

	)

2065 
	#HELP
 2

	)

2066 
	#STRING
 3

	)

2067 
	#PARAM
 4

	)

2073 
	~<uni°d.h
>

2075 #i‚de‡
YY_EXTRA_TYPE


2076 
	#YY_EXTRA_TYPE
 *

	)

2083 #i‚de‡
YY_SKIP_YYWRAP


2084 #ifde‡
__˝lu•lus


2085 "C" 
zc⁄fwøp
 ();

2087 
zc⁄fwøp
 ();

2091 
yyu≈ut
 (
c
,*
buf_±r
 );

2093 #i‚de‡
yyãxt_±r


2094 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

2097 #ifde‡
YY_NEED_STRLEN


2098 
yy_Êex_°æí
 (
yyc⁄°
 * );

2101 #i‚de‡
YY_NO_INPUT


2103 #ifde‡
__˝lu•lus


2104 
yyöput
 ();

2106 
öput
 ();

2112 #i‚de‡
YY_READ_BUF_SIZE


2113 
	#YY_READ_BUF_SIZE
 8192

	)

2117 #i‚de‡
ECHO


2121 
	#ECHO
 (Ë
	`fwrôe
–
zc⁄·ext
, 
zc⁄Êíg
, 1, 
zc⁄fout
 )

	)

2127 #i‚de‡
YY_INPUT


2128 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

2129 
î∫o
=0; \

2130  (
ªsu…
 = 
	`ªad
–
	`fûío
(
zc⁄fö
), (*Ë
buf
, 
max_size
 )) < 0 ) \

2132 if–
î∫o
 !
EINTR
) \

2134 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

2137 
î∫o
=0; \

2138 
	`˛óªº
(
zc⁄fö
); \

2141 

	)

2148 #i‚de‡
yyãrmö©e


2149 
	#yyãrmö©e
(Ë 
YY_NULL


	)

2153 #i‚de‡
YY_START_STACK_INCR


2154 
	#YY_START_STACK_INCR
 25

	)

2158 #i‚de‡
YY_FATAL_ERROR


2159 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

2167 #i‚de‡
YY_DECL


2168 
	#YY_DECL_IS_OURS
 1

	)

2170 
zc⁄Êex
 ();

2172 
	#YY_DECL
 
	`zc⁄Êex
 ()

	)

2178 #i‚de‡
YY_USER_ACTION


2179 
	#YY_USER_ACTION


	)

2183 #i‚de‡
YY_BREAK


2184 
	#YY_BREAK
 ;

	)

2187 
	#YY_RULE_SETUP
 \

2188 
YY_USER_ACTION


	)

2192 
	gYY_DECL


2194 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

2195 *
	gyy_˝
, *
	gyy_bp
;

2196 
	gyy_a˘
;

2198 
	g°r
 = 0;

2199 
	gts
, 
	gi
;

2201 i‡–(
	gyy_öô
) )

2203 (
	gyy_öô
) = 0;

2205 #ifde‡
YY_USER_INIT


2206 
	gYY_USER_INIT
;

2209 i‡–! (
	gyy_°¨t
) )

2210 (
	gyy_°¨t
) = 1;

2212 i‡–! 
	gzc⁄fö
 )

2213 
	gzc⁄fö
 = 
°dö
;

2215 i‡–! 
	gzc⁄fout
 )

2216 
	gzc⁄fout
 = 
°dout
;

2218 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

2219 
zc⁄„nsuª_buf„r_°ack
 ();

2220 
	gYY_CURRENT_BUFFER_LVALUE
 =

2221 
zc⁄f_¸óã_buf„r
(
zc⁄fö
,
YY_BUF_SIZE
 );

2224 
zc⁄f_lﬂd_buf„r_°©e
( );

2229 
	gyy_˝
 = (
yy_c_buf_p
);

2232 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

2237 
	gyy_bp
 = 
yy_˝
;

2239 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

2240 
	gyy_m©ch
:

2241  (
yy_cuºít_°©e
 = 
yy_nxt
[yy_cuºít_°©e][ 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)] ]) > 0 )

2242 ++
yy_˝
;

2244 
	gyy_cuºít_°©e
 = -
yy_cuºít_°©e
;

2246 
	gyy_föd_a˘i⁄
:

2247 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

2249 
	gYY_DO_BEFORE_ACTION
;

2251 
	gdo_a˘i⁄
:

2253  
yy_a˘
 )

2257 
YY_RULE_SETUP


2258 
cuºít_fûe
->
löío
++;

2259 
YY_BREAK


2261 
YY_RULE_SETUP


2263 
YY_BREAK


2266 
YY_RULE_SETUP


2267 
cuºít_fûe
->
löío
++;  
	gT_EOL
;

2268 
YY_BREAK


2270 
YY_RULE_SETUP


2272 
BEGIN
(
COMMAND
);

2274 
YY_BREAK


2276 
YY_RULE_SETUP


2278 
u≈ut
(
zc⁄·ext
[0]);

2279 
BEGIN
(
COMMAND
);

2281 
YY_BREAK


2284 
YY_RULE_SETUP


2285 
BEGIN
(
PARAM
);  
	gT_MAINMENU
;

2286 
YY_BREAK


2288 
YY_RULE_SETUP


2289 
BEGIN
(
PARAM
);  
	gT_MENU
;

2290 
YY_BREAK


2292 
YY_RULE_SETUP


2293 
BEGIN
(
PARAM
);  
	gT_ENDMENU
;

2294 
YY_BREAK


2296 
YY_RULE_SETUP


2297 
BEGIN
(
PARAM
);  
	gT_SOURCE
;

2298 
YY_BREAK


2300 
YY_RULE_SETUP


2301 
BEGIN
(
PARAM
);  
	gT_CHOICE
;

2302 
YY_BREAK


2304 
YY_RULE_SETUP


2305 
BEGIN
(
PARAM
);  
	gT_ENDCHOICE
;

2306 
YY_BREAK


2308 
YY_RULE_SETUP


2309 
BEGIN
(
PARAM
);  
	gT_COMMENT
;

2310 
YY_BREAK


2312 
YY_RULE_SETUP


2313 
BEGIN
(
PARAM
);  
	gT_CONFIG
;

2314 
YY_BREAK


2316 
YY_RULE_SETUP


2317 
BEGIN
(
PARAM
);  
	gT_MENUCONFIG
;

2318 
YY_BREAK


2320 
YY_RULE_SETUP


2321 
BEGIN
(
PARAM
);  
	gT_HELP
;

2322 
YY_BREAK


2324 
YY_RULE_SETUP


2325 
BEGIN
(
PARAM
);  
	gT_IF
;

2326 
YY_BREAK


2328 
YY_RULE_SETUP


2329 
BEGIN
(
PARAM
);  
	gT_ENDIF
;

2330 
YY_BREAK


2332 
YY_RULE_SETUP


2333 
BEGIN
(
PARAM
);  
	gT_DEPENDS
;

2334 
YY_BREAK


2336 
YY_RULE_SETUP


2337 
BEGIN
(
PARAM
);  
	gT_REQUIRES
;

2338 
YY_BREAK


2340 
YY_RULE_SETUP


2341 
BEGIN
(
PARAM
);  
	gT_OPTIONAL
;

2342 
YY_BREAK


2344 
YY_RULE_SETUP


2345 
BEGIN
(
PARAM
);  
	gT_DEFAULT
;

2346 
YY_BREAK


2348 
YY_RULE_SETUP


2349 
BEGIN
(
PARAM
);  
	gT_PROMPT
;

2350 
YY_BREAK


2352 
YY_RULE_SETUP


2353 
BEGIN
(
PARAM
);  
	gT_TRISTATE
;

2354 
YY_BREAK


2356 
YY_RULE_SETUP


2357 
BEGIN
(
PARAM
);  
	gT_DEF_TRISTATE
;

2358 
YY_BREAK


2360 
YY_RULE_SETUP


2361 
BEGIN
(
PARAM
);  
	gT_BOOLEAN
;

2362 
YY_BREAK


2364 
YY_RULE_SETUP


2365 
BEGIN
(
PARAM
);  
	gT_BOOLEAN
;

2366 
YY_BREAK


2368 
YY_RULE_SETUP


2369 
BEGIN
(
PARAM
);  
	gT_DEF_BOOLEAN
;

2370 
YY_BREAK


2372 
YY_RULE_SETUP


2373 
BEGIN
(
PARAM
);  
	gT_DEF_BOOLEAN
;

2374 
YY_BREAK


2376 
YY_RULE_SETUP


2377 
BEGIN
(
PARAM
);  
	gT_INT
;

2378 
YY_BREAK


2380 
YY_RULE_SETUP


2381 
BEGIN
(
PARAM
);  
	gT_HEX
;

2382 
YY_BREAK


2384 
YY_RULE_SETUP


2385 
BEGIN
(
PARAM
);  
	gT_STRING
;

2386 
YY_BREAK


2388 
YY_RULE_SETUP


2389 
BEGIN
(
PARAM
);  
	gT_SELECT
;

2390 
YY_BREAK


2392 
YY_RULE_SETUP


2393 
BEGIN
(
PARAM
);  
	gT_SELECT
;

2394 
YY_BREAK


2396 
YY_RULE_SETUP


2397 
BEGIN
(
PARAM
);  
	gT_RANGE
;

2398 
YY_BREAK


2400 
YY_RULE_SETUP


2402 
Æloc_°rög
(
zc⁄·ext
, 
zc⁄Êíg
);

2403 
	gzc⁄ÊvÆ
.
	g°rög
 = 
ãxt
;

2404  
	gT_WORD
;

2406 
YY_BREAK


2408 
YY_RULE_SETUP


2410 
YY_BREAK


2413 
YY_RULE_SETUP


2414 
cuºít_fûe
->
löío
++; 
BEGIN
(
INITIAL
);

2415 
YY_BREAK


2418 
YY_RULE_SETUP


2419  
T_AND
;

2420 
YY_BREAK


2422 
YY_RULE_SETUP


2423  
T_OR
;

2424 
YY_BREAK


2426 
YY_RULE_SETUP


2427  
T_OPEN_PAREN
;

2428 
YY_BREAK


2430 
YY_RULE_SETUP


2431  
T_CLOSE_PAREN
;

2432 
YY_BREAK


2434 
YY_RULE_SETUP


2435  
T_NOT
;

2436 
YY_BREAK


2438 
YY_RULE_SETUP


2439  
T_EQUAL
;

2440 
YY_BREAK


2442 
YY_RULE_SETUP


2443  
T_UNEQUAL
;

2444 
YY_BREAK


2446 
YY_RULE_SETUP


2447  
T_IF
;

2448 
YY_BREAK


2450 
YY_RULE_SETUP


2451  
T_ON
;

2452 
YY_BREAK


2454 
YY_RULE_SETUP


2456 
°r
 = 
zc⁄·ext
[0];

2457 
√w_°rög
();

2458 
BEGIN
(
STRING
);

2460 
YY_BREAK


2463 
YY_RULE_SETUP


2464 
BEGIN
(
INITIAL
); 
	gcuºít_fûe
->
	glöío
++;  
	gT_EOL
;

2465 
YY_BREAK


2467 
YY_RULE_SETUP


2469 
YY_BREAK


2471 
YY_RULE_SETUP


2473 
Æloc_°rög
(
zc⁄·ext
, 
zc⁄Êíg
);

2474 
	gzc⁄ÊvÆ
.
	g°rög
 = 
ãxt
;

2475  
	gT_WORD
;

2477 
YY_BREAK


2479 
YY_RULE_SETUP


2481 
YY_BREAK


2484 
YY_RULE_SETUP


2485 
cuºít_fûe
->
löío
++;

2486 
YY_BREAK


2488 
YY_RULE_SETUP


2490 
YY_BREAK


2491 
YY_STATE_EOF
(
PARAM
):

2493 
BEGIN
(
INITIAL
);

2495 
YY_BREAK


2499 *
yy_˝
 = (
yy_hﬁd_ch¨
);

2500 (
	gyy_c_buf_p
Ë
yy_˝
 -= 1;

2501 
	gYY_DO_BEFORE_ACTION
;

2502 
	gYY_RULE_SETUP


2504 
≠≥nd_°rög
(
zc⁄·ext
, 
zc⁄Êíg
);

2505 
	gzc⁄ÊvÆ
.
	g°rög
 = 
ãxt
;

2506  
	gT_WORD_QUOTE
;

2508 
YY_BREAK


2510 
YY_RULE_SETUP


2512 
≠≥nd_°rög
(
zc⁄·ext
, 
zc⁄Êíg
);

2514 
YY_BREAK


2517 *
yy_˝
 = (
yy_hﬁd_ch¨
);

2518 (
	gyy_c_buf_p
Ë
yy_˝
 -= 1;

2519 
	gYY_DO_BEFORE_ACTION
;

2520 
	gYY_RULE_SETUP


2522 
≠≥nd_°rög
(
zc⁄·ext
 + 1, 
zc⁄Êíg
 - 1);

2523 
	gzc⁄ÊvÆ
.
	g°rög
 = 
ãxt
;

2524  
	gT_WORD_QUOTE
;

2526 
YY_BREAK


2528 
YY_RULE_SETUP


2530 
≠≥nd_°rög
(
zc⁄·ext
 + 1, 
zc⁄Êíg
 - 1);

2532 
YY_BREAK


2534 
YY_RULE_SETUP


2536 i‡(
°r
 =
zc⁄·ext
[0]) {

2537 
BEGIN
(
PARAM
);

2538 
	gzc⁄ÊvÆ
.
	g°rög
 = 
ãxt
;

2539  
	gT_WORD_QUOTE
;

2541 
≠≥nd_°rög
(
zc⁄·ext
, 1);

2543 
YY_BREAK


2546 
YY_RULE_SETUP


2548 
¥ötf
("%s:%d:w¨nög: mu…i-löê°rög†nŸ suµ‹ãd\n", 
zc⁄f_cu∫ame
(), 
zc⁄f_löío
());

2549 
	gcuºít_fûe
->
	glöío
++;

2550 
BEGIN
(
INITIAL
);

2551  
	gT_EOL
;

2553 
YY_BREAK


2554 
YY_STATE_EOF
(
STRING
):

2556 
BEGIN
(
INITIAL
);

2558 
YY_BREAK


2561 
YY_RULE_SETUP


2563 
ts
 = 0;

2564 
	gi
 = 0; i < 
	gzc⁄Êíg
; i++) {

2565 i‡(
	gzc⁄·ext
[
i
] == '\t')

2566 
ts
 = (ts & ~7) + 8;

2568 
	gts
++;

2570 
	gœ°_ts
 = 
ts
;

2571 i‡(
	gfú°_ts
) {

2572 i‡(
	gts
 < 
	gfú°_ts
) {

2573 
zc⁄f_ídhñp
();

2574  
	gT_HELPTEXT
;

2576 
	gts
 -
fú°_ts
;

2577 
	gts
 > 8) {

2578 
≠≥nd_°rög
(" ", 8);

2579 
	gts
 -= 8;

2581 
≠≥nd_°rög
(" ", 
ts
);

2584 
YY_BREAK


2587 *
yy_˝
 = (
yy_hﬁd_ch¨
);

2588 (
	gyy_c_buf_p
Ë
yy_˝
 -= 1;

2589 
	gYY_DO_BEFORE_ACTION
;

2590 
	gYY_RULE_SETUP


2592 
	gcuºít_fûe
->
	glöío
++;

2593 
zc⁄f_ídhñp
();

2594  
	gT_HELPTEXT
;

2596 
YY_BREAK


2599 
YY_RULE_SETUP


2601 
cuºít_fûe
->
löío
++;

2602 
≠≥nd_°rög
("\n", 1);

2604 
YY_BREAK


2606 
YY_RULE_SETUP


2608 
≠≥nd_°rög
(
zc⁄·ext
, 
zc⁄Êíg
);

2609 i‡(!
	gfú°_ts
)

2610 
	gfú°_ts
 = 
œ°_ts
;

2612 
YY_BREAK


2613 
YY_STATE_EOF
(
HELP
):

2615 
zc⁄f_ídhñp
();

2616  
	gT_HELPTEXT
;

2618 
YY_BREAK


2620 
YY_STATE_EOF
(
INITIAL
):

2621 
YY_STATE_EOF
(
COMMAND
):

2623 i‡(
cuºít_buf
) {

2624 
zc⁄f_ídfûe
();

2625  
	gT_EOF
;

2627 
f˛o£
(
zc⁄fö
);

2628 
yyãrmö©e
();

2630 
YY_BREAK


2632 
YY_RULE_SETUP


2633 
YY_FATAL_ERROR
( "flex scanner jammed" );

2634 
YY_BREAK


2636 
	gYY_END_OF_BUFFER
:

2639 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

2642 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

2643 
YY_RESTORE_YY_MORE_OFFSET


2645 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

2656 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2657 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
zc⁄fö
;

2658 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

2668 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2670 
yy_°©e_ty≥
 
yy_√xt_°©e
;

2672 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2674 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2685 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

2687 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2689 i‡–
	gyy_√xt_°©e
 )

2692 
	gyy_˝
 = ++(
yy_c_buf_p
);

2693 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

2694 
	gyy_m©ch
;

2699 
	gyy_˝
 = (
yy_c_buf_p
);

2700 
	gyy_föd_a˘i⁄
;

2704  
yy_gë_√xt_buf„r
( ) )

2706 
	gEOB_ACT_END_OF_FILE
:

2708 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

2710 i‡–
zc⁄fwøp
( ) )

2721 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2723 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

2724 
	gdo_a˘i⁄
;

2729 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

2730 
	gYY_NEW_FILE
;

2735 
	gEOB_ACT_CONTINUE_SCAN
:

2736 (
yy_c_buf_p
) =

2737 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2739 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2741 
	gyy_˝
 = (
yy_c_buf_p
);

2742 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2743 
	gyy_m©ch
;

2745 
	gEOB_ACT_LAST_MATCH
:

2746 (
yy_c_buf_p
) =

2747 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

2749 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2751 
	gyy_˝
 = (
yy_c_buf_p
);

2752 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2753 
	gyy_föd_a˘i⁄
;

2759 
YY_FATAL_ERROR
(

2772 
	$yy_gë_√xt_buf„r
 ()

2774 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

2775 *
sour˚
 = (
yyãxt_±r
);

2776 
numbî_to_move
, 
i
;

2777 
ªt_vÆ
;

2779 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

2780 
	`YY_FATAL_ERROR
(

2783 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

2785 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

2790  
EOB_ACT_END_OF_FILE
;

2798  
EOB_ACT_LAST_MATCH
;

2805 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

2807  
i
 = 0; i < 
numbî_to_move
; ++i )

2808 *(
de°
++Ë*(
sour˚
++);

2810 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

2814 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

2818 
size_t
 
num_to_ªad
 =

2819 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

2821  
num_to_ªad
 <= 0 )

2825 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

2827 
yy_c_buf_p_off£t
 =

2828 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

2830 i‡–
b
->
yy_is_our_buf„r
 )

2832 
√w_size
 = 
b
->
yy_buf_size
 * 2;

2834 i‡–
√w_size
 <= 0 )

2835 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

2837 
b
->
yy_buf_size
 *= 2;

2839 
b
->
yy_ch_buf
 = (*)

2841 
	`zc⁄‰óŒoc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

2845 
b
->
yy_ch_buf
 = 0;

2847 i‡–! 
b
->
yy_ch_buf
 )

2848 
	`YY_FATAL_ERROR
(

2851 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

2853 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

2854 
numbî_to_move
 - 1;

2858 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

2859 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

2862 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

2863 (
yy_n_ch¨s
), 
num_to_ªad
 );

2865 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

2868 i‡–(
yy_n_ch¨s
) == 0 )

2870 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

2872 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

2873 
	`zc⁄‰e°¨t
(
zc⁄fö
 );

2878 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

2879 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

2880 
YY_BUFFER_EOF_PENDING
;

2885 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

2887 (
yy_n_ch¨s
Ë+
numbî_to_move
;

2888 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

2889 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

2891 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

2893  
ªt_vÆ
;

2894 
	}
}

2898 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

2900 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

2901 *
yy_˝
;

2903 
yy_cuºít_°©e
 = (
yy_°¨t
);

2905  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

2907 
yy_cuºít_°©e
 = 
yy_nxt
[yy_cuºít_°©e][(*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1)];

2910  
yy_cuºít_°©e
;

2911 
	}
}

2918 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

2920 
yy_is_jam
;

2922 
yy_cuºít_°©e
 = 
yy_nxt
[yy_current_state][1];

2923 
yy_is_jam
 = (
yy_cuºít_°©e
 <= 0);

2925  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

2926 
	}
}

2928 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

2930 *
yy_˝
;

2932 
yy_˝
 = (
yy_c_buf_p
);

2935 *
yy_˝
 = (
yy_hﬁd_ch¨
);

2937 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

2940 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

2941 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

2942 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

2943 *
sour˚
 =

2944 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

2946  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2947 *--
de°
 = *--
sour˚
;

2949 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

2950 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

2951 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

2952 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

2954 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

2955 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

2958 *--
yy_˝
 = (Ë
c
;

2960 (
yyãxt_±r
Ë
yy_bp
;

2961 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

2962 (
yy_c_buf_p
Ë
yy_˝
;

2963 
	}
}

2965 #i‚de‡
YY_NO_INPUT


2966 #ifde‡
__˝lu•lus


2967 
	$yyöput
 ()

2969 
	$öput
 ()

2973 
c
;

2975 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

2977 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

2983 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2985 *(
yy_c_buf_p
) = '\0';

2989 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

2990 ++(
yy_c_buf_p
);

2992  
	`yy_gë_√xt_buf„r
( ) )

2994 
EOB_ACT_LAST_MATCH
:

3006 
	`zc⁄‰e°¨t
(
zc⁄fö
 );

3010 
EOB_ACT_END_OF_FILE
:

3012 i‡–
	`zc⁄fwøp
( ) )

3013  
EOF
;

3015 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

3016 
YY_NEW_FILE
;

3017 #ifde‡
__˝lu•lus


3018  
	`yyöput
();

3020  
	`öput
();

3024 
EOB_ACT_CONTINUE_SCAN
:

3025 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

3031 
c
 = *(*Ë(
yy_c_buf_p
);

3032 *(
yy_c_buf_p
) = '\0';

3033 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

3035  
c
;

3036 
	}
}

3044 
	$zc⁄‰e°¨t
 (
FILE
 * 
öput_fûe
 )

3047 i‡–! 
YY_CURRENT_BUFFER
 ){

3048 
	`zc⁄„nsuª_buf„r_°ack
 ();

3049 
YY_CURRENT_BUFFER_LVALUE
 =

3050 
	`zc⁄f_¸óã_buf„r
(
zc⁄fö
,
YY_BUF_SIZE
 );

3053 
	`zc⁄f_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

3054 
	`zc⁄f_lﬂd_buf„r_°©e
( );

3055 
	}
}

3061 
	$zc⁄f_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3069 
	`zc⁄„nsuª_buf„r_°ack
 ();

3070 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

3073 i‡–
YY_CURRENT_BUFFER
 )

3076 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3077 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3078 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3081 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3082 
	`zc⁄f_lﬂd_buf„r_°©e
( );

3089 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3090 
	}
}

3092 
	$zc⁄f_lﬂd_buf„r_°©e
 ()

3094 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

3095 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

3096 
zc⁄fö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

3097 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

3098 
	}
}

3106 
YY_BUFFER_STATE
 
	$zc⁄f_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

3108 
YY_BUFFER_STATE
 
b
;

3110 
b
 = (
YY_BUFFER_STATE
Ë
	`zc⁄ÁŒoc
(–
yy_buf„r_°©e
 ) );

3111 i‡–! 
b
 )

3112 
	`YY_FATAL_ERROR
( "out of dynamic memory in zconf_create_buffer()" );

3114 
b
->
yy_buf_size
 = 
size
;

3119 
b
->
yy_ch_buf
 = (*Ë
	`zc⁄ÁŒoc
(b->
yy_buf_size
 + 2 );

3120 i‡–! 
b
->
yy_ch_buf
 )

3121 
	`YY_FATAL_ERROR
( "out of dynamic memory in zconf_create_buffer()" );

3123 
b
->
yy_is_our_buf„r
 = 1;

3125 
	`zc⁄f_öô_buf„r
(
b
,
fûe
 );

3127  
b
;

3128 
	}
}

3134 
	$zc⁄f_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3137 i‡–! 
b
 )

3140 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3141 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

3143 i‡–
b
->
yy_is_our_buf„r
 )

3144 
	`zc⁄f‰ì
((*Ë
b
->
yy_ch_buf
 );

3146 
	`zc⁄f‰ì
((*Ë
b
 );

3147 
	}
}

3153 
	$zc⁄f_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

3156 
€ºno
 = 
î∫o
;

3158 
	`zc⁄f_Êush_buf„r
(
b
 );

3160 
b
->
yy_öput_fûe
 = 
fûe
;

3161 
b
->
yy_fûl_buf„r
 = 1;

3167 i‡(
b
 !
YY_CURRENT_BUFFER
){

3168 
b
->
yy_bs_löío
 = 1;

3169 
b
->
yy_bs_cﬁumn
 = 0;

3172 
b
->
yy_is_öãø˘ive
 = 0;

3174 
î∫o
 = 
€ºno
;

3175 
	}
}

3181 
	$zc⁄f_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

3183 i‡–! 
b
 )

3186 
b
->
yy_n_ch¨s
 = 0;

3192 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

3193 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

3195 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

3197 
b
->
yy_©_bﬁ
 = 1;

3198 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3200 i‡–
b
 =
YY_CURRENT_BUFFER
 )

3201 
	`zc⁄f_lﬂd_buf„r_°©e
( );

3202 
	}
}

3210 
	$zc⁄Âush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

3212 i‡(
√w_buf„r
 =
NULL
)

3215 
	`zc⁄„nsuª_buf„r_°ack
();

3218 i‡–
YY_CURRENT_BUFFER
 )

3221 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

3222 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

3223 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

3227 i‡(
YY_CURRENT_BUFFER
)

3228 (
yy_buf„r_°ack_t›
)++;

3229 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

3232 
	`zc⁄f_lﬂd_buf„r_°©e
( );

3233 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3234 
	}
}

3240 
	$zc⁄Â›_buf„r_°©e
 ()

3242 i‡(!
YY_CURRENT_BUFFER
)

3245 
	`zc⁄f_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3246 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3247 i‡((
yy_buf„r_°ack_t›
) > 0)

3248 --(
yy_buf„r_°ack_t›
);

3250 i‡(
YY_CURRENT_BUFFER
) {

3251 
	`zc⁄f_lﬂd_buf„r_°©e
( );

3252 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

3254 
	}
}

3259 
	$zc⁄„nsuª_buf„r_°ack
 ()

3261 
num_to_Æloc
;

3263 i‡(!(
yy_buf„r_°ack
)) {

3269 
num_to_Æloc
 = 1;

3270 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
zc⁄ÁŒoc


3271 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3274 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

3276 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3277 (
yy_buf„r_°ack_t›
) = 0;

3281 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

3284 
grow_size
 = 8 ;

3286 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

3287 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
zc⁄‰óŒoc


3288 ((
yy_buf„r_°ack
),

3289 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

3293 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

3294 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

3296 
	}
}

3304 
YY_BUFFER_STATE
 
	$zc⁄f_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

3306 
YY_BUFFER_STATE
 
b
;

3308 i‡–
size
 < 2 ||

3309 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

3310 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

3314 
b
 = (
YY_BUFFER_STATE
Ë
	`zc⁄ÁŒoc
(–
yy_buf„r_°©e
 ) );

3315 i‡–! 
b
 )

3316 
	`YY_FATAL_ERROR
( "out of dynamic memory in zconf_scan_buffer()" );

3318 
b
->
yy_buf_size
 = 
size
 - 2;

3319 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

3320 
b
->
yy_is_our_buf„r
 = 0;

3321 
b
->
yy_öput_fûe
 = 0;

3322 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

3323 
b
->
yy_is_öãø˘ive
 = 0;

3324 
b
->
yy_©_bﬁ
 = 1;

3325 
b
->
yy_fûl_buf„r
 = 0;

3326 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

3328 
	`zc⁄f_swôch_to_buf„r
(
b
 );

3330  
b
;

3331 
	}
}

3341 
YY_BUFFER_STATE
 
	$zc⁄f_sˇn_°rög
 (
yyc⁄°
 * 
°r
 )

3344  
	`zc⁄f_sˇn_byãs
(
°r
,
	`°æí
(str) );

3345 
	}
}

3354 
YY_BUFFER_STATE
 
	$zc⁄f_sˇn_byãs
 (
yyc⁄°
 * 
byãs
, 
Àn
 )

3356 
YY_BUFFER_STATE
 
b
;

3357 *
buf
;

3358 
yy_size_t
 
n
;

3359 
i
;

3362 
n
 = 
Àn
 + 2;

3363 
buf
 = (*Ë
	`zc⁄ÁŒoc
(
n
 );

3364 i‡–! 
buf
 )

3365 
	`YY_FATAL_ERROR
( "out of dynamic memory in zconf_scan_bytes()" );

3367  
i
 = 0; i < 
Àn
; ++i )

3368 
buf
[
i
] = 
byãs
[i];

3370 
buf
[
Àn
] = buf[Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

3372 
b
 = 
	`zc⁄f_sˇn_buf„r
(
buf
,
n
 );

3373 i‡–! 
b
 )

3374 
	`YY_FATAL_ERROR
( "bad buffer in zconf_scan_bytes()" );

3379 
b
->
yy_is_our_buf„r
 = 1;

3381  
b
;

3382 
	}
}

3384 #i‚de‡
YY_EXIT_FAILURE


3385 
	#YY_EXIT_FAILURE
 2

	)

3388 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

3390 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

3391 
	`exô
–
YY_EXIT_FAILURE
 );

3392 
	}
}

3396 #unde‡
yyÀss


3397 
	#yyÀss
(
n
) \

3401 
yyÀss_ma¸o_¨g
 = (
n
); \

3402 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

3403 
zc⁄·ext
[
zc⁄Êíg
] = (
yy_hﬁd_ch¨
); \

3404 (
yy_c_buf_p
Ë
zc⁄·ext
 + 
yyÀss_ma¸o_¨g
; \

3405 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

3406 *(
yy_c_buf_p
) = '\0'; \

3407 
zc⁄Êíg
 = 
yyÀss_ma¸o_¨g
; \

3409  0 )

	)

3416 
	$zc⁄fgë_löío
 ()

3419  
zc⁄Êöío
;

3420 
	}
}

3425 
FILE
 *
	$zc⁄fgë_ö
 ()

3427  
zc⁄fö
;

3428 
	}
}

3433 
FILE
 *
	$zc⁄fgë_out
 ()

3435  
zc⁄fout
;

3436 
	}
}

3441 
	$zc⁄fgë_Àng
 ()

3443  
zc⁄Êíg
;

3444 
	}
}

3450 *
	$zc⁄fgë_ãxt
 ()

3452  
zc⁄·ext
;

3453 
	}
}

3459 
	$zc⁄f£t_löío
 (
löe_numbî
 )

3462 
zc⁄Êöío
 = 
löe_numbî
;

3463 
	}
}

3471 
	$zc⁄f£t_ö
 (
FILE
 * 
ö_°r
 )

3473 
zc⁄fö
 = 
ö_°r
 ;

3474 
	}
}

3476 
	$zc⁄f£t_out
 (
FILE
 * 
out_°r
 )

3478 
zc⁄fout
 = 
out_°r
 ;

3479 
	}
}

3481 
	$zc⁄fgë_debug
 ()

3483  
zc⁄f_Êex_debug
;

3484 
	}
}

3486 
	$zc⁄f£t_debug
 (
bdebug
 )

3488 
zc⁄f_Êex_debug
 = 
bdebug
 ;

3489 
	}
}

3492 
	$zc⁄Êex_de°roy
 ()

3496 
YY_CURRENT_BUFFER
){

3497 
	`zc⁄f_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3498 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3499 
	`zc⁄Â›_buf„r_°©e
();

3503 
	`zc⁄f‰ì
((
yy_buf„r_°ack
) );

3504 (
yy_buf„r_°ack
Ë
NULL
;

3507 
	}
}

3513 #i‚de‡
yyãxt_±r


3514 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

3516 
i
;

3517  
i
 = 0; i < 
n
; ++i )

3518 
s1
[
i
] = 
s2
[i];

3519 
	}
}

3522 #ifde‡
YY_NEED_STRLEN


3523 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

3525 
n
;

3526  
n
 = 0; 
s
[n]; ++n )

3529  
n
;

3530 
	}
}

3533 *
	$zc⁄ÁŒoc
 (
yy_size_t
 
size
 )

3535  (*Ë
	`mÆloc
–
size
 );

3536 
	}
}

3538 *
	$zc⁄‰óŒoc
 (* 
±r
, 
yy_size_t
 
size
 )

3547  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

3548 
	}
}

3550 
	$zc⁄f‰ì
 (* 
±r
 )

3552 
	`‰ì
–(*Ë
±r
 );

3553 
	}
}

3555 
	#YYTABLES_NAME
 "yyèbÀs"

	)

3557 #unde‡
YY_NEW_FILE


3558 #unde‡
YY_FLUSH_BUFFER


3559 #unde‡
yy_£t_bﬁ


3560 #unde‡
yy_√w_buf„r


3561 #unde‡
yy_£t_öãø˘ive


3562 #unde‡
yyãxt_±r


3563 #unde‡
YY_DO_BEFORE_ACTION


3565 #ifde‡
YY_DECL_IS_OURS


3566 #unde‡
YY_DECL_IS_OURS


3567 #unde‡
YY_DECL


3570 
	$zc⁄f_°¨thñp
()

3572 
	`√w_°rög
();

3573 
œ°_ts
 = 
fú°_ts
 = 0;

3574 
	`BEGIN
(
HELP
);

3575 
	}
}

3577 
	$zc⁄f_ídhñp
()

3579 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

3580 
	`BEGIN
(
INITIAL
);

3581 
	}
}

3591 
FILE
 *
	$zc⁄f_f›í
(c⁄° *
«me
)

3593 *
ív
, 
fuŒ«me
[
PATH_MAX
+1];

3594 
FILE
 *
f
;

3596 
f
 = 
	`f›í
(
«me
, "r");

3597 i‡(!
f
 && 
«me
[0] != '/') {

3598 
ív
 = 
	`gëív
(
SRCTREE
);

3599 i‡(
ív
) {

3600 
	`•rötf
(
fuŒ«me
, "%s/%s", 
ív
, 
«me
);

3601 
f
 = 
	`f›í
(
fuŒ«me
, "r");

3604  
f
;

3605 
	}
}

3607 
	$zc⁄f_öôsˇn
(c⁄° *
«me
)

3609 
zc⁄fö
 = 
	`zc⁄f_f›í
(
«me
);

3610 i‡(!
zc⁄fö
) {

3611 
	`¥ötf
("ˇn'àföd fûê%s\n", 
«me
);

3612 
	`exô
(1);

3615 
cuºít_buf
 = 
	`mÆloc
((*current_buf));

3616 
	`mem£t
(
cuºít_buf
, 0, (*current_buf));

3618 
cuºít_fûe
 = 
	`fûe_lookup
(
«me
);

3619 
cuºít_fûe
->
löío
 = 1;

3620 
cuºít_fûe
->
Êags
 = 
FILE_BUSY
;

3621 
	}
}

3623 
	$zc⁄f_√xtfûe
(c⁄° *
«me
)

3625 
FILE
 *
Â
 = 
	`zc⁄f_f›í
(
«me
);

3627 i‡(
Â
) {

3628 
fûe
 *file;

3629 
buf„r
 *
buf
;

3631 
fûe
 = 
	`fûe_lookup
(
«me
);

3632 
buf
 = 
	`mÆloc
((*buf));

3633 
	`mem£t
(
buf
, 0, (*buf));

3634 
zc⁄fö
 = 
Â
;

3635 
cuºít_buf
->
°©e
 = 
YY_CURRENT_BUFFER
;

3637 
	`zc⁄f_swôch_to_buf„r
(
	`zc⁄f_¸óã_buf„r
(
zc⁄fö
,
YY_BUF_SIZE
));

3638 
buf
->
∑ª¡
 = 
cuºít_buf
;

3639 
cuºít_buf
 = 
buf
;

3641 i‡(
fûe
->
Êags
 & 
FILE_BUSY
) {

3642 
	`¥ötf
("ªcursivêsˇ¿(%s)?\n", 
«me
);

3643 
	`exô
(1);

3645 i‡(
fûe
->
Êags
 & 
FILE_SCANNED
) {

3646 
	`¥ötf
("fûê%†Æªady sˇ¬ed?\n", 
«me
);

3647 
	`exô
(1);

3649 
fûe
->
Êags
 |
FILE_BUSY
;

3650 
fûe
->
löío
 = 1;

3651 
fûe
->
∑ª¡
 = 
cuºít_fûe
;

3652 
cuºít_fûe
 = 
fûe
;

3654 
	}
}

3656 
buf„r
 *
	$zc⁄f_ídfûe
()

3658 
buf„r
 *
∑ª¡
;

3660 
cuºít_fûe
->
Êags
 |
FILE_SCANNED
;

3661 
cuºít_fûe
->
Êags
 &~
FILE_BUSY
;

3662 
cuºít_fûe
 = cuºít_fûe->
∑ª¡
;

3664 
∑ª¡
 = 
cuºít_buf
->parent;

3665 i‡(
∑ª¡
) {

3666 
	`f˛o£
(
zc⁄fö
);

3667 
	`zc⁄f_dñëe_buf„r
(
YY_CURRENT_BUFFER
);

3668 
	`zc⁄f_swôch_to_buf„r
(
∑ª¡
->
°©e
);

3670 
	`‰ì
(
cuºít_buf
);

3671 
cuºít_buf
 = 
∑ª¡
;

3673  
∑ª¡
;

3674 
	}
}

3676 
	$zc⁄f_löío
()

3678 i‡(
cuºít_buf
)

3679  
cuºít_fûe
->
löío
 - 1;

3682 
	}
}

3684 *
	$zc⁄f_cu∫ame
()

3686 i‡(
cuºít_buf
)

3687  
cuºít_fûe
->
«me
;

3690 
	}
}

	@/usr/src/rtai/base/config/kconfig/lkc.h

6 #i‚de‡
LKC_H


7 
	#LKC_H


	)

9 
	~"ex¥.h
"

11 #ifde‡
__˝lu•lus


15 #ifde‡
LKC_DIRECT_LINK


16 
	#P
(
«me
,
ty≥
,
¨g
Ëty≥Çamê
	)
arg

18 
	~"lkc_defs.h
"

19 
	#P
(
«me
,
ty≥
,
¨g
Ë
	`ty≥
 (*«mê## 
_p
Ë
	)
arg

21 
	~"lkc_¥Ÿo.h
"

22 #unde‡
P


24 
	#SRCTREE
 "§˘ªe"

	)

26 
zc⁄Â¨£
();

27 
zc⁄fdump
(
FILE
 *
out
);

29 
zc⁄fdebug
;

30 
zc⁄f_°¨thñp
();

31 
FILE
 *
zc⁄f_f›í
(c⁄° *
«me
);

32 
zc⁄f_öôsˇn
(c⁄° *
«me
);

33 
zc⁄f_√xtfûe
(c⁄° *
«me
);

34 
zc⁄f_löío
();

35 *
zc⁄f_cu∫ame
();

38 c⁄° 
c⁄f_def_fûíame
[];

39 
c⁄f_fûíame
[];

41 *
c⁄f_gë_deÁu…_c⁄‚ame
();

44 
kc⁄fig_lﬂd
();

47 
míu_öô
();

48 
míu_add_míu
();

49 
míu_íd_míu
();

50 
míu_add_íåy
(
symbﬁ
 *
sym
);

51 
míu_íd_íåy
();

52 
míu_add_dï
(
ex¥
 *
dï
);

53 
¥›îty
 *
míu_add_¥›
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *ex¥, ex¥ *
dï
);

54 
míu_add_¥om±
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *
dï
);

55 
míu_add_ex¥
(
¥›_ty≥
 
ty≥
, 
ex¥
 *ex¥, ex¥ *
dï
);

56 
míu_add_symbﬁ
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
, 
ex¥
 *
dï
);

57 
míu_föÆize
(
míu
 *
∑ª¡
);

58 
míu_£t_ty≥
(
ty≥
);

59 
fûe
 *
fûe_lookup
(c⁄° *
«me
);

60 
fûe_wrôe_dï
(c⁄° *
«me
);

62 
míu
 *
cuºít_íåy
;

63 
míu
 *
cuºít_míu
;

66 
sym_öô
();

67 
sym_˛ór_Æl_vÆid
();

68 
sym_£t_ch™ged
(
symbﬁ
 *
sym
);

69 
symbﬁ
 *
sym_check_dïs
(symbﬁ *
sym
);

70 
¥›îty
 *
¥›_Æloc
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
);

71 
symbﬁ
 *
¥›_gë_symbﬁ
(
¥›îty
 *
¥›
);

73 
ölöe
 
åi°©e
 
sym_gë_åi°©e_vÆue
(
symbﬁ
 *
sym
)

75  
	gsym
->
	gcuº
.
	gåi
;

79 
ölöe
 
symbﬁ
 *
sym_gë_choi˚_vÆue
(symbﬁ *
sym
)

81  (
	gsymbﬁ
 *)
	gsym
->
	gcuº
.
	gvÆ
;

84 
ölöe
 
boﬁ
 
sym_£t_choi˚_vÆue
(
symbﬁ
 *
ch
, symbﬁ *
chvÆ
)

86  
sym_£t_åi°©e_vÆue
(
chvÆ
, 
yes
);

89 
ölöe
 
boﬁ
 
sym_is_choi˚
(
symbﬁ
 *
sym
)

91  
	gsym
->
	gÊags
 & 
	gSYMBOL_CHOICE
 ? 
	gåue
 : 
Ál£
;

94 
ölöe
 
boﬁ
 
sym_is_choi˚_vÆue
(
symbﬁ
 *
sym
)

96  
	gsym
->
	gÊags
 & 
	gSYMBOL_CHOICEVAL
 ? 
	gåue
 : 
Ál£
;

99 
ölöe
 
boﬁ
 
sym_is_›ti⁄Æ
(
symbﬁ
 *
sym
)

101  
	gsym
->
	gÊags
 & 
	gSYMBOL_OPTIONAL
 ? 
	gåue
 : 
Ál£
;

104 
ölöe
 
boﬁ
 
sym_has_vÆue
(
symbﬁ
 *
sym
)

106  
	gsym
->
	gÊags
 & 
	gSYMBOL_NEW
 ? 
	gÁl£
 : 
åue
;

109 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/config/kconfig/lkc_proto.h

3 
P
(
c⁄f_∑r£
,,(c⁄° *
«me
));

4 
P
(
c⁄f_ªad
,,(c⁄° *
«me
));

5 
P
(
c⁄f_wrôe
,,(c⁄° *
«me
));

8 
P
(
roŸmíu
,
míu
,);

10 
P
(
míu_is_visibÀ
,
boﬁ
,(
míu
 *menu));

11 
P
(
míu_gë_¥om±
,c⁄° *,(
míu
 *menu));

12 
P
(
míu_gë_roŸ_míu
,
míu
 *,(menu *menu));

13 
P
(
míu_gë_∑ª¡_míu
,
míu
 *,(menu *menu));

16 
P
(
symbﬁ_hash
,
symbﬁ
 *,[
SYMBOL_HASHSIZE
]);

17 
P
(
sym_ch™ge_cou¡
,,);

19 
P
(
sym_lookup
,
symbﬁ
 *,(c⁄° *
«me
, 
isc⁄°
));

20 
P
(
sym_föd
,
symbﬁ
 *,(c⁄° *
«me
));

21 
P
(
sym_ty≥_«me
,c⁄° *,(
symbﬁ_ty≥
 
ty≥
));

22 
P
(
sym_ˇlc_vÆue
,,(
symbﬁ
 *
sym
));

23 
P
(
sym_gë_ty≥
,
symbﬁ_ty≥
,(
symbﬁ
 *
sym
));

24 
P
(
sym_åi°©e_wôhö_ønge
,
boﬁ
,(
symbﬁ
 *
sym
,
åi°©e
 
åi
));

25 
P
(
sym_£t_åi°©e_vÆue
,
boﬁ
,(
symbﬁ
 *
sym
,
åi°©e
 
åi
));

26 
P
(
sym_toggÀ_åi°©e_vÆue
,
åi°©e
,(
symbﬁ
 *
sym
));

27 
P
(
sym_°rög_vÆid
,
boﬁ
,(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
));

28 
P
(
sym_°rög_wôhö_ønge
,
boﬁ
,(
symbﬁ
 *
sym
, c⁄° *
°r
));

29 
P
(
sym_£t_°rög_vÆue
,
boﬁ
,(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
));

30 
P
(
sym_is_ch™gabÀ
,
boﬁ
,(
symbﬁ
 *
sym
));

31 
P
(
sym_gë_choi˚_¥›
,
¥›îty
 *,(
symbﬁ
 *
sym
));

32 
P
(
sym_gë_deÁu…_¥›
,
¥›îty
 *,(
symbﬁ
 *
sym
));

33 
P
(
sym_gë_°rög_vÆue
,c⁄° *,(
symbﬁ
 *
sym
));

35 
P
(
¥›_gë_ty≥_«me
,c⁄° *,(
¥›_ty≥
 
ty≥
));

38 
P
(
ex¥_com∑ª_ty≥
,,(
ex¥_ty≥
 
t1
, ex¥_ty≥ 
t2
));

39 
P
(
ex¥_¥öt
,,(
ex¥
 *
e
, (*
‚
)(*, c⁄° *), *
d©a
, 
¥evtokí
));

	@/usr/src/rtai/base/config/kconfig/lxdialog/checklist.c

24 
	~"dülog.h
"

26 
	gli°_width
, 
	gcheck_x
, 
	gôem_x
, 
	gcheckÊag
;

32 
	$¥öt_ôem
 (
WINDOW
 * 
wö
, c⁄° *
ôem
, 
°©us
,

33 
choi˚
, 
£À˘ed
)

35 
i
;

38 
	`w©å£t
 (
wö
, 
míubox_©å
);

39 
	`wmove
 (
wö
, 
choi˚
, 0);

40 
i
 = 0; i < 
li°_width
; i++)

41 
	`waddch
 (
wö
, ' ');

43 
	`wmove
 (
wö
, 
choi˚
, 
check_x
);

44 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
check_£À˘ed_©å
 : 
check_©å
);

45 i‡(
checkÊag
 =
FLAG_CHECK
)

46 
	`w¥ötw
 (
wö
, "[%c]", 
°©us
 ? 'X' : ' ');

48 
	`w¥ötw
 (
wö
, "(%c)", 
°©us
 ? 'X' : ' ');

50 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
èg_£À˘ed_©å
 : 
èg_©å
);

51 
	`mvwaddch
(
wö
, 
choi˚
, 
ôem_x
, 
ôem
[0]);

52 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
ôem_£À˘ed_©å
 : 
ôem_©å
);

53 
	`wadd°r
 (
wö
, (*)
ôem
+1);

54 i‡(
£À˘ed
) {

55 
	`wmove
 (
wö
, 
choi˚
, 
check_x
+1);

56 
	`wª‰esh
 (
wö
);

58 
	}
}

64 
	$¥öt_¨rows
 (
WINDOW
 * 
wö
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

65 
y
, 
x
, 
height
)

67 
	`wmove
(
wö
, 
y
, 
x
);

69 i‡(
s¸ﬁl
 > 0) {

70 
	`w©å£t
 (
wö
, 
u¨row_©å
);

71 
	`waddch
 (
wö
, 
ACS_UARROW
);

72 
	`wadd°r
 (
wö
, "(-)");

75 
	`w©å£t
 (
wö
, 
míubox_©å
);

76 
	`waddch
 (
wö
, 
ACS_HLINE
);

77 
	`waddch
 (
wö
, 
ACS_HLINE
);

78 
	`waddch
 (
wö
, 
ACS_HLINE
);

79 
	`waddch
 (
wö
, 
ACS_HLINE
);

82 
y
 = y + 
height
 + 1;

83 
	`wmove
(
wö
, 
y
, 
x
);

85 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + 
choi˚
 < item_no - 1)) {

86 
	`w©å£t
 (
wö
, 
d¨row_©å
);

87 
	`waddch
 (
wö
, 
ACS_DARROW
);

88 
	`wadd°r
 (
wö
, "(+)");

91 
	`w©å£t
 (
wö
, 
míubox_b‹dî_©å
);

92 
	`waddch
 (
wö
, 
ACS_HLINE
);

93 
	`waddch
 (
wö
, 
ACS_HLINE
);

94 
	`waddch
 (
wö
, 
ACS_HLINE
);

95 
	`waddch
 (
wö
, 
ACS_HLINE
);

97 
	}
}

103 
	$¥öt_buâ⁄s
–
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

105 
x
 = 
width
 / 2 - 11;

106 
y
 = 
height
 - 2;

108 
	`¥öt_buâ⁄
 (
dülog
, "Sñe˘", 
y
, 
x
, 
£À˘ed
 == 0);

109 
	`¥öt_buâ⁄
 (
dülog
, " Hñ∞", 
y
, 
x
 + 14, 
£À˘ed
 == 1);

111 
	`wmove
(
dülog
, 
y
, 
x
+1 + 14*
£À˘ed
);

112 
	`wª‰esh
 (
dülog
);

113 
	}
}

120 
	$dülog_checkli°
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

121 
li°_height
, 
ôem_no
, c⁄° * c⁄° * 
ôems
, 
Êag
)

124 
i
, 
x
, 
y
, 
box_x
, 
box_y
;

125 
key
 = 0, 
buâ⁄
 = 0, 
choi˚
 = 0, 
s¸ﬁl
 = 0, 
max_choi˚
, *
°©us
;

126 
WINDOW
 *
dülog
, *
li°
;

128 
checkÊag
 = 
Êag
;

131 i‡((
°©us
 = 
	`mÆloc
 ( (Ë* 
ôem_no
)Ë=
NULL
) {

132 
	`ídwö
 ();

133 
	`Ârötf
 (
°dîr
,

135 
	`exô
 (-1);

139 
i
 = 0; i < 
ôem_no
; i++) {

140 
°©us
[
i
] = !
	`°rˇ£cmp
 (
ôems
[i * 3 + 2], "on");

141 i‡(!
choi˚
 && 
°©us
[
i
])

142 
choi˚
 = 
i
;

145 
max_choi˚
 = 
	`MIN
 (
li°_height
, 
ôem_no
);

148 
x
 = (
COLS
 - 
width
) / 2;

149 
y
 = (
LINES
 - 
height
) / 2;

151 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

153 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

154 
	`key∑d
 (
dülog
, 
TRUE
);

156 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

157 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

158 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

159 
i
 = 0; i < 
width
 - 2; i++)

160 
	`waddch
 (
dülog
, 
ACS_HLINE
);

161 
	`w©å£t
 (
dülog
, 
dülog_©å
);

162 
	`waddch
 (
dülog
, 
ACS_RTEE
);

164 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

166 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

167 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

168 
tôÀ2
[
width
-2] = '\0';

169 
tôÀ
 = 
tôÀ2
;

172 i‡(
tôÀ
 !
NULL
) {

173 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

174 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

175 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

176 
	`waddch
 (
dülog
, ' ');

179 
	`w©å£t
 (
dülog
, 
dülog_©å
);

180 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

182 
li°_width
 = 
width
 - 6;

183 
box_y
 = 
height
 - 
li°_height
 - 5;

184 
box_x
 = (
width
 - 
li°_width
) / 2 - 1;

187 
li°
 = 
	`subwö
 (
dülog
, 
li°_height
, 
li°_width
, 
y
+
box_y
+1, 
x
+
box_x
+1);

189 
	`key∑d
 (
li°
, 
TRUE
);

192 
	`døw_box
 (
dülog
, 
box_y
, 
box_x
, 
li°_height
 + 2, 
li°_width
 + 2,

193 
míubox_b‹dî_©å
, 
míubox_©å
);

196 
check_x
 = 0;

197 
i
 = 0; i < 
ôem_no
; i++)

198 
check_x
 = 
	`MAX
 (check_x, + 
	`°æí
 (
ôems
[
i
 * 3 + 1]) + 4);

200 
check_x
 = (
li°_width
 - check_x) / 2;

201 
ôem_x
 = 
check_x
 + 4;

203 i‡(
choi˚
 >
li°_height
) {

204 
s¸ﬁl
 = 
choi˚
 - 
li°_height
 + 1;

205 
choi˚
 -
s¸ﬁl
;

209 
i
 = 0; i < 
max_choi˚
; i++) {

210 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
+
i
) * 3 + 1],

211 
°©us
[
i
+
s¸ﬁl
], i, i =
choi˚
);

214 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

215 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

217 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

219 
	`wnouåe‰esh
 (
li°
);

220 
	`wnouåe‰esh
 (
dülog
);

221 
	`doupd©e
 ();

223 
key
 !
ESC
) {

224 
key
 = 
	`wgëch
 (
dülog
);

226 
i
 = 0; i < 
max_choi˚
; i++)

227 i‡(
	`touµî
(
key
Ë=touµî(
ôems
[(
s¸ﬁl
+
i
)*3+1][0]))

231 i‡–
i
 < 
max_choi˚
 || 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

232 
key
 == '+' || key == '-' ) {

233 i‡(
key
 =
KEY_UP
 || key == '-') {

234 i‡(!
choi˚
) {

235 i‡(!
s¸ﬁl
)

238 i‡(
li°_height
 > 1) {

240 
	`¥öt_ôem
 (
li°
, 
ôems
[
s¸ﬁl
 * 3 + 1],

241 
°©us
[
s¸ﬁl
], 0, 
FALSE
);

242 
	`s¸ﬁlok
 (
li°
, 
TRUE
);

243 
	`ws¸l
 (
li°
, -1);

244 
	`s¸ﬁlok
 (
li°
, 
FALSE
);

246 
s¸ﬁl
--;

247 
	`¥öt_ôem
 (
li°
, 
ôems
[
s¸ﬁl
 * 3 + 1],

248 
°©us
[
s¸ﬁl
], 0, 
TRUE
);

249 
	`wnouåe‰esh
 (
li°
);

251 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

252 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

254 
	`wª‰esh
 (
dülog
);

258 
i
 = 
choi˚
 - 1;

259 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

260 i‡(
choi˚
 =
max_choi˚
 - 1) {

261 i‡(
s¸ﬁl
 + 
choi˚
 >
ôem_no
 - 1)

264 i‡(
li°_height
 > 1) {

266 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
max_choi˚
 - 1) * 3 + 1],

267 
°©us
[
s¸ﬁl
 + 
max_choi˚
 - 1],

268 
max_choi˚
 - 1, 
FALSE
);

269 
	`s¸ﬁlok
 (
li°
, 
TRUE
);

270 
	`s¸ﬁl
 (
li°
);

271 
	`s¸ﬁlok
 (
li°
, 
FALSE
);

273 
s¸ﬁl
++;

274 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
max_choi˚
 - 1) * 3 + 1],

275 
°©us
[
s¸ﬁl
 + 
max_choi˚
 - 1],

276 
max_choi˚
 - 1, 
TRUE
);

277 
	`wnouåe‰esh
 (
li°
);

279 
	`¥öt_¨rows
(
dülog
, 
choi˚
, 
ôem_no
, 
s¸ﬁl
,

280 
box_y
, 
box_x
 + 
check_x
 + 5, 
li°_height
);

282 
	`wª‰esh
 (
dülog
);

286 
i
 = 
choi˚
 + 1;

288 i‡(
i
 !
choi˚
) {

290 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 3 + 1],

291 
°©us
[
s¸ﬁl
 + 
choi˚
], choi˚, 
FALSE
);

293 
choi˚
 = 
i
;

294 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 3 + 1],

295 
°©us
[
s¸ﬁl
 + 
choi˚
], choi˚, 
TRUE
);

296 
	`wnouåe‰esh
 (
li°
);

297 
	`wª‰esh
 (
dülog
);

301 
key
) {

305 
	`dñwö
 (
dülog
);

306 
	`‰ì
 (
°©us
);

308 
TAB
:

309 
KEY_LEFT
:

310 
KEY_RIGHT
:

311 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

312 ? 1 : (
buâ⁄
 > 1 ? 0 : button);

314 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

315 
	`wª‰esh
 (
dülog
);

321 i‡(!
buâ⁄
) {

322 i‡(
Êag
 =
FLAG_CHECK
) {

323 
°©us
[
s¸ﬁl
 + 
choi˚
] = !status[scroll + choice];

324 
	`wmove
 (
li°
, 
choi˚
, 
check_x
);

325 
	`w©å£t
 (
li°
, 
check_£À˘ed_©å
);

326 
	`w¥ötw
 (
li°
, "[%c]", 
°©us
[
s¸ﬁl
 + 
choi˚
] ? 'X' : ' ');

328 i‡(!
°©us
[
s¸ﬁl
 + 
choi˚
]) {

329 
i
 = 0; i < 
ôem_no
; i++)

330 
°©us
[
i
] = 0;

331 
°©us
[
s¸ﬁl
 + 
choi˚
] = 1;

332 
i
 = 0; i < 
max_choi˚
; i++)

333 
	`¥öt_ôem
 (
li°
, 
ôems
[(
s¸ﬁl
 + 
i
) * 3 + 1],

334 
°©us
[
s¸ﬁl
 + 
i
], i, i =
choi˚
);

337 
	`wnouåe‰esh
 (
li°
);

338 
	`wª‰esh
 (
dülog
);

340 
i
 = 0; i < 
ôem_no
; i++) {

341 i‡(
°©us
[
i
]) {

342 i‡(
Êag
 =
FLAG_CHECK
) {

343 
	`Ârötf
 (
°dîr
, "\"%s\" ", 
ôems
[
i
 * 3]);

345 
	`Ârötf
 (
°dîr
, "%s", 
ôems
[
i
 * 3]);

351 
	`dñwö
 (
dülog
);

352 
	`‰ì
 (
°©us
);

353  
buâ⁄
;

356 
key
 = 
ESC
;

357 
ESC
:

362 
	`doupd©e
 ();

366 
	`dñwö
 (
dülog
);

367 
	`‰ì
 (
°©us
);

369 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/colors.h

29 
	#SCREEN_FG
 
COLOR_CYAN


	)

30 
	#SCREEN_BG
 
COLOR_BLUE


	)

31 
	#SCREEN_HL
 
TRUE


	)

33 
	#SHADOW_FG
 
COLOR_BLACK


	)

34 
	#SHADOW_BG
 
COLOR_BLACK


	)

35 
	#SHADOW_HL
 
TRUE


	)

37 
	#DIALOG_FG
 
COLOR_BLACK


	)

38 
	#DIALOG_BG
 
COLOR_WHITE


	)

39 
	#DIALOG_HL
 
FALSE


	)

41 
	#TITLE_FG
 
COLOR_YELLOW


	)

42 
	#TITLE_BG
 
COLOR_WHITE


	)

43 
	#TITLE_HL
 
TRUE


	)

45 
	#BORDER_FG
 
COLOR_WHITE


	)

46 
	#BORDER_BG
 
COLOR_WHITE


	)

47 
	#BORDER_HL
 
TRUE


	)

49 
	#BUTTON_ACTIVE_FG
 
COLOR_WHITE


	)

50 
	#BUTTON_ACTIVE_BG
 
COLOR_BLUE


	)

51 
	#BUTTON_ACTIVE_HL
 
TRUE


	)

53 
	#BUTTON_INACTIVE_FG
 
COLOR_BLACK


	)

54 
	#BUTTON_INACTIVE_BG
 
COLOR_WHITE


	)

55 
	#BUTTON_INACTIVE_HL
 
FALSE


	)

57 
	#BUTTON_KEY_ACTIVE_FG
 
COLOR_WHITE


	)

58 
	#BUTTON_KEY_ACTIVE_BG
 
COLOR_BLUE


	)

59 
	#BUTTON_KEY_ACTIVE_HL
 
TRUE


	)

61 
	#BUTTON_KEY_INACTIVE_FG
 
COLOR_RED


	)

62 
	#BUTTON_KEY_INACTIVE_BG
 
COLOR_WHITE


	)

63 
	#BUTTON_KEY_INACTIVE_HL
 
FALSE


	)

65 
	#BUTTON_LABEL_ACTIVE_FG
 
COLOR_YELLOW


	)

66 
	#BUTTON_LABEL_ACTIVE_BG
 
COLOR_BLUE


	)

67 
	#BUTTON_LABEL_ACTIVE_HL
 
TRUE


	)

69 
	#BUTTON_LABEL_INACTIVE_FG
 
COLOR_BLACK


	)

70 
	#BUTTON_LABEL_INACTIVE_BG
 
COLOR_WHITE


	)

71 
	#BUTTON_LABEL_INACTIVE_HL
 
TRUE


	)

73 
	#INPUTBOX_FG
 
COLOR_BLACK


	)

74 
	#INPUTBOX_BG
 
COLOR_WHITE


	)

75 
	#INPUTBOX_HL
 
FALSE


	)

77 
	#INPUTBOX_BORDER_FG
 
COLOR_BLACK


	)

78 
	#INPUTBOX_BORDER_BG
 
COLOR_WHITE


	)

79 
	#INPUTBOX_BORDER_HL
 
FALSE


	)

81 
	#SEARCHBOX_FG
 
COLOR_BLACK


	)

82 
	#SEARCHBOX_BG
 
COLOR_WHITE


	)

83 
	#SEARCHBOX_HL
 
FALSE


	)

85 
	#SEARCHBOX_TITLE_FG
 
COLOR_YELLOW


	)

86 
	#SEARCHBOX_TITLE_BG
 
COLOR_WHITE


	)

87 
	#SEARCHBOX_TITLE_HL
 
TRUE


	)

89 
	#SEARCHBOX_BORDER_FG
 
COLOR_WHITE


	)

90 
	#SEARCHBOX_BORDER_BG
 
COLOR_WHITE


	)

91 
	#SEARCHBOX_BORDER_HL
 
TRUE


	)

93 
	#POSITION_INDICATOR_FG
 
COLOR_YELLOW


	)

94 
	#POSITION_INDICATOR_BG
 
COLOR_WHITE


	)

95 
	#POSITION_INDICATOR_HL
 
TRUE


	)

97 
	#MENUBOX_FG
 
COLOR_BLACK


	)

98 
	#MENUBOX_BG
 
COLOR_WHITE


	)

99 
	#MENUBOX_HL
 
FALSE


	)

101 
	#MENUBOX_BORDER_FG
 
COLOR_WHITE


	)

102 
	#MENUBOX_BORDER_BG
 
COLOR_WHITE


	)

103 
	#MENUBOX_BORDER_HL
 
TRUE


	)

105 
	#ITEM_FG
 
COLOR_BLACK


	)

106 
	#ITEM_BG
 
COLOR_WHITE


	)

107 
	#ITEM_HL
 
FALSE


	)

109 
	#ITEM_SELECTED_FG
 
COLOR_WHITE


	)

110 
	#ITEM_SELECTED_BG
 
COLOR_BLUE


	)

111 
	#ITEM_SELECTED_HL
 
TRUE


	)

113 
	#TAG_FG
 
COLOR_YELLOW


	)

114 
	#TAG_BG
 
COLOR_WHITE


	)

115 
	#TAG_HL
 
TRUE


	)

117 
	#TAG_SELECTED_FG
 
COLOR_YELLOW


	)

118 
	#TAG_SELECTED_BG
 
COLOR_BLUE


	)

119 
	#TAG_SELECTED_HL
 
TRUE


	)

121 
	#TAG_KEY_FG
 
COLOR_YELLOW


	)

122 
	#TAG_KEY_BG
 
COLOR_WHITE


	)

123 
	#TAG_KEY_HL
 
TRUE


	)

125 
	#TAG_KEY_SELECTED_FG
 
COLOR_YELLOW


	)

126 
	#TAG_KEY_SELECTED_BG
 
COLOR_BLUE


	)

127 
	#TAG_KEY_SELECTED_HL
 
TRUE


	)

129 
	#CHECK_FG
 
COLOR_BLACK


	)

130 
	#CHECK_BG
 
COLOR_WHITE


	)

131 
	#CHECK_HL
 
FALSE


	)

133 
	#CHECK_SELECTED_FG
 
COLOR_WHITE


	)

134 
	#CHECK_SELECTED_BG
 
COLOR_BLUE


	)

135 
	#CHECK_SELECTED_HL
 
TRUE


	)

137 
	#UARROW_FG
 
COLOR_GREEN


	)

138 
	#UARROW_BG
 
COLOR_WHITE


	)

139 
	#UARROW_HL
 
TRUE


	)

141 
	#DARROW_FG
 
COLOR_GREEN


	)

142 
	#DARROW_BG
 
COLOR_WHITE


	)

143 
	#DARROW_HL
 
TRUE


	)

147 
	#C_ATTR
(
x
,
y
Ë((x ? 
A_BOLD
 : 0Ë| 
	`COLOR_PAIR
((y)))

	)

148 
	#COLOR_NAME_LEN
 10

	)

149 
	#COLOR_COUNT
 8

	)

156 
	m«me
[
COLOR_NAME_LEN
];

157 
	mvÆue
;

158 } 
	tcﬁ‹_«mes_°
;

160 
cﬁ‹_«mes_°
 
cﬁ‹_«mes
[];

161 
cﬁ‹_èbÀ
[][3];

	@/usr/src/rtai/base/config/kconfig/lxdialog/dialog.h

22 
	~<sys/ty≥s.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~<˘y≥.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 #ö˛udê
CURSES_LOC


39 #i‡
deföed
(
NCURSES_VERSION
Ë&& deföed(
_NEED_WRAP
Ë&& !deföed(
GCC_PRINTFLIKE
)

40 
	#OLD_NCURSES
 1

	)

41 #unde‡
wbkgd£t


42 
	#wbkgd£t
(
w
,
p
Ë

	)

44 
	#OLD_NCURSES
 0

	)

47 
	#TR
(
∑øms
Ë
_åa˚f
 
	)
params

49 
	#ESC
 27

	)

50 
	#TAB
 9

	)

51 
	#MAX_LEN
 2048

	)

52 
	#BUF_SIZE
 (10*1024)

	)

53 
	#MIN
(
x
,
y
Ë(x < y ? x : y)

	)

54 
	#MAX
(
x
,
y
Ë(x > y ? x : y)

	)

57 #i‚de‡
ACS_ULCORNER


58 
	#ACS_ULCORNER
 '+'

	)

60 #i‚de‡
ACS_LLCORNER


61 
	#ACS_LLCORNER
 '+'

	)

63 #i‚de‡
ACS_URCORNER


64 
	#ACS_URCORNER
 '+'

	)

66 #i‚de‡
ACS_LRCORNER


67 
	#ACS_LRCORNER
 '+'

	)

69 #i‚de‡
ACS_HLINE


70 
	#ACS_HLINE
 '-'

	)

72 #i‚de‡
ACS_VLINE


73 
	#ACS_VLINE
 '|'

	)

75 #i‚de‡
ACS_LTEE


76 
	#ACS_LTEE
 '+'

	)

78 #i‚de‡
ACS_RTEE


79 
	#ACS_RTEE
 '+'

	)

81 #i‚de‡
ACS_UARROW


82 
	#ACS_UARROW
 '^'

	)

84 #i‚de‡
ACS_DARROW


85 
	#ACS_DARROW
 'v'

	)

91 
	#s¸ìn_©å
 
©åibuãs
[0]

	)

92 
	#shadow_©å
 
©åibuãs
[1]

	)

93 
	#dülog_©å
 
©åibuãs
[2]

	)

94 
	#tôÀ_©å
 
©åibuãs
[3]

	)

95 
	#b‹dî_©å
 
©åibuãs
[4]

	)

96 
	#buâ⁄_a˘ive_©å
 
©åibuãs
[5]

	)

97 
	#buâ⁄_öa˘ive_©å
 
©åibuãs
[6]

	)

98 
	#buâ⁄_key_a˘ive_©å
 
©åibuãs
[7]

	)

99 
	#buâ⁄_key_öa˘ive_©å
 
©åibuãs
[8]

	)

100 
	#buâ⁄_œbñ_a˘ive_©å
 
©åibuãs
[9]

	)

101 
	#buâ⁄_œbñ_öa˘ive_©å
 
©åibuãs
[10]

	)

102 
	#öputbox_©å
 
©åibuãs
[11]

	)

103 
	#öputbox_b‹dî_©å
 
©åibuãs
[12]

	)

104 
	#£¨chbox_©å
 
©åibuãs
[13]

	)

105 
	#£¨chbox_tôÀ_©å
 
©åibuãs
[14]

	)

106 
	#£¨chbox_b‹dî_©å
 
©åibuãs
[15]

	)

107 
	#posôi⁄_ödiˇt‹_©å
 
©åibuãs
[16]

	)

108 
	#míubox_©å
 
©åibuãs
[17]

	)

109 
	#míubox_b‹dî_©å
 
©åibuãs
[18]

	)

110 
	#ôem_©å
 
©åibuãs
[19]

	)

111 
	#ôem_£À˘ed_©å
 
©åibuãs
[20]

	)

112 
	#èg_©å
 
©åibuãs
[21]

	)

113 
	#èg_£À˘ed_©å
 
©åibuãs
[22]

	)

114 
	#èg_key_©å
 
©åibuãs
[23]

	)

115 
	#èg_key_£À˘ed_©å
 
©åibuãs
[24]

	)

116 
	#check_©å
 
©åibuãs
[25]

	)

117 
	#check_£À˘ed_©å
 
©åibuãs
[26]

	)

118 
	#u¨row_©å
 
©åibuãs
[27]

	)

119 
	#d¨row_©å
 
©åibuãs
[28]

	)

122 
	#ATTRIBUTE_COUNT
 29

	)

127 
boﬁ
 
u£_cﬁ‹s
;

128 
boﬁ
 
u£_shadow
;

130 
chty≥
 
©åibuãs
[];

132 c⁄° *
backtôÀ
;

137 
¸óã_rc
 (c⁄° *
fûíame
);

138 
∑r£_rc
 ();

141 
öô_dülog
 ();

142 
íd_dülog
 ();

143 
©å_˛ór
 (
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
);

144 
dülog_˛ór
 ();

145 
cﬁ‹_£tup
 ();

146 
¥öt_autowøp
 (
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
);

147 
¥öt_buâ⁄
 (
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
);

148 
døw_box
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
, 
chty≥
 
box
,

149 
chty≥
 
b‹dî
);

150 
døw_shadow
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
);

152 
fú°_Æpha
 (c⁄° *
°rög
, c⁄° *
exem±
);

153 
dülog_ye¢o
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
);

154 
dülog_msgbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

155 
width
, 
∑u£
);

156 
dülog_ãxtbox
 (c⁄° *
tôÀ
, c⁄° *
fûe
, 
height
, 
width
);

157 
dülog_míu
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

158 
míu_height
, c⁄° *
choi˚
, 
ôem_no
,

159 c⁄° * c⁄° * 
ôems
);

160 
dülog_checkli°
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

161 
width
, 
li°_height
, 
ôem_no
,

162 c⁄° * c⁄° * 
ôems
, 
Êag
);

163 
dülog_öput_ªsu…
[];

164 
dülog_öputbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
,

165 
width
, c⁄° *
öô
);

176 
	#M_EVENT
 (
KEY_MAX
+1)

	)

183 
	#FLAG_CHECK
 1

	)

184 
	#FLAG_RADIO
 0

	)

	@/usr/src/rtai/base/config/kconfig/lxdialog/inputbox.c

22 
	~"dülog.h
"

24 
	gdülog_öput_ªsu…
[
MAX_LEN
 + 1];

30 
	$¥öt_buâ⁄s
(
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

32 
x
 = 
width
 / 2 - 11;

33 
y
 = 
height
 - 2;

35 
	`¥öt_buâ⁄
 (
dülog
, " Ok ", 
y
, 
x
, 
£À˘ed
==0);

36 
	`¥öt_buâ⁄
 (
dülog
, " Hñ∞", 
y
, 
x
 + 14, 
£À˘ed
==1);

38 
	`wmove
(
dülog
, 
y
, 
x
+1+14*
£À˘ed
);

39 
	`wª‰esh
(
dülog
);

40 
	}
}

46 
	$dülog_öputbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

47 c⁄° *
öô
)

49 
i
, 
x
, 
y
, 
box_y
, 
box_x
, 
box_width
;

50 
öput_x
 = 0, 
s¸ﬁl
 = 0, 
key
 = 0, 
buâ⁄
 = -1;

51 *
ö°r
 = 
dülog_öput_ªsu…
;

52 
WINDOW
 *
dülog
;

55 
x
 = (
COLS
 - 
width
) / 2;

56 
y
 = (
LINES
 - 
height
) / 2;

59 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

61 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

62 
	`key∑d
 (
dülog
, 
TRUE
);

64 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

65 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

66 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

67 
i
 = 0; i < 
width
 - 2; i++)

68 
	`waddch
 (
dülog
, 
ACS_HLINE
);

69 
	`w©å£t
 (
dülog
, 
dülog_©å
);

70 
	`waddch
 (
dülog
, 
ACS_RTEE
);

72 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

74 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

75 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

76 
tôÀ2
[
width
-2] = '\0';

77 
tôÀ
 = 
tôÀ2
;

80 i‡(
tôÀ
 !
NULL
) {

81 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

82 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

83 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

84 
	`waddch
 (
dülog
, ' ');

87 
	`w©å£t
 (
dülog
, 
dülog_©å
);

88 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

91 
box_width
 = 
width
 - 6;

92 
	`gëyx
 (
dülog
, 
y
, 
x
);

93 
box_y
 = 
y
 + 2;

94 
box_x
 = (
width
 - 
box_width
) / 2;

95 
	`døw_box
 (
dülog
, 
y
 + 1, 
box_x
 - 1, 3, 
box_width
 + 2,

96 
b‹dî_©å
, 
dülog_©å
);

98 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

101 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

102 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

104 i‡(!
öô
)

105 
ö°r
[0] = '\0';

107 
	`°r˝y
 (
ö°r
, 
öô
);

109 
öput_x
 = 
	`°æí
 (
ö°r
);

111 i‡(
öput_x
 >
box_width
) {

112 
s¸ﬁl
 = 
öput_x
 - 
box_width
 + 1;

113 
öput_x
 = 
box_width
 - 1;

114 
i
 = 0; i < 
box_width
 - 1; i++)

115 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
i
]);

117 
	`wadd°r
 (
dülog
, 
ö°r
);

119 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

121 
	`wª‰esh
 (
dülog
);

123 
key
 !
ESC
) {

124 
key
 = 
	`wgëch
 (
dülog
);

126 i‡(
buâ⁄
 == -1) {

127 
key
) {

128 
TAB
:

129 
KEY_UP
:

130 
KEY_DOWN
:

132 
KEY_LEFT
:

134 
KEY_RIGHT
:

136 
KEY_BACKSPACE
:

138 i‡(
öput_x
 || 
s¸ﬁl
) {

139 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

140 i‡(!
öput_x
) {

141 
s¸ﬁl
 = s¸ﬁ»< 
box_width
 - 1 ?

142 0 : 
s¸ﬁl
 - (
box_width
 - 1);

143 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

144 
i
 = 0; i < 
box_width
; i++)

145 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 
i
] ?

146 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 
i
] : ' ');

147 
öput_x
 = 
	`°æí
 (
ö°r
Ë- 
s¸ﬁl
;

149 
öput_x
--;

150 
ö°r
[
s¸ﬁl
 + 
öput_x
] = '\0';

151 
	`mvwaddch
 (
dülog
, 
box_y
, 
öput_x
 + 
box_x
, ' ');

152 
	`wmove
 (
dülog
, 
box_y
, 
öput_x
 + 
box_x
);

153 
	`wª‰esh
 (
dülog
);

157 i‡(
key
 < 0x100 && 
	`i•röt
 (key)) {

158 i‡(
s¸ﬁl
 + 
öput_x
 < 
MAX_LEN
) {

159 
	`w©å£t
 (
dülog
, 
öputbox_©å
);

160 
ö°r
[
s¸ﬁl
 + 
öput_x
] = 
key
;

161 
ö°r
[
s¸ﬁl
 + 
öput_x
 + 1] = '\0';

162 i‡(
öput_x
 =
box_width
 - 1) {

163 
s¸ﬁl
++;

164 
	`wmove
 (
dülog
, 
box_y
, 
box_x
);

165 
i
 = 0; i < 
box_width
 - 1; i++)

166 
	`waddch
 (
dülog
, 
ö°r
[
s¸ﬁl
 + 
i
]);

168 
	`wmove
 (
dülog
, 
box_y
, 
öput_x
++ + 
box_x
);

169 
	`waddch
 (
dülog
, 
key
);

171 
	`wª‰esh
 (
dülog
);

173 
	`Êash
 ();

178 
key
) {

181 
	`dñwö
 (
dülog
);

185 
	`dñwö
 (
dülog
);

187 
KEY_UP
:

188 
KEY_LEFT
:

189 
buâ⁄
) {

191 
buâ⁄
 = 1;

192 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

195 
buâ⁄
 = -1;

196 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

197 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

198 
	`wª‰esh
 (
dülog
);

201 
buâ⁄
 = 0;

202 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

206 
TAB
:

207 
KEY_DOWN
:

208 
KEY_RIGHT
:

209 
buâ⁄
) {

211 
buâ⁄
 = 0;

212 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

215 
buâ⁄
 = 1;

216 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 1);

219 
buâ⁄
 = -1;

220 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

221 
	`wmove
 (
dülog
, 
box_y
, 
box_x
 + 
öput_x
);

222 
	`wª‰esh
 (
dülog
);

228 
	`dñwö
 (
dülog
);

229  (
buâ⁄
 == -1 ? 0 : button);

232 
key
 = 
ESC
;

233 
ESC
:

238 
	`dñwö
 (
dülog
);

240 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/lxdialog.c

22 
	~"dülog.h
"

24 
Ußge
 (c⁄° *
«me
);

26 (
	tjum≥rFn
Ë(c⁄° *
	ttôÀ
, 
	t¨gc
, c⁄° * c⁄° * 
	t¨gv
);

28 
	sMode
 {

29 *
«me
;

30 
¨gmö
, 
¨gmax
, 
¨gmod
;

31 
jum≥rFn
 *
jum≥r
;

34 
jum≥rFn
 
j_míu
, 
j_checkli°
, 
j_ødiﬁi°
, 
j_ye¢o
, 
j_ãxtbox
, 
j_öputbox
;

35 
jum≥rFn
 
j_msgbox
, 
j_öfobox
;

37 
Mode
 
modes
[] =

39 {"--míu", 9, 0, 3, 
j_míu
},

40 {"--checkli°", 9, 0, 3, 
j_checkli°
},

41 {"--ødiﬁi°", 9, 0, 3, 
j_ødiﬁi°
},

42 {"--ye¢o", 5,5,1, 
j_ye¢o
},

43 {"--ãxtbox", 5,5,1, 
j_ãxtbox
},

44 {"--öputbox", 5, 6, 1, 
j_öputbox
},

45 {"--msgbox", 5, 5, 1, 
j_msgbox
},

46 {"--öfobox", 5, 5, 1, 
j_öfobox
},

47 {
NULL
, 0, 0, 0, NULL}

48 
	}
};

50 
Mode
 *
	gmodePå
;

52 #ifde‡
LOCALE


53 
	~<loˇÀ.h
>

57 
	$maö
 (
¨gc
, c⁄° * c⁄° * 
¨gv
)

59 
off£t
 = 0, 
˛ór_s¸ìn
 = 0, 
íd_comm⁄_›ts
 = 0, 
ªtvÆ
;

60 c⁄° *
tôÀ
 = 
NULL
;

62 #ifde‡
LOCALE


63 (Ë
	`£éoˇÀ
 (
LC_ALL
, "");

66 #ifde‡
TRACE


67 
	`åa˚
(
TRACE_CALLS
|
TRACE_UPDATE
);

69 i‡(
¨gc
 < 2) {

70 
	`Ußge
 (
¨gv
[0]);

71 
	`exô
 (-1);

74 
off£t
 < 
¨gc
 - 1 && !
íd_comm⁄_›ts
) {

75 i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--title")) {

76 i‡(
¨gc
 - 
off£t
 < 3 || 
tôÀ
 !
NULL
) {

77 
	`Ußge
 (
¨gv
[0]);

78 
	`exô
 (-1);

80 
tôÀ
 = 
¨gv
[
off£t
 + 2];

81 
off£t
 += 2;

83 } i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--backtitle")) {

84 i‡(
backtôÀ
 !
NULL
) {

85 
	`Ußge
 (
¨gv
[0]);

86 
	`exô
 (-1);

88 
backtôÀ
 = 
¨gv
[
off£t
 + 2];

89 
off£t
 += 2;

91 } i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], "--clear")) {

92 i‡(
˛ór_s¸ìn
) {

93 
	`Ußge
 (
¨gv
[0]);

94 
	`exô
 (-1);

95 } i‡(
¨gc
 == 2) {

96 
	`öô_dülog
 ();

97 
	`ª‰esh
 ();

98 
	`íd_dülog
 ();

101 
˛ór_s¸ìn
 = 1;

102 
off£t
++;

105 
íd_comm⁄_›ts
 = 1;

108 i‡(
¨gc
 - 1 =
off£t
) {

109 
	`Ußge
 (
¨gv
[0]);

110 
	`exô
 (-1);

114 
modePå
 = 
modes
; modePå->
«me
; modePtr++)

115 i‡(!
	`°rcmp
 (
¨gv
[
off£t
 + 1], 
modePå
->
«me
))

118 i‡(!
modePå
->
«me
)

119 
	`Ußge
 (
¨gv
[0]);

120 i‡(
¨gc
 - 
off£t
 < 
modePå
->
¨gmö
)

121 
	`Ußge
 (
¨gv
[0]);

122 i‡(
modePå
->
¨gmax
 && 
¨gc
 - 
off£t
 > modePtr->argmax)

123 
	`Ußge
 (
¨gv
[0]);

127 
	`öô_dülog
 ();

128 
ªtvÆ
 = (*(
modePå
->
jum≥r
)Ë(
tôÀ
, 
¨gc
 - 
off£t
, 
¨gv
 + offset);

130 i‡(
˛ór_s¸ìn
) {

131 
	`©å_˛ór
 (
°ds¸
, 
LINES
, 
COLS
, 
s¸ìn_©å
);

132 
	`ª‰esh
 ();

134 
	`íd_dülog
();

136 
	`exô
 (
ªtvÆ
);

137 
	}
}

143 
	$Ußge
 (c⁄° *
«me
)

145 
	`Ârötf
 (
°dîr
, "\
\ndülog, by SaviÿLam (œm836@cs.cuhk.hk).\
\¿Ö©ched by Stu¨àHîbîà(S.Hîbît@shef.ac.uk)\
\¿ modifõd/guâed f‹ u£á†®Löux kî√»c⁄figÅoﬁ by \
\¿ Wûlüm Rﬂdˇ∞‘ﬂdˇpw@cfw.com)\
\n\
\n* Di•œy dülog boxe†‰om shñ»s¸ùt†*\
\n\
\nUßge: %†--˛ór\
\¿ %†[--tôÀ <tôÀ>] [--backtôÀ <backtôÀ>] --˛ó∏<Box o±i⁄s>\
\n\
\nBox o±i⁄s:\
\n\
\¿ --míu <ãxt> <height> <width> <míu height> <èg1> <ôem1>...\
\¿ --checkli° <ãxt> <height> <width> <li° height> <èg1> <ôem1> <°©us1>...\
\¿ --ødiﬁi° <ãxt> <height> <width> <li° height> <èg1> <ôem1> <°©us1>...\
\¿ --ãxtbox <fûe> <height> <width>\
\¿ --öputbox <ãxt> <height> <width> [<öô>]\
\¿ --ye¢ÿ <ãxt> <height> <width>\
\n", 
«me
,Çame);

165 
	`exô
 (-1);

166 
	}
}

173 
	$j_míu
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

175  
	`dülog_míu
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

176 
	`©oi
 (
av
[5]),áv[6], (
ac
 - 6) / 2,áv + 7);

177 
	}
}

180 
	$j_checkli°
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

182  
	`dülog_checkli°
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

183 
	`©oi
 (
av
[5]), (
ac
 - 6Ë/ 3,áv + 6, 
FLAG_CHECK
);

184 
	}
}

187 
	$j_ødiﬁi°
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

189  
	`dülog_checkli°
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

190 
	`©oi
 (
av
[5]), (
ac
 - 6Ë/ 3,áv + 6, 
FLAG_RADIO
);

191 
	}
}

194 
	$j_ãxtbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

196  
	`dülog_ãxtbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]));

197 
	}
}

200 
	$j_ye¢o
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

202  
	`dülog_ye¢o
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]));

203 
	}
}

206 
	$j_öputbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

208 
ªt
 = 
	`dülog_öputbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]),

209 
ac
 =6 ? 
av
[5] : (*Ë
NULL
);

210 i‡(
ªt
 == 0)

211 
	`Ârötf
(
°dîr
, 
dülog_öput_ªsu…
);

212  
ªt
;

213 
	}
}

216 
	$j_msgbox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

218  
	`dülog_msgbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]), 1);

219 
	}
}

222 
	$j_öfobox
 (c⁄° *
t
, 
ac
, c⁄° * c⁄° * 
av
)

224  
	`dülog_msgbox
 (
t
, 
av
[2], 
	`©oi
 (av[3]),átoi (av[4]), 0);

225 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/menubox.c

59 
	~"dülog.h
"

61 
	gmíu_width
, 
	gôem_x
;

67 
	$¥öt_ôem
 (
WINDOW
 * 
wö
, c⁄° *
ôem
, 
choi˚
, 
£À˘ed
, 
hŸkey
)

69 
j
;

70 
míu_ôem
[
míu_width
+1];

72 
	`°∫˝y
(
míu_ôem
, 
ôem
, 
míu_width
);

73 
míu_ôem
[
míu_width
] = 0;

74 
j
 = 
	`fú°_Æpha
(
míu_ôem
, "YyNnMm");

77 
	`w©å£t
 (
wö
, 
míubox_©å
);

78 
	`wmove
 (
wö
, 
choi˚
, 0);

79 #i‡
OLD_NCURSES


81 
i
;

82 
i
 = 0; i < 
míu_width
; i++)

83 
	`waddch
 (
wö
, ' ');

86 
	`w˛π€ﬁ
(
wö
);

88 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
ôem_£À˘ed_©å
 : 
ôem_©å
);

89 
	`mvwadd°r
 (
wö
, 
choi˚
, 
ôem_x
, 
míu_ôem
);

90 i‡(
hŸkey
) {

91 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
èg_key_£À˘ed_©å
 : 
èg_key_©å
);

92 
	`mvwaddch
(
wö
, 
choi˚
, 
ôem_x
+
j
, 
míu_ôem
[j]);

94 i‡(
£À˘ed
) {

95 
	`wmove
 (
wö
, 
choi˚
, 
ôem_x
+1);

96 
	`wª‰esh
 (
wö
);

98 
	}
}

104 
	$¥öt_¨rows
 (
WINDOW
 * 
wö
, 
ôem_no
, 
s¸ﬁl
,

105 
y
, 
x
, 
height
)

107 
cur_y
, 
cur_x
;

109 
	`gëyx
(
wö
, 
cur_y
, 
cur_x
);

111 
	`wmove
(
wö
, 
y
, 
x
);

113 i‡(
s¸ﬁl
 > 0) {

114 
	`w©å£t
 (
wö
, 
u¨row_©å
);

115 
	`waddch
 (
wö
, 
ACS_UARROW
);

116 
	`wadd°r
 (
wö
, "(-)");

119 
	`w©å£t
 (
wö
, 
míubox_©å
);

120 
	`waddch
 (
wö
, 
ACS_HLINE
);

121 
	`waddch
 (
wö
, 
ACS_HLINE
);

122 
	`waddch
 (
wö
, 
ACS_HLINE
);

123 
	`waddch
 (
wö
, 
ACS_HLINE
);

126 
y
 = y + 
height
 + 1;

127 
	`wmove
(
wö
, 
y
, 
x
);

129 i‡((
height
 < 
ôem_no
Ë&& (
s¸ﬁl
 + height < item_no)) {

130 
	`w©å£t
 (
wö
, 
d¨row_©å
);

131 
	`waddch
 (
wö
, 
ACS_DARROW
);

132 
	`wadd°r
 (
wö
, "(+)");

135 
	`w©å£t
 (
wö
, 
míubox_b‹dî_©å
);

136 
	`waddch
 (
wö
, 
ACS_HLINE
);

137 
	`waddch
 (
wö
, 
ACS_HLINE
);

138 
	`waddch
 (
wö
, 
ACS_HLINE
);

139 
	`waddch
 (
wö
, 
ACS_HLINE
);

142 
	`wmove
(
wö
, 
cur_y
, 
cur_x
);

143 
	}
}

149 
	$¥öt_buâ⁄s
 (
WINDOW
 *
wö
, 
height
, 
width
, 
£À˘ed
)

151 
x
 = 
width
 / 2 - 16;

152 
y
 = 
height
 - 2;

154 
	`¥öt_buâ⁄
 (
wö
, "Sñe˘", 
y
, 
x
, 
£À˘ed
 == 0);

155 
	`¥öt_buâ⁄
 (
wö
, " Exô ", 
y
, 
x
 + 12, 
£À˘ed
 == 1);

156 
	`¥öt_buâ⁄
 (
wö
, " Hñ∞", 
y
, 
x
 + 24, 
£À˘ed
 == 2);

158 
	`wmove
(
wö
, 
y
, 
x
+1+12*
£À˘ed
);

159 
	`wª‰esh
 (
wö
);

160 
	}
}

166 
	$dülog_míu
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

167 
míu_height
, c⁄° *
cuºít
, 
ôem_no
,

168 c⁄° * c⁄° * 
ôems
)

171 
i
, 
j
, 
x
, 
y
, 
box_x
, 
box_y
;

172 
key
 = 0, 
buâ⁄
 = 0, 
s¸ﬁl
 = 0, 
choi˚
 = 0, 
fú°_ôem
 = 0, 
max_choi˚
;

173 
WINDOW
 *
dülog
, *
míu
;

174 
FILE
 *
f
;

176 
max_choi˚
 = 
	`MIN
 (
míu_height
, 
ôem_no
);

179 
x
 = (
COLS
 - 
width
) / 2;

180 
y
 = (
LINES
 - 
height
) / 2;

182 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

184 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

185 
	`key∑d
 (
dülog
, 
TRUE
);

187 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

188 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

189 
	`mvwaddch
 (
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

190 
i
 = 0; i < 
width
 - 2; i++)

191 
	`waddch
 (
dülog
, 
ACS_HLINE
);

192 
	`w©å£t
 (
dülog
, 
dülog_©å
);

193 
	`wbkgd£t
 (
dülog
, 
dülog_©å
 & 
A_COLOR
);

194 
	`waddch
 (
dülog
, 
ACS_RTEE
);

196 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

198 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

199 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

200 
tôÀ2
[
width
-2] = '\0';

201 
tôÀ
 = 
tôÀ2
;

204 i‡(
tôÀ
 !
NULL
) {

205 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

206 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

207 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

208 
	`waddch
 (
dülog
, ' ');

211 
	`w©å£t
 (
dülog
, 
dülog_©å
);

212 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

214 
míu_width
 = 
width
 - 6;

215 
box_y
 = 
height
 - 
míu_height
 - 5;

216 
box_x
 = (
width
 - 
míu_width
) / 2 - 1;

219 
míu
 = 
	`subwö
 (
dülog
, 
míu_height
, 
míu_width
,

220 
y
 + 
box_y
 + 1, 
x
 + 
box_x
 + 1);

221 
	`key∑d
 (
míu
, 
TRUE
);

224 
	`døw_box
 (
dülog
, 
box_y
, 
box_x
, 
míu_height
 + 2, 
míu_width
 + 2,

225 
míubox_b‹dî_©å
, 
míubox_©å
);

231 
ôem_x
 = 0;

232 
i
 = 0; i < 
ôem_no
; i++) {

233 
ôem_x
 = 
	`MAX
 (ôem_x, 
	`MIN
(
míu_width
, 
	`°æí
 (
ôems
[
i
 * 2 + 1]) + 2));

234 i‡(
	`°rcmp
(
cuºít
, 
ôems
[
i
*2]Ë=0Ë
choi˚
 = i;

237 
ôem_x
 = (
míu_width
 - item_x) / 2;

240 i‡–(
f
=
	`f›í
("lxdülog.s¸…mp","r")Ë!
NULL
 ) {

241 i‡–(
	`fsˇnf
(
f
,"%d\n",&
s¸ﬁl
Ë=1Ë&& (s¸ﬁ»<
choi˚
) &&

242 (
s¸ﬁl
+
max_choi˚
 > 
choi˚
) && (scroll >= 0) &&

243 (
s¸ﬁl
+
max_choi˚
 <
ôem_no
) ) {

244 
fú°_ôem
 = 
s¸ﬁl
;

245 
choi˚
 = choi˚ - 
s¸ﬁl
;

246 
	`f˛o£
(
f
);

248 
s¸ﬁl
=0;

249 
	`ªmove
("lxdialog.scrltmp");

250 
	`f˛o£
(
f
);

251 
f
=
NULL
;

254 i‡–(
choi˚
 >
max_choi˚
Ë|| (
f
==
NULL
 && choice >= max_choice/2) ) {

255 i‡(
choi˚
 >
ôem_no
-
max_choi˚
/2)

256 
s¸ﬁl
 = 
fú°_ôem
 = 
ôem_no
-
max_choi˚
;

258 
s¸ﬁl
 = 
fú°_ôem
 = 
choi˚
 - 
max_choi˚
/2;

259 
choi˚
 = choi˚ - 
s¸ﬁl
;

263 
i
=0; i < 
max_choi˚
; i++) {

264 
	`¥öt_ôem
 (
míu
, 
ôems
[(
fú°_ôem
 + 
i
Ë* 2 + 1], i, i =
choi˚
,

265 (
ôems
[(
fú°_ôem
 + 
i
)*2][0] != ':'));

268 
	`wnouåe‰esh
 (
míu
);

270 
	`¥öt_¨rows
(
dülog
, 
ôem_no
, 
s¸ﬁl
,

271 
box_y
, 
box_x
+
ôem_x
+1, 
míu_height
);

273 
	`¥öt_buâ⁄s
 (
dülog
, 
height
, 
width
, 0);

274 
	`wmove
 (
míu
, 
choi˚
, 
ôem_x
+1);

275 
	`wª‰esh
 (
míu
);

277 
key
 !
ESC
) {

278 
key
 = 
	`wgëch
(
míu
);

280 i‡(
key
 < 256 && 
	`ißÕha
(key)Ëkey = 
	`tﬁowî
(key);

282 i‡(
	`°rchr
("ynm", 
key
))

283 
i
 = 
max_choi˚
;

285 
i
 = 
choi˚
+1; i < 
max_choi˚
; i++) {

286 
j
 = 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
+
i
)*2+1], "YyNnMm");

287 i‡(
key
 =
	`tﬁowî
(
ôems
[(
s¸ﬁl
+
i
)*2+1][
j
]))

290 i‡(
i
 =
max_choi˚
)

291 
i
 = 0; i < 
max_choi˚
; i++) {

292 
j
 = 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
+
i
)*2+1], "YyNnMm");

293 i‡(
key
 =
	`tﬁowî
(
ôems
[(
s¸ﬁl
+
i
)*2+1][
j
]))

298 i‡(
i
 < 
max_choi˚
 ||

299 
key
 =
KEY_UP
 || key =
KEY_DOWN
 ||

300 
key
 == '-' || key == '+' ||

301 
key
 =
KEY_PPAGE
 || key =
KEY_NPAGE
) {

303 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
FALSE
,

304 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

306 i‡(
key
 =
KEY_UP
 || key == '-') {

307 i‡(
choi˚
 < 2 && 
s¸ﬁl
) {

309 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

310 
	`ws¸l
 (
míu
, -1);

311 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

313 
s¸ﬁl
--;

315 
	`¥öt_ôem
 (
míu
, 
ôems
[
s¸ﬁl
 * 2 + 1], 0, 
FALSE
,

316 (
ôems
[
s¸ﬁl
*2][0] != ':'));

318 
choi˚
 = 
	`MAX
(choice - 1, 0);

320 } i‡(
key
 =
KEY_DOWN
 || key == '+') {

322 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
FALSE
,

323 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

325 i‡((
choi˚
 > 
max_choi˚
-3) &&

326 (
s¸ﬁl
 + 
max_choi˚
 < 
ôem_no
)

329 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

330 
	`s¸ﬁl
 (
míu
);

331 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

333 
s¸ﬁl
++;

335 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2+1],

336 
max_choi˚
-1, 
FALSE
,

337 (
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2][0] != ':'));

339 
choi˚
 = 
	`MIN
(choi˚+1, 
max_choi˚
-1);

341 } i‡(
key
 =
KEY_PPAGE
) {

342 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

343 
i
=0; (ò< 
max_choi˚
); i++) {

344 i‡(
s¸ﬁl
 > 0) {

345 
	`ws¸l
 (
míu
, -1);

346 
s¸ﬁl
--;

347 
	`¥öt_ôem
 (
míu
, 
ôems
[
s¸ﬁl
 * 2 + 1], 0, 
FALSE
,

348 (
ôems
[
s¸ﬁl
*2][0] != ':'));

350 i‡(
choi˚
 > 0)

351 
choi˚
--;

354 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

356 } i‡(
key
 =
KEY_NPAGE
) {

357 
i
=0; (ò< 
max_choi˚
); i++) {

358 i‡(
s¸ﬁl
+
max_choi˚
 < 
ôem_no
) {

359 
	`s¸ﬁlok
 (
míu
, 
TRUE
);

360 
	`s¸ﬁl
(
míu
);

361 
	`s¸ﬁlok
 (
míu
, 
FALSE
);

362 
s¸ﬁl
++;

363 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2+1],

364 
max_choi˚
-1, 
FALSE
,

365 (
ôems
[(
s¸ﬁl
+
max_choi˚
-1)*2][0] != ':'));

367 i‡(
choi˚
+1 < 
max_choi˚
)

368 
choi˚
++;

373 
choi˚
 = 
i
;

375 
	`¥öt_ôem
 (
míu
, 
ôems
[(
s¸ﬁl
+
choi˚
)*2+1], choi˚, 
TRUE
,

376 (
ôems
[(
s¸ﬁl
+
choi˚
)*2][0] != ':'));

378 
	`¥öt_¨rows
(
dülog
, 
ôem_no
, 
s¸ﬁl
,

379 
box_y
, 
box_x
+
ôem_x
+1, 
míu_height
);

381 
	`wnouåe‰esh
 (
dülog
);

382 
	`wª‰esh
 (
míu
);

387 
key
) {

388 
KEY_LEFT
:

389 
TAB
:

390 
KEY_RIGHT
:

391 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

392 ? 2 : (
buâ⁄
 > 2 ? 0 : button);

394 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

395 
	`wª‰esh
 (
míu
);

403 i‡–(
f
=
	`f›í
("lxdülog.s¸…mp","w")Ë!
NULL
 ) {

404 
	`Ârötf
(
f
,"%d\n",
s¸ﬁl
);

405 
	`f˛o£
(
f
);

407 
	`dñwö
 (
dülog
);

408 
	`Ârötf
(
°dîr
, "%s\n", 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2]);

409 
key
) {

419 
buâ⁄
 = 2;

421 
	`dñwö
 (
dülog
);

422 i‡(
buâ⁄
 == 2)

423 
	`Ârötf
(
°dîr
, "%s \"%s\"\n",

424 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2],

425 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2 + 1] +

426 
	`fú°_Æpha
(
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2 + 1],""));

428 
	`Ârötf
(
°dîr
, "%s\n", 
ôems
[(
s¸ﬁl
 + 
choi˚
) * 2]);

430 
	`ªmove
("lxdialog.scrltmp");

431  
buâ⁄
;

434 
key
 = 
ESC
;

435 
ESC
:

440 
	`dñwö
 (
dülog
);

441 
	`ªmove
("lxdialog.scrltmp");

443 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/msgbox.c

22 
	~"dülog.h
"

29 
	$dülog_msgbox
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
,

30 
∑u£
)

32 
i
, 
x
, 
y
, 
key
 = 0;

33 
WINDOW
 *
dülog
;

36 
x
 = (
COLS
 - 
width
) / 2;

37 
y
 = (
LINES
 - 
height
) / 2;

39 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

41 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

42 
	`key∑d
 (
dülog
, 
TRUE
);

44 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

46 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

48 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

49 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

50 
tôÀ2
[
width
-2] = '\0';

51 
tôÀ
 = 
tôÀ2
;

54 i‡(
tôÀ
 !
NULL
) {

55 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

56 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

57 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

58 
	`waddch
 (
dülog
, ' ');

60 
	`w©å£t
 (
dülog
, 
dülog_©å
);

61 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 2);

63 i‡(
∑u£
) {

64 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

65 
	`mvwaddch
 (
dülog
, 
height
 - 3, 0, 
ACS_LTEE
);

66 
i
 = 0; i < 
width
 - 2; i++)

67 
	`waddch
 (
dülog
, 
ACS_HLINE
);

68 
	`w©å£t
 (
dülog
, 
dülog_©å
);

69 
	`waddch
 (
dülog
, 
ACS_RTEE
);

71 
	`¥öt_buâ⁄
 (
dülog
, " Ok ",

72 
height
 - 2, 
width
 / 2 - 4, 
TRUE
);

74 
	`wª‰esh
 (
dülog
);

75 
key
 !
ESC
 && key != '\n' && key != ' ' &&

76 
key
 != 'O' && key != 'o' && key != 'X' && key != 'x')

77 
key
 = 
	`wgëch
 (
dülog
);

79 
key
 = '\n';

80 
	`wª‰esh
 (
dülog
);

83 
	`dñwö
 (
dülog
);

84  
key
 =
ESC
 ? -1 : 0;

85 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/textbox.c

22 
	~"dülog.h
"

24 
back_löes
 (
n
);

25 
¥öt_∑ge
 (
WINDOW
 * 
wö
, 
height
, 
width
);

26 
¥öt_löe
 (
WINDOW
 * 
wö
, 
row
, 
width
);

27 *
gë_löe
 ();

28 
¥öt_posôi⁄
 (
WINDOW
 * 
wö
, 
height
, 
width
);

30 
	ghs¸ﬁl
, 
	gfd
, 
	gfûe_size
, 
	gbyãs_ªad
;

31 
	gbegö_ªached
 = 1, 
	gíd_ªached
, 
	g∑ge_Àngth
;

32 *
	gbuf
, *
	g∑ge
;

38 
	$dülog_ãxtbox
 (c⁄° *
tôÀ
, c⁄° *
fûe
, 
height
, 
width
)

40 
i
, 
x
, 
y
, 
cur_x
, 
cur_y
, 
Âos
, 
key
 = 0;

41 
∑s£d_íd
;

42 
£¨ch_ãrm
[
MAX_LEN
 + 1];

43 
WINDOW
 *
dülog
, *
ãxt
;

45 
£¨ch_ãrm
[0] = '\0';

48 i‡((
fd
 = 
	`›í
 (
fûe
, 
O_RDONLY
)) == -1) {

49 
	`ídwö
 ();

50 
	`Ârötf
 (
°dîr
,

52 
	`exô
 (-1);

56 i‡((
fûe_size
 = 
	`l£ek
 (
fd
, 0, 
SEEK_END
)) == -1) {

57 
	`ídwö
 ();

58 
	`Ârötf
 (
°dîr
, "\nError getting file size in dialog_textbox().\n");

59 
	`exô
 (-1);

62 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

63 
	`ídwö
 ();

64 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in dialog_textbox().\n");

65 
	`exô
 (-1);

68 i‡((
buf
 = 
	`mÆloc
 (
BUF_SIZE
 + 1)Ë=
NULL
) {

69 
	`ídwö
 ();

70 
	`Ârötf
 (
°dîr
, "\nCan'tállocate memory in dialog_textbox().\n");

71 
	`exô
 (-1);

73 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

74 
	`ídwö
 ();

75 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in dialog_textbox().\n");

76 
	`exô
 (-1);

78 
buf
[
byãs_ªad
] = '\0';

79 
∑ge
 = 
buf
;

82 
x
 = (
COLS
 - 
width
) / 2;

83 
y
 = (
LINES
 - 
height
) / 2;

86 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

88 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

89 
	`key∑d
 (
dülog
, 
TRUE
);

92 
ãxt
 = 
	`subwö
 (
dülog
, 
height
 - 4, 
width
 - 2, 
y
 + 1, 
x
 + 1);

93 
	`w©å£t
 (
ãxt
, 
dülog_©å
);

94 
	`wbkgd£t
 (
ãxt
, 
dülog_©å
 & 
A_COLOR
);

96 
	`key∑d
 (
ãxt
, 
TRUE
);

99 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

101 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

102 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

103 
i
 = 0; i < 
width
 - 2; i++)

104 
	`waddch
 (
dülog
, 
ACS_HLINE
);

105 
	`w©å£t
 (
dülog
, 
dülog_©å
);

106 
	`wbkgd£t
 (
dülog
, 
dülog_©å
 & 
A_COLOR
);

107 
	`waddch
 (
dülog
, 
ACS_RTEE
);

109 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

111 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

112 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

113 
tôÀ2
[
width
-2] = '\0';

114 
tôÀ
 = 
tôÀ2
;

117 i‡(
tôÀ
 !
NULL
) {

118 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

119 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

120 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

121 
	`waddch
 (
dülog
, ' ');

123 
	`¥öt_buâ⁄
 (
dülog
, " Exô ", 
height
 - 2, 
width
 / 2 - 4, 
TRUE
);

124 
	`wnouåe‰esh
 (
dülog
);

125 
	`gëyx
 (
dülog
, 
cur_y
, 
cur_x
);

128 
	`©å_˛ór
 (
ãxt
, 
height
 - 4, 
width
 - 2, 
dülog_©å
);

129 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

130 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

131 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

132 
	`wª‰esh
 (
dülog
);

134 (
key
 !
ESC
) && (key != '\n')) {

135 
key
 = 
	`wgëch
 (
dülog
);

136 
key
) {

141 
	`dñwö
 (
dülog
);

142 
	`‰ì
 (
buf
);

143 
	`˛o£
 (
fd
);

146 
KEY_HOME
:

147 i‡(!
begö_ªached
) {

148 
begö_ªached
 = 1;

150 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

151 
	`ídwö
 ();

152 
	`Ârötf
 (
°dîr
,

154 
	`exô
 (-1);

156 i‡(
Âos
 > 
byãs_ªad
) {

157 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

158 
	`ídwö
 ();

159 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

161 
	`exô
 (-1);

163 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

164 
	`ídwö
 ();

165 
	`Ârötf
 (
°dîr
,

167 
	`exô
 (-1);

169 
buf
[
byãs_ªad
] = '\0';

171 
∑ge
 = 
buf
;

172 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

173 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

174 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

175 
	`wª‰esh
 (
dülog
);

179 
KEY_END
:

181 
íd_ªached
 = 1;

183 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

184 
	`ídwö
 ();

185 
	`Ârötf
 (
°dîr
,

187 
	`exô
 (-1);

189 i‡(
Âos
 < 
fûe_size
) {

190 i‡(
	`l£ek
 (
fd
, -
BUF_SIZE
, 
SEEK_END
) == -1) {

191 
	`ídwö
 ();

192 
	`Ârötf
 (
°dîr
,

194 
	`exô
 (-1);

196 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

197 
	`ídwö
 ();

198 
	`Ârötf
 (
°dîr
,

200 
	`exô
 (-1);

202 
buf
[
byãs_ªad
] = '\0';

204 
∑ge
 = 
buf
 + 
byãs_ªad
;

205 
	`back_löes
 (
height
 - 4);

206 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

207 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

208 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

209 
	`wª‰esh
 (
dülog
);

213 
KEY_UP
:

214 i‡(!
begö_ªached
) {

215 
	`back_löes
 (
∑ge_Àngth
 + 1);

222 
	`s¸ﬁlok
 (
ãxt
, 
TRUE
);

223 
	`ws¸l
 (
ãxt
, -1);

224 
	`s¸ﬁlok
 (
ãxt
, 
FALSE
);

225 
∑ge_Àngth
 = 0;

226 
∑s£d_íd
 = 0;

227 
i
 = 0; i < 
height
 - 4; i++) {

228 i‡(!
i
) {

230 
	`¥öt_löe
 (
ãxt
, 0, 
width
 - 2);

231 
	`wnouåe‰esh
 (
ãxt
);

234 
	`gë_löe
 ();

235 i‡(!
∑s£d_íd
)

236 
∑ge_Àngth
++;

237 i‡(
íd_ªached
 && !
∑s£d_íd
)

238 
∑s£d_íd
 = 1;

241 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

242 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

243 
	`wª‰esh
 (
dülog
);

248 
KEY_PPAGE
:

249 i‡(
begö_ªached
)

251 
	`back_löes
 (
∑ge_Àngth
 + 
height
 - 4);

252 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

253 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

254 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

255 
	`wª‰esh
 (
dülog
);

259 
KEY_DOWN
:

260 i‡(!
íd_ªached
) {

261 
begö_ªached
 = 0;

262 
	`s¸ﬁlok
 (
ãxt
, 
TRUE
);

263 
	`s¸ﬁl
 (
ãxt
);

264 
	`s¸ﬁlok
 (
ãxt
, 
FALSE
);

265 
	`¥öt_löe
 (
ãxt
, 
height
 - 5, 
width
 - 2);

266 
	`wnouåe‰esh
 (
ãxt
);

267 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

268 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

269 
	`wª‰esh
 (
dülog
);

272 
KEY_NPAGE
:

274 i‡(
íd_ªached
)

277 
begö_ªached
 = 0;

278 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

279 
	`¥öt_posôi⁄
 (
dülog
, 
height
, 
width
);

280 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

281 
	`wª‰esh
 (
dülog
);

286 
KEY_LEFT
:

287 i‡(
hs¸ﬁl
 <= 0)

290 i‡(
key
 == '0')

291 
hs¸ﬁl
 = 0;

293 
hs¸ﬁl
--;

295 
	`back_löes
 (
∑ge_Àngth
);

296 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

297 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

298 
	`wª‰esh
 (
dülog
);

302 
KEY_RIGHT
:

303 i‡(
hs¸ﬁl
 >
MAX_LEN
)

305 
hs¸ﬁl
++;

307 
	`back_löes
 (
∑ge_Àngth
);

308 
	`¥öt_∑ge
 (
ãxt
, 
height
 - 4, 
width
 - 2);

309 
	`wmove
 (
dülog
, 
cur_y
, 
cur_x
);

310 
	`wª‰esh
 (
dülog
);

312 
ESC
:

317 
	`dñwö
 (
dülog
);

318 
	`‰ì
 (
buf
);

319 
	`˛o£
 (
fd
);

321 
	}
}

328 
	$back_löes
 (
n
)

330 
i
, 
Âos
;

332 
begö_ªached
 = 0;

337 i‡(!
íd_ªached
) {

339 i‡(
∑ge
 =
buf
) {

340 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

341 
	`ídwö
 ();

342 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

344 
	`exô
 (-1);

346 i‡(
Âos
 > 
byãs_ªad
) {

353 i‡(
Âos
 < 
BUF_SIZE
 / 2 + 
byãs_ªad
) {

355 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

356 
	`ídwö
 ();

357 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

359 
	`exô
 (-1);

361 
∑ge
 = 
buf
 + 
Âos
 - 
byãs_ªad
;

363 i‡(
	`l£ek
 (
fd
, -(
BUF_SIZE
 / 2 + 
byãs_ªad
), 
SEEK_CUR
)

365 
	`ídwö
 ();

366 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer "

368 
	`exô
 (-1);

370 
∑ge
 = 
buf
 + 
BUF_SIZE
 / 2;

372 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

373 
	`ídwö
 ();

374 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in back_lines().\n");

375 
	`exô
 (-1);

377 
buf
[
byãs_ªad
] = '\0';

379 
begö_ªached
 = 1;

383 i‡(*(--
∑ge
) != '\n') {

385 
	`ídwö
 ();

386 
	`Ârötf
 (
°dîr
, "\nInternalÉrror in back_lines().\n");

387 
	`exô
 (-1);

391 
i
 = 0; i < 
n
; i++)

393 i‡(
∑ge
 =
buf
) {

394 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

395 
	`ídwö
 ();

396 
	`Ârötf
 (
°dîr
,

398 
	`exô
 (-1);

400 i‡(
Âos
 > 
byãs_ªad
) {

402 i‡(
Âos
 < 
BUF_SIZE
 / 2 + 
byãs_ªad
) {

404 i‡(
	`l£ek
 (
fd
, 0, 
SEEK_SET
) == -1) {

405 
	`ídwö
 ();

406 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer "

408 
	`exô
 (-1);

410 
∑ge
 = 
buf
 + 
Âos
 - 
byãs_ªad
;

412 i‡(
	`l£ek
 (
fd
, -(
BUF_SIZE
 / 2 + 
byãs_ªad
),

413 
SEEK_CUR
) == -1) {

414 
	`ídwö
 ();

415 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer"

417 
	`exô
 (-1);

419 
∑ge
 = 
buf
 + 
BUF_SIZE
 / 2;

421 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

422 
	`ídwö
 ();

423 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in "

425 
	`exô
 (-1);

427 
buf
[
byãs_ªad
] = '\0';

429 
begö_ªached
 = 1;

433 } *(--
∑ge
) != '\n');

434 
∑ge
++;

435 
	}
}

441 
	$¥öt_∑ge
 (
WINDOW
 * 
wö
, 
height
, 
width
)

443 
i
, 
∑s£d_íd
 = 0;

445 
∑ge_Àngth
 = 0;

446 
i
 = 0; i < 
height
; i++) {

447 
	`¥öt_löe
 (
wö
, 
i
, 
width
);

448 i‡(!
∑s£d_íd
)

449 
∑ge_Àngth
++;

450 i‡(
íd_ªached
 && !
∑s£d_íd
)

451 
∑s£d_íd
 = 1;

453 
	`wnouåe‰esh
 (
wö
);

454 
	}
}

460 
	$¥öt_löe
 (
WINDOW
 * 
wö
, 
row
, 
width
)

462 
y
, 
x
;

463 *
löe
;

465 
löe
 = 
	`gë_löe
 ();

466 
löe
 +
	`MIN
 (
	`°æí
 (löe), 
hs¸ﬁl
);

467 
	`wmove
 (
wö
, 
row
, 0);

468 
	`waddch
 (
wö
, ' ');

469 
	`waddn°r
 (
wö
, 
löe
, 
	`MIN
 (
	`°æí
 (löe), 
width
 - 2));

471 
	`gëyx
 (
wö
, 
y
, 
x
);

473 #i‡
OLD_NCURSES


475 
i
;

476 
i
 = 0; i < 
width
 - 
x
; i++)

477 
	`waddch
 (
wö
, ' ');

480 
	`w˛π€ﬁ
(
wö
);

482 
	}
}

490 
	$gë_löe
 ()

492 
i
 = 0, 
Âos
;

493 
löe
[
MAX_LEN
 + 1];

495 
íd_ªached
 = 0;

496 *
∑ge
 != '\n') {

497 i‡(*
∑ge
 == '\0') {

499 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

500 
	`ídwö
 ();

501 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer in "

503 
	`exô
 (-1);

505 i‡(
Âos
 < 
fûe_size
) {

508 i‡((
byãs_ªad
 = 
	`ªad
 (
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

509 
	`ídwö
 ();

510 
	`Ârötf
 (
°dîr
, "\nErrorÑeading file in get_line().\n");

511 
	`exô
 (-1);

513 
buf
[
byãs_ªad
] = '\0';

514 
∑ge
 = 
buf
;

516 i‡(!
íd_ªached
)

517 
íd_ªached
 = 1;

520 } i‡(
i
 < 
MAX_LEN
)

521 
löe
[
i
++] = *(
∑ge
++);

524 i‡(
i
 =
MAX_LEN
)

525 
löe
[
i
++] = '\0';

526 
∑ge
++;

529 i‡(
i
 <
MAX_LEN
)

530 
löe
[
i
] = '\0';

531 i‡(!
íd_ªached
)

532 
∑ge
++;

534  
löe
;

535 
	}
}

541 
	$¥öt_posôi⁄
 (
WINDOW
 * 
wö
, 
height
, 
width
)

543 
Âos
, 
≥r˚¡
;

545 i‡((
Âos
 = 
	`l£ek
 (
fd
, 0, 
SEEK_CUR
)) == -1) {

546 
	`ídwö
 ();

547 
	`Ârötf
 (
°dîr
, "\nError moving fileÖointer inÖrint_position().\n");

548 
	`exô
 (-1);

550 
	`w©å£t
 (
wö
, 
posôi⁄_ödiˇt‹_©å
);

551 
	`wbkgd£t
 (
wö
, 
posôi⁄_ödiˇt‹_©å
 & 
A_COLOR
);

552 
≥r˚¡
 = !
fûe_size
 ?

553 100 : ((
Âos
 - 
byãs_ªad
 + 
∑ge
 - 
buf
Ë* 100Ë/ 
fûe_size
;

554 
	`wmove
 (
wö
, 
height
 - 3, 
width
 - 9);

555 
	`w¥ötw
 (
wö
, "(%3d%%)", 
≥r˚¡
);

556 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/util.c

22 
	~"dülog.h
"

26 
boﬁ
 
	gu£_cﬁ‹s
 = 1;

28 c⁄° *
	gbacktôÀ
 = 
NULL
;

30 c⁄° *
	gdülog_ªsu…
;

35 
chty≥
 
	g©åibuãs
[] =

37 
A_NORMAL
,

38 
A_NORMAL
,

39 
A_NORMAL
,

40 
A_BOLD
,

41 
A_NORMAL
,

42 
A_REVERSE
,

43 
A_DIM
,

44 
A_REVERSE
,

45 
A_BOLD
,

46 
A_REVERSE
,

47 
A_NORMAL
,

48 
A_NORMAL
,

49 
A_NORMAL
,

50 
A_NORMAL
,

51 
A_BOLD
,

52 
A_NORMAL
,

53 
A_BOLD
,

54 
A_NORMAL
,

55 
A_NORMAL
,

56 
A_NORMAL
,

57 
A_REVERSE
,

58 
A_BOLD
,

59 
A_REVERSE
,

60 
A_BOLD
,

61 
A_REVERSE
,

62 
A_BOLD
,

63 
A_REVERSE
,

64 
A_BOLD
,

65 
A_BOLD


69 
	~"cﬁ‹s.h
"

74 
	gcﬁ‹_èbÀ
[][3] =

76 {
SCREEN_FG
, 
SCREEN_BG
, 
SCREEN_HL
},

77 {
SHADOW_FG
, 
SHADOW_BG
, 
SHADOW_HL
},

78 {
DIALOG_FG
, 
DIALOG_BG
, 
DIALOG_HL
},

79 {
TITLE_FG
, 
TITLE_BG
, 
TITLE_HL
},

80 {
BORDER_FG
, 
BORDER_BG
, 
BORDER_HL
},

81 {
BUTTON_ACTIVE_FG
, 
BUTTON_ACTIVE_BG
, 
BUTTON_ACTIVE_HL
},

82 {
BUTTON_INACTIVE_FG
, 
BUTTON_INACTIVE_BG
, 
BUTTON_INACTIVE_HL
},

83 {
BUTTON_KEY_ACTIVE_FG
, 
BUTTON_KEY_ACTIVE_BG
, 
BUTTON_KEY_ACTIVE_HL
},

84 {
BUTTON_KEY_INACTIVE_FG
, 
BUTTON_KEY_INACTIVE_BG
, 
BUTTON_KEY_INACTIVE_HL
},

85 {
BUTTON_LABEL_ACTIVE_FG
, 
BUTTON_LABEL_ACTIVE_BG
, 
BUTTON_LABEL_ACTIVE_HL
},

86 {
BUTTON_LABEL_INACTIVE_FG
, 
BUTTON_LABEL_INACTIVE_BG
,

87 
BUTTON_LABEL_INACTIVE_HL
},

88 {
INPUTBOX_FG
, 
INPUTBOX_BG
, 
INPUTBOX_HL
},

89 {
INPUTBOX_BORDER_FG
, 
INPUTBOX_BORDER_BG
, 
INPUTBOX_BORDER_HL
},

90 {
SEARCHBOX_FG
, 
SEARCHBOX_BG
, 
SEARCHBOX_HL
},

91 {
SEARCHBOX_TITLE_FG
, 
SEARCHBOX_TITLE_BG
, 
SEARCHBOX_TITLE_HL
},

92 {
SEARCHBOX_BORDER_FG
, 
SEARCHBOX_BORDER_BG
, 
SEARCHBOX_BORDER_HL
},

93 {
POSITION_INDICATOR_FG
, 
POSITION_INDICATOR_BG
, 
POSITION_INDICATOR_HL
},

94 {
MENUBOX_FG
, 
MENUBOX_BG
, 
MENUBOX_HL
},

95 {
MENUBOX_BORDER_FG
, 
MENUBOX_BORDER_BG
, 
MENUBOX_BORDER_HL
},

96 {
ITEM_FG
, 
ITEM_BG
, 
ITEM_HL
},

97 {
ITEM_SELECTED_FG
, 
ITEM_SELECTED_BG
, 
ITEM_SELECTED_HL
},

98 {
TAG_FG
, 
TAG_BG
, 
TAG_HL
},

99 {
TAG_SELECTED_FG
, 
TAG_SELECTED_BG
, 
TAG_SELECTED_HL
},

100 {
TAG_KEY_FG
, 
TAG_KEY_BG
, 
TAG_KEY_HL
},

101 {
TAG_KEY_SELECTED_FG
, 
TAG_KEY_SELECTED_BG
, 
TAG_KEY_SELECTED_HL
},

102 {
CHECK_FG
, 
CHECK_BG
, 
CHECK_HL
},

103 {
CHECK_SELECTED_FG
, 
CHECK_SELECTED_BG
, 
CHECK_SELECTED_HL
},

104 {
UARROW_FG
, 
UARROW_BG
, 
UARROW_HL
},

105 {
DARROW_FG
, 
DARROW_BG
, 
DARROW_HL
},

112 
	$©å_˛ór
 (
WINDOW
 * 
wö
, 
height
, 
width
, 
chty≥
 
©å
)

114 
i
, 
j
;

116 
	`w©å£t
 (
wö
, 
©å
);

117 
i
 = 0; i < 
height
; i++) {

118 
	`wmove
 (
wö
, 
i
, 0);

119 
j
 = 0; j < 
width
; j++)

120 
	`waddch
 (
wö
, ' ');

122 
	`touchwö
 (
wö
);

123 
	}
}

125 
	$dülog_˛ór
 ()

127 
	`©å_˛ór
 (
°ds¸
, 
LINES
, 
COLS
, 
s¸ìn_©å
);

129 i‡(
backtôÀ
 !
NULL
) {

130 
i
;

132 
	`w©å£t
 (
°ds¸
, 
s¸ìn_©å
);

133 
	`mvwadd°r
 (
°ds¸
, 0, 1, (*)
backtôÀ
);

134 
	`wmove
 (
°ds¸
, 1, 1);

135 
i
 = 1; i < 
COLS
 - 1; i++)

136 
	`waddch
 (
°ds¸
, 
ACS_HLINE
);

138 
	`wnouåe‰esh
 (
°ds¸
);

139 
	}
}

145 
	$öô_dülog
 ()

147 
	`öôs¸
 ();

148 
	`key∑d
 (
°ds¸
, 
TRUE
);

149 
	`cbªak
 ();

150 
	`n€cho
 ();

153 i‡(
u£_cﬁ‹s
)

154 
	`cﬁ‹_£tup
 ();

157 
	`dülog_˛ór
 ();

158 
	}
}

164 
	$cﬁ‹_£tup
 ()

166 
i
;

168 i‡(
	`has_cﬁ‹s
 ()) {

169 
	`°¨t_cﬁ‹
 ();

172 
i
 = 0; i < 
ATTRIBUTE_COUNT
; i++)

173 
	`öô_∑ú
 (
i
 + 1, 
cﬁ‹_èbÀ
[i][0], color_table[i][1]);

176 
i
 = 0; i < 
ATTRIBUTE_COUNT
; i++)

177 
©åibuãs
[
i
] = 
	`C_ATTR
 (
cﬁ‹_èbÀ
[i][2], i + 1);

179 
	}
}

185 
	$íd_dülog
 ()

187 
	`ídwö
 ();

188 
	}
}

198 
	$¥öt_autowøp
 (
WINDOW
 * 
wö
, c⁄° *
¥om±
, 
width
, 
y
, 
x
)

200 
√wl
, 
cur_x
, 
cur_y
;

201 
i
, 
¥om±_Àn
, 
room
, 
wÀn
;

202 
ãmp°r
[
MAX_LEN
 + 1], *
w‹d
, *
•
, *
•2
;

204 
	`°r˝y
 (
ãmp°r
, 
¥om±
);

206 
¥om±_Àn
 = 
	`°æí
(
ãmp°r
);

211 
i
=0; i<
¥om±_Àn
; i++) {

212 if(
ãmp°r
[
i
] == '\n')Åempstr[i] = ' ';

215 i‡(
¥om±_Àn
 <
width
 - 
x
 * 2) {

216 
	`wmove
 (
wö
, 
y
, (
width
 - 
¥om±_Àn
) / 2);

217 
	`wadd°r
 (
wö
, 
ãmp°r
);

219 
cur_x
 = 
x
;

220 
cur_y
 = 
y
;

221 
√wl
 = 1;

222 
w‹d
 = 
ãmp°r
;

223 
w‹d
 && *word) {

224 
•
 = 
	`ödex
(
w‹d
, ' ');

225 i‡(
•
)

226 *
•
++ = 0;

231 
room
 = 
width
 - 
cur_x
;

232 
wÀn
 = 
	`°æí
(
w‹d
);

233 i‡(
wÀn
 > 
room
 ||

234 (
√wl
 && 
wÀn
 < 4 && 
•
 && wÀn+1+
	`°æí
(•Ë> 
room


235 && (!(
•2
 = 
	`ödex
(
•
, ' ')Ë|| 
wÀn
+1+(•2-•Ë> 
room
))) {

236 
cur_y
++;

237 
cur_x
 = 
x
;

239 
	`wmove
 (
wö
, 
cur_y
, 
cur_x
);

240 
	`wadd°r
 (
wö
, 
w‹d
);

241 
	`gëyx
 (
wö
, 
cur_y
, 
cur_x
);

242 
cur_x
++;

243 i‡(
•
 && *sp == ' ') {

244 
cur_x
++;

245 *++
•
 == ' ');

246 
√wl
 = 1;

248 
√wl
 = 0;

249 
w‹d
 = 
•
;

252 
	}
}

258 
	$¥öt_buâ⁄
 (
WINDOW
 * 
wö
, c⁄° *
œbñ
, 
y
, 
x
, 
£À˘ed
)

260 
i
, 
ãmp
;

262 
	`wmove
 (
wö
, 
y
, 
x
);

263 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_a˘ive_©å
 : 
buâ⁄_öa˘ive_©å
);

264 
	`wadd°r
 (
wö
, "<");

265 
ãmp
 = 
	`°r•n
 (
œbñ
, " ");

266 
œbñ
 +
ãmp
;

267 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_œbñ_a˘ive_©å


268 : 
buâ⁄_œbñ_öa˘ive_©å
);

269 
i
 = 0; i < 
ãmp
; i++)

270 
	`waddch
 (
wö
, ' ');

271 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_key_a˘ive_©å


272 : 
buâ⁄_key_öa˘ive_©å
);

273 
	`waddch
 (
wö
, 
œbñ
[0]);

274 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_œbñ_a˘ive_©å


275 : 
buâ⁄_œbñ_öa˘ive_©å
);

276 
	`wadd°r
 (
wö
, (*)
œbñ
 + 1);

277 
	`w©å£t
 (
wö
, 
£À˘ed
 ? 
buâ⁄_a˘ive_©å
 : 
buâ⁄_öa˘ive_©å
);

278 
	`wadd°r
 (
wö
, ">");

279 
	`wmove
 (
wö
, 
y
, 
x
 + 
ãmp
 + 1);

280 
	}
}

286 
	$døw_box
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
,

287 
chty≥
 
box
, chty≥ 
b‹dî
)

289 
i
, 
j
;

291 
	`w©å£t
 (
wö
, 0);

292 
i
 = 0; i < 
height
; i++) {

293 
	`wmove
 (
wö
, 
y
 + 
i
, 
x
);

294 
j
 = 0; j < 
width
; j++)

295 i‡(!
i
 && !
j
)

296 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_ULCORNER
);

297 i‡(
i
 =
height
 - 1 && !
j
)

298 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_LLCORNER
);

299 i‡(!
i
 && 
j
 =
width
 - 1)

300 
	`waddch
 (
wö
, 
box
 | 
ACS_URCORNER
);

301 i‡(
i
 =
height
 - 1 && 
j
 =
width
 - 1)

302 
	`waddch
 (
wö
, 
box
 | 
ACS_LRCORNER
);

303 i‡(!
i
)

304 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_HLINE
);

305 i‡(
i
 =
height
 - 1)

306 
	`waddch
 (
wö
, 
box
 | 
ACS_HLINE
);

307 i‡(!
j
)

308 
	`waddch
 (
wö
, 
b‹dî
 | 
ACS_VLINE
);

309 i‡(
j
 =
width
 - 1)

310 
	`waddch
 (
wö
, 
box
 | 
ACS_VLINE
);

312 
	`waddch
 (
wö
, 
box
 | ' ');

314 
	}
}

321 
	$døw_shadow
 (
WINDOW
 * 
wö
, 
y
, 
x
, 
height
, 
width
)

323 
i
;

325 i‡(
	`has_cﬁ‹s
 ()) {

326 
	`w©å£t
 (
wö
, 
shadow_©å
);

327 
	`wmove
 (
wö
, 
y
 + 
height
, 
x
 + 2);

328 
i
 = 0; i < 
width
; i++)

329 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

330 
i
 = 
y
 + 1; i < y + 
height
 + 1; i++) {

331 
	`wmove
 (
wö
, 
i
, 
x
 + 
width
);

332 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

333 
	`waddch
 (
wö
, 
	`wöch
 (wöË& 
A_CHARTEXT
);

335 
	`wnouåe‰esh
 (
wö
);

337 
	}
}

343 
	$fú°_Æpha
(c⁄° *
°rög
, c⁄° *
exem±
)

345 
i
, 
ö_∑ªn
=0, 
c
;

347 
i
 = 0; i < 
	`°æí
(
°rög
); i++) {

348 
c
 = 
	`tﬁowî
(
°rög
[
i
]);

350 i‡(
	`°rchr
("<[(", 
c
)Ë++
ö_∑ªn
;

351 i‡(
	`°rchr
(">])", 
c
Ë&& 
ö_∑ªn
 > 0) --in_paren;

353 i‡((! 
ö_∑ªn
Ë&& 
	`ißÕha
(
c
) &&

354 
	`°rchr
(
exem±
, 
c
) == 0)

355  
i
;

359 
	}
}

	@/usr/src/rtai/base/config/kconfig/lxdialog/yesno.c

22 
	~"dülog.h
"

28 
	$¥öt_buâ⁄s
(
WINDOW
 *
dülog
, 
height
, 
width
, 
£À˘ed
)

30 
x
 = 
width
 / 2 - 10;

31 
y
 = 
height
 - 2;

33 
	`¥öt_buâ⁄
 (
dülog
, " Ye†", 
y
, 
x
, 
£À˘ed
 == 0);

34 
	`¥öt_buâ⁄
 (
dülog
, " Nÿ ", 
y
, 
x
 + 13, 
£À˘ed
 == 1);

36 
	`wmove
(
dülog
, 
y
, 
x
+1 + 13*
£À˘ed
 );

37 
	`wª‰esh
 (
dülog
);

38 
	}
}

44 
	$dülog_ye¢o
 (c⁄° *
tôÀ
, c⁄° *
¥om±
, 
height
, 
width
)

46 
i
, 
x
, 
y
, 
key
 = 0, 
buâ⁄
 = 0;

47 
WINDOW
 *
dülog
;

50 
x
 = (
COLS
 - 
width
) / 2;

51 
y
 = (
LINES
 - 
height
) / 2;

53 
	`døw_shadow
 (
°ds¸
, 
y
, 
x
, 
height
, 
width
);

55 
dülog
 = 
	`√wwö
 (
height
, 
width
, 
y
, 
x
);

56 
	`key∑d
 (
dülog
, 
TRUE
);

58 
	`døw_box
 (
dülog
, 0, 0, 
height
, 
width
, 
dülog_©å
, 
b‹dî_©å
);

59 
	`w©å£t
 (
dülog
, 
b‹dî_©å
);

60 
	`mvwaddch
 (
dülog
, 
height
-3, 0, 
ACS_LTEE
);

61 
i
 = 0; i < 
width
 - 2; i++)

62 
	`waddch
 (
dülog
, 
ACS_HLINE
);

63 
	`w©å£t
 (
dülog
, 
dülog_©å
);

64 
	`waddch
 (
dülog
, 
ACS_RTEE
);

66 i‡(
tôÀ
 !
NULL
 && 
	`°æí
—ôÀË>
width
-2 ) {

68 * 
tôÀ2
 = 
	`mÆloc
(
width
-2+1);

69 
	`mem˝y
–
tôÀ2
, 
tôÀ
, 
width
-2 );

70 
tôÀ2
[
width
-2] = '\0';

71 
tôÀ
 = 
tôÀ2
;

74 i‡(
tôÀ
 !
NULL
) {

75 
	`w©å£t
 (
dülog
, 
tôÀ_©å
);

76 
	`mvwaddch
 (
dülog
, 0, (
width
 - 
	`°æí
(
tôÀ
))/2 - 1, ' ');

77 
	`wadd°r
 (
dülog
, (*)
tôÀ
);

78 
	`waddch
 (
dülog
, ' ');

81 
	`w©å£t
 (
dülog
, 
dülog_©å
);

82 
	`¥öt_autowøp
 (
dülog
, 
¥om±
, 
width
 - 2, 1, 3);

84 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 0);

86 
key
 !
ESC
) {

87 
key
 = 
	`wgëch
 (
dülog
);

88 
key
) {

91 
	`dñwö
 (
dülog
);

95 
	`dñwö
 (
dülog
);

98 
TAB
:

99 
KEY_LEFT
:

100 
KEY_RIGHT
:

101 
buâ⁄
 = ((
key
 =
KEY_LEFT
 ? --button : ++button) < 0)

102 ? 1 : (
buâ⁄
 > 1 ? 0 : button);

104 
	`¥öt_buâ⁄s
(
dülog
, 
height
, 
width
, 
buâ⁄
);

105 
	`wª‰esh
 (
dülog
);

109 
	`dñwö
 (
dülog
);

110  
buâ⁄
;

111 
ESC
:

116 
	`dñwö
 (
dülog
);

118 
	}
}

	@/usr/src/rtai/base/config/kconfig/mconf.c

9 
	~<sys/io˘l.h
>

10 
	~<sys/waô.h
>

11 
	~<˘y≥.h
>

12 
	~<î∫o.h
>

13 
	~<f˙é.h
>

14 
	~<limôs.h
>

15 
	~<sig«l.h
>

16 
	~<°d¨g.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<ãrmios.h
>

20 
	~<uni°d.h
>

22 
	#LKC_DIRECT_LINK


	)

23 
	~"lkc.h
"

25 
	gmíu_backtôÀ
[128];

26 c⁄° 
	gmíu_ö°ru˘i⁄s
[] =

33 
	gødiﬁi°_ö°ru˘i⁄s
[] =

38 
	göputbox_ö°ru˘i⁄s_öt
[] =

42 
	göputbox_ö°ru˘i⁄s_hex
[] =

45 
	göputbox_ö°ru˘i⁄s_°rög
[] =

48 
	g£tmod_ãxt
[] =

51 
	gnohñp_ãxt
[] =

53 
	glﬂd_c⁄fig_ãxt
[] =

57 
	glﬂd_c⁄fig_hñp
[] =

68 
	gßve_c⁄fig_ãxt
[] =

71 
	gßve_c⁄fig_hñp
[] =

84 
	gbuf
[4096], *
	gbuÂå
 = 
buf
;

85 
	göput_buf
[4096];

86 
	gfûíame
[
PATH_MAX
+1] = ".config";

87 *
	g¨gs
[1024], **
	g¨g±r
 = 
¨gs
;

88 
	gödít
 = 0;

89 
ãrmios
 
	gios_‹g
;

90 
	grows
, 
	gcﬁs
;

91 
míu
 *
	gcuº_míu
;

92 
	gchûd_cou¡
;

93 
	gdo_ªsize
;

94 
	gsögÀ_míu_mode
;

96 
c⁄f
(
míu
 *menu);

97 
c⁄f_choi˚
(
míu
 *menu);

98 
c⁄f_°rög
(
míu
 *menu);

99 
c⁄f_lﬂd
();

100 
c⁄f_ßve
();

101 
show_ãxtbox
(c⁄° *
tôÀ
, c⁄° *
ãxt
, 
r
, 
c
);

102 
show_hñ±ext
(c⁄° *
tôÀ
, c⁄° *
ãxt
);

103 
show_hñp
(
míu
 *menu);

104 
show_ªadme
();

106 
˝röt_öô
();

107 
˝röt1
(c⁄° *
fmt
, ...);

108 
˝röt_d⁄e
();

109 
˝röt
(c⁄° *
fmt
, ...);

111 
	$öô_wsize
()

113 
wösize
 
ws
;

114 *
ív
;

116 i‡(
	`io˘l
(1, 
TIOCGWINSZ
, &
ws
) == -1) {

117 
rows
 = 24;

118 
cﬁs
 = 80;

120 
rows
 = 
ws
.
ws_row
;

121 
cﬁs
 = 
ws
.
ws_cﬁ
;

122 i‡(!
rows
) {

123 
ív
 = 
	`gëív
("LINES");

124 i‡(
ív
)

125 
rows
 = 
	`©oi
(
ív
);

126 i‡(!
rows
)

127 
rows
 = 24;

129 i‡(!
cﬁs
) {

130 
ív
 = 
	`gëív
("COLUMNS");

131 i‡(
ív
)

132 
cﬁs
 = 
	`©oi
(
ív
);

133 i‡(!
cﬁs
)

134 
cﬁs
 = 80;

138 i‡(
rows
 < 19 || 
cﬁs
 < 80) {

139 
	`Ârötf
(
°dîr
, "Your display isÅoo smallÅoÑun Menuconfig!\n");

140 
	`Ârötf
(
°dîr
, "It must beátÜeast 19Üines by 80 columns.\n");

141 
	`exô
(1);

144 
rows
 -= 4;

145 
cﬁs
 -= 5;

146 
	}
}

148 
	$˝röt_öô
()

150 
buÂå
 = 
buf
;

151 
¨g±r
 = 
¨gs
;

152 
	`mem£t
(
¨gs
, 0, (args));

153 
ödít
 = 0;

154 
chûd_cou¡
 = 0;

155 
	`˝röt
("./lxdialog/lxdialog");

156 
	`˝röt
("--backtitle");

157 
	`˝röt
(
míu_backtôÀ
);

158 
	}
}

160 
	$˝röt1
(c⁄° *
fmt
, ...)

162 
va_li°
 
≠
;

163 
ªs
;

165 i‡(!*
¨g±r
)

166 *
¨g±r
 = 
buÂå
;

167 
	`va_°¨t
(
≠
, 
fmt
);

168 
ªs
 = 
	`v•rötf
(
buÂå
, 
fmt
, 
≠
);

169 
	`va_íd
(
≠
);

170 
buÂå
 +
ªs
;

172  
ªs
;

173 
	}
}

175 
	$˝röt_d⁄e
()

177 *
buÂå
++ = 0;

178 
¨g±r
++;

179 
	}
}

181 
	$˝röt
(c⁄° *
fmt
, ...)

183 
va_li°
 
≠
;

184 
ªs
;

186 *
¨g±r
++ = 
buÂå
;

187 
	`va_°¨t
(
≠
, 
fmt
);

188 
ªs
 = 
	`v•rötf
(
buÂå
, 
fmt
, 
≠
);

189 
	`va_íd
(
≠
);

190 
buÂå
 +
ªs
;

191 *
buÂå
++ = 0;

193  
ªs
;

194 
	}
}

196 
pid_t
 
	gpid
;

198 
	$wöch_h™dÀr
(
sig
)

200 i‡(!
do_ªsize
) {

201 
	`kûl
(
pid
, 
SIGINT
);

202 
do_ªsize
 = 1;

204 
	}
}

206 
	$exec_c⁄f
()

208 
pùefd
[2], 
°©
, 
size
;

209 
siga˘i⁄
 
ß
;

210 
sig£t_t
 
s£t
, 
os£t
;

212 
	`sigem±y£t
(&
s£t
);

213 
	`sigadd£t
(&
s£t
, 
SIGINT
);

214 
	`sig¥ocmask
(
SIG_BLOCK
, &
s£t
, &
os£t
);

216 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

218 
ß
.
ß_h™dÀr
 = 
wöch_h™dÀr
;

219 
	`sigem±y£t
(&
ß
.
ß_mask
);

220 
ß
.
ß_Êags
 = 
SA_RESTART
;

221 
	`siga˘i⁄
(
SIGWINCH
, &
ß
, 
NULL
);

223 *
¨g±r
++ = 
NULL
;

225 
	`pùe
(
pùefd
);

226 
pid
 = 
	`f‹k
();

227 i‡(
pid
 == 0) {

228 
	`sig¥ocmask
(
SIG_SETMASK
, &
os£t
, 
NULL
);

229 
	`dup2
(
pùefd
[1], 2);

230 
	`˛o£
(
pùefd
[0]);

231 
	`˛o£
(
pùefd
[1]);

232 
	`execv
(
¨gs
[0],árgs);

233 
	`_exô
(
EXIT_FAILURE
);

236 
	`˛o£
(
pùefd
[1]);

237 
buÂå
 = 
öput_buf
;

239 
size
 = 
öput_buf
 + (öput_bufË- 
buÂå
;

240 
size
 = 
	`ªad
(
pùefd
[0], 
buÂå
, size);

241 i‡(
size
 <= 0) {

242 i‡(
size
 < 0) {

243 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

245 
	`≥º‹
("read");

249 
buÂå
 +
size
;

251 *
buÂå
++ = 0;

252 
	`˛o£
(
pùefd
[0]);

253 
	`waôpid
(
pid
, &
°©
, 0);

255 i‡(
do_ªsize
) {

256 
	`öô_wsize
();

257 
do_ªsize
 = 0;

258 
	`sig¥ocmask
(
SIG_SETMASK
, &
os£t
, 
NULL
);

261 i‡(
	`WIFSIGNALED
(
°©
)) {

262 
	`¥ötf
("\föãºu±ed(%d)\n", 
	`WTERMSIG
(
°©
));

263 
	`exô
(1);

266 
	`¥ötf
("\„xô sèã: %d\√xô d©a: '%s'\n", 
	`WEXITSTATUS
(
°©
), 
öput_buf
);

267 
	`¶ìp
(1);

269 
	`sig≥ndög
(&
s£t
);

270 i‡(
	`sigismembî
(&
s£t
, 
SIGINT
)) {

271 
	`¥ötf
("\finterrupted\n");

272 
	`exô
(1);

274 
	`sig¥ocmask
(
SIG_SETMASK
, &
os£t
, 
NULL
);

276  
	`WEXITSTATUS
(
°©
);

277 
	}
}

279 
	$buûd_c⁄f
(
míu
 *menu)

281 
symbﬁ
 *
sym
;

282 
¥›îty
 *
¥›
;

283 
míu
 *
chûd
;

284 
ty≥
, 
tmp
, 
doöt
 = 2;

285 
åi°©e
 
vÆ
;

286 
ch
;

288 i‡(!
	`míu_is_visibÀ
(
míu
))

291 
sym
 = 
míu
->sym;

292 
¥›
 = 
míu
->
¥om±
;

293 i‡(!
sym
) {

294 i‡(
¥›
 && 
míu
 !
cuº_míu
) {

295 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

296 
¥›
->
ty≥
) {

297 
P_MENU
:

298 
chûd_cou¡
++;

299 
	`˝röt
("m%p", 
míu
);

301 i‡(
sögÀ_míu_mode
) {

302 
	`˝röt1
("%s%*c%s",

303 
míu
->
d©a
 ? "-->" : "++>",

304 
ödít
 + 1, ' ', 
¥om±
);

306 
	`˝röt1
(" %*c%† --->", 
ödít
 + 1, ' ', 
¥om±
);

308 
	`˝röt_d⁄e
();

309 i‡(
sögÀ_míu_mode
 && 
míu
->
d©a
)

310 
c⁄f_chûds
;

313 i‡(
¥om±
) {

314 
chûd_cou¡
++;

315 
	`˝röt
(":%p", 
míu
);

316 
	`˝röt
("---%*c%s", 
ödít
 + 1, ' ', 
¥om±
);

320 
doöt
 = 0;

321 
c⁄f_chûds
;

324 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

325 i‡(
	`sym_is_choi˚
(
sym
)) {

326 
symbﬁ
 *
def_sym
 = 
	`sym_gë_choi˚_vÆue
(
sym
);

327 
míu
 *
def_míu
 = 
NULL
;

329 
chûd_cou¡
++;

330 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

331 i‡(
	`míu_is_visibÀ
(
chûd
Ë&& chûd->
sym
 =
def_sym
)

332 
def_míu
 = 
chûd
;

335 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

336 i‡(
	`sym_is_ch™gabÀ
(
sym
)) {

337 
	`˝röt
("t%p", 
míu
);

338 
ty≥
) {

339 
S_BOOLEAN
:

340 
	`˝röt1
("[%c]", 
vÆ
 =
no
 ? ' ' : '*');

342 
S_TRISTATE
:

343 
vÆ
) {

344 
yes
: 
ch
 = '*'; ;

345 
mod
: 
ch
 = 'M'; ;

346 : 
ch
 = ' '; ;

348 
	`˝röt1
("<%c>", 
ch
);

352 
	`˝röt
("%c%p", 
def_míu
 ? 't' : ':', 
míu
);

353 
	`˝röt1
(" ");

356 
	`˝röt1
("%*c%s", 
ödít
 + 1, ' ', 
	`míu_gë_¥om±
(
míu
));

357 i‡(
vÆ
 =
yes
) {

358 i‡(
def_míu
) {

359 
	`˝röt1
(" (%s)", 
	`míu_gë_¥om±
(
def_míu
));

360 
	`˝röt1
(" --->");

361 
	`˝röt_d⁄e
();

362 i‡(
def_míu
->
li°
) {

363 
ödít
 += 2;

364 
	`buûd_c⁄f
(
def_míu
);

365 
ödít
 -= 2;

368 
	`˝röt_d⁄e
();

371 
	`˝röt_d⁄e
();

373 i‡(
míu
 =
cuº_míu
) {

374 
	`˝röt
(":%p", 
míu
);

375 
	`˝röt
("---%*c%s", 
ödít
 + 1, ' ', 
	`míu_gë_¥om±
(
míu
));

376 
c⁄f_chûds
;

378 
chûd_cou¡
++;

379 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

380 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
vÆ
 =
yes
) {

381 
	`˝röt
(":%p", 
míu
);

382 
	`˝röt1
(" ");

384 
ty≥
) {

385 
S_BOOLEAN
:

386 
	`˝röt
("t%p", 
míu
);

387 i‡(
	`sym_is_ch™gabÀ
(
sym
))

388 
	`˝röt1
("[%c]", 
vÆ
 =
no
 ? ' ' : '*');

390 
	`˝röt1
("---");

392 
S_TRISTATE
:

393 
	`˝röt
("t%p", 
míu
);

394 
vÆ
) {

395 
yes
: 
ch
 = '*'; ;

396 
mod
: 
ch
 = 'M'; ;

397 : 
ch
 = ' '; ;

399 i‡(
	`sym_is_ch™gabÀ
(
sym
))

400 
	`˝röt1
("<%c>", 
ch
);

402 
	`˝röt1
("---");

405 
	`˝röt
("s%p", 
míu
);

406 
tmp
 = 
	`˝röt1
("(%s)", 
	`sym_gë_°rög_vÆue
(
sym
));

407 
tmp
 = 
ödít
 -Åmp + 4;

408 i‡(
tmp
 < 0)

409 
tmp
 = 0;

410 
	`˝röt1
("%*c%s%s", 
tmp
, ' ', 
	`míu_gë_¥om±
(
míu
),

411 (
	`sym_has_vÆue
(
sym
Ë|| !
	`sym_is_ch™gabÀ
(sym)) ?

413 
	`˝röt_d⁄e
();

414 
c⁄f_chûds
;

417 
	`˝röt1
("%*c%s%s", 
ödít
 + 1, ' ', 
	`míu_gë_¥om±
(
míu
),

418 (
	`sym_has_vÆue
(
sym
Ë|| !
	`sym_is_ch™gabÀ
(sym)) ?

420 i‡(
míu
->
¥om±
->
ty≥
 =
P_MENU
) {

421 
	`˝röt1
(" --->");

422 
	`˝röt_d⁄e
();

425 
	`˝röt_d⁄e
();

428 
c⁄f_chûds
:

429 
ödít
 +
doöt
;

430 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

431 
	`buûd_c⁄f
(
chûd
);

432 
ödít
 -
doöt
;

433 
	}
}

435 
	$c⁄f
(
míu
 *menu)

437 
míu
 *
submíu
;

438 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

439 
symbﬁ
 *
sym
;

440 
a˘ive_íåy
[40];

441 
°©
, 
ty≥
, 
i
;

443 
	`u∆ök
("lxdialog.scrltmp");

444 
a˘ive_íåy
[0] = 0;

446 
	`˝röt_öô
();

447 
	`˝röt
("--title");

448 
	`˝röt
("%s", 
¥om±
 ?Örompt : "Main Menu");

449 
	`˝röt
("--menu");

450 
	`˝röt
(
míu_ö°ru˘i⁄s
);

451 
	`˝röt
("%d", 
rows
);

452 
	`˝röt
("%d", 
cﬁs
);

453 
	`˝röt
("%d", 
rows
 - 10);

454 
	`˝röt
("%s", 
a˘ive_íåy
);

455 
cuº_míu
 = 
míu
;

456 
	`buûd_c⁄f
(
míu
);

457 i‡(!
chûd_cou¡
)

459 i‡(
míu
 =&
roŸmíu
) {

460 
	`˝röt
(":");

461 
	`˝röt
("--- ");

462 
	`˝röt
("L");

463 
	`˝röt
(" Loadán Alternate Configuration File");

464 
	`˝röt
("S");

465 
	`˝röt
(" Save ConfigurationÅoán Alternate File");

467 
°©
 = 
	`exec_c⁄f
();

468 i‡(
°©
 < 0)

471 i‡(
°©
 == 1 || stat == 255)

474 
ty≥
 = 
öput_buf
[0];

475 i‡(!
ty≥
)

478 
i
 = 0; 
öput_buf
[i] && !
	`is•a˚
(input_buf[i]); i++)

480 i‡(
i
 >(
a˘ive_íåy
))

481 
i
 = (
a˘ive_íåy
) - 1;

482 
öput_buf
[
i
] = 0;

483 
	`°r˝y
(
a˘ive_íåy
, 
öput_buf
);

485 
sym
 = 
NULL
;

486 
submíu
 = 
NULL
;

487 i‡(
	`ssˇnf
(
öput_buf
 + 1, "%p", &
submíu
) == 1)

488 
sym
 = 
submíu
->sym;

490 
°©
) {

492 
ty≥
) {

494 i‡(
sögÀ_míu_mode
)

495 
submíu
->
d©a
 = (*) () !submenu->data;

497 
	`c⁄f
(
submíu
);

500 i‡(
	`sym_is_choi˚
(
sym
Ë&& 
	`sym_gë_åi°©e_vÆue
(symË=
yes
)

501 
	`c⁄f_choi˚
(
submíu
);

502 i‡(
submíu
->
¥om±
->
ty≥
 =
P_MENU
)

503 
	`c⁄f
(
submíu
);

506 
	`c⁄f_°rög
(
submíu
);

509 
	`c⁄f_lﬂd
();

512 
	`c⁄f_ßve
();

517 i‡(
sym
)

518 
	`show_hñp
(
submíu
);

520 
	`show_ªadme
();

523 i‡(
ty≥
 == 't') {

524 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
yes
))

526 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
))

527 
	`show_ãxtbox
(
NULL
, 
£tmod_ãxt
, 6, 74);

531 i‡(
ty≥
 == 't')

532 
	`sym_£t_åi°©e_vÆue
(
sym
, 
no
);

535 i‡(
ty≥
 == 't')

536 
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
);

539 i‡(
ty≥
 == 't')

540 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

541 i‡(
ty≥
 == 'm')

542 
	`c⁄f
(
submíu
);

546 
	}
}

548 
	$show_ãxtbox
(c⁄° *
tôÀ
, c⁄° *
ãxt
, 
r
, 
c
)

550 
fd
;

552 
fd
 = 
	`¸ót
(".help.tmp", 0777);

553 
	`wrôe
(
fd
, 
ãxt
, 
	`°æí
(text));

554 
	`˛o£
(
fd
);

556 
	`˝röt_öô
();

557 i‡(
tôÀ
) {

558 
	`˝röt
("--title");

559 
	`˝röt
("%s", 
tôÀ
);

561 
	`˝röt
("--textbox");

562 
	`˝röt
(".help.tmp");

563 
	`˝röt
("%d", 
r
);

564 
	`˝röt
("%d", 
c
);

565 } 
	`exec_c⁄f
() < 0);

566 
	`u∆ök
(".help.tmp");

567 
	}
}

569 
	$show_hñ±ext
(c⁄° *
tôÀ
, c⁄° *
ãxt
)

571 
	`show_ãxtbox
(
tôÀ
, 
ãxt
, 
rows
, 
cﬁs
);

572 
	}
}

574 
	$show_hñp
(
míu
 *menu)

576 c⁄° *
hñp
;

577 *
hñ±ext
;

578 
symbﬁ
 *
sym
 = 
míu
->sym;

580 
hñp
 = 
sym
->help;

581 i‡(!
hñp
)

582 
hñp
 = 
nohñp_ãxt
;

583 i‡(
sym
->
«me
) {

584 
hñ±ext
 = 
	`mÆloc
(
	`°æí
(
sym
->
«me
Ë+ såÀn(
hñp
) + 16);

585 
	`•rötf
(
hñ±ext
, "CONFIG_%s:\n\n%s", 
sym
->
«me
, 
hñp
);

586 
	`show_hñ±ext
(
	`míu_gë_¥om±
(
míu
), 
hñ±ext
);

587 
	`‰ì
(
hñ±ext
);

589 
	`show_hñ±ext
(
	`míu_gë_¥om±
(
míu
), 
hñp
);

590 
	}
}

592 
	$show_ªadme
()

595 
	`˝röt_öô
();

596 
	`˝röt
("--textbox");

597 
	`˝röt
("scripts/README.Menuconfig");

598 
	`˝röt
("%d", 
rows
);

599 
	`˝röt
("%d", 
cﬁs
);

600 } 
	`exec_c⁄f
() == -1);

601 
	}
}

603 
	$c⁄f_choi˚
(
míu
 *menu)

605 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

606 
míu
 *
chûd
;

607 
symbﬁ
 *
a˘ive
;

608 
°©
;

611 
	`˝röt_öô
();

612 
	`˝röt
("--title");

613 
	`˝röt
("%s", 
¥om±
 ?Örompt : "Main Menu");

614 
	`˝röt
("--radiolist");

615 
	`˝röt
(
ødiﬁi°_ö°ru˘i⁄s
);

616 
	`˝röt
("15");

617 
	`˝röt
("70");

618 
	`˝röt
("6");

620 
cuº_míu
 = 
míu
;

621 
a˘ive
 = 
	`sym_gë_choi˚_vÆue
(
míu
->
sym
);

622 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

623 i‡(!
	`míu_is_visibÀ
(
chûd
))

625 
	`˝röt
("%p", 
chûd
);

626 
	`˝röt
("%s", 
	`míu_gë_¥om±
(
chûd
));

627 
	`˝röt
(
chûd
->
sym
 =
a˘ive
 ? "ON" : "OFF");

630 
°©
 = 
	`exec_c⁄f
();

631 
°©
) {

633 i‡(
	`ssˇnf
(
öput_buf
, "%p", &
míu
) != 1)

635 
	`sym_£t_åi°©e_vÆue
(
míu
->
sym
, 
yes
);

638 
	`show_hñp
(
míu
);

644 
	}
}

646 
	$c⁄f_°rög
(
míu
 *menu)

648 c⁄° *
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

649 
°©
;

652 
	`˝röt_öô
();

653 
	`˝röt
("--title");

654 
	`˝röt
("%s", 
¥om±
 ?Örompt : "Main Menu");

655 
	`˝röt
("--inputbox");

656 
	`sym_gë_ty≥
(
míu
->
sym
)) {

657 
S_INT
:

658 
	`˝röt
(
öputbox_ö°ru˘i⁄s_öt
);

660 
S_HEX
:

661 
	`˝röt
(
öputbox_ö°ru˘i⁄s_hex
);

663 
S_STRING
:

664 
	`˝röt
(
öputbox_ö°ru˘i⁄s_°rög
);

669 
	`˝röt
("10");

670 
	`˝röt
("75");

671 
	`˝röt
("%s", 
	`sym_gë_°rög_vÆue
(
míu
->
sym
));

672 
°©
 = 
	`exec_c⁄f
();

673 
°©
) {

675 i‡(
	`sym_£t_°rög_vÆue
(
míu
->
sym
, 
öput_buf
))

677 
	`show_ãxtbox
(
NULL
, "You have madeán invalidÉntry.", 5, 43);

680 
	`show_hñp
(
míu
);

686 
	}
}

688 
	$c⁄f_lﬂd
()

690 
°©
;

693 
	`˝röt_öô
();

694 
	`˝röt
("--inputbox");

695 
	`˝röt
(
lﬂd_c⁄fig_ãxt
);

696 
	`˝röt
("11");

697 
	`˝röt
("55");

698 
	`˝röt
("%s", 
fûíame
);

699 
°©
 = 
	`exec_c⁄f
();

700 
°©
) {

702 i‡(!
öput_buf
[0])

704 i‡(!
	`c⁄f_ªad
(
öput_buf
))

706 
	`show_ãxtbox
(
NULL
, "File doesÇotÉxist!", 5, 38);

709 
	`show_hñ±ext
("Lﬂd A…î«ã C⁄figuøti⁄", 
lﬂd_c⁄fig_hñp
);

715 
	}
}

717 
	$c⁄f_ßve
()

719 
°©
;

722 
	`˝röt_öô
();

723 
	`˝röt
("--inputbox");

724 
	`˝röt
(
ßve_c⁄fig_ãxt
);

725 
	`˝röt
("11");

726 
	`˝röt
("55");

727 
	`˝röt
("%s", 
fûíame
);

728 
°©
 = 
	`exec_c⁄f
();

729 
°©
) {

731 i‡(!
öput_buf
[0])

733 i‡(!
	`c⁄f_wrôe
(
öput_buf
))

735 
	`show_ãxtbox
(
NULL
, "Can't create file! ProbablyáÇonexistent directory.", 5, 60);

738 
	`show_hñ±ext
("SavêA…î«ã C⁄figuøti⁄", 
ßve_c⁄fig_hñp
);

744 
	}
}

746 
	$c⁄f_˛ónup
()

748 
	`tc£èâr
(1, 
TCSAFLUSH
, &
ios_‹g
);

749 
	`u∆ök
(".help.tmp");

750 
	`u∆ök
("lxdialog.scrltmp");

751 
	}
}

753 
	$maö
(
ac
, **
av
)

755 
symbﬁ
 *
sym
;

756 *
mode
;

757 
°©
;

759 
	`c⁄f_∑r£
(
av
[1]);

760 
	`c⁄f_ªad
(
NULL
);

762 
sym
 = 
	`sym_lookup
("RTAI_VERSION", 0);

763 
	`sym_ˇlc_vÆue
(
sym
);

764 
	`•rötf
(
míu_backtôÀ
, "RTAI %s Configuration",

765 
	`sym_gë_°rög_vÆue
(
sym
));

767 
mode
 = 
	`gëív
("MENUCONFIG_MODE");

768 i‡(
mode
) {

769 i‡(!
	`°rˇ£cmp
(
mode
, "single_menu"))

770 
sögÀ_míu_mode
 = 1;

773 
	`tcgë©å
(1, &
ios_‹g
);

774 
	`©exô
(
c⁄f_˛ónup
);

775 
	`öô_wsize
();

776 
	`c⁄f
(&
roŸmíu
);

779 
	`˝röt_öô
();

780 
	`˝röt
("--yesno");

781 
	`˝röt
("Do you wishÅo save yourÇew configuration?");

782 
	`˝röt
("5");

783 
	`˝röt
("60");

784 
°©
 = 
	`exec_c⁄f
();

785 } 
°©
 < 0);

787 i‡(
°©
 == 0) {

788 
	`c⁄f_wrôe
(
NULL
);

790 
	`¥ötf
("\n\nYour RTAI configuration changes were NOT saved.\n\n");

793 
	}
}

	@/usr/src/rtai/base/config/kconfig/menu.c

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	#LKC_DIRECT_LINK


	)

10 
	~"lkc.h
"

12 
míu
 
	groŸmíu
;

13 
míu
 *
	gcuºít_míu
, *
	gcuºít_íåy
;

14 
míu
 **
	gœ°_íåy_±r
;

16 
fûe
 *
	gfûe_li°
;

17 
fûe
 *
	gcuºít_fûe
;

19 
	$míu_öô
()

21 
cuºít_íåy
 = 
cuºít_míu
 = &
roŸmíu
;

22 
œ°_íåy_±r
 = &
roŸmíu
.
li°
;

23 
	}
}

25 
	$míu_add_íåy
(
symbﬁ
 *
sym
)

27 
míu
 *menu;

29 
míu
 = 
	`mÆloc
((*menu));

30 
	`mem£t
(
míu
, 0, (*menu));

31 
míu
->
sym
 = sym;

32 
míu
->
∑ª¡
 = 
cuºít_míu
;

33 
míu
->
fûe
 = 
cuºít_fûe
;

34 
míu
->
löío
 = 
	`zc⁄f_löío
();

36 *
œ°_íåy_±r
 = 
míu
;

37 
œ°_íåy_±r
 = &
míu
->
√xt
;

38 
cuºít_íåy
 = 
míu
;

39 
	}
}

41 
	$míu_íd_íåy
()

43 
	}
}

45 
	$míu_add_míu
()

47 
cuºít_míu
 = 
cuºít_íåy
;

48 
œ°_íåy_±r
 = &
cuºít_íåy
->
li°
;

49 
	}
}

51 
	$míu_íd_míu
()

53 
œ°_íåy_±r
 = &
cuºít_míu
->
√xt
;

54 
cuºít_míu
 = cuºít_míu->
∑ª¡
;

55 
	}
}

57 
ex¥
 *
	$míu_check_dï
(
ex¥
 *
e
)

59 i‡(!
e
)

60  
e
;

62 
e
->
ty≥
) {

63 
E_NOT
:

64 
e
->
À·
.
ex¥
 = 
	`míu_check_dï
(e->left.expr);

66 
E_OR
:

67 
E_AND
:

68 
e
->
À·
.
ex¥
 = 
	`míu_check_dï
(e->left.expr);

69 
e
->
right
.
ex¥
 = 
	`míu_check_dï
(e->right.expr);

71 
E_SYMBOL
:

73 i‡(
e
->
À·
.
sym
 =&
symbﬁ_mod
)

74  
	`ex¥_Æloc_™d
(
e
, 
	`ex¥_Æloc_symbﬁ
(
moduÀs_sym
));

79  
e
;

80 
	}
}

82 
	$míu_add_dï
(
ex¥
 *
dï
)

84 
cuºít_íåy
->
dï
 = 
	`ex¥_Æloc_™d
(cuºít_íåy->dï, 
	`míu_check_dï
(dep));

85 
	}
}

87 
	$míu_£t_ty≥
(
ty≥
)

89 
symbﬁ
 *
sym
 = 
cuºít_íåy
->sym;

91 i‡(
sym
->
ty≥
 ==Åype)

93 i‡(
sym
->
ty≥
 =
S_UNKNOWN
) {

94 
sym
->
ty≥
 =Åype;

97 
	`Ârötf
(
°dîr
, "%s:%d:warning:Åype of '%s'Ñedefined from '%s'Åo '%s'\n",

98 
cuºít_íåy
->
fûe
->
«me
, cuºít_íåy->
löío
,

99 
sym
->
«me
 ? sym->«mê: "<choi˚>", 
	`sym_ty≥_«me
(sym->
ty≥
), sym_type_name(type));

100 
	}
}

102 
¥›îty
 *
	$míu_add_¥›
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *ex¥, ex¥ *
dï
)

104 
¥›îty
 *
¥›
 = 
	`¥›_Æloc
(
ty≥
, 
cuºít_íåy
->
sym
);

106 
¥›
->
míu
 = 
cuºít_íåy
;

107 
¥›
->
ãxt
 = 
¥om±
;

108 
¥›
->
ex¥
 =Éxpr;

109 
¥›
->
visibÀ
.
ex¥
 = 
	`míu_check_dï
(
dï
);

111 i‡(
¥om±
) {

112 i‡(
cuºít_íåy
->
¥om±
)

113 
	`Ârötf
(
°dîr
, "%s:%d:ÖromptÑedefined\n",

114 
cuºít_íåy
->
fûe
->
«me
, cuºít_íåy->
löío
);

115 
cuºít_íåy
->
¥om±
 = 
¥›
;

118  
¥›
;

119 
	}
}

121 
	$míu_add_¥om±
(
¥›_ty≥
 
ty≥
, *
¥om±
, 
ex¥
 *
dï
)

123 
	`míu_add_¥›
(
ty≥
, 
¥om±
, 
NULL
, 
dï
);

124 
	}
}

126 
	$míu_add_ex¥
(
¥›_ty≥
 
ty≥
, 
ex¥
 *ex¥, ex¥ *
dï
)

128 
	`míu_add_¥›
(
ty≥
, 
NULL
, 
ex¥
, 
dï
);

129 
	}
}

131 
	$míu_add_symbﬁ
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
, 
ex¥
 *
dï
)

133 
	`míu_add_¥›
(
ty≥
, 
NULL
, 
	`ex¥_Æloc_symbﬁ
(
sym
), 
dï
);

134 
	}
}

136 
	$míu_föÆize
(
míu
 *
∑ª¡
)

138 
míu
 *míu, *
œ°_míu
;

139 
symbﬁ
 *
sym
;

140 
¥›îty
 *
¥›
;

141 
ex¥
 *
∑ª¡dï
, *
ba£dï
, *
dï
, *
dï2
, **
ï
;

143 
sym
 = 
∑ª¡
->sym;

144 i‡(
∑ª¡
->
li°
) {

145 i‡(
sym
 && 
	`sym_is_choi˚
(sym)) {

147 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

148 i‡(
míu
->
sym
) {

149 
cuºít_íåy
 = 
∑ª¡
;

150 
	`míu_£t_ty≥
(
míu
->
sym
->
ty≥
);

151 
cuºít_íåy
 = 
míu
;

152 
	`míu_£t_ty≥
(
sym
->
ty≥
);

156 
∑ª¡dï
 = 
	`ex¥_Æloc_symbﬁ
(
sym
);

157 } i‡(
∑ª¡
->
¥om±
)

158 
∑ª¡dï
 = 
∑ª¡
->
¥om±
->
visibÀ
.
ex¥
;

160 
∑ª¡dï
 = 
∑ª¡
->
dï
;

162 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

163 
ba£dï
 = 
	`ex¥_å™sf‹m
(
míu
->
dï
);

164 
ba£dï
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
∑ª¡dï
), basedep);

165 
ba£dï
 = 
	`ex¥_ñimö©e_dups
(basedep);

166 
míu
->
dï
 = 
ba£dï
;

167 i‡(
míu
->
sym
)

168 
¥›
 = 
míu
->
sym
->prop;

170 
¥›
 = 
míu
->
¥om±
;

171 ; 
¥›
;Ör› =Ör›->
√xt
) {

172 i‡(
¥›
->
míu
 != menu)

174 
dï
 = 
	`ex¥_å™sf‹m
(
¥›
->
visibÀ
.
ex¥
);

175 
dï
 = 
	`ex¥_Æloc_™d
(
	`ex¥_c›y
(
ba£dï
), dep);

176 
dï
 = 
	`ex¥_ñimö©e_dups
(dep);

177 i‡(
míu
->
sym
 && míu->sym->
ty≥
 !
S_TRISTATE
)

178 
dï
 = 
	`ex¥_å™s_boﬁ
(dep);

179 
¥›
->
visibÀ
.
ex¥
 = 
dï
;

180 i‡(
¥›
->
ty≥
 =
P_SELECT
) {

181 
symbﬁ
 *
es
 = 
	`¥›_gë_symbﬁ
(
¥›
);

182 
es
->
ªv_dï
.
ex¥
 = 
	`ex¥_Æloc_‹
(es->rev_dep.expr,

183 
	`ex¥_Æloc_™d
(
	`ex¥_Æloc_symbﬁ
(
míu
->
sym
), 
	`ex¥_c›y
(
dï
)));

187 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
)

188 
	`míu_föÆize
(
míu
);

189 } i‡(
sym
) {

190 
ba£dï
 = 
∑ª¡
->
¥om±
 ?Ö¨ít->¥om±->
visibÀ
.
ex¥
 : 
NULL
;

191 
ba£dï
 = 
	`ex¥_å™s_com∑ª
(ba£dï, 
E_UNEQUAL
, &
symbﬁ_no
);

192 
ba£dï
 = 
	`ex¥_ñimö©e_dups
(
	`ex¥_å™sf‹m
(basedep));

193 
œ°_míu
 = 
NULL
;

194 
míu
 = 
∑ª¡
->
√xt
; menu; menu = menu->next) {

195 
dï
 = 
míu
->
¥om±
 ? míu->¥om±->
visibÀ
.
ex¥
 : menu->dep;

196 i‡(!
	`ex¥_c⁄èös_symbﬁ
(
dï
, 
sym
))

198 i‡(
	`ex¥_dïíds_symbﬁ
(
dï
, 
sym
))

199 
√xt
;

200 
dï
 = 
	`ex¥_å™s_com∑ª
(dï, 
E_UNEQUAL
, &
symbﬁ_no
);

201 
dï
 = 
	`ex¥_ñimö©e_dups
(
	`ex¥_å™sf‹m
(dep));

202 
dï2
 = 
	`ex¥_c›y
(
ba£dï
);

203 
	`ex¥_ñimö©e_eq
(&
dï
, &
dï2
);

204 
	`ex¥_‰ì
(
dï
);

205 i‡(!
	`ex¥_is_yes
(
dï2
)) {

206 
	`ex¥_‰ì
(
dï2
);

209 
	`ex¥_‰ì
(
dï2
);

210 
√xt
:

211 
	`míu_föÆize
(
míu
);

212 
míu
->
∑ª¡
 =Öarent;

213 
œ°_míu
 = 
míu
;

215 i‡(
œ°_míu
) {

216 
∑ª¡
->
li°
 =Ö¨ít->
√xt
;

217 
∑ª¡
->
√xt
 = 
œ°_míu
->next;

218 
œ°_míu
->
√xt
 = 
NULL
;

221 
míu
 = 
∑ª¡
->
li°
; míu; míu = míu->
√xt
) {

222 i‡(
sym
 && 
	`sym_is_choi˚
(symË&& 
míu
->sym) {

223 
míu
->
sym
->
Êags
 |
SYMBOL_CHOICEVAL
;

224 i‡(!
míu
->
¥om±
)

225 
	`Ârötf
(
°dîr
, "%s:%d:warning: choice value must haveáÖrompt\n",

226 
míu
->
fûe
->
«me
, míu->
löío
);

227 
¥›
 = 
míu
->
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

228 i‡(
¥›
->
ty≥
 =
P_PROMPT
 &&Ör›->
míu
 != menu) {

229 
	`Ârötf
(
°dîr
, "%s:%d:warning: choice values currently only supportá singleÖrompt\n",

230 
¥›
->
fûe
->
«me
,Ör›->
löío
);

233 i‡(
¥›
->
ty≥
 =
P_DEFAULT
)

234 
	`Ârötf
(
°dîr
, "%s:%d:warning: defaults for choice valuesÇot supported\n",

235 
¥›
->
fûe
->
«me
,Ör›->
löío
);

237 
cuºít_íåy
 = 
míu
;

238 
	`míu_£t_ty≥
(
sym
->
ty≥
);

239 
	`míu_add_symbﬁ
(
P_CHOICE
, 
sym
, 
NULL
);

240 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

241 
ï
 = &
¥›
->
ex¥
; *ï;É∞&(*ï)->
À·
.expr)

243 *
ï
 = 
	`ex¥_Æloc_⁄e
(
E_CHOICE
, 
NULL
);

244 (*
ï
)->
right
.
sym
 = 
míu
->sym;

246 i‡(
míu
->
li°
 && (!míu->
¥om±
 || !míu->¥om±->
ãxt
)) {

247 
œ°_míu
 = 
míu
->
li°
; ;Üa°_míu =Üa°_míu->
√xt
) {

248 
œ°_míu
->
∑ª¡
 =Öarent;

249 i‡(!
œ°_míu
->
√xt
)

252 
œ°_míu
->
√xt
 = 
míu
->next;

253 
míu
->
√xt
 = míu->
li°
;

254 
míu
->
li°
 = 
NULL
;

258 i‡(
sym
 && !(sym->
Êags
 & 
SYMBOL_WARNED
)) {

259 
symbﬁ
 *
sym2
;

260 i‡(
sym
->
ty≥
 =
S_UNKNOWN
)

261 
	`Ârötf
(
°dîr
, "%s:%d:warning: config symbol defined withoutÅype\n",

262 
∑ª¡
->
fûe
->
«me
,Ö¨ít->
löío
);

264 i‡(
	`sym_is_choi˚
(
sym
Ë&& !
∑ª¡
->
¥om±
)

265 
	`Ârötf
(
°dîr
, "%s:%d:warning: choice must haveáÖrompt\n",

266 
∑ª¡
->
fûe
->
«me
,Ö¨ít->
löío
);

268 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

269 
¥›
->
ty≥
) {

270 
P_DEFAULT
:

271 i‡((
sym
->
ty≥
 =
S_STRING
 || sym->ty≥ =
S_INT
 || sym->ty≥ =
S_HEX
) &&

272 
¥›
->
ex¥
->
ty≥
 !
E_SYMBOL
)

273 
	`Ârötf
(
°dîr
, "%s:%d:warning: default must beá single symbol\n",

274 
¥›
->
fûe
->
«me
,Ör›->
löío
);

276 
P_SELECT
:

277 
sym2
 = 
	`¥›_gë_symbﬁ
(
¥›
);

278 i‡((
sym
->
ty≥
 !
S_BOOLEAN
 && sym->ty≥ !
S_TRISTATE
) ||

279 (
sym2
->
ty≥
 !
S_BOOLEAN
 && sym2->ty≥ !
S_TRISTATE
))

280 
	`Ârötf
(
°dîr
, "%s:%d:warning:Énable is onlyállowed with booleanándÅristate symbols\n",

281 
¥›
->
fûe
->
«me
,Ör›->
löío
);

283 
P_RANGE
:

284 i‡(
sym
->
ty≥
 !
S_INT
 && sym->ty≥ !
S_HEX
)

285 
	`Ârötf
(
°dîr
, "%s:%d:warning:Ñange is onlyállowed for int or hex symbols\n",

286 
¥›
->
fûe
->
«me
,Ör›->
löío
);

287 i‡(!
	`sym_°rög_vÆid
(
sym
, 
¥›
->
ex¥
->
À·
.sym->
«me
) ||

288 !
	`sym_°rög_vÆid
(
sym
, 
¥›
->
ex¥
->
right
.sym->
«me
))

289 
	`Ârötf
(
°dîr
, "%s:%d:warning:Ñange is invalid\n",

290 
¥›
->
fûe
->
«me
,Ör›->
löío
);

296 
sym
->
Êags
 |
SYMBOL_WARNED
;

299 i‡(
sym
 && !
	`sym_is_›ti⁄Æ
(symË&& 
∑ª¡
->
¥om±
) {

300 
sym
->
ªv_dï
.
ex¥
 = 
	`ex¥_Æloc_‹
(sym->rev_dep.expr,

301 
	`ex¥_Æloc_™d
(
∑ª¡
->
¥om±
->
visibÀ
.
ex¥
,

302 
	`ex¥_Æloc_symbﬁ
(&
symbﬁ_mod
)));

304 
	}
}

306 
boﬁ
 
	$míu_is_visibÀ
(
míu
 *menu)

308 
míu
 *
chûd
;

309 
symbﬁ
 *
sym
;

310 
åi°©e
 
visibÀ
;

312 i‡(!
míu
->
¥om±
)

313  
Ál£
;

314 
sym
 = 
míu
->sym;

315 i‡(
sym
) {

316 
	`sym_ˇlc_vÆue
(
sym
);

317 
visibÀ
 = 
míu
->
¥om±
->visibÀ.
åi
;

319 
visibÀ
 = 
míu
->
¥om±
->visibÀ.
åi
 = 
	`ex¥_ˇlc_vÆue
(míu->¥om±->visibÀ.
ex¥
);

321 i‡(
visibÀ
 !
no
)

322  
åue
;

323 i‡(!
sym
 || 
	`sym_gë_åi°©e_vÆue
(
míu
->symË=
no
)

324  
Ál£
;

326 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
)

327 i‡(
	`míu_is_visibÀ
(
chûd
))

328  
åue
;

329  
Ál£
;

330 
	}
}

332 c⁄° *
	$míu_gë_¥om±
(
míu
 *menu)

334 i‡(
míu
->
¥om±
)

335  
míu
->
¥om±
->
ãxt
;

336 i‡(
míu
->
sym
)

337  
míu
->
sym
->
«me
;

338  
NULL
;

339 
	}
}

341 
míu
 *
	$míu_gë_roŸ_míu
(
míu
 *menu)

343  &
roŸmíu
;

344 
	}
}

346 
míu
 *
	$míu_gë_∑ª¡_míu
(
míu
 *menu)

348 
¥›_ty≥
 
ty≥
;

350 ; 
míu
 !&
roŸmíu
; míu = míu->
∑ª¡
) {

351 
ty≥
 = 
míu
->
¥om±
 ? menu->prompt->type : 0;

352 i‡(
ty≥
 =
P_MENU
)

355  
míu
;

356 
	}
}

358 
fûe
 *
	$fûe_lookup
(c⁄° *
«me
)

360 
fûe
 *file;

362 
fûe
 = 
fûe_li°
; fûe; fûêfûe->
√xt
) {

363 i‡(!
	`°rcmp
(
«me
, 
fûe
->name))

364  
fûe
;

367 
fûe
 = 
	`mÆloc
((*file));

368 
	`mem£t
(
fûe
, 0, (*file));

369 
fûe
->
«me
 = 
	`°rdup
(name);

370 
fûe
->
√xt
 = 
fûe_li°
;

371 
fûe_li°
 = 
fûe
;

372  
fûe
;

373 
	}
}

	@/usr/src/rtai/base/config/kconfig/qconf.cc

6 
	~<q≠∂iˇti⁄.h
>

7 
	~<qmaöwödow.h
>

8 
	~<qtoﬁb¨.h
>

9 
	~<qvbox.h
>

10 
	~<q•lôãr.h
>

11 
	~<qli°võw.h
>

12 
	~<qãxtvõw.h
>

13 
	~<qlöìdô.h
>

14 
	~<qmíub¨.h
>

15 
	~<qmesßgebox.h
>

16 
	~<qa˘i⁄.h
>

17 
	~<qhódî.h
>

18 
	~<qfûedülog.h
>

19 
	~<qªgexp.h
>

20 #i‡
QT_VERSION
 >= 300

21 
	~<q£âögs.h
>

24 
	~<°dlib.h
>

26 
	~"lkc.h
"

27 
	~"qc⁄f.h
"

29 
	~"qc⁄f.moc
"

30 
	~"images.c
"

32 
QAµliˇti⁄
 *
	gc⁄figAµ
;

33 #i‡
QT_VERSION
 >= 300

34 
QSëtögs
 *
	gc⁄figSëtögs
;

44 
	gãm∂©e
 <
˛ass
 
	gP
>

45 
	gC⁄figLi°
::
	$upd©eMíuLi°
(
P
* 
∑ª¡
, 
míu
* menu)

47 
míu
* 
chûd
;

48 
C⁄figIãm
* 
ôem
;

49 
C⁄figIãm
* 
œ°
;

50 
boﬁ
 
visibÀ
;

51 
¥›_ty≥
 
ty≥
;

53 i‡(!
míu
) {

54 (
ôem
 = 
∑ª¡
->
	`fú°Chûd
()))

55 
dñëe
 
ôem
;

59 
œ°
 = 
∑ª¡
->
	`fú°Chûd
();

60 i‡(
œ°
 && !œ°->
goP¨ít
)

61 
œ°
 = 0;

62 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

63 
ôem
 = 
œ°
 ?Üa°->
	`√xtSiblög
(Ë: 
∑ª¡
->
	`fú°Chûd
();

64 
ty≥
 = 
chûd
->
¥om±
 ? chûd->¥om±->ty≥ : 
P_UNKNOWN
;

66 
mode
) {

67 
míuMode
:

68 i‡(!(
chûd
->
Êags
 & 
MENU_ROOT
))

69 
hide
;

71 
symbﬁMode
:

72 i‡(
chûd
->
Êags
 & 
MENU_ROOT
)

73 
hide
;

79 
visibÀ
 = 
	`míu_is_visibÀ
(
chûd
);

80 i‡(
showAŒ
 || 
visibÀ
) {

81 i‡(!
ôem
 || iãm->
míu
 !
chûd
)

82 
ôem
 = 
√w
 
	`C⁄figIãm
(
∑ª¡
, 
œ°
, 
chûd
, 
visibÀ
);

84 
ôem
->
	`ã°Upd©eMíu
(
visibÀ
);

86 i‡(
mode
 =
fuŒMode
 || modê=
míuMode
 || 
ty≥
 !
P_MENU
)

87 
	`upd©eMíuLi°
(
ôem
, 
chûd
);

89 
	`upd©eMíuLi°
(
ôem
, 0);

90 
œ°
 = 
ôem
;

93 
hide
:

94 i‡(
ôem
 && iãm->
míu
 =
chûd
) {

95 
œ°
 = 
∑ª¡
->
	`fú°Chûd
();

96 i‡(
œ°
 =
ôem
)

97 
œ°
 = 0;

98 
œ°
->
	`√xtSiblög
(Ë!
ôem
)

99 
œ°
 =Üa°->
	`√xtSiblög
();

100 
dñëe
 
ôem
;

103 
	}
}

105 #i‡
QT_VERSION
 >= 300

110 
	gC⁄figIãm
::
	$okRíame
(
cﬁ
)

112 
P¨ít
::
	`okRíame
(
cﬁ
);

113 
	`sym_£t_°rög_vÆue
(
míu
->
sym
, 
	`ãxt
(
d©aCﬁIdx
).
	`œtö1
());

114 
	}
}

120 
	gC⁄figIãm
::
	$upd©eMíu
()

122 
C⁄figLi°
* 
li°
;

123 
symbﬁ
* 
sym
;

124 
¥›îty
 *
¥›
;

125 
QSåög
 
¥om±
;

126 
ty≥
;

127 
åi°©e
 
ex¥
;

129 
li°
 = 
	`li°Võw
();

130 i‡(
goP¨ít
) {

131 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
míuBackPix
);

132 
¥om±
 = "..";

133 
£t_¥om±
;

136 
sym
 = 
míu
->sym;

137 
¥›
 = 
míu
->
¥om±
;

138 
¥om±
 = 
	`míu_gë_¥om±
(
míu
);

140 i‡(
¥›
Ë¥›->
ty≥
) {

141 
P_MENU
:

142 i‡(
li°
->
mode
 =
sögÀMode
 ||Üi°->modê=
symbﬁMode
) {

146 i‡(
sym
 && 
li°
->
roŸE¡ry
 =
míu
)

148 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
míuPix
);

150 i‡(
sym
)

152 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

154 
£t_¥om±
;

155 
P_COMMENT
:

156 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

157 
£t_¥om±
;

161 i‡(!
sym
)

162 
£t_¥om±
;

164 
	`£tText
(
«meCﬁIdx
, 
sym
->
«me
);

166 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

167 
ty≥
) {

168 
S_BOOLEAN
:

169 
S_TRISTATE
:

170 
ch
;

172 i‡(!
	`sym_is_ch™gabÀ
(
sym
Ë&& !
li°
->
showAŒ
) {

173 
	`£tPixm≠
(
¥om±CﬁIdx
, 0);

174 
	`£tText
(
noCﬁIdx
, 0);

175 
	`£tText
(
modCﬁIdx
, 0);

176 
	`£tText
(
yesCﬁIdx
, 0);

179 
ex¥
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

180 
ex¥
) {

181 
yes
:

182 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
ty≥
 =
S_BOOLEAN
)

183 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
choi˚YesPix
);

185 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁYesPix
);

186 
	`£tText
(
yesCﬁIdx
, "Y");

187 
ch
 = 'Y';

189 
mod
:

190 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁModPix
);

191 
	`£tText
(
modCﬁIdx
, "M");

192 
ch
 = 'M';

195 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
ty≥
 =
S_BOOLEAN
)

196 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
choi˚NoPix
);

198 
	`£tPixm≠
(
¥om±CﬁIdx
, 
li°
->
symbﬁNoPix
);

199 
	`£tText
(
noCﬁIdx
, "N");

200 
ch
 = 'N';

203 i‡(
ex¥
 !
no
)

204 
	`£tText
(
noCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
no
) ? "_" : 0);

205 i‡(
ex¥
 !
mod
)

206 
	`£tText
(
modCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
mod
) ? "_" : 0);

207 i‡(
ex¥
 !
yes
)

208 
	`£tText
(
yesCﬁIdx
, 
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
) ? "_" : 0);

210 
	`£tText
(
d©aCﬁIdx
, 
	`QCh¨
(
ch
));

212 
S_INT
:

213 
S_HEX
:

214 
S_STRING
:

215 c⁄° * 
d©a
;

217 
d©a
 = 
	`sym_gë_°rög_vÆue
(
sym
);

218 #i‡
QT_VERSION
 >= 300

219 
i
 = 
li°
->
	`m≠Idx
(
d©aCﬁIdx
);

220 i‡(
i
 >= 0)

221 
	`£tRíameE«bÀd
(
i
, 
TRUE
);

223 
	`£tText
(
d©aCﬁIdx
, 
d©a
);

224 i‡(
ty≥
 =
S_STRING
)

225 
¥om±
.
	`•rötf
("%s: %s",Örom±.
	`œtö1
(), 
d©a
);

227 
¥om±
.
	`•rötf
("(%sË%s", 
d©a
,Örom±.
	`œtö1
());

230 i‡(!
	`sym_has_vÆue
(
sym
Ë&& 
visibÀ
)

231 
¥om±
 += " (NEW)";

232 
£t_¥om±
:

233 
	`£tText
(
¥om±CﬁIdx
, 
¥om±
);

234 
	}
}

236 
	gC⁄figIãm
::
	$ã°Upd©eMíu
(
boﬁ
 
v
)

238 
C⁄figIãm
* 
i
;

240 
visibÀ
 = 
v
;

241 i‡(!
míu
)

244 
	`sym_ˇlc_vÆue
(
míu
->
sym
);

245 i‡(
míu
->
Êags
 & 
MENU_CHANGED
) {

247 
míu
->
Êags
 &~
MENU_CHANGED
;

248 
i
 = (
C⁄figIãm
*)
míu
->
d©a
; i; i = i->
√xtIãm
)

249 
i
->
	`upd©eMíu
();

250 } i‡(
	`li°Võw
()->
upd©eAŒ
)

251 
	`upd©eMíu
();

252 
	}
}

254 
	gC⁄figIãm
::
	$∑ötCñl
(
QPaöãr
* 
p
, c⁄° 
QCﬁ‹Group
& 
cg
, 
cﬁumn
, 
width
, 
Æign
)

256 
C⁄figLi°
* 
li°
 = 
	`li°Võw
();

258 i‡(
visibÀ
) {

259 i‡(
	`isSñe˘ed
(Ë&& !
li°
->
	`hasFocus
(Ë&&Üi°->
mode
 =
míuMode
)

260 
P¨ít
::
	`∑ötCñl
(
p
, 
li°
->
öa˘ivedCﬁ‹Group
, 
cﬁumn
, 
width
, 
Æign
);

262 
P¨ít
::
	`∑ötCñl
(
p
, 
cg
, 
cﬁumn
, 
width
, 
Æign
);

264 
P¨ít
::
	`∑ötCñl
(
p
, 
li°
->
dißbÀdCﬁ‹Group
, 
cﬁumn
, 
width
, 
Æign
);

265 
	}
}

270 
	gC⁄figIãm
::
	$öô
()

272 i‡(
míu
) {

273 
C⁄figLi°
* 
li°
 = 
	`li°Võw
();

274 
√xtIãm
 = (
C⁄figIãm
*)
míu
->
d©a
;

275 
míu
->
d©a
 = 
this
;

277 i‡(
li°
->
mode
 !
fuŒMode
)

278 
	`£tO≥n
(
TRUE
);

279 
	`sym_ˇlc_vÆue
(
míu
->
sym
);

281 
	`upd©eMíu
();

282 
	}
}

287 
	gC⁄figIãm
::~
	$C⁄figIãm
()

289 i‡(
míu
) {

290 
C⁄figIãm
** 
ù
 = (C⁄figIãm**)&
míu
->
d©a
;

291 ; *
ù
; i∞&(*ù)->
√xtIãm
) {

292 i‡(*
ù
 =
this
) {

293 *
ù
 = 
√xtIãm
;

298 
	}
}

300 
	gC⁄figLöeEdô
::
	$show
(
C⁄figIãm
* 
i
)

302 
ôem
 = 
i
;

303 i‡(
	`sym_gë_°rög_vÆue
(
ôem
->
míu
->
sym
))

304 
	`£tText
(
	`sym_gë_°rög_vÆue
(
ôem
->
míu
->
sym
));

306 
	`£tText
(0);

307 
P¨ít
::
	`show
();

308 
	`£tFocus
();

309 
	}
}

311 
	gC⁄figLöeEdô
::
	$keyPªssEvít
(
QKeyEvít
* 
e
)

313 
e
->
	`key
()) {

314 
Key_Esˇ≥
:

316 
Key_Rëu∫
:

317 
Key_E¡î
:

318 
	`sym_£t_°rög_vÆue
(
ôem
->
míu
->
sym
, 
	`ãxt
().
	`œtö1
());

319 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

322 
P¨ít
::
	`keyPªssEvít
(
e
);

325 
e
->
	`ac˚±
();

326 
	`∑ª¡
()->
li°
->
	`£tFocus
();

327 
	`hide
();

328 
	}
}

330 
	gC⁄figLi°
::
	$C⁄figLi°
(
C⁄figVõw
* 
p
, 
C⁄figMaöWödow
* 
cv
)

331 : 
	`P¨ít
(
p
), 
	`cvõw
(
cv
),

332 
	`upd©eAŒ
(
Ál£
),

333 
	`symbﬁYesPix
(
xpm_symbﬁ_yes
), 
	`symbﬁModPix
(
xpm_symbﬁ_mod
), 
	`symbﬁNoPix
(
xpm_symbﬁ_no
),

334 
	`choi˚YesPix
(
xpm_choi˚_yes
), 
	`choi˚NoPix
(
xpm_choi˚_no
),

335 
	`míuPix
(
xpm_míu
), 
	`míuInvPix
(
xpm_míu_öv
), 
	`míuBackPix
(
xpm_míuback
), 
	`voidPix
(
xpm_void
),

336 
	`showAŒ
(
Ál£
), 
	`showName
(Ál£), 
	`showR™ge
(Ál£), 
	`showD©a
(false),

337 
	$roŸE¡ry
(0)

339 
i
;

341 
	`£tS‹tög
(-1);

342 
	`£tRoŸIsDec‹©ed
(
TRUE
);

343 
dißbÀdCﬁ‹Group
 = 
	`∑Àâe
().
	`a˘ive
();

344 
dißbÀdCﬁ‹Group
.
	`£tCﬁ‹
(
QCﬁ‹Group
::
Text
, 
	`∑Àâe
().
	`dißbÀd
().
	`ãxt
());

345 
öa˘ivedCﬁ‹Group
 = 
	`∑Àâe
().
	`a˘ive
();

346 
öa˘ivedCﬁ‹Group
.
	`£tCﬁ‹
(
QCﬁ‹Group
::
Highlight
, 
	`∑Àâe
().
	`dißbÀd
().
	`highlight
());

348 
	`c⁄√˘
(
this
, 
	`SIGNAL
(
	`£À˘i⁄Ch™ged
()),

349 
	`SLOT
(
	`upd©eSñe˘i⁄
()));

351 
i
 = 0; i < 
cﬁNr
; i++)

352 
cﬁM≠
[
i
] = 
cﬁRevM≠
[i] = -1;

353 
	`addCﬁumn
(
¥om±CﬁIdx
, "Option");

355 
	`ªöô
();

356 
	}
}

358 
	gC⁄figLi°
::
	$ªöô
()

360 
	`ªmoveCﬁumn
(
d©aCﬁIdx
);

361 
	`ªmoveCﬁumn
(
yesCﬁIdx
);

362 
	`ªmoveCﬁumn
(
modCﬁIdx
);

363 
	`ªmoveCﬁumn
(
noCﬁIdx
);

364 
	`ªmoveCﬁumn
(
«meCﬁIdx
);

366 i‡(
showName
)

367 
	`addCﬁumn
(
«meCﬁIdx
, "Name");

368 i‡(
showR™ge
) {

369 
	`addCﬁumn
(
noCﬁIdx
, "N");

370 
	`addCﬁumn
(
modCﬁIdx
, "M");

371 
	`addCﬁumn
(
yesCﬁIdx
, "Y");

373 i‡(
showD©a
)

374 
	`addCﬁumn
(
d©aCﬁIdx
, "Value");

376 
	`upd©eLi°AŒ
();

377 
	}
}

379 
	gC⁄figLi°
::
	$upd©eSñe˘i⁄
()

381 
míu
 *menu;

382 
¥›_ty≥
 
ty≥
;

384 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`£À˘edIãm
();

385 i‡(!
ôem
)

388 
cvõw
->
	`£tHñp
(
ôem
);

390 
míu
 = 
ôem
->menu;

391 i‡(!
míu
)

393 
ty≥
 = 
míu
->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

394 i‡(
mode
 =
míuMode
 && 
ty≥
 =
P_MENU
)

395 
emô
 
	`míuSñe˘ed
(
míu
);

396 
	}
}

398 
	gC⁄figLi°
::
	$upd©eLi°
(
C⁄figIãm
* 
ôem
)

400 
C⁄figIãm
* 
œ°
 = 0;

402 i‡(!
roŸE¡ry
)

403 
upd©e
;

405 i‡(
roŸE¡ry
 !&
roŸmíu
 && (
mode
 =
sögÀMode
 ||

406 (
mode
 =
symbﬁMode
 && 
roŸE¡ry
->
∑ª¡
 !&
roŸmíu
))) {

407 
ôem
 = 
	`fú°Chûd
();

408 i‡(!
ôem
)

409 
ôem
 = 
√w
 
	`C⁄figIãm
(
this
, 0, 
åue
);

410 
œ°
 = 
ôem
;

412 i‡((
mode
 =
sögÀMode
 || modê=
symbﬁMode
) &&

413 
roŸE¡ry
->
sym
 &&ÑoŸE¡ry->
¥om±
) {

414 
ôem
 = 
œ°
 ?Üa°->
	`√xtSiblög
(Ë: 
	`fú°Chûd
();

415 i‡(!
ôem
)

416 
ôem
 = 
√w
 
	`C⁄figIãm
(
this
, 
œ°
, 
roŸE¡ry
, 
åue
);

418 
ôem
->
	`ã°Upd©eMíu
(
åue
);

420 
	`upd©eMíuLi°
(
ôem
, 
roŸE¡ry
);

421 
	`åiggîUpd©e
();

424 
upd©e
:

425 
	`upd©eMíuLi°
(
this
, 
roŸE¡ry
);

426 
	`åiggîUpd©e
();

427 
	}
}

429 
	gC⁄figLi°
::
	$£tAŒO≥n
(
boﬁ
 
›í
)

431 
QLi°VõwIãmIãøt‹
 
	`ô
(
this
);

433 ; 
ô
.
	`cuºít
(); it++)

434 
ô
.
	`cuºít
()->
	`£tO≥n
(
›í
);

435 
	}
}

437 
	gC⁄figLi°
::
	$£tVÆue
(
C⁄figIãm
* 
ôem
, 
åi°©e
 
vÆ
)

439 
symbﬁ
* 
sym
;

440 
ty≥
;

441 
åi°©e
 
ﬁdvÆ
;

443 
sym
 = 
ôem
->
míu
 ? item->menu->sym : 0;

444 i‡(!
sym
)

447 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

448 
ty≥
) {

449 
S_BOOLEAN
:

450 
S_TRISTATE
:

451 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

453 i‡(!
	`sym_£t_åi°©e_vÆue
(
sym
, 
vÆ
))

455 i‡(
ﬁdvÆ
 =
no
 && 
ôem
->
míu
->
li°
)

456 
ôem
->
	`£tO≥n
(
TRUE
);

457 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

460 
	}
}

462 
	gC⁄figLi°
::
	$ch™geVÆue
(
C⁄figIãm
* 
ôem
)

464 
symbﬁ
* 
sym
;

465 
míu
* menu;

466 
ty≥
, 
ﬁdex¥
, 
√wex¥
;

468 
míu
 = 
ôem
->menu;

469 i‡(!
míu
)

471 
sym
 = 
míu
->sym;

472 i‡(!
sym
) {

473 i‡(
ôem
->
míu
->
li°
)

474 
ôem
->
	`£tO≥n
(!ôem->
	`isO≥n
());

478 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

479 
ty≥
) {

480 
S_BOOLEAN
:

481 
S_TRISTATE
:

482 
ﬁdex¥
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

483 
√wex¥
 = 
	`sym_toggÀ_åi°©e_vÆue
(
sym
);

484 i‡(
ôem
->
míu
->
li°
) {

485 i‡(
ﬁdex¥
 =
√wex¥
)

486 
ôem
->
	`£tO≥n
(!ôem->
	`isO≥n
());

487 i‡(
ﬁdex¥
 =
no
)

488 
ôem
->
	`£tO≥n
(
TRUE
);

490 i‡(
ﬁdex¥
 !
√wex¥
)

491 
	`∑ª¡
()->
	`upd©eLi°
(
ôem
);

493 
S_INT
:

494 
S_HEX
:

495 
S_STRING
:

496 #i‡
QT_VERSION
 >= 300

497 i‡(
cﬁM≠
[
d©aCﬁIdx
] >= 0)

498 
ôem
->
	`°¨tRíame
(
cﬁM≠
[
d©aCﬁIdx
]);

501 
	`∑ª¡
()->
löeEdô
->
	`show
(
ôem
);

504 
	}
}

506 
	gC⁄figLi°
::
	$£tRoŸMíu
(
míu
 *menu)

508 
¥›_ty≥
 
ty≥
;

510 i‡(
roŸE¡ry
 =
míu
)

512 
ty≥
 = 
míu
 && míu->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

513 i‡(
ty≥
 !
P_MENU
)

515 
	`upd©eMíuLi°
(
this
, 0);

516 
roŸE¡ry
 = 
míu
;

517 
	`upd©eLi°AŒ
();

518 
	`£tSñe˘ed
(
	`cuºítIãm
(), 
	`hasFocus
());

519 
	}
}

521 
	gC⁄figLi°
::
	$£tP¨ítMíu
()

523 
C⁄figIãm
* 
ôem
;

524 
míu
 *
ﬁdroŸ
;

526 
ﬁdroŸ
 = 
roŸE¡ry
;

527 i‡(
roŸE¡ry
 =&
roŸmíu
)

529 
	`£tRoŸMíu
(
	`míu_gë_∑ª¡_míu
(
roŸE¡ry
->
∑ª¡
));

531 
QLi°VõwIãmIãøt‹
 
	`ô
(
this
);

532 ; (
ôem
 = (
C⁄figIãm
*)
ô
.
	`cuºít
()); it++) {

533 i‡(
ôem
->
míu
 =
ﬁdroŸ
) {

534 
	`£tCuºítIãm
(
ôem
);

535 
	`ísuªIãmVisibÀ
(
ôem
);

539 
	}
}

541 
	gC⁄figLi°
::
	$keyPªssEvít
(
QKeyEvít
* 
ev
)

543 
QLi°VõwIãm
* 
i
 = 
	`cuºítIãm
();

544 
C⁄figIãm
* 
ôem
;

545 
míu
 *menu;

546 
¥›_ty≥
 
ty≥
;

548 i‡(
ev
->
	`key
(Ë=
Key_Esˇ≥
 && 
mode
 !
fuŒMode
) {

549 
emô
 
	`∑ª¡Sñe˘ed
();

550 
ev
->
	`ac˚±
();

554 i‡(!
i
) {

555 
P¨ít
::
	`keyPªssEvít
(
ev
);

558 
ôem
 = (
C⁄figIãm
*)
i
;

560 
ev
->
	`key
()) {

561 
Key_Rëu∫
:

562 
Key_E¡î
:

563 i‡(
ôem
->
goP¨ít
) {

564 
emô
 
	`∑ª¡Sñe˘ed
();

567 
míu
 = 
ôem
->menu;

568 i‡(!
míu
)

570 
ty≥
 = 
míu
->
¥om±
 ? míu->¥om±->ty≥ : 
P_UNKNOWN
;

571 i‡(
ty≥
 =
P_MENU
 && 
roŸE¡ry
 !
míu
 &&

572 
mode
 !
fuŒMode
 && modê!
míuMode
) {

573 
emô
 
	`míuSñe˘ed
(
míu
);

576 
Key_S∑˚
:

577 
	`ch™geVÆue
(
ôem
);

579 
Key_N
:

580 
	`£tVÆue
(
ôem
, 
no
);

582 
Key_M
:

583 
	`£tVÆue
(
ôem
, 
mod
);

585 
Key_Y
:

586 
	`£tVÆue
(
ôem
, 
yes
);

589 
P¨ít
::
	`keyPªssEvít
(
ev
);

592 
ev
->
	`ac˚±
();

593 
	}
}

595 
	gC⁄figLi°
::
	$c⁄ã¡sMou£PªssEvít
(
QMou£Evít
* 
e
)

599 
P¨ít
::
	`c⁄ã¡sMou£PªssEvít
(
e
);

600 
	}
}

602 
	gC⁄figLi°
::
	$c⁄ã¡sMou£Rñó£Evít
(
QMou£Evít
* 
e
)

604 
QPoöt
 
	`p
(
	`c⁄ã¡sToVõwp‹t
(
e
->
	`pos
()));

605 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`ôemAt
(
p
);

606 
míu
 *menu;

607 
¥›_ty≥
 
±y≥
;

608 c⁄° 
QPixm≠
* 
pm
;

609 
idx
, 
x
;

611 i‡(!
ôem
)

612 
skù
;

614 
míu
 = 
ôem
->menu;

615 
x
 = 
	`hódî
()->
	`off£t
(Ë+ 
p
.
	`x
();

616 
idx
 = 
cﬁRevM≠
[
	`hódî
()->
	`£˘i⁄At
(
x
)];

617 
idx
) {

618 
¥om±CﬁIdx
:

619 
pm
 = 
ôem
->
	`pixm≠
(
¥om±CﬁIdx
);

620 i‡(
pm
) {

621 
off
 = 
	`hódî
()->
	`£˘i⁄Pos
(0Ë+ 
	`ôemM¨gö
() +

622 
	`åìSãpSize
(Ë* (
ôem
->
	`dïth
(Ë+ (
	`roŸIsDec‹©ed
() ? 1 : 0));

623 i‡(
x
 >
off
 && x < of‡+ 
pm
->
	`width
()) {

624 i‡(
ôem
->
goP¨ít
) {

625 
emô
 
	`∑ª¡Sñe˘ed
();

627 } i‡(!
míu
)

629 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

630 i‡(
±y≥
 =
P_MENU
 && 
roŸE¡ry
 !
míu
 &&

631 
mode
 !
fuŒMode
 && modê!
míuMode
)

632 
emô
 
	`míuSñe˘ed
(
míu
);

634 
	`ch™geVÆue
(
ôem
);

638 
noCﬁIdx
:

639 
	`£tVÆue
(
ôem
, 
no
);

641 
modCﬁIdx
:

642 
	`£tVÆue
(
ôem
, 
mod
);

644 
yesCﬁIdx
:

645 
	`£tVÆue
(
ôem
, 
yes
);

647 
d©aCﬁIdx
:

648 
	`ch™geVÆue
(
ôem
);

652 
skù
:

654 
P¨ít
::
	`c⁄ã¡sMou£Rñó£Evít
(
e
);

655 
	}
}

657 
	gC⁄figLi°
::
	$c⁄ã¡sMou£MoveEvít
(
QMou£Evít
* 
e
)

661 
P¨ít
::
	`c⁄ã¡sMou£MoveEvít
(
e
);

662 
	}
}

664 
	gC⁄figLi°
::
	$c⁄ã¡sMou£DoubÀClickEvít
(
QMou£Evít
* 
e
)

666 
QPoöt
 
	`p
(
	`c⁄ã¡sToVõwp‹t
(
e
->
	`pos
()));

667 
C⁄figIãm
* 
ôem
 = (C⁄figIãm*)
	`ôemAt
(
p
);

668 
míu
 *menu;

669 
¥›_ty≥
 
±y≥
;

671 i‡(!
ôem
)

672 
skù
;

673 i‡(
ôem
->
goP¨ít
) {

674 
emô
 
	`∑ª¡Sñe˘ed
();

675 
skù
;

677 
míu
 = 
ôem
->menu;

678 i‡(!
míu
)

679 
skù
;

680 
±y≥
 = 
míu
->
¥om±
 ? míu->¥om±->
ty≥
 : 
P_UNKNOWN
;

681 i‡(
±y≥
 =
P_MENU
 && (
mode
 =
sögÀMode
 || modê=
symbﬁMode
))

682 
emô
 
	`míuSñe˘ed
(
míu
);

683 i‡(
míu
->
sym
)

684 
	`ch™geVÆue
(
ôem
);

686 
skù
:

688 
P¨ít
::
	`c⁄ã¡sMou£DoubÀClickEvít
(
e
);

689 
	}
}

691 
	gC⁄figLi°
::
	$focusInEvít
(
QFocusEvít
 *
e
)

693 
P¨ít
::
	`focusInEvít
(
e
);

695 
QLi°VõwIãm
* 
ôem
 = 
	`cuºítIãm
();

696 i‡(!
ôem
)

699 
	`£tSñe˘ed
(
ôem
, 
TRUE
);

700 
emô
 
	`gŸFocus
();

701 
	}
}

703 
C⁄figVõw
* 
	gC⁄figVõw
::
võwLi°
;

705 
	gC⁄figVõw
::
	$C⁄figVõw
(
QWidgë
* 
∑ª¡
, 
C⁄figMaöWödow
* 
cvõw
)

706 : 
	$P¨ít
(
∑ª¡
)

708 
li°
 = 
√w
 
	`C⁄figLi°
(
this
, 
cvõw
);

709 
löeEdô
 = 
√w
 
	`C⁄figLöeEdô
(
this
);

710 
löeEdô
->
	`hide
();

712 
this
->
√xtVõw
 = 
võwLi°
;

713 
võwLi°
 = 
this
;

714 
	}
}

716 
	gC⁄figVõw
::~
	$C⁄figVõw
()

718 
C⁄figVõw
** 
vp
;

720 
vp
 = &
võwLi°
; *vp; v∞&(*vp)->
√xtVõw
) {

721 i‡(*
vp
 =
this
) {

722 *
vp
 = 
√xtVõw
;

726 
	}
}

728 
	gC⁄figVõw
::
	$upd©eLi°
(
C⁄figIãm
* 
ôem
)

730 
C⁄figVõw
* 
v
;

732 
v
 = 
võwLi°
; v; v = v->
√xtVõw
)

733 
v
->
li°
->
	`upd©eLi°
(
ôem
);

734 
	}
}

736 
	gC⁄figVõw
::
	$upd©eLi°AŒ
()

738 
C⁄figVõw
* 
v
;

740 
v
 = 
võwLi°
; v; v = v->
√xtVõw
)

741 
v
->
li°
->
	`upd©eLi°AŒ
();

742 
	}
}

747 
	gC⁄figMaöWödow
::
	$C⁄figMaöWödow
()

749 
QMíuB¨
* 
míu
;

750 
QS∂ôãr
* 
•lô1
;

751 
QS∂ôãr
* 
•lô2
;

752 
boﬁ
 
ok
;

753 
x
, 
y
, 
width
, 
height
;

755 
QWidgë
 *
d
 = 
c⁄figAµ
->
	`deskt›
();

757 #i‡
QT_VERSION
 >= 300

758 
width
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/kc⁄fig/qc⁄f/wödow width", 
d
->
	`width
() - 64);

759 
height
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/kc⁄fig/qc⁄f/wödow height", 
d
->
	`height
() - 64);

760 
	`ªsize
(
width
, 
height
);

761 
x
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/kc⁄fig/qc⁄f/wödow x", 0, &
ok
);

762 i‡(
ok
)

763 
y
 = 
c⁄figSëtögs
->
	`ªadNumE¡ry
("/kc⁄fig/qc⁄f/wödow y", 0, &
ok
);

764 i‡(
ok
)

765 
	`move
(
x
, 
y
);

767 
width
 = 
d
->
	`width
() - 64;

768 
height
 = 
d
->
	`height
() - 64;

769 
	`ªsize
(
width
, 
height
);

772 
showDebug
 = 
Ál£
;

774 
•lô1
 = 
√w
 
	`QS∂ôãr
(
this
);

775 
•lô1
->
	`£tOrõ¡©i⁄
(
QS∂ôãr
::
H‹iz⁄èl
);

776 
	`£tCíåÆWidgë
(
•lô1
);

778 
míuVõw
 = 
√w
 
	`C⁄figVõw
(
•lô1
, 
this
);

779 
míuLi°
 = 
míuVõw
->
li°
;

781 
•lô2
 = 
√w
 
	`QS∂ôãr
(
•lô1
);

782 
•lô2
->
	`£tOrõ¡©i⁄
(
QS∂ôãr
::
Vîtiˇl
);

785 
c⁄figVõw
 = 
√w
 
	`C⁄figVõw
(
•lô2
, 
this
);

786 
c⁄figLi°
 = 
c⁄figVõw
->
li°
;

788 
hñpText
 = 
√w
 
	`QTextVõw
(
•lô2
);

789 
hñpText
->
	`£tTextF‹m©
(
Qt
::
RichText
);

791 
	`£tTabOrdî
(
c⁄figLi°
, 
hñpText
);

792 
c⁄figLi°
->
	`£tFocus
();

794 
míu
 = 
	`míuB¨
();

795 
toﬁB¨
 = 
√w
 
	`QToﬁB¨
("Toﬁs", 
this
);

797 
backA˘i⁄
 = 
√w
 
	`QA˘i⁄
("Back", 
	`QPixm≠
(
xpm_back
), "Back", 0, 
this
);

798 
	`c⁄√˘
(
backA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`goBack
()));

799 
backA˘i⁄
->
	`£tE«bÀd
(
FALSE
);

800 
QA˘i⁄
 *
quôA˘i⁄
 = 
√w
 
	`QA˘i⁄
("Quô", "&Quô", 
CTRL
+
Key_Q
, 
this
);

801 
	`c⁄√˘
(
quôA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`˛o£
()));

802 
QA˘i⁄
 *
lﬂdA˘i⁄
 = 
√w
 
	`QA˘i⁄
("Lﬂd", 
	`QPixm≠
(
xpm_lﬂd
), "&Lﬂd", 
CTRL
+
Key_L
, 
this
);

803 
	`c⁄√˘
(
lﬂdA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`lﬂdC⁄fig
()));

804 
QA˘i⁄
 *
ßveA˘i⁄
 = 
√w
 
	`QA˘i⁄
("Save", 
	`QPixm≠
(
xpm_ßve
), "&Save", 
CTRL
+
Key_S
, 
this
);

805 
	`c⁄√˘
(
ßveA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`ßveC⁄fig
()));

806 
QA˘i⁄
 *
ßveAsA˘i⁄
 = 
√w
 
	`QA˘i⁄
("SavêAs...", "Savê&As...", 0, 
this
);

807 
	`c⁄√˘
(
ßveAsA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`ßveC⁄figAs
()));

808 
QA˘i⁄
 *
sögÀVõwA˘i⁄
 = 
√w
 
	`QA˘i⁄
("SögÀ Võw", 
	`QPixm≠
(
xpm_sögÀ_võw
), "S∂ô Võw", 0, 
this
);

809 
	`c⁄√˘
(
sögÀVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showSögÀVõw
()));

810 
QA˘i⁄
 *
•lôVõwA˘i⁄
 = 
√w
 
	`QA˘i⁄
("S∂ô Võw", 
	`QPixm≠
(
xpm_•lô_võw
), "S∂ô Võw", 0, 
this
);

811 
	`c⁄√˘
(
•lôVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showS∂ôVõw
()));

812 
QA˘i⁄
 *
fuŒVõwA˘i⁄
 = 
√w
 
	`QA˘i⁄
("FuŒ Võw", 
	`QPixm≠
(
xpm_åì_võw
), "FuŒ Võw", 0, 
this
);

813 
	`c⁄√˘
(
fuŒVõwA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showFuŒVõw
()));

815 
QA˘i⁄
 *
showNameA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "Show Name", 0, 
this
);

816 
showNameA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

817 
showNameA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showName
);

818 
	`c⁄√˘
(
showNameA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowName
(bool)));

819 
QA˘i⁄
 *
showR™geA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "Show R™ge", 0, 
this
);

820 
showR™geA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

821 
showR™geA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showR™ge
);

822 
	`c⁄√˘
(
showR™geA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowR™ge
(bool)));

823 
QA˘i⁄
 *
showD©aA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "Show D©a", 0, 
this
);

824 
showD©aA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

825 
showD©aA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showD©a
);

826 
	`c⁄√˘
(
showD©aA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowD©a
(bool)));

827 
QA˘i⁄
 *
showAŒA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "Show AŒ O±i⁄s", 0, 
this
);

828 
showAŒA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

829 
showAŒA˘i⁄
->
	`£tOn
(
c⁄figLi°
->
showAŒ
);

830 
	`c⁄√˘
(
showAŒA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowAŒ
(bool)));

831 
QA˘i⁄
 *
showDebugA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "Show Debug Info", 0, 
this
);

832 
showDebugA˘i⁄
->
	`£tToggÀA˘i⁄
(
TRUE
);

833 
showDebugA˘i⁄
->
	`£tOn
(
showDebug
);

834 
	`c⁄√˘
(
showDebugA˘i⁄
, 
	`SIGNAL
(
	`toggÀd
(
boﬁ
)), 
	`SLOT
(
	`£tShowDebug
(bool)));

836 
QA˘i⁄
 *
showI¡roA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "I¡rodu˘i⁄", 0, 
this
);

837 
	`c⁄√˘
(
showI¡roA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showI¡ro
()));

838 
QA˘i⁄
 *
showAboutA˘i⁄
 = 
√w
 
	`QA˘i⁄
(
NULL
, "About", 0, 
this
);

839 
	`c⁄√˘
(
showAboutA˘i⁄
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
	`SLOT
(
	`showAbout
()));

842 
backA˘i⁄
->
	`addTo
(
toﬁB¨
);

843 
toﬁB¨
->
	`addSï¨©‹
();

844 
lﬂdA˘i⁄
->
	`addTo
(
toﬁB¨
);

845 
ßveA˘i⁄
->
	`addTo
(
toﬁB¨
);

846 
toﬁB¨
->
	`addSï¨©‹
();

847 
sögÀVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

848 
•lôVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

849 
fuŒVõwA˘i⁄
->
	`addTo
(
toﬁB¨
);

852 
QP›upMíu
* 
c⁄fig
 = 
√w
 
	`QP›upMíu
(
this
);

853 
míu
->
	`ö£πIãm
("&Fûe", 
c⁄fig
);

854 
lﬂdA˘i⁄
->
	`addTo
(
c⁄fig
);

855 
ßveA˘i⁄
->
	`addTo
(
c⁄fig
);

856 
ßveAsA˘i⁄
->
	`addTo
(
c⁄fig
);

857 
c⁄fig
->
	`ö£πSï¨©‹
();

858 
quôA˘i⁄
->
	`addTo
(
c⁄fig
);

861 
QP›upMíu
* 
›ti⁄Míu
 = 
√w
 
	`QP›upMíu
(
this
);

862 
míu
->
	`ö£πIãm
("&O±i⁄", 
›ti⁄Míu
);

863 
showNameA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

864 
showR™geA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

865 
showD©aA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

866 
›ti⁄Míu
->
	`ö£πSï¨©‹
();

867 
showAŒA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

868 
showDebugA˘i⁄
->
	`addTo
(
›ti⁄Míu
);

871 
QP›upMíu
* 
hñpMíu
 = 
√w
 
	`QP›upMíu
(
this
);

872 
míu
->
	`ö£πSï¨©‹
();

873 
míu
->
	`ö£πIãm
("&Hñp", 
hñpMíu
);

874 
showI¡roA˘i⁄
->
	`addTo
(
hñpMíu
);

875 
showAboutA˘i⁄
->
	`addTo
(
hñpMíu
);

877 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`míuSñe˘ed
(
míu
 *)),

878 
	`SLOT
(
	`ch™geMíu
(
míu
 *)));

879 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`∑ª¡Sñe˘ed
()),

880 
	`SLOT
(
	`goBack
()));

881 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`míuSñe˘ed
(
míu
 *)),

882 
	`SLOT
(
	`ch™geMíu
(
míu
 *)));

884 
	`c⁄√˘
(
c⁄figLi°
, 
	`SIGNAL
(
	`gŸFocus
()),

885 
	`SLOT
(
	`li°FocusCh™ged
()));

886 
	`c⁄√˘
(
míuLi°
, 
	`SIGNAL
(
	`gŸFocus
()),

887 
	`SLOT
(
	`li°FocusCh™ged
()));

889 
	`showS∂ôVõw
();

890 
	}
}

892 
QSåög
 
	$¥öt_fûãr
(c⁄° *
°r
)

894 
QRegExp
 
	`ª
("[<>&\"\\n]");

895 
QSåög
 
ªs
 = 
°r
;

896 
i
 = 0; (ò
ªs
.
	`föd
(
ª
, i)) >= 0;) {

897 
ªs
[
i
].
	`œtö1
()) {

899 
ªs
.
	`ª∂a˚
(
i
, 1, "&lt;");

900 
i
 += 4;

903 
ªs
.
	`ª∂a˚
(
i
, 1, "&gt;");

904 
i
 += 4;

907 
ªs
.
	`ª∂a˚
(
i
, 1, "&amp;");

908 
i
 += 5;

911 
ªs
.
	`ª∂a˚
(
i
, 1, "&quot;");

912 
i
 += 6;

915 
ªs
.
	`ª∂a˚
(
i
, 1, "<br>");

916 
i
 += 4;

920  
ªs
;

921 
	}
}

923 
	$ex¥_¥öt_hñp
(*
d©a
, c⁄° *
°r
)

925 ((
QSåög
*)
d©a
)->
	`≠≥nd
(
	`¥öt_fûãr
(
°r
));

926 
	}
}

931 
	gC⁄figMaöWödow
::
	$£tHñp
(
QLi°VõwIãm
* 
ôem
)

933 
symbﬁ
* 
sym
;

934 
míu
* menu = 0;

936 
c⁄figLi°
->
	`∑ª¡
()->
löeEdô
->
	`hide
();

937 i‡(
ôem
)

938 
míu
 = ((
C⁄figIãm
*)
ôem
)->menu;

939 i‡(!
míu
) {

940 
hñpText
->
	`£tText
(
NULL
);

944 
QSåög
 
hód
, 
debug
, 
hñp
;

945 
míu
 = ((
C⁄figIãm
*)
ôem
)->menu;

946 
sym
 = 
míu
->sym;

947 i‡(
sym
) {

948 i‡(
míu
->
¥om±
) {

949 
hód
 += "<big><b>";

950 
hód
 +
	`¥öt_fûãr
(
míu
->
¥om±
->
ãxt
);

951 
hód
 += "</b></big>";

952 i‡(
sym
->
«me
) {

953 
hód
 += " (";

954 
hód
 +
	`¥öt_fûãr
(
sym
->
«me
);

955 
hód
 += ")";

957 } i‡(
sym
->
«me
) {

958 
hód
 += "<big><b>";

959 
hód
 +
	`¥öt_fûãr
(
sym
->
«me
);

960 
hód
 += "</b></big>";

962 
hód
 += "<br><br>";

964 i‡(
showDebug
) {

965 
debug
 += "type: ";

966 
debug
 +
	`¥öt_fûãr
(
	`sym_ty≥_«me
(
sym
->
ty≥
));

967 i‡(
	`sym_is_choi˚
(
sym
))

968 
debug
 += " (choice)";

969 
debug
 += "<br>";

970 i‡(
sym
->
ªv_dï
.
ex¥
) {

971 
debug
 += "reverse dep: ";

972 
	`ex¥_¥öt
(
sym
->
ªv_dï
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

973 
debug
 += "<br>";

975 
¥›îty
 *
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

976 
¥›
->
ty≥
) {

977 
P_PROMPT
:

978 
P_MENU
:

979 
debug
 += "prompt: ";

980 
debug
 +
	`¥öt_fûãr
(
¥›
->
ãxt
);

981 
debug
 += "<br>";

983 
P_DEFAULT
:

984 
debug
 += "default: ";

985 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

986 
debug
 += "<br>";

988 
P_CHOICE
:

989 i‡(
	`sym_is_choi˚
(
sym
)) {

990 
debug
 += "choice: ";

991 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

992 
debug
 += "<br>";

995 
P_SELECT
:

996 
debug
 += "select: ";

997 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

998 
debug
 += "<br>";

1000 
P_RANGE
:

1001 
debug
 += "range: ";

1002 
	`ex¥_¥öt
(
¥›
->
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1003 
debug
 += "<br>";

1006 
debug
 += "unknownÖroperty: ";

1007 
debug
 +
	`¥›_gë_ty≥_«me
(
¥›
->
ty≥
);

1008 
debug
 += "<br>";

1010 i‡(
¥›
->
visibÀ
.
ex¥
) {

1011 
debug
 += "&nbsp;&nbsp;&nbsp;&nbsp;dep: ";

1012 
	`ex¥_¥öt
(
¥›
->
visibÀ
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1013 
debug
 += "<br>";

1016 
debug
 += "<br>";

1019 
hñp
 = 
	`¥öt_fûãr
(
sym
->help);

1020 } i‡(
míu
->
¥om±
) {

1021 
hód
 += "<big><b>";

1022 
hód
 +
	`¥öt_fûãr
(
míu
->
¥om±
->
ãxt
);

1023 
hód
 += "</b></big><br><br>";

1024 i‡(
showDebug
) {

1025 i‡(
míu
->
¥om±
->
visibÀ
.
ex¥
) {

1026 
debug
 += "&nbsp;&nbsp;dep: ";

1027 
	`ex¥_¥öt
(
míu
->
¥om±
->
visibÀ
.
ex¥
, 
ex¥_¥öt_hñp
, &
debug
, 
E_NONE
);

1028 
debug
 += "<br><br>";

1032 i‡(
showDebug
)

1033 
debug
 +
	`QSåög
().
	`•rötf
("deföedáà%s:%d<br><br>", 
míu
->
fûe
->
«me
, míu->
löío
);

1034 
hñpText
->
	`£tText
(
hód
 + 
debug
 + 
hñp
);

1035 
	}
}

1037 
	gC⁄figMaöWödow
::
	$lﬂdC⁄fig
()

1039 
QSåög
 
s
 = 
QFûeDülog
::
	`gëO≥nFûeName
(".c⁄fig", 
NULL
, 
this
);

1040 i‡(
s
.
	`isNuŒ
())

1042 i‡(
	`c⁄f_ªad
(
s
.
	`œtö1
()))

1043 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qconf", "UnableÅoÜoad configuration!");

1044 
C⁄figVõw
::
	`upd©eLi°AŒ
();

1045 
	}
}

1047 
	gC⁄figMaöWödow
::
	$ßveC⁄fig
()

1049 i‡(
	`c⁄f_wrôe
(
NULL
))

1050 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qconf", "UnableÅo save configuration!");

1051 
	}
}

1053 
	gC⁄figMaöWödow
::
	$ßveC⁄figAs
()

1055 
QSåög
 
s
 = 
QFûeDülog
::
	`gëSaveFûeName
(".c⁄fig", 
NULL
, 
this
);

1056 i‡(
s
.
	`isNuŒ
())

1058 i‡(
	`c⁄f_wrôe
(
s
.
	`œtö1
()))

1059 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qconf", "UnableÅo save configuration!");

1060 
	}
}

1062 
	gC⁄figMaöWödow
::
	$ch™geMíu
(
míu
 *menu)

1064 
c⁄figLi°
->
	`£tRoŸMíu
(
míu
);

1065 
backA˘i⁄
->
	`£tE«bÀd
(
TRUE
);

1066 
	}
}

1068 
	gC⁄figMaöWödow
::
	$li°FocusCh™ged
()

1070 i‡(
míuLi°
->
	`hasFocus
()) {

1071 i‡(
míuLi°
->
mode
 =
míuMode
)

1072 
c⁄figLi°
->
	`˛órSñe˘i⁄
();

1073 
	`£tHñp
(
míuLi°
->
	`£À˘edIãm
());

1074 } i‡(
c⁄figLi°
->
	`hasFocus
()) {

1075 
	`£tHñp
(
c⁄figLi°
->
	`£À˘edIãm
());

1077 
	}
}

1079 
	gC⁄figMaöWödow
::
	$goBack
()

1081 
C⁄figIãm
* 
ôem
;

1083 
c⁄figLi°
->
	`£tP¨ítMíu
();

1084 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1085 
backA˘i⁄
->
	`£tE«bÀd
(
FALSE
);

1086 
ôem
 = (
C⁄figIãm
*)
míuLi°
->
	`£À˘edIãm
();

1087 
ôem
) {

1088 i‡(
ôem
->
míu
 =
c⁄figLi°
->
roŸE¡ry
) {

1089 
míuLi°
->
	`£tSñe˘ed
(
ôem
, 
TRUE
);

1092 
ôem
 = (
C⁄figIãm
*)ôem->
	`∑ª¡
();

1094 
	}
}

1096 
	gC⁄figMaöWödow
::
	$showSögÀVõw
()

1098 
míuVõw
->
	`hide
();

1099 
míuLi°
->
	`£tRoŸMíu
(0);

1100 
c⁄figLi°
->
mode
 = 
sögÀMode
;

1101 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1102 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1104 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1105 
c⁄figLi°
->
	`£tAŒO≥n
(
TRUE
);

1106 
c⁄figLi°
->
	`£tFocus
();

1107 
	}
}

1109 
	gC⁄figMaöWödow
::
	$showS∂ôVõw
()

1111 
c⁄figLi°
->
mode
 = 
symbﬁMode
;

1112 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1113 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1115 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1116 
c⁄figLi°
->
	`£tAŒO≥n
(
TRUE
);

1117 
c⁄figAµ
->
	`¥o˚ssEvíts
();

1118 
míuLi°
->
mode
 = 
míuMode
;

1119 
míuLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1120 
míuLi°
->
	`£tAŒO≥n
(
TRUE
);

1121 
míuVõw
->
	`show
();

1122 
míuLi°
->
	`£tFocus
();

1123 
	}
}

1125 
	gC⁄figMaöWödow
::
	$showFuŒVõw
()

1127 
míuVõw
->
	`hide
();

1128 
míuLi°
->
	`£tRoŸMíu
(0);

1129 
c⁄figLi°
->
mode
 = 
fuŒMode
;

1130 i‡(
c⁄figLi°
->
roŸE¡ry
 =&
roŸmíu
)

1131 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1133 
c⁄figLi°
->
	`£tRoŸMíu
(&
roŸmíu
);

1134 
c⁄figLi°
->
	`£tAŒO≥n
(
FALSE
);

1135 
c⁄figLi°
->
	`£tFocus
();

1136 
	}
}

1138 
	gC⁄figMaöWödow
::
	$£tShowAŒ
(
boﬁ
 
b
)

1140 i‡(
c⁄figLi°
->
showAŒ
 =
b
)

1142 
c⁄figLi°
->
showAŒ
 = 
b
;

1143 
c⁄figLi°
->
	`upd©eLi°AŒ
();

1144 
míuLi°
->
showAŒ
 = 
b
;

1145 
míuLi°
->
	`upd©eLi°AŒ
();

1146 
	}
}

1148 
	gC⁄figMaöWödow
::
	$£tShowDebug
(
boﬁ
 
b
)

1150 i‡(
showDebug
 =
b
)

1152 
showDebug
 = 
b
;

1153 
	}
}

1155 
	gC⁄figMaöWödow
::
	$£tShowName
(
boﬁ
 
b
)

1157 i‡(
c⁄figLi°
->
showName
 =
b
)

1159 
c⁄figLi°
->
showName
 = 
b
;

1160 
c⁄figLi°
->
	`ªöô
();

1161 
míuLi°
->
showName
 = 
b
;

1162 
míuLi°
->
	`ªöô
();

1163 
	}
}

1165 
	gC⁄figMaöWödow
::
	$£tShowR™ge
(
boﬁ
 
b
)

1167 i‡(
c⁄figLi°
->
showR™ge
 =
b
)

1169 
c⁄figLi°
->
showR™ge
 = 
b
;

1170 
c⁄figLi°
->
	`ªöô
();

1171 
míuLi°
->
showR™ge
 = 
b
;

1172 
míuLi°
->
	`ªöô
();

1173 
	}
}

1175 
	gC⁄figMaöWödow
::
	$£tShowD©a
(
boﬁ
 
b
)

1177 i‡(
c⁄figLi°
->
showD©a
 =
b
)

1179 
c⁄figLi°
->
showD©a
 = 
b
;

1180 
c⁄figLi°
->
	`ªöô
();

1181 
míuLi°
->
showD©a
 = 
b
;

1182 
míuLi°
->
	`ªöô
();

1183 
	}
}

1189 
	gC⁄figMaöWödow
::
	$˛o£Evít
(
QClo£Evít
* 
e
)

1191 i‡(!
sym_ch™ge_cou¡
) {

1192 
e
->
	`ac˚±
();

1195 
QMesßgeBox
 
	`mb
("qc⁄f", "Savêc⁄figuøti⁄?", QMesßgeBox::
W¨nög
,

1196 
QMesßgeBox
::
Yes
 | QMesßgeBox::
DeÁu…
, QMesßgeBox::
No
, QMesßgeBox::
C™˚l
 | QMesßgeBox::
Esˇ≥
);

1197 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
Yes
, "&Save Changes");

1198 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
No
, "&Discard Changes");

1199 
mb
.
	`£tBuâ⁄Text
(
QMesßgeBox
::
C™˚l
, "Cancel Exit");

1200 
mb
.
	`exec
()) {

1201 
QMesßgeBox
::
Yes
:

1202 
	`c⁄f_wrôe
(
NULL
);

1203 
QMesßgeBox
::
No
:

1204 
e
->
	`ac˚±
();

1206 
QMesßgeBox
::
C™˚l
:

1207 
e
->
	`ign‹e
();

1210 
	}
}

1212 
	gC⁄figMaöWödow
::
	$showI¡ro
()

1214 
°r
[] = "WelcomeÅoÅhe qconf graphical configurationÅool for RTAI.\n\n"

1226 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
°r
);

1227 
	}
}

1229 
	gC⁄figMaöWödow
::
	$showAbout
()

1231 
°r
[] = "qconf is Copyright (C) 2002 Roman Zippel <zippel@linux-m68k.org>.\n\n"

1234 
QMesßgeBox
::
	`öf‹m©i⁄
(
this
, "qc⁄f", 
°r
);

1235 
	}
}

1237 
	$fixup_roŸmíu
(
míu
 *menu)

1239 
míu
 *
chûd
;

1240 
míu_˙t
 = 0;

1242 
míu
->
Êags
 |
MENU_ROOT
;

1243 
chûd
 = 
míu
->
li°
; chûd; chûd = chûd->
√xt
) {

1244 i‡(
chûd
->
¥om±
 && chûd->¥om±->
ty≥
 =
P_MENU
) {

1245 
míu_˙t
++;

1246 
	`fixup_roŸmíu
(
chûd
);

1247 
míu_˙t
--;

1248 } i‡(!
míu_˙t
)

1249 
	`fixup_roŸmíu
(
chûd
);

1251 
	}
}

1253 c⁄° *
	g¥og«me
;

1255 
	$ußge
()

1257 
	`¥ötf
("%†<c⁄fig>\n", 
¥og«me
);

1258 
	`exô
(0);

1259 
	}
}

1261 
	$maö
(
ac
, ** 
av
)

1263 
C⁄figMaöWödow
* 
v
;

1264 c⁄° *
«me
;

1266 #i‚de‡
LKC_DIRECT_LINK


1267 
	`kc⁄fig_lﬂd
();

1270 
¥og«me
 = 
av
[0];

1271 
c⁄figAµ
 = 
√w
 
	`QAµliˇti⁄
(
ac
, 
av
);

1272 #i‡
QT_VERSION
 >= 300

1273 
c⁄figSëtögs
 = 
√w
 
QSëtögs
;

1275 i‡(
ac
 > 1 && 
av
[1][0] == '-') {

1276 
av
[1][1]) {

1279 
	`ußge
();

1281 
«me
 = 
av
[2];

1283 
«me
 = 
av
[1];

1284 i‡(!
«me
)

1285 
	`ußge
();

1287 
	`c⁄f_∑r£
(
«me
);

1288 
	`fixup_roŸmíu
(&
roŸmíu
);

1289 
	`c⁄f_ªad
(
NULL
);

1292 
v
 = 
√w
 
	`C⁄figMaöWödow
();

1295 
v
->
	`show
();

1296 
c⁄figAµ
->
	`c⁄√˘
(c⁄figAµ, 
	`SIGNAL
(
	`œ°WödowClo£d
()), 
	`SLOT
(
	`quô
()));

1297 
c⁄figAµ
->
	`exec
();

1299 #i‡
QT_VERSION
 >= 300

1300 
c⁄figSëtögs
->
	`wrôeE¡ry
("/kc⁄fig/qc⁄f/wödow x", 
v
->
	`pos
().
	`x
());

1301 
c⁄figSëtögs
->
	`wrôeE¡ry
("/kc⁄fig/qc⁄f/wödow y", 
v
->
	`pos
().
	`y
());

1302 
c⁄figSëtögs
->
	`wrôeE¡ry
("/kc⁄fig/qc⁄f/wödow width", 
v
->
	`size
().
	`width
());

1303 
c⁄figSëtögs
->
	`wrôeE¡ry
("/kc⁄fig/qc⁄f/wödow height", 
v
->
	`size
().
	`height
());

1304 
dñëe
 
c⁄figSëtögs
;

1307 
	}
}

	@/usr/src/rtai/base/config/kconfig/qconf.h

6 
	~<qli°võw.h
>

8 
˛ass
 
	gC⁄figLi°
;

9 
˛ass
 
	gC⁄figIãm
;

10 
˛ass
 
	gC⁄figLöeEdô
;

11 
˛ass
 
	gC⁄figMaöWödow
;

13 ˛as†
	cC⁄figVõw
 : 
public
 
QVBox
 {

14 
Q_OBJECT


15 
˛ass
 
	tQVBox
 
	tP¨ít
;

16 
	mpublic
:

17 
C⁄figVõw
(
QWidgë
* 
∑ª¡
, 
C⁄figMaöWödow
* 
cvõw
);

18 ~
C⁄figVõw
();

19 
upd©eLi°
(
C⁄figIãm
* 
ôem
);

20 
upd©eLi°AŒ
();

22 
	mpublic
:

23 
C⁄figLi°
* 
li°
;

24 
C⁄figLöeEdô
* 
	mlöeEdô
;

26 
C⁄figVõw
* 
	mvõwLi°
;

27 
C⁄figVõw
* 
	m√xtVõw
;

30 
	ecﬁIdx
 {

31 
	m¥om±CﬁIdx
, 
	m«meCﬁIdx
, 
	mnoCﬁIdx
, 
	mmodCﬁIdx
, 
	myesCﬁIdx
, 
	md©aCﬁIdx
, 
	mcﬁNr


33 
	eli°Mode
 {

34 
	msögÀMode
, 
	mmíuMode
, 
	msymbﬁMode
, 
	mfuŒMode


37 ˛as†
	cC⁄figLi°
 : 
public
 
QLi°Võw
 {

38 
Q_OBJECT


39 
˛ass
 
	tQLi°Võw
 
	tP¨ít
;

40 
	mpublic
:

41 
C⁄figLi°
(
C⁄figVõw
* 
p
, 
C⁄figMaöWödow
* 
cvõw
);

42 
ªöô
();

43 
C⁄figVõw
* 
	$∑ª¡
() const

45  (
C⁄figVõw
*)
P¨ít
::
	`∑ª¡
();

48 
¥Ÿe˘ed
:

49 
C⁄figMaöWödow
* 
cvõw
;

51 
	`keyPªssEvít
(
QKeyEvít
 *
e
);

52 
	`c⁄ã¡sMou£PªssEvít
(
QMou£Evít
 *
e
);

53 
	`c⁄ã¡sMou£Rñó£Evít
(
QMou£Evít
 *
e
);

54 
	`c⁄ã¡sMou£MoveEvít
(
QMou£Evít
 *
e
);

55 
	`c⁄ã¡sMou£DoubÀClickEvít
(
QMou£Evít
 *
e
);

56 
	`focusInEvít
(
QFocusEvít
 *
e
);

57 
public
 
¶Ÿs
:

58 
	`£tRoŸMíu
(
míu
 *menu);

60 
	`upd©eLi°
(
C⁄figIãm
 *
ôem
);

61 
	`£tVÆue
(
C⁄figIãm
* 
ôem
, 
åi°©e
 
vÆ
);

62 
	`ch™geVÆue
(
C⁄figIãm
* 
ôem
);

63 
	`upd©eSñe˘i⁄
();

64 
sig«ls
:

65 
	`míuSñe˘ed
(
míu
 *menu);

66 
	`∑ª¡Sñe˘ed
();

67 
	`gŸFocus
();

69 
public
:

70 
	$upd©eLi°AŒ
()

72 
upd©eAŒ
 = 
åue
;

73 
	`upd©eLi°
(
NULL
);

74 
upd©eAŒ
 = 
Ál£
;

75 
	}
}

76 
C⁄figLi°
* 
	$li°Võw
()

78  
this
;

79 
	}
}

80 
C⁄figIãm
* 
	$fú°Chûd
() const

82  (
C⁄figIãm
 *)
P¨ít
::
	`fú°Chûd
();

83 
	}
}

84 
	$m≠Idx
(
cﬁIdx
 
idx
)

86  
cﬁM≠
[
idx
];

87 
	}
}

88 
	$addCﬁumn
(
cﬁIdx
 
idx
, c⁄° 
QSåög
& 
œbñ
)

90 
cﬁM≠
[
idx
] = 
P¨ít
::
	`addCﬁumn
(
œbñ
);

91 
cﬁRevM≠
[
cﬁM≠
[
idx
]] = idx;

92 
	}
}

93 
	$ªmoveCﬁumn
(
cﬁIdx
 
idx
)

95 
cﬁ
 = 
cﬁM≠
[
idx
];

96 i‡(
cﬁ
 >= 0) {

97 
P¨ít
::
	`ªmoveCﬁumn
(
cﬁ
);

98 
cﬁRevM≠
[
cﬁ
] = 
cﬁM≠
[
idx
] = -1;

100 
	}
}

101 
£tAŒO≥n
(
boﬁ
 
›í
);

102 
£tP¨ítMíu
();

104 
	gãm∂©e
 <
˛ass
 
	gP
>

105 
upd©eMíuLi°
(
P
*, 
míu
*);

107 
boﬁ
 
	gupd©eAŒ
;

109 
QPixm≠
 
	gsymbﬁYesPix
, 
	gsymbﬁModPix
, 
	gsymbﬁNoPix
;

110 
QPixm≠
 
	gchoi˚YesPix
, 
	gchoi˚NoPix
;

111 
QPixm≠
 
	gmíuPix
, 
	gmíuInvPix
, 
	gmíuBackPix
, 
	gvoidPix
;

113 
boﬁ
 
	gshowAŒ
, 
	gshowName
, 
	gshowR™ge
, 
	gshowD©a
;

114 
li°Mode
 
	gmode
;

115 
míu
 *
	groŸE¡ry
;

116 
QCﬁ‹Group
 
	gdißbÀdCﬁ‹Group
;

117 
QCﬁ‹Group
 
	göa˘ivedCﬁ‹Group
;

119 
	g¥iv©e
:

120 
cﬁM≠
[
cﬁNr
];

121 
	gcﬁRevM≠
[
cﬁNr
];

124 ˛as†
	cC⁄figIãm
 : 
public
 
QLi°VõwIãm
 {

125 
˛ass
 
	tQLi°VõwIãm
 
	tP¨ít
;

126 
	mpublic
:

127 
	$C⁄figIãm
(
QLi°Võw
 *
∑ª¡
, 
C⁄figIãm
 *
a·î
, 
míu
 *
m
, 
boﬁ
 
v
)

128 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(
m
), 
	`visibÀ
(
v
), 
	$goP¨ít
(
Ál£
)

130 
	`öô
();

132 
	$C⁄figIãm
(
C⁄figIãm
 *
∑ª¡
, C⁄figIãm *
a·î
, 
míu
 *
m
, 
boﬁ
 
v
)

133 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(
m
), 
	`visibÀ
(
v
), 
	$goP¨ít
(
Ál£
)

135 
	`öô
();

136 
	}
}

137 
	$C⁄figIãm
(
QLi°Võw
 *
∑ª¡
, 
C⁄figIãm
 *
a·î
, 
boﬁ
 
v
)

138 : 
	`P¨ít
(
∑ª¡
, 
a·î
), 
	`míu
(0), 
	`visibÀ
(
v
), 
	$goP¨ít
(
åue
)

140 
	`öô
();

141 
	}
}

142 ~
C⁄figIãm
();

143 
öô
();

144 #i‡
QT_VERSION
 >= 300

145 
okRíame
(
cﬁ
);

147 
upd©eMíu
();

148 
ã°Upd©eMíu
(
boﬁ
 
v
);

149 
C⁄figLi°
* 
	$li°Võw
() const

151  (
C⁄figLi°
*)
P¨ít
::
	`li°Võw
();

152 
	}
}

153 
C⁄figIãm
* 
	$fú°Chûd
() const

155  (
C⁄figIãm
 *)
P¨ít
::
	`fú°Chûd
();

156 
	}
}

157 
C⁄figIãm
* 
	$√xtSiblög
() const

159  (
C⁄figIãm
 *)
P¨ít
::
	`√xtSiblög
();

160 
	}
}

161 
	$£tText
(
cﬁIdx
 
idx
, c⁄° 
QSåög
& 
ãxt
)

163 
P¨ít
::
	`£tText
(
	`li°Võw
()->
	`m≠Idx
(
idx
), 
ãxt
);

164 
	}
}

165 
QSåög
 
	$ãxt
(
cﬁIdx
 
idx
) const

167  
P¨ít
::
	`ãxt
(
	`li°Võw
()->
	`m≠Idx
(
idx
));

168 
	}
}

169 
	$£tPixm≠
(
cﬁIdx
 
idx
, c⁄° 
QPixm≠
& 
pm
)

171 
P¨ít
::
	`£tPixm≠
(
	`li°Võw
()->
	`m≠Idx
(
idx
), 
pm
);

172 
	}
}

173 c⁄° 
QPixm≠
* 
	$pixm≠
(
cﬁIdx
 
idx
) const

175  
P¨ít
::
	`pixm≠
(
	`li°Võw
()->
	`m≠Idx
(
idx
));

176 
	}
}

177 
∑ötCñl
(
QPaöãr
* 
p
, c⁄° 
QCﬁ‹Group
& 
cg
, 
cﬁumn
, 
width
, 
Æign
);

179 
C⁄figIãm
* 
	g√xtIãm
;

180 
míu
 *
	gmíu
;

181 
boﬁ
 
	gvisibÀ
;

182 
boﬁ
 
	ggoP¨ít
;

185 ˛as†
	cC⁄figLöeEdô
 : 
public
 
QLöeEdô
 {

186 
Q_OBJECT


187 
˛ass
 
	tQLöeEdô
 
	tP¨ít
;

188 
	mpublic
:

189 
	$C⁄figLöeEdô
(
C⁄figVõw
* 
∑ª¡
)

190 : 
	$P¨ít
(
∑ª¡
)

192 
C⁄figVõw
* 
	$∑ª¡
() const

194  (
C⁄figVõw
*)
P¨ít
::
	`∑ª¡
();

195 
	}
}

196 
show
(
C⁄figIãm
 *
i
);

197 
keyPªssEvít
(
QKeyEvít
 *
e
);

199 
	gpublic
:

200 
C⁄figIãm
 *
ôem
;

203 ˛as†
	cC⁄figMaöWödow
 : 
public
 
QMaöWödow
 {

204 
Q_OBJECT


205 
public
:

206 
C⁄figMaöWödow
();

207 
public
 
	m¶Ÿs
:

208 
£tHñp
(
QLi°VõwIãm
* 
ôem
);

209 
ch™geMíu
(
míu
 *);

210 
li°FocusCh™ged
();

211 
goBack
();

212 
lﬂdC⁄fig
();

213 
ßveC⁄fig
();

214 
ßveC⁄figAs
();

215 
showSögÀVõw
();

216 
showS∂ôVõw
();

217 
showFuŒVõw
();

218 
£tShowAŒ
(
boﬁ
);

219 
£tShowDebug
(
boﬁ
);

220 
£tShowR™ge
(
boﬁ
);

221 
£tShowName
(
boﬁ
);

222 
£tShowD©a
(
boﬁ
);

223 
showI¡ro
();

224 
showAbout
();

226 
	m¥Ÿe˘ed
:

227 
˛o£Evít
(
QClo£Evít
 *
e
);

229 
C⁄figVõw
 *
	mmíuVõw
;

230 
C⁄figLi°
 *
	mmíuLi°
;

231 
C⁄figVõw
 *
	mc⁄figVõw
;

232 
C⁄figLi°
 *
	mc⁄figLi°
;

233 
QTextVõw
 *
	mhñpText
;

234 
QToﬁB¨
 *
	mtoﬁB¨
;

235 
QA˘i⁄
 *
	mbackA˘i⁄
;

237 
boﬁ
 
	mshowDebug
;

	@/usr/src/rtai/base/config/kconfig/symbol.c

6 
	~<˘y≥.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<sys/ut¢ame.h
>

11 
	#LKC_DIRECT_LINK


	)

12 
	~"lkc.h
"

14 
symbﬁ
 
	gsymbﬁ_yes
 = {

15 .
«me
 = "y",

16 .
	gcuº
 = { "y", 
yes
 },

17 .
	gÊags
 = 
SYMBOL_YES
|
SYMBOL_VALID
,

18 }, 
	gsymbﬁ_mod
 = {

19 .
«me
 = "m",

20 .
	gcuº
 = { "m", 
mod
 },

21 .
	gÊags
 = 
SYMBOL_MOD
|
SYMBOL_VALID
,

22 }, 
	gsymbﬁ_no
 = {

23 .
«me
 = "n",

24 .
	gcuº
 = { "n", 
no
 },

25 .
	gÊags
 = 
SYMBOL_NO
|
SYMBOL_VALID
,

26 }, 
	gsymbﬁ_em±y
 = {

27 .
«me
 = "",

28 .
	gcuº
 = { "", 
no
 },

29 .
	gÊags
 = 
SYMBOL_VALID
,

32 
	gsym_ch™ge_cou¡
;

33 
symbﬁ
 *
	gmoduÀs_sym
;

35 
	$sym_add_deÁu…
(
symbﬁ
 *
sym
, c⁄° *
def
)

37 
¥›îty
 *
¥›
 = 
	`¥›_Æloc
(
P_DEFAULT
, 
sym
);

39 
¥›
->
ex¥
 = 
	`ex¥_Æloc_symbﬁ
(
	`sym_lookup
(
def
, 1));

40 
	}
}

42 
	$sym_öô
()

44 
symbﬁ
 *
sym
;

45 
ut¢ame
 
uts
;

46 *
p
;

47 
boﬁ
 
öôed
 = 
Ál£
;

49 i‡(
öôed
)

51 
öôed
 = 
åue
;

53 
	`u«me
(&
uts
);

55 
sym
 = 
	`sym_lookup
("ARCH", 0);

56 
sym
->
ty≥
 = 
S_STRING
;

57 
sym
->
Êags
 |
SYMBOL_AUTO
;

58 
p
 = 
	`gëív
("ARCH");

59 i‡(
p
)

60 
	`sym_add_deÁu…
(
sym
, 
p
);

62 
sym
 = 
	`sym_lookup
("KERNELRELEASE", 0);

63 
sym
->
ty≥
 = 
S_STRING
;

64 
sym
->
Êags
 |
SYMBOL_AUTO
;

65 
p
 = 
	`gëív
("KERNELRELEASE");

66 i‡(
p
)

67 
	`sym_add_deÁu…
(
sym
, 
p
);

69 
sym
 = 
	`sym_lookup
("UNAME_RELEASE", 0);

70 
sym
->
ty≥
 = 
S_STRING
;

71 
sym
->
Êags
 |
SYMBOL_AUTO
;

72 
	`sym_add_deÁu…
(
sym
, 
uts
.
ªÀa£
);

73 
	}
}

75 
symbﬁ_ty≥
 
	$sym_gë_ty≥
(
symbﬁ
 *
sym
)

77 
symbﬁ_ty≥
 
ty≥
 = 
sym
->type;

79 i‡(
ty≥
 =
S_TRISTATE
) {

80 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
)

81 
ty≥
 = 
S_BOOLEAN
;

83 
	`sym_ˇlc_vÆue
(
moduÀs_sym
);

84 i‡(
moduÀs_sym
->
cuº
.
åi
 =
no
)

85 
ty≥
 = 
S_BOOLEAN
;

88  
ty≥
;

89 
	}
}

91 c⁄° *
	$sym_ty≥_«me
(
symbﬁ_ty≥
 
ty≥
)

93 
ty≥
) {

94 
S_BOOLEAN
:

96 
S_TRISTATE
:

98 
S_INT
:

100 
S_HEX
:

102 
S_STRING
:

104 
S_UNKNOWN
:

106 
S_OTHER
:

110 
	}
}

112 
¥›îty
 *
	$sym_gë_choi˚_¥›
(
symbﬁ
 *
sym
)

114 
¥›îty
 *
¥›
;

116 
	`f‹_Æl_choi˚s
(
sym
, 
¥›
)

117  
¥›
;

118  
NULL
;

119 
	}
}

121 
¥›îty
 *
	$sym_gë_deÁu…_¥›
(
symbﬁ
 *
sym
)

123 
¥›îty
 *
¥›
;

125 
	`f‹_Æl_deÁu…s
(
sym
, 
¥›
) {

126 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

127 i‡(
¥›
->
visibÀ
.
åi
 !
no
)

128  
¥›
;

130  
NULL
;

131 
	}
}

133 
¥›îty
 *
	$sym_gë_ønge_¥›
(
symbﬁ
 *
sym
)

135 
¥›îty
 *
¥›
;

137 
	`f‹_Æl_¥›îtõs
(
sym
, 
¥›
, 
P_RANGE
) {

138 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

139 i‡(
¥›
->
visibÀ
.
åi
 !
no
)

140  
¥›
;

142  
NULL
;

143 
	}
}

145 
	$sym_ˇlc_visibûôy
(
symbﬁ
 *
sym
)

147 
¥›îty
 *
¥›
;

148 
åi°©e
 
åi
;

151 
åi
 = 
no
;

152 
	`f‹_Æl_¥om±s
(
sym
, 
¥›
) {

153 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

154 
åi
 = 
	`E_OR
—ri, 
¥›
->
visibÀ
.tri);

156 i‡(
sym
->
visibÀ
 !
åi
) {

157 
sym
->
visibÀ
 = 
åi
;

158 
	`sym_£t_ch™ged
(
sym
);

160 i‡(
	`sym_is_choi˚_vÆue
(
sym
))

162 
åi
 = 
no
;

163 i‡(
sym
->
ªv_dï
.
ex¥
)

164 
åi
 = 
	`ex¥_ˇlc_vÆue
(
sym
->
ªv_dï
.
ex¥
);

165 i‡(
sym
->
ªv_dï
.
åi
 !=Åri) {

166 
sym
->
ªv_dï
.
åi
 =Åri;

167 
	`sym_£t_ch™ged
(
sym
);

169 
	}
}

171 
symbﬁ
 *
	$sym_ˇlc_choi˚
(
symbﬁ
 *
sym
)

173 
symbﬁ
 *
def_sym
;

174 
¥›îty
 *
¥›
;

175 
ex¥
 *
e
;

178 
def_sym
 = 
sym
->
u£r
.
vÆ
;

179 i‡(
def_sym
) {

180 
	`sym_ˇlc_visibûôy
(
def_sym
);

181 i‡(
def_sym
->
visibÀ
 !
no
)

182  
def_sym
;

186 
	`f‹_Æl_deÁu…s
(
sym
, 
¥›
) {

187 
¥›
->
visibÀ
.
åi
 = 
	`ex¥_ˇlc_vÆue
’r›->visibÀ.
ex¥
);

188 i‡(
¥›
->
visibÀ
.
åi
 =
no
)

190 
def_sym
 = 
	`¥›_gë_symbﬁ
(
¥›
);

191 
	`sym_ˇlc_visibûôy
(
def_sym
);

192 i‡(
def_sym
->
visibÀ
 !
no
)

193  
def_sym
;

197 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

198 
e
 = 
¥›
->
ex¥
;É;É =É->
À·
.expr) {

199 
def_sym
 = 
e
->
right
.
sym
;

200 
	`sym_ˇlc_visibûôy
(
def_sym
);

201 i‡(
def_sym
->
visibÀ
 !
no
)

202  
def_sym
;

206 
sym
->
cuº
.
åi
 = 
no
;

207  
NULL
;

208 
	}
}

210 
	$sym_ˇlc_vÆue
(
symbﬁ
 *
sym
)

212 
symbﬁ_vÆue
 
√wvÆ
, 
ﬁdvÆ
;

213 
¥›îty
 *
¥›
;

214 
ex¥
 *
e
;

216 i‡(!
sym
)

219 i‡(
sym
->
Êags
 & 
SYMBOL_VALID
)

221 
sym
->
Êags
 |
SYMBOL_VALID
;

223 
ﬁdvÆ
 = 
sym
->
cuº
;

225 
sym
->
ty≥
) {

226 
S_INT
:

227 
S_HEX
:

228 
S_STRING
:

229 
√wvÆ
 = 
symbﬁ_em±y
.
cuº
;

231 
S_BOOLEAN
:

232 
S_TRISTATE
:

233 
√wvÆ
 = 
symbﬁ_no
.
cuº
;

236 
sym
->
cuº
.
vÆ
 = sym->
«me
;

237 
sym
->
cuº
.
åi
 = 
no
;

240 i‡(!
	`sym_is_choi˚_vÆue
(
sym
))

241 
sym
->
Êags
 &~
SYMBOL_WRITE
;

243 
	`sym_ˇlc_visibûôy
(
sym
);

246 
sym
->
cuº
 = 
√wvÆ
;

248 
	`sym_gë_ty≥
(
sym
)) {

249 
S_BOOLEAN
:

250 
S_TRISTATE
:

251 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
) {

252 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

253 
√wvÆ
.
åi
 = (
	`¥›_gë_symbﬁ
(
¥›
)->
cuº
.
vÆ
 =
sym
Ë? 
yes
 : 
no
;

254 } i‡(
	`E_OR
(
sym
->
visibÀ
, sym->
ªv_dï
.
åi
Ë!
no
) {

255 
sym
->
Êags
 |
SYMBOL_WRITE
;

256 i‡(
	`sym_has_vÆue
(
sym
))

257 
√wvÆ
.
åi
 = 
sym
->
u£r
.tri;

258 i‡(!
	`sym_is_choi˚
(
sym
)) {

259 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

260 i‡(
¥›
)

261 
√wvÆ
.
åi
 = 
	`ex¥_ˇlc_vÆue
(
¥›
->
ex¥
);

263 
√wvÆ
.
åi
 = 
	`E_OR
(
	`E_AND
“ewvÆ.åi, 
sym
->
visibÀ
), sym->
ªv_dï
.tri);

264 } i‡(!
	`sym_is_choi˚
(
sym
)) {

265 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

266 i‡(
¥›
) {

267 
sym
->
Êags
 |
SYMBOL_WRITE
;

268 
√wvÆ
.
åi
 = 
	`ex¥_ˇlc_vÆue
(
¥›
->
ex¥
);

271 i‡(
	`sym_gë_ty≥
(
sym
Ë=
S_BOOLEAN
) {

272 i‡(
√wvÆ
.
åi
 =
mod
)

273 
√wvÆ
.
åi
 = 
yes
;

274 i‡(
sym
->
visibÀ
 =
mod
)

275 
sym
->
visibÀ
 = 
yes
;

276 i‡(
sym
->
ªv_dï
.
åi
 =
mod
)

277 
sym
->
ªv_dï
.
åi
 = 
yes
;

280 
S_STRING
:

281 
S_HEX
:

282 
S_INT
:

283 i‡(
sym
->
visibÀ
 !
no
) {

284 
sym
->
Êags
 |
SYMBOL_WRITE
;

285 i‡(
	`sym_has_vÆue
(
sym
)) {

286 
√wvÆ
.
vÆ
 = 
sym
->
u£r
.val;

290 
¥›
 = 
	`sym_gë_deÁu…_¥›
(
sym
);

291 i‡(
¥›
) {

292 
symbﬁ
 *
ds
 = 
	`¥›_gë_symbﬁ
(
¥›
);

293 i‡(
ds
) {

294 
sym
->
Êags
 |
SYMBOL_WRITE
;

295 
	`sym_ˇlc_vÆue
(
ds
);

296 
√wvÆ
.
vÆ
 = 
ds
->
cuº
.val;

304 
sym
->
cuº
 = 
√wvÆ
;

305 i‡(
	`sym_is_choi˚
(
sym
Ë&& 
√wvÆ
.
åi
 =
yes
)

306 
sym
->
cuº
.
vÆ
 = 
	`sym_ˇlc_choi˚
(sym);

308 i‡(
	`memcmp
(&
ﬁdvÆ
, &
sym
->
cuº
, (oldval)))

309 
	`sym_£t_ch™ged
(
sym
);

311 i‡(
	`sym_is_choi˚
(
sym
)) {

312 
Êags
 = 
sym
->Êag†& (
SYMBOL_CHANGED
 | 
SYMBOL_WRITE
);

313 
¥›
 = 
	`sym_gë_choi˚_¥›
(
sym
);

314 
e
 = 
¥›
->
ex¥
;É;É =É->
À·
.expr) {

315 
e
->
right
.
sym
->
Êags
 |= flags;

316 i‡(
Êags
 & 
SYMBOL_CHANGED
)

317 
	`sym_£t_ch™ged
(
e
->
right
.
sym
);

320 
	}
}

322 
	$sym_˛ór_Æl_vÆid
()

324 
symbﬁ
 *
sym
;

325 
i
;

327 
	`f‹_Æl_symbﬁs
(
i
, 
sym
)

328 
sym
->
Êags
 &~
SYMBOL_VALID
;

329 
sym_ch™ge_cou¡
++;

330 
	}
}

332 
	$sym_£t_ch™ged
(
symbﬁ
 *
sym
)

334 
¥›îty
 *
¥›
;

336 
sym
->
Êags
 |
SYMBOL_CHANGED
;

337 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

338 i‡(
¥›
->
míu
)

339 
¥›
->
míu
->
Êags
 |
MENU_CHANGED
;

341 
	}
}

343 
	$sym_£t_Æl_ch™ged
()

345 
symbﬁ
 *
sym
;

346 
i
;

348 
	`f‹_Æl_symbﬁs
(
i
, 
sym
)

349 
	`sym_£t_ch™ged
(
sym
);

350 
	}
}

352 
boﬁ
 
	$sym_åi°©e_wôhö_ønge
(
symbﬁ
 *
sym
, 
åi°©e
 
vÆ
)

354 
ty≥
 = 
	`sym_gë_ty≥
(
sym
);

356 i‡(
sym
->
visibÀ
 =
no
)

357  
Ál£
;

359 i‡(
ty≥
 !
S_BOOLEAN
 &&Åy≥ !
S_TRISTATE
)

360  
Ál£
;

362 i‡(
ty≥
 =
S_BOOLEAN
 && 
vÆ
 =
mod
)

363  
Ál£
;

364 i‡(
sym
->
visibÀ
 <sym->
ªv_dï
.
åi
)

365  
Ál£
;

366 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& sym->
visibÀ
 =
yes
)

367  
vÆ
 =
yes
;

368  
vÆ
 >
sym
->
ªv_dï
.
åi
 && vÆ <sym->
visibÀ
;

369 
	}
}

371 
boﬁ
 
	$sym_£t_åi°©e_vÆue
(
symbﬁ
 *
sym
, 
åi°©e
 
vÆ
)

373 
åi°©e
 
ﬁdvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

375 i‡(
ﬁdvÆ
 !
vÆ
 && !
	`sym_åi°©e_wôhö_ønge
(
sym
, val))

376  
Ál£
;

378 i‡(
sym
->
Êags
 & 
SYMBOL_NEW
) {

379 
sym
->
Êags
 &~
SYMBOL_NEW
;

380 
	`sym_£t_ch™ged
(
sym
);

382 i‡(
	`sym_is_choi˚_vÆue
(
sym
Ë&& 
vÆ
 =
yes
) {

383 
symbﬁ
 *
cs
 = 
	`¥›_gë_symbﬁ
(
	`sym_gë_choi˚_¥›
(
sym
));

385 
cs
->
u£r
.
vÆ
 = 
sym
;

386 
cs
->
Êags
 &~
SYMBOL_NEW
;

389 
sym
->
u£r
.
åi
 = 
vÆ
;

390 i‡(
ﬁdvÆ
 !
vÆ
) {

391 
	`sym_˛ór_Æl_vÆid
();

392 i‡(
sym
 =
moduÀs_sym
)

393 
	`sym_£t_Æl_ch™ged
();

396  
åue
;

397 
	}
}

399 
åi°©e
 
	$sym_toggÀ_åi°©e_vÆue
(
symbﬁ
 *
sym
)

401 
åi°©e
 
ﬁdvÆ
, 
√wvÆ
;

403 
ﬁdvÆ
 = 
√wvÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

405 
√wvÆ
) {

406 
no
:

407 
√wvÆ
 = 
mod
;

409 
mod
:

410 
√wvÆ
 = 
yes
;

412 
yes
:

413 
√wvÆ
 = 
no
;

416 i‡(
	`sym_£t_åi°©e_vÆue
(
sym
, 
√wvÆ
))

418 } 
ﬁdvÆ
 !
√wvÆ
);

419  
√wvÆ
;

420 
	}
}

422 
boﬁ
 
	$sym_°rög_vÆid
(
symbﬁ
 *
sym
, c⁄° *
°r
)

424 
ch
;

426 
sym
->
ty≥
) {

427 
S_STRING
:

428  
åue
;

429 
S_INT
:

430 
ch
 = *
°r
++;

431 i‡(
ch
 == '-')

432 
ch
 = *
°r
++;

433 i‡(!
	`isdigô
(
ch
))

434  
Ál£
;

435 i‡(
ch
 ='0' && *
°r
 != 0)

436  
Ál£
;

437 (
ch
 = *
°r
++)) {

438 i‡(!
	`isdigô
(
ch
))

439  
Ál£
;

441  
åue
;

442 
S_HEX
:

443 i‡(
°r
[0] == '0' && (str[1] == 'x' || str[1] == 'X'))

444 
°r
 += 2;

445 
ch
 = *
°r
++;

447 i‡(!
	`isxdigô
(
ch
))

448  
Ál£
;

449 } (
ch
 = *
°r
++));

450  
åue
;

451 
S_BOOLEAN
:

452 
S_TRISTATE
:

453 
°r
[0]) {

457  
åue
;

459  
Ál£
;

461  
Ál£
;

463 
	}
}

465 
boﬁ
 
	$sym_°rög_wôhö_ønge
(
symbﬁ
 *
sym
, c⁄° *
°r
)

467 
¥›îty
 *
¥›
;

468 
vÆ
;

470 
sym
->
ty≥
) {

471 
S_STRING
:

472  
	`sym_°rög_vÆid
(
sym
, 
°r
);

473 
S_INT
:

474 i‡(!
	`sym_°rög_vÆid
(
sym
, 
°r
))

475  
Ál£
;

476 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

477 i‡(!
¥›
)

478  
åue
;

479 
vÆ
 = 
	`°πﬁ
(
°r
, 
NULL
, 10);

480  
vÆ
 >
	`°πﬁ
(
¥›
->
ex¥
->
À·
.
sym
->
«me
, 
NULL
, 10) &&

481 
vÆ
 <
	`°πﬁ
(
¥›
->
ex¥
->
right
.
sym
->
«me
, 
NULL
, 10);

482 
S_HEX
:

483 i‡(!
	`sym_°rög_vÆid
(
sym
, 
°r
))

484  
Ál£
;

485 
¥›
 = 
	`sym_gë_ønge_¥›
(
sym
);

486 i‡(!
¥›
)

487  
åue
;

488 
vÆ
 = 
	`°πﬁ
(
°r
, 
NULL
, 16);

489  
vÆ
 >
	`°πﬁ
(
¥›
->
ex¥
->
À·
.
sym
->
«me
, 
NULL
, 16) &&

490 
vÆ
 <
	`°πﬁ
(
¥›
->
ex¥
->
right
.
sym
->
«me
, 
NULL
, 16);

491 
S_BOOLEAN
:

492 
S_TRISTATE
:

493 
°r
[0]) {

495  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
yes
);

497  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
mod
);

499  
	`sym_åi°©e_wôhö_ønge
(
sym
, 
no
);

501  
Ál£
;

503  
Ál£
;

505 
	}
}

507 
boﬁ
 
	$sym_£t_°rög_vÆue
(
symbﬁ
 *
sym
, c⁄° *
√wvÆ
)

509 c⁄° *
ﬁdvÆ
;

510 *
vÆ
;

511 
size
;

513 
sym
->
ty≥
) {

514 
S_BOOLEAN
:

515 
S_TRISTATE
:

516 
√wvÆ
[0]) {

518  
	`sym_£t_åi°©e_vÆue
(
sym
, 
yes
);

520  
	`sym_£t_åi°©e_vÆue
(
sym
, 
mod
);

522  
	`sym_£t_åi°©e_vÆue
(
sym
, 
no
);

524  
Ál£
;

529 i‡(!
	`sym_°rög_wôhö_ønge
(
sym
, 
√wvÆ
))

530  
Ál£
;

532 i‡(
sym
->
Êags
 & 
SYMBOL_NEW
) {

533 
sym
->
Êags
 &~
SYMBOL_NEW
;

534 
	`sym_£t_ch™ged
(
sym
);

537 
ﬁdvÆ
 = 
sym
->
u£r
.
vÆ
;

538 
size
 = 
	`°æí
(
√wvÆ
) + 1;

539 i‡(
sym
->
ty≥
 =
S_HEX
 && (
√wvÆ
[0] != '0' || (newval[1] != 'x' &&Çewval[1] != 'X'))) {

540 
size
 += 2;

541 
sym
->
u£r
.
vÆ
 = vÆ = 
	`mÆloc
(
size
);

542 *
vÆ
++ = '0';

543 *
vÆ
++ = 'x';

544 } i‡(!
ﬁdvÆ
 || 
	`°rcmp
(ﬁdvÆ, 
√wvÆ
))

545 
sym
->
u£r
.
vÆ
 = vÆ = 
	`mÆloc
(
size
);

547  
åue
;

549 
	`°r˝y
(
vÆ
, 
√wvÆ
);

550 
	`‰ì
((*)
ﬁdvÆ
);

551 
	`sym_˛ór_Æl_vÆid
();

553  
åue
;

554 
	}
}

556 c⁄° *
	$sym_gë_°rög_vÆue
(
symbﬁ
 *
sym
)

558 
åi°©e
 
vÆ
;

560 
sym
->
ty≥
) {

561 
S_BOOLEAN
:

562 
S_TRISTATE
:

563 
vÆ
 = 
	`sym_gë_åi°©e_vÆue
(
sym
);

564 
vÆ
) {

565 
no
:

567 
mod
:

569 
yes
:

576  (c⁄° *)
sym
->
cuº
.
vÆ
;

577 
	}
}

579 
boﬁ
 
	$sym_is_ch™gabÀ
(
symbﬁ
 *
sym
)

581  
sym
->
visibÀ
 > sym->
ªv_dï
.
åi
;

582 
	}
}

584 
symbﬁ
 *
	$sym_lookup
(c⁄° *
«me
, 
isc⁄°
)

586 
symbﬁ
 *symbol;

587 c⁄° *
±r
;

588 *
√w_«me
;

589 
hash
 = 0;

591 i‡(
«me
) {

592 i‡(
«me
[0] && !name[1]) {

593 
«me
[0]) {

594 'y':  &
symbﬁ_yes
;

595 'm':  &
symbﬁ_mod
;

596 'n':  &
symbﬁ_no
;

599 
±r
 = 
«me
; *ptr;Ötr++)

600 
hash
 +*
±r
;

601 
hash
 &= 0xff;

603 
symbﬁ
 = 
symbﬁ_hash
[
hash
]; symbﬁ; symbﬁ = symbﬁ->
√xt
) {

604 i‡(!
	`°rcmp
(
symbﬁ
->
«me
,Çame)) {

605 i‡((
isc⁄°
 && 
symbﬁ
->
Êags
 & 
SYMBOL_CONST
) ||

606 (!
isc⁄°
 && !(
symbﬁ
->
Êags
 & 
SYMBOL_CONST
)))

607  
symbﬁ
;

610 
√w_«me
 = 
	`°rdup
(
«me
);

612 
√w_«me
 = 
NULL
;

613 
hash
 = 256;

616 
symbﬁ
 = 
	`mÆloc
((*symbol));

617 
	`mem£t
(
symbﬁ
, 0, (*symbol));

618 
symbﬁ
->
«me
 = 
√w_«me
;

619 
symbﬁ
->
ty≥
 = 
S_UNKNOWN
;

620 
symbﬁ
->
Êags
 = 
SYMBOL_NEW
;

621 i‡(
isc⁄°
)

622 
symbﬁ
->
Êags
 |
SYMBOL_CONST
;

624 
symbﬁ
->
√xt
 = 
symbﬁ_hash
[
hash
];

625 
symbﬁ_hash
[
hash
] = 
symbﬁ
;

627  
symbﬁ
;

628 
	}
}

630 
symbﬁ
 *
	$sym_föd
(c⁄° *
«me
)

632 
symbﬁ
 *symbﬁ = 
NULL
;

633 c⁄° *
±r
;

634 
hash
 = 0;

636 i‡(!
«me
)

637  
NULL
;

639 i‡(
«me
[0] && !name[1]) {

640 
«me
[0]) {

641 'y':  &
symbﬁ_yes
;

642 'm':  &
symbﬁ_mod
;

643 'n':  &
symbﬁ_no
;

646 
±r
 = 
«me
; *ptr;Ötr++)

647 
hash
 +*
±r
;

648 
hash
 &= 0xff;

650 
symbﬁ
 = 
symbﬁ_hash
[
hash
]; symbﬁ; symbﬁ = symbﬁ->
√xt
) {

651 i‡(!
	`°rcmp
(
symbﬁ
->
«me
,Çame) &&

652 !(
symbﬁ
->
Êags
 & 
SYMBOL_CONST
))

656  
symbﬁ
;

657 
	}
}

659 
symbﬁ
 *
sym_check_dïs
(symbﬁ *
sym
);

661 
symbﬁ
 *
	$sym_check_ex¥_dïs
(
ex¥
 *
e
)

663 
symbﬁ
 *
sym
;

665 i‡(!
e
)

666  
NULL
;

667 
e
->
ty≥
) {

668 
E_OR
:

669 
E_AND
:

670 
sym
 = 
	`sym_check_ex¥_dïs
(
e
->
À·
.
ex¥
);

671 i‡(
sym
)

672  
sym
;

673  
	`sym_check_ex¥_dïs
(
e
->
right
.
ex¥
);

674 
E_NOT
:

675  
	`sym_check_ex¥_dïs
(
e
->
À·
.
ex¥
);

676 
E_EQUAL
:

677 
E_UNEQUAL
:

678 
sym
 = 
	`sym_check_dïs
(
e
->
À·
.sym);

679 i‡(
sym
)

680  
sym
;

681  
	`sym_check_dïs
(
e
->
right
.
sym
);

682 
E_SYMBOL
:

683  
	`sym_check_dïs
(
e
->
À·
.
sym
);

687 
	`¥ötf
("O›s! HowÅÿcheck %d?\n", 
e
->
ty≥
);

688  
NULL
;

689 
	}
}

691 
symbﬁ
 *
	$sym_check_dïs
(
symbﬁ
 *
sym
)

693 
symbﬁ
 *
sym2
;

694 
¥›îty
 *
¥›
;

696 i‡(
sym
->
Êags
 & 
SYMBOL_CHECK_DONE
)

697  
NULL
;

698 i‡(
sym
->
Êags
 & 
SYMBOL_CHECK
) {

699 
	`¥ötf
("W¨nög! FoundÑecursivêdïídícy: %s", 
sym
->
«me
);

700  
sym
;

703 
sym
->
Êags
 |(
SYMBOL_CHECK
 | 
SYMBOL_CHECKED
);

704 
sym2
 = 
	`sym_check_ex¥_dïs
(
sym
->
ªv_dï
.
ex¥
);

705 i‡(
sym2
)

706 
out
;

708 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

709 i‡(
¥›
->
ty≥
 =
P_CHOICE
)

711 
sym2
 = 
	`sym_check_ex¥_dïs
(
¥›
->
visibÀ
.
ex¥
);

712 i‡(
sym2
)

713 
out
;

714 i‡(
¥›
->
ty≥
 !
P_DEFAULT
 || 
	`sym_is_choi˚
(
sym
))

716 
sym2
 = 
	`sym_check_ex¥_dïs
(
¥›
->
ex¥
);

717 i‡(
sym2
)

718 
out
;

720 
out
:

721 i‡(
sym2
)

722 
	`¥ötf
(" %s", 
sym
->
«me
);

723 
sym
->
Êags
 &~
SYMBOL_CHECK
;

724  
sym2
;

725 
	}
}

727 
¥›îty
 *
	$¥›_Æloc
(
¥›_ty≥
 
ty≥
, 
symbﬁ
 *
sym
)

729 
¥›îty
 *
¥›
;

730 
¥›îty
 **
¥›p
;

732 
¥›
 = 
	`mÆloc
((*prop));

733 
	`mem£t
(
¥›
, 0, (*prop));

734 
¥›
->
ty≥
 =Åype;

735 
¥›
->
sym
 = sym;

736 
¥›
->
fûe
 = 
cuºít_fûe
;

737 
¥›
->
löío
 = 
	`zc⁄f_löío
();

740 i‡(
sym
) {

741 
¥›p
 = &
sym
->
¥›
; *¥›p;Ör›∞&(*¥›p)->
√xt
)

743 *
¥›p
 = 
¥›
;

746  
¥›
;

747 
	}
}

749 
symbﬁ
 *
	$¥›_gë_symbﬁ
(
¥›îty
 *
¥›
)

751 i‡(
¥›
->
ex¥
 && (¥›->ex¥->
ty≥
 =
E_SYMBOL
 ||

752 
¥›
->
ex¥
->
ty≥
 =
E_CHOICE
))

753  
¥›
->
ex¥
->
À·
.
sym
;

754  
NULL
;

755 
	}
}

757 c⁄° *
	$¥›_gë_ty≥_«me
(
¥›_ty≥
 
ty≥
)

759 
ty≥
) {

760 
P_PROMPT
:

762 
P_COMMENT
:

764 
P_MENU
:

766 
P_DEFAULT
:

768 
P_CHOICE
:

770 
P_SELECT
:

772 
P_RANGE
:

774 
P_UNKNOWN
:

778 
	}
}

	@/usr/src/rtai/base/config/kconfig/zconf.l

1 %
›ti⁄
 
backup
 
no°döô
 
noyywøp
 
√vî
-
öãø˘ive
 
fuŒ
 
ecs


2 %
›ti⁄
 8b
ô
 
backup
 
nodeÁu…
 
≥rf
-
ªp‹t
Öerf-report

3 %
x
 
COMMAND
 
HELP
 
STRING
 
PARAM


10 
	~<limôs.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<uni°d.h
>

16 
	#LKC_DIRECT_LINK


	)

17 
	~"lkc.h
"

19 
	#START_STRSIZE
 16

	)

21 *
	gãxt
;

22 *
	gãxt_±r
;

23 
	gãxt_size
, 
	gãxt_asize
;

25 
	sbuf„r
 {

26 
buf„r
 *
	m∑ª¡
;

27 
YY_BUFFER_STATE
 
	m°©e
;

30 
buf„r
 *
	gcuºít_buf
;

32 
	gœ°_ts
, 
	gfú°_ts
;

34 
zc⁄f_ídhñp
();

35 
buf„r
 *
zc⁄f_ídfûe
();

37 
	$√w_°rög
()

39 
ãxt
 = 
	`mÆloc
(
START_STRSIZE
);

40 
ãxt_asize
 = 
START_STRSIZE
;

41 
ãxt_±r
 = 
ãxt
;

42 
ãxt_size
 = 0;

43 *
ãxt_±r
 = 0;

44 
	}
}

46 
	$≠≥nd_°rög
(c⁄° *
°r
, 
size
)

48 
√w_size
 = 
ãxt_size
 + 
size
 + 1;

49 i‡(
√w_size
 > 
ãxt_asize
) {

50 
ãxt
 = 
	`ªÆloc
—ext, 
√w_size
);

51 
ãxt_asize
 = 
√w_size
;

52 
ãxt_±r
 = 
ãxt
 + 
ãxt_size
;

54 
	`mem˝y
(
ãxt_±r
, 
°r
, 
size
);

55 
ãxt_±r
 +
size
;

56 
ãxt_size
 +
size
;

57 *
ãxt_±r
 = 0;

58 
	}
}

60 
	$Æloc_°rög
(c⁄° *
°r
, 
size
)

62 
ãxt
 = 
	`mÆloc
(
size
 + 1);

63 
	`mem˝y
(
ãxt
, 
°r
, 
size
);

64 
ãxt
[
size
] = 0;

65 
	}
}

68 
ws
 [ \
n
\
t
]

69 
n
 [
A
-
Za
-
z0
-9
_
]

71 %% /* 
	$yyÀx
 */

72 
°r
 = 0;

73 
ts
, 
i
;

75 [ \
t
]*#.*\
n
 
cuºít_fûe
->
löío
++;

76 [ \
t
]*#.*

78 [ \
t
]*\
n
 
cuºít_fûe
->
löío
++;  
T_EOL
;

80 [ \
t
]+ {

81 
	`BEGIN
(
COMMAND
);

85 
	`u≈ut
(
yyãxt
[0]);

86 
	`BEGIN
(
COMMAND
);

90 <
COMMAND
>{

91 "maömíu" 
	`BEGIN
(
PARAM
);  
T_MAINMENU
;

92 "míu" 
	`BEGIN
(
PARAM
);  
T_MENU
;

93 "ídmíu" 
	`BEGIN
(
PARAM
);  
T_ENDMENU
;

94 "sour˚" 
	`BEGIN
(
PARAM
);  
T_SOURCE
;

95 "choi˚" 
	`BEGIN
(
PARAM
);  
T_CHOICE
;

96 "ídchoi˚" 
	`BEGIN
(
PARAM
);  
T_ENDCHOICE
;

97 "commít" 
	`BEGIN
(
PARAM
);  
T_COMMENT
;

98 "c⁄fig" 
	`BEGIN
(
PARAM
);  
T_CONFIG
;

99 "míuc⁄fig" 
	`BEGIN
(
PARAM
);  
T_MENUCONFIG
;

100 "hñp" 
	`BEGIN
(
PARAM
);  
T_HELP
;

101 "if" 
	`BEGIN
(
PARAM
);  
T_IF
;

102 "ídif" 
	`BEGIN
(
PARAM
);  
T_ENDIF
;

103 "dïíds" 
	`BEGIN
(
PARAM
);  
T_DEPENDS
;

104 "ªquúes" 
	`BEGIN
(
PARAM
);  
T_REQUIRES
;

105 "›ti⁄Æ" 
	`BEGIN
(
PARAM
);  
T_OPTIONAL
;

106 "deÁu…" 
	`BEGIN
(
PARAM
);  
T_DEFAULT
;

107 "¥om±" 
	`BEGIN
(
PARAM
);  
T_PROMPT
;

108 "åi°©e" 
	`BEGIN
(
PARAM
);  
T_TRISTATE
;

109 "def_åi°©e" 
	`BEGIN
(
PARAM
);  
T_DEF_TRISTATE
;

110 "boﬁ" 
	`BEGIN
(
PARAM
);  
T_BOOLEAN
;

111 "boﬁón" 
	`BEGIN
(
PARAM
);  
T_BOOLEAN
;

112 "def_boﬁ" 
	`BEGIN
(
PARAM
);  
T_DEF_BOOLEAN
;

113 "def_boﬁón" 
	`BEGIN
(
PARAM
);  
T_DEF_BOOLEAN
;

114 "öt" 
	`BEGIN
(
PARAM
);  
T_INT
;

115 "hex" 
	`BEGIN
(
PARAM
);  
T_HEX
;

116 "°rög" 
	`BEGIN
(
PARAM
);  
T_STRING
;

117 "£À˘" 
	`BEGIN
(
PARAM
);  
T_SELECT
;

118 "íabÀ" 
	`BEGIN
(
PARAM
);  
T_SELECT
;

119 "ønge" 
	`BEGIN
(
PARAM
);  
T_RANGE
;

120 {
n
}+ {

121 
	`Æloc_°rög
(
yyãxt
, 
yyÀng
);

122 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

123  
T_WORD
;

126 \
n
 
cuºít_fûe
->
löío
++; 
	`BEGIN
(
INITIAL
);

129 <
PARAM
>{

130 "&&"  
T_AND
;

131 "||"  
T_OR
;

132 "("  
T_OPEN_PAREN
;

133 ")"  
T_CLOSE_PAREN
;

134 "!"  
T_NOT
;

135 "="  
T_EQUAL
;

136 "!="  
T_UNEQUAL
;

137 "if"  
T_IF
;

138 "⁄"  
T_ON
;

140 
°r
 = 
yyãxt
[0];

141 
	`√w_°rög
();

142 
	`BEGIN
(
STRING
);

144 \
n
 
	`BEGIN
(
INITIAL
); 
cuºít_fûe
->
löío
++;  
T_EOL
;

146 ({
n
}|[-/.])+ {

147 
	`Æloc_°rög
(
yyãxt
, 
yyÀng
);

148 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

149  
T_WORD
;

152 \\\
n
 
cuºít_fûe
->
löío
++;

154 <<
EOF
>> {

155 
	`BEGIN
(
INITIAL
);

159 <
STRING
>{

161 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

162 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

163  
T_WORD_QUOTE
;

166 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

168 \\.?/\
n
 {

169 
	`≠≥nd_°rög
(
yyãxt
 + 1, 
yyÀng
 - 1);

170 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

171  
T_WORD_QUOTE
;

174 
	`≠≥nd_°rög
(
yyãxt
 + 1, 
yyÀng
 - 1);

177 i‡(
°r
 =
yyãxt
[0]) {

178 
	`BEGIN
(
PARAM
);

179 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

180  
T_WORD_QUOTE
;

182 
	`≠≥nd_°rög
(
yyãxt
, 1);

184 \
n
 {

185 
	`¥ötf
("%s:%d:w¨nög: mu…i-löê°rög†nŸ suµ‹ãd\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

186 
cuºít_fûe
->
löío
++;

187 
	`BEGIN
(
INITIAL
);

188  
T_EOL
;

190 <<
EOF
>> {

191 
	`BEGIN
(
INITIAL
);

195 <
HELP
>{

196 [ \
t
]+ {

197 
ts
 = 0;

198 
i
 = 0; i < 
yyÀng
; i++) {

199 i‡(
yyãxt
[
i
] == '\t')

200 
ts
 = (ts & ~7) + 8;

202 
ts
++;

204 
œ°_ts
 = 
ts
;

205 i‡(
fú°_ts
) {

206 i‡(
ts
 < 
fú°_ts
) {

207 
	`zc⁄f_ídhñp
();

208  
T_HELPTEXT
;

210 
ts
 -
fú°_ts
;

211 
ts
 > 8) {

212 
	`≠≥nd_°rög
(" ", 8);

213 
ts
 -= 8;

215 
	`≠≥nd_°rög
(" ", 
ts
);

218 [ \
t
]*\
n
/[^ \t\n] {

219 
cuºít_fûe
->
löío
++;

220 
	`zc⁄f_ídhñp
();

221  
T_HELPTEXT
;

223 [ \
t
]*\
n
 {

224 
cuºít_fûe
->
löío
++;

225 
	`≠≥nd_°rög
("\n", 1);

227 [^ \
t
\
n
].* {

228 
	`≠≥nd_°rög
(
yyãxt
, 
yyÀng
);

229 i‡(!
fú°_ts
)

230 
fú°_ts
 = 
œ°_ts
;

232 <<
EOF
>> {

233 
	`zc⁄f_ídhñp
();

234  
T_HELPTEXT
;

238 <<
EOF
>> {

239 i‡(
cuºít_buf
) {

240 
	`zc⁄f_ídfûe
();

241  
T_EOF
;

243 
	`f˛o£
(
yyö
);

244 
	`yyãrmö©e
();

247 
	}
%%

248 
	$zc⁄f_°¨thñp
()

250 
	`√w_°rög
();

251 
œ°_ts
 = 
fú°_ts
 = 0;

252 
	`BEGIN
(
HELP
);

253 
	}
}

255 
	$zc⁄f_ídhñp
()

257 
zc⁄ÊvÆ
.
°rög
 = 
ãxt
;

258 
	`BEGIN
(
INITIAL
);

259 
	}
}

270 
FILE
 *
	$zc⁄f_f›í
(c⁄° *
«me
)

272 *
ív
, 
fuŒ«me
[
PATH_MAX
+1];

273 
FILE
 *
f
;

275 
f
 = 
	`f›í
(
«me
, "r");

276 i‡(!
f
 && 
«me
[0] != '/') {

277 
ív
 = 
	`gëív
(
SRCTREE
);

278 i‡(
ív
) {

279 
	`•rötf
(
fuŒ«me
, "%s/%s", 
ív
, 
«me
);

280 
f
 = 
	`f›í
(
fuŒ«me
, "r");

283  
f
;

284 
	}
}

286 
	$zc⁄f_öôsˇn
(c⁄° *
«me
)

288 
yyö
 = 
	`zc⁄f_f›í
(
«me
);

289 i‡(!
yyö
) {

290 
	`¥ötf
("ˇn'àföd fûê%s\n", 
«me
);

291 
	`exô
(1);

294 
cuºít_buf
 = 
	`mÆloc
((*current_buf));

295 
	`mem£t
(
cuºít_buf
, 0, (*current_buf));

297 
cuºít_fûe
 = 
	`fûe_lookup
(
«me
);

298 
cuºít_fûe
->
löío
 = 1;

299 
cuºít_fûe
->
Êags
 = 
FILE_BUSY
;

300 
	}
}

302 
	$zc⁄f_√xtfûe
(c⁄° *
«me
)

304 
fûe
 *fûê
	`fûe_lookup
(
«me
);

305 
buf„r
 *
buf
 = 
	`mÆloc
((*buf));

306 
	`mem£t
(
buf
, 0, (*buf));

308 
cuºít_buf
->
°©e
 = 
YY_CURRENT_BUFFER
;

309 
yyö
 = 
	`zc⁄f_f›í
(
«me
);

310 i‡(!
yyö
) {

311 
	`¥ötf
("%s:%d: c™'à›í fûê\"%s\"\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
«me
);

312 
	`exô
(1);

314 
	`yy_swôch_to_buf„r
(
	`yy_¸óã_buf„r
(
yyö
, 
YY_BUF_SIZE
));

315 
buf
->
∑ª¡
 = 
cuºít_buf
;

316 
cuºít_buf
 = 
buf
;

318 i‡(
fûe
->
Êags
 & 
FILE_BUSY
) {

319 
	`¥ötf
("ªcursivêsˇ¿(%s)?\n", 
«me
);

320 
	`exô
(1);

322 i‡(
fûe
->
Êags
 & 
FILE_SCANNED
) {

323 
	`¥ötf
("fûê%†Æªady sˇ¬ed?\n", 
«me
);

324 
	`exô
(1);

326 
fûe
->
Êags
 |
FILE_BUSY
;

327 
fûe
->
löío
 = 1;

328 
fûe
->
∑ª¡
 = 
cuºít_fûe
;

329 
cuºít_fûe
 = 
fûe
;

330 
	}
}

332 
buf„r
 *
	$zc⁄f_ídfûe
()

334 
buf„r
 *
∑ª¡
;

336 
cuºít_fûe
->
Êags
 |
FILE_SCANNED
;

337 
cuºít_fûe
->
Êags
 &~
FILE_BUSY
;

338 
cuºít_fûe
 = cuºít_fûe->
∑ª¡
;

340 
∑ª¡
 = 
cuºít_buf
->parent;

341 i‡(
∑ª¡
) {

342 
	`f˛o£
(
yyö
);

343 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
);

344 
	`yy_swôch_to_buf„r
(
∑ª¡
->
°©e
);

346 
	`‰ì
(
cuºít_buf
);

347 
cuºít_buf
 = 
∑ª¡
;

349  
∑ª¡
;

350 
	}
}

352 
	$zc⁄f_löío
()

354 i‡(
cuºít_buf
)

355  
cuºít_fûe
->
löío
 - 1;

358 
	}
}

360 *
	$zc⁄f_cu∫ame
()

362 i‡(
cuºít_buf
)

363  
cuºít_fûe
->
«me
;

366 
	}
}

	@/usr/src/rtai/base/config/kconfig/zconf.tab.c

37 
	#YYBISON
 1

	)

40 
	#YYSKELETON_NAME
 "yacc.c"

	)

43 
	#YYPURE
 0

	)

46 
	#YYLSP_NEEDED
 0

	)

50 
	#yy∑r£
 
zc⁄Â¨£


	)

51 
	#yyÀx
 
zc⁄Êex


	)

52 
	#yyîr‹
 
zc⁄„º‹


	)

53 
	#yylvÆ
 
zc⁄ÊvÆ


	)

54 
	#yych¨
 
zc⁄fch¨


	)

55 
	#yydebug
 
zc⁄fdebug


	)

56 
	#yy√ºs
 
zc⁄‚îrs


	)

60 #i‚de‡
YYTOKENTYPE


61 
	#YYTOKENTYPE


	)

64 
	eyytokíty≥
 {

65 
	mT_MAINMENU
 = 258,

66 
	mT_MENU
 = 259,

67 
	mT_ENDMENU
 = 260,

68 
	mT_SOURCE
 = 261,

69 
	mT_CHOICE
 = 262,

70 
	mT_ENDCHOICE
 = 263,

71 
	mT_COMMENT
 = 264,

72 
	mT_CONFIG
 = 265,

73 
	mT_MENUCONFIG
 = 266,

74 
	mT_HELP
 = 267,

75 
	mT_HELPTEXT
 = 268,

76 
	mT_IF
 = 269,

77 
	mT_ENDIF
 = 270,

78 
	mT_DEPENDS
 = 271,

79 
	mT_REQUIRES
 = 272,

80 
	mT_OPTIONAL
 = 273,

81 
	mT_PROMPT
 = 274,

82 
	mT_DEFAULT
 = 275,

83 
	mT_TRISTATE
 = 276,

84 
	mT_DEF_TRISTATE
 = 277,

85 
	mT_BOOLEAN
 = 278,

86 
	mT_DEF_BOOLEAN
 = 279,

87 
	mT_STRING
 = 280,

88 
	mT_INT
 = 281,

89 
	mT_HEX
 = 282,

90 
	mT_WORD
 = 283,

91 
	mT_WORD_QUOTE
 = 284,

92 
	mT_UNEQUAL
 = 285,

93 
	mT_EOF
 = 286,

94 
	mT_EOL
 = 287,

95 
	mT_CLOSE_PAREN
 = 288,

96 
	mT_OPEN_PAREN
 = 289,

97 
	mT_ON
 = 290,

98 
	mT_SELECT
 = 291,

99 
	mT_RANGE
 = 292,

100 
	mT_OR
 = 293,

101 
	mT_AND
 = 294,

102 
	mT_EQUAL
 = 295,

103 
	mT_NOT
 = 296

106 
	#T_MAINMENU
 258

	)

107 
	#T_MENU
 259

	)

108 
	#T_ENDMENU
 260

	)

109 
	#T_SOURCE
 261

	)

110 
	#T_CHOICE
 262

	)

111 
	#T_ENDCHOICE
 263

	)

112 
	#T_COMMENT
 264

	)

113 
	#T_CONFIG
 265

	)

114 
	#T_MENUCONFIG
 266

	)

115 
	#T_HELP
 267

	)

116 
	#T_HELPTEXT
 268

	)

117 
	#T_IF
 269

	)

118 
	#T_ENDIF
 270

	)

119 
	#T_DEPENDS
 271

	)

120 
	#T_REQUIRES
 272

	)

121 
	#T_OPTIONAL
 273

	)

122 
	#T_PROMPT
 274

	)

123 
	#T_DEFAULT
 275

	)

124 
	#T_TRISTATE
 276

	)

125 
	#T_DEF_TRISTATE
 277

	)

126 
	#T_BOOLEAN
 278

	)

127 
	#T_DEF_BOOLEAN
 279

	)

128 
	#T_STRING
 280

	)

129 
	#T_INT
 281

	)

130 
	#T_HEX
 282

	)

131 
	#T_WORD
 283

	)

132 
	#T_WORD_QUOTE
 284

	)

133 
	#T_UNEQUAL
 285

	)

134 
	#T_EOF
 286

	)

135 
	#T_EOL
 287

	)

136 
	#T_CLOSE_PAREN
 288

	)

137 
	#T_OPEN_PAREN
 289

	)

138 
	#T_ON
 290

	)

139 
	#T_SELECT
 291

	)

140 
	#T_RANGE
 292

	)

141 
	#T_OR
 293

	)

142 
	#T_AND
 294

	)

143 
	#T_EQUAL
 295

	)

144 
	#T_NOT
 296

	)

157 
	~<˘y≥.h
>

158 
	~<°d¨g.h
>

159 
	~<°dio.h
>

160 
	~<°dlib.h
>

161 
	~<°rög.h
>

162 
	~<°dboﬁ.h
>

164 
	#¥ötd
(
mask
, 
fmt
...Ëi‡(
cdebug
 & (mask)Ë
	`¥ötf
(fmt)

	)

166 
	#PRINTD
 0x0001

	)

167 
	#DEBUG_PARSE
 0x0002

	)

169 
	gcdebug
 = 
PRINTD
;

171 
zc⁄Êex
();

172 
zc⁄Âröt
(c⁄° *
îr
, ...);

173 
zc⁄„º‹
(c⁄° *
îr
);

174 
boﬁ
 
zc⁄f_ídtokí
(
tokí
, 
°¨âokí
, 
ídtokí
);

176 
symbﬁ
 *
	gsymbﬁ_hash
[257];

178 
	#YYERROR_VERBOSE


	)

182 #i‚de‡
YYDEBUG


183 
	#YYDEBUG
 0

	)

187 #ifde‡
YYERROR_VERBOSE


188 #unde‡
YYERROR_VERBOSE


189 
	#YYERROR_VERBOSE
 1

	)

191 
	#YYERROR_VERBOSE
 0

	)

194 #i‡! 
deföed
 (
YYSTYPE
Ë&& ! deföed (
YYSTYPE_IS_DECLARED
)

196 
	uYYSTYPE
 {

197 
	mtokí
;

198 *
	m°rög
;

199 
symbﬁ
 *
	msymbﬁ
;

200 
ex¥
 *
	mex¥
;

201 
míu
 *
	mmíu
;

202 } 
	tYYSTYPE
;

205 
	#yy°y≥
 
YYSTYPE


	)

206 
	#YYSTYPE_IS_DECLARED
 1

	)

207 
	#YYSTYPE_IS_TRIVIAL
 1

	)

215 
	#LKC_DIRECT_LINK


	)

216 
	~"lkc.h
"

222 #i‡! 
deföed
 (
yyovîÊow
Ë|| 
YYERROR_VERBOSE


226 #i‡
YYSTACK_USE_ALLOCA


227 
	#YYSTACK_ALLOC
 
Æloˇ


	)

229 #i‚de‡
YYSTACK_USE_ALLOCA


230 #i‡
deföed
 (
Æloˇ
Ë|| deföed (
_ALLOCA_H
)

231 
	#YYSTACK_ALLOC
 
Æloˇ


	)

233 #ifde‡
__GNUC__


234 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

240 #ifde‡
YYSTACK_ALLOC


242 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

244 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

245 
	~<°dlib.h
>

246 
	#YYSIZE_T
 
size_t


	)

248 
	#YYSTACK_ALLOC
 
mÆloc


	)

249 
	#YYSTACK_FREE
 
‰ì


	)

254 #i‡(! 
deföed
 (
yyovîÊow
) \

255 && (! 
deföed
 (
__˝lu•lus
) \

256 || (
	gYYSTYPE_IS_TRIVIAL
)))

259 
	uyyÆloc


261 
	myyss
;

262 
YYSTYPE
 
	myyvs
;

266 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

270 
	#YYSTACK_BYTES
(
N
) \

271 ((
N
Ë* ( (Ë+  (
YYSTYPE
)) \

272 + 
YYSTACK_GAP_MAXIMUM
)

	)

276 #i‚de‡
YYCOPY


277 #i‡1 < 
__GNUC__


278 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

279 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

281 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

284 
YYSIZE_T
 
yyi
; \

285 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

286 (
To
)[
yyi
] = (
From
)[yyi]; \

288 0)

	)

297 
	#YYSTACK_RELOCATE
(
Sèck
) \

300 
YYSIZE_T
 
yy√wbyãs
; \

301 
	`YYCOPY
 (&
yy±r
->
Sèck
, Sèck, 
yysize
); \

302 
Sèck
 = &
yy±r
->Stack; \

303 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

304 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

306 0)

	)

310 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

311 sig√d 
	tyysig√d_ch¨
;

313 
	tyysig√d_ch¨
;

317 
	#YYFINAL
 2

	)

319 
	#YYLAST
 201

	)

322 
	#YYNTOKENS
 42

	)

324 
	#YYNNTS
 41

	)

326 
	#YYNRULES
 104

	)

328 
	#YYNSTATES
 182

	)

331 
	#YYUNDEFTOK
 2

	)

332 
	#YYMAXUTOK
 296

	)

334 
	#YYTRANSLATE
(
YYX
) \

335 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

338 c⁄° 
	gyyå™¶©e
[] =

372 #i‡
YYDEBUG


375 c⁄° 
	gyy¥hs
[] =

391 c⁄° 
yysig√d_ch¨
 
	gyyrhs
[] =

428 c⁄° 
	gyyæöe
[] =

444 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE


447 c⁄° *c⁄° 
	gyyäame
[] =

468 #ifde‡
YYPRINT


471 c⁄° 
	gyytoknum
[] =

482 c⁄° 
	gyyr1
[] =

498 c⁄° 
	gyyr2
[] =

516 c⁄° 
	gyydeÁ˘
[] =

540 c⁄° 
	gyydefgŸo
[] =

551 
	#YYPACT_NINF
 -99

	)

552 c⁄° 
	gyy∑˘
[] =

576 c⁄° 
	gyypgŸo
[] =

589 
	#YYTABLE_NINF
 -68

	)

590 c⁄° 
	gyyèbÀ
[] =

615 c⁄° 
	gyycheck
[] =

642 c⁄° 
	gyy°os
[] =

665 #i‡! 
deföed
 (
YYSIZE_T
Ë&& deföed (
__SIZE_TYPE__
)

666 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

668 #i‡! 
deföed
 (
YYSIZE_T
Ë&& deföed (
size_t
)

669 
	#YYSIZE_T
 
size_t


	)

671 #i‡! 
deföed
 (
YYSIZE_T
)

672 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

673 
	~<°ddef.h
>

674 
	#YYSIZE_T
 
size_t


	)

677 #i‡! 
deföed
 (
YYSIZE_T
)

678 
	#YYSIZE_T
 

	)

681 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

682 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

683 
	#YYEMPTY
 (-2)

	)

684 
	#YYEOF
 0

	)

686 
	#YYACCEPT
 
yyac˚±œb


	)

687 
	#YYABORT
 
yyab‹éab


	)

688 
	#YYERROR
 
yyîæab1


	)

695 
	#YYFAIL
 
yyîæab


	)

697 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

699 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

701 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

703 
yych¨
 = (
Tokí
); \

704 
yylvÆ
 = (
VÆue
); \

705 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

706 
YYPOPSTACK
; \

707 
yybackup
; \

711 
	`yyîr‹
 ("syntaxÉrror: cannot back up");\

712 
YYERROR
; \

714 0)

	)

716 
	#YYTERROR
 1

	)

717 
	#YYERRCODE
 256

	)

722 #i‚de‡
YYLLOC_DEFAULT


723 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

724 
Cuºít
.
fú°_löe
 = 
Rhs
[1].first_line; \

725 
Cuºít
.
fú°_cﬁumn
 = 
Rhs
[1].first_column; \

726 
Cuºít
.
œ°_löe
 = 
Rhs
[
N
].last_line; \

727 
Cuºít
.
œ°_cﬁumn
 = 
Rhs
[
N
].œ°_cﬁumn;

	)

732 #ifde‡
YYLEX_PARAM


733 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

735 
	#YYLEX
 
	`yyÀx
 ()

	)

739 #i‡
YYDEBUG


741 #i‚de‡
YYFPRINTF


742 
	~<°dio.h
>

743 
	#YYFPRINTF
 
Ârötf


	)

746 
	#YYDPRINTF
(
Args
) \

748 i‡(
yydebug
) \

749 
YYFPRINTF
 
Args
; \

750 } 0)

	)

752 
	#YYDSYMPRINT
(
Args
) \

754 i‡(
yydebug
) \

755 
yysym¥öt
 
Args
; \

756 } 0)

	)

758 
	#YYDSYMPRINTF
(
TôÀ
, 
Tokí
, 
VÆue
, 
Loˇti⁄
) \

760 i‡(
yydebug
) \

762 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

763 
	`yysym¥öt
 (
°dîr
, \

764 
Tokí
, 
VÆue
); \

765 
	`YYFPRINTF
 (
°dîr
, "\n"); \

767 } 0)

	)

774 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

776 
	$yy_°ack_¥öt
 (*
bŸtom
, *
t›
)

779 
	$yy_°ack_¥öt
 (
bŸtom
, 
t›
)

780 *
bŸtom
;

781 *
t›
;

784 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

785  ; 
bŸtom
 <
t›
; ++bottom)

786 
	`YYFPRINTF
 (
°dîr
, " %d", *
bŸtom
);

787 
	`YYFPRINTF
 (
°dîr
, "\n");

788 
	}
}

790 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

792 i‡(
yydebug
) \

793 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

794 } 0)

	)

801 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

803 
	$yy_ªdu˚_¥öt
 (
yyruÀ
)

806 
	$yy_ªdu˚_¥öt
 (
yyruÀ
)

807 
yyruÀ
;

810 
yyi
;

811 
yylöío
 = 
yyæöe
[
yyruÀ
];

812 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %u), ",

813 
yyruÀ
 - 1, 
yylöío
);

815 
yyi
 = 
yy¥hs
[
yyruÀ
]; 0 <
yyrhs
[yyi]; yyi++)

816 
	`YYFPRINTF
 (
°dîr
, "%†", 
yyäame
 [
yyrhs
[
yyi
]]);

817 
	`YYFPRINTF
 (
°dîr
, "-> %s\n", 
yyäame
 [
yyr1
[
yyruÀ
]]);

818 
	}
}

820 
	#YY_REDUCE_PRINT
(
RuÀ
) \

822 i‡(
yydebug
) \

823 
	`yy_ªdu˚_¥öt
 (
RuÀ
); \

824 } 0)

	)

828 
	gyydebug
;

830 
	#YYDPRINTF
(
Args
)

	)

831 
	#YYDSYMPRINT
(
Args
)

	)

832 
	#YYDSYMPRINTF
(
TôÀ
, 
Tokí
, 
VÆue
, 
Loˇti⁄
)

	)

833 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

834 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

839 #i‚def 
YYINITDEPTH


840 
	#YYINITDEPTH
 200

	)

850 #i‡
YYMAXDEPTH
 == 0

851 #unde‡
YYMAXDEPTH


854 #i‚de‡
YYMAXDEPTH


855 
	#YYMAXDEPTH
 10000

	)

860 #i‡
YYERROR_VERBOSE


862 #i‚de‡
yy°æí


863 #i‡
deföed
 (
__GLIBC__
Ë&& deföed (
_STRING_H
)

864 
	#yy°æí
 
°æí


	)

867 
	gYYSIZE_T


868 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

869 
	$yy°æí
 (c⁄° *
yy°r
)

871 
	$yy°æí
 (
yy°r
)

872 c⁄° *
yy°r
;

875 c⁄° *
yys
 = 
yy°r
;

877 *
yys
++ != '\0')

880  
yys
 - 
yy°r
 - 1;

881 
	}
}

885 #i‚de‡
yy°p˝y


886 #i‡
deföed
 (
__GLIBC__
Ë&& deföed (
_STRING_H
Ë&& deföed (
_GNU_SOURCE
)

887 
	#yy°p˝y
 
°p˝y


	)

892 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

893 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

895 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

896 *
yyde°
;

897 c⁄° *
yy§c
;

900 *
yyd
 = 
yyde°
;

901 c⁄° *
yys
 = 
yy§c
;

903 (*
yyd
++ = *
yys
++) != '\0')

906  
yyd
 - 1;

907 
	}
}

915 #i‡
YYDEBUG


920 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

922 
	$yysym¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

925 
	$yysym¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

926 
FILE
 *
yyouçut
;

927 
yyty≥
;

928 
YYSTYPE
 *
yyvÆuï
;

932 (Ë
yyvÆuï
;

934 i‡(
yyty≥
 < 
YYNTOKENS
)

936 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

937 #ifde‡
YYPRINT


938 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

942 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

944 
yyty≥
)

949 
	`YYFPRINTF
 (
yyouçut
, ")");

950 
	}
}

957 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

959 
	$yyde°ru˘
 (
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

962 
	$yyde°ru˘
 (
yyty≥
, 
yyvÆuï
)

963 
yyty≥
;

964 
YYSTYPE
 *
yyvÆuï
;

968 (Ë
yyvÆuï
;

970 
yyty≥
)

976 
	}
}

981 #ifde‡
YYPARSE_PARAM


982 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

983 
yy∑r£
 (*
YYPARSE_PARAM
);

985 
yy∑r£
 ();

988 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

989 
yy∑r£
 ();

991 
yy∑r£
 ();

998 
	gyych¨
;

1001 
YYSTYPE
 
	gyylvÆ
;

1004 
	gyy√ºs
;

1012 #ifde‡
YYPARSE_PARAM


1013 #i‡
deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

1014 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1016 
	$yy∑r£
 (
YYPARSE_PARAM
)

1017 *
YYPARSE_PARAM
;

1020 #i‡
	`deföed
 (
__STDC__
Ë|| deföed (
__˝lu•lus
)

1022 
	$yy∑r£
 ()

1025 
	$yy∑r£
 ()

1031 
yy°©e
;

1032 
yyn
;

1033 
yyªsu…
;

1035 
yyîr°©us
;

1037 
yytokí
 = 0;

1048 
yysß
[
YYINITDEPTH
];

1049 *
yyss
 = 
yysß
;

1050 *
yys•
;

1053 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1054 
YYSTYPE
 *
yyvs
 = 
yyvß
;

1055 
YYSTYPE
 *
yyv•
;

1059 
	#YYPOPSTACK
 (
yyv•
--, 
yys•
--)

	)

1061 
YYSIZE_T
 
yy°acksize
 = 
YYINITDEPTH
;

1065 
YYSTYPE
 
yyvÆ
;

1070 
yyÀn
;

1072 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1074 
yy°©e
 = 0;

1075 
yyîr°©us
 = 0;

1076 
yy√ºs
 = 0;

1077 
yych¨
 = 
YYEMPTY
;

1084 
yys•
 = 
yyss
;

1085 
yyv•
 = 
yyvs
;

1087 
yy£t°©e
;

1092 
yy√w°©e
:

1096 
yys•
++;

1098 
yy£t°©e
:

1099 *
yys•
 = 
yy°©e
;

1101 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1104 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1106 #ifde‡
yyovîÊow


1111 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1112 *
yyss1
 = 
yyss
;

1119 
	`yyovîÊow
 ("parser stack overflow",

1120 &
yyss1
, 
yysize
 *  (*
yys•
),

1121 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1123 &
yy°acksize
);

1125 
yyss
 = 
yyss1
;

1126 
yyvs
 = 
yyvs1
;

1129 #i‚de‡
YYSTACK_RELOCATE


1130 
yyovîÊowœb
;

1133 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1134 
yyovîÊowœb
;

1135 
yy°acksize
 *= 2;

1136 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1137 
yy°acksize
 = 
YYMAXDEPTH
;

1140 *
yyss1
 = 
yyss
;

1141 
yyÆloc
 *
yy±r
 =

1142 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1143 i‡(! 
yy±r
)

1144 
yyovîÊowœb
;

1145 
	`YYSTACK_RELOCATE
 (
yyss
);

1146 
	`YYSTACK_RELOCATE
 (
yyvs
);

1148 #unde‡
YYSTACK_RELOCATE


1149 i‡(
yyss1
 !
yysß
)

1150 
	`YYSTACK_FREE
 (
yyss1
);

1155 
yys•
 = 
yyss
 + 
yysize
 - 1;

1156 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1159 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1160 (Ë
yy°acksize
));

1162 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1163 
YYABORT
;

1166 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1168 
yybackup
;

1173 
yybackup
:

1181 
yyn
 = 
yy∑˘
[
yy°©e
];

1182 i‡(
yyn
 =
YYPACT_NINF
)

1183 
yydeÁu…
;

1188 i‡(
yych¨
 =
YYEMPTY
)

1190 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1191 
yych¨
 = 
YYLEX
;

1194 i‡(
yych¨
 <
YYEOF
)

1196 
yych¨
 = 
yytokí
 = 
YYEOF
;

1197 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1201 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1202 
	`YYDSYMPRINTF
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1207 
yyn
 +
yytokí
;

1208 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1209 
yydeÁu…
;

1210 
yyn
 = 
yyèbÀ
[yyn];

1211 i‡(
yyn
 <= 0)

1213 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1214 
yyîæab
;

1215 
yyn
 = -yyn;

1216 
yyªdu˚
;

1219 i‡(
yyn
 =
YYFINAL
)

1220 
YYACCEPT
;

1223 
	`YYDPRINTF
 ((
°dîr
, "Shi·ögÅokí %s, ", 
yyäame
[
yytokí
]));

1226 i‡(
yych¨
 !
YYEOF
)

1227 
yych¨
 = 
YYEMPTY
;

1229 *++
yyv•
 = 
yylvÆ
;

1234 i‡(
yyîr°©us
)

1235 
yyîr°©us
--;

1237 
yy°©e
 = 
yyn
;

1238 
yy√w°©e
;

1244 
yydeÁu…
:

1245 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1246 i‡(
yyn
 == 0)

1247 
yyîæab
;

1248 
yyªdu˚
;

1254 
yyªdu˚
:

1256 
yyÀn
 = 
yyr2
[
yyn
];

1266 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1269 
	`YY_REDUCE_PRINT
 (
yyn
);

1270 
yyn
)

1274 { 
	`zc⁄Âröt
("unexpected 'endmenu' statement"); ;}

1279 { 
	`zc⁄Âröt
("unexpected 'endif' statement"); ;}

1284 { 
	`zc⁄Âröt
("unexpected 'endchoice' statement"); ;}

1289 { 
	`zc⁄Âröt
("sy¡axÉº‹"); 
yyîrok
; ;}

1295 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
yyv•
[-1].
°rög
, 0);

1296 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

1297 
	`míu_add_íåy
(
sym
);

1298 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:c⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
yyv•
[-1].
°rög
);

1305 
	`míu_íd_íåy
();

1306 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1313 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
yyv•
[-1].
°rög
, 0);

1314 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

1315 
	`míu_add_íåy
(
sym
);

1316 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míuc⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
yyv•
[-1].
°rög
);

1323 i‡(
cuºít_íåy
->
¥om±
)

1324 
cuºít_íåy
->
¥om±
->
ty≥
 = 
P_MENU
;

1326 
	`zc⁄Âröt
("warning: menuconfig statement withoutÖrompt");

1327 
	`míu_íd_íåy
();

1328 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1335 
	`míu_£t_ty≥
(
S_TRISTATE
);

1336 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:åi°©e\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1343 
	`míu_add_ex¥
(
P_DEFAULT
, 
yyv•
[-2].
ex¥
, yyvsp[-1].expr);

1344 
	`míu_£t_ty≥
(
S_TRISTATE
);

1345 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:def_boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1352 
	`míu_£t_ty≥
(
S_BOOLEAN
);

1353 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1360 
	`míu_add_ex¥
(
P_DEFAULT
, 
yyv•
[-2].
ex¥
, yyvsp[-1].expr);

1361 
	`míu_£t_ty≥
(
S_BOOLEAN
);

1362 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:def_boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1369 
	`míu_£t_ty≥
(
S_INT
);

1370 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:öt\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1377 
	`míu_£t_ty≥
(
S_HEX
);

1378 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:hex\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1385 
	`míu_£t_ty≥
(
S_STRING
);

1386 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:°rög\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1393 
	`míu_add_¥om±
(
P_PROMPT
, 
yyv•
[-2].
°rög
, yyv•[-1].
ex¥
);

1394 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1401 
	`míu_add_ex¥
(
P_DEFAULT
, 
yyv•
[-2].
ex¥
, yyvsp[-1].expr);

1402 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:deÁu…\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1409 
	`míu_add_symbﬁ
(
P_SELECT
, 
	`sym_lookup
(
yyv•
[-2].
°rög
, 0), yyv•[-1].
ex¥
);

1410 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:£À˘\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1417 
	`míu_add_ex¥
(
P_RANGE
, 
	`ex¥_Æloc_comp
(
E_RANGE
,
yyv•
[-3].
symbﬁ
, yyv•[-2].symbﬁ), yyv•[-1].
ex¥
);

1418 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ønge\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1425 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
NULL
, 0);

1426 
sym
->
Êags
 |
SYMBOL_CHOICE
;

1427 
	`míu_add_íåy
(
sym
);

1428 
	`míu_add_ex¥
(
P_CHOICE
, 
NULL
, NULL);

1429 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:choi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1436 
	`míu_íd_íåy
();

1437 
	`míu_add_míu
();

1444 i‡(
	`zc⁄f_ídtokí
(
yyv•
[0].
tokí
, 
T_CHOICE
, 
T_ENDCHOICE
)) {

1445 
	`míu_íd_míu
();

1446 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídchoi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1454 
	`¥ötf
("%s:%d: missög 'ídchoi˚' f‹Åhi†'choi˚' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

1455 
zc⁄‚îrs
++;

1462 
	`míu_add_¥om±
(
P_PROMPT
, 
yyv•
[-2].
°rög
, yyv•[-1].
ex¥
);

1463 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1470 
	`míu_£t_ty≥
(
S_TRISTATE
);

1471 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:åi°©e\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1478 
	`míu_£t_ty≥
(
S_BOOLEAN
);

1479 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1486 
cuºít_íåy
->
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

1487 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:›ti⁄Æ\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1494 
	`míu_add_symbﬁ
(
P_DEFAULT
, 
	`sym_lookup
(
yyv•
[-2].
°rög
, 0), yyv•[-1].
ex¥
);

1495 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:deÁu…\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1502 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:if\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1503 
	`míu_add_íåy
(
NULL
);

1504 
	`míu_add_dï
(
yyv•
[-1].
ex¥
);

1505 
	`míu_íd_íåy
();

1506 
	`míu_add_míu
();

1513 i‡(
	`zc⁄f_ídtokí
(
yyv•
[0].
tokí
, 
T_IF
, 
T_ENDIF
)) {

1514 
	`míu_íd_míu
();

1515 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídif\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1523 
	`¥ötf
("%s:%d: missög 'ídif' f‹Åhi†'if' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

1524 
zc⁄‚îrs
++;

1531 
	`míu_add_íåy
(
NULL
);

1532 
	`míu_add_¥›
(
P_MENU
, 
yyv•
[-1].
°rög
, 
NULL
, NULL);

1533 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1540 
	`míu_íd_íåy
();

1541 
	`míu_add_míu
();

1548 i‡(
	`zc⁄f_ídtokí
(
yyv•
[0].
tokí
, 
T_MENU
, 
T_ENDMENU
)) {

1549 
	`míu_íd_míu
();

1550 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídmíu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1558 
	`¥ötf
("%s:%d: missög 'ídmíu' f‹Åhi†'míu' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

1559 
zc⁄‚îrs
++;

1565 { 
	`zc⁄Âröt
("övÆid míu o±i⁄"); 
yyîrok
; ;}

1571 
yyvÆ
.
°rög
 = 
yyv•
[-1].string;

1572 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:sour˚ %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
yyv•
[-1].
°rög
);

1579 
	`zc⁄f_√xtfûe
(
yyv•
[0].
°rög
);

1586 
	`míu_add_íåy
(
NULL
);

1587 
	`míu_add_¥›
(
P_COMMENT
, 
yyv•
[-1].
°rög
, 
NULL
, NULL);

1588 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:commít\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1595 
	`míu_íd_íåy
();

1602 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:hñp\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1603 
	`zc⁄f_°¨thñp
();

1610 
cuºít_íåy
->
sym
->
hñp
 = 
yyv•
[0].
°rög
;

1617 
	`míu_add_dï
(
yyv•
[-1].
ex¥
);

1618 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:dïíd†⁄\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1625 
	`míu_add_dï
(
yyv•
[-1].
ex¥
);

1626 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:dïíds\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1633 
	`míu_add_dï
(
yyv•
[-1].
ex¥
);

1634 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ªquúes\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

1641 
	`míu_add_¥›
(
P_PROMPT
, 
yyv•
[-1].
°rög
, 
NULL
, yyv•[0].
ex¥
);

1647 { 
yyvÆ
.
tokí
 = 
T_ENDMENU
; ;}

1652 { 
yyvÆ
.
tokí
 = 
T_ENDCHOICE
; ;}

1657 { 
yyvÆ
.
tokí
 = 
T_ENDIF
; ;}

1662 { 
yyvÆ
.
ex¥
 = 
NULL
; ;}

1667 { 
yyvÆ
.
ex¥
 = 
yyv•
[0].expr; ;}

1672 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_symbﬁ
(
yyv•
[0].
symbﬁ
); ;}

1677 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
yyv•
[-2].
symbﬁ
, yyvsp[0].symbol); ;}

1682 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
yyv•
[-2].
symbﬁ
, yyvsp[0].symbol); ;}

1687 { 
yyvÆ
.
ex¥
 = 
yyv•
[-1].expr; ;}

1692 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
yyv•
[0].expr); ;}

1697 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_two
(
E_OR
, 
yyv•
[-2].expr, yyvsp[0].expr); ;}

1702 { 
yyvÆ
.
ex¥
 = 
	`ex¥_Æloc_two
(
E_AND
, 
yyv•
[-2].expr, yyvsp[0].expr); ;}

1707 { 
yyvÆ
.
symbﬁ
 = 
	`sym_lookup
(
yyv•
[0].
°rög
, 0); 
	`‰ì
(yyvsp[0].string); ;}

1712 { 
yyvÆ
.
symbﬁ
 = 
	`sym_lookup
(
yyv•
[0].
°rög
, 1); 
	`‰ì
(yyvsp[0].string); ;}

1721 
yyv•
 -
yyÀn
;

1722 
yys•
 -
yyÀn
;

1725 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1727 *++
yyv•
 = 
yyvÆ
;

1734 
yyn
 = 
yyr1
[yyn];

1736 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1737 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1738 
yy°©e
 = 
yyèbÀ
[yystate];

1740 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1742 
yy√w°©e
;

1748 
yyîæab
:

1750 i‡(!
yyîr°©us
)

1752 ++
yy√ºs
;

1753 #i‡
YYERROR_VERBOSE


1754 
yyn
 = 
yy∑˘
[
yy°©e
];

1756 i‡(
YYPACT_NINF
 < 
yyn
 && yy¿< 
YYLAST
)

1758 
YYSIZE_T
 
yysize
 = 0;

1759 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1760 *
yymsg
;

1761 
yyx
, 
yycou¡
;

1763 
yycou¡
 = 0;

1766 
yyx
 = 
yyn
 < 0 ? -yyn : 0;

1767 
yyx
 < (Ë( (
yyäame
) /  (*)); yyx++)

1768 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1769 
yysize
 +
	`yy°æí
 (
yyäame
[
yyx
]Ë+ 15, 
yycou¡
++;

1770 
yysize
 +
	`yy°æí
 ("syntaxÉrror, unexpected ") + 1;

1771 
yysize
 +
	`yy°æí
 (
yyäame
[
yyty≥
]);

1772 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yysize
);

1773 i‡(
yymsg
 != 0)

1775 *
yyp
 = 
	`yy°p˝y
 (
yymsg
, "syntaxÉrror, unexpected ");

1776 
yyp
 = 
	`yy°p˝y
 (yyp, 
yyäame
[
yyty≥
]);

1778 i‡(
yycou¡
 < 5)

1780 
yycou¡
 = 0;

1781 
yyx
 = 
yyn
 < 0 ? -yyn : 0;

1782 
yyx
 < (Ë( (
yyäame
) /  (*));

1783 
yyx
++)

1784 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1786 c⁄° *
yyq
 = ! 
yycou¡
 ? ",Éxpecting " : " or ";

1787 
yyp
 = 
	`yy°p˝y
 (yyp, 
yyq
);

1788 
yyp
 = 
	`yy°p˝y
 (yyp, 
yyäame
[
yyx
]);

1789 
yycou¡
++;

1792 
	`yyîr‹
 (
yymsg
);

1793 
	`YYSTACK_FREE
 (
yymsg
);

1796 
	`yyîr‹
 ("syntaxÉrror;álso virtual memoryÉxhausted");

1800 
	`yyîr‹
 ("syntaxÉrror");

1805 i‡(
yyîr°©us
 == 3)

1811 i‡(
yych¨
 =
YYEOF
)

1814 
YYPOPSTACK
;

1816 
yyss
 < 
yys•
)

1818 
	`YYDSYMPRINTF
 ("Eº‹:Ö›pög", 
yy°os
[*
yys•
], 
yyv•
, 
yyl•
);

1819 
	`yyde°ru˘
 (
yy°os
[*
yys•
], 
yyv•
);

1820 
YYPOPSTACK
;

1822 
YYABORT
;

1825 
	`YYDSYMPRINTF
 ("Eº‹: disˇrdög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1826 
	`yyde°ru˘
 (
yytokí
, &
yylvÆ
);

1827 
yych¨
 = 
YYEMPTY
;

1833 
yyîæab1
;

1839 
yyîæab1
:

1840 
yyîr°©us
 = 3;

1844 
yyn
 = 
yy∑˘
[
yy°©e
];

1845 i‡(
yyn
 !
YYPACT_NINF
)

1847 
yyn
 +
YYTERROR
;

1848 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1850 
yyn
 = 
yyèbÀ
[yyn];

1851 i‡(0 < 
yyn
)

1857 i‡(
yys•
 =
yyss
)

1858 
YYABORT
;

1860 
	`YYDSYMPRINTF
 ("Eº‹:Ö›pög", 
yy°os
[*
yys•
], 
yyv•
, 
yyl•
);

1861 
	`yyde°ru˘
 (
yy°os
[
yy°©e
], 
yyv•
);

1862 
yyv•
--;

1863 
yy°©e
 = *--
yys•
;

1865 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1868 i‡(
yyn
 =
YYFINAL
)

1869 
YYACCEPT
;

1871 
	`YYDPRINTF
 ((
°dîr
, "ShiftingÉrrorÅoken, "));

1873 *++
yyv•
 = 
yylvÆ
;

1876 
yy°©e
 = 
yyn
;

1877 
yy√w°©e
;

1883 
yyac˚±œb
:

1884 
yyªsu…
 = 0;

1885 
yyªtu∫
;

1890 
yyab‹éab
:

1891 
yyªsu…
 = 1;

1892 
yyªtu∫
;

1894 #i‚de‡
yyovîÊow


1898 
yyovîÊowœb
:

1899 
	`yyîr‹
 ("parser stack overflow");

1900 
yyªsu…
 = 2;

1904 
yyªtu∫
:

1905 #i‚de‡
yyovîÊow


1906 i‡(
yyss
 !
yysß
)

1907 
	`YYSTACK_FREE
 (
yyss
);

1909  
yyªsu…
;

1910 
	}
}

1916 
	$c⁄f_∑r£
(c⁄° *
«me
)

1918 
symbﬁ
 *
sym
;

1919 
i
;

1921 
	`zc⁄f_öôsˇn
(
«me
);

1923 
	`sym_öô
();

1924 
	`míu_öô
();

1925 
moduÀs_sym
 = 
	`sym_lookup
("MODULES", 0);

1926 
roŸmíu
.
¥om±
 = 
	`míu_add_¥›
(
P_MENU
, "Löux Kî√»C⁄figuøti⁄", 
NULL
, NULL);

1929 
	`zc⁄Â¨£
();

1930 i‡(
zc⁄‚îrs
)

1931 
	`exô
(1);

1932 
	`míu_föÆize
(&
roŸmíu
);

1933 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

1934 i‡(!(
sym
->
Êags
 & 
SYMBOL_CHECKED
Ë&& 
	`sym_check_dïs
(sym))

1935 
	`¥ötf
("\n");

1937 
sym
->
Êags
 |
SYMBOL_CHECK_DONE
;

1940 
sym_ch™ge_cou¡
 = 1;

1941 
	}
}

1943 c⁄° *
	$zc⁄f_tokí«me
(
tokí
)

1945 
tokí
) {

1946 
T_MENU
:  "menu";

1947 
T_ENDMENU
:  "endmenu";

1948 
T_CHOICE
:  "choice";

1949 
T_ENDCHOICE
:  "endchoice";

1950 
T_IF
:  "if";

1951 
T_ENDIF
:  "endif";

1954 
	}
}

1956 
boﬁ
 
	$zc⁄f_ídtokí
(
tokí
, 
°¨âokí
, 
ídtokí
)

1958 i‡(
tokí
 !
ídtokí
) {

1959 
	`zc⁄Âröt
("u√x≥˘ed '%s' wôhö %†block", 
	`zc⁄f_tokí«me
(
tokí
), zc⁄f_tokí«me(
°¨âokí
));

1960 
zc⁄‚îrs
++;

1961  
Ál£
;

1963 i‡(
cuºít_míu
->
fûe
 !
cuºít_fûe
) {

1964 
	`zc⁄Âröt
("'%s' i¿dif„ª¡ fûêth™ '%s'", 
	`zc⁄f_tokí«me
(
tokí
), zc⁄f_tokí«me(
°¨âokí
));

1965 
	`zc⁄Âröt
("loˇti⁄ o‡thê'%s'", 
	`zc⁄f_tokí«me
(
°¨âokí
));

1966 
zc⁄‚îrs
++;

1967  
Ál£
;

1969  
åue
;

1970 
	}
}

1972 
	$zc⁄Âröt
(c⁄° *
îr
, ...)

1974 
va_li°
 
≠
;

1976 
	`Ârötf
(
°dîr
, "%s:%d: ", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
() + 1);

1977 
	`va_°¨t
(
≠
, 
îr
);

1978 
	`vÂrötf
(
°dîr
, 
îr
, 
≠
);

1979 
	`va_íd
(
≠
);

1980 
	`Ârötf
(
°dîr
, "\n");

1981 
	}
}

1983 
	$zc⁄„º‹
(c⁄° *
îr
)

1985 
	`Ârötf
(
°dîr
, "%s:%d: %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(Ë+ 1, 
îr
);

1986 
	}
}

1988 
	$¥öt_quŸed_°rög
(
FILE
 *
out
, c⁄° *
°r
)

1990 c⁄° *
p
;

1991 
Àn
;

1993 
	`putc
('"', 
out
);

1994 (
p
 = 
	`°rchr
(
°r
, '"'))) {

1995 
Àn
 = 
p
 - 
°r
;

1996 i‡(
Àn
)

1997 
	`Ârötf
(
out
, "%.*s", 
Àn
, 
°r
);

1998 
	`Âuts
("\\\"", 
out
);

1999 
°r
 = 
p
 + 1;

2001 
	`Âuts
(
°r
, 
out
);

2002 
	`putc
('"', 
out
);

2003 
	}
}

2005 
	$¥öt_symbﬁ
(
FILE
 *
out
, 
míu
 *menu)

2007 
symbﬁ
 *
sym
 = 
míu
->sym;

2008 
¥›îty
 *
¥›
;

2010 i‡(
	`sym_is_choi˚
(
sym
))

2011 
	`Ârötf
(
out
, "choice\n");

2013 
	`Ârötf
(
out
, "c⁄fig %s\n", 
sym
->
«me
);

2014 
sym
->
ty≥
) {

2015 
S_BOOLEAN
:

2016 
	`Âuts
(" boﬁón\n", 
out
);

2018 
S_TRISTATE
:

2019 
	`Âuts
("Åri°©e\n", 
out
);

2021 
S_STRING
:

2022 
	`Âuts
(" såög\n", 
out
);

2024 
S_INT
:

2025 
	`Âuts
(" i¡egî\n", 
out
);

2027 
S_HEX
:

2028 
	`Âuts
(" hex\n", 
out
);

2031 
	`Âuts
(" ???\n", 
out
);

2034 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

2035 i‡(
¥›
->
míu
 != menu)

2037 
¥›
->
ty≥
) {

2038 
P_PROMPT
:

2039 
	`Âuts
("Örom± ", 
out
);

2040 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

2041 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

2042 
	`Âuts
(" i‡", 
out
);

2043 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

2045 
	`Âutc
('\n', 
out
);

2047 
P_DEFAULT
:

2048 
	`Âuts
–" deÁu… ", 
out
);

2049 
	`ex¥_Âröt
(
¥›
->
ex¥
, 
out
);

2050 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

2051 
	`Âuts
(" i‡", 
out
);

2052 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

2054 
	`Âutc
('\n', 
out
);

2056 
P_CHOICE
:

2057 
	`Âuts
(" #choi˚ vÆue\n", 
out
);

2060 
	`Ârötf
(
out
, " unknow¿¥› %d!\n", 
¥›
->
ty≥
);

2064 i‡(
sym
->
hñp
) {

2065 
Àn
 = 
	`°æí
(
sym
->
hñp
);

2066 
sym
->
hñp
[--
Àn
] == '\n')

2067 
sym
->
hñp
[
Àn
] = 0;

2068 
	`Ârötf
(
out
, " hñp\n%s\n", 
sym
->
hñp
);

2070 
	`Âutc
('\n', 
out
);

2071 
	}
}

2073 
	$zc⁄fdump
(
FILE
 *
out
)

2075 
¥›îty
 *
¥›
;

2076 
symbﬁ
 *
sym
;

2077 
míu
 *menu;

2079 
míu
 = 
roŸmíu
.
li°
;

2080 
míu
) {

2081 i‡((
sym
 = 
míu
->sym))

2082 
	`¥öt_symbﬁ
(
out
, 
míu
);

2083 i‡((
¥›
 = 
míu
->
¥om±
)) {

2084 
¥›
->
ty≥
) {

2085 
P_COMMENT
:

2086 
	`Âuts
("\ncommíà", 
out
);

2087 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

2088 
	`Âuts
("\n", 
out
);

2090 
P_MENU
:

2091 
	`Âuts
("\nmíu ", 
out
);

2092 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

2093 
	`Âuts
("\n", 
out
);

2098 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

2099 
	`Âuts
(" dïíd†", 
out
);

2100 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

2101 
	`Âutc
('\n', 
out
);

2103 
	`Âuts
("\n", 
out
);

2106 i‡(
míu
->
li°
)

2107 
míu
 = míu->
li°
;

2108 i‡(
míu
->
√xt
)

2109 
míu
 = míu->
√xt
;

2110 (
míu
 = míu->
∑ª¡
)) {

2111 i‡(
míu
->
¥om±
 && míu->¥om±->
ty≥
 =
P_MENU
)

2112 
	`Âuts
("\√ndmíu\n", 
out
);

2113 i‡(
míu
->
√xt
) {

2114 
míu
 = míu->
√xt
;

2119 
	}
}

2121 
	~"Àx.zc⁄f.c
"

2122 
	~"c⁄fd©a.c
"

2123 
	~"ex¥.c
"

2124 
	~"symbﬁ.c
"

2125 
	~"míu.c
"

	@/usr/src/rtai/base/config/kconfig/zconf.y

7 
	~<˘y≥.h
>

8 
	~<°d¨g.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<°dboﬁ.h
>

14 
	#¥ötd
(
mask
, 
fmt
...Ëi‡(
cdebug
 & (mask)Ë
	`¥ötf
(fmt)

	)

16 
	#PRINTD
 0x0001

	)

17 
	#DEBUG_PARSE
 0x0002

	)

19 
	gcdebug
 = 
PRINTD
;

21 
zc⁄Êex
();

22 
zc⁄Âröt
(c⁄° *
îr
, ...);

23 
zc⁄„º‹
(c⁄° *
îr
);

24 
boﬁ
 
zc⁄f_ídtokí
(
tokí
, 
°¨âokí
, 
ídtokí
);

26 
symbﬁ
 *
	gsymbﬁ_hash
[257];

28 
	#YYERROR_VERBOSE


	)

30 %
ex≥˘
 40

34 
tokí
;

35 *
°rög
;

36 
symbﬁ
 *symbol;

37 
ex¥
 *expr;

38 
míu
 *menu;

41 %
tokí
 
T_MAINMENU


42 %
tokí
 
T_MENU


43 %
tokí
 
T_ENDMENU


44 %
tokí
 
T_SOURCE


45 %
tokí
 
T_CHOICE


46 %
tokí
 
T_ENDCHOICE


47 %
tokí
 
T_COMMENT


48 %
tokí
 
T_CONFIG


49 %
tokí
 
T_MENUCONFIG


50 %
tokí
 
T_HELP


51 %
tokí
 <
°rög
> 
T_HELPTEXT


52 %
tokí
 
T_IF


53 %
tokí
 
T_ENDIF


54 %
tokí
 
T_DEPENDS


55 %
tokí
 
T_REQUIRES


56 %
tokí
 
T_OPTIONAL


57 %
tokí
 
T_PROMPT


58 %
tokí
 
T_DEFAULT


59 %
tokí
 
T_TRISTATE


60 %
tokí
 
T_DEF_TRISTATE


61 %
tokí
 
T_BOOLEAN


62 %
tokí
 
T_DEF_BOOLEAN


63 %
tokí
 
T_STRING


64 %
tokí
 
T_INT


65 %
tokí
 
T_HEX


66 %
tokí
 <
°rög
> 
T_WORD


67 %
tokí
 <
°rög
> 
T_WORD_QUOTE


68 %
tokí
 
T_UNEQUAL


69 %
tokí
 
T_EOF


70 %
tokí
 
T_EOL


71 %
tokí
 
T_CLOSE_PAREN


72 %
tokí
 
T_OPEN_PAREN


73 %
tokí
 
T_ON


74 %
tokí
 
T_SELECT


75 %
tokí
 
T_RANGE


77 %
À·
 
T_OR


78 %
À·
 
T_AND


79 %
À·
 
T_EQUAL
 
T_UNEQUAL


80 %
n⁄assoc
 
T_NOT


82 %
ty≥
 <
°rög
> 
¥om±


83 %
ty≥
 <
°rög
> 
sour˚


84 %
ty≥
 <
symbﬁ
> symbol

85 %
ty≥
 <
ex¥
>Éxpr

86 %
ty≥
 <
ex¥
> 
if_ex¥


87 %
ty≥
 <
tokí
> 
íd


90 
	#LKC_DIRECT_LINK


	)

91 
	~"lkc.h
"

93 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

94 
öput
:

95 | 
öput
 
block


98 
block
: 
comm⁄_block


99 | 
choi˚_°mt


100 | 
míu_°mt


101 | 
T_MAINMENU
 
¥om±
 
∆_‹_eof


102 | 
T_ENDMENU
 { 
	`zc⁄Âröt
("unexpected 'endmenu' statement"); }

103 | 
T_ENDIF
 { 
	`zc⁄Âröt
("unexpected 'endif' statement"); }

104 | 
T_ENDCHOICE
 { 
	`zc⁄Âröt
("unexpected 'endchoice' statement"); }

105 | 
îr‹
 
∆_‹_eof
 { 
	`zc⁄Âröt
("sy¡axÉº‹"); 
yyîrok
; }

108 
comm⁄_block
:

109 
if_°mt


110 | 
commít_°mt


111 | 
c⁄fig_°mt


112 | 
míuc⁄fig_°mt


113 | 
sour˚_°mt


114 | 
∆_‹_eof


120 
c⁄fig_íåy_°¨t
: 
T_CONFIG
 
T_WORD
 
T_EOL


122 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
$2
, 0);

123 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

124 
	`míu_add_íåy
(
sym
);

125 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:c⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

128 
c⁄fig_°mt
: 
c⁄fig_íåy_°¨t
 
c⁄fig_›ti⁄_li°


130 
	`míu_íd_íåy
();

131 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

134 
míuc⁄fig_íåy_°¨t
: 
T_MENUCONFIG
 
T_WORD
 
T_EOL


136 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
$2
, 0);

137 
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

138 
	`míu_add_íåy
(
sym
);

139 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míuc⁄fig %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

142 
míuc⁄fig_°mt
: 
míuc⁄fig_íåy_°¨t
 
c⁄fig_›ti⁄_li°


144 i‡(
cuºít_íåy
->
¥om±
)

145 
cuºít_íåy
->
¥om±
->
ty≥
 = 
P_MENU
;

147 
	`zc⁄Âröt
("warning: menuconfig statement withoutÖrompt");

148 
	`míu_íd_íåy
();

149 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídc⁄fig\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

152 
c⁄fig_›ti⁄_li°
:

154 | 
c⁄fig_›ti⁄_li°
 
c⁄fig_›ti⁄


155 | 
c⁄fig_›ti⁄_li°
 
dïíds


156 | 
c⁄fig_›ti⁄_li°
 
hñp


157 | 
c⁄fig_›ti⁄_li°
 
T_EOL


160 
c⁄fig_›ti⁄
: 
T_TRISTATE
 
¥om±_°mt_›t
 
T_EOL


162 
	`míu_£t_ty≥
(
S_TRISTATE
);

163 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:åi°©e\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

166 
c⁄fig_›ti⁄
: 
T_DEF_TRISTATE
 
ex¥
 
if_ex¥
 
T_EOL


168 
	`míu_add_ex¥
(
P_DEFAULT
, 
$2
, 
$3
);

169 
	`míu_£t_ty≥
(
S_TRISTATE
);

170 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:def_boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

173 
c⁄fig_›ti⁄
: 
T_BOOLEAN
 
¥om±_°mt_›t
 
T_EOL


175 
	`míu_£t_ty≥
(
S_BOOLEAN
);

176 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

179 
c⁄fig_›ti⁄
: 
T_DEF_BOOLEAN
 
ex¥
 
if_ex¥
 
T_EOL


181 
	`míu_add_ex¥
(
P_DEFAULT
, 
$2
, 
$3
);

182 
	`míu_£t_ty≥
(
S_BOOLEAN
);

183 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:def_boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

186 
c⁄fig_›ti⁄
: 
T_INT
 
¥om±_°mt_›t
 
T_EOL


188 
	`míu_£t_ty≥
(
S_INT
);

189 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:öt\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

192 
c⁄fig_›ti⁄
: 
T_HEX
 
¥om±_°mt_›t
 
T_EOL


194 
	`míu_£t_ty≥
(
S_HEX
);

195 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:hex\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

198 
c⁄fig_›ti⁄
: 
T_STRING
 
¥om±_°mt_›t
 
T_EOL


200 
	`míu_£t_ty≥
(
S_STRING
);

201 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:°rög\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

204 
c⁄fig_›ti⁄
: 
T_PROMPT
 
¥om±
 
if_ex¥
 
T_EOL


206 
	`míu_add_¥om±
(
P_PROMPT
, 
$2
, 
$3
);

207 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

210 
c⁄fig_›ti⁄
: 
T_DEFAULT
 
ex¥
 
if_ex¥
 
T_EOL


212 
	`míu_add_ex¥
(
P_DEFAULT
, 
$2
, 
$3
);

213 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:deÁu…\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

216 
c⁄fig_›ti⁄
: 
T_SELECT
 
T_WORD
 
if_ex¥
 
T_EOL


218 
	`míu_add_symbﬁ
(
P_SELECT
, 
	`sym_lookup
(
$2
, 0), 
$3
);

219 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:£À˘\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

222 
c⁄fig_›ti⁄
: 
T_RANGE
 
symbﬁ
 symbﬁ 
if_ex¥
 
T_EOL


224 
	`míu_add_ex¥
(
P_RANGE
, 
	`ex¥_Æloc_comp
(
E_RANGE
,
$2
, 
$3
), 
$4
);

225 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ønge\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

230 
choi˚
: 
T_CHOICE
 
T_EOL


232 
symbﬁ
 *
sym
 = 
	`sym_lookup
(
NULL
, 0);

233 
sym
->
Êags
 |
SYMBOL_CHOICE
;

234 
	`míu_add_íåy
(
sym
);

235 
	`míu_add_ex¥
(
P_CHOICE
, 
NULL
, NULL);

236 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:choi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

239 
choi˚_íåy
: 
choi˚
 
choi˚_›ti⁄_li°


241 
	`míu_íd_íåy
();

242 
	`míu_add_míu
();

245 
choi˚_íd
: 
íd


247 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_CHOICE
, 
T_ENDCHOICE
)) {

248 
	`míu_íd_míu
();

249 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídchoi˚\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

253 
choi˚_°mt
:

254 
choi˚_íåy
 
choi˚_block
 
choi˚_íd


255 | 
choi˚_íåy
 
choi˚_block


257 
	`¥ötf
("%s:%d: missög 'ídchoi˚' f‹Åhi†'choi˚' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

258 
zc⁄‚îrs
++;

261 
choi˚_›ti⁄_li°
:

263 | 
choi˚_›ti⁄_li°
 
choi˚_›ti⁄


264 | 
choi˚_›ti⁄_li°
 
dïíds


265 | 
choi˚_›ti⁄_li°
 
hñp


266 | 
choi˚_›ti⁄_li°
 
T_EOL


269 
choi˚_›ti⁄
: 
T_PROMPT
 
¥om±
 
if_ex¥
 
T_EOL


271 
	`míu_add_¥om±
(
P_PROMPT
, 
$2
, 
$3
);

272 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:¥om±\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

275 
choi˚_›ti⁄
: 
T_TRISTATE
 
¥om±_°mt_›t
 
T_EOL


277 
	`míu_£t_ty≥
(
S_TRISTATE
);

278 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:åi°©e\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

281 
choi˚_›ti⁄
: 
T_BOOLEAN
 
¥om±_°mt_›t
 
T_EOL


283 
	`míu_£t_ty≥
(
S_BOOLEAN
);

284 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:boﬁón\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

287 
choi˚_›ti⁄
: 
T_OPTIONAL
 
T_EOL


289 
cuºít_íåy
->
sym
->
Êags
 |
SYMBOL_OPTIONAL
;

290 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:›ti⁄Æ\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

293 
choi˚_›ti⁄
: 
T_DEFAULT
 
T_WORD
 
if_ex¥
 
T_EOL


295 
	`míu_add_symbﬁ
(
P_DEFAULT
, 
	`sym_lookup
(
$2
, 0), 
$3
);

296 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:deÁu…\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

299 
choi˚_block
:

301 | 
choi˚_block
 
comm⁄_block


306 : 
T_IF
 
ex¥
 
T_EOL


308 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:if\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

309 
	`míu_add_íåy
(
NULL
);

310 
	`míu_add_dï
(
$2
);

311 
	`míu_íd_íåy
();

312 
	`míu_add_míu
();

315 
if_íd
: 
íd


317 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_IF
, 
T_ENDIF
)) {

318 
	`míu_íd_míu
();

319 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídif\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

323 
if_°mt
:

324 
if_block
 
if_íd


325 | 
if_block


327 
	`¥ötf
("%s:%d: missög 'ídif' f‹Åhi†'if' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

328 
zc⁄‚îrs
++;

331 
if_block
:

333 | 
if_block
 
comm⁄_block


334 | 
if_block
 
míu_°mt


335 | 
if_block
 
choi˚_°mt


340 
míu
: 
T_MENU
 
¥om±
 
T_EOL


342 
	`míu_add_íåy
(
NULL
);

343 
	`míu_add_¥›
(
P_MENU
, 
$2
, 
NULL
, NULL);

344 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:míu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

347 
míu_íåy
: 
míu
 
dïíds_li°


349 
	`míu_íd_íåy
();

350 
	`míu_add_míu
();

353 
míu_íd
: 
íd


355 i‡(
	`zc⁄f_ídtokí
(
$1
, 
T_MENU
, 
T_ENDMENU
)) {

356 
	`míu_íd_míu
();

357 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ídmíu\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

361 
míu_°mt
:

362 
míu_íåy
 
míu_block
 
míu_íd


363 | 
míu_íåy
 
míu_block


365 
	`¥ötf
("%s:%d: missög 'ídmíu' f‹Åhi†'míu' sèãmít\n", 
cuºít_míu
->
fûe
->
«me
, cuºít_míu->
löío
);

366 
zc⁄‚îrs
++;

369 
míu_block
:

371 | 
míu_block
 
comm⁄_block


372 | 
míu_block
 
míu_°mt


373 | 
míu_block
 
choi˚_°mt


374 | 
míu_block
 
îr‹
 
T_EOL
 { 
	`zc⁄Âröt
("övÆid míu o±i⁄"); 
yyîrok
; }

377 
sour˚
: 
T_SOURCE
 
¥om±
 
T_EOL


379 
$$
 = 
$2
;

380 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:sour˚ %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(), 
$2
);

383 
sour˚_°mt
: 
sour˚


385 
	`zc⁄f_√xtfûe
(
$1
);

390 
commít
: 
T_COMMENT
 
¥om±
 
T_EOL


392 
	`míu_add_íåy
(
NULL
);

393 
	`míu_add_¥›
(
P_COMMENT
, 
$2
, 
NULL
, NULL);

394 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:commít\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

397 
commít_°mt
: 
commít
 
dïíds_li°


399 
	`míu_íd_íåy
();

404 
hñp_°¨t
: 
T_HELP
 
T_EOL


406 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:hñp\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

407 
	`zc⁄f_°¨thñp
();

410 
hñp
: 
hñp_°¨t
 
T_HELPTEXT


412 
cuºít_íåy
->
sym
->
hñp
 = 
$2
;

417 
dïíds_li°
:

418 | 
dïíds_li°
 
dïíds


419 | 
dïíds_li°
 
T_EOL


422 
dïíds
: 
T_DEPENDS
 
T_ON
 
ex¥
 
T_EOL


424 
	`míu_add_dï
(
$3
);

425 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:dïíd†⁄\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

427 | 
T_DEPENDS
 
ex¥
 
T_EOL


429 
	`míu_add_dï
(
$2
);

430 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:dïíds\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

432 | 
T_REQUIRES
 
ex¥
 
T_EOL


434 
	`míu_add_dï
(
$2
);

435 
	`¥ötd
(
DEBUG_PARSE
, "%s:%d:ªquúes\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
());

440 
¥om±_°mt_›t
:

442 | 
¥om±
 
if_ex¥


444 
	`míu_add_¥›
(
P_PROMPT
, 
$1
, 
NULL
, 
$2
);

447 
¥om±
: 
T_WORD


448 | 
T_WORD_QUOTE


451 
íd
: 
T_ENDMENU
 
∆_‹_eof
 { 
$$
 = T_ENDMENU; }

452 | 
T_ENDCHOICE
 
∆_‹_eof
 { 
$$
 = T_ENDCHOICE; }

453 | 
T_ENDIF
 
∆_‹_eof
 { 
$$
 = T_ENDIF; }

456 
∆_‹_eof
:

457 
T_EOL
 | 
T_EOF
;

459 
if_ex¥
: { 
$$
 = 
NULL
; }

460 | 
T_IF
 
ex¥
 { 
$$
 = 
$2
; }

463 
ex¥
: 
symbﬁ
 { 
$$
 = 
	`ex¥_Æloc_symbﬁ
(
$1
); }

464 | 
symbﬁ
 
T_EQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_EQUAL
, 
$1
, 
$3
); }

465 | 
symbﬁ
 
T_UNEQUAL
 symbﬁ { 
$$
 = 
	`ex¥_Æloc_comp
(
E_UNEQUAL
, 
$1
, 
$3
); }

466 | 
T_OPEN_PAREN
 
ex¥
 
T_CLOSE_PAREN
 { 
$$
 = 
$2
; }

467 | 
T_NOT
 
ex¥
 { 
$$
 = 
	`ex¥_Æloc_⁄e
(
E_NOT
, 
$2
); }

468 | 
ex¥
 
T_OR
Éx¥ { 
$$
 = 
	`ex¥_Æloc_two
(
E_OR
, 
$1
, 
$3
); }

469 | 
ex¥
 
T_AND
Éx¥ { 
$$
 = 
	`ex¥_Æloc_two
(
E_AND
, 
$1
, 
$3
); }

472 
symbﬁ
: 
T_WORD
 { 
$$
 = 
	`sym_lookup
(
$1
, 0); 
	`‰ì
($1); }

473 | 
T_WORD_QUOTE
 { 
$$
 = 
	`sym_lookup
(
$1
, 1); 
	`‰ì
($1); }

476 
	}
%%

478 
	$c⁄f_∑r£
(c⁄° *
«me
)

480 
symbﬁ
 *
sym
;

481 
i
;

483 
	`zc⁄f_öôsˇn
(
«me
);

485 
	`sym_öô
();

486 
	`míu_öô
();

487 
moduÀs_sym
 = 
	`sym_lookup
("MODULES", 0);

488 
roŸmíu
.
¥om±
 = 
	`míu_add_¥›
(
P_MENU
, "Löux Kî√»C⁄figuøti⁄", 
NULL
, NULL);

491 
	`zc⁄Â¨£
();

492 i‡(
zc⁄‚îrs
)

493 
	`exô
(1);

494 
	`míu_föÆize
(&
roŸmíu
);

495 
	`f‹_Æl_symbﬁs
(
i
, 
sym
) {

496 i‡(!(
sym
->
Êags
 & 
SYMBOL_CHECKED
Ë&& 
	`sym_check_dïs
(sym))

497 
	`¥ötf
("\n");

499 
sym
->
Êags
 |
SYMBOL_CHECK_DONE
;

502 
sym_ch™ge_cou¡
 = 1;

503 
	}
}

505 c⁄° *
	$zc⁄f_tokí«me
(
tokí
)

507 
tokí
) {

508 
T_MENU
:  "menu";

509 
T_ENDMENU
:  "endmenu";

510 
T_CHOICE
:  "choice";

511 
T_ENDCHOICE
:  "endchoice";

512 
T_IF
:  "if";

513 
T_ENDIF
:  "endif";

516 
	}
}

518 
boﬁ
 
	$zc⁄f_ídtokí
(
tokí
, 
°¨âokí
, 
ídtokí
)

520 i‡(
tokí
 !
ídtokí
) {

521 
	`zc⁄Âröt
("u√x≥˘ed '%s' wôhö %†block", 
	`zc⁄f_tokí«me
(
tokí
), zc⁄f_tokí«me(
°¨âokí
));

522 
zc⁄‚îrs
++;

523  
Ál£
;

525 i‡(
cuºít_míu
->
fûe
 !
cuºít_fûe
) {

526 
	`zc⁄Âröt
("'%s' i¿dif„ª¡ fûêth™ '%s'", 
	`zc⁄f_tokí«me
(
tokí
), zc⁄f_tokí«me(
°¨âokí
));

527 
	`zc⁄Âröt
("loˇti⁄ o‡thê'%s'", 
	`zc⁄f_tokí«me
(
°¨âokí
));

528 
zc⁄‚îrs
++;

529  
Ál£
;

531  
åue
;

532 
	}
}

534 
	$zc⁄Âröt
(c⁄° *
îr
, ...)

536 
va_li°
 
≠
;

538 
	`Ârötf
(
°dîr
, "%s:%d: ", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
() + 1);

539 
	`va_°¨t
(
≠
, 
îr
);

540 
	`vÂrötf
(
°dîr
, 
îr
, 
≠
);

541 
	`va_íd
(
≠
);

542 
	`Ârötf
(
°dîr
, "\n");

543 
	}
}

545 
	$zc⁄„º‹
(c⁄° *
îr
)

547 
	`Ârötf
(
°dîr
, "%s:%d: %s\n", 
	`zc⁄f_cu∫ame
(), 
	`zc⁄f_löío
(Ë+ 1, 
îr
);

548 
	}
}

550 
	$¥öt_quŸed_°rög
(
FILE
 *
out
, c⁄° *
°r
)

552 c⁄° *
p
;

553 
Àn
;

555 
	`putc
('"', 
out
);

556 (
p
 = 
	`°rchr
(
°r
, '"'))) {

557 
Àn
 = 
p
 - 
°r
;

558 i‡(
Àn
)

559 
	`Ârötf
(
out
, "%.*s", 
Àn
, 
°r
);

560 
	`Âuts
("\\\"", 
out
);

561 
°r
 = 
p
 + 1;

563 
	`Âuts
(
°r
, 
out
);

564 
	`putc
('"', 
out
);

565 
	}
}

567 
	$¥öt_symbﬁ
(
FILE
 *
out
, 
míu
 *menu)

569 
symbﬁ
 *
sym
 = 
míu
->sym;

570 
¥›îty
 *
¥›
;

572 i‡(
	`sym_is_choi˚
(
sym
))

573 
	`Ârötf
(
out
, "choice\n");

575 
	`Ârötf
(
out
, "c⁄fig %s\n", 
sym
->
«me
);

576 
sym
->
ty≥
) {

577 
S_BOOLEAN
:

578 
	`Âuts
(" boﬁón\n", 
out
);

580 
S_TRISTATE
:

581 
	`Âuts
("Åri°©e\n", 
out
);

583 
S_STRING
:

584 
	`Âuts
(" såög\n", 
out
);

586 
S_INT
:

587 
	`Âuts
(" i¡egî\n", 
out
);

589 
S_HEX
:

590 
	`Âuts
(" hex\n", 
out
);

593 
	`Âuts
(" ???\n", 
out
);

596 
¥›
 = 
sym
->¥›;Ör›;Ör› =Ör›->
√xt
) {

597 i‡(
¥›
->
míu
 != menu)

599 
¥›
->
ty≥
) {

600 
P_PROMPT
:

601 
	`Âuts
("Örom± ", 
out
);

602 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

603 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

604 
	`Âuts
(" i‡", 
out
);

605 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

607 
	`Âutc
('\n', 
out
);

609 
P_DEFAULT
:

610 
	`Âuts
–" deÁu… ", 
out
);

611 
	`ex¥_Âröt
(
¥›
->
ex¥
, 
out
);

612 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

613 
	`Âuts
(" i‡", 
out
);

614 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

616 
	`Âutc
('\n', 
out
);

618 
P_CHOICE
:

619 
	`Âuts
(" #choi˚ vÆue\n", 
out
);

622 
	`Ârötf
(
out
, " unknow¿¥› %d!\n", 
¥›
->
ty≥
);

626 i‡(
sym
->
hñp
) {

627 
Àn
 = 
	`°æí
(
sym
->
hñp
);

628 
sym
->
hñp
[--
Àn
] == '\n')

629 
sym
->
hñp
[
Àn
] = 0;

630 
	`Ârötf
(
out
, " hñp\n%s\n", 
sym
->
hñp
);

632 
	`Âutc
('\n', 
out
);

633 
	}
}

635 
	$zc⁄fdump
(
FILE
 *
out
)

637 
¥›îty
 *
¥›
;

638 
symbﬁ
 *
sym
;

639 
míu
 *menu;

641 
míu
 = 
roŸmíu
.
li°
;

642 
míu
) {

643 i‡((
sym
 = 
míu
->sym))

644 
	`¥öt_symbﬁ
(
out
, 
míu
);

645 i‡((
¥›
 = 
míu
->
¥om±
)) {

646 
¥›
->
ty≥
) {

647 
P_COMMENT
:

648 
	`Âuts
("\ncommíà", 
out
);

649 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

650 
	`Âuts
("\n", 
out
);

652 
P_MENU
:

653 
	`Âuts
("\nmíu ", 
out
);

654 
	`¥öt_quŸed_°rög
(
out
, 
¥›
->
ãxt
);

655 
	`Âuts
("\n", 
out
);

660 i‡(!
	`ex¥_is_yes
(
¥›
->
visibÀ
.
ex¥
)) {

661 
	`Âuts
(" dïíd†", 
out
);

662 
	`ex¥_Âröt
(
¥›
->
visibÀ
.
ex¥
, 
out
);

663 
	`Âutc
('\n', 
out
);

665 
	`Âuts
("\n", 
out
);

668 i‡(
míu
->
li°
)

669 
míu
 = míu->
li°
;

670 i‡(
míu
->
√xt
)

671 
míu
 = míu->
√xt
;

672 (
míu
 = míu->
∑ª¡
)) {

673 i‡(
míu
->
¥om±
 && míu->¥om±->
ty≥
 =
P_MENU
)

674 
	`Âuts
("\√ndmíu\n", 
out
);

675 i‡(
míu
->
√xt
) {

676 
míu
 = míu->
√xt
;

681 
	}
}

683 
	~"Àx.zc⁄f.c
"

684 
	~"c⁄fd©a.c
"

685 
	~"ex¥.c
"

686 
	~"symbﬁ.c
"

687 
	~"míu.c
"

	@/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_arch.h

32 #i‚de‡
_ASM_ARCH_RTAI_ARCH_H_


33 
	#_ASM_ARCH_RTAI_ARCH_H_


	)

35 
	~<asm/¨ch/h¨dw¨e.h
>

36 
	~<asm/¨ch/©91_pmc.h
>

39 
	#RTAI_TIMER_IRQ
 
__ùùe_mach_timîöt


	)

42 
	#RTAI_TIMER_FREQ
 
CLOCK_TICK_RATE


	)

45 
	#RTAI_TIMER_MAXVAL
 0xFFFF

	)

48 
	#RTAI_TSC_FREQ
 
CLOCK_TICK_RATE


	)

52 
	#RTAI_TIMER_LATENCY
 6000

	)

56 
	#RTAI_TIMER_SETUP_TIME
 1500

	)

59 
	#RTAI_TIMER_NAME
 "TIMER1"

	)

61 
	#RTAI_CALIBRATED_CPU_FREQ
 0

	)

62 
	#RTAI_CALIBRATED_APIC_FREQ
 0

	)

64 
ölöe
 

65 
	$πai_¨chdï_öô
()

68 
	}
}

70 
ölöe
 

71 
	$πai_¨chdï_exô
()

74 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_exports.h

29 #i‚de‡
_ASM_ARCH_RTAI_EXPORT_H_


30 
	#_ASM_ARCH_RTAI_EXPORT_H_


	)

	@/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_timer.h

31 #i‚de‡
_ASM_ARCH_RTAI_TIMER_H_


32 
	#_ASM_ARCH_RTAI_TIMER_H_


	)

34 
	~<löux/time.h
>

35 
	~<löux/timî.h
>

36 
	~<asm/mach/úq.h
>

37 
	~<löux/timex.h
>

39 
	~<asm/¨ch/πai_¨ch.h
>

40 
	~<asm/¨ch/©91_tc.h
>

44 
ölöe
 
	$©91_tc_ªad
(
ªg_off£t
)

46 
addr
 =

47 (
AT91_VA_BASE_TCB0
 + 0x40 * 
CONFIG_IPIPE_AT91_TC
);

49  
	`ªadl
((
__iomem
 *)(
addr
 + 
ªg_off£t
));

50 
	}
}

52 
ölöe
 
	$©91_tc_wrôe
(
ªg_off£t
, 
vÆue
)

54 
addr
 =

55 (
AT91_VA_BASE_TCB0
 + 0x40 * 
CONFIG_IPIPE_AT91_TC
);

57 
	`wrôñ
(
vÆue
, (
__iomem
 *)(
addr
 + 
ªg_off£t
));

58 
	}
}

60 
nŸø˚
 
__ùùe_gë_tsc
();

61 
nŸø˚
 
__ùùe_£t_tsc
(
vÆue
);

63 
ölöe
 
	$πai_©91_upd©e_tsc
()

65 
	`__ùùe_£t_tsc
(
	`__ùùe_gë_tsc
()+
π_times
.
≥riodic_tick
);

66 
	}
};

68 
π_≥riodic
;

70 
ölöe
 
RTIME
 
	$πai_rdtsc
()

72 if(!
π_≥riodic
)

76  
	`__ùùe_mach_gë_tsc
();

82  
	`__ùùe_gë_tsc
()+
	`©91_tc_ªad
(
AT91_TC_CV
);

83 
	}
}

85 
ölöe
 
	$π_£t_timî_dñay
(
dñay
)

87 i‡(
dñay
) {

91 
	`__ùùe_mach_£t_dec
(
dñay
);

98 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_arch.h

24 #i‚de‡
_ASM_ARCH_RTAI_ARCH_H_


25 
	#_ASM_ARCH_RTAI_ARCH_H_


	)

27 
	~<asm/sy°em.h
>

28 
	~<asm/¨ch/ï93xx_tsc.h
>

31 
	#RTAI_TSC_FREQ
 
FREQ_EP93XX_TSC


	)

34 
	#USE_LINUX_TIMER_WITHOUT_RECOVER
 1

	)

40 
	#RTAI_TIMER_IRQ
 
IRQ_TIMER1


	)

43 
	#RTAI_TIMER_NAME
 "TIMER1"

	)

46 
	#RTAI_TIMER_MAXVAL
 0xFFFF

	)

49 
	#RTAI_TIMER_FREQ
 
CLOCK_TICK_RATE


	)

53 
	#RTAI_TIMER_LATENCY
 \

54 (()((6 * 1000000000LL + 
RTAI_TSC_FREQ
/2Ë/ ()RTAI_TSC_FREQ))

	)

58 
	#RTAI_TIMER_SETUP_TIME
 \

59 (()((3 * 1000000000LL + 
RTAI_TSC_FREQ
/2Ë/ ()RTAI_TSC_FREQ))

	)

62 
	#ARCH_MUX_IRQ
 
NO_IRQ


	)

63 
	#isdemuxúq
(
úq
Ë(0)

	)

69 
ölöe
 

70 
	$πai_¨chdï_öô
()

73 
	}
}

75 
ölöe
 

76 
	$πai_¨chdï_exô
()

79 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_exports.h

24 #i‚de‡
_ASM_ARCH_RTAI_EXPORT_H_


25 
	#_ASM_ARCH_RTAI_EXPORT_H_


	)

	@/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_timer.h

24 #i‚de‡
_ASM_ARCH_RTAI_TIMER_H_


25 
	#_ASM_ARCH_RTAI_TIMER_H_


	)

27 
	~<asm/h¨dw¨e.h
>

28 
	~<asm/io.h
>

29 
	~<asm/¨ch/ï93xx_tsc.h
>

32 
ölöe
 

33 
	$πai_timî_úq_ack
()

35 
	`π_unmask_úq
(
RTAI_TIMER_IRQ
);

38 
	}
}

41 
	#πai_rdtsc
(Ë
	`ï93xx_rdtsc
()

	)

44 
ölöe
 

45 
	$π_£t_timî_dñay
(
dñay
)

47 
	`ADEOS_PARANOIA_ASSERT
(
	`adeos_hw_úqs_dißbÀd
());

48 i‡(
dñay
) {

52 
	`oué
(0, 
TIMER1CONTROL
);

53 
	`oué
(
dñay
 - 1, 
TIMER1LOAD
);

54 
	`oué
(0x88, 
TIMER1CONTROL
);

61 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_arch.h

35 #i‚de‡
_ASM_ARCH_RTAI_ARCH_H_


36 
	#_ASM_ARCH_RTAI_ARCH_H_


	)

38 
	~<asm/Àds.h
>

40 
	#RTAI_TSC_FREQ
 200000000

	)

46 
	#RTAI_TIMER_IRQ
 
TIM1_INT


	)

49 
	#RTAI_TIMER_NAME
 "TIMER1"

	)

52 
	#RTAI_TIMER_MAXVAL
 (
CLOCK_TICK_RATE
 / 100)

	)

55 
	#RTAI_TIMER_FREQ
 
CLOCK_TICK_RATE


	)

59 
	#RTAI_TIMER_LATENCY
 \

60 0

	)

65 
	#RTAI_TIMER_SETUP_TIME
 \

66 0

	)

70 
	#ARCH_MUX_IRQ
 
NO_IRQ


	)

71 
	#isdemuxúq
(
úq
Ë(0)

	)

77 
ölöe
 

78 
	$πai_¨chdï_öô
()

81 
	}
}

83 
ölöe
 

84 
	$πai_¨chdï_exô
()

87 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_exports.h

29 #i‚de‡
_ASM_ARCH_RTAI_EXPORT_H_


30 
	#_ASM_ARCH_RTAI_EXPORT_H_


	)

	@/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_timer.h

34 #i‚de‡
_ASM_ARCH_RTAI_TIMER_H_


35 
	#_ASM_ARCH_RTAI_TIMER_H_


	)

37 
	~<löux/time.h
>

38 
	~<löux/timî.h
>

39 
	~<asm/mach/úq.h
>

40 
	~<löux/timex.h
>

41 
	~<asm/¨ch/imx-ªgs.h
>

43 
ölöe
 
	$πai_timî_úq_ack
( )

45 i‡(
	`IMX_TSTAT
(0))

46 
	`IMX_TSTAT
(0) = 0x0;

48 
	`π_unmask_úq
(
RTAI_TIMER_IRQ
);

50 i‡–()(
	`IMX_TCN
(0Ë- 
	`IMX_TCMP
(0)) < 0 ) {

56 
	`IMX_TCMP
(0Ë
	`IMX_TCN
(0) - 1;

60 
	}
}

62 
	uπai_tsc
 {

63 
	mtsc
;

64 
	mh…sc
[2];

66 vﬁ©ûê
πai_tsc
Ñtai_tsc;

68 
ölöe
 
RTIME
 
	$πai_rdtsc
()

70 
RTIME
 
ts
;

71 
Êags
, 
cou¡
;

73 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

75 i‡((
cou¡
 = 
	`IMX_TCN
(0)Ë< 
πai_tsc
.
h…sc
[0])

76 
πai_tsc
.
h…sc
[1]++;

78 
πai_tsc
.
h…sc
[0] = 
cou¡
;

79 
ts
 = 
πai_tsc
.
tsc
;

81 
	`πai_ª°‹e_Êags
(
Êags
);

83  
ts
;

84 
	}
}

86 
	#PROTECT_TIMER


	)

87 
	#SETUP_TIME_TICKS
 (0)

	)

89 
ölöe
 
	$π_£t_timî_dñay
(
dñay
)

91 
Êags
;

92 
√xt_m©ch
;

94 #ifde‡
PROTECT_TIMER


95 i‡–
dñay
 > 
LATCH
 )

96 
dñay
 = 
LATCH
;

99 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

101 i‡–
dñay
 )

102 
√xt_m©ch
 = 
	`IMX_TCMP
(0Ë
dñay
 + 
	`IMX_TCN
(0);

104 
√xt_m©ch
 = ( 
	`IMX_TCMP
(0Ë+
π_times
.
≥riodic_tick
 );

106 #ifde‡
PROTECT_TIMER


107 ()(
√xt_m©ch
 - 
	`IMX_TCN
(0)Ë< 2 * 
SETUP_TIME_TICKS
 ) {

108 
√xt_m©ch
 = 
	`IMX_TCMP
(0Ë
	`IMX_TCN
(0Ë+ 4 * 
SETUP_TIME_TICKS
;

112 
	`πai_ª°‹e_Êags
(
Êags
);

113 
	}
}

	@/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_arch.h

31 #i‚de‡
_ASM_ARCH_RTAI_ARCH_H_


32 
	#_ASM_ARCH_RTAI_ARCH_H_


	)

34 
	#FREQ_SYS_CLK
 3686400

	)

35 
	#LATENCY_MATCH_REG
 2000

	)

36 
	#SETUP_TIME_MATCH_REG
 600

	)

37 
	#LATENCY_TICKS
 (
LATENCY_MATCH_REG
/(1000000000/
FREQ_SYS_CLK
))

	)

38 
	#SETUP_TIME_TICKS
 (
SETUP_TIME_MATCH_REG
/(1000000000/
FREQ_SYS_CLK
))

	)

40 
	#RTAI_TIMER_IRQ
 
IRQ_OST0


	)

42 
	#ARCH_MUX_IRQ
 
IRQ_GPIO_2_80


	)

43 
	#RTAI_TIMER_MAXVAL
 0xFFFF

	)

46 
	#RTAI_TIMER_FREQ
 
CLOCK_TICK_RATE


	)

47 
	~<asm/¨ch/úq.h
>

49 
	#RTAI_TSC_FREQ
 
FREQ_SYS_CLK


	)

51 
	#RTAI_CALIBRATED_CPU_FREQ
 
RTAI_TSC_FREQ


	)

54 
	#RTAI_TIMER_NAME
 "TIMER1"

	)

58 
	#RTAI_TIMER_LATENCY
 \

59 0

	)

64 
	#RTAI_TIMER_SETUP_TIME
 \

65 0

	)

68 
	gπai_˝u‰eq_¨g
 = 
RTAI_CALIBRATED_CPU_FREQ
;

70 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

72 
πai_pxa_GPIO_2_80_demux
–
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
 );

75 
ölöe
 
	$¨ch_mou¡_πai
( )

79 
	`π_ªque°_úq
–
IRQ_GPIO_2_80
, (*Ë
πai_pxa_GPIO_2_80_demux
, 0, 0);

80 
	}
}

82 
ölöe
 
	$¨ch_umou¡_πai
( )

84 
	`π_ªÀa£_úq
–
IRQ_GPIO_2_80
 );

86 
	}
}

89 
ölöe
 

90 
	$πai_¨chdï_öô
()

92 i‡(
πai_˝u‰eq_¨g
 == 0) {

93 
adsysöfo_t
 
sysöfo
;

94 
	`adeos_gë_sysöfo
(&
sysöfo
);

95 
πai_˝u‰eq_¨g
 = ()
sysöfo
.
˝u‰eq
;

97 
	}
}

99 
ölöe
 

100 
	$πai_¨chdï_exô
()

103 
	}
}

106 
	#isdemuxúq
(
úq
Ë(úq >
	`IRQ_GPIO
(2))

	)

	@/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_exports.h

29 #i‚de‡
_ASM_ARCH_RTAI_EXPORT_H_


30 
	#_ASM_ARCH_RTAI_EXPORT_H_


	)

	@/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_timer.h

30 #i‚de‡
_ASM_ARCH_RTAI_TIMER_H_


31 
	#_ASM_ARCH_RTAI_TIMER_H_


	)

34 
	~<löux/time.h
>

35 
	~<löux/timî.h
>

36 
	~<asm/mach/úq.h
>

37 
	~<löux/timex.h
>

40 
ölöe
 
	$πai_timî_úq_ack
( )

42 
OSSR
 = 
OSSR_M0
;

43 
	`π_unmask_úq
(
RTAI_TIMER_IRQ
);

44 i‡–()(
OSCR
 - 
OSMR0
) < 0 )

49 
OSMR0
 = 
OSCR
 - 1;

51 
	}
}

53 
	uπai_tsc
 {

54 
	mtsc
;

55 
	mh…sc
[2];

57 vﬁ©ûê
πai_tsc
Ñtai_tsc;

59 
ölöe
 
RTIME
 
	$πai_rdtsc
()

61 
RTIME
 
ts
;

62 
Êags
, 
cou¡
;

64 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

66 i‡––
cou¡
 = 
OSCR
 ) < 
πai_tsc
.
h…sc
[0] )

67 
πai_tsc
.
h…sc
[1]++;

68 
πai_tsc
.
h…sc
[0] = 
cou¡
;

69 
ts
 = 
πai_tsc
.
tsc
;

70 
	`πai_ª°‹e_Êags
(
Êags
);

72  
ts
;

73 
	}
}

75 
	#PROTECT_TIMER


	)

79 
ölöe
 
	$π_£t_timî_m©ch_ªg
(
dñay
)

81 
Êags
;

82 
√xt_m©ch
;

84 #ifde‡
PROTECT_TIMER


85 i‡–
dñay
 > 
LATCH
 )

86 
dñay
 = 
LATCH
;

89 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

91 i‡–
dñay
 )

92 
√xt_m©ch
 = 
OSMR0
 = 
dñay
 + 
OSCR
;

95 
√xt_m©ch
 = ( 
OSMR0
 +
π_times
.
≥riodic_tick
 );

98 #ifde‡
PROTECT_TIMER


99 ()(
√xt_m©ch
 - 
OSCR
Ë< 2 * 
SETUP_TIME_TICKS
 ) {

100 
OSSR
 = 
OSSR_M0
;

101 
√xt_m©ch
 = 
OSMR0
 = 
OSCR
 + 4 * 
SETUP_TIME_TICKS
;

105 
	`πai_ª°‹e_Êags
(
Êags
);

106 
	}
}

109 
	#π_£t_timî_dñay
(
x
Ë
	`π_£t_timî_m©ch_ªg
(x)

	)

	@/usr/src/rtai/base/include/asm-arm/rtai.h

41 
	~<πai_c⁄fig.h
>

42 
	~<asm/πai_hÆ.h
>

	@/usr/src/rtai/base/include/asm-arm/rtai_atomic.h

44 #i‚de‡
_RTAI_ASM_ARM_ATOMIC_H


45 
	#_RTAI_ASM_ARM_ATOMIC_H


	)

47 
	~<asm/©omic.h
>

49 #ifde‡
__KERNEL__


51 
	~<löux/bô›s.h
>

52 
	~<asm/sy°em.h
>

54 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

56 
	#©omic_xchg
(
±r
,
v
Ë
	`xchg
’å,v)

	)

59 
	#©omic_cmpxchg
(
p
, 
o
, 
n
) ({ \

60 
	`ty≥of
(*(
p
)Ë
__o
 = (
o
); \

61 
	`ty≥of
(*(
p
)Ë
__n
 = (
n
); \

62 
	`ty≥of
(*(
p
)Ë
__¥ev
; \

63 
Êags
; \

64 
	`πai_hw_lock
(
Êags
); \

65 
__¥ev
 = *(
p
); \

66 i‡(
__¥ev
 =
__o
) \

67 *(
p
Ë
__n
; \

68 
	`πai_hw_u∆ock
(
Êags
); \

69 
__¥ev
; })

	)

75 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

76 
	~<asm/¥oc/sy°em.h
>

78 
	~<asm/sy°em.h
>

81 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,20)

82 °ru˘ { vﬁ©ûê
	mcou¡î
; } 
	t©omic_t
;

85 
ölöe
 

86 
	$©omic_xchg
(vﬁ©ûê*
±r
, 
x
)

88 
asm
 volatile(

90 : "=&r" (
x
)

91 : "r" (
x
), "r" (
±r
)

94  
x
;

95 
	}
}

97 
ölöe
 
	$©omic_cmpxchg
(vﬁ©ûê*
±r
, 
ﬁd
, 
√w
)

99 
ﬁdvÆ
, 
ªs
;

102 
__asm__
 
	`__vﬁ©ûe__
("@átomic_cmpxchg\n"

106 : "=&r" (
ªs
), "=&r" (
ﬁdvÆ
)

107 : "r" (*(*)
±r
), "r" (
ﬁd
), "r" (
√w
)

109 } 
ªs
);

111  
ﬁdvÆ
;

112 
	}
}

129 
ölöe
 
	$©omic_add_ªtu∫
(
i
, 
©omic_t
 *
v
)

131 
tmp
;

132 
ªsu…
;

134 
__asm__
 
	`__vﬁ©ûe__
("@átomic_add_return\n"

140 : "=&r" (
ªsu…
), "=&r" (
tmp
)

141 : "r" (&
v
->
cou¡î
), "Ir" (
i
)

144  
ªsu…
;

145 
	}
}

147 
ölöe
 
	$©omic_sub_ªtu∫
(
i
, 
©omic_t
 *
v
)

149 
tmp
;

150 
ªsu…
;

152 
__asm__
 
	`__vﬁ©ûe__
("@átomic_sub_return\n"

158 : "=&r" (
ªsu…
), "=&r" (
tmp
)

159 : "r" (&
v
->
cou¡î
), "Ir" (
i
)

162  
ªsu…
;

163 
	}
}

165 
	#©omic_öc
(
v
Ë(Ë
	`©omic_add_ªtu∫
(1, v)

	)

166 
	#©omic_dec_™d_ã°
(
v
Ë(
	`©omic_sub_ªtu∫
(1, vË=0)

	)

	@/usr/src/rtai/base/include/asm-arm/rtai_fpu.h

44 #i‚de‡
_RTAI_ASM_ARM_FPU_H


45 
	#_RTAI_ASM_ARM_FPU_H


	)

47 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


53 
	#íabÀ_Âu
()

	)

54 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
)

	)

55 
	#ª°‹e_Â¸
(
Â¸
)

	)

56 
	#öô_h¨d_Âív
()

	)

57 
	#öô_Âív
(
Âív
)

	)

58 
	#ßve_Âív
(
Âív
)

	)

59 
	#ª°‹e_Âív
(
Âív
)

	)

60 
	#öô_h¨d_Âu
(
 xtsk
)

	)

61 
	#öô_Âu
(
 xtsk
)

	)

62 
	#ª°‹e_Âu
(
 xtsk
)

	)

64 
	s¨m_Âu_ív
 { 
	mÂu_ªg
[1]; } 
	tFPU_ENV
;

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

68 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

69 dÿ{ (
 xtsk
)->
u£d_m©h
 = 1; } 0)

	)

70 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

71 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

72 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

74 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

75 dÿ{ (
 xtsk
)->
Êags
 |
PF_USEDFPU
; } 0)

	)

80 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,11)

82 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

83 dÿ{ (
 xtsk
)->
u£d_m©h
 = 1; } 0)

	)

84 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

85 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

86 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

88 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

89 dÿ{ (
 xtsk
)->
thªad_öfo
->
°©us
 |
TS_USEDFPU
; } 0)

	)

94 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

96 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

97 dÿ{ 
	`£t_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

98 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

99 dÿ{ 
	`˛ór_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

100 
	# xtsk_u£s_Âu
(
 xtsk
Ë(
	`tsk_u£d_m©h
÷nxtsk))

	)

102 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

103 dÿ{ (
 xtsk
)->
thªad_öfo
->
°©us
 |
TS_USEDFPU
; } 0)

	)

	@/usr/src/rtai/base/include/asm-arm/rtai_hal.h

48 #i‚de‡
_RTAI_ASM_ARM_HAL_H


49 
	#_RTAI_ASM_ARM_HAL_H


	)

51 
	~<löux/vîsi⁄.h
>

52 
	~<löux/autoc⁄f.h
>

54 
	#RTAI_SYSCALL_MODE


	)

56 
	#LOCKED_LINUX_IN_IRQ_HANDLER


	)

57 
	#DOMAIN_TO_STALL
 (
fusi⁄_domaö
)

	)

59 
	~<πai_hÆ_«mes.h
>

60 
	~<asm/πai_ve˘‹s.h
>

61 
	~<πai_ty≥s.h
>

62 
	~<asm/div64.h
>

64 
	#RTAI_NR_CPUS
 1

	)

65 
	#RTAI_NR_IRQS
 
IPIPE_NR_XIRQS


	)

67 #ifde‡
CONFIG_ARCH_AT91


68 #i‚de‡
__LINUX_ARM_ARCH__


69 
	#__LINUX_ARM_ARCH__
 5

	)

72 #i‚de‡
__LINUX_ARM_ARCH__


74 
	#__LINUX_ARM_ARCH__
 4

	)

78 #i‚de‡
_RTAI_FUSION_H


80 #i‚de‡
__KERNEL__


85 
ölöe
 

86 
	$f‚z
(
w‹d
)

88 
cou¡
;

91 
	`asm
–"˛z %0, %1" : "Ù" (
cou¡
Ë: "r" (
w‹d
) );

92  31-
cou¡
;

93 
	}
}

97 
ölöe
 

98 
	$f‚z
(
w‹d
)

100  
	`ffs
(
w‹d
) - 1;

101 
	}
}

106 #ifde‡
__KERNEL__


107 
	~<asm/sy°em.h
>

109 
	#__asmeq
(
x
, 
y
Ë".i‚¯" x "," y " ; .î∏; .ídif\n\t"

	)

112 #ifde‡
__BIG_ENDIAN


113 
	#ídün°ru˘
 såu˘ { 
_h
; 
_l
; } 
_s


	)

115 
	#ídün°ru˘
 såu˘ { 
_l
; 
_h
; } 
_s


	)

118 #i‚de‡
__πai_u64tou32


119 
	#__πai_u64tou32
(
uŒ
, 
h
, 
l
) ({ \

120 uni⁄ { 
_uŒ
; \

121 
ídün°ru˘
; \

122 } 
_u
; \

123 
_u
.
_uŒ
 = (
uŒ
); \

124 (
h
Ë
_u
.
_s
.
_h
; \

125 (
l
Ë
_u
.
_s
.
_l
; \

126 })

	)

129 #i‚de‡
__πai_u64‰omu32


130 
	#__πai_u64‰omu32
(
h
, 
l
) ({ \

131 uni⁄ { 
_uŒ
; \

132 
ídün°ru˘
; \

133 } 
_u
; \

134 
_u
.
_s
.
_h
 = (
h
); \

135 
_u
.
_s
.
_l
 = (
l
); \

136 
_u
.
_uŒ
; \

137 })

	)

140 #i‚de‡
πai_uŒmul


141 
ölöe
 

142 
	$__πai_gíîic_uŒmul
(c⁄° 
m0
,

143 c⁄° 
m1
)

145  (Ë
m0
 * 
m1
;

146 
	}
}

147 
	#πai_uŒmul
(
m0
,
m1
Ë
	`__πai_gíîic_uŒmul
((m0),(m1))

	)

150 #i‚de‡
πai_uŒdiv


151 
ölöe
 

152 
	$__πai_gíîic_uŒdiv
 (
uŒ
,

153 c⁄° 
uld
,

154 *c⁄° 
Ω
)

156 c⁄° 
r
 = 
	`do_div
(
uŒ
, 
uld
);

158 i‡(
Ω
)

159 *
Ω
 = 
r
;

161  
uŒ
;

162 
	}
}

163 
	#πai_uŒdiv
(
uŒ
,
uld
,
Ω
Ë
	`__πai_gíîic_uŒdiv
((uŒ),(uld),‘p))

	)

166 #i‚de‡
πai_uldivªm


167 
	#πai_uldivªm
(
uŒ
,
ul
,
Ω
Ë((Ë
	`πai_uŒdiv
((uŒ),(ul),‘p)))

	)

170 #i‚de‡
πai_imuldiv


171 
ölöe
 

172 
	$__πai_gíîic_imuldiv
 (
i
,

173 
mu…
,

174 
div
)

177 c⁄° 
uŒ
 = 
	`πai_uŒmul
(
i
, 
mu…
);

178  
	`πai_uldivªm
(
uŒ
, 
div
, 
NULL
);

179 
	}
}

180 
	#πai_imuldiv
(
i
,
m
,
d
Ë
	`__πai_gíîic_imuldiv
((i),(m),(d))

	)

183 #i‚de‡
πai_Œimd


187 
ölöe
 

188 
	$__πai_gíîic_div96by32
 (c⁄° 
h
,

189 c⁄° 
l
,

190 c⁄° 
d
,

191 *c⁄° 
Ω
)

193 
rh
;

194 c⁄° 
qh
 = 
	`πai_uldivªm
(
h
, 
d
, &
rh
);

195 c⁄° 
t
 = 
	`__πai_u64‰omu32
(
rh
, 
l
);

196 c⁄° 
ql
 = 
	`πai_uldivªm
(
t
, 
d
, 
Ω
);

198  
	`__πai_u64‰omu32
(
qh
, 
ql
);

199 
	}
}

201 
ölöe
 

202 
	$__πai_gíîic_uŒimd
 (c⁄° 
›
,

203 c⁄° 
m
,

204 c⁄° 
d
)

206 
›h
, 
›l
, 
éh
, 
él
;

207 
th
, 
é
;

209 
	`__πai_u64tou32
(
›
, 
›h
, 
›l
);

210 
é
 = 
	`πai_uŒmul
(
›l
, 
m
);

211 
	`__πai_u64tou32
(
é
, 
éh
, 
él
);

212 
th
 = 
	`πai_uŒmul
(
›h
, 
m
);

213 
th
 +
éh
;

215  
	`__πai_gíîic_div96by32
(
th
, 
él
, 
d
, 
NULL
);

216 
	}
}

218 
ölöe
 

219 
	$__πai_gíîic_Œimd
 (
›
,

220 
m
,

221 
d
)

224 if(
›
 < 0LL)

225  -
	`__πai_gíîic_uŒimd
(-
›
, 
m
, 
d
);

226  
	`__πai_gíîic_uŒimd
(
›
, 
m
, 
d
);

227 
	}
}

228 
	#πai_Œimd
(
Œ
,
m
,
d
Ë
	`__πai_gíîic_Œimd
(÷l),(m),(d))

	)

231 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

232 
	~<löux/sched.h
>

233 
	~<löux/öãºu±.h
>

235 
	~<asm/sy°em.h
>

236 
	~<asm/io.h
>

237 
	~<asm/πai_©omic.h
>

238 
	~<asm/πai_Âu.h
>

240 
	~<πai_åa˚.h
>

242 
	sπai_ªÆtime_úq_s
 {

243 (*
h™dÀr
)(
úq
, *
cookõ
);

244 *
cookõ
;

245 
ªtmode
;

246 
˝umask
;

247 (*
úq_ack
)();

250 
	#RTAI_DOMAIN_ID
 0x9ac15d93

251 
	#RTAI_NR_TRAPS
 
HAL_NR_FAULTS


	)

252 
	#RTAI_NR_SRQS
 32

	)

254 
	#RTAI_TIME_LIMIT
 0x7000000000000000LL

	)

256 
	#RTAI_IFLAG
 9

	)

258 
	#πai_˝uid
(Ë
	`hÆ_¥o˚ss‹_id
()

	)

259 
	#πai_tskext
(
idx
Ë
hÆ_tskext
[idx]

	)

262 
	#πai_hw_˛i
(Ë
	`hÆ_hw_˛i
()

	)

263 
	#πai_hw_°i
(Ë
	`hÆ_hw_°i
()

	)

264 
	#πai_hw_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

265 
	#πai_hw_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

266 
	#πai_hw_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

269 
	#πai_˛i
(Ë
	`hÆ_hw_˛i
()

	)

270 
	#πai_°i
(Ë
	`hÆ_hw_°i
()

	)

271 
	#πai_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

272 
	#πai_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

273 
	#πai_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

275 vﬁ©ûê
hÆ_≥nded
;

277 
ölöe
 
hÆ_domaö_°ru˘
 *
	$gë_domaö_poöãr
(
n
)

279 
li°_hód
 *
p
 = 
hÆ_pùñöe
.
√xt
;

280 
hÆ_domaö_°ru˘
 *
d
;

281 
i
 = 0;

282 
p
 !&
hÆ_pùñöe
) {

283 
d
 = 
	`li°_íåy
(
p
, 
hÆ_domaö_°ru˘
, 
p_lök
);

284 i‡(++
i
 =
n
) {

285  
d
;

287 
p
 = 
d
->
p_lök
.
√xt
;

289  (
hÆ_domaö_°ru˘
 *)
i
;

290 
	}
}

292 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

294 
	`hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
); \

295 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_lo
[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

296 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &
domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
); \

297 
	`ã°_™d_£t_bô
(
˝uid
, &
hÆ_≥nded
); \

298 } 0)

	)

300 
	#hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
Ë
	`hÆ_≥nd_domaö_unc⁄d
(úq, 
hÆ_roŸ_domaö
, cpuid)

	)

302 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

304 i‡(
hÆ_roŸ_domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
 != 0) { \

305 
	`πai_˛i
(); \

306 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

308 } 0)

	)

310 vﬁ©ûê*
ùùe_roŸ_°©us
[];

312 
	#hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
) \

314 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
ùùe_roŸ_°©us
[
˝uid
])) { \

315 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
); \

316 
	`πai_°i
(); \

318 } 0)

	)

320 #ifde‡
CONFIG_PREEMPT


321 
	#πai_ßve_™d_lock_¥ìm±_cou¡
() \

322 dÿ{ *
¥˙ç
, 
¥˙t
;Ör˙à
	`xchg
’r˙ç = &
	`¥ìm±_cou¡
(), 1);

	)

323 
	#πai_ª°‹e_¥ìm±_cou¡
() \

324 *
¥˙ç
 = 
¥˙t
; } 0)

	)

326 
	#πai_ßve_™d_lock_¥ìm±_cou¡
();

	)

327 
	#πai_ª°‹e_¥ìm±_cou¡
();

	)

330 (*
	tπ_úq_h™dÀr_t
)(
	túq
, *
	tcookõ
);

332 
	#RTAI_CPU_FREQ
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

334 
	sˇlibøti⁄_d©a
 {

336 
˝u_‰eq
;

337 
≠ic_‰eq
;

338 
œãncy
;

339 
£tup_time_TIMER_CPUNIT
;

340 
£tup_time_TIMER_UNIT
;

341 
timîs_tﬁ
[
RTAI_NR_CPUS
];

344 
	s≠ic_timî_£tup_d©a
 {

346 
mode
;

347 
cou¡
;

350 
π_times
Ñt_times;

351 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

352 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

353 vﬁ©ûê
πai_˝u_lock
;

355 
	#SET_TASKPRI
(
˝uid
)

	)

356 
	#CLR_TASKPRI
(
˝uid
)

	)

358 
	sπai_swôch_d©a
 {

359 vﬁ©ûê
sÊags
;

360 vﬁ©ûê
lÊags
;

361 } 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

363 
ölöe
 
	$πai_ßve_Êags_úqbô
()

365 
Êags
;

366 
	`πai_ßve_Êags
(
Êags
);

367  
Êags
 & (1 << 
RTAI_IFLAG
);

368 
	}
}

370 
ölöe
 
	$πai_ßve_Êags_úqbô_™d_˛i
()

372 
Êags
;

373 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

374  
Êags
 & (1 << 
RTAI_IFLAG
);

375 
	}
}

377 
	#_£nd_sched_ùi
(
de°
)

	)

379 
	#π_•ö_lock
(
lock
)

	)

380 
	#π_•ö_u∆ock
(
lock
)

	)

382 
	#π_•ö_lock_úq
(
lock
Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

383 
	#π_•ö_u∆ock_úq
(
lock
Ëdÿ{ 
	`πai_°i
(); } 0)

	)

385 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

387 
Êags
;

388 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

389  
Êags
;

390 
	}
}

391 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

393 
	#π_gë_globÆ_lock
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

394 
	#π_ªÀa£_globÆ_lock
()

	)

396 
	#π_globÆ_˛i
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

397 
	#π_globÆ_°i
(Ëdÿ{ 
	`πai_°i
(); } 0)

	)

399 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

401 
Êags
;

402 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

403  
Êags
;

404 
	}
}

405 
	#π_globÆ_ª°‹e_Êags
(
Êags
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

407 
	#π_globÆ_ßve_Êags
(
Êags
Ëdÿ{ 
	`πai_ßve_Êags
(*Êags); } 0)

	)

409 
asmlökage
 
π_¥ötk
(c⁄° *
f‹m©
, ...);

410 
asmlökage
 
π_¥ötk_sync
(c⁄° *
f‹m©
, ...);

412 
hÆ_domaö_°ru˘
 
πai_domaö
;

413 
hÆ_domaö_°ru˘
 *
fusi⁄_domaö
;

415 
	#_π_swôch_to_ªÆ_time
(
˝uid
) \

417 
πai_löux_c⁄ãxt
[
˝uid
].
lÊags
 = 
	`xchg
(
ùùe_roŸ_°©us
[˝uid], (1 << 
IPIPE_STALL_FLAG
)); \

418 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 1; \

419 
	`hÆ_cuºít_domaö
(
˝uid
Ë&
πai_domaö
; \

420 } 0)

	)

422 
	#π_swôch_to_löux
(
˝uid
) \

424 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

425 
	`hÆ_cuºít_domaö
(
˝uid
Ë
hÆ_roŸ_domaö
; \

426 *
ùùe_roŸ_°©us
[
˝uid
] = 
πai_löux_c⁄ãxt
[˝uid].
lÊags
; \

427 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 0; \

428 
	`CLR_TASKPRI
(
˝uid
); \

430 } 0)

	)

432 
	#π_swôch_to_ªÆ_time
(
˝uid
) \

434 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

435 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

437 } 0)

	)

439 
	#πai_gë_öå_h™dÀr
(
v
) \

440 ((
idt_èbÀ
[
v
].
b
 & 0xFFFF0000Ë| (idt_èbÀ[v].
a
 & 0x0000FFFF))

	)

441 
	#ack_bad_úq
 
hÆ_ack_sy°em_úq


442 

	)

443 
	#πai_öô_èsk¥i_úqs
() \

445 
v
; \

446 
v
 = 
SPURIOUS_APIC_VECTOR
 + 1; v < 256; v++) { \

447 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
v
 - 
FIRST_EXTERNAL_VECTOR
, ((*)())
	`πai_gë_öå_h™dÀr
(v), (*)
ack_bad_úq
, 
IPIPE_HANDLE_MASK
); \

449 } 0)

	)

451 
ölöe
 
	$π_ßve_swôch_to_ªÆ_time
(
˝uid
)

453 
	`SET_TASKPRI
(
˝uid
);

454 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) {

455 
	`_π_swôch_to_ªÆ_time
(
˝uid
);

459 
	}
}

461 
	#π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
) \

463 i‡(!
sÊags
) { \

464 
	`π_swôch_to_löux
(
˝uid
); \

465 } i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

466 
	`SET_TASKPRI
(
˝uid
); \

467 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

469 } 0)

	)

471 
	#ö_hπ_mode
(
˝uid
Ë(
πai_löux_c⁄ãxt
[˝uid].
sÊags
)

	)

475 
πai_¸ôiˇl_íãr
((*
synch
)());

477 
	`πai_¸ôiˇl_exô
(
Êags
);

479 
	`πai_ˇlibøã_8254
();

481 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
,

482 
pﬁicy
,

483 
¥io
);

485 
	`πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
ùd
, 
evít
, (*
h™dÀr
)(, *));

491 #ifde‡
__KERNEL__


493 
	~<löux/kî√l.h
>

495 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

497 *
	`Œ2a
(
Œ
, *
s
);

499 #ifde‡
__˝lu•lus


503 
	`π_ªque°_úq
(
úq
,

504 (*
h™dÀr
)(
úq
, *
cookõ
),

505 *
cookõ
,

506 
ªtmode
);

508 
	`π_ªÀa£_úq
(
úq
);

510 
	`π_£t_úq_ack
(
úq
, (*
úq_ack
)());

512 
ölöe
 
	`π_ªque°_úq_wack
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
, (*
úq_ack
)())

514 
ªtvÆ
;

515 i‡((
ªtvÆ
 = 
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
cookõ
, 
ªtmode
)) < 0) {

516  
ªtvÆ
;

518  
	`π_£t_úq_ack
(
úq
, 
úq_ack
);

521 
	`π_£t_úq_cookõ
(
úq
, *
cookõ
);

523 
	`π_£t_úq_ªtmode
(
úq
, 
Á°ªt
);

529 
	`π_°¨tup_úq
(
úq
);

531 
	`π_shutdown_úq
(
úq
);

533 
	`π_íabÀ_úq
(
úq
);

535 
	`π_dißbÀ_úq
(
úq
);

537 
	`π_mask_™d_ack_úq
(
úq
);

539 
	`π_unmask_úq
(
úq
);

541 
	`π_ack_úq
(
úq
);

543 
	`π_do_úq
(
úq
);

545 
	`π_ªque°_löux_úq
(
úq
,

546 *
h™dÀr
,

547 *
«me
,

548 *
dev_id
);

550 
	`π_‰ì_löux_úq
(
úq
,

551 *
dev_id
);

553 
	`π_≥nd_löux_úq
(
úq
);

555 
RTAI_SYSCALL_MODE
 
	`u§_π_≥nd_löux_úq
(
úq
);

557 
	`π_≥nd_löux_§q
(
§q
);

559 
	`π_ªque°_§q
(
œbñ
,

560 (*
k_h™dÀr
)(),

561 (*
u_h™dÀr
)());

563 
	`π_‰ì_§q
(
§q
);

565 
	`π_assign_úq_to_˝u
(
úq
,

566 
˝us_mask
);

568 
	`π_ª£t_úq_to_sym_mode
(
úq
);

570 
	`π_ªque°_timî_˝uid
((*
h™dÀr
)(),

571 
tick
,

572 
˝uid
);

574 
	`π_ªque°_≠ic_timîs
((*
h™dÀr
)(),

575 
≠ic_timî_£tup_d©a
 *
tmd©a
);

577 
	`π_‰ì_≠ic_timîs
();

579 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, 
u£_≠ic
);

581 
	`π_‰ì_timî
();

583 
RT_TRAP_HANDLER
 
	`π_£t_å≠_h™dÀr
(RT_TRAP_HANDLER 
h™dÀr
);

585 
	`π_ªÀa£_πc
();

587 
	`π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
);

589 
	#π_mou¡
()

	)

591 
	#π_umou¡
()

	)

593 (*
	`π_£t_ihook
((*
hook‚
)()))();

597 
ölöe
 
	`π_ªque°_globÆ_úq
(
úq
, (*
h™dÀr
)())

599  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, 0, 0);

602 
ölöe
 
	`π_ªque°_globÆ_úq_ext
(
úq
, (*
h™dÀr
)(), 
cookõ
)

604  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, (*)
cookõ
, 1);

607 
ölöe
 
	`π_£t_globÆ_úq_ext
(
úq
, 
ext
, 
cookõ
)

609 
	`π_£t_úq_cookõ
(
úq
, (*)
cookõ
);

612 
ölöe
 
	`π_‰ì_globÆ_úq
(
úq
)

614  
	`π_ªÀa£_úq
(
úq
);

617 #ifde‡
__˝lu•lus


618 
	}
}

627 
	~<asm-¨m/¨ch/πai_timî.h
>

631 
	~<asm/πai_ﬁd«mes.h
>

633 
	#RTAI_DEFAULT_TICK
 100000

	)

634 #ifde‡
CONFIG_RTAI_TRACE


635 
	#RTAI_DEFAULT_STACKSZ
 8192

	)

637 
	#RTAI_DEFAULT_STACKSZ
 1024

	)

642 #i‚de‡
_RTAI_HAL_XN_H


643 
	#_RTAI_HAL_XN_H


	)

645 
	#SET_FUSION_TIMER_RUNNING
()

	)

647 
	#CLEAR_FUSION_TIMER_RUNNING
()

	)

649 
	#IS_FUSION_TIMER_RUNNING
(Ë(0)

	)

651 
	#NON_RTAI_SCHEDULE
(
˝uid
Ëdÿ{ 
	`scheduÀ
(); } 0)

	)

	@/usr/src/rtai/base/include/asm-arm/rtai_lxrt.h

39 #i‚de‡
_RTAI_ASM_ARM_LXRT_H


40 
	#_RTAI_ASM_ARM_LXRT_H


	)

46 
	#RTAI_SYSCALL_NR
 0x70000000

	)

48 
	#RTAI_SYSCALL_ARGS
 
ARM_r0


	)

49 
	#SET_LXRT_RETVAL_IN_SYSCALL
(
ªtvÆ
) \

50 (*()&
r
->
r0
 = (
ªtvÆ
))

	)

52 
	#LINUX_SYSCALL_NR
 
ARM_ù


	)

53 
	#LINUX_SYSCALL_REG1
 
ARM_r0


	)

54 
	#LINUX_SYSCALL_REG2
 
ARM_r1


	)

55 
	#LINUX_SYSCALL_REG3
 
ARM_r2


	)

56 
	#LINUX_SYSCALL_REG4
 
ARM_r3


	)

57 
	#LINUX_SYSCALL_REG5
 
ARM_r4


	)

58 
	#LINUX_SYSCALL_REG6
 
ARM_r5


	)

59 
	#LINUX_SYSCALL_RETREG
 
ARM_r0


	)

61 
	#NR_sysˇŒs
 322

	)

63 
	#LXRT_DO_IMMEDIATE_LINUX_SYSCALL
(
ªgs
) \

64 dÿ{ } 0)

	)

67 
	#LOW
 0

	)

68 
	#HIGH
 1

	)

71 
	#USE_LINUX_TIMER


	)

72 
	#TIMER_NAME
 
RTAI_TIMER_NAME


	)

73 
	#TIMER_FREQ
 
RTAI_TIMER_FREQ


	)

74 
	#TIMER_LATENCY
 
RTAI_TIMER_LATENCY


	)

75 
	#TIMER_SETUP_TIME
 
RTAI_TIMER_SETUP_TIME


	)

76 
	#ONESHOT_SPAN
 \

77 ((()
RTAI_TIMER_MAXVAL
 * 
RTAI_TSC_FREQ
Ë/ 
RTAI_TIMER_FREQ
)

	)

79 
	#upd©e_löux_timî
(
˝uid
) \

81 i‡(!
	`IS_FUSION_TIMER_RUNNING
()) { \

82 
	`hÆ_≥nd_unc⁄d
(
__ùùe_mach_timîöt
, 
˝uid
); \

84 } 0)

	)

88 
	#IN_INTERCEPT_IRQ_ENABLE
(Ëdÿ{ } 0)

	)

89 
	#IN_INTERCEPT_IRQ_DISABLE
(Ëdÿ{ } 0)

	)

91 
	uπai_lxπ_t
 {

92 
RTIME
 
	mπ
;

93 
	mi
[2];

94 *
	mv
[2];

97 #ifde‡
__˝lu•lus


101 #ifde‡
__KERNEL__


103 
	~<asm/sy°em.h
>

104 
	~<asm/mmu_c⁄ãxt.h
>

108 
ölöe
 

109 
	$_lxπ_c⁄ãxt_swôch
(
èsk_°ru˘
 *
¥ev
, èsk_°ru˘ *
√xt
, 
˝uid
)

111 
	`c⁄ãxt_swôch
(*, *, *);

112 
	`c⁄ãxt_swôch
(0, 
¥ev
, 
√xt
);

113 
	}
}

115 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
Ë{ 
	}
}

116 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
Ë{ 
	}
}

118 
	#π_c›y_‰om_u£r
(
a
, 
b
, 
c
) \

119 –{ 
ªt
 = 
	`__c›y_‰om_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

121 
	#π_c›y_to_u£r
(
a
, 
b
, 
c
) \

122 –{ 
ªt
 = 
	`__c›y_to_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

124 
	#π_put_u£r
 
__put_u£r


	)

125 
	#π_gë_u£r
 
__gë_u£r


	)

127 
	#π_°∫˝y_‰om_u£r
(
a
, 
b
, 
c
) \

128 –{ 
ªt
 = 
	`°∫˝y_‰om_u£r
(
a
, 
b
, 
c
);Ñë; } )

	)

132 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


133 
	#USE_LINUX_SYSCALL


	)

134 
	~<uni°d.h
>

136 #unde‡
USE_LINUX_SYSCALL


137 
	~<asm/πai_ve˘‹s.h
>

140 
	#RTAI_SRQ_SYSCALL_NR
 0x70000000

	)

142 
ölöe
 
	$_πai_lxπ
(
§q
, *
¨gs
)

144 
ªtvÆ
;

145 #ifde‡
USE_LINUX_SYSCALL


146 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

149 
ªtvÆ
 = 
	`RTAI_DO_SWI
(
RTAI_SYS_VECTOR
, (
§q
), (
¨gs
));

151  
ªtvÆ
;

152 
	}
}

154 
ölöe
 
πai_lxπ_t


155 
	$πai_lxπ
(
dynx
, 
lsize
, 
§q
, *
¨g
)

157 
πai_lxπ_t
 
ªtvÆ
;

158 
ªtvÆ
.
π
 = 
	`_πai_lxπ
(
	`ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
), 
¨g
);

159  
ªtvÆ
;

160 
	}
}

162 
	#πai_i›l
(Ëdÿ{ } 0)

	)

166 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/asm-arm/rtai_oldnames.h

44 #i‚de‡
_RTAI_ASM_ARM_OLDNAMES_H


45 
	#_RTAI_ASM_ARM_OLDNAMES_H


	)

47 #ifde‡
__KERNEL__


49 
	#h¨d_˛i
(Ë
	`πai_˛i
()

	)

50 
	#h¨d_°i
(Ë
	`πai_°i
()

	)

51 
	#h¨d_ßve_Êags_™d_˛i
(
x
Ë
	`πai_ßve_Êags_™d_˛i
(x)

	)

52 
	#h¨d_ßve_Êags_˛i
(
x
Ë
	`πai_ßve_Êags_™d_˛i
(x)

	)

53 
	#h¨d_ª°‹e_Êags
(
x
Ë
	`πai_ª°‹e_Êags
(x)

	)

54 
	#h¨d_ßve_Êags
(
x
Ë
	`πai_ßve_Êags
(x)

	)

55 
	#h¨d_˝u_id
 
hÆ_¥o˚ss‹_id


	)

56 
	#this_π_èsk
 
±d


	)

60 #i‚de‡
__RTAI_HAL__


62 
	#tu√d
 
πai_tu«bÀs


	)

63 
	#NR_RT_CPUS
 
RTAI_NR_CPUS


	)

64 
	#RT_TIME_END
 
RTAI_TIME_LIMIT


	)

66 
	#CPU_FREQ
 
RTAI_CPU_FREQ


	)

67 
	#TIMER_8254_IRQ
 
RTAI_TIMER_IRQ


	)

68 
	#FREQ_8254
 
RTAI_TIMER_FREQ


	)

69 
	#LATENCY_8254
 
RTAI_TIMER_LATENCY


	)

70 
	#SETUP_TIME_8254
 
RTAI_TIMER_SETUP_TIME


	)

72 
	#FREQ_APIC
 
RTAI_TIMER_FREQ


	)

73 
	#LATENCY_APIC
 
RTAI_TIMER_LATENCY


	)

74 
	#SETUP_TIME_APIC
 
RTAI_TIMER_SETUP_TIME


	)

75 
	#RTAI_FREQ_APIC
 
RTAI_TIMER_FREQ


	)

77 
	#CALIBRATED_APIC_FREQ
 
RTAI_CALIBRATED_APIC_FREQ


	)

78 
	#CALIBRATED_CPU_FREQ
 
RTAI_CALIBRATED_CPU_FREQ


	)

80 #ifde‡
__KERNEL__


82 #unde‡
rdtsc


83 
	#rdtsc
(Ë
	`πai_rdtsc
()

	)

84 
	#rd_CPU_ts
(Ë
	`πai_rdtsc
()

	)

86 
	#π_£t_πai_å≠_h™dÀr
 
π_£t_å≠_h™dÀr


	)

87 
	#π_mou¡_πai
 
π_mou¡


	)

88 
	#π_umou¡_πai
 
π_umou¡


	)

89 
	#ˇlibøã_8254
 
πai_ˇlibøã_TC


	)

91 
	#uŒdiv
(
a
,
b
,
c
Ë
	`πai_uŒdiv
◊,b,c)

	)

92 
	#imuldiv
(
a
,
b
,
c
Ë
	`πai_imuldiv
◊,b,c)

	)

93 
	#Œimd
(
a
,
b
,
c
Ë
	`πai_Œimd
◊,b,c)

	)

95 
	#π_ª£t_úq_to_sym_mode
(
úq
)

	)

96 
	#π_assign_úq_to_˝u
(
úq
, 
˝u
)

	)

98 #i‚de‡
__˝lu•lus


100 
	~<löux/úq.h
>

102 
ölöe
 

103 
	$π_ªque°_˝u_own_úq
(
úq
, 
π_úq_h™dÀr_t
 
h™dÀr
)

105  
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
NULL
, 0);

106 
	}
}

108 
ölöe
 

109 
	$π_‰ì_˝u_own_úq
(
úq
)

111  
	`π_ªÀa£_úq
(
úq
);

112 
	}
}

	@/usr/src/rtai/base/include/asm-arm/rtai_sched.h

45 #i‚de‡
_RTAI_ASM_ARM_RTAI_SCHED_H


46 
	#_RTAI_ASM_ARM_RTAI_SCHED_H


	)

48 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

49 
	~<asm/¥oc/±ø˚.h
>

51 
	~<asm/±ø˚.h
>

52 
	#I_BIT
 
PSR_I_BIT


	)

55 
	~<πai_schedc‹e.h
>

91 
	#π_exch™ge_èsks
(
ﬁd_èsk
, 
√w_èsk
) \

92 
asm
 volatile( \

108 : [
ﬁdp
] "r" (&
ﬁd_èsk
), \

109 [
√w
] "r" (
√w_èsk
), \

110 [
p§
] "i" (
SVC_MODE
|
I_BIT
) \

112 )

	)

114 
ölöe
 

115 
	$cuºít_domaö_ac˚ss_c⁄åﬁ
()

117 
domaö_ac˚ss_c⁄åﬁ
;

118 
	`asm
("mr¯p15, 0, %0, c3, c0" : "Ù" (
domaö_ac˚ss_c⁄åﬁ
));

119  
domaö_ac˚ss_c⁄åﬁ
;

120 
	}
}

135 
	#öô_¨ch_°ack
() \

137 
èsk
->
°ack
 -= 13; \

138 
èsk
->
°ack
[12] = ()
π_°¨tup
; \

139 
èsk
->
°ack
[ 3] = 
SVC_MODE
; \

140 
èsk
->
°ack
[ 2] = ()
	`cuºít_domaö_ac˚ss_c⁄åﬁ
(); \

141 
èsk
->
°ack
[ 1] = ()
d©a
; \

142 
èsk
->
°ack
[ 0] = ()
π_thªad
; \

143 } 0)

	)

145 
	#DEFINE_LINUX_CR0


	)

146 
	#DEFINE_LINUX_SMP_CR0


	)

148 #ifde‡
CONFIG_RTAI_FP_SUPPORT


149 
	#öô_Â_ív
() \

151 
	`mem£t
(&
èsk
->
Âu_ªg
, 0, (task->fpu_reg)); \

152 }0)

	)

154 
	#öô_Â_ív
()

	)

157 
	#öô_èsk_Âív
(
èsk
Ëdÿ{ 
	`öô_Âív
(—ask)->
Âu_ªg
); } 0)

	)

159 
ölöe
 *

160 
	$gë_°ack_poöãr
()

162 *
•
;

163 
	`asm
("mov %0, sp" : "Ù" (
•
));

164  
•
;

165 
	}
}

170 #i‚de‡
CONFIG_ARCH_AT91


171 
	#DO_TIMER_PROPER_OP
() \

173 
	`πai_timî_úq_ack
(); \

174 } 0)

	)

178 
	#DO_TIMER_PROPER_OP
() \

180 if(
π_≥riodic
) { \

181 
	`πai_©91_upd©e_tsc
(); \

183 } 0)

	)

	@/usr/src/rtai/base/include/asm-arm/rtai_shm.h

41 #i‚de‡
_RTAI_ASM_ARM_SHM_H


42 
	#_RTAI_ASM_ARM_SHM_H


	)

44 #unde‡
__SHM_USE_VECTOR


46 #ifde‡
__KERNEL__


48 
	#RTAI_SHM_HANDLER
 
shm_h™dÀr


	)

49 
	#DEFINE_SHM_HANDLER


	)

53 #ifde‡
__SHM_USE_VECTOR


54 
	~<asm/πai_ve˘‹s.h
>

55 
	#πai_shmrq
(
§q
, 
wh©evî
Ë
	`πai_do_swi
((§q)|(
RTAI_SHM_VECTOR
 << 24), wh©evî)

	)

63 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

65 
ªt
 = 0UL;

66 
pmd_t
 *
pmd
;

67 
±e_t
 *
±ï
, 
±e
;

69 if(!
	`pgd_n⁄e
(*
pgd
)) {

70 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

71 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

72 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

73 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

75 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

77 
±e
 = *
±ï
;

78 if(
	`±e_¥e£¡
(
±e
)){

79 
ªt
 = (Ë
	`∑ge_addªss
(
	`±e_∑ge
(
±e
));

80 
ªt
 |(
adr
&(
PAGE_SIZE
-1));

84  
ªt
;

85 
	}
}

87 #i‚de‡
VMALLOC_VMADDR


88 
	#VMALLOC_VMADDR
(
x
Ë(()(x))

	)

91 
ölöe
 
	$kvút_to_∑
(
adr
)

93 
va
, 
kva
, 
ªt
;

95 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

96 
kva
 = 
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va);

97 
ªt
 = 
	`__∑
(
kva
);

99  
ªt
;

100 
	}
}

	@/usr/src/rtai/base/include/asm-arm/rtai_srq.h

41 #i‚de‡
_RTAI_ASM_ARM_SRQ_H


42 
	#_RTAI_ASM_ARM_SRQ_H


	)

44 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


45 
	#USE_LINUX_SYSCALL


	)

46 
	~<uni°d.h
>

48 #unde‡
USE_LINUX_SYSCALL


49 
	~<asm/πai_ve˘‹s.h
>

52 
	#RTAI_SRQ_SYSCALL_NR
 0x70000000

	)

54 
ölöe
 
	$πai_§q
(
§q
, 
¨gs
)

56 
ªtvÆ
;

57 #ifde‡
USE_LINUX_SYSCALL


58 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

61 
ªtvÆ
 = 
	`RTAI_DO_SWI
(
RTAI_SYS_VECTOR
, (
§q
), (
¨gs
));

63  
ªtvÆ
;

64 
	}
}

66 
ölöe
 
	$πai_›í_§q
(
œbñ
)

68  ()
	`πai_§q
(0, 
œbñ
);

69 
	}
}

	@/usr/src/rtai/base/include/asm-arm/rtai_usi.h

19 #i‚de‡
_RTAI_ASM_USI_H


20 
	#_RTAI_ASM_USI_H


	)

22 
	#USI_SRQ_MASK
 0xFFFFFFF0

	)

24 
	#_STARTUP_IRQ
 1

	)

25 
	#_SHUTDOWN_IRQ
 2

	)

26 
	#_ENABLE_IRQ
 3

	)

27 
	#_DISABLE_IRQ
 4

	)

28 
	#_MASK_AND_ACK_IRQ
 5

	)

29 
	#_ACK_IRQ
 6

	)

30 
	#_UNMASK_IRQ
 7

	)

31 
	#_DISINT
 8

	)

32 
	#_ENINT
 9

	)

33 
	#_SAVE_FLAGS_CLI
 10

	)

34 
	#_RESTORE_FLAGS
 11

	)

36 #ifde‡
__KERNEL__


38 
	$usi_˛i
(
¨g
, *
eÊags
)

40 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

41 
	}
}

43 
	$usi_°i
(
¨g
, *
eÊags
)

45 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

46 
	}
}

48 
	$usi_ßve_Êags_™d_˛i
(
¨g
, *
eÊags
)

50 
Êags
 = *
eÊags
;

51 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

52  
Êags
;

53 
	}
}

55 
	$usi_ª°‹e_Êags
(
Êags
, *
eÊags
)

57 i‡(
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

58 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

60 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

62 
	}
}

64 (*
usi_fun_íåy
[ ])(, *) = {

65 [
_STARTUP_IRQ
] = (*)
π_°¨tup_úq
,

66 [
_SHUTDOWN_IRQ
] = (*)
π_shutdown_úq
,

67 [
_ENABLE_IRQ
] = (*)
π_íabÀ_úq
,

68 [
_DISABLE_IRQ
] = (*)
π_dißbÀ_úq
,

69 [
_MASK_AND_ACK_IRQ
] = (*)
π_mask_™d_ack_úq
,

70 [
_ACK_IRQ
] = (*)
π_ack_úq
,

71 [
_UNMASK_IRQ
] = (*)
π_unmask_úq
,

72 [
_DISINT
] = (*)
usi_˛i
,

73 [
_ENINT
] = (*)
usi_°i
,

74 [
_SAVE_FLAGS_CLI
] = (*)
usi_ßve_Êags_™d_˛i
,

75 [
_RESTORE_FLAGS
] = (*)
usi_ª°‹e_Êags


76 
	}
};

78 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨g
, 
ªtvÆ
, 
p§
, 
ªç©h
) \

79 i‡(
§q
 > 
USI_SRQ_MASK
) { \

80 *(*)&
ªgs
->
ARM_r0
 \

81 
usi_fun_íåy
[
§q
 & ~
USI_SRQ_MASK
](
¨g
, &
ªgs
->
ARM_˝§
); \

84 

	)

	@/usr/src/rtai/base/include/asm-arm/rtai_vectors.h

44 #i‚de‡
_RTAI_ASM_ARM_VECTORS_H


45 
	#_RTAI_ASM_ARM_VECTORS_H


	)

47 
	~<πai_c⁄fig.h
>

64 
	#RTAI_NUM_VECTORS
 16

	)

65 
	#RTAI_SWI_SCNO_MASK
 0x00FFFFF0

	)

66 
	#RTAI_SWI_VEC_MASK
 0x0000000F

	)

68 
	#RTAI_SYS_VECTOR
 0x0

	)

72 
	#RTAI_SHM_VECTOR
 0x2

	)

80 
	#_RTAI_DO_SWI
(
s˙o_magic
, 
§q
, 
∑rg
) ({ \

82 
Œ
; \

84 
low
; \

85 
high
; \

86 } 
l
; \

87 } 
_ªtvÆ
; \

89 
_r0
 
	`asm
 ("r0"Ë()(
§q
); \

90 
_r1
 
	`asm
 ("r1"Ë()(
∑rg
); \

91 
asm
 volatile("swi %[nr]" \

92 : "+r" (
_r0
), "+r" (
_r1
) \

93 : [
ƒ
] "i" (
s˙o_magic
) \

96 
_ªtvÆ
.
l
.
low
 = 
_r0
; \

97 
_ªtvÆ
.
l
.
high
 = 
_r1
; \

99 
_ªtvÆ
.
Œ
; \

100 })

	)

102 #ifde‡
CONFIG_ARCH_PXA


103 
	#RTAI_SWI_SCNO_MAGIC
 0x00404404

	)

104 
	#RTAI_DO_SWI
(
ve˘‹
, 
§q
, 
∑rg
Ë
	`_RTAI_DO_SWI
(
RTAI_SWI_SCNO_MAGIC
, srq,Ö¨g)

	)

106 
	#RTAI_SWI_SCNO_MAGIC
 0x009FFFF0

	)

107 
	#RTAI_DO_SWI
(
ve˘‹
, 
§q
, 
∑rg
Ë
	`_RTAI_DO_SWI
((
RTAI_SWI_SCNO_MAGIC
 | ((ve˘‹Ë& 
RTAI_SWI_VEC_MASK
)), srq,Ö¨g)

	)

	@/usr/src/rtai/base/include/asm-m68k/rtai.h

19 
	~<πai_c⁄fig.h
>

20 
	~<asm/πai_hÆ.h
>

	@/usr/src/rtai/base/include/asm-m68k/rtai_atomic.h

19 #i‚de‡
_RTAI_ASM_M68K_ATOMIC_H


20 
	#_RTAI_ASM_M68K_ATOMIC_H


	)

22 
	~<löux/autoc⁄f.h
>

24 #ifde‡
__KERNEL__


26 
	~<löux/bô›s.h
>

27 
	~<asm/©omic.h
>

28 
	~<asm/sy°em.h
>

30 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

32 
	#©omic_cmpxchg
(
v
, 
ﬁd
, 
√w
Ë(()
	`cmpxchg
(&((v)->
cou¡î
), old,Çew))

	)

33 
	#©omic_xchg
(
v
, 
√w
Ë(
	`xchg
(&((v)->
cou¡î
),Çew))

	)

39 #i‚de‡
likñy


40 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 < 96

41 
	#__buûtö_ex≥˘
(
x
, 
ex≥˘ed_vÆue
Ë(x)

	)

43 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

44 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

47 
	#©omic_t
 

	)

49 
	s__πai_xchg_dummy
 { 
	ma
[100]; };

50 
	#__πai_xg
(
x
Ë((
__πai_xchg_dummy
 *)(x))

	)

52 
ölöe
 
	$©omic_xchg
(vﬁ©ûê*
±r
, 
x
)

54 
tmp
 
	`__asm__
 ("%d0");

55 
__±r
 
	`__asm__
 ("%a1"Ë()
±r
;

56 
__x
 
	`__asm__
 ("%d2"Ë
x
;

57 
__asm__
 
	`__vﬁ©ûe__
 ( "å≠ #13\n\t" : "+d" (
tmp
Ë: "a" (
__±r
), "d" (
__x
) : "memory" );

58  
tmp
;

59 
	}
}

61 
ölöe
 
	$©omic_cmpxchg
(vﬁ©ûê*
±r
, 
o
, 
n
)

63 
¥ev
 
	`__asm__
 ("%d0");

64 
__±r
 
	`__asm__
 ("%a1"Ë()
±r
;

65 
__o
 
	`__asm__
 ("%d2"Ë
o
;

66 
__n
 
	`__asm__
 ("%d3"Ë
n
;

67 
__asm__
 
	`__vﬁ©ûe__
 ( "å≠ #12\n\t" : "+d" (
¥ev
Ë: "a" (
__±r
), "d" (
__o
), "d" (
__n
) : "memory" );

68  
¥ev
;

69 
	}
}

71 
__ölöe__
 
	$©omic_dec_™d_ã°
(
©omic_t
 *
v
)

73 
c
;

74 
__asm__
 
	`__vﬁ©ûe__
("subq»#1,%1; seq %0" : "=d" (
c
), "+m" (*
v
));

75  
c
 != 0;

76 
	}
}

78 
__ölöe__
 
	$©omic_öc
(
©omic_t
 *
v
)

80 
__asm__
 
	`__vﬁ©ûe__
("addq»#1,%0" : "+m" (*
v
));

81 
	}
}

84 #unde‡
ADDR


	@/usr/src/rtai/base/include/asm-m68k/rtai_fpu.h

44 #i‚de‡
_RTAI_ASM_M68K_FPU_H


45 
	#_RTAI_ASM_M68K_FPU_H


	)

47 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


48 #ifde‡
CONFIG_MMU


58 
	#öô_Âu
(
tsk
Ëdÿ{ } 0)

	)

59 
	#ª°‹e_Âu
(
tsk
Ëdÿ{ } 0)

	)

60 
	#ßve_¸0_™d_˛ts
(
x
Ëdÿ{ } 0)

	)

61 
	#ª°‹e_¸0
(
x
Ëdÿ{ } 0)

	)

62 
	#íabÀ_Âu
(Ëdÿ{ } 0)

	)

63 
	#lﬂd_mxc§
(
vÆ
Ëdÿ{ } 0)

	)

64 
	#öô_xÂu
(Ëdÿ{ } 0)

	)

65 
	#ßve_Âív
(
x
Ëdÿ{ } 0)

	)

66 
	#ª°‹e_Âív
(
x
Ëdÿ{ } 0)

	)

67 
	#ª°‹e_èsk_Âív
(
t
Ëdÿ{ } 0)

	)

68 
	#ª°‹e_Âív_lxπ
(
t
Ëdÿ{ } 0)

	)

71 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
Ëdÿ{ } 0)

	)

72 
	#ª°‹e_Â¸
(
Â¸
Ëdÿ{ } 0)

	)

73 
	#öô_h¨d_Âív
(Ëdÿ{ } 0)

	)

74 
	#öô_Âív
(
Âív
Ëdÿ{ } 0)

	)

75 
	#öô_h¨d_Âu
(
 xtsk
Ëdÿ{ } 0)

	)

77 
	sm68k_Âu_ív
 { 
	mÂu_ªg
[1]; } 
	tFPU_ENV
;

84 
	#£t_ xtsk_u£s_Âu
(
 xtsk
Ëdÿ{ } 0)

	)

85 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
Ëdÿ{ } 0)

	)

86 
	# xtsk_u£s_Âu
(
 xtsk
Ë(0)

	)

	@/usr/src/rtai/base/include/asm-m68k/rtai_hal.h

38 #i‚de‡
_RTAI_ASM_M68K_HAL_H


39 
	#_RTAI_ASM_M68K_HAL_H


	)

41 
	~<löux/vîsi⁄.h
>

46 
	#RTAI_SYSCALL_MODE


	)

49 
	#RTAI_DUOSS


	)

50 
	#LOCKED_LINUX_IN_IRQ_HANDLER


	)

51 
	#DOMAIN_TO_STALL
 (
fusi⁄_domaö
)

	)

53 
	~<πai_hÆ_«mes.h
>

54 
	~<asm/πai_ve˘‹s.h
>

55 
	~<πai_ty≥s.h
>

57 
	#RTAI_NR_CPUS
 1

	)

59 
	#FIRST_EXTERNAL_VECTOR
 0x40

	)

61 #i‚de‡
_RTAI_FUSION_H


62 
__ölöe__
 
	$f‚z
 (
w‹d
) {

64 
r
 = 1;

65 i‡(!(
w‹d
 & 0xff)) {

66 
w‹d
 >>= 8;

67 
r
 += 8;

69 i‡(!(
w‹d
 & 0xf)) {

70 
w‹d
 >>= 4;

71 
r
 += 4;

73 i‡(!(
w‹d
 & 3)) {

74 
w‹d
 >>= 2;

75 
r
 += 2;

77 i‡(!(
w‹d
 & 1)) {

78 
w‹d
 >>= 1;

79 
r
 += 1;

81  
r
 - 1;

82 
	}
}

85 
ölöe
 
	$πai_uŒdiv
 (
uŒ
, 
uld
, *
r
) {

86 
qf
, 
rf
, 
q
, 
p
;

87 
tq
, 
rh
;

88 
p
 = 
uŒ
;

89 
q
 = 0;

90 
rf
 = 0x100000000ULL - (
qf
 = 0xFFFFFFFFUL / 
uld
) * uld;

91 
p
 >
uld
) {

92 
q
 +((()(
tq
 = (()(
p
 >> 32)Ë/ 
uld
)) << 32);

93 
rh
 = (()(
p
 >> 32)Ë- 
tq
 * 
uld
;

94 
q
 +
rh
 * 
qf
 + (
tq
 = ()
p
 / 
uld
);

95 
p
 = 
rh
 * 
rf
 + ((Ì - 
tq
 * 
uld
);

97 i‡(
r
)

98 *
r
 = 
p
;

99  
q
;

100 
	}
}

102 
ölöe
 
	$πai_imuldiv
 (
i
, 
mu…
, 
div
) {

105 
ãmp
 = 
i
 * ()
mu…
;

106 
uªsu…
;

107 
c
 = 0;

109 i‡(
ãmp
 < 0)

111 
c
 = ~c;

112 
ãmp
 = -temp;

114 i‡(
div
 < 0)

116 
c
 = ~c;

117 
div
 = -div;

119 
uªsu…
 = 
	`πai_uŒdiv
(()
ãmp
, ()
div
, 
NULL
);

120 i‡(
c
)

121  -()(
uªsu…
 & 0x7FFFFFFF);

123  ()
uªsu…
;

124 
	}
}

126 
ölöe
 
	$πai_Œimd
(
Œ
, 
mu…
, 
div
) {

127 
ªs
, 
tmp
;

128 
r
;

129 
ªs
 = 
	`πai_uŒdiv
(
Œ
,
div
,&
r
Ë* 
mu…
;

130 
tmp
 = 
r
 * ()
mu…
;

131 
ªs
 +
	`πai_uŒdiv
(
tmp
, 
div
, 
NULL
);

132  
ªs
;

133 
	}
}

137 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

138 
	~<löux/sched.h
>

139 
	~<löux/öãºu±.h
>

140 
	~<asm/sy°em.h
>

141 
	~<asm/io.h
>

142 
	~<asm/πai_©omic.h
>

143 
	~<asm/πai_Âu.h
>

144 
	~<πai_åa˚.h
>

146 
	sπai_ªÆtime_úq_s
 {

147 (*
	mh™dÀr
)(
	múq
, *
	mcookõ
);

148 *
	mcookõ
;

149 
	mªtmode
;

150 
	m˝umask
;

151 (*
	múq_ack
)();

160 
ölöe
 
	$ext_úq_ve˘‹
(
úq
)

162 i‡(
úq
 != 2) {

163  (
FIRST_EXTERNAL_VECTOR
 + 
úq
);

165  -
EINVAL
;

166 
	}
}

168 
	#RTAI_DOMAIN_ID
 0x9ac15d93

169 
	#RTAI_NR_TRAPS
 
HAL_NR_FAULTS


	)

170 
	#RTAI_NR_SRQS
 32

	)

172 
	#RTAI_APIC_TIMER_VECTOR
 
RTAI_APIC_HIGH_VECTOR


	)

173 
	#RTAI_APIC_TIMER_IPI
 
RTAI_APIC_HIGH_IPI


	)

174 
	#RTAI_SMP_NOTIFY_VECTOR
 
RTAI_APIC_LOW_VECTOR


	)

175 
	#RTAI_SMP_NOTIFY_IPI
 
RTAI_APIC_LOW_IPI


	)

177 
	#RTAI_TIMER_LINUX_IRQ
 (64+32)

	)

178 
	#RT_TIMER_IRQ
 (64+32)

	)

179 
	#RTAI_FREQ_8254
 
MCF_BUSCLK


	)

180 
	#RTAI_COUNTER_2_LATCH
 0xff„

	)

181 
	#RTAI_LATENCY_8254
 
CONFIG_RTAI_SCHED_8254_LATENCY


	)

182 
	#RTAI_SETUP_TIME_8254
 8011

	)

184 
	#RTAI_TIME_LIMIT
 0x7000000000000000LL

	)

186 
	#πai_˝uid
(Ë
	`hÆ_¥o˚ss‹_id
()

	)

187 
	#πai_tskext
(
idx
Ë
hÆ_tskext
[idx]

	)

190 
	#πai_hw_˛i
(Ë
	`hÆ_hw_˛i
()

	)

191 
	#πai_hw_°i
(Ë
	`hÆ_hw_°i
()

	)

192 
	#πai_hw_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

193 
	#πai_hw_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

194 
	#πai_hw_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

197 
	#πai_˛i
(Ë
	`hÆ_hw_˛i
()

	)

198 
	#πai_°i
(Ë
	`hÆ_hw_°i
()

	)

199 
	#πai_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

200 
	#πai_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

201 
	#πai_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

203 
ölöe
 
hÆ_domaö_°ru˘
 *
	$gë_domaö_poöãr
(
n
)

205 
li°_hód
 *
p
 = 
hÆ_pùñöe
.
√xt
;

206 
hÆ_domaö_°ru˘
 *
d
;

207 
i
 = 0;

208 
p
 !&
hÆ_pùñöe
) {

209 
d
 = 
	`li°_íåy
(
p
, 
hÆ_domaö_°ru˘
, 
p_lök
);

210 i‡(++
i
 =
n
) {

211  
d
;

213 
p
 = 
d
->
p_lök
.
√xt
;

215  (
hÆ_domaö_°ru˘
 *)
i
;

216 
	}
}

218 
	#RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU
 
	`KERNEL_VERSION
(2,6,20)

	)

220 
	#RTAI_LT_KERNEL_VERSION_FOR_IRQDESC
 
	`KERNEL_VERSION
(2,6,23)

	)

222 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


224 
	#ROOT_STATUS_ADR
(
˝uid
Ë(
ùùe_roŸ_°©us
[˝uid])

	)

225 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*
ùùe_roŸ_°©us
[˝uid])

	)

227 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

229 
	`hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
); \

230 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

231 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_lo
[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

232 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
); \

234 } 0)

	)

236 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

238 i‡(
hÆ_roŸ_domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
 != 0) { \

239 
	`πai_˛i
(); \

240 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

242 } 0)

	)

246 
	#ROOT_STATUS_ADR
(
˝uid
Ë(&
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
°©us
))

	)

247 
	#ROOT_STATUS_VAL
(
˝uid
Ë(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
°©us
))

	)

249 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

251 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

252 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_lomask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

253 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_himask
)); \

255 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úqhñd_mask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

257 
	`ùùe_˝udom_v¨
(
domaö
, 
úqÆl
)[
úq
]++; \

258 } 0)

	)

260 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

262 i‡(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
úq≥nd_himask
) != 0) { \

263 
	`πai_˛i
(); \

264 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

266 } 0)

	)

270 
	#hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
Ë
	`hÆ_≥nd_domaö_unc⁄d
(úq, 
hÆ_roŸ_domaö
, cpuid)

	)

272 vﬁ©ûê*
ùùe_roŸ_°©us
[];

274 
	#hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
) \

276 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) { \

277 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
); \

278 
	`πai_°i
(); \

280 } 0)

	)

282 #ifde‡
CONFIG_PREEMPT


283 
	#πai_ßve_™d_lock_¥ìm±_cou¡
() \

284 dÿ{ *
¥˙ç
, 
¥˙t
;Ör˙à
	`xchg
’r˙ç = &
	`¥ìm±_cou¡
(), 1);

	)

285 
	#πai_ª°‹e_¥ìm±_cou¡
() \

286 *
¥˙ç
 = 
¥˙t
; } 0)

	)

288 
	#πai_ßve_™d_lock_¥ìm±_cou¡
();

	)

289 
	#πai_ª°‹e_¥ìm±_cou¡
();

	)

292 (*
	tπ_úq_h™dÀr_t
)(
	túq
, *
	tcookõ
);

294 
	#RTAI_CALIBRATED_CPU_FREQ
 0

	)

295 
	#RTAI_CPU_FREQ
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

297 
	`rdtsc
();

299 
	#πai_rdtsc
(Ë
	`rdtsc
()

	)

301 
	sˇlibøti⁄_d©a
 {

303 
˝u_‰eq
;

304 
≠ic_‰eq
;

305 
œãncy
;

306 
£tup_time_TIMER_CPUNIT
;

307 
£tup_time_TIMER_UNIT
;

308 
timîs_tﬁ
[
RTAI_NR_CPUS
];

311 
	s≠ic_timî_£tup_d©a
 {

313 
mode
;

314 
cou¡
;

317 
π_times
Ñt_times;

319 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

321 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

323 vﬁ©ûê
πai_˝u_lock
[];

326 
	#SET_TASKPRI
(
˝uid
)

	)

327 
	#CLR_TASKPRI
(
˝uid
)

	)

329 
	sπai_swôch_d©a
 {

330 vﬁ©ûê
sÊags
;

331 vﬁ©ûê
lÊags
;

332 } 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

334 
úqªtu∫_t
 
	`πai_brﬂdˇ°_to_loˇl_timîs
(
úq
,

335 *
dev_id
,

336 
±_ªgs
 *
ªgs
);

338 
ölöe
 
	$πai_ßve_Êags_úqbô
()

340 
Êags
;

341 
	`πai_ßve_Êags
(
Êags
);

342  !(
Êags
 & ~
ALLOWINT
);

343 
	}
}

345 
ölöe
 
	$πai_ßve_Êags_úqbô_™d_˛i
()

347 
Êags
;

348 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

349  !(
Êags
 & ~
ALLOWINT
);

350 
	}
}

352 
	#_£nd_sched_ùi
(
de°
)

	)

354 
	#π_•ö_lock
(
lock
)

	)

355 
	#π_•ö_u∆ock
(
lock
)

	)

357 
	#π_•ö_lock_úq
(
lock
Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

358 
	#π_•ö_u∆ock_úq
(
lock
Ëdÿ{ 
	`πai_°i
(); } 0)

	)

360 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

362 
Êags
;

363 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

364  
Êags
;

365 
	}
}

366 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

368 
	#π_gë_globÆ_lock
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

369 
	#π_ªÀa£_globÆ_lock
()

	)

371 
	#π_globÆ_˛i
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

372 
	#π_globÆ_°i
(Ëdÿ{ 
	`πai_°i
(); } 0)

	)

374 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

376 
Êags
;

377 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

378  
Êags
;

379 
	}
}

380 
	#π_globÆ_ª°‹e_Êags
(
Êags
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

382 
	#π_globÆ_ßve_Êags
(
Êags
Ëdÿ{ 
	`πai_ßve_Êags
(*Êags); } 0)

	)

384 
asmlökage
 
π_¥ötk
(c⁄° *
f‹m©
, ...);

385 
asmlökage
 
π_sync_¥ötk
(c⁄° *
f‹m©
, ...);

387 
hÆ_domaö_°ru˘
 
πai_domaö
;

388 
hÆ_domaö_°ru˘
 *
fusi⁄_domaö
;

390 
	#_π_swôch_to_ªÆ_time
(
˝uid
) \

392 
πai_löux_c⁄ãxt
[
˝uid
].
lÊags
 = 
	`xchg
(
	`ROOT_STATUS_ADR
(˝uid), (1 << 
IPIPE_STALL_FLAG
)); \

393 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 1; \

394 
	`hÆ_cuºít_domaö
(
˝uid
Ë&
πai_domaö
; \

395 } 0)

	)

397 
	#π_swôch_to_löux
(
˝uid
) \

399 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

400 
	`hÆ_cuºít_domaö
(
˝uid
Ë
hÆ_roŸ_domaö
; \

401 
	`ROOT_STATUS_VAL
(
˝uid
Ë
πai_löux_c⁄ãxt
[˝uid].
lÊags
; \

402 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 0; \

403 
	`CLR_TASKPRI
(
˝uid
); \

405 } 0)

	)

407 
	#π_swôch_to_ªÆ_time
(
˝uid
) \

409 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

410 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

412 } 0)

	)

414 
	#ack_bad_úq
 
hÆ_ack_sy°em_úq


415 

	)

416 
	#πai_öô_èsk¥i_úqs
(Ëdÿ{ } 0)

	)

418 
ölöe
 
	$π_ßve_swôch_to_ªÆ_time
(
˝uid
)

420 
	`SET_TASKPRI
(
˝uid
);

421 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) {

422 
	`_π_swôch_to_ªÆ_time
(
˝uid
);

426 
	}
}

428 
	#π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
) \

430 i‡(!
sÊags
) { \

431 
	`π_swôch_to_löux
(
˝uid
); \

432 } i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

433 
	`SET_TASKPRI
(
˝uid
); \

434 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

436 } 0)

	)

438 
	#ö_hπ_mode
(
˝uid
Ë(
πai_löux_c⁄ãxt
[˝uid].
sÊags
)

	)

440 
	~<asm/cﬁdfúe.h
>

442 #i‡
deföed
 (
CONFIG_M532x
)

444 
	~<asm/mc·imî.h
>

445 
	#__øw_ªadår
 
__øw_ªadl


	)

446 
	#__øw_wrôëº
 
__øw_wrôñ


	)

448 #ñi‡
deföed
 (
CONFIG_M54455
)

450 
	~<asm/mcf5445x_dtim.h
>

451 
	#__øw_ªadår
 
__øw_ªadl


	)

452 
	#__øw_wrôëº
 
__øw_wrôñ


	)

454 
	#MCFTIMER_BASE1
 
MCF_DTIM0_DTMR


	)

455 
	#MCFTIMER_TRR
 (
MCF_DTIM0_DTRR
 - 
MCF_DTIM0_DTMR
)

	)

456 
	#MCFTIMER_TCN
 (
MCF_DTIM0_DTCN
 - 
MCF_DTIM0_DTMR
)

	)

457 
	#MCFTIMER_TER_CAP
 
MCF_DTIM_DTER_CAP


	)

458 
	#MCFTIMER_TER_REF
 
MCF_DTIM_DTER_REF


	)

459 
	#MCFTIMER_TER
 (
MCF_DTIM0_DTER
 - 
MCF_DTIM0_DTMR
)

	)

460 
	#MCFTIMER_TMR_DISABLE
 0

	)

461 
	#MCFTIMER_TMR
 (
MCF_DTIM0_DTMR
 - MCF_DTIM0_DTMR)

	)

462 
	#MCFTIMER_TMR_ENORI
 
MCF_DTIM_DTMR_ORRI


	)

463 
	#MCFTIMER_TMR_CLK1
 
MCF_DTIM_DTMR_CLK_DIV1


	)

464 
	#MCFTIMER_TMR_ENABLE
 
MCF_DTIM_DTMR_RST_EN


	)

465 
	#MCFTIMER_TMR_RESTART
 
MCF_DTIM_DTMR_RST


	)

466 
	#mcf_£âimîi¸
 
£âimîi¸


	)

469 #îr‹ 
Wrôe
 
hîe
 
wh©
 
you
 
√ed


472 
	#TA
(
a
Ë(
MCF_MBAR
 + 
MCFTIMER_BASE1
 + (a))

	)

474 
ölöe
 
	$π_£t_timî_dñay
 (
dñay
) {

475 i‡(
dñay
) {

476 
	`__øw_wrôëº
(
	`__øw_ªadår
(
	`TA
(
MCFTIMER_TCN
)Ë+ 
dñay
, TA(
MCFTIMER_TRR
));

477 
	`ªad_timî_˙t
();

481 
	`__øw_wrôëº
(
π_smp_times
[0].
öå_time
, 
	`TA
(
MCFTIMER_TRR
));

483 
	}
}

487 
πai_¸ôiˇl_íãr
((*
synch
)());

489 
	`πai_¸ôiˇl_exô
(
Êags
);

491 
	`πai_ˇlibøã_8254
();

493 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
,

494 
pﬁicy
,

495 
¥io
);

497 
	`πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
domaö
, 
evít
, (*
h™dÀr
)(, *));

503 #ifde‡
__KERNEL__


505 
	~<löux/kî√l.h
>

507 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

509 *
	`Œ2a
(
Œ
, *
s
);

511 #ifde‡
__˝lu•lus


515 
	`π_ªque°_úq
(
úq
,

516 (*
h™dÀr
)(
úq
, *
cookõ
),

517 *
cookõ
,

518 
ªtmode
);

520 
	`π_ªÀa£_úq
(
úq
);

522 
	`π_£t_úq_ack
(
úq
, (*
úq_ack
)());

524 
ölöe
 
	`π_ªque°_úq_wack
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
, (*
úq_ack
)())

526 
ªtvÆ
;

527 i‡((
ªtvÆ
 = 
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
cookõ
, 
ªtmode
)) < 0) {

528  
ªtvÆ
;

530  
	`π_£t_úq_ack
(
úq
, 
úq_ack
);

533 
	`π_£t_úq_cookõ
(
úq
, *
cookõ
);

535 
	`π_£t_úq_ªtmode
(
úq
, 
Á°ªt
);

541 
	`π_°¨tup_úq
(
úq
);

543 
	`π_shutdown_úq
(
úq
);

545 
	`π_íabÀ_úq
(
úq
);

547 
	`π_dißbÀ_úq
(
úq
);

549 
	`π_mask_™d_ack_úq
(
úq
);

551 
	`π_unmask_úq
(
úq
);

553 
	`π_ack_úq
(
úq
);

557 
	sdesc_°ru˘
 {

558 *
a
;

561 
desc_°ru˘
 
	`πai_£t_g©e_ve˘‹
 (
ve˘‹
, 
ty≥
, 
d∂
, *
h™dÀr
);

563 
	`πai_ª£t_g©e_ve˘‹
(
ve˘‹
, 
desc_°ru˘
 
e
);

565 
	`π_do_úq
(
úq
);

567 
	`π_ªque°_löux_úq
(
úq
,

568 *
h™dÀr
,

569 *
«me
,

570 *
dev_id
);

572 
	`π_‰ì_löux_úq
(
úq
,

573 *
dev_id
);

575 
	`π_≥nd_löux_úq
(
úq
);

577 
RTAI_SYSCALL_MODE
 
	`u§_π_≥nd_löux_úq
(
úq
);

579 
	`π_≥nd_löux_§q
(
§q
);

581 
	`π_ªque°_§q
(
œbñ
,

582 (*
k_h™dÀr
)(),

583 (*
u_h™dÀr
)());

585 
	`π_‰ì_§q
(
§q
);

587 
	`π_assign_úq_to_˝u
(
úq
,

588 
˝us_mask
);

590 
	`π_ª£t_úq_to_sym_mode
(
úq
);

592 
	`π_ªque°_timî_˝uid
((*
h™dÀr
)(),

593 
tick
,

594 
˝uid
);

596 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, );

598 
	`π_‰ì_timî
();

600 
RT_TRAP_HANDLER
 
	`π_£t_å≠_h™dÀr
(RT_TRAP_HANDLER 
h™dÀr
);

602 
	`π_ªÀa£_πc
();

604 
	`π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
);

606 
	#π_mou¡
()

	)

608 
	#π_umou¡
()

	)

610 (*
	`π_£t_ihook
((*
hook‚
)()))();

614 
ölöe
 
	`π_ªque°_globÆ_úq
(
úq
, (*
h™dÀr
)())

616  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, 0, 0);

619 
ölöe
 
	`π_ªque°_globÆ_úq_ext
(
úq
, (*
h™dÀr
)(), 
cookõ
)

621  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, (*)
cookõ
, 1);

624 
ölöe
 
	`π_£t_globÆ_úq_ext
(
úq
, 
ext
, 
cookõ
)

626 
	`π_£t_úq_cookõ
(
úq
, (*)
cookõ
);

629 
ölöe
 
	`π_‰ì_globÆ_úq
(
úq
)

631  
	`π_ªÀa£_úq
(
úq
);

634 #ifde‡
__˝lu•lus


635 
	}
}

640 
	~<asm/πai_ﬁd«mes.h
>

642 
	#RTAI_DEFAULT_TICK
 100000

	)

643 #ifde‡
CONFIG_RTAI_TRACE


644 
	#RTAI_DEFAULT_STACKSZ
 8192

	)

646 
	#RTAI_DEFAULT_STACKSZ
 1024

	)

654 #i‚de‡
_RTAI_HAL_XN_H


655 
	#_RTAI_HAL_XN_H


	)

659 
	#SET_FUSION_TIMER_RUNNING
()

	)

661 
	#CLEAR_FUSION_TIMER_RUNNING
()

	)

663 
	#IS_FUSION_TIMER_RUNNING
(Ë(0)

	)

665 
	#NON_RTAI_SCHEDULE
(
˝uid
Ëdÿ{ 
	`scheduÀ
(); } 0)

	)

	@/usr/src/rtai/base/include/asm-m68k/rtai_leds.h

21 #i‚de‡
_RTAI_ASM_M68K_LEDS_H


22 
	#_RTAI_ASM_M68K_LEDS_H


	)

24 
	~<asm/io.h
>

26 
ölöe
 
	$Àds_∑Ω‹t_func
(
p‹t
, 
Àds
) {

27 
	`outb
(~
Àds
,
p‹t
);

28 
	}
}

30 
	#LEDS_DEFAULT_FUNC
 
Àds_∑Ω‹t_func


	)

31 
	#LEDS_DEFAULT_PORT
 
MCF_MBAR
 + 
MCFSIM_PADAT


	)

	@/usr/src/rtai/base/include/asm-m68k/rtai_lxrt.h

21 #i‚de‡
_RTAI_ASM_M68K_LXRT_H


22 
	#_RTAI_ASM_M68K_LXRT_H


	)

24 
	~<löux/vîsi⁄.h
>

26 
	~<asm/πai_ve˘‹s.h
>

28 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


29 
	#USE_LINUX_SYSCALL


	)

31 #unde‡
USE_LINUX_SYSCALL


34 
	#RTAI_SYSCALL_NR
 0x70000000

	)

35 
	#RTAI_SYSCALL_CODE
 
d0


36 
	#RTAI_SYSCALL_ARGS
 
d1


37 
	#RTAI_SYSCALL_RETPNT
 
d2


	)

39 
	#LINUX_SYSCALL_NR
 
‹ig_d0


	)

40 
	#LINUX_SYSCALL_REG1
 
d1


	)

41 
	#LINUX_SYSCALL_REG2
 
d2


	)

42 
	#LINUX_SYSCALL_REG3
 
d3


	)

43 
	#LINUX_SYSCALL_REG4
 
d4


	)

44 
	#LINUX_SYSCALL_REG5
 
d5


	)

45 
	#LINUX_SYSCALL_REG6
 
a0


	)

46 
	#LINUX_SYSCALL_RETREG
 
d0


	)

47 
	#LINUX_SYSCALL_FLAGS
 
§


	)

49 
	#LXRT_DO_IMMEDIATE_LINUX_SYSCALL
(
ªgs
) \

51 
ªgs
->
LINUX_SYSCALL_RETREG
 = 
sys_ˇŒ_èbÀ
[ªgs->
LINUX_SYSCALL_NR
](*regs); \

52 } 0)

	)

54 
	#SET_LXRT_RETVAL_IN_SYSCALL
(
ªgs
, 
ªtvÆ
) \

59 } 0)

	)

61 
	#LOW
 0

	)

62 
	#HIGH
 1

	)

64 #i‡
deföed
(
CONFIG_RTAI_RTC_FREQ
) && CONFIG_RTAI_RTC_FREQ >= 2

66 
	#TIMER_NAME
 "RTC"

	)

67 
	#TIMER_FREQ
 
CONFIG_RTAI_RTC_FREQ


	)

68 
	#TIMER_LATENCY
 0

	)

69 
	#TIMER_SETUP_TIME
 0

	)

70 
	#ONESHOT_SPAN
 0

	)

74 
	#USE_LINUX_TIMER


	)

75 
	#TIMER_NAME
 "COLDFIRE TIMER"

	)

76 
	#TIMER_TYPE
 0

	)

77 
	#HRT_LINUX_TIMER_NAME
 "cf_timî"

	)

78 
	#TIMER_FREQ
 
RTAI_FREQ_8254


	)

79 
	#TIMER_LATENCY
 
RTAI_LATENCY_8254


	)

80 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_8254


	)

81 
	#ONESHOT_SPAN
 (
CPU_FREQ
/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 2))

	)

82 
ùùe_timî_run_cou¡
;

83 
	#upd©e_löux_timî
(
˝uid
) \

85 i‡(!
	`IS_FUSION_TIMER_RUNNING
()) { \

86 
__ùùe_ßved_år
 = 
	`__øw_ªadår
(
	`TA
(
MCFTIMER_TCN
)); \

87 
	`hÆ_≥nd_unc⁄d
(
RTAI_TIMER_LINUX_IRQ
, 
˝uid
); \

88 
ùùe_timî_run_cou¡
++;\

90 } 0)

	)

94 
	uπai_lxπ_t
 {

95 
RTIME
 
	mπ
;

96 
	mi
[2];

97 *
	mv
[2];

100 #ifde‡
__˝lu•lus


104 #ifde‡
__KERNEL__


106 
	~<asm/£gmít.h
>

107 
	~<asm/mmu_c⁄ãxt.h
>

109 
	#__LXRT_GET_DATASEG
(
ªg
Ë"movñ $" 
	`STR
(
__USER_DS
Ë",%" #ªg "\n\t"

	)

111 
ölöe
 
	$_lxπ_c⁄ãxt_swôch
 (
èsk_°ru˘
 *
¥ev
, èsk_°ru˘ *
√xt
, 
˝uid
)

113 
	`c⁄ãxt_swôch
(*, *, *);

114 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,19)

115 
¥ev
->
Âu_cou¡î
 = 0;

117 
	`c⁄ãxt_swôch
(0, 
¥ev
, 
√xt
);

118 
	}
}

121 
	#IN_INTERCEPT_IRQ_ENABLE
(Ëdÿ{ 
	`πai_hw_°i
(); } 0)

	)

122 
	#IN_INTERCEPT_IRQ_DISABLE
(Ëdÿ{ 
	`πai_hw_˛i
(); } 0)

	)

124 
	#IN_INTERCEPT_IRQ_ENABLE
(Ëdÿ{ } 0)

	)

125 
	#IN_INTERCEPT_IRQ_DISABLE
(Ëdÿ{ } 0)

	)

128 
	~<löux/¶ab.h
>

130 
	#REG_SP
 
k•


	)

132 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
)

134 
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë
	`kmÆloc
((
thªad_°ru˘
Ë+ ( xtsk->
thªad
.
REG_SP
 & ~(
THREAD_SIZE
 - 1)Ë+ THREAD_SIZE -Ünxtsk->thªad.REG_SP, 
GFP_KERNEL
);

135 *((
thªad_°ru˘
 *)
 xtsk
->
	`πai_tskext
(
TSKEXT2
)Ë xtsk->
thªad
;

137 
	`mem˝y
(
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
Ë, (*)÷nxtsk->
thªad
.
REG_SP
), ( xtsk->thªad.REG_SP & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.REG_SP);

138 
	}
}

140 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
)

142 
 xtsk
->
thªad
 = *((
thªad_°ru˘
 *Ónxtsk->
	`πai_tskext
(
TSKEXT2
));

144 
	`mem˝y
((*)
 xtsk
->
thªad
.
REG_SP
,Ünxtsk->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
Ë, ( xtsk->thªad.REG_SP & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.REG_SP);

145 
	}
}

147 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
)

149 
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë
	`kmÆloc
((
thªad_°ru˘
Ë+ 
THREAD_SIZE
, 
GFP_KERNEL
);

150 *((
thªad_°ru˘
 *)
 xtsk
->
	`πai_tskext
(
TSKEXT2
)Ë xtsk->
thªad
;

151 
	`mem˝y
(
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
), (*)÷nxtsk->
thªad
.
REG_SP
 & ~(
THREAD_SIZE
 - 1)), THREAD_SIZE);

152 
	}
}

154 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
)

156 
 xtsk
->
thªad
 = *((
thªad_°ru˘
 *Ónxtsk->
	`πai_tskext
(
TSKEXT2
));

157 
	`mem˝y
((*)(
 xtsk
->
thªad
.
REG_SP
 & ~(
THREAD_SIZE
 - 1)),Ünxtsk->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
), THREAD_SIZE);

158 
	}
}

161 
	#π_c›y_‰om_u£r
(
a
, 
b
, 
c
) \

162 –{ 
ªt
 = 
	`__c›y_‰om_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

163 
	#π_c›y_to_u£r
(
a
, 
b
, 
c
) \

164 –{ 
ªt
 = 
	`__c›y_to_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

165 
	#π_°∫˝y_‰om_u£r
(
a
, 
b
, 
c
) \

166 –{ 
ªt
 = 
	`°∫˝y_‰om_u£r
(
a
, 
b
, 
c
);Ñë; } )

	)

167 
	#π_put_u£r
 
__put_u£r


	)

168 
	#π_gë_u£r
 
__gë_u£r


	)

172 
	#do_nŸify_ªsume
(
ªgs
, 
_unu£d
, 
thªad_öfo_Êags
) \

174 
	`π_¥ötk
("RTAI-do_notify_resume: Shit!!! \n"); \

175 }

	)

176 
	#RT_DO_SIGNAL
(
ªgs
Ë
	`do_nŸify_ªsume
‘egs, 
NULL
, (
_TIF_SIGPENDING
 | 
_TIF_RESTORE_SIGMASK
));

	)

183 
	~<sys/sysˇŒ.h
>

184 
	~<uni°d.h
>

189 #i‚de‡
CONFIG_MMU


190 
	#mlockÆl
(
asd
Ëdÿ{} 0)

	)

193 
πai_lxπ_t
 
	$_πai_lxπ
(
§q
, *
¨g
)

195 
πai_lxπ_t
 
ªtvÆ
;

196 #ifde‡
USE_LINUX_SYSCALL


197 
	`sysˇŒ
(
RTAI_SYSCALL_NR
, 
§q
, 
¨g
, &
ªtvÆ
);

199 
	`RTAI_DO_TRAP_SYS
(&
ªtvÆ
.
π
, 
§q
, ()
¨g
);

201  
ªtvÆ
;

202 
	}
}

204 
ölöe
 
πai_lxπ_t
 
	$πai_lxπ
(
dynx
, 
lsize
, 
§q
, *
¨g
)

206  
	`_πai_lxπ
(
	`ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
), 
¨g
);

207 
	}
}

209 
	#πai_i›l
(Ëdÿ{ } 0)

	)

213 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/asm-m68k/rtai_oldnames.h

32 #i‚de‡
_RTAI_ASM_M68K_OLDNAMES_H


33 
	#_RTAI_ASM_M68K_OLDNAMES_H


	)

35 #ifde‡
__KERNEL__


37 
	#IFLAG
 
RTAI_IFLAG


	)

38 
	#h¨d_˛i
(Ë
	`πai_˛i
()

	)

39 
	#h¨d_°i
(Ë
	`πai_°i
()

	)

40 
	#h¨d_ßve_Êags_™d_˛i
(
x
Ë
	`πai_ßve_Êags_™d_˛i
(x)

	)

41 
	#h¨d_ª°‹e_Êags
(
x
Ë
	`πai_ª°‹e_Êags
(x)

	)

42 
	#h¨d_ßve_Êags
(
x
Ë
	`πai_ßve_Êags
(x)

	)

43 
	#h¨d_˝u_id
 
hÆ_¥o˚ss‹_id


	)

47 #i‚de‡
__RTAI_HAL__


49 
	#tu√d
 
πai_tu«bÀs


	)

50 
	#NR_RT_CPUS
 
RTAI_NR_CPUS


	)

51 
	#RT_TIME_END
 
RTAI_TIME_LIMIT


	)

53 
	#CPU_FREQ
 
RTAI_CPU_FREQ


	)

54 
	#TIMER_8254_IRQ
 
RTAI_TIMER_LINUX_IRQ


	)

55 
	#FREQ_8254
 
RTAI_FREQ_8254


	)

56 
	#LATENCY_8254
 
RTAI_LATENCY_8254


	)

57 
	#SETUP_TIME_8254
 
RTAI_SETUP_TIME_8254


	)

59 
	#CALIBRATED_CPU_FREQ
 
RTAI_CALIBRATED_CPU_FREQ


	)

61 #ifde‡
__KERNEL__


63 
	#rd_CPU_ts
(Ë
	`πai_rdtsc
()

	)

65 
	#π_£t_πai_å≠_h™dÀr
 
π_£t_å≠_h™dÀr


	)

66 
	#π_mou¡_πai
 
π_mou¡


	)

67 
	#π_umou¡_πai
 
π_umou¡


	)

68 
	#ˇlibøã_8254
 
πai_ˇlibøã_8254


	)

70 
	#uŒdiv
(
a
,
b
,
c
Ë
	`πai_uŒdiv
◊,b,c)

	)

71 
	#imuldiv
(
a
,
b
,
c
Ë
	`πai_imuldiv
◊,b,c)

	)

72 
	#Œimd
(
a
,
b
,
c
Ë
	`πai_Œimd
◊,b,c)

	)

73 
	#u64div32
(
a
,
b
,
c
Ë
	`πai_u64div32c
◊,b,c)

	)

75 #i‚de‡
__˝lu•lus


77 
	~<löux/úq.h
>

98 
ölöe
 
π_ªque°_˝u_own_úq
 (
úq
, (*
h™dÀr
)()) {

100  
	`π_ªque°_úq
(
úq
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

101 
	}
}

103 
ölöe
 
	$π_‰ì_˝u_own_úq
 (
úq
) {

105  
	`π_ªÀa£_úq
(
úq
);

106 
	}
}

	@/usr/src/rtai/base/include/asm-m68k/rtai_sched.h

20 #i‚de‡
_RTAI_ASM_M68K_SCHED_H


21 
	#_RTAI_ASM_M68K_SCHED_H


	)

23 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

24 
__asm__
 
	`__vﬁ©ûe__
( \

37 : "a" (&
ﬁdèsk
Ë, "d" (
√wèsk
) \

38 : "%a1", "mem‹y");

	)

40 
	#öô_¨ch_°ack
() \

42 *--(
èsk
->
°ack
Ë
d©a
; \

43 *--(
èsk
->
°ack
Ë(Ë
π_thªad
; \

44 *--(
èsk
->
°ack
) = 0; \

45 *--(
èsk
->
°ack
Ë(Ë
π_°¨tup
; \

46 } 0)

	)

48 
	#DEFINE_LINUX_CR0


	)

50 
	#DEFINE_LINUX_SMP_CR0
 
löux_smp_¸0
[
NR_RT_CPUS
];

	)

52 
	#öô_èsk_Âív
(
èsk
Ëdÿ{ 
	`öô_Âív
(—ask)->
Âu_ªg
); } 0)

	)

54 
ölöe
 *
	$gë_°ack_poöãr
()

56 *
•
;

57 
asm
 vﬁ©ûê("mov»%%•, %0" : "=d" (
•
));

58  
•
;

59 
	}
}

61 
	#RT_SET_RTAI_TRAP_HANDLER
(
x
Ë
	`π_£t_πai_å≠_h™dÀr
(x)

	)

63 
	#DO_TIMER_PROPER_OP
()

	)

	@/usr/src/rtai/base/include/asm-m68k/rtai_shm.h

19 #i‚de‡
_RTAI_ASM_M68K_SHM_H


20 
	#_RTAI_ASM_M68K_SHM_H


	)

22 
	~<asm/pgèbÀ.h
>

23 
	~<asm/io.h
>

24 
	~<asm/πai_ve˘‹s.h
>

25 
	~<πai_wøµîs.h
>

27 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

28 
	#VMALLOC_VMADDR
(
x
Ë(()(x))

	)

31 #i‚de‡
__KERNEL__


33 
ölöe
 
	$πai_shmrq
(
§q
, 
¨gs
)

35 
ªtvÆ
;

36 
	`RTAI_DO_TRAP_SYS
(&
ªtvÆ
, 
§q
, 
¨gs
);

37  
ªtvÆ
;

38 
	}
}

42 #ifde‡
CONFIG_MMU


47 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

49 i‡(!
	`pgd_n⁄e
(*
pgd
)) {

50 
pmd_t
 *
pmd
;

51 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

52 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

54 
pmd
 = 
	`pmd_off£t
(
	`pud_off£t
(
pgd
, 
adr
),ádr);

56 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

57 
±e_t
 *
±ï
, 
±e
;

58 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

59 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

61 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

63 
±e
 = *
±ï
;

64 i‡(
	`±e_¥e£¡
(
±e
)) {

65  (()
	`∑ge_addªss
(
	`±e_∑ge
(
±e
)Ë| (
adr
 & (
PAGE_SIZE
 - 1)));

70 
	}
}

72 
ölöe
 
	$uvút_to_bus
(
adr
)

74  
	`vút_to_bus
((*)
	`uvút_to_kva
(
	`pgd_off£t
(
cuºít
->
mm
, 
adr
),ádr));

75 
	}
}

77 
ölöe
 
	$kvút_to_bus
(
adr
)

79 
va
;

81 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

82  
	`vút_to_bus
((*)
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va));

83 
	}
}

85 
ölöe
 
	$kvút_to_∑
(
adr
)

87 
va
;

89 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

90  
	`__∑
(
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va));

91 
	}
}

98 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

100  
adr
;

101 
	}
}

103 
ölöe
 
	$uvút_to_bus
(
adr
)

105  
	`vút_to_bus
((*)
adr
);

106 
	}
}

108 
ölöe
 
	$kvút_to_bus
(
adr
)

110 
va
;

112 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

113  
	`vút_to_bus
((*)
va
);

114 
	}
}

116 
ölöe
 
	$kvút_to_∑
(
adr
)

118 
va
;

120 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

121  
	`__∑
(
va
);

122 
	}
}

	@/usr/src/rtai/base/include/asm-m68k/rtai_srq.h

20 #i‚de‡
_RTAI_ASM_M68K_SRQ_H


21 
	#_RTAI_ASM_M68K_SRQ_H


	)

23 #i‚de‡
__KERNEL__


25 
	~<sys/sysˇŒ.h
>

26 
	~<uni°d.h
>

28 
	~<asm/πai_ve˘‹s.h
>

30 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


31 
	#USE_LINUX_SYSCALL


	)

33 #unde‡
USE_LINUX_SYSCALL


36 
	#RTAI_SRQ_SYSCALL_NR
 0x70000001

	)

38 
ölöe
 
	$πai_§q
(
§q
, 
¨gs
)

40 
ªtvÆ
;

41 #ifde‡
USE_LINUX_SYSCALL


42 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

44 
	`RTAI_DO_TRAP_SYS
(&
ªtvÆ
, 
§q
, 
¨gs
);

46  
ªtvÆ
;

47 
	}
}

50 
ölöe
 
	$πai_›í_§q
(
œbñ
)

52  ()
	`πai_§q
(0, 
œbñ
);

53 
	}
}

	@/usr/src/rtai/base/include/asm-m68k/rtai_usi.h

19 #i‚de‡
_RTAI_ASM_M68K_USI_H


20 
	#_RTAI_ASM_M68K_USI_H


	)

22 
	#USI_SRQ_MASK
 0xFFFFFFF0

	)

24 
	#_STARTUP_IRQ
 1

	)

25 
	#_SHUTDOWN_IRQ
 2

	)

26 
	#_ENABLE_IRQ
 3

	)

27 
	#_DISABLE_IRQ
 4

	)

28 
	#_MASK_AND_ACK_IRQ
 5

	)

29 
	#_ACK_IRQ
 6

	)

30 
	#_UNMASK_IRQ
 7

	)

31 
	#_DISINT
 8

	)

32 
	#_ENINT
 9

	)

33 
	#_SAVE_FLAGS_CLI
 10

	)

34 
	#_RESTORE_FLAGS
 11

	)

36 #ifde‡
__KERNEL__


38 #ifde‡
CONFIG_RTAI_USI


40 
	$usi_˛i
(
¨g
, *
eÊags
)

42 *
eÊags
 |~
ALLOWINT
;

43 
	}
}

45 
	$usi_°i
(
¨g
, *
eÊags
)

47 *
eÊags
 &
ALLOWINT
;

48 
	}
}

50 
	$usi_ßve_Êags_™d_˛i
(
¨g
, *
eÊags
)

52 
Êags
 = *
eÊags
;

53 *
eÊags
 |~
ALLOWINT
;

54  
Êags
;

55 
	}
}

57 
	$usi_ª°‹e_Êags
(
Êags
, *
eÊags
)

59 i‡(!(
Êags
 & ~
ALLOWINT
)) {

60 *
eÊags
 &
ALLOWINT
;

62 *
eÊags
 |~
ALLOWINT
;

64 
	}
}

66 (*
usi_fun_íåy
[ ])(, *) = {

67 [
_STARTUP_IRQ
] = (*)
π_°¨tup_úq
,

68 [
_SHUTDOWN_IRQ
] = (*)
π_shutdown_úq
,

69 [
_ENABLE_IRQ
] = (*)
π_íabÀ_úq
,

70 [
_DISABLE_IRQ
] = (*)
π_dißbÀ_úq
,

71 [
_MASK_AND_ACK_IRQ
] = (*)
π_mask_™d_ack_úq
,

72 [
_ACK_IRQ
] = (*)
π_ack_úq
,

73 [
_UNMASK_IRQ
] = (*)
π_unmask_úq
,

74 [
_DISINT
] = (*)
usi_˛i
,

75 [
_ENINT
] = (*)
usi_°i
,

76 [
_SAVE_FLAGS_CLI
] = (*)
usi_ßve_Êags_™d_˛i
,

77 [
_RESTORE_FLAGS
] = (*)
usi_ª°‹e_Êags


78 
	}
};

80 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
) \

81 i‡(
§q
 > 
USI_SRQ_MASK
) { \

82 
l§
 = 
p§
; \

83 *
ªtvÆ
 = 
usi_fun_íåy
[
§q
 & ~
USI_SRQ_MASK
](
¨gs
, &(
l§
)); \

84 
p§
 = ()
l§
; \

85  
ªç©h
; \

86 }

	)

89 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
)

	)

	@/usr/src/rtai/base/include/asm-m68k/rtai_vectors.h

30 #i‚de‡
_RTAI_ASM_M68K_VECTORS_H


31 
	#_RTAI_ASM_M68K_VECTORS_H


	)

33 
	#RTAI_SYS_VECTOR
 43

	)

34 
	#RTAI_CMPXCHG_TRAP_SYS_VECTOR
 44

	)

35 
	#RTAI_XCHG_TRAP_SYS_VECTOR
 45

	)

37 #ifde‡
__KERNEL__


39 
	~<löux/vîsi⁄.h
>

41 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,19)

42 
	~<asm/ùùe.h
>

45 
	~<πai_hÆ_«mes.h
>

46 
	~<πai_c⁄fig.h
>

50 
ölöe
 
	$RTAI_DO_TRAP_SYS
(*
ªt
, 
§q
, 
¨gs
)

52 
__§q
 
	`__asm__
 ("%d0"Ë
§q
;

53 
__¨gs
 
	`__asm__
 ("%d1"Ë
¨gs
;

54 
__ªt1
 
	`__asm__
 ("%d2");

55 
__ªt2
 
	`__asm__
 ("%d3");

56 
__asm__
 
	`__vﬁ©ûe__
 ( "å≠ #11\n\t" : "+d" (
__ªt1
),"+d" (
__ªt2
Ë: "d" (
__§q
), "d" (
__¨gs
) : "memory" );

57 *
ªt
 = 
__ªt1
 + (()
__ªt2
 << 32);

58 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai.h

19 
	~<πai_c⁄fig.h
>

20 
	~<asm/πai_hÆ.h
>

	@/usr/src/rtai/base/include/asm-ppc/rtai_atomic.h

19 #i‚de‡
_RTAI_ASM_PPC_ATOMIC_H


20 
	#_RTAI_ASM_PPC_ATOMIC_H


	)

22 #ifde‡
__KERNEL__


24 
	~<löux/bô›s.h
>

25 
	~<asm/sy°em.h
>

26 
	~<asm/©omic.h
>

28 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,15)

29 
	#©omic_xchg
(
±r
, 
v
Ë
	`xchg
’å,v)

	)

30 
__ölöe__
 
	$©omic_cmpxchg
(*
±r
, 
o
, 
n
)

32 *
p
 = 
±r
;

33  
	`cmpxchg
(
p
, 
o
, 
n
);

34 
	}
}

39 °ru˘ { vﬁ©ûê
	mcou¡î
; } 
	t©omic_t
;

43 #ifde‡
CONFIG_SMP


44 
	#SMP_SYNC
 "sync"

	)

45 
	#SMP_ISYNC
 "\n\tisync"

	)

47 
	#SMP_SYNC
 ""

	)

48 
	#SMP_ISYNC


	)

54 #ifde‡
CONFIG_IBM405_ERR77


55 
	#PPC405_ERR77
(
ø
,
rb
Ë"dcbà" #ø "," #rb ";"

	)

57 
	#PPC405_ERR77
(
ø
,
rb
)

	)

60 
__ölöe__
 
	$©omic_öc
(
©omic_t
 *
v
)

62 
t
;

64 
__asm__
 
	`__vﬁ©ûe__
(

67 
	`PPC405_ERR77
(0,%2)

70 : "=&r" (
t
), "=m" (
v
->
cou¡î
)

71 : "r" (&
v
->
cou¡î
), "m" (v->counter)

73 
	}
}

75 
__ölöe__
 
	$©omic_dec_ªtu∫
(
©omic_t
 *
v
)

77 
t
;

79 
__asm__
 
	`__vﬁ©ûe__
(

82 
	`PPC405_ERR77
(0,%1)

85 
SMP_ISYNC


86 : "=&r" (
t
)

87 : "r" (&
v
->
cou¡î
)

90  
t
;

91 
	}
}

93 
	#©omic_dec_™d_ã°
(
v
Ë(
	`©omic_dec_ªtu∫
((v)Ë=0)

	)

95 
	#__HAVE_ARCH_CMPXCHG
 1

	)

97 
__ölöe__
 

98 
	$__cmpxchg_u32
(vﬁ©ûê*
p
, 
ﬁd
, 
√w
)

100 
¥ev
;

102 
__asm__
 
	`__vﬁ©ûe__
 ("\n\
1:Üwarx %0,0,%2 \n\
 0,%0,%3 \n\
 2f \n"

106 
	`PPC405_ERR77
(0,%2)

109 #ifde‡
CONFIG_SMP


113 : "=&r" (
¥ev
), "=m" (*
p
)

114 : "r" (
p
), "r" (
ﬁd
), "r" (
√w
), "m" (*p)

117  
¥ev
;

118 
	}
}

120 
__ölöe__
 

121 
	$__cmpxchg
(vﬁ©ûê*
±r
, 
ﬁd
, 
√w
, 
size
)

123 
size
) {

125  
	`__cmpxchg_u32
(
±r
, 
ﬁd
, 
√w
);

128  
	`__cmpxchg_u64
(
±r
, 
ﬁd
, 
√w
);

131  
ﬁd
;

132 
	}
}

134 
	#cmpxchg
(
±r
,
o
,
n
) \

136 
	`__ty≥of__
(*(
±r
)Ë
_o_
 = (
o
); \

137 
	`__ty≥of__
(*(
±r
)Ë
_n_
 = (
n
); \

138 (
	`__ty≥of__
(*(
±r
))Ë
	`__cmpxchg
(’å), ()
_o_
, \

139 ()
_n_
, (*(
±r
))); \

140 })

	)

142 
__ölöe__
 
	$©omic_cmpxchg
(*
±r
, 
o
, 
n
)

144 *
p
 = 
±r
;

145  
	`cmpxchg
(
p
, 
o
, 
n
);

146 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai_fpu.h

19 #i‚de‡
_RTAI_ASM_PPC_FPU_H_


20 
	#_RTAI_ASM_PPC_FPU_H_


	)

22 
	~<asm/¥o˚ss‹.h
>

24 
	sµc_Âu_ív
 { 
	mÂu_ªg
[66]; } 
	tFPU_ENV
;

26 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


34 
	#ßve_Â¸_™d_íabÀ_Âu
(
¸0
) \

36 
__asm__
 
	`__vﬁ©ûe__
 ("mfm§ %0": "Ù"(
¸0
)); \

37 
__asm__
 
	`__vﬁ©ûe__
 ("mtm§ %0": : "r"(
¸0
 | 
MSR_FP
): "memory"); \

38 } 0)

	)

40 
	#ª°‹e_Â¸
(
¸0
) \

41 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ("mtm§ %0": : "r"(
¸0
)); } 0)

	)

43 
__ßve_Âív
(*
Âív
);

44 
	#ßve_Âív
(
x
Ë
	`__ßve_Âív
(&(x))

	)

46 
__ª°‹e_Âív
(*
Âív
);

47 
	#ª°‹e_Âív
(
x
Ë
	`__ª°‹e_Âív
(&(x))

	)

49 
	#ª°‹e_èsk_Âív
(
t
) \

50 dÿ{ \ 
	`ª°‹e_Âív
((
t
)->
thªad
.
Âr
); \ } 0)

	)

52 
	#ª°‹e_Âív_lxπ
(
t
Ë
	`ª°‹e_èsk_Âív
—)

	)

54 
	#ª°‹e_Âu
(
tsk
) \

56 
	`giveup_Âu
(
œ°_èsk_u£d_m©h
); \

57 
	`__ª°‹e_Âív
((
tsk
)->
thªad
.
Âr
); \

58 
œ°_èsk_u£d_m©h
 = 
tsk
; \

59 } 0)

	)

61 
	#öô_Âu
(
tsk
) \

62 dÿ{ 
	`ª°‹e_Âu
(
tsk
); } 0)

	)

68 
	#íabÀ_Âu
()

	)

69 
	#ßve_Â¸_™d_íabÀ_Âu
(
x
)

	)

70 
	#ª°‹e_Â¸
(
x
)

	)

71 
	#ßve_Âív
(
x
)

	)

72 
	#ª°‹e_Âív
(
x
)

	)

73 
	#ª°‹e_èsk_Âív
(
t
)

	)

74 
	#ª°‹e_Âív_lxπ
(
t
)

	)

75 
	#ª°‹e_Âu
(
tsk
)

	)

76 
	#öô_Âu
(
tsk
)

	)

81 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

83 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

84 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

85 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

89 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

90 dÿ{ 
	`˛ór_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

91 
	# xtsk_u£s_Âu
(
 xtsk
Ë(
	`tsk_u£d_m©h
÷nxtsk))

	)

95 
	#£t_tsk_u£d_Âu
(
t
Ëdÿ{ } 0)

	)

97 
	#öô_h¨d_Âu
(
 xtsk
Ë
	`ª°‹e_Âu
÷nxtsk)

	)

	@/usr/src/rtai/base/include/asm-ppc/rtai_hal.h

34 #i‚de‡
_RTAI_ASM_PPC_HAL_H


35 
	#_RTAI_ASM_PPC_HAL_H


	)

37 
	#RTAI_SYSCALL_MODE


38 

	)

39 
	#LOCKED_LINUX_IN_IRQ_HANDLER


	)

40 
	#UNWRAPPED_CATCH_EVENT


	)

42 
	~<πai_hÆ_«mes.h
>

43 
	~<asm/πai_ve˘‹s.h
>

44 
	~<πai_ty≥s.h
>

46 #ifde‡
CONFIG_SMP


47 
	#RTAI_NR_CPUS
 
CONFIG_RTAI_CPUS


	)

49 
	#RTAI_NR_CPUS
 1

	)

52 
	#NETRPC_ALIGN_RTIME
(
i
Ë(1 - i%2)

	)

58 
ölöe
 
	$f‚z
(
ul
)

60 
__asm__
 
	`__vﬁ©ûe__
 ("˙ézw %0, %1" : "Ù" (
ul
) : "r" (ul & (-ul)));

61  31 - 
ul
;

62 
	}
}

65 
ölöe
 
	$πai_uŒmul
(
m0
, 
m1
)

67 
ªs
;

68 
__asm__
 
	`__vﬁ©ûe__
 ("mulhwu %0, %1, %2"

69 : "Ù" (((*)(*)&
ªs
)[0])

70 : "%r" (
m0
), "r" (
m1
));

71 ((*)(*)&
ªs
)[1] = 
m0
*
m1
;

72  
ªs
;

73 
	}
}

76 
ölöe
 
	$πai_uŒdiv
(
uŒ
, 
uld
, *
r
)

78 
q
, 
rf
;

79 
qh
, 
rh
, 
ql
, 
qf
;

81 
q
 = 0;

82 
rf
 = ()(0xFFFFFFFF - (
qf
 = 0xFFFFFFFF / 
uld
) * uld) + 1ULL;

83 
uŒ
 >
uld
) {

84 ((*)(*)&
q
)[0] +(
qh
 = ((*)(*)&
uŒ
)[0] / 
uld
);

85 
rh
 = ((*)(*)&
uŒ
)[0] - 
qh
 * 
uld
;

86 
q
 +
rh
 * ()
qf
 + (
ql
 = ((*)(*)&
uŒ
)[1] / 
uld
);

87 
uŒ
 = 
rh
 * 
rf
 + (((*)(*)&uŒ)[1] - 
ql
 * 
uld
);

89 *
r
 = 
uŒ
;

90  
q
;

91 
	}
}

93 
ölöe
 
	$πai_imuldiv
(
i
, 
mu…
, 
div
)

96 
q
, 
r
;

97 
q
 = 
	`πai_uŒdiv
(
	`πai_uŒmul
(
i
, 
mu…
), 
div
, &
r
);

98  (
r
 +ÑË> 
div
 ? 
q
 + 1 : q;

99 
	}
}

101 
ölöe
 
	$πai_Œimd
(
uŒ
, 
mu…
, 
div
)

104 
low
;

105 
q
, 
r
;

107 
low
 = 
	`πai_uŒmul
(((*)(*)&
uŒ
)[1], 
mu…
);

108 
q
 = 
	`πai_uŒdiv
(
	`πai_uŒmul
(((*)(*)&
uŒ
)[0], 
mu…
Ë+ ((*)(*)&
low
)[0], 
div
, (*)(*)&low);

109 
low
 = 
	`πai_uŒdiv
÷ow, 
div
, &
r
);

110 ((*)(*)&
low
)[0] +
q
;

112  (
r
 +ÑË> 
div
 ? 
low
 + 1 :Üow;

113 
	}
}

120 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

121 
	~<löux/sched.h
>

122 
	~<löux/öãºu±.h
>

124 
	~<asm/sy°em.h
>

125 
	~<asm/io.h
>

126 
	~<asm/time.h
>

128 
	~<asm/πai_©omic.h
>

129 
	~<asm/πai_Âu.h
>

130 
	~<πai_åa˚.h
>

132 
	sπai_ªÆtime_úq_s
 {

133 (*
	mh™dÀr
)(
	múq
, *
	mcookõ
);

134 *
	mcookõ
;

135 
	mªtmode
;

136 
	m˝umask
;

137 (*
	múq_ack
)(, *);

140 
	#RTAI_DOMAIN_ID
 0x52544149

	)

141 
	#RTAI_NR_TRAPS
 
HAL_NR_FAULTS


	)

142 
	#RTAI_NR_SRQS
 32

	)

144 
	#RTAI_TIMER_DECR_IRQ
 
IPIPE_VIRQ_BASE


	)

145 
	#RTAI_TIMER_8254_IRQ
 
RTAI_TIMER_DECR_IRQ


	)

146 
	#RTAI_FREQ_DECR
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

147 
	#RTAI_FREQ_8254
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

148 
	#RTAI_LATENCY_8254
 
CONFIG_RTAI_SCHED_8254_LATENCY


	)

149 
	#RTAI_SETUP_TIME_8254
 500

	)

151 
	#RTAI_TIME_LIMIT
 0x7000000000000000LL

	)

153 
	#RTAI_IFLAG
 15

	)

155 
	#πai_˝uid
(Ë
	`hÆ_¥o˚ss‹_id
()

	)

156 
	#πai_tskext
(
idx
Ë
hÆ_tskext
[idx]

	)

159 
	#πai_hw_˛i
(Ë
	`hÆ_hw_˛i
()

	)

160 
	#πai_hw_°i
(Ë
	`hÆ_hw_°i
()

	)

161 
	#πai_hw_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

162 
	#πai_hw_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

163 
	#πai_hw_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

166 
	#πai_˛i
(Ë
	`hÆ_hw_˛i
()

	)

167 
	#πai_°i
(Ë
	`hÆ_hw_°i
()

	)

168 
	#πai_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

169 
	#πai_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

170 
	#πai_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

172 
ölöe
 
hÆ_domaö_°ru˘
 *
	$gë_domaö_poöãr
(
n
)

174 
li°_hód
 *
p
 = 
hÆ_pùñöe
.
√xt
;

175 
hÆ_domaö_°ru˘
 *
d
;

176 
i
 = 0;

177 
p
 !&
hÆ_pùñöe
) {

178 
d
 = 
	`li°_íåy
(
p
, 
hÆ_domaö_°ru˘
, 
p_lök
);

179 i‡(++
i
 =
n
) {

180  
d
;

182 
p
 = 
d
->
p_lök
.
√xt
;

184  (
hÆ_domaö_°ru˘
 *)
i
;

185 
	}
}

187 
	#RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU
 
	`KERNEL_VERSION
(2,6,20)

	)

189 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


191 
	#ROOT_STATUS_ADR
(
˝uid
Ë(
ùùe_roŸ_°©us
[˝uid])

	)

192 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*
ùùe_roŸ_°©us
[˝uid])

	)

194 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

196 
	`hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
); \

197 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

198 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_lo
[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

199 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
); \

201 } 0)

	)

203 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

205 i‡(
hÆ_roŸ_domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
 != 0) { \

206 
	`πai_˛i
(); \

207 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

209 } 0)

	)

213 
	#ROOT_STATUS_ADR
(
˝uid
Ë(&
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
°©us
))

	)

214 
	#ROOT_STATUS_VAL
(
˝uid
Ë(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
°©us
))

	)

216 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

218 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

219 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_lomask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

220 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_himask
)); \

222 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úqhñd_mask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

224 
	`ùùe_˝udom_v¨
(
domaö
, 
úqÆl
)[
úq
]++; \

225 } 0)

	)

227 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

229 i‡(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
úq≥nd_himask
) != 0) { \

230 
	`πai_˛i
(); \

231 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

233 } 0)

	)

237 
	#hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
Ë
	`hÆ_≥nd_domaö_unc⁄d
(úq, 
hÆ_roŸ_domaö
, cpuid)

	)

239 vﬁ©ûê*
ùùe_roŸ_°©us
[];

241 
	#hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
) \

243 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) { \

244 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
); \

245 
	`πai_°i
(); \

247 } 0)

	)

249 #ifde‡
CONFIG_PREEMPT


250 
	#πai_ßve_™d_lock_¥ìm±_cou¡
() \

251 dÿ{ *
¥˙ç
, 
¥˙t
;Ör˙à
	`xchg
’r˙ç = &
	`¥ìm±_cou¡
(), 1);

	)

252 
	#πai_ª°‹e_¥ìm±_cou¡
() \

253 *
¥˙ç
 = 
¥˙t
; } 0)

	)

255 
	#πai_ßve_™d_lock_¥ìm±_cou¡
();

	)

256 
	#πai_ª°‹e_¥ìm±_cou¡
();

	)

259 (*
	tπ_úq_h™dÀr_t
)(
	túq
, *
	tcookõ
);

261 
	#RTAI_CALIBRATED_CPU_FREQ
 0

	)

262 
	#RTAI_CPU_FREQ
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

264 
	sˇlibøti⁄_d©a
 {

265 
˝u_‰eq
;

266 
≠ic_‰eq
;

267 
œãncy
;

268 
£tup_time_TIMER_CPUNIT
;

269 
£tup_time_TIMER_UNIT
;

270 
timîs_tﬁ
[
RTAI_NR_CPUS
];

273 
π_times
Ñt_times;

274 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

275 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

276 vﬁ©ûê
πai_˝u_ªÆtime
;

277 vﬁ©ûê
πai_˝u_lock
[];

279 
	#SET_TASKPRI
(
˝uid
)

	)

280 
	#CLR_TASKPRI
(
˝uid
)

	)

282 
	sπai_swôch_d©a
 {

283 vﬁ©ûê
sÊags
;

284 vﬁ©ûê
lÊags
;

285 } 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

287 
ölöe
 
	$πai_ßve_Êags_úqbô
()

289 
Êags
;

290 
	`πai_ßve_Êags
(
Êags
);

291  
Êags
 & (1 << 
RTAI_IFLAG
);

292 
	}
}

294 
ölöe
 
	$πai_ßve_Êags_úqbô_™d_˛i
()

296 
Êags
;

297 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

298  
Êags
 & (1 << 
RTAI_IFLAG
);

299 
	}
}

301 #ifde‡
CONFIG_SMP


303 
	#SCHED_VECTOR
 
RTAI_SMP_NOTIFY_VECTOR


	)

304 
	#SCHED_IPI
 
RTAI_SMP_NOTIFY_IPI


	)

306 
	#_£nd_sched_ùi
(
de°
Ëdÿ{ 
	`mb
(); 
	`mpic_£nd_ùi
(0x2, de°); } 0)

	)

308 #ifde‡
CONFIG_PREEMPT


309 
	#π_•ö_lock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_lock
÷ock); b¨rõr(); } 0)

	)

310 
	#π_•ö_u∆ock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_u∆ock
÷ock); b¨rõr(); } 0)

	)

312 
	#π_•ö_lock
(
lock
Ë
	`•ö_lock
÷ock)

	)

313 
	#π_•ö_u∆ock
(
lock
Ë
	`•ö_u∆ock
÷ock)

	)

316 
ölöe
 
	$π_•ö_lock_hw_úq
(
•ölock_t
 *
lock
)

318 
	`πai_hw_˛i
();

319 
	`π_•ö_lock
(
lock
);

320 
	}
}

322 
ölöe
 
	$π_•ö_u∆ock_hw_úq
(
•ölock_t
 *
lock
)

324 
	`π_•ö_u∆ock
(
lock
);

325 
	`πai_hw_°i
();

326 
	}
}

328 
ölöe
 
	$π_•ö_lock_hw_úqßve
(
•ölock_t
 *
lock
)

330 
Êags
;

331 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

332 
	`π_•ö_lock
(
lock
);

333  
Êags
;

334 
	}
}

336 
ölöe
 
	$π_•ö_u∆ock_hw_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

338 
	`π_•ö_u∆ock
(
lock
);

339 
	`πai_hw_ª°‹e_Êags
(
Êags
);

340 
	}
}

342 
ölöe
 
	$π_•ö_lock_úq
(
•ölock_t
 *
lock
)

344 
	`πai_˛i
();

345 
	`π_•ö_lock
(
lock
);

346 
	}
}

348 
ölöe
 
	$π_•ö_u∆ock_úq
(
•ölock_t
 *
lock
)

350 
	`π_•ö_u∆ock
(
lock
);

351 
	`πai_°i
();

352 
	}
}

354 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

356 
Êags
;

357 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

358 
	`π_•ö_lock
(
lock
);

359  
Êags
;

360 
	}
}

362 
ölöe
 
	$π_•ö_u∆ock_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

364 
	`π_•ö_u∆ock
(
lock
);

365 
	`πai_loˇl_úq_ª°‹e
(
Êags
);

366 
	}
}

368 #i‡
RTAI_NR_CPUS
 > 0

370 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

372 
vÆ
, 
ow√r
;

375 
vÆ
 = 
lock
[1];

376 } 
	`cmpxchg
(&
lock
[1], 
vÆ
, (val + 0x10000) & 0x7FFF7FFF) != val);

378 
vÆ
 = 
	`©omic_add_ªtu∫
(0x10000, (
©omic_t
 *)&
lock
[1]) - 0x10000;

380 i‡((
ow√r
 = (
vÆ
 & 0x7FFF0000) >> 16) != (val & 0x7FFF)) {

381 (
lock
[1] & 0x7FFFË!
ow√r
) {

382 
	`˝u_ªœx
();

385 
	}
}

387 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

389 
vÆ
;

391 
vÆ
 = 
lock
[1];

392 
	`˝u_ªœx
();

393 } 
	`cmpxchg
(&
lock
[1], 
vÆ
, (val + 1) & 0x7FFF7FFF) != val);

394 
	}
}

398 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

400 
	`ã°_™d_£t_bô
(31, 
lock
)) {

401 
	`˝u_ªœx
();

403 
	`b¨rõr
();

404 
	}
}

406 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

408 
	`ã°_™d_˛ór_bô
(31, 
lock
);

409 
	`˝u_ªœx
();

410 
	}
}

414 
ölöe
 
	$π_gë_globÆ_lock
()

416 
	`b¨rõr
();

417 
	`πai_˛i
();

418 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

419 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

421 
	`b¨rõr
();

422 
	}
}

424 
ölöe
 
	$π_ªÀa£_globÆ_lock
()

426 
	`b¨rõr
();

427 
	`πai_˛i
();

428 i‡(
	`ã°_™d_˛ór_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

429 
	`πai_•ö_gu∆ock
(&
πai_˝u_lock
[0]);

431 
	`b¨rõr
();

432 
	}
}

446 
ölöe
 
	$π_globÆ_˛i
()

448 
	`π_gë_globÆ_lock
();

449 
	}
}

457 
ölöe
 
	$π_globÆ_°i
()

459 
	`π_ªÀa£_globÆ_lock
();

460 
	`πai_°i
();

461 
	}
}

469 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

471 
Êags
;

473 
	`b¨rõr
();

474 
Êags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

475 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

476 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

477 
	`b¨rõr
();

478  
Êags
 | 1;

480 
	`b¨rõr
();

481  
Êags
;

482 
	}
}

491 
ölöe
 
	$π_globÆ_ßve_Êags
(*
Êags
)

493 
hÊags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

495 *
Êags
 = 
	`ã°_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0]Ë? 
hÊags
 : hflags | 1;

496 i‡(
hÊags
) {

497 
	`πai_°i
();

499 
	}
}

508 
ölöe
 
	$π_globÆ_ª°‹e_Êags
(
Êags
)

510 
	`b¨rõr
();

511 i‡(
	`ã°_™d_˛ór_bô
(0, &
Êags
)) {

512 
	`π_ªÀa£_globÆ_lock
();

514 
	`π_gë_globÆ_lock
();

516 i‡(
Êags
) {

517 
	`πai_°i
();

519 
	`b¨rõr
();

520 
	}
}

524 
	#_£nd_sched_ùi
(
de°
)

	)

526 
	#π_•ö_lock
(
lock
)

	)

527 
	#π_•ö_u∆ock
(
lock
)

	)

529 
	#π_•ö_lock_úq
(
lock
Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

530 
	#π_•ö_u∆ock_úq
(
lock
Ëdÿ{ 
	`πai_°i
(); } 0)

	)

532 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

534 
Êags
;

535 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

536  
Êags
;

537 
	}
}

538 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

540 
	#π_gë_globÆ_lock
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

541 
	#π_ªÀa£_globÆ_lock
()

	)

543 
	#π_globÆ_˛i
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

544 
	#π_globÆ_°i
(Ëdÿ{ 
	`πai_°i
(); } 0)

	)

546 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

548 
Êags
;

549 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

550  
Êags
;

551 
	}
}

552 
	#π_globÆ_ª°‹e_Êags
(
Êags
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

554 
	#π_globÆ_ßve_Êags
(
Êags
Ëdÿ{ 
	`πai_ßve_Êags
(*Êags); } 0)

	)

563 
hÆ_domaö_°ru˘
 
πai_domaö
;

565 
	#_π_swôch_to_ªÆ_time
(
˝uid
) \

567 
πai_löux_c⁄ãxt
[
˝uid
].
lÊags
 = 
	`xchg
((*)
	`ROOT_STATUS_ADR
(˝uid), (1 << 
IPIPE_STALL_FLAG
)); \

568 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 1; \

569 
	`hÆ_cuºít_domaö
(
˝uid
Ë&
πai_domaö
; \

570 } 0)

	)

572 
	#π_swôch_to_löux
(
˝uid
) \

574 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

575 
	`hÆ_cuºít_domaö
(
˝uid
Ë
hÆ_roŸ_domaö
; \

576 
	`ROOT_STATUS_VAL
(
˝uid
Ë
πai_löux_c⁄ãxt
[˝uid].
lÊags
; \

577 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 0; \

578 
	`CLR_TASKPRI
(
˝uid
); \

580 } 0)

	)

582 
	#π_swôch_to_ªÆ_time
(
˝uid
) \

584 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

585 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

587 } 0)

	)

589 
	#πai_gë_öå_h™dÀr
(
v
)

	)

590 
	#πai_öô_èsk¥i_úqs
()

	)

592 
ölöe
 
	$π_ßve_swôch_to_ªÆ_time
(
˝uid
)

594 
	`SET_TASKPRI
(
˝uid
);

595 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) {

596 
	`_π_swôch_to_ªÆ_time
(
˝uid
);

600 
	}
}

602 
	#π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
) \

604 i‡(!
sÊags
) { \

605 
	`π_swôch_to_löux
(
˝uid
); \

606 } i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

607 
	`SET_TASKPRI
(
˝uid
); \

608 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

610 } 0)

	)

612 
	#ö_hπ_mode
(
˝uid
Ë(
πai_löux_c⁄ãxt
[˝uid].
sÊags
)

	)

618 
ölöe
 
	$πai_rdtsc
 ()

620 
ts
;

621 
chk
;

623 
__asm__
 
	`__vﬁ©ûe__
 ("1: mftbu %0\n"

628 : "Ù" (((*)&
ts
)[0]),

629 "Ù" (((*)&
ts
)[1]),

630 "Ù" (
chk
));

631  
ts
;

632 
	}
}

634 
ölöe
 
	$π_£t_timî_dñay
 (
dñay
)

637 i‡(
dñay
 == 0) {

638 #ifde‡
CONFIG_40x


641 (
dñay
 = 
π_times
.
öå_time
 - 
	`πai_rdtsc
()) <= 0) {

642 
π_times
.
öå_time
 +π_times.
≥riodic_tick
;

646 #ifde‡
CONFIG_40x


647 
	`mt•r
(
SPRN_PIT
, 
dñay
);

649 
	`£t_dec
(
dñay
);

651 
	}
}

653 
ölöe
 
	$πai_dißrm_de¸
(
˝uid
, 
mode
)

655 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,23)

656 
	`≥r_˝u
(
dißrm_de¸
, 
˝uid
Ë
mode
;

658 
dißrm_de¸
[
˝uid
] = 
mode
;

660 
	}
}

666 
πai_¸ôiˇl_íãr
((*
synch
)());

667 
	`πai_¸ôiˇl_exô
(
Êags
);

669 
	`πai_ˇlibøã_8254
();

670 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
);

671 
	`πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
ùd
, 
evít
, (*
h™dÀr
)(, *));

680 
	s≠ic_timî_£tup_d©a
 {

681 
mode
;

682 
cou¡
;

685 #ifde‡
__KERNEL__


687 
	~<löux/kî√l.h
>

689 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

691 *
	`Œ2a
(
Œ
, *
s
);

693 #ifde‡
__˝lu•lus


700 
	`π_ªque°_úq
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
);

701 
	`π_ªÀa£_úq
(
úq
);

702 
	`π_£t_úq_ack
(
úq
, (*
úq_ack
)());

703 
	`π_£t_úq_cookõ
(
úq
, *
cookõ
);

704 
	`π_£t_úq_ªtmode
(
úq
, 
ªtmode
);

706 
ölöe
 
	`π_ªque°_úq_wack
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
, (*
úq_ack
)())

708 
ªtvÆ
;

709 i‡((
ªtvÆ
 = 
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
cookõ
, 
ªtmode
)) < 0) {

710  
ªtvÆ
;

712  
	`π_£t_úq_ack
(
úq
, 
úq_ack
);

720 
	`π_°¨tup_úq
(
úq
);

721 
	`π_shutdown_úq
(
úq
);

723 
	`π_íabÀ_úq
(
úq
);

724 
	`π_dißbÀ_úq
(
úq
);

725 
	`π_mask_™d_ack_úq
(
úq
);

726 
	`π_unmask_úq
(
úq
);

727 
	`π_ack_úq
(
úq
);

728 
	`π_íd_úq
(
úq
);

735 
	`π_ªque°_löux_úq
(
úq
, *
h™dÀr
, *
«me
, *
dev_id
);

736 
	`π_‰ì_löux_úq
(
úq
, *
dev_id
);

737 
	`π_≥nd_löux_úq
(
úq
);

738 
RTAI_SYSCALL_MODE
 
	`u§_π_≥nd_löux_úq
(
úq
);

739 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
, 
pﬁicy
, 
¥io
);

745 
	`π_≥nd_löux_§q
(
§q
);

746 
	`π_ªque°_§q
 (
œbñ
, (*
k_h™dÀr
)(), (*
u_h™dÀr
)());

747 
	`π_‰ì_§q
(
§q
);

749 
	`π_assign_úq_to_˝u
(
úq
, 
˝us_mask
);

750 
	`π_ª£t_úq_to_sym_mode
(
úq
);

751 
	`π_ªque°_timî_˝uid
((*
h™dÀr
)(), 
tick
, 
˝uid
);

757 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, 
u£_≠ic
);

758 
	`π_‰ì_timî
();

760 
	`π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
);

761 
	`π_ªÀa£_πc
();

767 
RT_TRAP_HANDLER
 
	`π_£t_å≠_h™dÀr
(RT_TRAP_HANDLER 
h™dÀr
);

768 (*
	`π_£t_ihook
((*
hook‚
)()))();

770 
RTIME
 
	`rd_8254_ts
();

771 
	`π_£tup_8254_tsc
();

777 
	`π_¥ötk
(c⁄° *
f‹m©
, ...);

778 
	`π_sync_¥ötk
(c⁄° *
f‹m©
, ...);

780 #ifde‡
__˝lu•lus


781 
	}
}

786 
	~<asm/πai_ﬁd«mes.h
>

788 
	#RTAI_DEFAULT_TICK
 100000

	)

790 #ifde‡
CONFIG_RTAI_TRACE


791 
	#RTAI_DEFAULT_STACKSZ
 8192

	)

793 
	#RTAI_DEFAULT_STACKSZ
 4092

	)

798 #i‚de‡
_RTAI_HAL_XN_H


799 
	#_RTAI_HAL_XN_H


	)

801 
	#__ønge_ok
(
addr
, 
size
Ë(
	`__ønge_nŸ_ok
◊ddr,sizeË=0)

	)

803 
	#NON_RTAI_SCHEDULE
(
˝uid
Ëdÿ{ 
	`scheduÀ
(); } 0)

	)

807 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

809 #i‚de‡
_ASM_GENERIC_DIV64_H


810 
	#_ASM_GENERIC_DIV64_H


	)

831 #i‡
BITS_PER_LONG
 == 64

833 
	#do_div
(
n
,
ba£
) ({ \

834 
uöt32_t
 
__ba£
 = (
ba£
); \

835 
uöt32_t
 
__ªm
; \

836 
__ªm
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

837 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

838 
__ªm
; \

839 })

	)

841 #ñi‡
BITS_PER_LONG
 == 32

843 
uöt32_t
 
__div64_32
(
uöt64_t
 *
dividíd
, uöt32_à
divis‹
);

848 
	#do_div
(
n
,
ba£
) ({ \

849 
uöt32_t
 
__ba£
 = (
ba£
); \

850 
uöt32_t
 
__ªm
; \

851 ()(((
	`ty≥of
((
n
)Ë*)0Ë=((
uöt64_t
 *)0)); \

852 i‡(
	`likñy
(((
n
) >> 32) == 0)) { \

853 
__ªm
 = (
uöt32_t
)(
n
Ë% 
__ba£
; \

854 (
n
Ë(
uöt32_t
)“Ë/ 
__ba£
; \

856 
__ªm
 = 
	`__div64_32
(&(
n
), 
__ba£
); \

857 
__ªm
; \

858 })

	)

	@/usr/src/rtai/base/include/asm-ppc/rtai_legacy.h

20 #i‚de‡
_RTAI_ASM_PPC_RTAI_H_


21 
	#_RTAI_ASM_PPC_RTAI_H_


	)

23 
	~<πai_ty≥s.h
>

26 
	#LATENCY_DECR
 2500

	)

27 
	#SETUP_TIME_DECR
 500

	)

30 
	#CPU_FREQ
 (
tu√d
.
˝u_‰eq
)

	)

31 
	#FREQ_DECR
 
CPU_FREQ


	)

32 
	#CALIBRATED_CPU_FREQ
 0

33 

	)

35 
	#FREQ_8254
 
FREQ_DECR


	)

36 
	#FREQ_APIC
 
FREQ_DECR


	)

37 
	#LATENCY_8254
 3000

	)

38 
	#SETUP_TIME_8254
 500

	)

39 
	#TIMER_8254_IRQ
 0xFFFFFFFF

	)

41 
	#IFLAG
 15

	)

43 
	#RTAI_NR_TRAPS
 32

	)

46 
	#RTAI_1_IPI
 6

	)

47 
	#RTAI_2_IPI
 7

	)

48 
	#RTAI_3_IPI
 8

	)

49 
	#RTAI_4_IPI
 9

	)

51 
	#RTAI_1_VECTOR
 0xD9

	)

52 
	#RTAI_2_VECTOR
 0xE1

	)

53 
	#RTAI_3_VECTOR
 0xE9

	)

54 
	#RTAI_4_VECTOR
 0xF1

	)

56 
	#RT_TIME_END
 0x7FFFFFFFFFFFFFFFLL

	)

58 #ifde‡
INLINE_MATH


59 
uŒmul
(
m0
, 
m1
);

60 
uŒdiv
(
uŒ
, 
uld
, *
r
);

61 
imuldiv
(
i
, 
mu…
, 
div
);

62 
Œimd
(
uŒ
, 
mu…
, 
div
);

65 
ölöe
 
	$uŒmul
(
m0
, 
m1
)

67 
ªs
;

69 
__asm__
 
	`__vﬁ©ûe__
 ("mulhwu %0, %1, %2"

70 : "Ù" (((*)&
ªs
)[0]Ë: "%r" (
m0
), "r" (
m1
));

71 ((*)&
ªs
)[1] = 
m0
*
m1
;

73  
ªs
;

75 
	}
}

78 
ölöe
 
	$uŒdiv
(
uŒ
, 
uld
, *
r
)

80 
q
, 
rf
;

81 
qh
, 
rh
, 
ql
, 
qf
;

83 
q
 = 0;

84 
rf
 = ()(0xFFFFFFFF - (
qf
 = 0xFFFFFFFF / 
uld
) * uld) + 1ULL;

86 
uŒ
 >
uld
) {

87 ((*)&
q
)[0] +(
qh
 = ((*)&
uŒ
)[0] / 
uld
);

88 
rh
 = ((*)&
uŒ
)[0] - 
qh
 * 
uld
;

89 
q
 +
rh
 * ()
qf
 + (
ql
 = ((*)&
uŒ
)[1] / 
uld
);

90 
uŒ
 = 
rh
 * 
rf
 + (((*)&uŒ)[1] - 
ql
 * 
uld
);

93 *
r
 = 
uŒ
;

94  
q
;

95 
	}
}

97 
ölöe
 
	$imuldiv
(
i
, 
mu…
, 
div
)

99 
q
, 
r
;

101 
q
 = 
	`uŒdiv
(
	`uŒmul
(
i
, 
mu…
), 
div
, &
r
);

103  (
r
 +ÑË> 
div
 ? 
q
 + 1 : q;

104 
	}
}

106 
ölöe
 
	$Œimd
(
uŒ
, 
mu…
, 
div
)

108 
low
;

109 
q
, 
r
;

111 
low
 = 
	`uŒmul
(((*)&
uŒ
)[1], 
mu…
);

112 
q
 = 
	`uŒdiv
–
	`uŒmul
(((*)&
uŒ
)[0], 
mu…
Ë+ ((*)&
low
)[0], 
div
, (*)&low);

113 
low
 = 
	`uŒdiv
÷ow, 
div
, &
r
);

114 ((*)&
low
)[0] +
q
;

116  (
r
 +ÑË> 
div
 ? 
low
 + 1 :Üow;

117 
	}
}

120 #ifde‡
__KERNEL__


122 #i‚de‡
__˝lu•lus


123 
	~<löux/ty≥s.h
>

124 
	~<löux/πc.h
>

125 
	~<asm/time.h
>

126 
	~<löux/kî√l.h
>

127 
	~<löux/smp.h
>

128 
	~<löux/úq.h
>

129 
	~<asm/∑ge.h
>

130 
	~<asm/±ø˚.h
>

131 
	~<asm/hw_úq.h
>

132 
	~<asm/¥o˚ss‹.h
>

133 
	~<asm/bô›s.h
>

134 
	~<asm/πai_Âu.h
>

135 
	~<asm/πai_©omic.h
>

139 #i‡
deföed
(
CONFIG_PPC
)

140 
	#LPT_OUTB
(
v
Ëdÿ{ } 0)

	)

142 
	#LPT_OUTB
(
v
Ëdÿ{ 
	`outb
(v,0x378); } 0)

	)

145 
	s≠ic_timî_£tup_d©a
 { 
	mmode
, 
	mcou¡
; };

147 
	sdesc_°ru˘
 { *
	mfun
; };

149 vﬁ©ûê*
locked_˝us
;

151 
£nd_ùi_sh‹th™d
(
sh‹th™d
, 
úq
);

152 
£nd_ùi_logiˇl
(
de°
, 
úq
);

153 
	#π_assign_úq_to_˝u
(
úq
, 
˝u
)

	)

154 
	#π_ª£t_úq_to_sym_mode
(
úq
)

	)

155 
π_ªque°_globÆ_úq
(
úq
, (*
h™dÀr
)(irq));

156 
	`π_ªque°_globÆ_úq_¨g
(
úq
,

157 (*
h™dÀr
)(,*,
±_ªgs
 *),

158 
Êags
,c⁄° *
dev
,*
dev_id
);

159 
	`π_ªque°_globÆ_úq_ext
(
úq
,

160 (*
h™dÀr
)(
úq
, handler),

161 
d©a
);

162 
	`π_£t_globÆ_úq_ext
(
úq
, 
ext
, 
d©a
);

163 
	`π_‰ì_globÆ_úq
(
úq
);

164 
	`π_ack_úq
(
úq
);

165 
	`π_mask_™d_ack_úq
(
úq
);

166 
	`π_unmask_úq
(
úq
);

167 
	`π_°¨tup_úq
(
úq
);

168 
	`π_shutdown_úq
(
úq
);

169 
	`π_íabÀ_úq
(
úq
);

170 
	`π_dißbÀ_úq
(
úq
);

171 
	`π_ªque°_löux_úq
(
úq
,

172 (*
löux_h™dÀr
)(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
),

173 *
löux_h™dÀr_id
, *
dev_id
);

174 
	`π_‰ì_löux_úq
(
úq
, *
dev_id
);

175 
	`π_≥nd_löux_úq
(
úq
);

176 
	`π_tick_löux_timî
();

177 
desc_°ru˘
 
	`π_£t_fuŒ_öå_ve˘
(
ve˘‹
, 
ty≥
, 
d∂
, *
h™dÀr
);

178 
	`π_ª£t_fuŒ_öå_ve˘
(
ve˘‹
, 
desc_°ru˘
 
idt_ñemít
);

179 
	#π_£t_öå_h™dÀr
(
ve˘‹
, 
h™dÀr
Ë((*)0)

	)

180 
	#π_ª£t_öå_h™dÀr
(
ve˘‹
, 
h™dÀr
)

	)

181 
	`π_ªque°_§q
(
œbñ
, (*
πai_h™dÀr
)(), (*
u£r_h™dÀr
)(
wh©evî
));

182 
	`π_‰ì_§q
(
§q
);

183 
	`π_≥nd_löux_§q
(
§q
);

184 
	#π_ªque°_˝u_own_úq
(
úq
, 
h™dÀr
Ë
	`π_ªque°_globÆ_úq
((úq), (h™dÀr))

	)

185 
	#π_‰ì_˝u_own_úq
(
úq
Ë
	`π_‰ì_globÆ_úq
((úq))

	)

186 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, 
≠ic
);

187 
	`π_‰ì_timî
();

188 
	`π_ªque°_≠ic_timîs
((*
h™dÀr
)(), 
≠ic_timî_£tup_d©a
 *
≠ic_timî_d©a
);

189 
	`π_‰ì_≠ic_timîs
();

190 
	`π_mou¡_πai
();

191 
	`π_umou¡_πai
();

192 
	`π_¥ötk
(c⁄° *
f‹m©
, ...);

193 
	`πai_¥öt_to_s¸ìn
(c⁄° *
f‹m©
, ...);

194 
	`π_swôch_to_löux
(
˝uid
);

195 
	`π_swôch_to_ªÆ_time
(
˝uid
);

197 #i‚de‡
DEBUG_FLAGS


198 
	#debug_Êags_£t
(
±r
,
a
)

	)

199 
	#debug_Êags_check
(
±r
)

	)

201 
	`debug_Êags_£t
(*
±r
,
Êags
);

202 
	`debug_Êags_check
(*
±r
);

205 
ölöe
 
	$h¨d_˛i
()

207 
	`debug_Êags_£t
(
	`__buûtö_ªtu∫_addªss
(0),0);

208 
__asm__
 
	`__vﬁ©ûe__
 (

215 
	}
}

218 
ölöe
 
	$h¨d_ª°‹e_Êags
(
Êags
)

220 
	`debug_Êags_£t
(
	`__buûtö_ªtu∫_addªss
(0),
Êags
);

221 
__asm__
 
	`__vﬁ©ûe__
 (

225 : : "r" (
Êags
) : "r0"

227 
	}
}

229 
ölöe
 
	$h¨d_°i
()

231 
	`debug_Êags_£t
(
	`__buûtö_ªtu∫_addªss
(0),
MSR_EE
);

232 
__asm__
 
	`__vﬁ©ûe__
 (

238 
	}
}

240 
ölöe
 
	$__h¨d_ßve_Êags
(*
Êags
)

242 
__asm__
 
	`__vﬁ©ûe__
 (

244 : "Ù" (*
Êags
)

246 
	}
}

248 
	#h¨d_ßve_Êags
(
Êags
Ëdÿ{ 
	`__h¨d_ßve_Êags
(&(Êags)); } 0)

	)

249 
	#h¨d_ßve_Êags_™d_˛i
(
Êags
Ëdÿ{ 
	`__h¨d_ßve_Êags
(&(Êags)); 
	`h¨d_˛i
(); } 0)

	)

251 #ifde‡
CONFIG_SMP


253 
	#π_•ö_lock
(
lock
Ë
	`•ö_lock
(÷ock))

	)

255 
	#π_•ö_u∆ock
(
lock
Ë
	`•ö_u∆ock
(÷ock))

	)

257 
	#h¨d_˝u_id
(Ë
	`h¨d_smp_¥o˚ss‹_id
()

	)

259 
ölöe
 
	$π_gë_globÆ_lock
()

261 
	`h¨d_˛i
();

262 i‡(!
	`ã°_™d_£t_bô
(
	`h¨d_˝u_id
(), 
locked_˝us
)) {

263 
	`ã°_™d_£t_bô
(31, 
locked_˝us
));

265 
	}
}

267 
ölöe
 
	$π_ªÀa£_globÆ_lock
()

269 
	`h¨d_˛i
();

270 i‡(
	`ã°_™d_˛ór_bô
(
	`h¨d_˝u_id
(), 
locked_˝us
)) {

271 
	`˛ór_bô
(31, 
locked_˝us
);

273 
	}
}

283 
	#NR_RT_CPUS
 2

	)

287 
	#π_•ö_lock
(
wh©evî
)

	)

288 
	#π_•ö_u∆ock
(
wh©evî
)

	)

290 
	#π_gë_globÆ_lock
(Ë
	`h¨d_˛i
()

	)

291 
	#π_ªÀa£_globÆ_lock
()

	)

293 
	#h¨d_˝u_id
(Ë0

	)

295 
	#NR_RT_CPUS
 1

	)

299 
ölöe
 
	$π_•ö_lock_úq
(
•ölock_t
 *
lock
)

301 
	`h¨d_˛i
();

302 
	`π_•ö_lock
(
lock
);

303 
	}
}

305 
ölöe
 
	$π_•ö_u∆ock_úq
(
•ölock_t
 *
lock
)

307 
	`π_•ö_u∆ock
(
lock
);

308 
	`h¨d_°i
();

309 
	}
}

318 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

320 
Êags
;

321 
	`h¨d_ßve_Êags_™d_˛i
(
Êags
);

322 
	`π_•ö_lock
(
lock
);

323  
Êags
;

324 
	}
}

326 
ölöe
 
	$π_•ö_u∆ock_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

328 
	`π_•ö_u∆ock
(
lock
);

329 
	`h¨d_ª°‹e_Êags
(
Êags
);

330 
	}
}

335 
ölöe
 
	$π_globÆ_˛i
()

337 
	`π_gë_globÆ_lock
();

338 
	}
}

340 
ölöe
 
	$π_globÆ_°i
()

342 
	`π_ªÀa£_globÆ_lock
();

343 
	`h¨d_°i
();

344 
	}
}

346 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

348 
Êags
;

350 
	`h¨d_ßve_Êags_™d_˛i
(
Êags
);

351 i‡(!
	`ã°_™d_£t_bô
(
	`h¨d_˝u_id
(), 
locked_˝us
)) {

352 
	`ã°_™d_£t_bô
(31, 
locked_˝us
));

353  ((
Êags
 & (1 << 
IFLAG
)) + 1);

355  (
Êags
 & (1 << 
IFLAG
));

357 
	}
}

359 
ölöe
 
	$π_globÆ_ßve_Êags
(*
Êags
)

361 
hÊags
, 
rÊags
;

363 
	`h¨d_ßve_Êags_™d_˛i
(
hÊags
);

364 
hÊags
 = hÊag†& (1 << 
IFLAG
);

365 
rÊags
 = 
hÊags
 | !
	`ã°_bô
(
	`h¨d_˝u_id
(), 
locked_˝us
);

366 i‡(
hÊags
) {

367 
	`h¨d_°i
();

369 *
Êags
 = 
rÊags
;

370 
	}
}

372 
ölöe
 
	$π_globÆ_ª°‹e_Êags
(
Êags
)

374 
Êags
) {

375 (1 << 
IFLAG
Ë| 1: 
	`π_ªÀa£_globÆ_lock
();

376 
	`h¨d_°i
();

378 (1 << 
IFLAG
Ë| 0: 
	`π_gë_globÆ_lock
();

379 
	`h¨d_°i
();

381 (0 << 
IFLAG
Ë| 1: 
	`π_ªÀa£_globÆ_lock
();

383 (0 << 
IFLAG
Ë| 0: 
	`π_gë_globÆ_lock
();

386 
	}
}

388 
ölöe
 
RT_TRAP_HANDLER
 
	$π_£t_πai_å≠_h™dÀr
(
RT_TRAP_HANDLER
 
h™dÀr
)

390  (
RT_TRAP_HANDLER
) 0;

391 
	}
}

393 
	sˇlibøti⁄_d©a
 {

394 
	m˝u_‰eq
;

395 
	mœãncy
;

396 
	m£tup_time_TIMER_CPUNIT
;

397 
	m£tup_time_TIMER_UNIT
;

398 
	mtimîs_tﬁ
[
NR_RT_CPUS
];

401 
π_times
Ñt_times;

402 
π_times
 
π_smp_times
[
NR_RT_CPUS
];

403 
ˇlibøti⁄_d©a
 
tu√d
;

406 
ölöe
 
	$gë_dec
()

408  (
	`mf•r
(
SPRN_DEC
));

409 
	}
}

411 
ölöe
 
	$£t_dec
(
vÆ
)

413 
	`mt•r
(
SPRN_DEC
, 
vÆ
);

414 
	}
}

416 #ifde‡
CONFIG_4xx


417 
ölöe
 
	$gë_dec_4xx
()

419  (
	`mf•r
(
SPRN_PIT
));

420 
	}
}

422 
ölöe
 
	$£t_dec_4xx
(
vÆ
)

424 
	`mt•r
(
SPRN_PIT
, 
vÆ
);

425 
	}
}

429 
	#DECLR_8254_TSC_EMULATION


	)

430 
	#TICK_8254_TSC_EMULATION


	)

431 
	#SETUP_8254_TSC_EMULATION


	)

432 
	#CLEAR_8254_TSC_EMULATION


	)

435 
ölöe
 
	$rdtsc
()

437 
ts
;

438 
chk
;

440 
__asm__
 
	`__vﬁ©ûe__
 ("1: mftbu %0; mftb %1; mftbu %2; cmpw %2,%0; bne 1b"

441 : "Ù" (((*)&
ts
)[0]), "Ù" (((*)&ts)[1]), "Ù" (
chk
) );

443  
ts
;

444 
	}
}

446 
	#RT_BUG
(Ëdo{
	`h¨d_˛i
();
	`BUG
();}0)

	)

448 
ölöe
 
	$π_£t_de¸emíãr_cou¡
(
dñay
)

451 if(!
dñay
)dñay = 
π_times
.
öå_time
 - 
	`rdtsc
();

453 if(
dñay
<1){
	`RT_BUG
();}

454 #ifde‡
CONFIG_4xx


455 
	`£t_dec_4xx
(
dñay
);

457 
	`£t_dec
(
dñay
);

459 
	}
}

462 
ölöe
 
	$f‚z
(
ul
)

464 
__asm__
 
	`__vﬁ©ûe__
 ("˙ézw %0, %1" : "Ù" (
ul
) : "r" (ul & (-ul)));

466  31 - 
ul
;

467 
	}
}

469 
	#π_£t_timî_dñay
(
x
Ë
	`π_£t_de¸emíãr_cou¡
(x)

	)

473 
	#RTAI_DEFAULT_TICK
 200000

	)

474 
	#RTAI_DEFAULT_STACKSZ
 2000

	)

	@/usr/src/rtai/base/include/asm-ppc/rtai_lxrt.h

21 #i‚de‡
_RTAI_ASM_PPC_LXRT_H


22 
	#_RTAI_ASM_PPC_LXRT_H


	)

24 
	~<löux/vîsi⁄.h
>

26 
	~<asm/πai_ve˘‹s.h
>

28 #i‚de‡
CONFIG_RTAI_INTERNAL_LXRT_SUPPORT


29 
	#CONFIG_RTAI_INTERNAL_LXRT_SUPPORT
 1

	)

32 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


33 
	#USE_LINUX_SYSCALL


	)

35 #unde‡
USE_LINUX_SYSCALL


38 
	#LINUX_SYSCALL_NR
 
g¥
[0]

	)

39 
	#LINUX_SYSCALL_REG1
 
g¥
[3]

	)

40 
	#LINUX_SYSCALL_REG2
 
g¥
[4]

	)

41 
	#LINUX_SYSCALL_REG3
 
g¥
[5]

	)

42 
	#LINUX_SYSCALL_REG4
 
g¥
[6]

	)

43 
	#LINUX_SYSCALL_REG5
 
g¥
[7]

	)

44 
	#LINUX_SYSCALL_REG6
 
g¥
[8]

	)

45 
	#LINUX_SYSCALL_RETREG
 
g¥
[3]

	)

46 
	#LINUX_SYSCALL_FLAGS
 
m§


	)

48 
	#RTAI_SYSCALL_NR
 0x70000000

	)

49 
	#RTAI_SYSCALL_CODE
 
LINUX_SYSCALL_REG1


	)

50 
	#RTAI_SYSCALL_ARGS
 
LINUX_SYSCALL_REG2


	)

51 
	#RTAI_SYSCALL_RETPNT
 
LINUX_SYSCALL_REG3


	)

57 
	#LXRT_DO_IMMEDIATE_LINUX_SYSCALL
(
ªgs
) \

59 
ªgs
->
LINUX_SYSCALL_RETREG
 = ((
asmlökage
 (*)(, ...))
sys_ˇŒ_èbÀ
[ªgs->
LINUX_SYSCALL_NR
])‘egs->
LINUX_SYSCALL_REG1
,Ñegs->
LINUX_SYSCALL_REG2
,Ñegs->
LINUX_SYSCALL_REG3
,Ñegs->
LINUX_SYSCALL_REG4
,Ñegs->
LINUX_SYSCALL_REG5
,Ñegs->
LINUX_SYSCALL_REG6
); \

60 } 0)

	)

62 
	#SET_LXRT_RETVAL_IN_SYSCALL
(
ªgs
, 
ªtvÆ
) \

64 i‡(
ªgs
->
RTAI_SYSCALL_RETPNT
) { \

65 
	`π_c›y_to_u£r
((*)
ªgs
->
RTAI_SYSCALL_RETPNT
, &
ªtvÆ
, (retval)); \

67 } 0)

	)

69 
	#LOW
 0

	)

70 
	#HIGH
 1

	)

72 
	#USE_LINUX_TIMER


	)

73 
	#TIMER_NAME
 "DECREMENTER"

	)

74 
	#TIMER_FREQ
 
RTAI_FREQ_8254


	)

75 
	#TIMER_LATENCY
 
RTAI_LATENCY_8254


	)

76 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_8254


	)

77 
	#ONESHOT_SPAN
 ((0x7FFF*(
CPU_FREQ
/
TIMER_FREQ
))/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 1))

78 

	)

79 
	#upd©e_löux_timî
(
˝uid
) \

80 dÿ{ 
	`πai_dißrm_de¸
(
˝uid
, 1); 
	`hÆ_≥nd_unc⁄d
(
TIMER_8254_IRQ
, cpuid); } 0)

	)

82 
	uπai_lxπ_t
 {

83 
RTIME
 
	mπ
;

84 
	mi
[2];

85 *
	mv
[2];

88 #i‚de‡
THREAD_SIZE


89 
	#THREAD_SIZE
 8192

	)

92 #ifde‡
__˝lu•lus


96 #ifde‡
__KERNEL__


98 
	~<löux/¶ab.h
>

99 
	~<asm/mmu_c⁄ãxt.h
>

101 
ölöe
 
	$_lxπ_c⁄ãxt_swôch
 (
èsk_°ru˘
 *
¥ev
, èsk_°ru˘ *
√xt
, 
˝uid
)

103 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

104 
	`c⁄ãxt_swôch
(*, *);

105 
mm_°ru˘
 *
ﬁdmm
 = 
¥ev
->
a˘ive_mm
;

106 
	`swôch_mm
(
ﬁdmm
, 
√xt
->
a˘ive_mm
,Çext, 
˝uid
);

107 i‡(!
√xt
->
mm
) {

108 
	`íãr_œzy_éb
(
ﬁdmm
, 
√xt
, 
˝uid
);

110 
	`c⁄ãxt_swôch
(
¥ev
, 
√xt
);

112 *
	`c⁄ãxt_swôch
(*, *, *);

113 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,18)

114 
¥ev
->
Âu_cou¡î
 = 0;

116 
	`c⁄ãxt_swôch
(
NULL
, 
¥ev
, 
√xt
);

118 
	}
}

120 
	#IN_INTERCEPT_IRQ_ENABLE
(Ëdÿ{ } 0)

	)

121 
	#IN_INTERCEPT_IRQ_DISABLE
(Ëdÿ{ } 0)

	)

123 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
)

125 
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë
	`kmÆloc
((
thªad_°ru˘
Ë+ ( xtsk->
thªad
.
k•
 & ~(
THREAD_SIZE
 - 1)Ë+ THREAD_SIZE -Ünxtsk->thªad.k•, 
GFP_KERNEL
);

126 *((
thªad_°ru˘
 *)
 xtsk
->
	`πai_tskext
(
TSKEXT2
)Ë xtsk->
thªad
;

127 
	`mem˝y
(
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
), (*)÷nxtsk->
thªad
.
k•
), ( xtsk->thªad.k• & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.ksp);

128 
	}
}

130 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
)

132 
 xtsk
->
thªad
 = *((
thªad_°ru˘
 *Ónxtsk->
	`πai_tskext
(
TSKEXT2
));

133 
	`mem˝y
((*)
 xtsk
->
thªad
.
k•
,Ünxtsk->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
Ë, ( xtsk->thªad.k• & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.ksp);

134 
	}
}

136 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

138 
	#π_c›y_‰om_u£r
 
__c›y_‰om_u£r


	)

140 
	#π_c›y_to_u£r
 
__c›y_to_u£r


	)

142 
	#π_°∫˝y_‰om_u£r
 
°∫˝y_‰om_u£r


	)

146 
	#π_c›y_‰om_u£r
(
a
, 
b
, 
c
) \

147 –{ 
ªt
 = 
	`__c›y_‰om_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

149 
	#π_c›y_to_u£r
(
a
, 
b
, 
c
) \

150 –{ 
ªt
 = 
	`__c›y_to_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

152 
	#π_°∫˝y_‰om_u£r
(
a
, 
b
, 
c
) \

153 –{ 
ªt
 = 
	`°∫˝y_‰om_u£r
(
a
, 
b
, 
c
);Ñë; } )

	)

157 
	#π_put_u£r
 
__put_u£r


	)

158 
	#π_gë_u£r
 
__gë_u£r


	)

162 
	#RT_DO_SIGNAL
(
ªgs
Ë
	`do_sig«l
(
NULL
,Ñegs)

	)

166 
	~<sys/sysˇŒ.h
>

167 
	~<uni°d.h
>

169 
ölöe
 
πai_lxπ_t
 
	$__πai_lxπ
(
¨g0
, 
¨g1
, 
¨g2
)

171 
πai_lxπ_t
 
__sc_ªt
;

173 
__sc_0
 
	`__asm__
 ("r0");

174 
__sc_3
 
	`__asm__
 ("r3");

175 
__sc_4
 
	`__asm__
 ("r4");

177 
__sc_0
 = 
¨g0
;

178 
__sc_3
 = 
¨g1
;

179 
__sc_4
 = 
¨g2
;

181 
__asm__
 
__vﬁ©ûe__


183 : "=&r" (
__sc_0
),

184 "=&r" (
__sc_3
), "=&r" (
__sc_4
)

185 : "0" (
__sc_0
),

186 "1" (
__sc_3
), "2" (
__sc_4
)

190 
__sc_ªt
.
i
[0] = 
__sc_3
;

191 
__sc_ªt
.
i
[1] = 
__sc_4
;

193  
__sc_ªt
;

194 
	}
}

196 
πai_lxπ_t
 
	$_πai_lxπ
(
§q
, *
¨g
)

198 
πai_lxπ_t
 
ªtvÆ
;

200 
	`sysˇŒ
(
RTAI_SYSCALL_NR
, 
§q
, 
¨g
, &
ªtvÆ
);

202 
ªtvÆ
 = 
	`__πai_lxπ
(
RTAI_SYSCALL_NR
, 
§q
, 
¨g
);

204  
ªtvÆ
;

205 
	}
}

207 
ölöe
 
πai_lxπ_t
 
	$πai_lxπ
(
dynx
, 
lsize
, 
§q
, *
¨g
)

209  
	`_πai_lxπ
(
	`ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
), 
¨g
);

210 
	}
}

212 
	#πai_i›l
(Ëdÿ{ } 0)

	)

216 #ifde‡
__˝lu•lus


223 
	~<löux/¶ab.h
>

226 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
)

228 
 xtsk
->
	`πai_tskext
(
TSKEXT2
) =

229 
	`kmÆloc
((
thªad_°ru˘
Ë+ (
 xtsk
->
thªad
.
e•
 & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.esp,

230 
GFP_KERNEL
);

231 *((
thªad_°ru˘
 *)
 xtsk
->
	`πai_tskext
(
TSKEXT2
)Ë xtsk->
thªad
;

232 
	`mem˝y
(
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
) ,

233 (*)(
 xtsk
->
thªad
.
e•
),

234 (
 xtsk
->
thªad
.
e•
 & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.esp);

235 
	}
}

237 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
)

239 
 xtsk
->
thªad
 = *((
thªad_°ru˘
 *Ónxtsk->
	`πai_tskext
(
TSKEXT2
));

240 
	`mem˝y
((*)
 xtsk
->
thªad
.
e•
,

241 
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
) ,

242 (
 xtsk
->
thªad
.
e•
 & ~(
THREAD_SIZE
 - 1)) + THREAD_SIZE -Ünxtsk->thread.esp);

243 
	}
}

245 
	~<asm/thªad_öfo.h
>

250 
ölöe
 
	$kthªad_fun_£t_jump
(
èsk_°ru˘
 *
 xtsk
)

252 
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë
	`kmÆloc
((
thªad_°ru˘
Ë+ 
THREAD_SIZE
, 
GFP_KERNEL
);

253 *((
thªad_°ru˘
 *)
 xtsk
->
	`πai_tskext
(
TSKEXT2
)Ë xtsk->
thªad
;

257 
	`mem˝y
(
 xtsk
->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
), (*Ë xtsk->
thªad_öfo
, 
THREAD_SIZE
);

258 
	}
}

261 
ölöe
 
	$kthªad_fun_l⁄g_jump
(
èsk_°ru˘
 *
 xtsk
)

263 
 xtsk
->
thªad
 = *((
thªad_°ru˘
 *Ónxtsk->
	`πai_tskext
(
TSKEXT2
));

265 
	`mem˝y
((*Ë
 xtsk
->
thªad_öfo
,Ünxtsk->
	`πai_tskext
(
TSKEXT2
Ë+ (
thªad_°ru˘
), 
THREAD_SIZE
);

266 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai_oldnames.h

35 #i‚de‡
_RTAI_ASM_PPC_OLDNAMES_H


36 
	#_RTAI_ASM_PPC_OLDNAMES_H


	)

38 #ifde‡
__KERNEL__


40 
	#IFLAG
 
RTAI_IFLAG


	)

41 
	#h¨d_˛i
(Ë
	`πai_˛i
()

	)

42 
	#h¨d_°i
(Ë
	`πai_°i
()

	)

43 
	#h¨d_ßve_Êags_™d_˛i
(
x
Ë
	`πai_loˇl_úq_ßve
(x)

	)

44 
	#h¨d_ª°‹e_Êags
(
x
Ë
	`πai_loˇl_úq_ª°‹e
(x)

	)

45 
	#h¨d_ßve_Êags
(
x
Ë
	`πai_loˇl_úq_Êags
(x)

	)

46 
	#h¨d_˝u_id
 
hÆ_¥o˚ss‹_id


	)

47 
	#this_π_èsk
 
±d


	)

51 #i‚de‡
__RTAI_HAL__


53 
	#tu√d
 
πai_tu«bÀs


	)

54 
	#NR_RT_CPUS
 
RTAI_NR_CPUS


	)

55 
	#RT_TIME_END
 
RTAI_TIME_LIMIT


	)

57 
	#CPU_FREQ
 
RTAI_CPU_FREQ


	)

58 
	#TIMER_8254_IRQ
 
RTAI_TIMER_8254_IRQ


	)

59 
	#FREQ_8254
 
RTAI_FREQ_8254


	)

60 
	#LATENCY_8254
 
RTAI_LATENCY_8254


	)

61 
	#SETUP_TIME_8254
 
RTAI_SETUP_TIME_8254


	)

63 
	#FREQ_APIC
 
RTAI_FREQ_APIC


	)

64 
	#LATENCY_APIC
 
RTAI_LATENCY_APIC


	)

65 
	#SETUP_TIME_APIC
 
RTAI_SETUP_TIME_APIC


	)

67 
	#CALIBRATED_APIC_FREQ
 
RTAI_CALIBRATED_APIC_FREQ


	)

68 
	#CALIBRATED_CPU_FREQ
 
RTAI_CALIBRATED_CPU_FREQ


	)

70 #ifde‡
__KERNEL__


75 
	#RTAI_1_VECTOR
 
RTAI_APIC1_VECTOR


	)

76 
	#RTAI_1_IPI
 6

	)

77 
	#RTAI_2_VECTOR
 
RTAI_APIC2_VECTOR


	)

78 
	#RTAI_2_IPI
 7

	)

79 
	#RTAI_3_VECTOR
 
RTAI_APIC3_VECTOR


	)

80 
	#RTAI_3_IPI
 8

	)

81 
	#RTAI_4_VECTOR
 
RTAI_APIC4_VECTOR


	)

82 
	#RTAI_4_IPI
 9

	)

84 
	#brﬂdˇ°_to_loˇl_timîs
 
πai_brﬂdˇ°_to_timîs


	)

85 
	#πai_sig«l_h™dÀr
 
πai_sig«l_h™dÀr


	)

86 
	#π_£t_πai_å≠_h™dÀr
 
π_£t_å≠_h™dÀr


	)

87 
	#π_mou¡_πai
 
π_mou¡


	)

88 
	#π_umou¡_πai
 
π_umou¡


	)

89 
	#ˇlibøã_8254
 
πai_ˇlibøã_8254


	)

91 
ölöe
 
π_ªque°_globÆ_úq_ext
(
úq
,

92 (*
h™dÀr
)(),

93 
cookõ
) {

95  
	`π_ªque°_úq
(
úq
,((*)(,*))
h™dÀr
,(*)
cookõ
, 0);

96 
	}
}

98 
ölöe
 
π_ªque°_globÆ_úq
(
úq
,

99 (*
h™dÀr
)()) {

101  
	`π_ªque°_úq
(
úq
,((*)(,*))
h™dÀr
, 0, 0);

102 
	}
}

104 
ölöe
 
	$π_£t_globÆ_úq_ext
(
úq
,

105 
ext
,

106 
cookõ
) {

108 
	`π_£t_úq_cookõ
(
úq
,(*)
cookõ
);

109 
	}
}

111 
ölöe
 
	$π_‰ì_globÆ_úq
(
úq
) {

113  
	`π_ªÀa£_úq
(
úq
);

114 
	}
}

116 #unde‡
rdtsc


117 
	#rdtsc
(Ë
	`πai_rdtsc
()

	)

118 
	#rd_CPU_ts
(Ë
	`rdtsc
()

	)

120 
	#uŒdiv
(
a
,
b
,
c
Ë
	`πai_uŒdiv
◊,b,c)

	)

121 
	#imuldiv
(
a
,
b
,
c
Ë
	`πai_imuldiv
◊,b,c)

	)

122 
	#Œimd
(
a
,
b
,
c
Ë
	`πai_Œimd
◊,b,c)

	)

124 
	#locked_˝us
 (&
πai_˝u_lock
)

	)

126 
	#lxπ_hπ_Êags
 
πai_˝u_lxπ


	)

127 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

130 
	#DECLR_8254_TSC_EMULATION


	)

131 
	#TICK_8254_TSC_EMULATION


	)

132 
	#SETUP_8254_TSC_EMULATION


	)

133 
	#CLEAR_8254_TSC_EMULATION


	)

136 #i‚de‡
__˝lu•lus


138 
	~<löux/úq.h
>

142 
desc_°ru˘
 
idt_èbÀ
[];

144 
π_hÆ
 
πhÆ
;

146 #ifde‡
FIXME


147 
ölöe
 
desc_°ru˘
 
π_£t_fuŒ_öå_ve˘
 (
ve˘‹
,

148 
ty≥
,

149 
d∂
,

150 (*
h™dÀr
)()) {

151 
desc_°ru˘
 
e
 = 
idt_èbÀ
[
ve˘‹
];

152 
idt_èbÀ
[
ve˘‹
].
a
 = (
__KERNEL_CS
 << 16Ë| (()
h™dÀr
 & 0x0000FFFF);

153 
idt_èbÀ
[
ve˘‹
].
b
 = (()
h™dÀr
 & 0xFFFF0000Ë| (0x8000 + (
d∂
 << 13Ë+ (
ty≥
 << 8));

154  
e
;

155 
	}
}

157 
ölöe
 
	$π_ª£t_fuŒ_öå_ve˘
(
ve˘‹
,

158 
desc_°ru˘
 
e
) {

159 
idt_èbÀ
[
ve˘‹
] = 
e
;

160 
	}
}

164 c⁄° 
	g__ùi2vec
[] = {

165 
INVALIDATE_TLB_VECTOR
,

166 
LOCAL_TIMER_VECTOR
,

167 
RESCHEDULE_VECTOR
,

168 
CALL_FUNCTION_VECTOR
,

169 
SPURIOUS_APIC_VECTOR
,

170 
ERROR_APIC_VECTOR
,

173 
RTAI_3_VECTOR
,

174 
RTAI_4_VECTOR


177 
	#__vec2úq
(
v
Ë((vË- 
FIRST_EXTERNAL_VECTOR
)

	)

179 c⁄° 
	g__ùi2úq
[] = {

180 
__vec2úq
(
INVALIDATE_TLB_VECTOR
),

181 
__vec2úq
(
LOCAL_TIMER_VECTOR
),

182 
__vec2úq
(
RESCHEDULE_VECTOR
),

183 
__vec2úq
(
CALL_FUNCTION_VECTOR
),

184 
__vec2úq
(
SPURIOUS_APIC_VECTOR
),

185 
__vec2úq
(
ERROR_APIC_VECTOR
),

188 
RTAI_APIC3_IPI
,

189 
RTAI_APIC4_IPI


196 
ölöe
 
π_ªque°_˝u_own_úq
 (
ùi
, (*
h™dÀr
)()) {

198 #ifde‡
FIXME


199  
ùi
 < 10 ? 
	`π_ªque°_úq
(
__ùi2úq
[ùi],(
π_úq_h™dÀr_t
)
h™dÀr
,0Ë: -
EINVAL
;

203 
	}
}

205 
ölöe
 
	$π_‰ì_˝u_own_úq
 (
ùi
) {

207 #ifde‡
FIXME


208  
ùi
 < 10 ? 
	`π_ªÀa£_úq
(
__ùi2úq
[ùi]Ë: -
EINVAL
;

212 
	}
}

214 #ifde‡
CONFIG_SMP


216 
ölöe
 
	$£nd_ùi_sh‹th™d
 (
sh‹th™d
,

217 
úq
) {

218 
Êags
;

219 
	`πai_hw_lock
(
Êags
);

220 
	`≠ic_waô_i¸_idÀ
();

221 
	`≠ic_wrôe_¨ound
(
APIC_ICR
,
APIC_DEST_LOGICAL
|
sh‹th™d
|
__ùi2vec
[
úq
]);

222 
	`πai_hw_u∆ock
(
Êags
);

223 
	}
}

225 
ölöe
 
	$£nd_ùi_logiˇl
 (
de°
,

226 
úq
) {

227 
Êags
;

229 i‡((
de°
 &
˝u_⁄löe_m≠
) != 0)

231 
	`πai_hw_lock
(
Êags
);

232 
	`≠ic_waô_i¸_idÀ
();

233 
	`≠ic_wrôe_¨ound
(
APIC_ICR2
,
	`SET_APIC_DEST_FIELD
(
de°
));

234 
	`≠ic_wrôe_¨ound
(
APIC_ICR
,
APIC_DEST_LOGICAL
|
__ùi2vec
[
úq
]);

235 
	`πai_hw_u∆ock
(
Êags
);

237 
	}
}

241 #ifde‡
FIXME


242 
ölöe
 *
	$gë_öå_h™dÀr
 (
ve˘‹
) {

244  (*)((
idt_èbÀ
[
ve˘‹
].
b
 & 0xFFFF0000) |

245 (
idt_èbÀ
[
ve˘‹
].
a
 & 0x0000FFFF));

246 
	}
}

248 
ölöe
 
£t_öå_ve˘
 (
ve˘‹
,

249 (*
h™dÀr
)()) {

251 
idt_èbÀ
[
ve˘‹
].
a
 = (idt_table[vector].a & 0xFFFF0000) |

252 (()
h™dÀr
 & 0x0000FFFF);

253 
idt_èbÀ
[
ve˘‹
].
b
 = (()
h™dÀr
 & 0xFFFF0000) |

254 (
idt_èbÀ
[
ve˘‹
].
b
 & 0x0000FFFF);

255 
	}
}

257 
ölöe
 *
π_£t_öå_h™dÀr
 (
ve˘‹
,

258 (*
h™dÀr
)()) {

260 (*
ßved_h™dÀr
)(Ë
	`gë_öå_h™dÀr
(
ve˘‹
);

261 
	`£t_öå_ve˘
(
ve˘‹
, 
h™dÀr
);

262  
ßved_h™dÀr
;

263 
	}
}

265 
ölöe
 
π_ª£t_öå_h™dÀr
 (
ve˘‹
,

266 (*
h™dÀr
)()) {

267 
	`£t_öå_ve˘
(
ve˘‹
, 
h™dÀr
);

268 
	}
}

270 
ölöe
 
	$gë_¸2
 () {

272 
addªss
;

273 
	`__asm__
("mov»%%¸2,%0":"Ù" (
addªss
));

274  
addªss
;

275 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai_sched.h

21 #i‚de‡
RTAI_SCHED_H


22 
	#RTAI_SCHED_H


	)

24 
	#RTAI_MSR_FLAGS
 (
MSR_KERNEL
 | 
MSR_FP
)

	)

26 
up_èsk_sw
(*, *);

27 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
Ë
	`up_èsk_sw
(&(ﬁdèsk), (
√w_èsk
))

	)

29 
	#öô_¨ch_°ack
() \

31 *(
èsk
->
°ack
 - 28Ë
d©a
; \

32 *(
èsk
->
°ack
 - 29Ë()
π_thªad
; \

33 *(
èsk
->
°ack
 - 35Ë()
π_°¨tup
; \

34 *(
èsk
->
°ack
 - 36Ë
RTAI_MSR_FLAGS
; \

35 } 0)

	)

37 
	#DEFINE_LINUX_CR0
 
löux_¸0
;

	)

39 
	#DEFINE_LINUX_SMP_CR0
 
löux_smp_¸0
[
NR_RT_CPUS
];

	)

41 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


42 
	#öô_èsk_Âív
(
èsk
) \

44 
	`mem£t
(&
èsk
->
Âu_ªg
, 0, (task->fpu_reg)); \

45 } 0)

	)

47 
	#öô_èsk_Âív
(
èsk
Ëdÿ{ } 0)

	)

50 
ölöe
 *
	$gë_°ack_poöãr
()

52 *
•
;

53 
asm
 vﬁ©ûê("m∏1, %0" : "Ù" (
•
));

54  
•
;

55 
	}
}

57 
	#RT_SET_RTAI_TRAP_HANDLER
(
x
)

	)

59 
	#DO_TIMER_PROPER_OP
()

	)

	@/usr/src/rtai/base/include/asm-ppc/rtai_shm.h

20 #i‚de‡
_RTAI_ASM_PPC_SHM_H


21 
	#_RTAI_ASM_PPC_SHM_H


	)

25 #unde‡
__SHM_USE_VECTOR


27 #i‚de‡
__KERNEL__


29 
	~<asm/πai_ve˘‹s.h
>

31 #ifde‡
__SHM_USE_VECTOR


33 
ölöe
 
	$πai_shmrq
(
§q
, 
wh©evî
)

35 
ªtvÆ
;

36 
__sc_0
 
	`__asm__
 ("r0");

37 
__sc_3
 
	`__asm__
 ("r3");

38 
__sc_4
 
	`__asm__
 ("r4");

40 
__sc_0
 = (
__sc_3
 = 
§q
 | (
RTAI_SHM_VECTOR
 << 24)Ë+ (
__sc_4
 = 
wh©evî
);

41 
__asm__
 
__vﬁ©ûe__


43 : "=&r" (
__sc_3
), "=&r" (
__sc_4
)

44 : "0" (
__sc_3
), "1" (
__sc_4
),

45 "r" (
__sc_0
)

47 ((*)&
ªtvÆ
)[0] = 
__sc_3
;

48 ((*)&
ªtvÆ
)[1] = 
__sc_4
;

49  
ªtvÆ
;

50 
	}
}

54 
	#RTAI_SHM_HANDLER
 
shm_h™dÀr


	)

56 
	#DEFINE_SHM_HANDLER


	)

62 
	~<asm/pgèbÀ.h
>

63 
	~<asm/io.h
>

68 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

70 
ªt
 = 0UL;

71 
pmd_t
 *
pmd
;

72 
±e_t
 *
±ï
, 
±e
;

74 if(!
	`pgd_n⁄e
(*
pgd
)) {

75 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

76 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

77 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

78 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

80 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

82 
±e
 = *
±ï
;

83 if(
	`±e_¥e£¡
(
±e
)){

84 
ªt
 = (Ë
	`∑ge_addªss
(
	`±e_∑ge
(
±e
));

85 
ªt
 |(
adr
&(
PAGE_SIZE
-1));

89  
ªt
;

90 
	}
}

92 
ölöe
 
	$uvút_to_bus
(
adr
)

94 
kva
, 
ªt
;

96 
kva
 = 
	`uvút_to_kva
(
	`pgd_off£t
(
cuºít
->
mm
, 
adr
),ádr);

97 
ªt
 = 
	`vút_to_bus
((*)
kva
);

99  
ªt
;

100 
	}
}

102 #i‚de‡
VMALLOC_VMADDR


103 
	#VMALLOC_VMADDR
(
x
Ë(()(x))

	)

106 
ölöe
 
	$kvút_to_bus
(
adr
)

108 
va
, 
kva
, 
ªt
;

110 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

111 
kva
 = 
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va);

112 
ªt
 = 
	`vút_to_bus
((*)
kva
);

114  
ªt
;

115 
	}
}

117 
ölöe
 
	$kvút_to_∑
(
adr
)

119 
va
, 
kva
, 
ªt
;

121 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

122 
kva
 = 
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va);

123 
ªt
 = 
	`__∑
(
kva
);

125  
ªt
;

126 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai_srq.h

20 #i‚de‡
_RTAI_ASM_PPC_SRQ_H_


21 
	#_RTAI_ASM_PPC_SRQ_H_


	)

23 #i‚de‡
__KERNEL__


25 
	~<sys/sysˇŒ.h
>

26 
	~<uni°d.h
>

28 
	~<asm/πai_ve˘‹s.h
>

30 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


31 
	#USE_LINUX_SYSCALL


	)

33 #unde‡
USE_LINUX_SYSCALL


36 
	#RTAI_SRQ_SYSCALL_NR
 0x70000001

	)

39 
ölöe
 
	$πai_§q
(
§q
, 
¨gs
)

41 
ªtvÆ
;

43 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

45 
__sc_0
 
	`__asm__
 ("r0");

46 
__sc_3
 
	`__asm__
 ("r3");

47 
__sc_4
 
	`__asm__
 ("r4");

49 
__sc_0
 = (
__sc_3
 = 
§q
Ë+ (
__sc_4
 = 
¨gs
);

50 
__asm__
 
__vﬁ©ûe__


52 : "=&r" (
__sc_3
), "=&r" (
__sc_4
)

53 : "0" (
__sc_3
), "1" (
__sc_4
),

54 "r" (
__sc_0
)

56 ((*)(*)&
ªtvÆ
)[0] = 
__sc_3
;

57 ((*)(*)&
ªtvÆ
)[1] = 
__sc_4
;

59  
ªtvÆ
;

60 
	}
}

62 
ölöe
 
	$πai_›í_§q
(
œbñ
)

64  ()
	`πai_§q
(0, 
œbñ
);

65 
	}
}

	@/usr/src/rtai/base/include/asm-ppc/rtai_usi.h

19 #i‚de‡
_RTAI_ASM_PPC_USI_H


20 
	#_RTAI_ASM_PPC_USI_H


	)

22 
	#USI_SRQ_MASK
 0xFFFFFFF0

	)

24 
	#_STARTUP_IRQ
 1

	)

25 
	#_SHUTDOWN_IRQ
 2

	)

26 
	#_ENABLE_IRQ
 3

	)

27 
	#_DISABLE_IRQ
 4

	)

28 
	#_MASK_AND_ACK_IRQ
 5

	)

29 
	#_ACK_IRQ
 6

	)

30 
	#_UNMASK_IRQ
 7

	)

31 
	#_DISINT
 8

	)

32 
	#_ENINT
 9

	)

33 
	#_SAVE_FLAGS_CLI
 10

	)

34 
	#_RESTORE_FLAGS
 11

	)

36 #ifde‡
__KERNEL__


38 #ifde‡
CONFIG_RTAI_USI


40 
	$usi_˛i
(
¨g
, *
eÊags
)

42 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

43 
	}
}

45 
	$usi_°i
(
¨g
, *
eÊags
)

47 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

48 
	}
}

50 
	$usi_ßve_Êags_™d_˛i
(
¨g
, *
eÊags
)

52 
Êags
 = *
eÊags
;

53 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

54  
Êags
;

55 
	}
}

57 
	$usi_ª°‹e_Êags
(
Êags
, *
eÊags
)

59 i‡(
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

60 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

62 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

64 
	}
}

66 (*
usi_fun_íåy
[ ])(, *) = {

67 [
_STARTUP_IRQ
] = (*)
π_°¨tup_úq
,

68 [
_SHUTDOWN_IRQ
] = (*)
π_shutdown_úq
,

69 [
_ENABLE_IRQ
] = (*)
π_íabÀ_úq
,

70 [
_DISABLE_IRQ
] = (*)
π_dißbÀ_úq
,

71 [
_MASK_AND_ACK_IRQ
] = (*)
π_mask_™d_ack_úq
,

72 [
_ACK_IRQ
] = (*)
π_ack_úq
,

73 [
_UNMASK_IRQ
] = (*)
π_unmask_úq
,

74 [
_DISINT
] = (*)
usi_˛i
,

75 [
_ENINT
] = (*)
usi_°i
,

76 [
_SAVE_FLAGS_CLI
] = (*)
usi_ßve_Êags_™d_˛i
,

77 [
_RESTORE_FLAGS
] = (*)
usi_ª°‹e_Êags


78 
	}
};

80 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
) \

81 i‡(
§q
 > 
USI_SRQ_MASK
) { \

82 *
ªtvÆ
 = 
usi_fun_íåy
[
§q
 & ~
USI_SRQ_MASK
](
¨gs
, &(
p§
)); \

83  
ªç©h
; \

84 }

	)

87 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
)

	)

	@/usr/src/rtai/base/include/asm-ppc/rtai_vectors.h

20 #i‚de‡
_RTAI_ASM_PPC_VECTORS_H


21 
	#_RTAI_ASM_PPC_VECTORS_H


	)

23 
	~<πai_hÆ_«mes.h
>

24 
	~<πai_c⁄fig.h
>

26 #ifde‡
CONFIG_SMP


27 
	#RTAI_APIC_HIGH_VECTOR
 
HAL_APIC_HIGH_VECTOR


	)

28 
	#RTAI_APIC_LOW_VECTOR
 
HAL_APIC_LOW_VECTOR


	)

30 
	#RTAI_APIC_HIGH_VECTOR
 0xff

	)

31 
	#RTAI_APIC_LOW_VECTOR
 0xff

	)

34 
	#RTAI_APIC_HIGH_IPI
 (
RTAI_APIC_HIGH_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

35 
	#RTAI_APIC_LOW_IPI
 (
RTAI_APIC_LOW_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

37 
	#RTAI_SYS_VECTOR
 0xF6

	)

39 #i‡
RTAI_APIC_HIGH_VECTOR
 =
RTAI_SYS_VECTOR
 || 
RTAI_APIC_LOW_VECTOR
 == RTAI_SYS_VECTOR

40 #îr‹ *** 
RTAI_SYS_VECTOR
 
CONFLICTS
 
WITH
 
APIC
 
VECTORS
 
USED
 
BY
 
RTAI
 ***

43 
	#__πai_°rögize0
(
_s_
Ë#_s_

	)

44 
	#__πai_°rögize
(
_s_
Ë
	`__πai_°rögize0
(_s_)

	)

45 
	#__πai_å≠_ˇŒ
(
_t_
Ë
	)
_t_

46 
	#__πai_do_å≠0
(
_t_
Ë
	`__πai_°rögize
(
$
 _t_)

	)

47 
	#__πai_do_å≠
(
_t_
Ë
	`__πai_do_å≠0
(
	`__πai_å≠_ˇŒ
(_t_))

	)

49 
	#RTAI_DO_TRAP
(
v
, 
r
, 
a1
, 
a2
Ëdÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ( 
	`__πai_do_å≠
(v): : "a" (a1), "c" (a2), "d" (&r)); } 0)

	)

	@/usr/src/rtai/base/include/asm-x86/rtai.h

19 
	~<πai_c⁄fig.h
>

20 
	~<asm/πai_hÆ.h
>

	@/usr/src/rtai/base/include/asm-x86/rtai_atomic.h

23 #i‚de‡
_RTAI_ASM_X86_ATOMIC_H


24 
	#_RTAI_ASM_X86_ATOMIC_H


	)

26 #ifde‡
__i386__


27 
	~"πai_©omic_32.h
"

29 
	~"πai_©omic_64.h
"

	@/usr/src/rtai/base/include/asm-x86/rtai_atomic_32.h

19 #i‚de‡
_RTAI_ASM_I386_ATOMIC_H


20 
	#_RTAI_ASM_I386_ATOMIC_H


	)

22 #ifde‡
__KERNEL__


24 
	~<löux/bô›s.h
>

25 
	~<asm/©omic.h
>

28 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

30 
	#©omic_cmpxchg
(
v
, 
ﬁd
, 
√w
Ë(()
	`cmpxchg
(&((v)->
cou¡î
), old,Çew))

	)

31 
	#©omic_xchg
(
v
, 
√w
Ë(
	`xchg
(&((v)->
cou¡î
),Çew))

	)

37 #i‚de‡
likñy


38 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 < 96

39 
	#__buûtö_ex≥˘
(
x
, 
ex≥˘ed_vÆue
Ë(x)

	)

41 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

42 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

45 #ifde‡
CONFIG_SMP


46 
	#LOCK_PREFIX
 "lock ; "

	)

48 
	#LOCK_PREFIX
 ""

	)

51 
	#©omic_t
 

	)

53 
	s__πai_xchg_dummy
 { 
	ma
[100]; };

54 
	#__πai_xg
(
x
Ë((
__πai_xchg_dummy
 *)(x))

	)

56 
ölöe
 
	$©omic_xchg
(vﬁ©ûê*
±r
, 
x
)

58 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "xchgl %0,%1"

59 :"Ù" (
x
)

60 :"m" (*
	`__πai_xg
(
±r
)), "0" (
x
)

62  
x
;

63 
	}
}

65 
ölöe
 
	$©omic_cmpxchg
(vﬁ©ûê*
±r
, 
o
, 
n
)

67 
¥ev
;

68 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgl %1,%2"

69 : "˜"(
¥ev
)

70 : "q"(
n
), "m" (*
	`__πai_xg
(
±r
)), "0" (
o
)

72  
¥ev
;

73 
	}
}

75 
__ölöe__
 
	$©omic_dec_™d_ã°
(
©omic_t
 *
v
)

77 
c
;

79 
__asm__
 
	`__vﬁ©ûe__
(

80 
LOCK_PREFIX
 "decl %0; sete %1"

81 :"=m" (*
	`__πai_xg
(
v
)), "=qm" (
c
)

82 :"m" (*
	`__πai_xg
(
v
)) : "memory");

83  
c
 != 0;

84 
	}
}

86 
__ölöe__
 
	$©omic_öc
(
©omic_t
 *
v
)

88 
__asm__
 
	`__vﬁ©ûe__
(

89 
LOCK_PREFIX
 "incl %0"

90 :"=m" (*
	`__πai_xg
(
v
))

91 :"m" (*
	`__πai_xg
(
v
)));

92 
	}
}

95 #unde‡
ADDR


	@/usr/src/rtai/base/include/asm-x86/rtai_atomic_64.h

20 #i‚de‡
_RTAI_ASM_X86_64_ATOMIC_H


21 
	#_RTAI_ASM_X86_64_ATOMIC_H


	)

23 #ifde‡
__KERNEL__


25 
	~<löux/bô›s.h
>

26 
	~<asm/©omic.h
>

29 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,11)

31 
	#©omic_xchg
(
±r
, 
v
Ë
	`xchg
’å, v)

	)

32 
	#©omic_cmpxchg
(
±r
, 
o
, 
n
Ë
	`cmpxchg
((*)’å), o,Ç)

	)

38 #ifde‡
CONFIG_SMP


39 
	#LOCK_PREFIX
 "lock ; "

	)

41 
	#LOCK_PREFIX
 ""

	)

44 °ru˘ { vﬁ©ûê
	mcou¡î
; } 
	t©omic_t
;

48 
	s__πai_xchg_dummy
 { 
	ma
[100]; };

49 
	#__πai_xg
(
x
Ë((
__πai_xchg_dummy
 *)(x))

	)

51 
ölöe
 
	$©omic_xchg
 (vﬁ©ûê*
±r
, 
x
)

53 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "xchgq %0,%1"

54 :"Ù" (
x
)

55 :"m" (*
	`__πai_xg
(
±r
)), "0" (
x
)

57  
x
;

58 
	}
}

60 
ölöe
 
	$©omic_cmpxchg
 (vﬁ©ûê*
±r
, 
o
, 
n
)

62 
¥ev
;

64 
__asm__
 
	`__vﬁ©ûe__
(
LOCK_PREFIX
 "cmpxchgq %1,%2"

65 : "˜"(
¥ev
)

66 : "q"(
n
), "m" (*
	`__πai_xg
(
±r
)), "0" (
o
)

69  
¥ev
;

70 
	}
}

72 
__ölöe__
 
	$©omic_dec_™d_ã°
(
©omic_t
 *
v
)

74 
c
;

76 
__asm__
 
	`__vﬁ©ûe__
(

77 
LOCK_PREFIX
 "decl %0; sete %1"

78 :"=m" (
v
->
cou¡î
), "=qm" (
c
)

79 :"m" (
v
->
cou¡î
) : "memory");

80  
c
 != 0;

81 
	}
}

83 
__ölöe__
 
	$©omic_öc
(
©omic_t
 *
v
)

85 
__asm__
 
	`__vﬁ©ûe__
(

86 
LOCK_PREFIX
 "incl %0"

87 :"=m" (
v
->
cou¡î
)

88 :"m" (
v
->
cou¡î
));

89 
	}
}

92 #unde‡
ADDR


	@/usr/src/rtai/base/include/asm-x86/rtai_emulate_tsc.h

23 #i‚de‡
_RTAI_ASM_EMULATE_TSC_H


24 
	#_RTAI_ASM_EMULATE_TSC_H


	)

26 #i‡
deföed
(
EMULATE_TSC
Ë|| !deföed(
CONFIG_X86_TSC
)

28 #unde‡
RTAI_CPU_FREQ


29 #unde‡
RTAI_CALIBRATED_CPU_FREQ


30 #unde‡
rdtsc


31 #unde‡
πai_rdtsc


32 #unde‡
DECLR_8254_TSC_EMULATION


33 #unde‡
TICK_8254_TSC_EMULATION


34 #unde‡
SETUP_8254_TSC_EMULATION


35 #unde‡
CLEAR_8254_TSC_EMULATION


37 
	#RTAI_CPU_FREQ
 
RTAI_FREQ_8254


	)

38 
	#RTAI_CALIBRATED_CPU_FREQ
 
RTAI_FREQ_8254


	)

39 
	#πai_rdtsc
(Ë
	`rd_8254_ts
()

	)

40 
	#rdtsc
(Ë
	`rd_8254_ts
()

	)

42 
	#TICK_8254_TSC_EMULATION
(Ë
	`rd_8254_ts
()

	)

44 
	~<löux/vîsi⁄.h
>

45 #i‡
deföed
(
CONFIG_VT
Ë&& 
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

47 
	#DECLR_8254_TSC_EMULATION
 \

48 *
kd_mksound
; \

49 *
löux_mksound
; \

50 
	`πai_mksound
() { } \

51 c⁄° 
TSC_EMULATION_GUARD_FREQ
 = 20; \

52 
timî_li°
 
timî
;

	)

54 
	#SETUP_8254_TSC_EMULATION
 \

56 
löux_mksound
 = 
kd_mksound
; \

57 
kd_mksound
 = 
πai_mksound
; \

58 
	`π_£tup_8254_tsc
(); \

59 
	`öô_timî
(&
timî
); \

60 
timî
.
fun˘i⁄
 = 
timî_fun
; \

61 
	`timî_fun
(0); \

62 } 0)

	)

64 
	#CLEAR_8254_TSC_EMULATION
 \

66 
	`dñ_timî
(&
timî
); \

67 i‡(
löux_mksound
) { \

68 
kd_mksound
 = 
löux_mksound
; \

70 } 0)

	)

74 
	#DECLR_8254_TSC_EMULATION
 \

75 c⁄° 
TSC_EMULATION_GUARD_FREQ
 = 20; \

76 
timî_li°
 
timî
;

	)

78 
	#SETUP_8254_TSC_EMULATION
 \

80 
	`π_£tup_8254_tsc
(); \

81 
	`öô_timî
(&
timî
); \

82 
timî
.
fun˘i⁄
 = 
timî_fun
; \

83 
	`timî_fun
(0); \

84 } 0)

	)

86 
	#CLEAR_8254_TSC_EMULATION
 
	`dñ_timî
(&
timî
)

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_fpu.h

23 #i‚de‡
_RTAI_ASM_X86_FPU_H


24 
	#_RTAI_ASM_X86_FPU_H


	)

26 #ifde‡
__i386__


27 
	~"πai_Âu_32.h
"

29 
	~"πai_Âu_64.h
"

	@/usr/src/rtai/base/include/asm-x86/rtai_fpu_32.h

28 #i‚de‡
_RTAI_ASM_I386_FPU_H


29 
	#_RTAI_ASM_I386_FPU_H


	)

31 #i‚de‡
__˝lu•lus


32 
	~<asm/¥o˚ss‹.h
>

35 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,25)

36 
i387_uni⁄
 
	tFPU_ENV
;

37 
	#TASK_FPENV
(
tsk
Ë(&—sk)->
thªad
.
i387
)

	)

38 #ñi‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,34)

39 
thªad_x°©e
 
	tFPU_ENV
;

40 
	#TASK_FPENV
(
tsk
Ë(—sk)->
thªad
.
x°©e
)

	)

42 
thªad_x°©e
 
	tFPU_ENV
;

43 
	#TASK_FPENV
(
tsk
Ë(—sk)->
thªad
.
Âu
.
°©e
)

	)

46 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


50 
	#íabÀ_Âu
() do { \

51 
__asm__
 
	`__vﬁ©ûe__
 ("clts"); \

52 } 0)

	)

54 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
) do { \

55 
__asm__
 
	`__vﬁ©ûe__
 ("mov»%%¸0, %0; c…s": "Ù" (
Â¸
)); \

56 } 0)

	)

58 
	#ª°‹e_Â¸
(
Â¸
) do { \

59 i‡(
Â¸
 & 8) { \

60 
__asm__
 
	`__vﬁ©ûe__
 ("mov»%%¸0, %0": "Ù" (
Â¸
)); \

61 
__asm__
 
	`__vﬁ©ûe__
 ("mov»%0, %%¸0": :"r" (
Â¸
 | 8)); \

63 } 0)

	)

66 
	#öô_h¨d_Âív
() do { \

67 
__asm__
 
	`__vﬁ©ûe__
 ("clts; fninit"); \

68 i‡(
˝u_has_xmm
) { \

69 
__mxc§
 = (0xffbfu & 0x1f80u); \

70 
__asm__
 
	`__vﬁ©ûe__
 ("ldmxc§ %0": : "m" (
__mxc§
)); \

72 } 0)

	)

75 
	#__öô_Âív
(
Âív
) do { \

76 i‡(
˝u_has_fx§
) { \

77 
	`mem£t
(&(
Âív
)->
fxßve
, 0, (
i387_fxßve_°ru˘
));\

78 (
Âív
)->
fxßve
.
cwd
 = 0x37f; \

79 i‡(
˝u_has_xmm
) { \

80 (
Âív
)->
fxßve
.
mxc§
 = 0x1f80; \

83 
	`mem£t
(&(
Âív
)->
fßve
, 0, (
i387_fßve_°ru˘
)); \

84 (
Âív
)->
fßve
.
cwd
 = 0xffff037fu; \

85 (
Âív
)->
fßve
.
swd
 = 0xffff0000u; \

86 (
Âív
)->
fßve
.
twd
 = 0xffffffffu; \

87 (
Âív
)->
fßve
.
fos
 = 0xffff0000u; \

89 } 0)

	)

91 
	#__ßve_Âív
(
Âív
) do { \

92 i‡(
˝u_has_fx§
) { \

93 
__asm__
 
	`__vﬁ©ûe__
 ("fxßvê%0; fn˛ex": "=m" ((
Âív
)->
fxßve
)); \

95 
__asm__
 
	`__vﬁ©ûe__
 ("‚ßvê%0; fwaô": "=m" ((
Âív
)->
fßve
)); \

97 } 0)

	)

99 
	#__ª°‹e_Âív
(
Âív
) do { \

100 i‡(
˝u_has_fx§
) { \

101 
__asm__
 
	`__vﬁ©ûe__
 ("fxr°‹ %0": : "m" ((
Âív
)->
fxßve
)); \

103 
__asm__
 
	`__vﬁ©ûe__
 ("‰°‹ %0": : "m" ((
Âív
)->
fßve
)); \

105 } 0)

	)

110 
	#öô_Âív
(
Âív
Ëdÿ{ 
	`__öô_Âív
(&(Âív)); } 0)

	)

111 
	#ßve_Âív
(
Âív
Ëdÿ{ 
	`__ßve_Âív
(&(Âív)); } 0)

	)

112 
	#ª°‹e_Âív
(
Âív
Ëdÿ{ 
	`__ª°‹e_Âív
(&(Âív)); } 0)

	)

115 
	#öô_h¨d_Âu
(
 xtsk
) do { \

116 
	`öô_h¨d_Âív
(); \

117 
	`£t_ xtsk_u£s_Âu
(
 xtsk
); \

118 
	`£t_ xtsk_usög_Âu
(
 xtsk
); \

119 } 0)

	)

121 
	#öô_Âu
(
 xtsk
) do { \

122 
	`__öô_Âív
(
	`TASK_FPENV
(
 xtsk
)); \

123 
	`£t_ xtsk_u£s_Âu
(
 xtsk
); \

124 } 0)

	)

126 
	#ª°‹e_Âu
(
 xtsk
) do { \

127 
	`íabÀ_Âu
(); \

128 
	`__ª°‹e_Âív
(
	`TASK_FPENV
(
 xtsk
)); \

129 
	`£t_ xtsk_usög_Âu
(
 xtsk
); \

130 } 0)

	)

134 
	#íabÀ_Âu
()

	)

135 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
)

	)

136 
	#ª°‹e_Â¸
(
Â¸
)

	)

137 
	#öô_h¨d_Âív
()

	)

138 
	#öô_Âív
(
Âív
)

	)

139 
	#ßve_Âív
(
Âív
)

	)

140 
	#ª°‹e_Âív
(
Âív
)

	)

141 
	#öô_h¨d_Âu
(
 xtsk
)

	)

142 
	#öô_Âu
(
 xtsk
)

	)

143 
	#ª°‹e_Âu
(
 xtsk
)

	)

148 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

150 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

151 dÿ{ (
 xtsk
)->
u£d_m©h
 = 1; } 0)

	)

152 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

153 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

154 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

156 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

157 dÿ{ (
 xtsk
)->
Êags
 |
PF_USEDFPU
; } 0)

	)

162 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,11)

164 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

165 dÿ{ (
 xtsk
)->
u£d_m©h
 = 1; } 0)

	)

166 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

167 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

168 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

170 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

171 dÿ{ 
	`èsk_thªad_öfo
(
 xtsk
)->
°©us
 |
TS_USEDFPU
; } 0)

	)

177 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

179 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

180 dÿ{ 
	`£t_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

181 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

182 dÿ{ 
	`˛ór_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

183 
	# xtsk_u£s_Âu
(
 xtsk
Ë(
	`tsk_u£d_m©h
÷nxtsk))

	)

185 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,4,0)

186 #unde‡
öô_Âu


187 
	~<asm/i387.h
>

188 
	~<asm/Âu-öã∫Æ.h
>

189 
	#πai_£t_Âu_u£d
(
 xtsk
Ë
	`__thªad_£t_has_Âu
÷nxtsk)

	)

191 
	#πai_£t_Âu_u£d
(
 xtsk
Ëdÿ{ 
	`èsk_thªad_öfo
÷nxtsk)->
°©us
 |
TS_USEDFPU
; } 0)

	)

194 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

195 dÿ{ 
	`πai_£t_Âu_u£d
(
 xtsk
); } 0)

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_fpu_64.h

30 #i‚de‡
_RTAI_ASM_X86_64_FPU_H


31 
	#_RTAI_ASM_X86_64_FPU_H


	)

33 #i‚de‡
__˝lu•lus


34 
	~<asm/¥o˚ss‹.h
>

37 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,25)

38 
i387_uni⁄
 
	tFPU_ENV
;

39 
	#TASK_FPENV
(
tsk
Ë(&—sk)->
thªad
.
i387
.
fxßve
)

	)

40 #ñi‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,34)

41 
thªad_x°©e
 
	tFPU_ENV
;

42 
	#TASK_FPENV
(
tsk
Ë(&—sk)->
thªad
.
x°©e
->
fxßve
)

	)

44 
thªad_x°©e
 
	tFPU_ENV
;

45 
	#TASK_FPENV
(
tsk
Ë(&—sk)->
thªad
.
Âu
.
°©e
->
fxßve
)

	)

48 #ifde‡
CONFIG_RTAI_FPU_SUPPORT


52 
	#íabÀ_Âu
() do { \

53 
__asm__
 
	`__vﬁ©ûe__
 ("clts"); \

54 } 0)

	)

56 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
) do { \

57 
Â¸
 = 
	`ªad_¸0
(); \

58 
	`íabÀ_Âu
(); \

59 } 0)

	)

61 
	#ª°‹e_Â¸
(
Â¸
) do { \

62 i‡(
Â¸
 & 8) { \

63 
Êags
; \

64 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
); \

65 
Â¸
 = 
	`ªad_¸0
(); \

66 
	`wrôe_¸0
(8 | 
Â¸
); \

67 
	`πai_hw_ª°‹e_Êags
(
Êags
); \

69 } 0)

	)

72 
	#öô_h¨d_Âív
() do { \

73 
__mxc§
; \

74 
__asm__
 
	`__vﬁ©ûe__
 ("clts; fninit"); \

75 
__mxc§
 = 0xffbfUL & 0x1f80UL; \

76 
__asm__
 
	`__vﬁ©ûe__
 ("ldmxc§ %0": : "m" (
__mxc§
)); \

77 } 0)

	)

80 
	#__öô_Âív
(
Âív
) do { \

81 
	`mem£t
(
Âív
, 0, (
i387_fxßve_°ru˘
)); \

82 (
Âív
)->
cwd
 = 0x37f; \

83 (
Âív
)->
mxc§
 = 0x1f80; \

84 } 0)

	)

88 
ölöe
 
	$__ßve_Âív
(
i387_fxßve_°ru˘
 
__u£r
 *
fx
)

90 
îr
;

92 
asm
 volatile("1:Ñex64/fxsave (%[fx])\n\t"

102 : [
îr
] "Ù" (îr), "=m" (*
fx
)

103 : [
fx
] "cdaSDb" (fx), "0" (0));

105  
îr
;

106 
	}
}

108 
ölöe
 
	$__ª°‹e_Âív
(
i387_fxßve_°ru˘
 *
fx
)

110 
îr
;

112 
asm
 volatile("1:Ñex64/fxrstor (%[fx])\n\t"

122 : [
îr
] "=r" (err)

123 : [
fx
] "cdaSDb" (fx), "m" (*fx), "0" (0));

125  
îr
;

126 
	}
}

128 
	#öô_Âív
(
Âív
Ëdÿ{ 
	`__öô_Âív
(&(Âív).
fxßve
); } 0)

	)

129 
	#ßve_Âív
(
Âív
Ëdÿ{ 
	`__ßve_Âív
(&(Âív).
fxßve
); } 0)

	)

130 
	#ª°‹e_Âív
(
Âív
Ëdÿ{ 
	`__ª°‹e_Âív
(&(Âív).
fxßve
); } 0)

	)

134 
	#öô_h¨d_Âu
(
 xtsk
) do { \

135 
	`öô_h¨d_Âív
(); \

136 
	`£t_ xtsk_u£s_Âu
(
 xtsk
); \

137 
	`£t_ xtsk_usög_Âu
(
 xtsk
); \

138 } 0)

	)

140 
	#öô_Âu
(
 xtsk
) do { \

141 
	`__öô_Âív
(
	`TASK_FPENV
(
 xtsk
)); \

142 
	`£t_ xtsk_u£s_Âu
(
 xtsk
); \

143 } 0)

	)

145 
	#ª°‹e_Âu
(
 xtsk
) do { \

146 
	`íabÀ_Âu
(); \

147 
	`__ª°‹e_Âív
(
	`TASK_FPENV
(
 xtsk
)); \

148 
	`£t_ xtsk_usög_Âu
(
 xtsk
); \

149 } 0)

	)

153 
	#íabÀ_Âu
()

	)

154 
	#ßve_Â¸_™d_íabÀ_Âu
(
Â¸
)

	)

155 
	#ª°‹e_Â¸
(
Â¸
)

	)

156 
	#öô_h¨d_Âív
()

	)

157 
	#öô_Âív
(
Âív
)

	)

158 
	#ßve_Âív
(
Âív
)

	)

159 
	#ª°‹e_Âív
(
Âív
)

	)

160 
	#öô_h¨d_Âu
(
 xtsk
)

	)

161 
	#öô_Âu
(
 xtsk
)

	)

162 
	#ª°‹e_Âu
(
 xtsk
)

	)

166 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,11)

168 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

169 dÿ{ (
 xtsk
)->
u£d_m©h
 = 1; } 0)

	)

170 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

171 dÿ{ (
 xtsk
)->
u£d_m©h
 = 0; } 0)

	)

172 
	# xtsk_u£s_Âu
(
 xtsk
Ë(÷nxtsk)->
u£d_m©h
)

	)

174 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

175 dÿ{ 
	`èsk_thªad_öfo
(
 xtsk
)->
°©us
 |
TS_USEDFPU
; } 0)

	)

181 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

183 
	#£t_ xtsk_u£s_Âu
(
 xtsk
) \

184 dÿ{ 
	`£t_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

185 
	#˛ór_ xtsk_u£s_Âu
(
 xtsk
) \

186 dÿ{ 
	`˛ór_°›≥d_chûd_u£d_m©h
(
 xtsk
); } 0)

	)

187 
	# xtsk_u£s_Âu
(
 xtsk
Ë(
	`tsk_u£d_m©h
÷nxtsk))

	)

189 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3,4,0)

190 #unde‡
öô_Âu


191 
	~<asm/i387.h
>

192 
	~<asm/Âu-öã∫Æ.h
>

193 
	#πai_£t_Âu_u£d
(
 xtsk
Ë
	`__thªad_£t_has_Âu
÷nxtsk)

	)

195 
	#πai_£t_Âu_u£d
(
 xtsk
Ëdÿ{ 
	`èsk_thªad_öfo
÷nxtsk)->
°©us
 |
TS_USEDFPU
; } 0)

	)

198 
	#£t_ xtsk_usög_Âu
(
 xtsk
) \

199 dÿ{ 
	`πai_£t_Âu_u£d
(
 xtsk
); } 0)

201 

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_hal.h

23 #i‚de‡
_RTAI_ASM_X86_HAL_H


24 
	#_RTAI_ASM_X86_HAL_H


	)

26 
	#RTAI_KERN_BUSY_ALIGN_RET_DELAY
 
CONFIG_RTAI_KERN_BUSY_ALIGN_RET_DELAY


	)

27 
	#RTAI_USER_BUSY_ALIGN_RET_DELAY
 
CONFIG_RTAI_USER_BUSY_ALIGN_RET_DELAY


	)

29 
	~<πai_ty≥s.h
>

31 #ifde‡
CONFIG_SMP


32 
	#RTAI_NR_CPUS
 
CONFIG_RTAI_CPUS


	)

34 
	#RTAI_NR_CPUS
 1

	)

37 
	sˇlibøti⁄_d©a
 {

38 
	m˝u_‰eq
;

39 
	m≠ic_‰eq
;

40 
	mœãncy
;

41 
	mkîn_œãncy_busy_Æign_ªt_dñay
;

42 
	mu£r_œãncy_busy_Æign_ªt_dñay
;

43 
	m£tup_time_TIMER_CPUNIT
;

44 
	m£tup_time_TIMER_UNIT
;

45 
	mtimîs_tﬁ
[
RTAI_NR_CPUS
];

48 
πai_ˇlibøã_h¨d_timî
();

50 #ifde‡
__i386__


51 
	~"πai_hÆ_32.h
"

53 
	~"πai_hÆ_64.h
"

56 #ifde‡
CONFIG_RTAI_TSC


57 
ölöe
 
RTIME
 
	$π_gë_ts˙t
()

59 #ifde‡
__i386__


60 
t
;

61 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "=A" (
t
));

62  
t
;

64 uni⁄ { 
__ad
[2]; 
RTIME
 
t
; }Å;

65 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
t
.
__ad
[0]), "=d" (t.__ad[1]));

66  
t
.t;

68 
	}
}

70 
	#π_gë_ts˙t
 
π_gë_time


	)

	@/usr/src/rtai/base/include/asm-x86/rtai_hal_32.h

38 #i‚de‡
_RTAI_ASM_I386_HAL_H


39 
	#_RTAI_ASM_I386_HAL_H


	)

41 
	~<löux/vîsi⁄.h
>

43 #i‡
deföed
(
CONFIG_REGPARM
Ë|| 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,19)

44 
	#RTAI_SYSCALL_MODE
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

46 
	#RTAI_SYSCALL_MODE


	)

49 
	#LOCKED_LINUX_IN_IRQ_HANDLER


	)

52 
	~<πai_hÆ_«mes.h
>

53 
	~<asm/πai_ve˘‹s.h
>

54 
	~<πai_ty≥s.h
>

56 
__ölöe__
 
	$f‚z
 (
w‹d
) {

58 
	`__asm__
("bsfl %1, %0"

59 : "Ù" (
w‹d
)

60 : "r" (
w‹d
));

61  
w‹d
;

62 
	}
}

64 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

68 
ölöe
 
	$__ffs
(
w‹d
)

70 
	`__asm__
("bsfl %1,%0"

71 :"Ù" (
w‹d
)

72 :"rm" (
w‹d
));

73  
w‹d
;

74 
	}
}

76 
ölöe
 
	$__föd_fú°_bô
(c⁄° *
addr
, 
size
)

78 
x
 = 0;

80 
x
 < 
size
) {

81 
vÆ
 = *
addr
++;

82 i‡(
vÆ
)

83  
	`__ffs
(
vÆ
Ë+ 
x
;

84 
x
 +((*
addr
)<<3);

86  
x
;

87 
	}
}

89 
ölöe
 
	$föd_√xt_bô
(c⁄° *
addr
, 
size
, 
off£t
)

91 c⁄° *
p
 = 
addr
 + (
off£t
 >> 5);

92 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

94 i‡(
bô
) {

98 
	`__asm__
("bsfl %1,%0\n\t"

102 : "Ù" (
£t
)

103 : "r" (*
p
 >> 
bô
));

104 i‡(
£t
 < (32 - 
bô
))

105  
£t
 + 
off£t
;

106 
£t
 = 32 - 
bô
;

107 
p
++;

112 
ªs
 = 
	`__föd_fú°_bô
 (
p
, 
size
 - 32 * (∞- 
addr
));

113  (
off£t
 + 
£t
 + 
ªs
);

114 
	}
}

116 
	#föd_fú°_bô
(
addr
, 
size
Ë
	`__föd_fú°_bô
(◊ddr), (size))

	)

121 
ölöe
 
	$πai_uŒdiv
 (
uŒ
,

122 
uld
,

123 *
r
) {

130 
qf
, 
rf
;

131 
tq
, 
rh
;

132 uni⁄ { 
uŒ
; 
ul
[2]; } 
p
, 
q
;

134 
p
.
uŒ
 = ull;

135 
q
.
uŒ
 = 0;

136 
rf
 = 0x100000000ULL - (
qf
 = 0xFFFFFFFFUL / 
uld
) * uld;

138 
p
.
uŒ
 >
uld
) {

139 
q
.
ul
[1] +(
tq
 = 
p
.ul[1] / 
uld
);

140 
rh
 = 
p
.
ul
[1] - 
tq
 * 
uld
;

141 
q
.
uŒ
 +
rh
 * 
qf
 + (
tq
 = 
p
.
ul
[0] / 
uld
);

142 
p
.
uŒ
 = 
rh
 * 
rf
 + (p.
ul
[0] - 
tq
 * 
uld
);

145 i‡(
r
)

146 *
r
 = 
p
.
uŒ
;

148  
q
.
uŒ
;

149 
	}
}

153 #i‚de‡
do_div


154 
	#do_div
(
n
,
ba£
) ({ \

155 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

156 
__ba£
 = (
ba£
); \

157 
	`asm
("":"˜" (
__low
), "=d" (
__high
):"A" (
n
)); \

158 
__uµî
 = 
__high
; \

159 i‡(
__high
) { \

160 
__uµî
 = 
__high
 % (
__ba£
); \

161 
__high
 = __high / (
__ba£
); \

163 
	`asm
("div»%2":"˜" (
__low
), "=d" (
__mod
):"rm" (
__ba£
), "0" (__low), "1" (
__uµî
)); \

164 
	`asm
("":"=A" (
n
):"a" (
__low
),"d" (
__high
)); \

165 
__mod
; \

166 })

	)

169 
ölöe
 
	$πai_uŒdiv
 (
uŒ
, 
uld
, *
r
)

171 i‡(
r
) {

172 *
r
 = 
	`do_div
(
uŒ
, 
uld
);

173  
uŒ
;

175 
	`do_div
(
uŒ
, 
uld
);

176  
uŒ
;

177 
	}
}

180 
ölöe
 
	$πai_imuldiv
 (
i
, 
mu…
, 
div
) {

184 
dummy
;

186 
__asm__
 
	`__vﬁ©ûe__
 ( \

189 : "˜" (
i
), "=d" (
dummy
)

190 : "a" (
i
), "d" (
mu…
), "c" (
div
));

192  
i
;

193 
	}
}

195 
ölöe
 
	$πai_Œimd
(
Œ
, 
mu…
, 
div
) {

199 
__asm__
 
	`__vﬁ©ûe
 ( \

219 : "=A" (
Œ
) \

220 : "A" (
Œ
), "S" (
mu…
), "D" (
div
) \

223  
Œ
;

224 
	}
}

231 
ölöe
 
	$πai_u64div32c
(
a
,

232 
b
,

233 *
r
) {

235 uni⁄ { 
uŒ
; 
ul
[2]; } 
u
;

236 
u
.
uŒ
 = 
a
;

237 
__asm__
 
	`__vﬁ©ûe
(

246 : "˜" (
u
.
ul
[0]), "=d" (u.ul[1])

247 : "a" (
u
.
ul
[0]), "d" (u.ul[1]), "c" (
b
)

250  
a
;

251 
	}
}

253 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

254 
	~<löux/sched.h
>

255 
	~<löux/öãºu±.h
>

256 
	~<asm/desc.h
>

258 
	~<asm/io.h
>

259 
	~<asm/πai_©omic.h
>

260 
	~<asm/πai_Âu.h
>

261 #ifde‡
CONFIG_X86_LOCAL_APIC


262 
	~<asm/fixm≠.h
>

263 
	~<asm/≠ic.h
>

265 
	~<πai_åa˚.h
>

267 #i‚de‡
IPIPE_IRQ_DOALL


268 
	#IPIPE_IRQ_DOALL


	)

271 
	sπai_ªÆtime_úq_s
 {

272 
	mªtmode
;

273 
	m˝umask
;

276 
	#RTAI_DOMAIN_ID
 0x9ac15d93

277 
	#RTAI_NR_TRAPS
 
HAL_NR_FAULTS


	)

278 
	#RTAI_NR_SRQS
 32

	)

280 
	#RTAI_APIC_TIMER_VECTOR
 
RTAI_APIC_HIGH_VECTOR


	)

281 
	#RTAI_APIC_TIMER_IPI
 
RTAI_APIC_HIGH_IPI


	)

282 
	#RTAI_SMP_NOTIFY_VECTOR
 
RTAI_APIC_LOW_VECTOR


	)

283 
	#RTAI_SMP_NOTIFY_IPI
 
RTAI_APIC_LOW_IPI


	)

285 
	#RTAI_TIMER_8254_IRQ
 0

	)

286 
	#RTAI_FREQ_8254
 1193180

	)

287 
	#RTAI_APIC_ICOUNT
 ((
RTAI_FREQ_APIC
 + 
HZ
/2)/HZ)

	)

288 
	#RTAI_COUNTER_2_LATCH
 0xff„

	)

289 
	#RTAI_LATENCY_8254
 
CONFIG_RTAI_SCHED_8254_LATENCY


	)

290 
	#RTAI_SETUP_TIME_8254
 2011

	)

292 
	#RTAI_CALIBRATED_APIC_FREQ
 0

	)

293 
	#RTAI_FREQ_APIC
 (
πai_tu«bÀs
.
≠ic_‰eq
)

	)

294 
	#RTAI_LATENCY_APIC
 
CONFIG_RTAI_SCHED_APIC_LATENCY


	)

295 
	#RTAI_SETUP_TIME_APIC
 1000

	)

297 
	#RTAI_TIME_LIMIT
 0x7000000000000000LL

	)

299 
	#RTAI_IFLAG
 9

	)

301 
	#πai_˝uid
(Ë
	`hÆ_¥o˚ss‹_id
()

	)

302 
	#πai_tskext
(
idx
Ë
hÆ_tskext
[idx]

	)

305 
	#πai_hw_˛i
(Ë
	`hÆ_hw_˛i
()

	)

306 
	#πai_hw_°i
(Ë
	`hÆ_hw_°i
()

	)

307 
	#πai_hw_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

308 
	#πai_hw_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

309 
	#πai_hw_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

312 
	#πai_˛i
(Ë
	`hÆ_hw_˛i
()

	)

313 
	#πai_°i
(Ë
	`hÆ_hw_°i
()

	)

314 
	#πai_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

315 
	#πai_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

316 
	#πai_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

318 
	#RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU
 
	`KERNEL_VERSION
(2,6,20)

	)

320 #i‡
LINUX_VERSION_CODE
 < 
RTAI_LT_KERNEL_VERSION_FOR_NONPERCPU


322 
	#ROOT_STATUS_ADR
(
˝uid
Ë(
ùùe_roŸ_°©us
[˝uid])

	)

323 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*
ùùe_roŸ_°©us
[˝uid])

	)

325 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

327 
	`hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
); \

328 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

329 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_lo
[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

330 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
); \

332 } 0)

	)

334 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

336 i‡(
hÆ_roŸ_domaö
->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
 != 0) { \

337 
	`πai_˛i
(); \

338 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

340 } 0)

	)

346 
	#ROOT_STATUS_ADR
(
˝uid
Ë(&(
__ùùe_roŸ_°©us
))

	)

347 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*(&
__ùùe_roŸ_°©us
))

	)

349 #i‡
deföed
(
__IPIPE_2LEVEL_IRQMAP
Ë|| deföed(
__IPIPE_3LEVEL_IRQMAP
)

350 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

351 
	`__ùùe_£t_úq_≥ndög
(
domaö
, 
úq
)

	)

353 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

355 i‡(
	`__ùùe_ùídög_p
(
	`ùùe_this_˝u_roŸ_c⁄ãxt
())) { \

356 
	`πai_˛i
(); \

357 
	`__ùùe_sync_°age
(); \

359 } 0)

	)

369 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

371 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

372 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_lomask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

373 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_himask
)); \

375 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úqhñd_mask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

377 
	`ùùe_˝udom_v¨
(
domaö
, 
úqÆl
)[
úq
]++; \

378 } 0)

	)

380 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

382 i‡(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
úq≥nd_himask
) != 0) { \

383 
	`πai_˛i
(); \

384 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

386 } 0)

	)

391 
	#hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
Ë
	`hÆ_≥nd_domaö_unc⁄d
(úq, 
hÆ_roŸ_domaö
, cpuid)

	)

393 vﬁ©ûê*
ùùe_roŸ_°©us
[];

395 
	#hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
) \

397 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) { \

398 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
); \

399 
	`πai_°i
(); \

401 } 0)

	)

403 #ifde‡
CONFIG_PREEMPT


404 
	#πai_ßve_™d_lock_¥ìm±_cou¡
() \

405 dÿ{ *
¥˙ç
, 
¥˙t
;Ör˙à
	`xchg
’r˙ç = &
	`¥ìm±_cou¡
(), 1);

	)

406 
	#πai_ª°‹e_¥ìm±_cou¡
() \

407 *
¥˙ç
 = 
¥˙t
; } 0)

	)

409 
	#πai_ßve_™d_lock_¥ìm±_cou¡
();

	)

410 
	#πai_ª°‹e_¥ìm±_cou¡
();

	)

413 (*
	tπ_úq_h™dÀr_t
)(
	túq
, *
	tcookõ
);

415 #ifde‡
CONFIG_X86_TSC


417 
	#RTAI_CALIBRATED_CPU_FREQ
 0

	)

418 
	#RTAI_CPU_FREQ
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

422 
ölöe
 
	$_πai_hiddí_rdtsc
 () {

423 
t
;

424 
__asm__
 
	`__vﬁ©ûe__
–"rdtsc" : "=A" (
t
));

425  
t
;

426 
	}
}

427 
	#πai_rdtsc
(Ë
	`_πai_hiddí_rdtsc
()

	)

432 #i‡
deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_RTAI_DIAG_TSC_SYNC
Ë&& deföed(
CONFIG_RTAI_TUNE_TSC_SYNC
)

433 vﬁ©ûê
πai_tsc_of°
[];

434 
	#πai_rdtsc
(Ë({ 
t
; 
__asm__
 
	`__vﬁ©ûe__
–"rdtsc" : "=A" (t));Å - 
πai_tsc_of°
[
	`πai_˝uid
()]; })

	)

436 
	#πai_rdtsc
(Ë({ 
t
; 
__asm__
 
	`__vﬁ©ûe__
–"rdtsc" : "=A" (t));Å; })

	)

443 
	#RTAI_CPU_FREQ
 
RTAI_FREQ_8254


	)

444 
	#RTAI_CALIBRATED_CPU_FREQ
 
RTAI_FREQ_8254


	)

446 
	#πai_rdtsc
(Ë
	`rd_8254_ts
()

	)

450 
	s≠ic_timî_£tup_d©a
 {

451 
	mmode
;

452 
	mcou¡
;

455 
π_times
Ñt_times;

457 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

459 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

461 vﬁ©ûê
πai_˝u_lock
[];

463 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

464 
	#≠ic_wrôe_¨ound
 
≠ic_wrôe


	)

467 
	sπai_swôch_d©a
 {

468 vﬁ©ûê
sÊags
;

469 vﬁ©ûê
lÊags
;

470 #i‡
deföed
(
CONFIG_X86_LOCAL_APIC
Ë&& deföed(
RTAI_TASKPRI
)

471 vﬁ©ûê
£t_èsk¥i
;

473 } 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

475 
úqªtu∫_t
 
πai_brﬂdˇ°_to_loˇl_timîs
(
úq
,

476 *
dev_id
,

477 
±_ªgs
 *
ªgs
);

479 
ölöe
 
	$πai_ßve_Êags_úqbô
()

481 
Êags
;

482 
	`πai_ßve_Êags
(
Êags
);

483  
Êags
 & (1 << 
RTAI_IFLAG
);

484 
	}
}

486 
ölöe
 
	$πai_ßve_Êags_úqbô_™d_˛i
()

488 
Êags
;

489 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

490  
Êags
 & (1 << 
RTAI_IFLAG
);

491 
	}
}

493 #ifde‡
CONFIG_SMP


495 
	#SCHED_VECTOR
 
RTAI_SMP_NOTIFY_VECTOR


	)

496 
	#SCHED_IPI
 
RTAI_SMP_NOTIFY_IPI


	)

498 
	#_£nd_sched_ùi
(
de°
) \

500 
	`≠ic_waô_i¸_idÀ
(); \

501 
	`≠ic_wrôe_¨ound
(
APIC_ICR2
, 
	`SET_APIC_DEST_FIELD
(
de°
)); \

502 
	`≠ic_wrôe_¨ound
(
APIC_ICR
, 
APIC_DEST_LOGICAL
 | 
SCHED_VECTOR
); \

503 } 0)

	)

505 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

506 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33)

507 
	#RTAI_SPIN_LOCK_TYPE
(
lock
Ë
	)
lock

509 
	#RTAI_SPIN_LOCK_TYPE
(
lock
Ë((
øw_•ölock_t
 *Óock)

	)

511 
	#π_•ö_lock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_lock
(
	`RTAI_SPIN_LOCK_TYPE
÷ock)); b¨rõr(); } 0)

	)

512 
	#π_•ö_u∆ock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_u∆ock
(
	`RTAI_SPIN_LOCK_TYPE
÷ock)); b¨rõr(); } 0)

	)

514 
	#π_•ö_lock
(
lock
Ë
	`•ö_lock
÷ock)

	)

515 
	#π_•ö_u∆ock
(
lock
Ë
	`•ö_u∆ock
÷ock)

	)

518 
ölöe
 
	$π_•ö_lock_hw_úq
(
•ölock_t
 *
lock
)

520 
	`πai_hw_˛i
();

521 
	`π_•ö_lock
(
lock
);

522 
	}
}

524 
ölöe
 
	$π_•ö_u∆ock_hw_úq
(
•ölock_t
 *
lock
)

526 
	`π_•ö_u∆ock
(
lock
);

527 
	`πai_hw_°i
();

528 
	}
}

530 
ölöe
 
	$π_•ö_lock_hw_úqßve
(
•ölock_t
 *
lock
)

532 
Êags
;

533 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

534 
	`π_•ö_lock
(
lock
);

535  
Êags
;

536 
	}
}

538 
ölöe
 
	$π_•ö_u∆ock_hw_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

540 
	`π_•ö_u∆ock
(
lock
);

541 
	`πai_hw_ª°‹e_Êags
(
Êags
);

542 
	}
}

544 
ölöe
 
	$π_•ö_lock_úq
(
•ölock_t
 *
lock
) {

546 
	`πai_˛i
();

547 
	`π_•ö_lock
(
lock
);

548 
	}
}

550 
ölöe
 
	$π_•ö_u∆ock_úq
(
•ölock_t
 *
lock
) {

552 
	`π_•ö_u∆ock
(
lock
);

553 
	`πai_°i
();

554 
	}
}

556 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
) {

558 
Êags
;

559 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

560 
	`π_•ö_lock
(
lock
);

561  
Êags
;

562 
	}
}

564 
ölöe
 
	$π_•ö_u∆ock_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

566 
	`π_•ö_u∆ock
(
lock
);

567 
	`πai_ª°‹e_Êags
(
Êags
);

568 
	}
}

570 #i‡
RTAI_NR_CPUS
 > 2

574 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

576 
öc
 = 0x0100;

577 
__asm__
 
	`__vﬁ©ûe__
 (

578 
LOCK_PREFIX
 "xaddw %w0, %1\n"

586 :"+Q" (
öc
), "+m" (
lock
[1])

589 
	}
}

591 #i‡
deföed
(
CONFIG_X86_OOSTORE
Ë|| deföed(
CONFIG_X86_PPRO_FENCE
)

592 
	#UNLOCK_LOCK_PREFIX
 
LOCK_PREFIX


	)

594 
	#UNLOCK_LOCK_PREFIX


	)

597 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

599 
__asm__
 
	`__vﬁ©ûe__
(

600 
UNLOCK_LOCK_PREFIX
 "incb %0"

601 :"+m" (
lock
[1])

604 
	}
}

608 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

610 
	`ã°_™d_£t_bô
(31, 
lock
)) {

611 
	`˝u_ªœx
();

613 
	`b¨rõr
();

614 
	}
}

616 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

618 
	`ã°_™d_˛ór_bô
(31, 
lock
);

619 
	`˝u_ªœx
();

620 
	}
}

624 
ölöe
 
	$π_gë_globÆ_lock
()

626 
	`b¨rõr
();

627 
	`πai_˛i
();

628 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

629 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

631 
	`b¨rõr
();

632 
	}
}

634 
ölöe
 
	$π_ªÀa£_globÆ_lock
()

636 
	`b¨rõr
();

637 
	`πai_˛i
();

638 i‡(
	`ã°_™d_˛ór_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

639 
	`πai_•ö_gu∆ock
(&
πai_˝u_lock
[0]);

641 
	`b¨rõr
();

642 
	}
}

656 
ölöe
 
	$π_globÆ_˛i
()

658 
	`π_gë_globÆ_lock
();

659 
	}
}

667 
ölöe
 
	$π_globÆ_°i
()

669 
	`π_ªÀa£_globÆ_lock
();

670 
	`πai_°i
();

671 
	}
}

679 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

681 
Êags
;

683 
	`b¨rõr
();

684 
Êags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

685 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

686 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

687 
	`b¨rõr
();

688  
Êags
 | 1;

690 
	`b¨rõr
();

691  
Êags
;

692 
	}
}

701 
ölöe
 
	$π_globÆ_ßve_Êags
(*
Êags
)

703 
hÊags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

705 *
Êags
 = 
	`ã°_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0]Ë? 
hÊags
 : hflags | 1;

706 i‡(
hÊags
) {

707 
	`πai_°i
();

709 
	}
}

718 
ölöe
 
	$π_globÆ_ª°‹e_Êags
(
Êags
)

720 
	`b¨rõr
();

721 i‡(
	`ã°_™d_˛ór_bô
(0, &
Êags
)) {

722 
	`π_ªÀa£_globÆ_lock
();

724 
	`π_gë_globÆ_lock
();

726 i‡(
Êags
) {

727 
	`πai_°i
();

729 
	`b¨rõr
();

730 
	}
}

734 
	#_£nd_sched_ùi
(
de°
)

	)

736 
	#π_•ö_lock
(
lock
)

	)

737 
	#π_•ö_u∆ock
(
lock
)

	)

739 
	#π_•ö_lock_úq
(
lock
Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

740 
	#π_•ö_u∆ock_úq
(
lock
Ëdÿ{ 
	`πai_°i
(); } 0)

	)

742 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

744 
Êags
;

745 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

746  
Êags
;

747 
	}
}

748 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

750 
	#π_gë_globÆ_lock
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

751 
	#π_ªÀa£_globÆ_lock
()

	)

753 
	#π_globÆ_˛i
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

754 
	#π_globÆ_°i
(Ëdÿ{ 
	`πai_°i
(); } 0)

	)

756 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

758 
Êags
;

759 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

760  
Êags
;

761 
	}
}

762 
	#π_globÆ_ª°‹e_Êags
(
Êags
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

764 
	#π_globÆ_ßve_Êags
(
Êags
Ëdÿ{ 
	`πai_ßve_Êags
(*Êags); } 0)

	)

768 
asmlökage
 
π_¥ötk
(c⁄° *
f‹m©
, ...);

769 
asmlökage
 
π_sync_¥ötk
(c⁄° *
f‹m©
, ...);

771 
hÆ_domaö_°ru˘
 
πai_domaö
;

772 
hÆ_domaö_°ru˘
 *
fusi⁄_domaö
;

774 
	#_π_swôch_to_ªÆ_time
(
˝uid
) \

776 
πai_löux_c⁄ãxt
[
˝uid
].
lÊags
 = 
	`xchg
(
	`ROOT_STATUS_ADR
(˝uid), (1 << 
IPIPE_STALL_FLAG
)); \

777 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 1; \

778 
	`__ùùe_£t_cuºít_domaö
(&
πai_domaö
); \

779 } 0)

	)

781 
	#π_swôch_to_löux
(
˝uid
) \

783 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

784 
	`__ùùe_£t_cuºít_domaö
(
hÆ_roŸ_domaö
); \

785 
	`ROOT_STATUS_VAL
(
˝uid
Ë
πai_löux_c⁄ãxt
[˝uid].
lÊags
; \

786 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 0; \

788 } 0)

	)

790 
	#π_swôch_to_ªÆ_time
(
˝uid
) \

792 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

793 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

795 } 0)

	)

797 
	#πai_gë_öå_h™dÀr
(
v
) \

798 ((
idt_èbÀ
[
v
].
b
 & 0xFFFF0000Ë| (idt_èbÀ[v].
a
 & 0x0000FFFF))

	)

799 
	#ack_bad_úq
 
hÆ_ack_sy°em_úq


800 

	)

801 
	#πai_öô_èsk¥i_úqs
() \

803 
v
; \

804 
v
 = 
SPURIOUS_APIC_VECTOR
 + 1; v < 256; v++) { \

805 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
v
 - 
FIRST_EXTERNAL_VECTOR
, ((*)())
	`πai_gë_öå_h™dÀr
(v), (*)
ack_bad_úq
, 
IPIPE_HANDLE_MASK
); \

807 } 0)

	)

809 
ölöe
 
	$π_ßve_swôch_to_ªÆ_time
(
˝uid
)

811 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) {

812 
	`_π_swôch_to_ªÆ_time
(
˝uid
);

816 
	}
}

818 
	#π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
) \

820 i‡(!
sÊags
) { \

821 
	`π_swôch_to_löux
(
˝uid
); \

822 } i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

824 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

826 } 0)

	)

828 
	#ö_hπ_mode
(
˝uid
Ë(
πai_löux_c⁄ãxt
[˝uid].
sÊags
)

	)

830 #i‡
deföed
(
CONFIG_X86_LOCAL_APIC
)

831 
ölöe
 
	$ßve_™d_£t_èsk¥i
(
èsk¥i
)

833 
ßved_èsk¥i
 = 
	`≠ic_ªad
(
APIC_TASKPRI
);

834 
	`≠ic_wrôe
(
APIC_TASKPRI
, 
èsk¥i
);

835  
ßved_èsk¥i
;

836 
	}
}

838 
	#ª°‹e_èsk¥i
(
èsk¥i
) \

839 dÿ{ 
	`≠ic_wrôe_¨ound
(
APIC_TASKPRI
, 
èsk¥i
); } 0)

	)

842 
ölöe
 
	$π_£t_timî_dñay
(
dñay
)

844 i‡(
dñay
) {

845 
Êags
;

846 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

847 #ifde‡
CONFIG_X86_LOCAL_APIC


848 i‡(
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

849 
	`wrm§l
(
MSR_IA32_TSC_DEADLINE
, 
	`πai_rdtsc
(Ë+ 
dñay
);

851 
dñay
 = 
	`πai_imuldiv
(dñay, 
πai_tu«bÀs
.
≠ic_‰eq
,Ñèi_tu«bÀs.
˝u_‰eq
);

852 
	`≠ic_wrôe_¨ound
(
APIC_TMICT
, 
dñay
);

855 
dñay
 = 
	`πai_imuldiv
(dñay, 
RTAI_FREQ_8254
, 
πai_tu«bÀs
.
˝u_‰eq
);

856 
	`outb
(
dñay
 & 0xff,0x40);

857 
	`outb
(
dñay
 >> 8,0x40);

859 
	`πai_hw_ª°‹e_Êags
(
Êags
);

861 
	}
}

865 
πai_¸ôiˇl_íãr
((*
synch
)());

867 
	`πai_¸ôiˇl_exô
(
Êags
);

869 
	`πai_ˇlibøã_8254
();

871 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
,

872 
pﬁicy
,

873 
¥io
);

875 
	`πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
domaö
, 
evít
, (*
h™dÀr
)(, *));

881 #ifde‡
__KERNEL__


883 
	~<löux/kî√l.h
>

885 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

887 *
	`Œ2a
(
Œ
, *
s
);

889 #ifde‡
__˝lu•lus


893 
	`π_ªque°_úq
(
úq
,

894 (*
h™dÀr
)(
úq
, *
cookõ
),

895 *
cookõ
,

896 
ªtmode
);

898 
	`π_ªÀa£_úq
(
úq
);

900 
	`ack_8259A_úq
(
úq
);

902 
	`π_£t_úq_ack
(
úq
, (*
úq_ack
)(, *));

904 
ölöe
 
	`π_ªque°_úq_wack
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
, (*
úq_ack
)(, *))

906 
ªtvÆ
;

907 i‡((
ªtvÆ
 = 
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
cookõ
, 
ªtmode
)) < 0) {

908  
ªtvÆ
;

910  
	`π_£t_úq_ack
(
úq
, 
úq_ack
);

913 
	`π_£t_úq_cookõ
(
úq
, *
cookõ
);

915 
	`π_£t_úq_ªtmode
(
úq
, 
Á°ªt
);

921 
	`π_°¨tup_úq
(
úq
);

923 
	`π_shutdown_úq
(
úq
);

925 
	`π_íabÀ_úq
(
úq
);

927 
	`π_dißbÀ_úq
(
úq
);

929 
	`π_mask_™d_ack_úq
(
úq
);

931 
	`π_unmask_úq
(
úq
);

933 
	`π_ack_úq
(
úq
);

938 
	#πai_do_x86öt
(
úq
, 
h™dÀr
) \

940 
__asm__
 
	`__vﬁ©ûe__
 ( "pushÊ;Öush %%cs; cÆ»*%1": : "a" (
úq
), "m" (
h™dÀr
)); \

941 } 0)

	)

945 
	`π_do_úq
(
úq
);

947 
	`π_ªque°_löux_úq
(
úq
,

948 *
h™dÀr
,

949 *
«me
,

950 *
dev_id
);

952 
	`π_‰ì_löux_úq
(
úq
,

953 *
dev_id
);

955 
	`π_≥nd_löux_úq
(
úq
);

957 
RTAI_SYSCALL_MODE
 
	`u§_π_≥nd_löux_úq
(
úq
);

959 
	`π_≥nd_löux_§q
(
§q
);

961 
	`π_ªque°_§q
(
œbñ
,

962 (*
k_h™dÀr
)(),

963 (*
u_h™dÀr
)());

965 
	`π_‰ì_§q
(
§q
);

967 
	`π_assign_úq_to_˝u
(
úq
, 
˝us_mask
);

969 
	`π_ª£t_úq_to_sym_mode
(
úq
);

971 
	`π_ªque°_timî_˝uid
((*
h™dÀr
)(),

972 
tick
,

973 
˝uid
);

975 
	`π_ªque°_≠ic_timîs
((*
h™dÀr
)(),

976 
≠ic_timî_£tup_d©a
 *
tmd©a
);

978 
	`π_‰ì_≠ic_timîs
();

980 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, 
u£_≠ic
);

982 
	`π_‰ì_timî
();

984 
RT_TRAP_HANDLER
 
	`π_£t_å≠_h™dÀr
(RT_TRAP_HANDLER 
h™dÀr
);

986 
	`π_ªÀa£_πc
();

988 
	`π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
);

990 
	#π_mou¡
()

	)

992 
	#π_umou¡
()

	)

994 
RTIME
 
	`rd_8254_ts
();

996 
	`π_£tup_8254_tsc
();

998 (*
	`π_£t_ihook
((*
hook‚
)()))();

1002 
ölöe
 
	`π_ªque°_globÆ_úq
(
úq
, (*
h™dÀr
)())

1004  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, 0, 0);

1007 
ölöe
 
	`π_ªque°_globÆ_úq_ext
(
úq
, (*
h™dÀr
)(), 
cookõ
)

1009  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, (*)
cookõ
, 1);

1012 
ölöe
 
	`π_£t_globÆ_úq_ext
(
úq
, 
ext
, 
cookõ
)

1014 
	`π_£t_úq_cookõ
(
úq
, (*)
cookõ
);

1017 
ölöe
 
	`π_‰ì_globÆ_úq
(
úq
)

1019  
	`π_ªÀa£_úq
(
úq
);

1022 #ifde‡
__˝lu•lus


1023 
	}
}

1028 
	~<asm/πai_ﬁd«mes.h
>

1029 
	~<asm/πai_emuœã_tsc.h
>

1031 
	#RTAI_DEFAULT_TICK
 100000

	)

1032 #ifde‡
CONFIG_RTAI_TRACE


1033 
	#RTAI_DEFAULT_STACKSZ
 8192

	)

1035 
	#RTAI_DEFAULT_STACKSZ
 1024

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_hal_64.h

42 #i‚de‡
_RTAI_ASM_X86_64_HAL_H


43 
	#_RTAI_ASM_X86_64_HAL_H


	)

45 
	#RTAI_SYSCALL_MODE


46 

	)

47 
	#LOCKED_LINUX_IN_IRQ_HANDLER


	)

48 
	#UNWRAPPED_CATCH_EVENT


	)

50 
	~<πai_hÆ_«mes.h
>

51 
	~<asm/πai_ve˘‹s.h
>

52 
	~<πai_ty≥s.h
>

54 
__ölöe__
 
	$f‚z
 (
w‹d
) {

56 
	`__asm__
("bsfq %1, %0"

57 : "Ù" (
w‹d
)

58 : "r" (
w‹d
));

59  
w‹d
;

60 
	}
}

62 
ölöe
 
	$πai_uŒdiv
(
uŒ
, 
uld
, *
r
)

64 i‡(
r
) {

65 *
r
 = 
uŒ
%
uld
;

67  
uŒ
/
uld
;

75 
qf
, 
rf
;

76 
tq
, 
rh
;

77 uni⁄ { 
uŒ
; 
ul
[2]; } 
p
, 
q
;

79 
p
.
uŒ
 = ull;

80 
q
.
uŒ
 = 0;

81 
rf
 = 0x100000000ULL - (
qf
 = 0xFFFFFFFFUL / 
uld
) * uld;

83 
p
.
uŒ
 >
uld
) {

84 
q
.
ul
[1] +(
tq
 = 
p
.ul[1] / 
uld
);

85 
rh
 = 
p
.
ul
[1] - 
tq
 * 
uld
;

86 
q
.
uŒ
 +
rh
 * 
qf
 + (
tq
 = 
p
.
ul
[0] / 
uld
);

87 
p
.
uŒ
 = 
rh
 * 
rf
 + (p.
ul
[0] - 
tq
 * 
uld
);

90 i‡(
r
)

91 *
r
 = 
p
.
uŒ
;

93  
q
.
uŒ
;

95 
	}
}

97 
ölöe
 
	$πai_imuldiv
 (
i
, 
mu…
, 
div
) {

101 
dummy
;

103 
__asm__
 
	`__vﬁ©ûe__
 ( \

106 : "˜" (
i
), "=d" (
dummy
)

107 : "a" (
i
), "d" (
mu…
), "c" (
div
));

109  
i
;

110 
	}
}

112 
ölöe
 
	$πai_Œimd
(
Œ
, 
mu…
, 
div
) {

113  
	`πai_imuldiv
(
Œ
, 
mu…
, 
div
);

114 
	}
}

121 
ölöe
 
	$πai_u64div32c
(
a
,

122 
b
,

123 *
r
) {

125 uni⁄ { 
uŒ
; 
ul
[2]; } 
u
;

126 
u
.
uŒ
 = 
a
;

127 
__asm__
 
	`__vﬁ©ûe
(

136 : "˜" (
u
.
ul
[0]), "=d" (u.ul[1])

137 : "a" (
u
.
ul
[0]), "d" (u.ul[1]), "c" (
b
)

140  
a
;

141 
	}
}

143 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

144 
	~<löux/sched.h
>

145 
	~<löux/öãºu±.h
>

146 
	~<asm/desc.h
>

148 
	~<asm/io.h
>

149 
	~<asm/πai_©omic.h
>

150 
	~<asm/πai_Âu.h
>

151 #ifde‡
CONFIG_X86_LOCAL_APIC


152 
	~<asm/fixm≠.h
>

153 
	~<asm/≠ic.h
>

155 
	~<πai_åa˚.h
>

157 #i‚de‡
IPIPE_IRQ_DOALL


158 
	#IPIPE_IRQ_DOALL


	)

161 #i‡
deföed
(
__IPIPE_2LEVEL_IRQMAP
Ë|| deföed(
__IPIPE_3LEVEL_IRQMAP
)

162 
	#úq≥nd_himask
 
úq≥nd_him≠


	)

163 
	#úq≥nd_lomask
 
úq≥nd_lom≠


	)

164 
	#úqhñd_mask
 
úqhñd_m≠


	)

165 
	#IPIPE_IRQMASK_ANY
 
IPIPE_IRQ_DOALL


	)

166 
	#IPIPE_IRQ_IMASK
 (
BITS_PER_LONG
 - 1)

	)

167 
	#IPIPE_IRQ_ISHIFT
 5

	)

170 
	sπai_ªÆtime_úq_s
 {

173 
	mªtmode
;

174 
	m˝umask
;

184 #ifde‡
CONFIG_X86_IO_APIC


185 #i‚de‡
FIRST_DEVICE_VECTOR


186 
	#FIRST_DEVICE_VECTOR
 (
FIRST_EXTERNAL_VECTOR
 + 
VECTOR_OFFSET_START
)

	)

188 
ölöe
 
	$ext_úq_ve˘‹
(
úq
)

190 i‡(
úq
 != 2) {

191  (
FIRST_DEVICE_VECTOR
 + 8*(
úq
 < 2 ? irq : irq - 1));

193  -
EINVAL
;

194 
	}
}

196 
ölöe
 
	$ext_úq_ve˘‹
(
úq
)

198 i‡(
úq
 != 2) {

199  (
FIRST_EXTERNAL_VECTOR
 + 
úq
);

201  -
EINVAL
;

202 
	}
}

205 
	#RTAI_DOMAIN_ID
 0x9ac15d93

206 
	#RTAI_NR_TRAPS
 
HAL_NR_FAULTS


	)

207 
	#RTAI_NR_SRQS
 32

	)

209 
	#RTAI_APIC_TIMER_VECTOR
 
RTAI_APIC_HIGH_VECTOR


	)

210 
	#RTAI_APIC_TIMER_IPI
 
RTAI_APIC_HIGH_IPI


	)

211 
	#RTAI_SMP_NOTIFY_VECTOR
 
RTAI_APIC_LOW_VECTOR


	)

212 
	#RTAI_SMP_NOTIFY_IPI
 
RTAI_APIC_LOW_IPI


	)

214 
	#RTAI_TIMER_8254_IRQ
 0

	)

215 
	#RTAI_FREQ_8254
 1193180

	)

216 
	#RTAI_APIC_ICOUNT
 ((
RTAI_FREQ_APIC
 + 
HZ
/2)/HZ)

	)

217 
	#RTAI_COUNTER_2_LATCH
 0xff„

	)

218 
	#RTAI_LATENCY_8254
 
CONFIG_RTAI_SCHED_8254_LATENCY


	)

219 
	#RTAI_SETUP_TIME_8254
 2011

	)

221 
	#RTAI_CALIBRATED_APIC_FREQ
 0

	)

222 
	#RTAI_FREQ_APIC
 (
πai_tu«bÀs
.
≠ic_‰eq
)

	)

223 
	#RTAI_LATENCY_APIC
 
CONFIG_RTAI_SCHED_APIC_LATENCY


	)

224 
	#RTAI_SETUP_TIME_APIC
 1000

	)

226 
	#RTAI_TIME_LIMIT
 0x7000000000000000LL

	)

228 
	#RTAI_IFLAG
 9

	)

230 
	#πai_˝uid
(Ë
	`hÆ_¥o˚ss‹_id
()

	)

231 
	#πai_tskext
(
idx
Ë
hÆ_tskext
[idx]

	)

234 
	#πai_hw_˛i
(Ë
	`hÆ_hw_˛i
()

	)

235 
	#πai_hw_°i
(Ë
	`hÆ_hw_°i
()

	)

236 
	#πai_hw_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

237 
	#πai_hw_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

238 
	#πai_hw_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

241 
	#πai_˛i
(Ë
	`hÆ_hw_˛i
()

	)

242 
	#πai_°i
(Ë
	`hÆ_hw_°i
()

	)

243 
	#πai_ßve_Êags_™d_˛i
(
x
Ë
	`hÆ_hw_loˇl_úq_ßve
(x)

	)

244 
	#πai_ª°‹e_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_ª°‹e
(x)

	)

245 
	#πai_ßve_Êags
(
x
Ë
	`hÆ_hw_loˇl_úq_Êags
(x)

	)

264 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

266 
	#ROOT_STATUS_ADR
(
˝uid
Ë(
ùùe_roŸ_°©us
[˝uid])

	)

267 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*
ùùe_roŸ_°©us
[˝uid])

	)

269 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

271 
	`hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
); \

272 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

273 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_lo
[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

274 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &(
domaö
)->
˝ud©a
[
˝uid
].
úq_≥ndög_hi
); \

276 } 0)

	)

278 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

280 i‡(
	`__ùùe_ùídög_p
(
	`ùùe_this_˝u_roŸ_c⁄ãxt
())) { \

281 
	`πai_˛i
(); \

282 
	`__ùùe_sync_°age
(); \

284 } 0)

	)

290 
	#ROOT_STATUS_ADR
(
˝uid
Ë(&(
__ùùe_roŸ_°©us
))

	)

291 
	#ROOT_STATUS_VAL
(
˝uid
Ë(*(&
__ùùe_roŸ_°©us
))

	)

294 #i‡
deföed
(
__IPIPE_2LEVEL_IRQMAP
Ë|| deföed(
__IPIPE_3LEVEL_IRQMAP
)

295 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

296 
	`__ùùe_£t_úq_≥ndög
(
domaö
, 
úq
)

	)

298 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

300 i‡(
	`__ùùe_ùídög_p
(
	`ùùe_this_˝u_roŸ_c⁄ãxt
())) { \

301 
	`πai_˛i
(); \

302 
	`__ùùe_sync_°age
(); \

304 } 0)

	)

306 
	#hÆ_≥nd_domaö_unc⁄d
(
úq
, 
domaö
, 
˝uid
) \

308 i‡(
	`likñy
(!
	`ã°_bô
(
IPIPE_LOCK_FLAG
, &(
domaö
)->
úqs
[
úq
].
c⁄åﬁ
))) { \

309 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_lomask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

310 
	`__£t_bô
((
úq
Ë>> 
IPIPE_IRQ_ISHIFT
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úq≥nd_himask
)); \

312 
	`__£t_bô
((
úq
Ë& 
IPIPE_IRQ_IMASK
, &
	`ùùe_˝udom_v¨
(
domaö
, 
úqhñd_mask
)[(úqË>> 
IPIPE_IRQ_ISHIFT
]); \

314 
	`ùùe_˝udom_v¨
(
domaö
, 
úqÆl
)[
úq
]++; \

315 } 0)

	)

317 
	#hÆ_Á°_Êush_pùñöe
(
˝uid
) \

319 i‡(
	`ùùe_˝udom_v¨
(
hÆ_roŸ_domaö
, 
úq≥nd_himask
) != 0) { \

320 
	`πai_˛i
(); \

321 
	`hÆ_sync_°age
(
IPIPE_IRQMASK_ANY
); \

323 } 0)

	)

328 
	#hÆ_≥nd_unc⁄d
(
úq
, 
˝uid
Ë
	`hÆ_≥nd_domaö_unc⁄d
(úq, 
hÆ_roŸ_domaö
, cpuid)

	)

330 vﬁ©ûê*
ùùe_roŸ_°©us
[];

332 
	#hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
) \

334 i‡(!
	`ã°_bô
(
IPIPE_STALL_FLAG
, 
	`ROOT_STATUS_ADR
(
˝uid
))) { \

335 
	`hÆ_Á°_Êush_pùñöe
(
˝uid
); \

336 
	`πai_°i
(); \

338 } 0)

	)

340 #ifde‡
CONFIG_PREEMPT


341 
	#πai_ßve_™d_lock_¥ìm±_cou¡
() \

342 dÿ{ *
¥˙ç
, 
¥˙t
;Ör˙à
	`xchg
’r˙ç = &
	`¥ìm±_cou¡
(), 1);

	)

343 
	#πai_ª°‹e_¥ìm±_cou¡
() \

344 *
¥˙ç
 = 
¥˙t
; } 0)

	)

346 
	#πai_ßve_™d_lock_¥ìm±_cou¡
();

	)

347 
	#πai_ª°‹e_¥ìm±_cou¡
();

	)

350 (*
	tπ_úq_h™dÀr_t
)(
	túq
, *
	tcookõ
);

352 
	#RTAI_CALIBRATED_CPU_FREQ
 0

	)

353 
	#RTAI_CPU_FREQ
 (
πai_tu«bÀs
.
˝u_‰eq
)

	)

355 
ölöe
 
	$πai_rdtsc
 ()

357 
__a
,
__d
;

358 
asm
 vﬁ©ûe("rdtsc" : "˜" (
__a
), "=d" (
__d
));

359  (()
__a
Ë| ((()
__d
)<<32);

360 
	}
}

362 
	s≠ic_timî_£tup_d©a
 {

363 
	mmode
;

364 
	mcou¡
;

367 
π_times
Ñt_times;

369 
π_times
 
π_smp_times
[
RTAI_NR_CPUS
];

371 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

373 vﬁ©ûê
πai_˝u_lock
[];

375 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,18) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,25)) || LINUX_VERSION_CODE > KERNEL_VERSION(2,6,26)

376 
	#≠ic_wrôe_¨ound
 
≠ic_wrôe


	)

380 #i‡
deföed
(
CONFIG_X86_LOCAL_APIC
Ë&& deföed(
RTAI_TASKPRI
)

381 
	#SET_TASKPRI
(
˝uid
) \

382 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
£t_èsk¥i
) { \

383 
	`≠ic_wrôe_¨ound
(
APIC_TASKPRI
, ((
	`≠ic_ªad
(APIC_TASKPRIË& ~
APIC_TPRI_MASK
Ë| 
RTAI_TASKPRI
)); \

384 
πai_löux_c⁄ãxt
[
˝uid
].
£t_èsk¥i
 = 1; \

385 }

	)

386 
	#CLR_TASKPRI
(
˝uid
) \

387 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
£t_èsk¥i
) { \

388 
	`≠ic_wrôe_¨ound
(
APIC_TASKPRI
, (
	`≠ic_ªad
(APIC_TASKPRIË& ~
APIC_TPRI_MASK
)); \

389 
πai_löux_c⁄ãxt
[
˝uid
].
£t_èsk¥i
 = 0; \

390 }

	)

392 
	#SET_TASKPRI
(
˝uid
)

	)

393 
	#CLR_TASKPRI
(
˝uid
)

	)

396 
	sπai_swôch_d©a
 {

397 vﬁ©ûê
sÊags
;

398 vﬁ©ûê
lÊags
;

399 #i‡
deföed
(
CONFIG_X86_LOCAL_APIC
Ë&& deföed(
RTAI_TASKPRI
)

400 vﬁ©ûê
£t_èsk¥i
;

402 } 
πai_löux_c⁄ãxt
[
RTAI_NR_CPUS
];

404 
úqªtu∫_t
 
πai_brﬂdˇ°_to_loˇl_timîs
(
úq
,

405 *
dev_id
,

406 
±_ªgs
 *
ªgs
);

408 
ölöe
 
	$πai_ßve_Êags_úqbô
()

410 
Êags
;

411 
	`πai_ßve_Êags
(
Êags
);

412  
Êags
 & (1 << 
RTAI_IFLAG
);

413 
	}
}

415 
ölöe
 
	$πai_ßve_Êags_úqbô_™d_˛i
()

417 
Êags
;

418 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

419  
Êags
 & (1 << 
RTAI_IFLAG
);

420 
	}
}

422 #ifde‡
CONFIG_SMP


424 
	#SCHED_VECTOR
 
RTAI_SMP_NOTIFY_VECTOR


	)

425 
	#SCHED_IPI
 
RTAI_SMP_NOTIFY_IPI


	)

427 
	#_£nd_sched_ùi
(
de°
) \

429 
	`≠ic_waô_i¸_idÀ
(); \

430 
	`≠ic_wrôe_¨ound
(
APIC_ICR2
, ()
	`SET_APIC_DEST_FIELD
(()
de°
)); \

431 
	`≠ic_wrôe_¨ound
(
APIC_ICR
, 
APIC_DEST_LOGICAL
 | 
SCHED_VECTOR
); \

432 } 0)

	)

434 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33)

435 
	#RTAI_SPIN_LOCK_TYPE
(
lock
Ë
	)
lock

437 
	#RTAI_SPIN_LOCK_TYPE
(
lock
Ë((
øw_•ölock_t
 *Óock)

	)

439 
	#π_•ö_lock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_lock
(
	`RTAI_SPIN_LOCK_TYPE
÷ock)); b¨rõr(); } 0)

	)

440 
	#π_•ö_u∆ock
(
lock
Ëdÿ{ 
	`b¨rõr
(); 
	`_øw_•ö_u∆ock
(
	`RTAI_SPIN_LOCK_TYPE
÷ock)); b¨rõr(); } 0)

	)

442 
ölöe
 
	$π_•ö_lock_hw_úq
(
•ölock_t
 *
lock
)

444 
	`πai_hw_˛i
();

445 
	`π_•ö_lock
(
lock
);

446 
	}
}

448 
ölöe
 
	$π_•ö_u∆ock_hw_úq
(
•ölock_t
 *
lock
)

450 
	`π_•ö_u∆ock
(
lock
);

451 
	`πai_hw_°i
();

452 
	}
}

454 
ölöe
 
	$π_•ö_lock_hw_úqßve
(
•ölock_t
 *
lock
)

456 
Êags
;

457 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

458 
	`π_•ö_lock
(
lock
);

459  
Êags
;

460 
	}
}

462 
ölöe
 
	$π_•ö_u∆ock_hw_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

464 
	`π_•ö_u∆ock
(
lock
);

465 
	`πai_hw_ª°‹e_Êags
(
Êags
);

466 
	}
}

468 
ölöe
 
	$π_•ö_lock_úq
(
•ölock_t
 *
lock
) {

470 
	`πai_˛i
();

471 
	`π_•ö_lock
(
lock
);

472 
	}
}

474 
ölöe
 
	$π_•ö_u∆ock_úq
(
•ölock_t
 *
lock
) {

476 
	`π_•ö_u∆ock
(
lock
);

477 
	`πai_°i
();

478 
	}
}

480 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
) {

482 
Êags
;

483 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

484 
	`π_•ö_lock
(
lock
);

485  
Êags
;

486 
	}
}

488 
ölöe
 
	$π_•ö_u∆ock_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

490 
	`π_•ö_u∆ock
(
lock
);

491 
	`πai_ª°‹e_Êags
(
Êags
);

492 
	}
}

494 #i‡
RTAI_NR_CPUS
 > 2

498 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

500 
öc
 = 0x0100;

501 
__asm__
 
	`__vﬁ©ûe__
 (

502 
LOCK_PREFIX
 "xaddw %w0, %1\n"

510 :"+Q" (
öc
), "+m" (
lock
[1])

513 
	}
}

515 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

517 
__asm__
 
	`__vﬁ©ûe__
(

518 
LOCK_PREFIX
 "incb %0"

519 :"+m" (
lock
[1])

522 
	}
}

526 
ölöe
 
	$πai_•ö_glock
(vﬁ©ûê*
lock
)

528 
	`ã°_™d_£t_bô
(31, 
lock
)) {

529 
	`˝u_ªœx
();

531 
	`b¨rõr
();

532 
	}
}

534 
ölöe
 
	$πai_•ö_gu∆ock
(vﬁ©ûê*
lock
)

536 
	`ã°_™d_˛ór_bô
(31, 
lock
);

537 
	`˝u_ªœx
();

538 
	}
}

542 
ölöe
 
	$π_gë_globÆ_lock
()

544 
	`b¨rõr
();

545 
	`πai_˛i
();

546 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

547 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

549 
	`b¨rõr
();

550 
	}
}

552 
ölöe
 
	$π_ªÀa£_globÆ_lock
()

554 
	`b¨rõr
();

555 
	`πai_˛i
();

556 i‡(
	`ã°_™d_˛ór_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

557 
	`πai_•ö_gu∆ock
(&
πai_˝u_lock
[0]);

559 
	`b¨rõr
();

560 
	}
}

574 
ölöe
 
	$π_globÆ_˛i
()

576 
	`π_gë_globÆ_lock
();

577 
	}
}

585 
ölöe
 
	$π_globÆ_°i
()

587 
	`π_ªÀa£_globÆ_lock
();

588 
	`πai_°i
();

589 
	}
}

597 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

599 
Êags
;

601 
	`b¨rõr
();

602 
Êags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

603 i‡(!
	`ã°_™d_£t_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0])) {

604 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

605 
	`b¨rõr
();

606  
Êags
 | 1;

608 
	`b¨rõr
();

609  
Êags
;

610 
	}
}

619 
ölöe
 
	$π_globÆ_ßve_Êags
(*
Êags
)

621 
hÊags
 = 
	`πai_ßve_Êags_úqbô_™d_˛i
();

623 *
Êags
 = 
	`ã°_bô
(
	`hÆ_¥o˚ss‹_id
(), &
πai_˝u_lock
[0]Ë? 
hÊags
 : hflags | 1;

624 i‡(
hÊags
) {

625 
	`πai_°i
();

627 
	}
}

636 
ölöe
 
	$π_globÆ_ª°‹e_Êags
(
Êags
)

638 
	`b¨rõr
();

639 i‡(
	`ã°_™d_˛ór_bô
(0, &
Êags
)) {

640 
	`π_ªÀa£_globÆ_lock
();

642 
	`π_gë_globÆ_lock
();

644 i‡(
Êags
) {

645 
	`πai_°i
();

647 
	`b¨rõr
();

648 
	}
}

652 
	#_£nd_sched_ùi
(
de°
)

	)

654 
	#π_•ö_lock
(
lock
)

	)

655 
	#π_•ö_u∆ock
(
lock
)

	)

657 
	#π_•ö_lock_úq
(
lock
Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

658 
	#π_•ö_u∆ock_úq
(
lock
Ëdÿ{ 
	`πai_°i
(); } 0)

	)

660 
ölöe
 
	$π_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

662 
Êags
;

663 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

664  
Êags
;

665 
	}
}

666 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

668 
	#π_gë_globÆ_lock
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

669 
	#π_ªÀa£_globÆ_lock
()

	)

671 
	#π_globÆ_˛i
(Ëdÿ{ 
	`πai_˛i
(); } 0)

	)

672 
	#π_globÆ_°i
(Ëdÿ{ 
	`πai_°i
(); } 0)

	)

674 
ölöe
 
	$π_globÆ_ßve_Êags_™d_˛i
()

676 
Êags
;

677 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

678  
Êags
;

679 
	}
}

680 
	#π_globÆ_ª°‹e_Êags
(
Êags
Ëdÿ{ 
	`πai_ª°‹e_Êags
(Êags); } 0)

	)

682 
	#π_globÆ_ßve_Êags
(
Êags
Ëdÿ{ 
	`πai_ßve_Êags
(*Êags); } 0)

	)

686 
asmlökage
 
π_¥ötk
(c⁄° *
f‹m©
, ...);

687 
asmlökage
 
π_sync_¥ötk
(c⁄° *
f‹m©
, ...);

689 
hÆ_domaö_°ru˘
 
πai_domaö
;

691 
	#_π_swôch_to_ªÆ_time
(
˝uid
) \

693 
πai_löux_c⁄ãxt
[
˝uid
].
lÊags
 = 
	`xchg
(
	`ROOT_STATUS_ADR
(˝uid), (1 << 
IPIPE_STALL_FLAG
)); \

694 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 1; \

695 
	`__ùùe_£t_cuºít_domaö
(&
πai_domaö
); \

696 } 0)

	)

698 
	#π_swôch_to_löux
(
˝uid
) \

700 i‡(
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

701 
	`__ùùe_£t_cuºít_domaö
(
hÆ_roŸ_domaö
); \

702 
	`ROOT_STATUS_VAL
(
˝uid
Ë
πai_löux_c⁄ãxt
[˝uid].
lÊags
; \

703 
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
 = 0; \

705 } 0)

	)

707 
	#π_swôch_to_ªÆ_time
(
˝uid
) \

709 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

710 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

712 } 0)

	)

714 
	#πai_gë_öå_h™dÀr
(
v
) \

715 (((()
idt_èbÀ
[
v
].
off£t_high
Ë<< 32Ë| ((()idt_èbÀ[v].
off£t_middÀ
Ë<< 16Ë| (()idt_èbÀ[v].
off£t_low
))

	)

716 
	#ack_bad_úq
 
hÆ_ack_sy°em_úq


717 

	)

718 
	#πai_öô_èsk¥i_úqs
() \

720 
v
; \

721 
v
 = 
SPURIOUS_APIC_VECTOR
 + 1; v < 256; v++) { \

722 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
v
 - 
FIRST_EXTERNAL_VECTOR
, ((*)())
	`πai_gë_öå_h™dÀr
(v), (*)
ack_bad_úq
, 
IPIPE_HANDLE_MASK
); \

724 } 0)

	)

726 
ölöe
 
	$π_ßve_swôch_to_ªÆ_time
(
˝uid
)

728 i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) {

729 
	`_π_swôch_to_ªÆ_time
(
˝uid
);

733 
	}
}

735 
	#π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
) \

737 i‡(!
sÊags
) { \

738 
	`π_swôch_to_löux
(
˝uid
); \

739 } i‡(!
πai_löux_c⁄ãxt
[
˝uid
].
sÊags
) { \

740 
	`SET_TASKPRI
(
˝uid
); \

741 
	`_π_swôch_to_ªÆ_time
(
˝uid
); \

743 } 0)

	)

745 
	#ö_hπ_mode
(
˝uid
Ë(
πai_löux_c⁄ãxt
[˝uid].
sÊags
)

	)

747 #i‡
deföed
(
CONFIG_X86_LOCAL_APIC
)

748 
ölöe
 
	$ßve_™d_£t_èsk¥i
(
èsk¥i
)

750 
ßved_èsk¥i
 = 
	`≠ic_ªad
(
APIC_TASKPRI
);

751 
	`≠ic_wrôe
(
APIC_TASKPRI
, 
èsk¥i
);

752  
ßved_èsk¥i
;

753 
	}
}

755 
	#ª°‹e_èsk¥i
(
èsk¥i
) \

756 dÿ{ 
	`≠ic_wrôe_¨ound
(
APIC_TASKPRI
, 
èsk¥i
); } 0)

	)

759 
ölöe
 
	$π_£t_timî_dñay
(
dñay
)

761 i‡(
dñay
) {

762 
Êags
;

763 
	`πai_hw_ßve_Êags_™d_˛i
(
Êags
);

764 #ifde‡
CONFIG_X86_LOCAL_APIC


765 i‡(
	`this_˝u_has
(
X86_FEATURE_TSC_DEADLINE_TIMER
)) {

766 
	`wrm§l
(
MSR_IA32_TSC_DEADLINE
, 
	`πai_rdtsc
(Ë+ 
dñay
);

768 
dñay
 = 
	`πai_imuldiv
(dñay, 
πai_tu«bÀs
.
≠ic_‰eq
,Ñèi_tu«bÀs.
˝u_‰eq
);

769 
	`≠ic_wrôe_¨ound
(
APIC_TMICT
, 
dñay
);

772 
dñay
 = 
	`πai_imuldiv
(dñay, 
RTAI_FREQ_8254
, 
πai_tu«bÀs
.
˝u_‰eq
);

773 
	`outb
(
dñay
 & 0xff,0x40);

774 
	`outb
(
dñay
 >> 8,0x40);

776 
	`πai_hw_ª°‹e_Êags
(
Êags
);

778 
	}
}

782 
πai_¸ôiˇl_íãr
((*
synch
)());

784 
	`πai_¸ôiˇl_exô
(
Êags
);

786 
	`πai_ˇlibøã_8254
();

788 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk_°ru˘
 *
èsk
,

789 
pﬁicy
,

790 
¥io
);

792 
	`πai_ˇtch_evít
 (
hÆ_domaö_°ru˘
 *
domaö
, 
evít
, (*
h™dÀr
)(, *));

798 #ifde‡
__KERNEL__


800 
	~<löux/kî√l.h
>

802 
	#πai_¥öt_to_s¸ìn
 
π_¥ötk


	)

804 *
	`Œ2a
(
Œ
, *
s
);

806 #ifde‡
__˝lu•lus


810 
	`π_ªque°_úq
(
úq
,

811 (*
h™dÀr
)(
úq
, *
cookõ
),

812 *
cookõ
,

813 
ªtmode
);

815 
	`π_ªÀa£_úq
(
úq
);

817 
	`π_£t_úq_ack
(
úq
, (*
úq_ack
)(, *));

819 
ölöe
 
	`π_ªque°_úq_wack
(
úq
, (*
h™dÀr
)(úq, *
cookõ
), *cookõ, 
ªtmode
, (*
úq_ack
)(, *))

821 
ªtvÆ
;

822 i‡((
ªtvÆ
 = 
	`π_ªque°_úq
(
úq
, 
h™dÀr
, 
cookõ
, 
ªtmode
)) < 0) {

823  
ªtvÆ
;

825  
	`π_£t_úq_ack
(
úq
, 
úq_ack
);

828 
	`π_£t_úq_cookõ
(
úq
, *
cookõ
);

830 
	`π_£t_úq_ªtmode
(
úq
, 
Á°ªt
);

836 
	`π_°¨tup_úq
(
úq
);

838 
	`π_shutdown_úq
(
úq
);

840 
	`π_íabÀ_úq
(
úq
);

842 
	`π_dißbÀ_úq
(
úq
);

844 
	`π_mask_™d_ack_úq
(
úq
);

846 
	`π_unmask_úq
(
úq
);

848 
	`π_ack_úq
(
úq
);

852 
	`π_ªque°_löux_úq
(
úq
,

853 *
h™dÀr
,

854 *
«me
,

855 *
dev_id
);

857 
	`π_‰ì_löux_úq
(
úq
,

858 *
dev_id
);

860 
	`π_≥nd_löux_úq
(
úq
);

862 
RTAI_SYSCALL_MODE
 
	`u§_π_≥nd_löux_úq
(
úq
);

864 
	`π_≥nd_löux_§q
(
§q
);

866 
	`π_ªque°_§q
(
œbñ
,

867 (*
k_h™dÀr
)(),

868 (*
u_h™dÀr
)());

870 
	`π_‰ì_§q
(
§q
);

872 
	`π_assign_úq_to_˝u
 (
úq
, 
˝umask
);

874 
	`π_ª£t_úq_to_sym_mode
(
úq
);

876 
	`π_ªque°_timî_˝uid
((*
h™dÀr
)(),

877 
tick
,

878 
˝uid
);

880 
	`π_ªque°_≠ic_timîs
((*
h™dÀr
)(),

881 
≠ic_timî_£tup_d©a
 *
tmd©a
);

883 
	`π_‰ì_≠ic_timîs
();

885 
	`π_ªque°_timî
((*
h™dÀr
)(), 
tick
, 
u£_≠ic
);

887 
	`π_‰ì_timî
();

889 
RT_TRAP_HANDLER
 
	`π_£t_å≠_h™dÀr
(RT_TRAP_HANDLER 
h™dÀr
);

891 
	`π_ªÀa£_πc
();

893 
	`π_ªque°_πc
(
πc_‰eq
, *
h™dÀr
);

895 
	#π_mou¡
()

	)

897 
	#π_umou¡
()

	)

899 
RTIME
 
	`rd_8254_ts
();

901 
	`π_£tup_8254_tsc
();

903 (*
	`π_£t_ihook
((*
hook‚
)()))();

907 
ölöe
 
	`π_ªque°_globÆ_úq
(
úq
, (*
h™dÀr
)())

909  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, 0, 0);

912 
ölöe
 
	`π_ªque°_globÆ_úq_ext
(
úq
, (*
h™dÀr
)(), 
cookõ
)

914  
	`π_ªque°_úq
(
úq
, ((*)(,*))
h™dÀr
, (*)
cookõ
, 1);

917 
ölöe
 
	`π_£t_globÆ_úq_ext
(
úq
, 
ext
, 
cookõ
)

919 
	`π_£t_úq_cookõ
(
úq
, (*)
cookõ
);

922 
ölöe
 
	`π_‰ì_globÆ_úq
(
úq
)

924  
	`π_ªÀa£_úq
(
úq
);

927 #ifde‡
__˝lu•lus


928 
	}
}

933 
	~<asm/πai_ﬁd«mes.h
>

934 
	~<asm/πai_emuœã_tsc.h
>

936 
	#RTAI_DEFAULT_TICK
 100000

	)

937 #ifde‡
CONFIG_RTAI_TRACE


938 
	#RTAI_DEFAULT_STACKSZ
 8192

	)

940 
	#RTAI_DEFAULT_STACKSZ
 1024

	)

947 #i‚de‡
_RTAI_HAL_XN_H


948 
	#_RTAI_HAL_XN_H


	)

950 
	#__ønge_ok
(
addr
, 
size
Ë(
	`__ønge_nŸ_ok
◊ddr,sizeË=0)

	)

952 
	#NON_RTAI_SCHEDULE
(
˝uid
Ëdÿ{ 
	`scheduÀ
(); } 0)

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_leds.h

21 #i‚de‡
_RTAI_ASM_I386_LEDS_H


22 
	#_RTAI_ASM_I386_LEDS_H


	)

24 
	~<asm/io.h
>

26 
ölöe
 
	$Àds_∑Ω‹t_func
(
p‹t
, 
Àds
) {

27 
	`outb
(~
Àds
,
p‹t
);

28 
	}
}

30 
	#LEDS_DEFAULT_FUNC
 
Àds_∑Ω‹t_func


	)

31 
	#LEDS_DEFAULT_PORT
 0x378

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_lxrt.h

21 #i‚de‡
_RTAI_ASM_X86_LXRT_H


22 
	#_RTAI_ASM_X86_LXRT_H


	)

24 #ifde‡
__i386__


25 
	~"πai_lxπ_32.h
"

27 
	~"πai_lxπ_64.h
"

	@/usr/src/rtai/base/include/asm-x86/rtai_lxrt_32.h

21 #i‚de‡
_RTAI_ASM_I386_LXRT_H


22 
	#_RTAI_ASM_I386_LXRT_H


	)

24 
	~<löux/vîsi⁄.h
>

26 
	#RTAI_SYSCALL_NR
 0x70000000

	)

28 #i‡
deföed
(
__KERNEL__
Ë&& 
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

30 
	#RT_REG_ORIG_AX
 
‹ig_ax


	)

31 
	#RT_REG_SP
 
•


	)

32 
	#RT_REG_FLAGS
 
Êags


	)

33 
	#RT_REG_IP
 
ù


	)

34 
	#RT_REG_CS
 
cs


	)

35 
	#RT_REG_BP
 
bp


	)

37 
	#RTAI_SYSCALL_CODE
 
bx


	)

38 
	#RTAI_SYSCALL_ARGS
 
cx


	)

39 
	#RTAI_SYSCALL_RETPNT
 
dx


	)

41 
	#LINUX_SYSCALL_NR
 
RT_REG_ORIG_AX


	)

42 
	#LINUX_SYSCALL_REG1
 
bx


	)

43 
	#LINUX_SYSCALL_REG2
 
cx


	)

44 
	#LINUX_SYSCALL_REG3
 
dx


	)

45 
	#LINUX_SYSCALL_REG4
 
si


	)

46 
	#LINUX_SYSCALL_REG5
 
di


	)

47 
	#LINUX_SYSCALL_REG6
 
RT_REG_BP


	)

48 
	#LINUX_SYSCALL_RETREG
 
ax


	)

49 
	#LINUX_SYSCALL_FLAGS
 
RT_REG_FLAGS


	)

53 
	#RT_REG_ORIG_AX
 
‹ig_óx


	)

54 
	#RT_REG_SP
 
e•


	)

55 
	#RT_REG_FLAGS
 
eÊags


	)

56 
	#RT_REG_IP
 
eù


	)

57 
	#RT_REG_CS
 
xcs


	)

58 
	#RT_REG_BP
 
ebp


	)

60 
	#RTAI_SYSCALL_CODE
 
ebx


	)

61 
	#RTAI_SYSCALL_ARGS
 
ecx


	)

62 
	#RTAI_SYSCALL_RETPNT
 
edx


	)

64 
	#LINUX_SYSCALL_NR
 
RT_REG_ORIG_AX


	)

65 
	#LINUX_SYSCALL_REG1
 
ebx


	)

66 
	#LINUX_SYSCALL_REG2
 
ecx


	)

67 
	#LINUX_SYSCALL_REG3
 
edx


	)

68 
	#LINUX_SYSCALL_REG4
 
esi


	)

69 
	#LINUX_SYSCALL_REG5
 
edi


	)

70 
	#LINUX_SYSCALL_REG6
 
RT_REG_BP


	)

71 
	#LINUX_SYSCALL_RETREG
 
óx


	)

72 
	#LINUX_SYSCALL_FLAGS
 
RT_REG_FLAGS


	)

76 
	#LOW
 0

	)

77 
	#HIGH
 1

	)

79 #ifde‡
CONFIG_X86_LOCAL_APIC


81 
	#TIMER_NAME
 "APIC"

	)

82 
	#TIMER_TYPE
 1

	)

83 
	#HRT_LINUX_TIMER_NAME
 "œpic"

	)

84 
	#FAST_TO_READ_TSC


	)

85 
	#TIMER_FREQ
 
RTAI_FREQ_APIC


	)

86 
	#TIMER_LATENCY
 
RTAI_LATENCY_APIC


	)

87 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_APIC


	)

88 
	#ONESHOT_SPAN
 (
CPU_FREQ
/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 2))

89 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


	)

90 
	#USE_LINUX_TIMER


	)

91 
	#upd©e_löux_timî
(
˝uid
) \

92 dÿ{ 
	`hÆ_≥nd_unc⁄d
(
LOCAL_TIMER_IPI
, 
˝uid
); } 0)

	)

94 
	#upd©e_löux_timî
(
˝uid
)

	)

99 
	#USE_LINUX_TIMER


	)

100 
	#TIMER_NAME
 "8254-PIT"

	)

101 
	#TIMER_TYPE
 0

	)

102 
	#HRT_LINUX_TIMER_NAME
 "pô"

	)

103 
	#TIMER_FREQ
 
RTAI_FREQ_8254


	)

104 
	#TIMER_LATENCY
 
RTAI_LATENCY_8254


	)

105 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_8254


	)

106 
	#ONESHOT_SPAN
 ((0x7FFF*(
CPU_FREQ
/
TIMER_FREQ
))/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 1))

107 
	#upd©e_löux_timî
(
˝uid
) \

108 dÿ{ 
	`hÆ_≥nd_unc⁄d
(
TIMER_8254_IRQ
, 
˝uid
); } 0)

	)

112 
	uπai_lxπ_t
 { 
RTIME
 
	mπ
; 
	mi
[2]; *
	mv
[2]; };

114 #ifde‡
__˝lu•lus


118 #ifde‡
__KERNEL__


120 
ölöe
 
	$_lxπ_c⁄ãxt_swôch
 (
èsk_°ru˘
 *
¥ev
, èsk_°ru˘ *
√xt
, 
˝uid
)

122 
	`c⁄ãxt_swôch
(*, *, *);

123 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(3,13,0)

124 
¥ev
->
thªad
.
Âu_cou¡î
 = 0;

126 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,19) && LINUX_VERSION_CODE < KERNEL_VERSION(3,13,0)

127 
¥ev
->
Âu_cou¡î
 = 0;

129 
	`c⁄ãxt_swôch
(0, 
¥ev
, 
√xt
);

130 
	}
}

132 
	~<löux/¶ab.h
>

134 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

135 
	#π_c›y_‰om_u£r
 
__c›y_‰om_u£r


	)

136 
	#π_c›y_to_u£r
 
__c›y_to_u£r


	)

137 
	#π_°∫˝y_‰om_u£r
 
°∫˝y_‰om_u£r


	)

139 
	#π_c›y_‰om_u£r
(
a
, 
b
, 
c
) \

140 –{ 
ªt
 = 
	`__c›y_‰om_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

141 
	#π_c›y_to_u£r
(
a
, 
b
, 
c
) \

142 –{ 
ªt
 = 
	`__c›y_to_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

143 
	#π_°∫˝y_‰om_u£r
(
a
, 
b
, 
c
) \

144 –{ 
ªt
 = 
	`°∫˝y_‰om_u£r
(
a
, 
b
, 
c
);Ñë; } )

	)

146 
	#π_put_u£r
 
__put_u£r


	)

147 
	#π_gë_u£r
 
__gë_u£r


	)

151 
	~<sys/sysˇŒ.h
>

152 
	~<uni°d.h
>

154 
ölöe
 
πai_lxπ_t
 
	$πai_lxπ
(
dynx
, 
lsize
, 
§q
, *
¨g
)

156 
πai_lxπ_t
 
ªt
;

157 
	`sysˇŒ
(
RTAI_SYSCALL_NR
, 
	`ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
), 
¨g
, &
ªt
);

158  
ªt
;

159 
	}
}

161 
	#πai_i›l
(Ëdÿ{ 
	`i›l
(); i›l(3); } 0)

	)

165 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/asm-x86/rtai_lxrt_64.h

21 #i‚de‡
_RTAI_ASM_X86_64_LXRT_H


22 
	#_RTAI_ASM_X86_64_LXRT_H


	)

24 
	~<löux/vîsi⁄.h
>

26 #i‚de‡
NR_sysˇŒs


27 
	#NR_sysˇŒs
 
__NR_sysˇŒ_max


	)

30 
	#RTAI_SYSCALL_NR
 0x70000000

	)

32 #i‡
deföed
(
__KERNEL__
Ë&& 
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,25)

34 
	#RT_REG_ORIG_AX
 
‹ig_ax


	)

35 
	#RT_REG_SP
 
•


	)

36 
	#RT_REG_SS
 
ss


	)

37 
	#RT_REG_FLAGS
 
Êags


	)

38 
	#RT_REG_IP
 
ù


	)

39 
	#RT_REG_CS
 
cs


	)

40 
	#RT_REG_BP
 
bp


	)

41 
	#RT_REG_BX
 
bx


	)

42 
	#RT_REG_CX
 
cx


	)

44 
	#RTAI_SYSCALL_CODE
 
di


	)

45 
	#RTAI_SYSCALL_ARGS
 
si


	)

46 
	#RTAI_SYSCALL_RETPNT
 
dx


	)

48 
	#LINUX_SYSCALL_NR
 
RT_REG_ORIG_AX


	)

49 
	#LINUX_SYSCALL_REG1
 
di


	)

50 
	#LINUX_SYSCALL_REG2
 
si


	)

51 
	#LINUX_SYSCALL_REG3
 
dx


	)

52 
	#LINUX_SYSCALL_REG4
 
r10


	)

53 
	#LINUX_SYSCALL_REG5
 
r8


	)

54 
	#LINUX_SYSCALL_REG6
 
r9


	)

55 
	#LINUX_SYSCALL_RETREG
 
ax


	)

56 
	#LINUX_SYSCALL_FLAGS
 
RT_REG_FLAGS


	)

60 
	#RT_REG_ORIG_AX
 
‹ig_øx


	)

61 
	#RT_REG_SP
 
r•


	)

62 
	#RT_REG_SS
 
ss


	)

63 
	#RT_REG_FLAGS
 
eÊags


	)

64 
	#RT_REG_IP
 
rù


	)

65 
	#RT_REG_CS
 
cs


	)

66 
	#RT_REG_BP
 
rbp


	)

67 
	#RT_REG_BX
 
rbx


	)

68 
	#RT_REG_CX
 
rcx


	)

70 
	#RTAI_SYSCALL_CODE
 
rdi


	)

71 
	#RTAI_SYSCALL_ARGS
 
rsi


	)

72 
	#RTAI_SYSCALL_RETPNT
 
rdx


	)

74 
	#LINUX_SYSCALL_NR
 
RT_REG_ORIG_AX


	)

75 
	#LINUX_SYSCALL_REG1
 
rdi


	)

76 
	#LINUX_SYSCALL_REG2
 
rsi


	)

77 
	#LINUX_SYSCALL_REG3
 
rdx


	)

78 
	#LINUX_SYSCALL_REG4
 
r10


	)

79 
	#LINUX_SYSCALL_REG5
 
r8


	)

80 
	#LINUX_SYSCALL_REG6
 
r9


	)

81 
	#LINUX_SYSCALL_RETREG
 
øx


	)

82 
	#LINUX_SYSCALL_FLAGS
 
RT_REG_FLAGS


	)

86 
	#LOW
 0

	)

87 
	#HIGH
 1

	)

89 #ifde‡
CONFIG_X86_LOCAL_APIC


91 
	#TIMER_NAME
 "APIC"

	)

92 
	#TIMER_TYPE
 1

	)

93 
	#HRT_LINUX_TIMER_NAME
 "œpic"

	)

94 
	#FAST_TO_READ_TSC


	)

95 
	#TIMER_FREQ
 
RTAI_FREQ_APIC


	)

96 
	#TIMER_LATENCY
 
RTAI_LATENCY_APIC


	)

97 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_APIC


	)

98 
	#ONESHOT_SPAN
 (
CPU_FREQ
/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 2))

99 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


	)

100 
	#USE_LINUX_TIMER


	)

101 
	#upd©e_löux_timî
(
˝uid
) \

102 dÿ{ 
	`hÆ_≥nd_unc⁄d
(
LOCAL_TIMER_IPI
, 
˝uid
); } 0)

	)

104 
	#upd©e_löux_timî
(
˝uid
)

	)

109 
	#USE_LINUX_TIMER


	)

110 
	#TIMER_NAME
 "8254-PIT"

	)

111 
	#TIMER_TYPE
 0

	)

112 
	#HRT_LINUX_TIMER_NAME
 "pô"

	)

113 
	#TIMER_FREQ
 
RTAI_FREQ_8254


	)

114 
	#TIMER_LATENCY
 
RTAI_LATENCY_8254


	)

115 
	#TIMER_SETUP_TIME
 
RTAI_SETUP_TIME_8254


	)

116 
	#ONESHOT_SPAN
 ((0x7FFF*(
CPU_FREQ
/
TIMER_FREQ
))/(
CONFIG_RTAI_CAL_FREQS_FACT
 + 1))

117 
	#upd©e_löux_timî
(
˝uid
) \

118 dÿ{ 
	`hÆ_≥nd_unc⁄d
(
TIMER_8254_IRQ
, 
˝uid
); } 0)

	)

122 
	uπai_lxπ_t
 { 
RTIME
 
	mπ
; 
	mi
[1]; *
	mv
[1]; };

124 #ifde‡
__˝lu•lus


128 #ifde‡
__KERNEL__


130 
ölöe
 
	$_lxπ_c⁄ãxt_swôch
 (
èsk_°ru˘
 *
¥ev
, èsk_°ru˘ *
√xt
, 
˝uid
)

132 *
	`c⁄ãxt_swôch
(*, *, *);

136 i‡(
	`èsk_thªad_öfo
(
¥ev
)->
°©us
 & 
TS_USEDFPU
Ë
	`˛ts
();

138 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(3,13,0)

139 
¥ev
->
thªad
.
Âu_cou¡î
 = 0;

141 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,19) && LINUX_VERSION_CODE < KERNEL_VERSION(3,13,0)

142 
¥ev
->
Âu_cou¡î
 = 0;

144 
	`c⁄ãxt_swôch
(
NULL
, 
¥ev
, 
√xt
);

145 
	}
}

147 
	#π_c›y_‰om_u£r
(
a
, 
b
, 
c
) \

148 –{ 
ªt
 = 
	`__c›y_‰om_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

150 
	#π_c›y_to_u£r
(
a
, 
b
, 
c
) \

151 –{ 
ªt
 = 
	`__c›y_to_u£r_ö©omic
(
a
, 
b
, 
c
);Ñë; } )

	)

153 
	#π_put_u£r
 
__put_u£r


	)

154 
	#π_gë_u£r
 
__gë_u£r


	)

156 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

158 
	#π_°∫˝y_‰om_u£r
(
a
, 
b
, 
c
) \

159 –{ 
ªt
 = 
	`°∫˝y_‰om_u£r
(
a
, 
b
, 
c
);Ñë; } )

	)

167 
	#__do_°∫˝y_‰om_u£r
(
d°
,
§c
,
cou¡
,
ªs
) \

169 
__d0
, 
__d1
, 
__d2
; \

170 
__asm__
 
	`__vﬁ©ûe__
( \

189 : "Ù"(
ªs
), "=c"(
cou¡
), "=&a" (
__d0
), "=&S" (
__d1
), \

190 "=&D" (
__d2
) \

191 : "i"(-
EFAULT
), "0"(
cou¡
), "1"(cou¡), "3"(
§c
), "4"(
d°
) \

193 } 0)

	)

195 
ölöe
 
	$π_°∫˝y_‰om_u£r
(*
d°
, c⁄° 
__u£r
 *
§c
, 
cou¡
)

197 
ªs
;

198 
	`__do_°∫˝y_‰om_u£r
(
d°
, 
§c
, 
cou¡
, 
ªs
);

199  
ªs
;

200 
	}
}

206 
	~<sys/sysˇŒ.h
>

207 
	~<uni°d.h
>

209 
πai_lxπ_t
 
	$_πai_lxπ
(
§q
, *
¨g
)

211 
πai_lxπ_t
 
ªtvÆ
;

212 
	`sysˇŒ
(
RTAI_SYSCALL_NR
, 
§q
, 
¨g
, &
ªtvÆ
);

213  
ªtvÆ
;

214 
	}
}

216 
ölöe
 
πai_lxπ_t
 
	$πai_lxπ
(
dynx
, 
lsize
, 
§q
, *
¨g
)

218  
	`_πai_lxπ
(
	`ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
), 
¨g
);

219 
	}
}

221 
	#πai_i›l
(Ëdÿ{ 
	`i›l
(); i›l(3); } 0)

	)

225 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/asm-x86/rtai_oldnames.h

32 #i‚de‡
_RTAI_ASM_X86_OLDNAMES_H


33 
	#_RTAI_ASM_X86_OLDNAMES_H


	)

35 #ifde‡
__KERNEL__


37 
	#IFLAG
 
RTAI_IFLAG


	)

38 
	#h¨d_˛i
(Ë
	`πai_˛i
()

	)

39 
	#h¨d_°i
(Ë
	`πai_°i
()

	)

40 
	#h¨d_ßve_Êags_™d_˛i
(
x
Ë
	`πai_ßve_Êags_™d_˛i
(x)

	)

41 
	#h¨d_ª°‹e_Êags
(
x
Ë
	`πai_ª°‹e_Êags
(x)

	)

42 
	#h¨d_ßve_Êags
(
x
Ë
	`πai_ßve_Êags
(x)

	)

43 
	#h¨d_˝u_id
 
hÆ_¥o˚ss‹_id


	)

47 #i‚de‡
__RTAI_HAL__


49 
	#tu√d
 
πai_tu«bÀs


	)

50 
	#NR_RT_CPUS
 
RTAI_NR_CPUS


	)

51 
	#RT_TIME_END
 
RTAI_TIME_LIMIT


	)

53 
	#CPU_FREQ
 
RTAI_CPU_FREQ


	)

54 
	#TIMER_8254_IRQ
 
RTAI_TIMER_8254_IRQ


	)

55 
	#FREQ_8254
 
RTAI_FREQ_8254


	)

56 
	#LATENCY_8254
 
RTAI_LATENCY_8254


	)

57 
	#SETUP_TIME_8254
 
RTAI_SETUP_TIME_8254


	)

59 
	#FREQ_APIC
 
RTAI_FREQ_APIC


	)

60 
	#LATENCY_APIC
 
RTAI_LATENCY_APIC


	)

61 
	#SETUP_TIME_APIC
 
RTAI_SETUP_TIME_APIC


	)

63 
	#CALIBRATED_APIC_FREQ
 
RTAI_CALIBRATED_APIC_FREQ


	)

64 
	#CALIBRATED_CPU_FREQ
 
RTAI_CALIBRATED_CPU_FREQ


	)

66 #ifde‡
__KERNEL__


68 #unde‡
rdtsc


69 
	#rdtsc
(Ë
	`πai_rdtsc
()

	)

70 
	#rd_CPU_ts
(Ë
	`πai_rdtsc
()

	)

72 
	#π_£t_πai_å≠_h™dÀr
 
π_£t_å≠_h™dÀr


	)

73 
	#π_mou¡_πai
 
π_mou¡


	)

74 
	#π_umou¡_πai
 
π_umou¡


	)

75 
	#ˇlibøã_8254
 
πai_ˇlibøã_8254


	)

77 
	#uŒdiv
(
a
,
b
,
c
Ë
	`πai_uŒdiv
◊,b,c)

	)

78 
	#imuldiv
(
a
,
b
,
c
Ë
	`πai_imuldiv
◊,b,c)

	)

79 
	#Œimd
(
a
,
b
,
c
Ë
	`πai_Œimd
◊,b,c)

	)

80 
	#u64div32
(
a
,
b
,
c
Ë
	`πai_u64div32c
◊,b,c)

	)

82 #i‚de‡
__˝lu•lus


84 
	~<löux/úq.h
>

86 
ölöe
 
π_ªque°_˝u_own_úq
 (
úq
, (*
h™dÀr
)()) {

88  
	`π_ªque°_úq
(
úq
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

89 
	}
}

91 
ölöe
 
	$π_‰ì_˝u_own_úq
 (
úq
) {

93  
	`π_ªÀa£_úq
(
úq
);

94 
	}
}

96 
ölöe
 
	$gë_¸2
 () {

97 
addªss
;

98 
	`__asm__
("movq %%¸2,%0":"Ù" (
addªss
));

99  
addªss
;

100 
	}
}

	@/usr/src/rtai/base/include/asm-x86/rtai_sched.h

23 #i‚de‡
_RTAI_ASM_X86_SCHED_H


24 
	#_RTAI_ASM_X86_SCHED_H


	)

26 #ifde‡
__i386__


27 
	~"πai_sched_32.h
"

29 
	~"πai_sched_64.h
"

32 
	#öô_¨ch_°ack
() \

34 *--(
èsk
->
°ack
Ë
d©a
; \

35 *--(
èsk
->
°ack
Ë(Ë
π_thªad
; \

36 *--(
èsk
->
°ack
) = 0; \

37 *--(
èsk
->
°ack
Ë(Ë
π_°¨tup
; \

38 } 0)

	)

40 
	#DEFINE_LINUX_CR0
 
löux_¸0
;

	)

42 
	#DEFINE_LINUX_SMP_CR0
 
löux_smp_¸0
[
NR_RT_CPUS
];

	)

44 
	#öô_èsk_Âív
(
èsk
Ëdÿ{ 
	`öô_Âív
(—ask)->
Âu_ªg
); } 0)

	)

46 
	#RT_SET_RTAI_TRAP_HANDLER
(
x
Ë
	`π_£t_πai_å≠_h™dÀr
(x)

	)

48 
	#DO_TIMER_PROPER_OP
()

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_sched_32.h

20 #i‚de‡
_RTAI_ASM_I386_SCHED_H


21 
	#_RTAI_ASM_I386_SCHED_H


	)

23 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

24 
__asm__
 
	`__vﬁ©ûe__
( \

46 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

47 );

	)

49 
ölöe
 *
	$gë_°ack_poöãr
()

51 *
•
;

52 
asm
 vﬁ©ûê("mov»%%e•, %0" : "Ù" (
•
));

53  
•
;

54 
	}
}

	@/usr/src/rtai/base/include/asm-x86/rtai_sched_64.h

21 #i‚de‡
_RTAI_ASM_X86_64_SCHED_H


22 
	#_RTAI_ASM_X86_64_SCHED_H


	)

26 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

27 
__asm__
 
	`__vﬁ©ûe__
( \

75 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

76 );

	)

81 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

82 
__asm__
 
	`__vﬁ©ûe__
( \

126 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

127 );

	)

132 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

133 
__asm__
 
	`__vﬁ©ûe__
( \

175 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

176 );

	)

181 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

182 
__asm__
 
	`__vﬁ©ûe__
( \

220 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

221 );

	)

226 
	#π_exch™ge_èsks
(
ﬁdèsk
, 
√wèsk
) \

227 
__asm__
 
	`__vﬁ©ûe__
( \

267 : "c" (&
ﬁdèsk
), "d" (
√wèsk
) \

268 );

	)

271 
ölöe
 *
	$gë_°ack_poöãr
()

273 *
•
;

274 
asm
 vﬁ©ûê("movq %%r•, %0" : "Ù" (
•
));

275  
•
;

276 
	}
}

	@/usr/src/rtai/base/include/asm-x86/rtai_shm.h

21 #i‚de‡
_RTAI_ASM_I386_SHM_H


22 
	#_RTAI_ASM_I386_SHM_H


	)

24 #i‚de‡
__KERNEL__


26 
	~<asm/πai_ve˘‹s.h
>

28 
ölöe
 
	$πai_shmrq
(
§q
, 
¨gs
)

30 
ªtvÆ
;

31 
	`RTAI_DO_TRAP
(
RTAI_SYS_VECTOR
, 
ªtvÆ
, 
§q
, 
¨gs
);

32  
ªtvÆ
;

33 
	}
}

37 
	~<asm/pgèbÀ.h
>

38 
	~<asm/io.h
>

39 
	~<πai_wøµîs.h
>

41 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

42 
	#VMALLOC_VMADDR
(
x
Ë(()(x))

	)

48 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

50 i‡(!
	`pgd_n⁄e
(*
pgd
Ë&& !
	`pgd_bad
(*pgd)) {

51 
pmd_t
 *
pmd
;

52 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

53 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

55 
pmd
 = 
	`pmd_off£t
(
	`pud_off£t
(
pgd
, 
adr
),ádr);

57 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

58 
±e_t
 *
±ï
, 
±e
;

59 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

60 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

62 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

64 
±e
 = *
±ï
;

65 i‡(
	`±e_¥e£¡
(
±e
)) {

66  ((()
	`∑ge_addªss
(
	`±e_∑ge
(
±e
))Ë| (
adr
 & (
PAGE_SIZE
 - 1)));

71 
	}
}

73 
ölöe
 
	$kvút_to_∑
(
adr
)

75  
	`vút_to_phys
((*)
	`uvút_to_kva
(
	`pgd_off£t_k
(
adr
),ádr));

76 
	}
}

78 
ölöe
 
	$uvút_to_bus
(
adr
)

80  
	`vút_to_bus
((*)
	`uvút_to_kva
(
	`pgd_off£t
(
cuºít
->
mm
, 
adr
),ádr));

81 
	}
}

83 
ölöe
 
	$kvút_to_bus
(
adr
)

85 
va
;

87 
va
 = 
	`VMALLOC_VMADDR
(
adr
);

88  
	`vút_to_bus
((*)
	`uvút_to_kva
(
	`pgd_off£t_k
(
va
), va));

89 
	}
}

	@/usr/src/rtai/base/include/asm-x86/rtai_srq.h

20 #i‚de‡
_RTAI_ASM_X86_SRQ_H


21 
	#_RTAI_ASM_X86_SRQ_H


	)

23 #i‚de‡
__KERNEL__


25 
	~<sys/sysˇŒ.h
>

26 
	~<uni°d.h
>

28 
	~<asm/πai_ve˘‹s.h
>

30 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


31 
	#USE_LINUX_SYSCALL


	)

33 #unde‡
USE_LINUX_SYSCALL


36 
	#RTAI_SRQ_SYSCALL_NR
 0x70000001

	)

38 
ölöe
 
	$πai_§q
(
§q
, 
¨gs
)

40 
ªtvÆ
;

41 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

42  
ªtvÆ
;

43 
	}
}

45 
ölöe
 
	$πai_›í_§q
(
œbñ
)

47  ()
	`πai_§q
(0, 
œbñ
);

48 
	}
}

	@/usr/src/rtai/base/include/asm-x86/rtai_usi.h

19 #i‚de‡
_RTAI_ASM_X86_USI_H


20 
	#_RTAI_ASM_X86_USI_H


	)

22 
	#USI_SRQ_MASK
 0xFFFFFFF0

	)

24 
	#_STARTUP_IRQ
 1

	)

25 
	#_SHUTDOWN_IRQ
 2

	)

26 
	#_ENABLE_IRQ
 3

	)

27 
	#_DISABLE_IRQ
 4

	)

28 
	#_MASK_AND_ACK_IRQ
 5

	)

29 
	#_ACK_IRQ
 6

	)

30 
	#_UNMASK_IRQ
 7

	)

31 
	#_DISINT
 8

	)

32 
	#_ENINT
 9

	)

33 
	#_SAVE_FLAGS_CLI
 10

	)

34 
	#_RESTORE_FLAGS
 11

	)

36 #ifde‡
__KERNEL__


38 #ifde‡
CONFIG_RTAI_USI


40 
	$usi_˛i
(
¨g
, *
eÊags
)

42 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

43 
	}
}

45 
	$usi_°i
(
¨g
, *
eÊags
)

47 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

48 
	}
}

50 
	$usi_ßve_Êags_™d_˛i
(
¨g
, *
eÊags
)

52 
Êags
 = *
eÊags
;

53 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

54  
Êags
;

55 
	}
}

57 
	$usi_ª°‹e_Êags
(
Êags
, *
eÊags
)

59 i‡(
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

60 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

62 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

64 
	}
}

66 (*
usi_fun_íåy
[ ])(, *) = {

67 [
_STARTUP_IRQ
] = (*)
π_°¨tup_úq
,

68 [
_SHUTDOWN_IRQ
] = (*)
π_shutdown_úq
,

69 [
_ENABLE_IRQ
] = (*)
π_íabÀ_úq
,

70 [
_DISABLE_IRQ
] = (*)
π_dißbÀ_úq
,

71 [
_MASK_AND_ACK_IRQ
] = (*)
π_mask_™d_ack_úq
,

72 [
_ACK_IRQ
] = (*)
π_ack_úq
,

73 [
_UNMASK_IRQ
] = (*)
π_unmask_úq
,

74 [
_DISINT
] = (*)
usi_˛i
,

75 [
_ENINT
] = (*)
usi_°i
,

76 [
_SAVE_FLAGS_CLI
] = (*)
usi_ßve_Êags_™d_˛i
,

77 [
_RESTORE_FLAGS
] = (*)
usi_ª°‹e_Êags


78 
	}
};

80 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
) \

81 i‡(
§q
 > 
USI_SRQ_MASK
) { \

82 *
ªtvÆ
 = 
usi_fun_íåy
[
§q
 & ~
USI_SRQ_MASK
](
¨gs
, &(
p§
)); \

83  
ªç©h
; \

84 }

	)

87 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
)

	)

	@/usr/src/rtai/base/include/asm-x86/rtai_vectors.h

30 #i‚de‡
_RTAI_ASM_X86_VECTORS_H


31 
	#_RTAI_ASM_X86_VECTORS_H


	)

33 #ifde‡
__KERNEL__


35 
	~<πai_hÆ_«mes.h
>

36 
	~<πai_c⁄fig.h
>

38 #ifde‡
CONFIG_X86_LOCAL_APIC


39 
	#RTAI_APIC_HIGH_VECTOR
 
HAL_APIC_HIGH_VECTOR


	)

40 
	#RTAI_APIC_LOW_VECTOR
 
HAL_APIC_LOW_VECTOR


	)

42 
	#RTAI_APIC_HIGH_VECTOR
 0xff

	)

43 
	#RTAI_APIC_LOW_VECTOR
 0xff

	)

46 #ifde‡
ùùe_≠ic_ve˘‹_úq


47 
	#RTAI_APIC_HIGH_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
RTAI_APIC_HIGH_VECTOR
)

	)

48 
	#RTAI_APIC_LOW_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
RTAI_APIC_LOW_VECTOR
)

	)

49 
	#LOCAL_TIMER_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
LOCAL_TIMER_VECTOR
)

	)

51 
	#RTAI_APIC_HIGH_IPI
 (
RTAI_APIC_HIGH_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

52 
	#RTAI_APIC_LOW_IPI
 (
RTAI_APIC_LOW_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

53 
	#LOCAL_TIMER_IPI
 (
LOCAL_TIMER_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

58 
	#__πai_°rögize0
(
_s_
Ë#_s_

	)

59 
	#__πai_°rögize
(
_s_
Ë
	`__πai_°rögize0
(_s_)

	)

60 
	#__πai_å≠_ˇŒ
(
_t_
Ë
	)
_t_

61 
	#__πai_do_å≠0
(
_t_
Ë
	`__πai_°rögize
(
$
 _t_)

	)

62 
	#__πai_do_å≠
(
_t_
Ë
	`__πai_do_å≠0
(
	`__πai_å≠_ˇŒ
(_t_))

	)

64 
	#RTAI_DO_TRAP
(
v
, 
r
, 
a1
, 
a2
Ëdÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ( 
	`__πai_do_å≠
(v): : "a" (a1), "c" (a2), "d" (&r): "mem‹y"); } 0)

	)

	@/usr/src/rtai/base/include/rtai.h

19 #i‚de‡
_RTAI_RTAI_H


20 
	#_RTAI_RTAI_H


	)

22 #ifde‡
__KERNEL__


23 
	~<löux/vîsi⁄.h
>

26 
	~<πai_ßnôy.h
>

27 
	~<asm/πai.h
>

31 
	#TWOPWR31M1
 2147483647

32 

	)

33 
ölöe
 
	$√xt_ønd
(
ønd
)

35 c⁄° 
a
 = 16807;

36 c⁄° 
m
 = 
TWOPWR31M1
;

37 c⁄° 
q
 = 127773;

38 c⁄° 
r
 = 2836;

40 
lo
, 
hi
;

42 
hi
 = 
ønd
/
q
;

43 
lo
 = 
ønd
 - 
hi
*
q
;

44 
ønd
 = 
a
*
lo
 - 
r
*
hi
;

45 i‡(
ønd
 <= 0) {

46 
ønd
 +
m
;

48  
ønd
;

49 
	}
}

51 
ölöe
 
	$ú™du
(
ønge
)

53 
£ed
 = 783637;

54 c⁄° 
m
 = 
TWOPWR31M1
;

56 
£ed
 = 
	`√xt_ønd
(seed);

57  
	`πai_imuldiv
(
£ed
, 
ønge
, 
m
);

58 
	}
}

	@/usr/src/rtai/base/include/rtai_bits.h

19 #i‚de‡
_RTAI_BITS_H


20 
	#_RTAI_BITS_H


	)

22 
	~<πai_ty≥s.h
>

24 
	#RT_BITS_MAGIC
 0x9ac24448

25 

	)

26 
	#ALL_SET
 0

	)

27 
	#ANY_SET
 1

	)

28 
	#ALL_CLR
 2

	)

29 
	#ANY_CLR
 3

	)

31 
	#ALL_SET_AND_ANY_SET
 4

	)

32 
	#ALL_SET_AND_ALL_CLR
 5

	)

33 
	#ALL_SET_AND_ANY_CLR
 6

	)

34 
	#ANY_SET_AND_ALL_CLR
 7

	)

35 
	#ANY_SET_AND_ANY_CLR
 8

	)

36 
	#ALL_CLR_AND_ANY_CLR
 9

	)

38 
	#ALL_SET_OR_ANY_SET
 10

	)

39 
	#ALL_SET_OR_ALL_CLR
 11

	)

40 
	#ALL_SET_OR_ANY_CLR
 12

	)

41 
	#ANY_SET_OR_ALL_CLR
 13

	)

42 
	#ANY_SET_OR_ANY_CLR
 14

	)

43 
	#ALL_CLR_OR_ANY_CLR
 15

	)

45 
	#SET_BITS
 0

	)

46 
	#CLR_BITS
 1

	)

47 
	#SET_CLR_BITS
 2

	)

48 
	#NOP_BITS
 3

	)

50 
	#BITS_ERR
 (
RTE_OBJINV
)

51 
	#BITS_TIMOUT
 (
RTE_TIMOUT
)

52 

	)

53 
	gπ_bôs_°ru˘
;

55 #ifde‡
__KERNEL__


57 #i‚de‡
__˝lu•lus


59 
	sπ_bôs_°ru˘
 {

61 
π_queue
 
	mqueue
;

62 
	mmagic
;

63 
	mty≥
;

64 
	mmask
;

66 } 
	tBITS
;

72 
__πai_bôs_öô
();

74 
__πai_bôs_exô
();

76 
π_bôs_öô
(
π_bôs_°ru˘
 *
bôs
, 
mask
);

78 
π_bôs_dñëe
(
π_bôs_°ru˘
 *
bôs
);

80 
RTAI_SYSCALL_MODE
 
π_gë_bôs
(
π_bôs_°ru˘
 *
bôs
);

82 
RTAI_SYSCALL_MODE
 
π_bôs_ª£t
(
π_bôs_°ru˘
 *
bôs
, 
mask
);

84 
RTAI_SYSCALL_MODE
 
π_bôs_sig«l
(
π_bôs_°ru˘
 *
bôs
, 
£tfun
, 
masks
);

86 
RTAI_SYSCALL_MODE
 
_π_bôs_waô
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
);

87 
ölöe
 
π_bôs_waô
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
)

89  
_π_bôs_waô
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
ªsu…ög_mask
, 1);

92 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_if
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
);

93 
ölöe
 
π_bôs_waô_if
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
)

95  
_π_bôs_waô_if
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
ªsu…ög_mask
, 1);

98 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_u¡û
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
, 
•a˚
);

99 
ölöe
 
π_bôs_waô_u¡û
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
)

101  
_π_bôs_waô_u¡û
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
time
, 
ªsu…ög_mask
, 1);

104 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_timed
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
, 
•a˚
);

105 
ölöe
 
π_bôs_waô_timed
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
)

107  
_π_bôs_waô_timed
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
dñay
, 
ªsu…ög_mask
, 1);

110 #ifde‡
__˝lu•lus


116 
	~<πai_lxπ.h
>

118 
	#BITSIDX
 0

	)

120 #ifde‡
__˝lu•lus


124 
RTAI_PROTO
(
π_bôs_°ru˘
 *,
π_bôs_öô
,(
«me
, 
mask
))

126 °ru˘ { 
«me
, 
mask
; } 
¨g
 = {Çame, mask };

127  (
π_bôs_°ru˘
 *)
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_INIT
, &
¨g
).
v
[
LOW
];

130 
RTAI_PROTO
(, 
π_bôs_dñëe
,(
π_bôs_°ru˘
 *
bôs
))

132 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; } 
¨g
 = { bits };

133  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_DELETE
, &
¨g
).
i
[
LOW
];

136 
RTAI_PROTO
(, 
π_gë_bôs
,(
π_bôs_°ru˘
 *
bôs
))

138 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; } 
¨g
 = { bits };

139  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_GET
, &
¨g
).
i
[
LOW
];

142 
RTAI_PROTO
(, 
π_bôs_ª£t
,(
π_bôs_°ru˘
 *
bôs
, 
mask
))

144 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
mask
; } 
¨g
 = { bits, mask };

145  ()
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_RESET
, &
¨g
).
i
[
LOW
];

148 
RTAI_PROTO
(, 
π_bôs_sig«l
,(
π_bôs_°ru˘
 *
bôs
, 
£tfun
, 
masks
))

150 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
£tfun
; 
masks
; } 
¨g
 = { bits, setfun, masks };

151  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_SIGNAL
, &
¨g
).
i
[
LOW
];

154 
RTAI_PROTO
(, 
π_bôs_waô
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
))

156 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Ñesulting_mask, 0 };

157  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT
, &
¨g
).
i
[
LOW
];

160 
RTAI_PROTO
(, 
π_bôs_waô_if
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
))

162 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Ñesulting_mask, 0 };

163  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_IF
, &
¨g
).
i
[
LOW
];

166 
RTAI_PROTO
(, 
π_bôs_waô_u¡û
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
))

168 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; 
RTIME
 
time
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Åime,Ñesulting_mask, 0 };

169  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

172 
RTAI_PROTO
(, 
π_bôs_waô_timed
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
))

174 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; 
RTIME
 
dñay
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks, delay,Ñesulting_mask, 0 };

175  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

178 #ifde‡
__˝lu•lus


184 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

186 
	sπ_bôs_°ru˘
 {

187 
›aque
;

188 } 
	tBITS
;

	@/usr/src/rtai/base/include/rtai_fifos.h

26 #i‚de‡
_RTAI_FIFOS_H


27 
	#_RTAI_FIFOS_H


	)

29 
	~<πai_ty≥s.h
>

31 
	#MAX_FIFOS
 64

	)

33 
	#RTAI_FIFOS_MAJOR
 150

	)

35 
	#RESET
 1

	)

36 
	#RESIZE
 2

	)

37 
	#RTF_SUSPEND_TIMED
 3

	)

38 
	#OPEN_SIZED
 4

	)

39 
	#READ_ALL_AT_ONCE
 5

	)

40 
	#READ_TIMED
 6

	)

41 
	#WRITE_TIMED
 7

	)

42 
	#RTF_SEM_INIT
 8

	)

43 
	#RTF_SEM_WAIT
 9

	)

44 
	#RTF_SEM_TRYWAIT
 10

	)

45 
	#RTF_SEM_TIMED_WAIT
 11

	)

46 
	#RTF_SEM_POST
 12

	)

47 
	#RTF_SEM_DESTROY
 13

	)

48 
	#SET_ASYNC_SIG
 14

	)

49 
	#EAVESDROP
 19

	)

50 
	#OVRWRITE
 20

	)

51 
	#READ_IF
 21

	)

52 
	#WRITE_IF
 22

	)

53 
	#RTF_NAMED_CREATE
 23

	)

55 
	#RTF_GET_N_FIFOS
 15

	)

56 
	#RTF_GET_FIFO_INFO
 16

	)

57 
	#RTF_CREATE_NAMED
 17

	)

58 
	#RTF_NAME_LOOKUP
 18

	)

60 
	#RTF_NAMELEN
 15

	)

62 
	sπ_fifo_öfo_°ru˘
{

63 
	mfifo_numbî
;

64 
	msize
;

65 
	m›n˙t
;

66 
	mavbs
, 
	m‰bs
;

67 
	m«me
[
RTF_NAMELEN
+1];

70 
	sπ_fifo_gë_öfo_°ru˘
{

71 
	mfifo
;

72 
	mn
;

73 
π_fifo_öfo_°ru˘
 *
	m±r
;

76 
	#FUN_FIFOS_LXRT_INDX
 10

	)

78 
	#_CREATE
 0

	)

79 
	#_DESTROY
 1

	)

80 
	#_PUT
 2

	)

81 
	#_GET
 3

	)

82 
	#_RESET
 4

	)

83 
	#_RESIZE
 5

	)

84 
	#_SEM_INIT
 6

	)

85 
	#_SEM_DESTRY
 7

	)

86 
	#_SEM_POST
 8

	)

87 
	#_SEM_TRY
 9

	)

88 
	#_CREATE_NAMED
 10

	)

89 
	#_GETBY_NAME
 11

	)

90 
	#_OVERWRITE
 12

	)

91 
	#_PUT_IF
 13

	)

92 
	#_GET_IF
 14

	)

93 
	#_NAMED_CREATE
 15

	)

94 
	#_AVBS
 16

	)

95 
	#_FRBS
 17

	)

97 #ifde‡
__KERNEL__


99 
	~<πai.h
>

101 #ifde‡
__˝lu•lus


105 
__πai_fifos_öô
();

107 
__πai_fifos_exô
();

109 
πf_öô
();

111 (*
πf_h™dÀr_t
)(
	tfifo
, 
	trw
);

120 
πf_¸óã_h™dÀr
(
fifo
,

121 *
h™dÀr
 );

136 
	#X_FIFO_HANDLER
(
h™dÀr
Ë(((*)(, 
rw
))(h™dÀr))

	)

143 #unde‡
πf_¸óã


144 
RTAI_SYSCALL_MODE
 
πf_¸óã
(
fifo
, 
size
);

154 
πf_«med_¸óã
(c⁄° *
«me
, 
size
);

164 
RTAI_SYSCALL_MODE
 
πf_¸óã_«med
(c⁄° *
«me
);

173 
RTAI_SYSCALL_MODE
 
πf_gëfifoby«me
(c⁄° *
«me
);

182 
RTAI_SYSCALL_MODE
 
πf_ª£t
(
fifo
);

189 
RTAI_SYSCALL_MODE
 
πf_de°roy
(
fifo
);

198 
RTAI_SYSCALL_MODE
 
πf_ªsize
(
mö‹
, 
size
);

206 
RTAI_SYSCALL_MODE
 
πf_put
(
fifo
,

207 * 
buf
,

208 
cou¡
 );

217 
RTAI_SYSCALL_MODE
 
πf_ovrwr_put
(
fifo
,

218 * 
buf
,

219 
cou¡
 );

229 
RTAI_SYSCALL_MODE
 
πf_put_if
 (
fifo
,

230 * 
buf
,

231 
cou¡
 );

238 
RTAI_SYSCALL_MODE
 
πf_gë
(
fifo
,

239 * 
buf
,

240 
cou¡
 );

248 
RTAI_SYSCALL_MODE
 
πf_gë_if
(
fifo
,

249 * 
buf
,

250 
cou¡
 );

257 
πf_evdΩ
(
fifo
,

258 * 
buf
,

259 
cou¡
 );

265 
RTAI_SYSCALL_MODE
 
πf_£m_öô
(
fifo
,

266 
vÆue
 );

273 
RTAI_SYSCALL_MODE
 
πf_£m_po°
(
fifo
 );

280 
RTAI_SYSCALL_MODE
 
πf_£m_åywaô
(
fifo
 );

287 
RTAI_SYSCALL_MODE
 
πf_£m_de°roy
(
fifo
 );

289 
	#πf_£m_dñëe
 
πf_£m_de°roy


	)

296 
RTAI_SYSCALL_MODE
 
πf_gë_‰bs
(
fifo
 );

301 
	#πf_¸óã_usög_bh
(
fifo
, 
size
, 
bh_li°
Ë
	`πf_¸óã
(fifo, size)

	)

302 
	#πf_¸óã_usög_bh_™d_u§_buf
(
fifo
, 
buf
, 
size
, 
bh_li°
Ë
	`πf_¸óã
(fifo, size)

	)

303 
	#πf_de°roy_usög_u§_buf
(
fifo
Ë
	`πf_de°roy
(fifo)

	)

305 #ifde‡
__˝lu•lus


311 
	~<sys/ty≥s.h
>

312 
	~<sys/°©.h
>

313 
	~<sys/io˘l.h
>

314 
	~<f˙é.h
>

315 
	~<uni°d.h
>

316 
	~<°dio.h
>

317 
	~<°rög.h
>

318 
	~<πai_lxπ.h
>

320 #ifde‡
__˝lu•lus


324 
RTAI_PROTO
(, 
πf_¸óã
,(
fifo
, 
size
))

326 °ru˘ { 
fifo
, 
size
; } 
¨g
 = { fifo, size };

327  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_CREATE
, &
¨g
).
i
[
LOW
];

330 
RTAI_PROTO
(, 
πf_de°roy
,(
fifo
))

332 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

333  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_DESTROY
, &
¨g
).
i
[
LOW
];

336 
RTAI_PROTO
(, 
πf_put
,(
fifo
, c⁄° *
buf
, 
cou¡
))

338 
lbuf
[
cou¡
];

339 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

340 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

341  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_PUT
, &
¨g
).
i
[
LOW
];

344 
RTAI_PROTO
(, 
πf_put_if
,(
fifo
, c⁄° *
buf
, 
cou¡
))

346 
lbuf
[
cou¡
];

347 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

348 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

349  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_PUT_IF
, &
¨g
).
i
[
LOW
];

352 
RTAI_PROTO
(, 
πf_gë
,(
fifo
, *
buf
, 
cou¡
))

354 
ªtvÆ
;

355 
lbuf
[
cou¡
];

356 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

357 
ªtvÆ
 = 
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GET
, &
¨g
).
i
[
LOW
];

358 i‡(
ªtvÆ
 > 0) {

359 
mem˝y
(
buf
, 
lbuf
, 
ªtvÆ
);

361  
ªtvÆ
;

364 
RTAI_PROTO
(, 
πf_gë_if
,(
fifo
, *
buf
, 
cou¡
))

366 
ªtvÆ
;

367 
lbuf
[
cou¡
];

368 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

369 
ªtvÆ
 = 
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GET_IF
, &
¨g
).
i
[
LOW
];

370 i‡(
ªtvÆ
 > 0) {

371 
mem˝y
(
buf
, 
lbuf
, 
ªtvÆ
);

373  
ªtvÆ
;

376 
RTAI_PROTO
(, 
πf_gë_avbs
, (
fifo
))

378 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

379  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_AVBS
, &
¨g
).
i
[
LOW
];

382 
RTAI_PROTO
(, 
πf_gë_‰bs
, (
fifo
))

384 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

385  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_FRBS
, &
¨g
).
i
[
LOW
];

388 
RTAI_PROTO
(, 
πf_ª£t_lxπ
,(
fifo
))

390 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

391  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_RESET
, &
¨g
).
i
[
LOW
];

394 
RTAI_PROTO
(, 
πf_ªsize_lxπ
,(
fifo
, 
size
))

396 °ru˘ { 
fifo
, 
size
; } 
¨g
 = { fifo, size };

397  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_RESIZE
, &
¨g
).
i
[
LOW
];

400 
RTAI_PROTO
(, 
πf_£m_öô_lxπ
,(
fifo
, 
vÆue
))

402 °ru˘ { 
fifo
, 
vÆue
; } 
¨g
 = { fifo, value };

403  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_INIT
, &
¨g
).
i
[
LOW
];

406 
RTAI_PROTO
(, 
πf_£m_po°_lxπ
,(
fifo
))

408 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

409  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_POST
, &
¨g
).
i
[
LOW
];

412 
RTAI_PROTO
(, 
πf_£m_åywaô_lxπ
,(
fifo
))

414 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

415  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_TRY
, &
¨g
).
i
[
LOW
];

418 
RTAI_PROTO
(, 
πf_£m_de°roy_lxπ
,(
fifo
))

420 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

421  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_DESTRY
, &
¨g
).
i
[
LOW
];

424 
RTAI_PROTO
(, 
πf_«med_¸óã_lxπ
,(c⁄° *
«me
, 
size
))

426 
Àn
;

427 
 ame
[
Àn
 = 
°æí
(
«me
)];

428 °ru˘ { * 
«me
; 
size
; } 
¨g
 = { 
 ame
, size };

429 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

430  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_NAMED_CREATE
, &
¨g
).
i
[
LOW
];

433 
RTAI_PROTO
(, 
πf_¸óã_«med_lxπ
,(c⁄° *
«me
))

435 
Àn
;

436 
 ame
[
Àn
 = 
°æí
(
«me
)];

437 °ru˘ { * 
«me
; } 
¨g
 = { 
 ame
 };

438 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

439  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_CREATE_NAMED
, &
¨g
).
i
[
LOW
];

442 
RTAI_PROTO
(, 
πf_gëfifoby«me_lxπ
,(c⁄° *
«me
))

444 
Àn
;

445 
 ame
[
Àn
 = 
°æí
(
«me
)];

446 °ru˘ { * 
«me
; } 
¨g
 = { 
 ame
 };

447 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

448  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GETBY_NAME
, &
¨g
).
i
[
LOW
];

451 
RTAI_PROTO
(, 
πf_ovrwr_put
,(
fifo
, c⁄° *
buf
, 
cou¡
))

453 
lbuf
[
cou¡
];

454 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

455 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

456  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_OVERWRITE
, &
¨g
).
i
[
LOW
];

459 
RTAI_PROTO
(, 
πf_ª£t
,(
fd
))

461 
ªt
 = 
io˘l
(
fd
, 
RESET
);

462  
ªt
 < 0 ? -
î∫o
 :Ñet;

465 
RTAI_PROTO
(, 
πf_ªsize
,(
fd
, 
size
))

467 
ªt
 = 
io˘l
(
fd
, 
RESIZE
, 
size
);

468  
ªt
 < 0 ? -
î∫o
 :Ñet;

485 
RTAI_PROTO
(, 
πf_su•íd_timed
,(
fd
, 
ms_dñay
))

487 
ªt
 = 
io˘l
(
fd
, 
RTF_SUSPEND_TIMED
, 
ms_dñay
);

488  
ªt
 < 0 ? -
î∫o
 :Ñet;

525 
RTAI_PROTO
(, 
πf_›í_sized
,(c⁄° *
dev
, 
≥rm
, 
size
))

527 
fd
;

529 i‡((
fd
 = 
›í
(
dev
, 
≥rm
)) < 0) {

530  -
î∫o
;

532 i‡(
io˘l
(
fd
, 
RESIZE
, 
size
) < 0) {

533 
˛o£
(
fd
);

534  -
î∫o
;

536  
fd
;

539 
RTAI_PROTO
(, 
πf_evdΩ
,(
fd
, *
buf
, 
cou¡
))

541 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

542 
ªt
 = 
io˘l
(
fd
, 
EAVESDROP
, &
¨gs
);

543  
ªt
 < 0 ? -
î∫o
 :Ñet;

562 
RTAI_PROTO
(, 
πf_ªad_Æl_©_⁄˚
,(
fd
, *
buf
, 
cou¡
))

564 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

565 
ªt
 = 
io˘l
(
fd
, 
READ_ALL_AT_ONCE
, &
¨gs
);

566  
ªt
 < 0 ? -
î∫o
 :Ñet;

590 
RTAI_PROTO
(, 
πf_ªad_timed
,(
fd
, *
buf
, 
cou¡
, 
ms_dñay
))

592 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
 = { buf, cou¡, 
ms_dñay
 };

593 
ªt
 = 
io˘l
(
fd
, 
READ_TIMED
, &
¨gs
);

594  
ªt
 < 0 ? -
î∫o
 :Ñet;

597 
RTAI_PROTO
(, 
πf_ªad_if
,(
fd
, *
buf
, 
cou¡
))

599 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

600 
ªt
 = 
io˘l
(
fd
, 
READ_IF
, &
¨gs
);

601  
ªt
 < 0 ? -
î∫o
 :Ñet;

625 
RTAI_PROTO
(, 
πf_wrôe_timed
,(
fd
, *
buf
, 
cou¡
, 
ms_dñay
))

627 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
 = { buf, cou¡, 
ms_dñay
 };

628 
ªt
 = 
io˘l
(
fd
, 
WRITE_TIMED
, &
¨gs
);

629  
ªt
 < 0 ? -
î∫o
 :Ñet;

632 
RTAI_PROTO
(, 
πf_ovîwrôe
,(
fd
, *
buf
, 
cou¡
))

634 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

635 
ªt
 = 
io˘l
(
fd
, 
OVRWRITE
, &
¨gs
);

636  
ªt
 < 0 ? -
î∫o
 :Ñet;

639 
RTAI_PROTO
(, 
πf_wrôe_if
,(
fd
, *
buf
, 
cou¡
))

641 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

642 
ªt
 = 
io˘l
(
fd
, 
WRITE_IF
, &
¨gs
);

643  
ªt
 < 0 ? -
î∫o
 :Ñet;

646 
RTAI_PROTO
(, 
πf_£m_öô
,(
fd
, 
vÆue
))

648 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_INIT
, 
vÆue
);

649  
ªt
 < 0 ? -
î∫o
 :Ñet;

674 
RTAI_PROTO
(, 
πf_£m_waô
,(
fd
))

676 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_WAIT
);

677  
ªt
 < 0 ? -
î∫o
 :Ñet;

680 
RTAI_PROTO
(, 
πf_£m_åywaô
,(
fd
))

682 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_TRYWAIT
);

683  
ªt
 < 0 ? -
î∫o
 :Ñet;

712 
RTAI_PROTO
(, 
πf_£m_timed_waô
,(
fd
, 
ms_dñay
))

714 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_TIMED_WAIT
, 
ms_dñay
);

715  
ªt
 < 0 ? -
î∫o
 :Ñet;

718 
RTAI_PROTO
(, 
πf_£m_po°
,(
fd
))

720 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_POST
);

721  
ªt
 < 0 ? -
î∫o
 :Ñet;

724 
RTAI_PROTO
(, 
πf_£m_de°roy
,(
fd
))

726 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_DESTROY
);

727  
ªt
 < 0 ? -
î∫o
 :Ñet;

741 
RTAI_PROTO
(, 
πf_£t_async_sig
,(
fd
, 
signum
))

743 
ªt
 = 
io˘l
(
fd
, 
SET_ASYNC_SIG
, 
signum
);

744  
ªt
 < 0 ? -
î∫o
 :Ñet;

752 
RTAI_PROTO_ALWAYS_INLINE
(*, 
πf_gëfifobymö‹
,(
mö‹
, *
buf
, 
Àn
))

754 
¢¥ötf
(
buf
,
Àn
,
CONFIG_RTAI_FIFOS_TEMPLATE
,
mö‹
);

755  
buf
;

758 
RTAI_PROTO
(, 
πf_gëfifoby«me
,(c⁄° *
«me
))

760 
fd
, 
mö‹
;

761 
nm
[
RTF_NAMELEN
+1];

763 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

766 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

767  -
î∫o
;

769 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

770 
mö‹
 = 
io˘l
(
fd
, 
RTF_NAME_LOOKUP
, 
nm
);

771 
˛o£
(
fd
);

772  
mö‹
 < 0 ? -
î∫o
 : minor;

775 
RTAI_PROTO
(, 
πf_«med_¸óã
,(c⁄° *
«me
, 
size
))

777 
fd
, 
mö‹
;

778 
nm
[
RTF_NAMELEN
+1];

780 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

783 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

784  -
î∫o
;

786 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

787 
mö‹
 = 
io˘l
(
fd
, 
RTF_NAMED_CREATE
, 
nm
, 
size
);

788 
˛o£
(
fd
);

789  
mö‹
 < 0 ? -
î∫o
 : minor;

792 
RTAI_PROTO
(, 
πf_¸óã_«med
,(c⁄° *
«me
))

794 
fd
, 
mö‹
;

795 
nm
[
RTF_NAMELEN
+1];

797 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

800 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

801  -
î∫o
;

803 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

804 
mö‹
 = 
io˘l
(
fd
, 
RTF_CREATE_NAMED
, 
nm
);

805 
˛o£
(
fd
);

806  
mö‹
 < 0 ? -
î∫o
 : minor;

809 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_hal_names.h

20 #i‚de‡
_RTAI_HAL_NAMES_H


21 
	#_RTAI_HAL_NAMES_H


	)

23 
	~<löux/vîsi⁄.h
>

25 
	#TSKEXT0
 (
HAL_ROOT_NPTDKEYS
 - 4)

	)

26 
	#TSKEXT1
 (
HAL_ROOT_NPTDKEYS
 - 3)

	)

27 
	#TSKEXT2
 (
HAL_ROOT_NPTDKEYS
 - 2)

	)

28 
	#TSKEXT3
 (
HAL_ROOT_NPTDKEYS
 - 1)

	)

30 
	#HAL_VERSION_STRING
 
IPIPE_VERSION_STRING


	)

32 
	#HAL_NR_CPUS
 
IPIPE_NR_CPUS


	)

33 
	#HAL_NR_FAULTS
 
IPIPE_NR_FAULTS


	)

34 
	#HAL_NR_EVENTS
 
IPIPE_NR_EVENTS


	)

35 
	#HAL_ROOT_NPTDKEYS
 
IPIPE_ROOT_NPTDKEYS


	)

37 
	#HAL_APIC_HIGH_VECTOR
 
IPIPE_HRTIMER_VECTOR


38 
	#HAL_APIC_LOW_VECTOR
 
IPIPE_RESCHEDULE_VECTOR


39 

	)

40 
	#HAL_SCHEDULE_HEAD
 
IPIPE_EVENT_SCHEDULE


	)

41 
	#HAL_SCHEDULE_TAIL
 (
IPIPE_FIRST_EVENT
 - 2)

42 
	#HAL_SYSCALL_PROLOGUE
 
IPIPE_EVENT_SYSCALL


	)

43 
	#HAL_SYSCALL_EPILOGUE
 1000000

44 
	#HAL_EXIT_PROCESS
 
IPIPE_EVENT_EXIT


	)

45 
	#HAL_KICK_PROCESS
 
IPIPE_EVENT_SIGWAKE


	)

47 
	#hÆ_pùñöe
 
__ùùe_pùñöe


	)

48 
	#hÆ_domaö_°ru˘
 
ùùe_domaö


	)

49 
	#hÆ_roŸ_domaö
 
ùùe_roŸ_domaö


	)

52 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,17Ë|| (
deföed
(
CONFIG_PPC
) && LINUX_VERSION_CODE > KERNEL_VERSION(2,6,13))

53 
	#hÆ_cuºít_domaö
(
˝uid
Ë
	`≥r_˝u
(
ùùe_≥r˝u_domaö
, cpuid)

	)

55 
	#hÆ_cuºít_domaö
(
˝uid
Ë(
ùùe_≥r˝u_domaö
[˝uid])

	)

58 
	#hÆ_¥›ag©e_úq
 
ùùe_¥›ag©e_úq


	)

59 
	#hÆ_scheduÀ_úq
 
ùùe_scheduÀ_úq


	)

61 
	#hÆ_¸ôiˇl_íãr
 
ùùe_¸ôiˇl_íãr


	)

62 
	#hÆ_¸ôiˇl_exô
 
ùùe_¸ôiˇl_exô


	)

64 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

65 
	#hÆ_˛ór_úq
 
__ùùe_˛ór_úq


	)

67 
	#hÆ_˛ór_úq
(
a
, 
b
)

	)

70 
	#hÆ_lock_úq
 
__ùùe_lock_úq


	)

71 
	#hÆ_u∆ock_úq
 
__ùùe_u∆ock_úq


	)

73 
	#hÆ_°d_úq_dty≥
 
__ùùe_°d_úq_dty≥


	)

74 
	#hÆ_ùùe_°d_úq_dty≥
 
__adeos_°d_úq_dty≥


	)

76 
	#hÆ_tick_ªgs
 
__ùùe_tick_ªgs


	)

77 
	#hÆ_tick_úq
 
__ùùe_tick_úq


	)

79 
	#hÆ_sync_°age
 
__ùùe_sync_°age


	)

81 
	#hÆ_£t_úq_afföôy
 
ùùe_£t_úq_afföôy


	)

83 
	#hÆ_¥›ag©e_evít
 
ùùe_¥›ag©e_evít


	)

85 
	#hÆ_gë_sysöfo
 
ùùe_gë_sysöfo


	)

87 
	#HAL_TYPE
 "IPIPE-NOTHREADS"

	)

89 
	#INTERCEPT_WAKE_UP_TASK
(
d©a
Ë((
èsk_°ru˘
 *)d©a)

	)

91 
	#FIRST_LINE_OF_RTAI_DOMAIN_ENTRY
 
	`πai_domaö_íåy
(Ë{ i‡(1)

	)

92 
	#LAST_LINE_OF_RTAI_DOMAIN_ENTRY
 }

	)

94 
	#hÆ_su•íd_domaö
(Ë

	)

96 
	#hÆ_Æloc_úq
 
ùùe_Æloc_vúq


	)

97 
	#hÆ_‰ì_úq
 
ùùe_‰ì_vúq


	)

99 #i‡!
deföed
(
CONFIG_PPC
Ë&& (
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,32) || (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)))

100 
	#hÆ_vútuÆize_úq
 
ùùe_vútuÆize_úq


	)

101 
	#hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
) \

103 
domaö
->
˝ud©a
[
˝uid
].
úq_hôs
[
úq
]++; \

104 } 0)

	)

106 
	#hÆ_vútuÆize_úq
(
d
, 
n
, 
h
, 
a
, 
m
) \

107 
	`ùùe_vútuÆize_úq
(
d
, 
n
, (*)
h
, 
NULL
, 
a
, 
m
)

	)

108 
	#hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
) \

111 
domaö
->
˝ud©a
[
˝uid
].
úq_cou¡îs
[
úq
].
≥ndög_hôs
++; \

112 } 0)

	)

115 
	#hÆ_sysöfo_°ru˘
 
ùùe_sysöfo


	)

116 
	#hÆ_©å_°ru˘
 
ùùe_domaö_©å


	)

117 
	#hÆ_öô_©å
 
ùùe_öô_©å


	)

118 
	#hÆ_ªgi°î_domaö
 
ùùe_ªgi°î_domaö


	)

119 
	#hÆ_uƒegi°î_domaö
 
ùùe_uƒegi°î_domaö


	)

120 
	#hÆ_ˇtch_evít
 
ùùe_ˇtch_evít


	)

121 
	#hÆ_evít_h™dÀr
 
ùùe_evít_h™dÀr


	)

122 
	#hÆ_evít_h™dÀr_fun
(
e
Ë
Àgacy
.
h™dÀrs
[e]

123 

	)

124 
	#hÆ_£t_¥ötk_sync
 
ùùe_£t_¥ötk_sync


	)

125 
	#hÆ_£t_¥ötk_async
 
ùùe_£t_¥ötk_async


	)

127 
	#hÆ_scheduÀ_back_roŸ
(
¥ev
) \

129 i‡((
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1)) { \

130 
	`ùùe_ªíãr_roŸ
((
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1), (¥ev)->
pﬁicy
, (¥ev)->
π_¥i‹ôy
); \

131 (
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1Ë
NULL
; \

133 
	`ùùe_ªíãr_roŸ
(
¥ev
, (¥ev)->
pﬁicy
, (¥ev)->
π_¥i‹ôy
); \

135 } 0)

	)

137 
	#hÆ_¥o˚ss‹_id
 
ùùe_¥o˚ss‹_id


	)

139 
	#hÆ_hw_˛i
 
loˇl_úq_dißbÀ_hw


	)

140 
	#hÆ_hw_°i
 
loˇl_úq_íabÀ_hw


	)

141 
	#hÆ_hw_loˇl_úq_ßve
 
loˇl_úq_ßve_hw


	)

142 
	#hÆ_hw_loˇl_úq_ª°‹e
 
loˇl_úq_ª°‹e_hw


	)

143 
	#hÆ_hw_loˇl_úq_Êags
 
loˇl_ßve_Êags_hw


	)

145 
	#hÆ_£t_timî
(
ns
Ë
	`ùùe_tu√_timî
“s, 0)

	)

146 
	#hÆ_ª£t_timî
(Ë
	`ùùe_tu√_timî
(0, 
IPIPE_RESET_TIMER
)

	)

148 
	#hÆ_un°Æl_pùñöe_‰om
 
ùùe_un°Æl_pùñöe_‰om


	)

150 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

151 
	#hÆ_ack_sy°em_úq
 
__ùùe_ack_sy°em_úq


	)

153 
	#hÆ_ack_sy°em_úq
 
__ùùe_ack_≠ic


	)

156 
	#hÆ_úq_h™dÀr
 
πai_úq_h™dÀr


	)

158 
	#hÆ_tskext
 
±d


	)

160 
	#hÆ_£t_löux_èsk_¥i‹ôy
 
ùùe_£tscheduÀr_roŸ


	)

162 #i‡
deföed
(
IPIPE_ROOT_NPTDKEYS
Ë&& 
TSKEXT0
 < 0

163 #îr‹ *** 
TSKEXTs
 
WILL
 
CAUSE
 
MEMORY
 
LEAKS
, 
CHECK
 
BOUNDS
 
IN
 
HAL
 
PATCHES
 ***

	@/usr/src/rtai/base/include/rtai_leds.h

21 #i‚de‡
_RTAI_LEDS_H


22 
	#_RTAI_LEDS_H


	)

24 
	~<πai_ty≥s.h
>

26 #i‡
deföed
(
CONFIG_RTAI_INTERNAL_LEDS_SUPPORT
Ë&& deföed(
CONFIG_RTAI_LEDS
)

28 
	~<asm/πai_Àds.h
>

30 #ifde‡
__˝lu•lus


34 
__πai_Àds_öô
();

36 
__πai_Àds_exô
();

38 
π_Àds_£t_mask
(
mask
,

39 
vÆue
);

41 
π_toggÀ_Àds
(
l
);

43 
π_ª£t_Àds
(
l
);

45 
π_£t_Àds
(
l
);

47 
π_˛ór_Àds
();

49 
π_gë_Àds
();

51 
π_£t_Àds_p‹t
(
p
);

53 
π_c⁄fig_Àds
(
ty≥
,

54 (*
func
)(
p
, 
l
),

55 
p
);

57 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_lxrt.h

66 #i‚de‡
_RTAI_LXRT_H


67 
	#_RTAI_LXRT_H


	)

69 
	~<πai_sched.h
>

70 
	~<πai_«m2num.h
>

73 
	#YIELD
 0

	)

74 
	#SUSPEND
 1

	)

75 
	#RESUME
 2

	)

76 
	#MAKE_PERIODIC
 3

	)

77 
	#WAIT_PERIOD
 4

	)

78 
	#SLEEP
 5

	)

79 
	#SLEEP_UNTIL
 6

	)

80 
	#START_TIMER
 7

	)

81 
	#STOP_TIMER
 8

	)

82 
	#GET_TIME
 9

	)

83 
	#COUNT2NANO
 10

	)

84 
	#NANO2COUNT
 11

	)

85 
	#BUSY_SLEEP
 12

	)

86 
	#SET_PERIODIC_MODE
 13

	)

87 
	#SET_ONESHOT_MODE
 14

	)

88 
	#SIGNAL_HANDLER
 15

	)

89 
	#TASK_USE_FPU
 16

	)

90 
	#GET_TASK_INFO
 17

91 
	#HARD_TIMER_COUNT
 18

	)

92 
	#GET_TIME_NS
 19

	)

93 
	#GET_CPU_TIME_NS
 20

	)

94 
	#SET_RUNNABLE_ON_CPUS
 21

	)

95 
	#SET_RUNNABLE_ON_CPUID
 22

	)

96 
	#GET_TIMER_CPU
 23

	)

97 
	#START_RT_APIC_TIMERS
 24

	)

98 
	#HARD_TIMER_COUNT_CPUID
 25

	)

99 
	#COUNT2NANO_CPUID
 26

	)

100 
	#NANO2COUNT_CPUID
 27

	)

101 
	#GET_TIME_CPUID
 28

	)

102 
	#GET_TIME_NS_CPUID
 29

	)

103 
	#MAKE_PERIODIC_NS
 30

	)

104 
	#SET_SCHED_POLICY
 31

	)

105 
	#SET_RESUME_END
 32

	)

106 
	#SPV_RMS
 33

	)

107 
	#WAKEUP_SLEEPING
 34

	)

108 
	#CHANGE_TASK_PRIO
 35

	)

109 
	#SET_RESUME_TIME
 36

	)

110 
	#SET_PERIOD
 37

	)

111 
	#HARD_TIMER_RUNNING
 38

	)

114 
	#TYPED_SEM_INIT
 39

	)

115 
	#SEM_DELETE
 40

	)

116 
	#NAMED_SEM_INIT
 41

	)

117 
	#NAMED_SEM_DELETE
 42

	)

118 
	#SEM_SIGNAL
 43

	)

119 
	#SEM_WAIT
 44

	)

120 
	#SEM_WAIT_IF
 45

	)

121 
	#SEM_WAIT_UNTIL
 46

	)

122 
	#SEM_WAIT_TIMED
 47

	)

123 
	#SEM_BROADCAST
 48

	)

124 
	#SEM_WAIT_BARRIER
 49

	)

125 
	#SEM_COUNT
 50

	)

126 
	#COND_WAIT
 51

	)

127 
	#COND_WAIT_UNTIL
 52

	)

128 
	#COND_WAIT_TIMED
 53

	)

129 
	#RWL_INIT
 54

	)

130 
	#RWL_DELETE
 55

	)

131 
	#NAMED_RWL_INIT
 56

	)

132 
	#NAMED_RWL_DELETE
 57

	)

133 
	#RWL_RDLOCK
 58

	)

134 
	#RWL_RDLOCK_IF
 59

	)

135 
	#RWL_RDLOCK_UNTIL
 60

	)

136 
	#RWL_RDLOCK_TIMED
 61

	)

137 
	#RWL_WRLOCK
 62

	)

138 
	#RWL_WRLOCK_IF
 63

	)

139 
	#RWL_WRLOCK_UNTIL
 64

	)

140 
	#RWL_WRLOCK_TIMED
 65

	)

141 
	#RWL_UNLOCK
 66

	)

142 
	#SPL_INIT
 67

	)

143 
	#SPL_DELETE
 68

	)

144 
	#NAMED_SPL_INIT
 69

	)

145 
	#NAMED_SPL_DELETE
 70

	)

146 
	#SPL_LOCK
 71

	)

147 
	#SPL_LOCK_IF
 72

	)

148 
	#SPL_LOCK_TIMED
 73

	)

149 
	#SPL_UNLOCK
 74

	)

152 
	#TYPED_MBX_INIT
 75

	)

153 
	#MBX_DELETE
 76

	)

154 
	#NAMED_MBX_INIT
 77

	)

155 
	#NAMED_MBX_DELETE
 78

	)

156 
	#MBX_SEND
 79

	)

157 
	#MBX_SEND_WP
 80

	)

158 
	#MBX_SEND_IF
 81

	)

159 
	#MBX_SEND_UNTIL
 82

	)

160 
	#MBX_SEND_TIMED
 83

	)

161 
	#MBX_RECEIVE
 84

	)

162 
	#MBX_RECEIVE_WP
 85

	)

163 
	#MBX_RECEIVE_IF
 86

	)

164 
	#MBX_RECEIVE_UNTIL
 87

	)

165 
	#MBX_RECEIVE_TIMED
 88

	)

166 
	#MBX_EVDRP
 89

	)

167 
	#MBX_OVRWR_SEND
 90

	)

170 
	#SENDMSG
 91

	)

171 
	#SEND_IF
 92

	)

172 
	#SEND_UNTIL
 93

	)

173 
	#SEND_TIMED
 94

	)

174 
	#RECEIVEMSG
 95

	)

175 
	#RECEIVE_IF
 96

	)

176 
	#RECEIVE_UNTIL
 97

	)

177 
	#RECEIVE_TIMED
 98

	)

178 
	#RPCMSG
 99

	)

179 
	#RPC_IF
 100

	)

180 
	#RPC_UNTIL
 101

	)

181 
	#RPC_TIMED
 102

	)

182 
	#EVDRP
 103

	)

183 
	#ISRPC
 104

	)

184 
	#RETURNMSG
 105

	)

187 
	#RPCX
 106

	)

188 
	#RPCX_IF
 107

	)

189 
	#RPCX_UNTIL
 108

	)

190 
	#RPCX_TIMED
 109

	)

191 
	#SENDX
 110

	)

192 
	#SENDX_IF
 111

	)

193 
	#SENDX_UNTIL
 112

	)

194 
	#SENDX_TIMED
 113

	)

195 
	#RETURNX
 114

	)

196 
	#RECEIVEX
 115

	)

197 
	#RECEIVEX_IF
 116

	)

198 
	#RECEIVEX_UNTIL
 117

	)

199 
	#RECEIVEX_TIMED
 118

	)

200 
	#EVDRPX
 119

	)

203 
	#PROXY_ATTACH
 120

	)

204 
	#PROXY_DETACH
 121

	)

205 
	#PROXY_TRIGGER
 122

	)

209 
	#RT_SEND
 123

	)

210 
	#RT_RECEIVE
 124

	)

211 
	#RT_CRECEIVE
 125

	)

212 
	#RT_REPLY
 126

	)

213 
	#RT_PROXY_ATTACH
 127

	)

214 
	#RT_PROXY_DETACH
 128

	)

215 
	#RT_TRIGGER
 129

	)

216 
	#RT_NAME_ATTACH
 130

	)

217 
	#RT_NAME_DETACH
 131

	)

218 
	#RT_NAME_LOCATE
 132

	)

221 
	#BITS_INIT
 133

	)

222 
	#BITS_DELETE
 134

	)

223 
	#NAMED_BITS_INIT
 135

	)

224 
	#NAMED_BITS_DELETE
 136

	)

225 
	#BITS_GET
 137

	)

226 
	#BITS_RESET
 138

	)

227 
	#BITS_SIGNAL
 139

	)

228 
	#BITS_WAIT
 140

	)

229 
	#BITS_WAIT_IF
 141

	)

230 
	#BITS_WAIT_UNTIL
 142

	)

231 
	#BITS_WAIT_TIMED
 143

	)

234 
	#TBX_INIT
 144

	)

235 
	#TBX_DELETE
 145

	)

236 
	#NAMED_TBX_INIT
 146

	)

237 
	#NAMED_TBX_DELETE
 147

	)

238 
	#TBX_SEND
 148

	)

239 
	#TBX_SEND_IF
 149

	)

240 
	#TBX_SEND_UNTIL
 150

	)

241 
	#TBX_SEND_TIMED
 151

	)

242 
	#TBX_RECEIVE
 152

	)

243 
	#TBX_RECEIVE_IF
 153

	)

244 
	#TBX_RECEIVE_UNTIL
 154

	)

245 
	#TBX_RECEIVE_TIMED
 155

	)

246 
	#TBX_BROADCAST
 156

	)

247 
	#TBX_BROADCAST_IF
 157

	)

248 
	#TBX_BROADCAST_UNTIL
 158

	)

249 
	#TBX_BROADCAST_TIMED
 159

	)

250 
	#TBX_URGENT
 160

	)

251 
	#TBX_URGENT_IF
 161

	)

252 
	#TBX_URGENT_UNTIL
 162

	)

253 
	#TBX_URGENT_TIMED
 163

	)

256 
	#MQ_OPEN
 164

	)

257 
	#MQ_RECEIVE
 165

	)

258 
	#MQ_SEND
 166

	)

259 
	#MQ_CLOSE
 167

	)

260 
	#MQ_GETATTR
 168

	)

261 
	#MQ_SETATTR
 169

	)

262 
	#MQ_NOTIFY
 170

	)

263 
	#MQ_UNLINK
 171

	)

264 
	#MQ_TIMEDRECEIVE
 172

	)

265 
	#MQ_TIMEDSEND
 173

	)

268 
	#NAMED_TASK_INIT
 174

	)

269 
	#NAMED_TASK_INIT_CPUID
 175

	)

270 
	#NAMED_TASK_DELETE
 176

	)

273 
	#GET_ADR
 177

	)

274 
	#GET_NAME
 178

	)

277 
	#NETRPC
 179

	)

278 
	#SEND_REQ_REL_PORT
 180

	)

279 
	#DDN2NL
 181

	)

280 
	#SET_THIS_NODE
 182

	)

281 
	#FIND_ASGN_STUB
 183

	)

282 
	#REL_STUB
 184

	)

283 
	#WAITING_RETURN
 185

	)

286 
	#COND_SIGNAL
 186

	)

289 
	#SHM_ALLOC
 187

	)

290 
	#SHM_FREE
 188

	)

291 
	#SHM_SIZE
 189

	)

292 
	#HEAP_SET
 190

	)

293 
	#HEAP_ALLOC
 191

	)

294 
	#HEAP_FREE
 192

	)

295 
	#HEAP_NAMED_ALLOC
 193

	)

296 
	#HEAP_NAMED_FREE
 194

	)

297 
	#MALLOC
 195

	)

298 
	#FREE
 196

	)

299 
	#NAMED_MALLOC
 197

	)

300 
	#NAMED_FREE
 198

	)

302 
	#SUSPEND_IF
 199

	)

303 
	#SUSPEND_UNTIL
 200

	)

304 
	#SUSPEND_TIMED
 201

	)

305 
	#IRQ_WAIT
 202

	)

306 
	#IRQ_WAIT_IF
 203

	)

307 
	#IRQ_WAIT_UNTIL
 204

	)

308 
	#IRQ_WAIT_TIMED
 205

	)

309 
	#IRQ_SIGNAL
 206

	)

310 
	#REQUEST_IRQ_TASK
 207

	)

311 
	#RELEASE_IRQ_TASK
 208

	)

312 
	#SCHED_LOCK
 209

	)

313 
	#SCHED_UNLOCK
 210

	)

314 
	#PEND_LINUX_IRQ
 211

	)

315 
	#SET_LINUX_SYSCALL_MODE
 212

	)

317 
	#REQUEST_RTC
 214

	)

318 
	#RELEASE_RTC
 215

	)

319 
	#RT_GETTID
 216

	)

320 
	#SET_NETRPC_TIMEOUT
 217

	)

321 
	#GET_REAL_TIME
 218

	)

322 
	#GET_REAL_TIME_NS
 219

	)

324 
	#MQ_REG_USP_NOTIFIER
 220

	)

326 
	#RT_SIGNAL_HELPER
 221

	)

327 
	#RT_SIGNAL_WAITSIG
 222

	)

328 
	#RT_SIGNAL_REQUEST
 223

	)

329 
	#RT_SIGNAL_RELEASE
 224

	)

330 
	#RT_SIGNAL_ENABLE
 225

	)

331 
	#RT_SIGNAL_DISABLE
 226

	)

332 
	#RT_SIGNAL_TRIGGER
 227

	)

334 
	#SEM_RT_POLL
 228

	)

335 
	#RT_POLL_NETRPC
 229

	)

337 
	#RT_USRQ_DISPATCHER
 230

	)

339 
	#MAX_LXRT_FUN
 231

	)

343 
	#RT_INITTICKQUEUE
 69

	)

344 
	#RT_RELEASETICKQUEUE
 70

	)

345 
	#RT_QDYNALLOC
 71

	)

346 
	#RT_QDYNFREE
 72

	)

347 
	#RT_QDYNINIT
 73

	)

348 
	#RT_QBLKWAIT
 74

	)

349 
	#RT_QBLKREPEAT
 75

	)

350 
	#RT_QBLKSOON
 76

	)

351 
	#RT_QBLKDEQUEUE
 77

	)

352 
	#RT_QBLKCANCEL
 78

	)

353 
	#RT_QSYNC
 79

	)

354 
	#RT_QRECEIVE
 80

	)

355 
	#RT_QLOOP
 81

	)

356 
	#RT_QSTEP
 82

	)

357 
	#RT_QBLKBEFORE
 83

	)

358 
	#RT_QBLKAFTER
 84

	)

359 
	#RT_QBLKUNHOOK
 85

	)

360 
	#RT_QBLKRELEASE
 86

	)

361 
	#RT_QBLKCOMPLETE
 87

	)

362 
	#RT_QHOOKFLUSH
 88

	)

363 
	#RT_QBLKATHEAD
 89

	)

364 
	#RT_QBLKATTAIL
 90

	)

365 
	#RT_QHOOKINIT
 91

	)

366 
	#RT_QHOOKRELEASE
 92

	)

367 
	#RT_QBLKSCHEDULE
 93

	)

368 
	#RT_GETTICKQUEUEHOOK
 94

	)

370 
	#RT_BOOM
 95

	)

371 
	#RTAI_MALLOC
 96

	)

372 
	#RT_FREE
 97

	)

373 
	#RT_MMGR_STATS
 98

	)

374 
	#RT_STOMP
 99

	)

376 
	#RT_VC_ATTACH
 100

	)

377 
	#RT_VC_RELEASE
 101

	)

378 
	#RT_VC_RESERVE
 102

	)

380 
	#RT_GET_LINUX_SIGNAL
 103

	)

381 
	#RT_GET_ERRNO
 104

	)

382 
	#RT_SET_LINUX_SIGNAL_HANDLER
 105

	)

385 
	#LXRT_GET_ADR
 1000

	)

386 
	#LXRT_GET_NAME
 1001

	)

387 
	#LXRT_TASK_INIT
 1002

	)

388 
	#LXRT_TASK_DELETE
 1003

	)

389 
	#LXRT_SEM_INIT
 1004

	)

390 
	#LXRT_SEM_DELETE
 1005

	)

391 
	#LXRT_MBX_INIT
 1006

	)

392 
	#LXRT_MBX_DELETE
 1007

	)

393 
	#MAKE_SOFT_RT
 1008

	)

394 
	#MAKE_HARD_RT
 1009

	)

395 
	#PRINT_TO_SCREEN
 1010

	)

396 
	#NONROOT_HRT
 1011

	)

397 
	#RT_BUDDY
 1012

	)

398 
	#HRT_USE_FPU
 1013

	)

399 
	#USP_SIGHDL
 1014

	)

400 
	#GET_USP_FLAGS
 1015

	)

401 
	#SET_USP_FLAGS
 1016

	)

402 
	#GET_USP_FLG_MSK
 1017

	)

403 
	#SET_USP_FLG_MSK
 1018

	)

404 
	#IS_HARD
 1019

	)

405 
	#LINUX_SERVER
 1020

	)

406 
	#ALLOC_REGISTER
 1021

	)

407 
	#DELETE_DEREGISTER
 1022

	)

408 
	#HARD_SOFT_TOGGLER
 1023

	)

409 
	#PRINTK
 1024

	)

410 
	#GET_EXECTIME
 1025

	)

411 
	#GET_TIMEORIG
 1026

	)

412 
	#LXRT_RWL_INIT
 1027

	)

413 
	#LXRT_RWL_DELETE
 1028

	)

414 
	#LXRT_SPL_INIT
 1029

	)

415 
	#LXRT_SPL_DELETE
 1030

	)

416 
	#KERNEL_CALIBRATOR
 1031

	)

417 
	#GET_CPU_FREQ
 1032

	)

419 
	#FORCE_SOFT
 0x80000000

	)

423 
	#GT_NR_SYSCALLS
 (1 << 11)

	)

424 
	#ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
Ë(((dynxË<< 24Ë| ((§qË<< 12Ë| 
GT_NR_SYSCALLS
 | (lsize))

	)

426 
	#SRQ
(
x
Ë(((xË>> 12Ë& 0xFFF)

	)

427 
	#LXRT_NARG
(
x
Ë((xË& (
GT_NR_SYSCALLS
 - 1))

	)

428 
	#INDX
(
x
Ë(((xË>> 24Ë& 0xF)

	)

430 
	#LINUX_SYSCALL_GET_MODE
 0

	)

431 
	#SYNC_LINUX_SYSCALL
 1

	)

432 
	#ASYNC_LINUX_SYSCALL
 2

	)

433 
	#LINUX_SYSCALL_CANCELED
 3

	)

434 
	#LINUX_SYSCALL_GET_CALLBACK
 ((*)4)

	)

436 
	#NSYSCALL_ARGS
 7

	)

437 
	#NSYSCALL_PACARGS
 6

	)

439 
	slöux_sysˇŒ
 { 
	m¨gs
[
NSYSCALL_ARGS
], 
	mmode
; (*
	mcbfun
)(, ); 
	mid
; 
	m∑ˇrgs
[
NSYSCALL_PACARGS
]; 
	mªtvÆ
; };

440 
	slöux_sysˇŒs_li°
 { 
	mö
, 
	mout
, 
	mƒ
, 
	mid
, 
	mmode
; (*
	mcbfun
)(, ); *
	m£rv
; 
löux_sysˇŒ
 *
	msysˇŒ
; 
RT_TASK
 *
	mèsk
; };

442 #ifde‡
__KERNEL__


444 
	~<asm/πai_lxπ.h
>

479 
	#UW1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 19Ë| (((szË& 0x7Ë<< 22))

	)

480 
	#UW2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 25Ë| (((szË& 0x7Ë<< 28))

	)

483 
	#UR1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 3Ë| (((szË& 0x7Ë<< 6))

	)

484 
	#UR2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 9Ë| (((szË& 0x7Ë<< 12))

	)

486 
	#NEED_TO_RW
(
x
Ë((xË& 0xFFFFFFFE)

	)

488 
	#NEED_TO_W
(
x
Ë((xË& (0x3F << 19))

	)

489 
	#NEED_TO_W2ND
(
x
Ë((xË& (0x3F << 25))

	)

491 
	#NEED_TO_R
(
x
Ë((xË& (0x3F << 3))

	)

492 
	#NEED_TO_R2ND
(
x
Ë((xË& (0x3F << 9))

	)

494 
	#USP_WBF1
(
x
Ë(((xË>> 19Ë& 0x7)

	)

495 
	#USP_WSZ1
(
x
Ë(((xË>> 22Ë& 0x7)

	)

496 
	#USP_WBF2
(
x
Ë(((xË>> 25Ë& 0x7)

	)

497 
	#USP_WSZ2
(
x
Ë(((xË>> 28Ë& 0x7)

	)

499 
	#USP_RBF1
(
x
Ë(((xË>> 3Ë& 0x7)

	)

500 
	#USP_RSZ1
(
x
Ë(((xË>> 6Ë& 0x7)

	)

501 
	#USP_RBF2
(
x
Ë(((xË>> 9Ë& 0x7)

	)

502 
	#USP_RSZ2
(
x
Ë(((xË>> 12Ë& 0x7)

	)

504 
	sπ_fun_íåy
 {

505 
	mty≥
;

506 *
	mfun
;

509 
	sπ_«tive_fun_íåy
 {

510 
π_fun_íåy
 
	mfun
;

511 
	mödex
;

514 
π_fun_íåy
 
π_fun_lxπ
[];

516 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

518 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

520 #ifde‡
__˝lu•lus


526 
	~<löux/ty≥s.h
>

527 
RT_TASK
 *
π_föd_èsk_by_pid
(
pid_t
);

529 
ölöe
 
π_èsk_°ru˘
 *
pid2πèsk
(
pid_t
 
pid
)

531  
π_föd_èsk_by_pid
(
pid
);

534 
ölöe
 
πèsk2pid
(
π_èsk_°ru˘
 *
èsk
)

536  
èsk
->
tid
;

541 
£t_πai_ˇŒback
((*
fun
)());

543 
ªmove_πai_ˇŒback
((*
fun
)());

545 
RT_TASK
 *
π_lxπ_whﬂmi
();

547 
exec_func
((*
func
)(*
d©a
, 
evn
),

548 *
d©a
,

549 
evn
);

551 
£t_π_fun_ext_ödex
(
π_fun_íåy
 *
fun
,

552 
idx
);

554 
ª£t_π_fun_ext_ödex
(
π_fun_íåy
 *
fun
,

555 
idx
);

557 #ifde‡
__˝lu•lus


563 
	~<sys/ty≥s.h
>

564 
	~<sys/mm™.h
>

565 
	~<sched.h
>

566 
	~<°d¨g.h
>

567 
	~<°dio.h
>

568 
	~<°dlib.h
>

569 
	~<°rög.h
>

570 
	~<asm/πai_lxπ.h
>

572 
≠ic_timî_£tup_d©a
;

574 #ifde‡
CONFIG_MMU


576 
	#π_grow_™d_lock_°ack
(
ö¸
) \

578 
buf
[
ö¸
]; \

579 
	`mem£t
(
buf
, 0, 
ö¸
); \

580 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
); \

581 } 0)

	)

585 
	#π_grow_™d_lock_°ack
(
ö¸
Ëdÿ{ } 0)

	)

589 
	#BIDX
 0

590 
	#SIZARG
 (
¨g
)

	)

592 #ifde‡
__˝lu•lus


603 
RTAI_PROTO
(*, 
π_gë_adr
, (
«me
))

605 °ru˘ { 
«me
; } 
¨g
 = {Çame };

606  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_GET_ADR
, &
¨g
).
v
[
LOW
];

617 
RTAI_PROTO
(, 
π_gë_«me
, (*
adr
))

619 °ru˘ { *
adr
; } 
¨g
 = {ádr };

620  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_GET_NAME
, &
¨g
).
i
[
LOW
];

623 
	~<sig«l.h
>

625 #ifde‡
CONFIG_RTAI_HARD_SOFT_TOGGLER


626 #i‚de‡
__SUPPORT_HARD_SOFT_TOGGLER__


627 
	#__SUPPORT_HARD_SOFT_TOGGLER__


	)

629 
h¨d_so·_toggÀr
(
sig
)

631 i‡(
sig
 =
SIGUSR1
) {

632 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
NULL
 };

633 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_SOFT_TOGGLER
, &
¨g
);

639 
	#SET_SIGNAL_TOGGLER
(Ëdÿ{ 
	`sig«l
(
SIGUSR1
, 
h¨d_so·_toggÀr
); } 0)

	)

643 
	#SET_SIGNAL_TOGGLER
(Ëdÿ{ } 0)

	)

647 
RTAI_PROTO
(
RT_TASK
 *, 
π_èsk_öô_schmod
, (
«me
, 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
))

649 
sched_∑øm
 
mysched
;

650 °ru˘ { 
«me
; 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
; } 
¨g
 = {Çamê?Çamê: 
π_gë_«me
(
NULL
),Öriority, stack_size, max_msg_size, cpus_allowed };

652 
SET_SIGNAL_TOGGLER
();

653 i‡(
pﬁicy
 =
SCHED_OTHER
) {

654 
mysched
.
sched_¥i‹ôy
 = 0;

655 } i‡((
mysched
.
sched_¥i‹ôy
 = 
sched_gë_¥i‹ôy_max
(
pﬁicy
Ë- 
¥i‹ôy
) < 1) {

656 
mysched
.
sched_¥i‹ôy
 = 1;

658 i‡(
sched_£tscheduÀr
(0, 
pﬁicy
, &
mysched
) < 0) {

661 
πai_i›l
();

662 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

664  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_INIT
, &
¨g
).
v
[
LOW
];

667 
	#RT_THREAD_STACK_MIN
 16*1024

	)

669 
	~<±hªad.h
>

671 
RTAI_PROTO
(, 
π_thªad_¸óã
, (*
fun
, *
¨gs
, 
°ack_size
))

673 
thªad
;

674 
±hªad_©å_t
 
©å
;

676 
±hªad_©å_öô
(&
©å
);

677 i‡(!
±hªad_©å_£t°acksize
(&
©å
, 
°ack_size
 > 
RT_THREAD_STACK_MIN
 ? stack_size : RT_THREAD_STACK_MIN)) {

678 °ru˘ { 
hs
; } 
¨g
 = { 0 };

679 i‡((
¨g
.
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &¨g).
i
[
LOW
])) {

680 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

682 i‡(
±hªad_¸óã
((
±hªad_t
 *)&
thªad
, &
©å
, (*(*)(*))
fun
, 
¨gs
)) {

683 
thªad
 = 0;

685 i‡(
¨g
.
hs
) {

686 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

689 
thªad
 = 0;

691  
thªad
;

694 
RTAI_PROTO
(, 
π_thªad_joö
, (
thªad
))

696  
±hªad_joö
((
±hªad_t
)
thªad
, 
NULL
);

699 #i‚de‡
__SUPPORT_LINUX_SERVER__


700 
	#__SUPPORT_LINUX_SERVER__


	)

702 
	~<uni°d.h
>

703 
	~<sys/mm™.h
>

705 
löux_sysˇŒ_£rvî_fun
(
löux_sysˇŒs_li°
 *
li°
)

707 
löux_sysˇŒs_li°
 
sysˇŒs
;

709 
sysˇŒs
 = *
li°
;

710 
sysˇŒs
.
£rv
 = &syscalls;

711 i‡((
sysˇŒs
.
£rv
 = 
πai_lxπ
(
BIDX
, (
löux_sysˇŒs_li°
), 
LINUX_SERVER
, &sysˇŒs).
v
[
LOW
])) {

712 *
¨gs
;

713 
löux_sysˇŒ
 *
todo
;

714 
löux_sysˇŒ
 
ˇŒd©a
[
sysˇŒs
.
ƒ
];

715 
sysˇŒs
.
sysˇŒ
 = 
ˇŒd©a
;

716 
mem£t
(
ˇŒd©a
, 0, (calldata));

717 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

718 
li°
->
£rv
 = &
sysˇŒs
;

719 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
RESUME
, &
sysˇŒs
.
èsk
);

720 
abs
(
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
SUSPEND
, &
sysˇŒs
.
£rv
).
i
[
LOW
]Ë< 
RTE_LOWERR
) {

721 i‡(
sysˇŒs
.
sysˇŒ
[sysˇŒs.
out
].
mode
 !
LINUX_SYSCALL_CANCELED
) {

722 
todo
 = &
sysˇŒs
.
sysˇŒ
[sysˇŒs.
out
];

723 
¨gs
 = 
todo
->args;

724 
todo
->
ªtvÆ
 = 
sysˇŒ
(
¨gs
[0],árgs[1],árgs[2],árgs[3],árgs[4],árgs[5],árgs[6]);

725 
todo
->
id
 = -todo->id;

726 i‡(
todo
->
mode
 =
SYNC_LINUX_SYSCALL
) {

727 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
RESUME
, &
sysˇŒs
.
èsk
);

728 } i‡(
sysˇŒs
.
cbfun
) {

729 
todo
->
cbfun
(
¨gs
[0],Åodo->
ªtvÆ
);

732 i‡(++
sysˇŒs
.
out
 >sysˇŒs.
ƒ
) {

733 
sysˇŒs
.
out
 = 0;

737 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
LXRT_TASK_DELETE
, &
sysˇŒs
.
£rv
);

742 
RTAI_PROTO
(, 
π_£t_löux_sysˇŒ_mode
, (
mode
, (*
cbfun
)(, )))

744 °ru˘ { 
mode
; (*
cbfun
)(, ); } 
¨g
 = { mode, cbfun };

745  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_LINUX_SYSCALL_MODE
, &
¨g
).
i
[
LOW
];

748 
RTAI_PROTO
(, 
π_löux_sysˇŒ_mode
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
mode
))

750 
ªtvÆ
;

751 i‡(
sysˇŒs
 =
NULL
) {

752  
EINVAL
;

754 
ªtvÆ
 = 
sysˇŒs
->
mode
;

755 i‡(
mode
 =
SYNC_LINUX_SYSCALL
 || modê=
ASYNC_LINUX_SYSCALL
) {

756 
sysˇŒs
->
mode
 = mode;

758  
ªtvÆ
;

761 
RTAI_PROTO
(*, 
π_löux_sysˇŒ_cbfun
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, (*
cbfun
)(, )))

763 *
ªtvÆ
;

764 i‡(
sysˇŒs
 =
NULL
) {

765  (*)
EINVAL
;

767 
ªtvÆ
 = (*)(()
sysˇŒs
->
cbfun
);

768 i‡(()
cbfun
 > ()
LINUX_SYSCALL_GET_CALLBACK
) {

769 
sysˇŒs
->
cbfun
 = cbfun;

771  
ªtvÆ
;

774 
RTAI_PROTO
(, 
π_löux_sysˇŒ_°©us
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
id
, *
ªtvÆ
))

776 
¶Ÿ
, 
¶Ÿid
;

777 i‡(
sysˇŒs
 =
NULL
 || 
id
 < 0) {

778  
EINVAL
;

780 i‡(
id
 !
abs
(
¶Ÿid
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
 = id%sysˇŒs->
ƒ
].id)) {

781  
ENOENT
;

783 i‡(
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].
mode
 =
LINUX_SYSCALL_CANCELED
) {

784  
ECANCELED
;

786 i‡(
¶Ÿid
 > 0) {

787  
EINPROGRESS
;

789 i‡(
ªtvÆ
) {

790 *
ªtvÆ
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].retval;

795 
RTAI_PROTO
(, 
π_löux_sysˇŒ_ˇn˚l
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
id
))

797 
¶Ÿ
, 
¶Ÿid
;

798 i‡(
sysˇŒs
 =
NULL
 || 
id
 < 0) {

799  
EINVAL
;

801 i‡(
id
 !
abs
(
¶Ÿid
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
 = id%sysˇŒs->
ƒ
].id)) {

802  
ENOENT
;

804 i‡(
¶Ÿid
 < 0) {

805  
¶Ÿid
;

807 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].
mode
 = 
LINUX_SYSCALL_CANCELED
;

811 
RTAI_PROTO
(*, 
π_¸óã_löux_sysˇŒ_£rvî
, (
RT_TASK
 *
èsk
, 
mode
, (*
cbfun
)(, ), 
ƒ_bufd_async_ˇŒs
))

813 i‡((
èsk
 || (èsk = (
RT_TASK
 *)
πai_lxπ
(
BIDX
, (RT_TASK *), 
RT_BUDDY
, &èsk).
v
[
LOW
])Ë&& 
ƒ_bufd_async_ˇŒs
 > 0) {

814 
löux_sysˇŒs_li°
 
sysˇŒs
;

815 
mem£t
(&
sysˇŒs
, 0, (syscalls));

816 
sysˇŒs
.
èsk
 =Åask;

817 
sysˇŒs
.
cbfun
 = cbfun;

818 
sysˇŒs
.
ƒ
 = 
ƒ_bufd_async_ˇŒs
 + 1;

819 
sysˇŒs
.
mode
 = mode;

820 
sysˇŒs
.
£rv
 = 
NULL
;

821 i‡(
π_thªad_¸óã
((*)
löux_sysˇŒ_£rvî_fun
, &
sysˇŒs
, 
RT_THREAD_STACK_MIN
 + sysˇŒs.
ƒ
*(
löux_sysˇŒ
))) {

822 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
SUSPEND
, &
èsk
);

823  
sysˇŒs
.
£rv
;

826  
NULL
;

829 
	#π_sync_async_löux_sysˇŒ_£rvî_¸óã
(
èsk
, 
mode
, 
cbfun
, 
ƒ_ˇŒs
Ë
	`π_¸óã_löux_sysˇŒ_£rvî
—ask, mode, cbfun,Çr_ˇŒs)

	)

831 
	#π_löux_sysˇŒ_£rvî_¸óã
(
èsk
Ë
	`π_sync_async_löux_sysˇŒ_£rvî_¸óã
—ask, 
SYNC_LINUX_SYSCALL
, 
NULL
, 1);

	)

833 
RTAI_PROTO
(, 
π_de°roy_löux_sysˇŒ_£rvî
, (
RT_TASK
 *
èsk
))

835 
löux_sysˇŒs_li°
 
s
;

836 
s
.
ƒ
 = 0;

837 
s
.
èsk
 =Åask;

838 
πai_lxπ
(
BIDX
, (
löux_sysˇŒs_li°
), 
LINUX_SERVER
, &
s
);

841 
RTAI_PROTO
(
RT_TASK
 *, 
π_thªad_öô
, (
«me
, 
¥i‹ôy
, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
))

843  
π_èsk_öô_schmod
(
«me
, 
¥i‹ôy
, 0, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
);

890 
RTAI_PROTO
(
RT_TASK
 *,
π_èsk_öô
,(
«me
, 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
))

892  
π_èsk_öô_schmod
(
«me
, 
¥i‹ôy
, 0, 
max_msg_size
, 
SCHED_FIFO
, 0xFF);

895 
RTAI_PROTO
(,
π_£t_sched_pﬁicy
,(
RT_TASK
 *
èsk
, 
pﬁicy
, 
º_qu™tum_ns
))

897 °ru˘ { 
RT_TASK
 *
èsk
; 
pﬁicy
; 
º_qu™tum_ns
; } 
¨g
 = {Åask,Öolicy,Ñr_quantum_ns };

898 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_SCHED_POLICY
, &
¨g
);

901 
RTAI_PROTO
(,
π_ch™ge_¥io
,(
RT_TASK
 *
èsk
, 
¥i‹ôy
))

903 °ru˘ { 
RT_TASK
 *
èsk
; 
¥i‹ôy
; } 
¨g
 = {Åask,Öriority };

904  
πai_lxπ
(
BIDX
, 
SIZARG
, 
CHANGE_TASK_PRIO
, &
¨g
).
i
[
LOW
];

919 
RTAI_PROTO
(, 
π_make_so·_ªÆ_time
, ())

921 °ru˘ { 
dummy
; } 
¨g
;

922 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

925 
RTAI_PROTO
(, 
π_thªad_dñëe
,(
RT_TASK
 *
èsk
))

927 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

928 
π_make_so·_ªÆ_time
();

929  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_DELETE
, &
¨g
).
i
[
LOW
];

932 
	#π_èsk_dñëe
(
èsk
Ë
	`π_thªad_dñëe
—ask)

	)

934 
RTAI_PROTO
(,
π_èsk_yõld
,())

936 °ru˘ { 
dummy
; } 
¨g
;

937  
πai_lxπ
(
BIDX
, 
SIZARG
, 
YIELD
, &
¨g
).
i
[
LOW
];

940 
RTAI_PROTO
(,
π_èsk_su•íd
,(
RT_TASK
 *
èsk
))

942 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

943  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND
, &
¨g
).
i
[
LOW
];

946 
RTAI_PROTO
(,
π_èsk_su•íd_if
,(
RT_TASK
 *
èsk
))

948 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

949  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_IF
, &
¨g
).
i
[
LOW
];

952 
RTAI_PROTO
(,
π_èsk_su•íd_u¡û
,(
RT_TASK
 *
èsk
, 
RTIME
 
time
))

954 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
time
; } 
¨g
 = {Åask,Åime };

955  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_UNTIL
, &
¨g
).
i
[
LOW
];

958 
RTAI_PROTO
(,
π_èsk_su•íd_timed
,(
RT_TASK
 *
èsk
, 
RTIME
 
dñay
))

960 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, delay };

961  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_TIMED
, &
¨g
).
i
[
LOW
];

964 
RTAI_PROTO
(,
π_èsk_ªsume
,(
RT_TASK
 *
èsk
))

966 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

967  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RESUME
, &
¨g
).
i
[
LOW
];

970 
RTAI_PROTO
(, 
π_sched_lock
, ())

972 °ru˘ { 
dummy
; } 
¨g
;

973 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SCHED_LOCK
, &
¨g
);

976 
RTAI_PROTO
(, 
π_sched_u∆ock
, ())

978 °ru˘ { 
dummy
; } 
¨g
;

979 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SCHED_UNLOCK
, &
¨g
);

982 
RTAI_PROTO
(, 
π_≥nd_löux_úq
, (
úq
))

984 °ru˘ { 
úq
; } 
¨g
 = { irq };

985 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PEND_LINUX_IRQ
, &
¨g
);

988 
RTAI_PROTO
(, 
π_úq_waô
, (
úq
))

990 °ru˘ { 
úq
; } 
¨g
 = { irq };

991  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT
, &
¨g
).
i
[
LOW
];

994 
RTAI_PROTO
(, 
π_úq_waô_if
, (
úq
))

996 °ru˘ { 
úq
; } 
¨g
 = { irq };

997  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_IF
, &
¨g
).
i
[
LOW
];

1000 
RTAI_PROTO
(, 
π_úq_waô_u¡û
, (
úq
, 
RTIME
 
time
))

1002 °ru˘ { 
úq
; 
RTIME
 
time
; } 
¨g
 = { irq,Åime };

1003  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

1006 
RTAI_PROTO
(, 
π_úq_waô_timed
, (
úq
, 
RTIME
 
dñay
))

1008 °ru˘ { 
úq
; 
RTIME
 
dñay
; } 
¨g
 = { irq, delay };

1009  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

1012 
RTAI_PROTO
(, 
π_úq_sig«l
, (
úq
))

1014 °ru˘ { 
úq
; } 
¨g
 = { irq };

1015  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_SIGNAL
, &
¨g
).
i
[
LOW
];

1018 
RTAI_PROTO
(, 
π_ªque°_úq_èsk
, (
úq
, *
h™dÀr
, 
ty≥
, 
afföe2èsk
))

1020 °ru˘ { 
úq
; *
h™dÀr
; 
ty≥
, 
afföe2èsk
; } 
¨g
 = { irq, handler,Åype,áffine2task };

1021  
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_IRQ_TASK
, &
¨g
).
i
[
LOW
];

1025 
RTAI_PROTO
(, 
π_ªÀa£_úq_èsk
, (
úq
))

1027 °ru˘ { 
úq
; } 
¨g
 = { irq };

1028  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_IRQ_TASK
, &
¨g
).
i
[
LOW
];

1031 
RTAI_PROTO
(, 
π_èsk_make_≥riodic
,(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_time
, RTIME 
≥riod
))

1033 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = {Åask, start_time,Öeriod };

1034  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC
, &
¨g
).
i
[
LOW
];

1037 
RTAI_PROTO
(,
π_èsk_make_≥riodic_ªœtive_ns
,(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_dñay
, RTIME 
≥riod
))

1039 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = {Åask, 
°¨t_dñay
,Öeriod };

1040  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC_NS
, &
¨g
).
i
[
LOW
];

1043 
RTAI_PROTO
(,
π_èsk_waô_≥riod
,())

1045 °ru˘ { 
dummy
; } 
¨g
;

1046  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAIT_PERIOD
, &
¨g
).
i
[
LOW
];

1049 
RTAI_PROTO
(,
π_¶ìp
,(
RTIME
 
dñay
))

1051 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

1052  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SLEEP
, &
¨g
).
i
[
LOW
];

1055 
RTAI_PROTO
(,
π_¶ìp_u¡û
,(
RTIME
 
time
))

1057 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

1058  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SLEEP_UNTIL
, &
¨g
).
i
[
LOW
];

1061 
RTAI_PROTO
(,
π_is_h¨d_timî_ru¬ög
,())

1063 °ru˘ { 
dummy
; } 
¨g
;

1064  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_RUNNING
, &
¨g
).
i
[
LOW
];

1067 
RTAI_PROTO
(
RTIME
, 
°¨t_π_timî
, (
≥riod
))

1069 
hs
;

1070 
RTIME
 
ªtvÆ
;

1071 °ru˘ { 
≥riod
; } 
¨g
 = { 0 };

1072 i‡((
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &
¨g
).
i
[
LOW
])) {

1073 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

1075 
¨g
.
≥riod
 =Öeriod;

1076 
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
START_TIMER
, &
¨g
).
π
;

1077 i‡(
hs
) {

1078 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1080  
ªtvÆ
;

1083 
RTAI_PROTO
(, 
°›_π_timî
, ())

1085 °ru˘ { 
hs
; } 
¨g
 = { 0 };

1086 i‡((
¨g
.
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &¨g).
i
[
LOW
])) {

1087 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

1089 
πai_lxπ
(
BIDX
, 
SIZARG
, 
STOP_TIMER
, &
¨g
);

1090 i‡(
¨g
.
hs
) {

1091 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1095 
RTAI_PROTO
(, 
π_ªque°_πc
, (
πc_‰eq
, *
h™dÀr
))

1097 °ru˘ { 
πc_‰eq
; *
h™dÀr
; } 
¨g
 = {Ñtc_freq, handler };

1098 
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_RTC
, &
¨g
);

1101 
RTAI_PROTO
(, 
π_ªÀa£_πc
, ())

1103 °ru˘ { 
dummy
; } 
¨g
;

1104 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_RTC
, &
¨g
);

1107 
RTAI_PROTO
(
RTIME
, 
π_gë_time
, ())

1109 °ru˘ { 
dummy
; } 
¨g
;

1110  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME
, &
¨g
).
π
;

1113 
RTAI_PROTO
(
RTIME
, 
π_gë_ªÆ_time
, ())

1115 °ru˘ { 
dummy
; } 
¨g
;

1116  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_REAL_TIME
, &
¨g
).
π
;

1119 
RTAI_PROTO
(
RTIME
, 
π_gë_ªÆ_time_ns
, ())

1121 °ru˘ { 
dummy
; } 
¨g
;

1122  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_REAL_TIME_NS
, &
¨g
).
π
;

1125 
RTAI_PROTO
(
RTIME
, 
cou¡2«no
, (RTIME 
cou¡
))

1127 °ru˘ { 
RTIME
 
cou¡
; } 
¨g
 = { count };

1128  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COUNT2NANO
, &
¨g
).
π
;

1131 
RTAI_PROTO
(
RTIME
, 
«no2cou¡
, (RTIME 
«nos
))

1133 °ru˘ { 
RTIME
 
«nos
; } 
¨g
 = {Çanos };

1134  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NANO2COUNT
, &
¨g
).
π
;

1137 
RTAI_PROTO
(, 
π_busy_¶ìp
, (
ns
))

1139 °ru˘ { 
ns
; } 
¨g
 = {Çs };

1140 
πai_lxπ
(
BIDX
, 
SIZARG
, 
BUSY_SLEEP
, &
¨g
);

1143 
RTAI_PROTO
(, 
π_£t_≥riodic_mode
, ())

1145 °ru˘ { 
dummy
; } 
¨g
;

1146 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_PERIODIC_MODE
, &
¨g
);

1149 
RTAI_PROTO
(, 
π_£t_⁄eshŸ_mode
, ())

1151 °ru˘ { 
dummy
; } 
¨g
;

1152 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_ONESHOT_MODE
, &
¨g
);

1155 
RTAI_PROTO
(, 
π_èsk_sig«l_h™dÀr
, (
RT_TASK
 *
èsk
, (*
h™dÀr
)()))

1157 °ru˘ { 
RT_TASK
 *
èsk
; (*
h™dÀr
)(); } 
¨g
 = {Åask, handler };

1158  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SIGNAL_HANDLER
, &
¨g
).
i
[
LOW
];

1161 
RTAI_PROTO
(,
π_èsk_u£_Âu
,(
RT_TASK
 *
èsk
, 
u£_Âu_Êag
))

1163 °ru˘ { 
RT_TASK
 *
èsk
; 
u£_Âu_Êag
; } 
¨g
 = {Åask, use_fpu_flag };

1164 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BUDDY
, &
¨g
).
v
[
LOW
] !
èsk
) {

1165  
πai_lxπ
(
BIDX
, 
SIZARG
, 
TASK_USE_FPU
, &
¨g
).
i
[
LOW
];

1170 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HRT_USE_FPU
, &
¨g
);

1175 
RTAI_PROTO
(,
π_buddy_èsk_u£_Âu
,(
RT_TASK
 *
èsk
, 
u£_Âu_Êag
))

1177 °ru˘ { 
RT_TASK
 *
èsk
; 
u£_Âu_Êag
; } 
¨g
 = {Åask, use_fpu_flag };

1178  
πai_lxπ
(
BIDX
, 
SIZARG
, 
TASK_USE_FPU
, &
¨g
).
i
[
LOW
];

1189 
RTAI_PROTO
(, 
π_èsk_gë_öfo
, (
RT_TASK
 *
èsk
, 
RT_TASK_INFO
 *
èsk_öfo
))

1191 
RT_TASK_INFO
 
…ask_öfo
;

1192 °ru˘ { 
RT_TASK
 *
èsk
; 
RT_TASK_INFO
 *
èsköfo
; } 
¨g
 = {Åask, &
…ask_öfo
 };

1193 i‡(
èsk_öfo
 && !
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TASK_INFO
, &
¨g
).
i
[
LOW
]) {

1194 *
èsk_öfo
 = 
…ask_öfo
;

1197  -
EINVAL
;

1200 
RTAI_PROTO
(, 
π_gë_¥i‹ôõs
, (
RT_TASK
 *
èsk
, *
¥i‹ôy
, *
ba£_¥i‹ôy
))

1202 
RT_TASK_INFO
 
èsk_öfo
;

1203 i‡(
¥i‹ôy
 && 
ba£_¥i‹ôy
 && !
π_èsk_gë_öfo
(
èsk
, &
èsk_öfo
)) {

1204 *
¥i‹ôy
 = 
èsk_öfo
.priority;

1205 *
ba£_¥i‹ôy
 = 
èsk_öfo
.base_priority;

1208  -
EINVAL
;

1211 
RTAI_PROTO
(, 
π_h¨d_timî_tick
, ())

1213 °ru˘ { 
dummy
; } 
¨g
;

1214  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_COUNT
, &
¨g
).
i
[
LOW
];

1217 
RTAI_PROTO
(
RTIME
,
π_gë_time_ns
,())

1219 °ru˘ { 
dummy
; } 
¨g
;

1220  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_NS
, &
¨g
).
π
;

1223 
RTAI_PROTO
(
RTIME
,
π_gë_˝u_time_ns
,())

1225 °ru˘ { 
dummy
; } 
¨g
;

1226  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_CPU_TIME_NS
, &
¨g
).
π
;

1229 
	#π_«med_èsk_öô
(
èsk_«me
, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
) \

1230 
	`π_èsk_öô
(
	`«m2num
(
èsk_«me
), 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
)

	)

1232 
	#π_«med_èsk_öô_˝uid
(
èsk_«me
, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
, 
run_⁄_˝u
) \

1233 
	`π_èsk_öô_˝uid
(
	`«m2num
(
èsk_«me
), 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
, 
run_⁄_˝u
)

	)

1235 
RTAI_PROTO
(,
π_£t_ru¬abÀ_⁄_˝us
,(
RT_TASK
 *
èsk
, 
˝u_mask
))

1237 °ru˘ { 
RT_TASK
 *
èsk
; 
˝u_mask
; } 
¨g
 = {Åask, cpu_mask };

1238 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RUNNABLE_ON_CPUS
, &
¨g
);

1241 
RTAI_PROTO
(,
π_£t_ru¬abÀ_⁄_˝uid
,(
RT_TASK
 *
èsk
, 
˝uid
))

1243 °ru˘ { 
RT_TASK
 *
èsk
; 
˝uid
; } 
¨g
 = {Åask, cpuid };

1244 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RUNNABLE_ON_CPUID
, &
¨g
);

1247 
RTAI_PROTO
(,
π_gë_timî_˝u
,())

1249 °ru˘ { 
dummy
; } 
¨g
;

1250  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIMER_CPU
, &
¨g
).
i
[
LOW
];

1253 
RTAI_PROTO
(,
°¨t_π_≠ic_timîs
,(
≠ic_timî_£tup_d©a
 *
£tup_mode
, 
rcvr_jiffõs_˝uid
))

1255 °ru˘ { 
≠ic_timî_£tup_d©a
 *
£tup_mode
; 
rcvr_jiffõs_˝uid
; } 
¨g
 = { setup_mode,Ñcvr_jiffies_cpuid };

1256 
πai_lxπ
(
BIDX
, 
SIZARG
, 
START_RT_APIC_TIMERS
, &
¨g
);

1259 
RTAI_PROTO
(, 
π_h¨d_timî_tick_˝uid
, (
˝uid
))

1261 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1262  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_COUNT_CPUID
, &
¨g
).
i
[
LOW
];

1265 
RTAI_PROTO
(
RTIME
,
cou¡2«no_˝uid
,(RTIME 
cou¡
, 
˝uid
))

1267 °ru˘ { 
RTIME
 
cou¡
; 
˝uid
; } 
¨g
 = { count, cpuid };

1268  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COUNT2NANO_CPUID
, &
¨g
).
π
;

1271 
RTAI_PROTO
(
RTIME
,
«no2cou¡_˝uid
,(RTIME 
«nos
, 
˝uid
))

1273 °ru˘ { 
RTIME
 
«nos
; 
˝uid
; } 
¨g
 = {Çanos, cpuid };

1274  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NANO2COUNT_CPUID
, &
¨g
).
π
;

1277 
RTAI_PROTO
(
RTIME
,
π_gë_time_˝uid
,(
˝uid
))

1279 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1280  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_CPUID
, &
¨g
).
π
;

1283 
RTAI_PROTO
(
RTIME
,
π_gë_time_ns_˝uid
,(
˝uid
))

1285 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1286  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_NS_CPUID
, &
¨g
).
π
;

1289 
RTAI_PROTO
(,
π_boom
,())

1291 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1292 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BOOM
, &
¨g
);

1295 
RTAI_PROTO
(,
π_mmgr_°©s
,())

1297 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1298 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_MMGR_STATS
, &
¨g
);

1301 
RTAI_PROTO
(,
π_°omp
,() )

1303 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1304 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_STOMP
, &
¨g
);

1307 
RTAI_PROTO
(,
π_gë_löux_sig«l
,(
RT_TASK
 *
èsk
))

1309 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1310  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GET_LINUX_SIGNAL
, &
¨g
).
i
[
LOW
];

1313 
RTAI_PROTO
(,
π_gë_î∫o
,(
RT_TASK
 *
èsk
))

1315 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1316  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GET_ERRNO
, &
¨g
).
i
[
LOW
];

1319 
RTAI_PROTO
(,
π_£t_löux_sig«l_h™dÀr
,(
RT_TASK
 *
èsk
, (*
h™dÀr
)(
sig
)))

1321 °ru˘ { 
RT_TASK
 *
èsk
; (*
h™dÀr
)(
sig
); } 
¨g
 = {Åask, handler };

1322  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_SET_LINUX_SIGNAL_HANDLER
, &
¨g
).
i
[
LOW
];

1325 
	#VSNPRINTF_BUF_SIZE
 256

	)

1326 
RTAI_PROTO
(,
π_¥ötk
,(c⁄° *
f‹m©
, ...))

1328 
di•œy
[
VSNPRINTF_BUF_SIZE
];

1329 °ru˘ { c⁄° *
di•œy
; 
nch
; } 
¨g
 = { display, 0 };

1330 
va_li°
 
¨gs
;

1332 
va_°¨t
(
¨gs
, 
f‹m©
);

1333 
¨g
.
nch
 = 
v¢¥ötf
(
di•œy
, 
VSNPRINTF_BUF_SIZE
, 
f‹m©
, 
¨gs
);

1334 
va_íd
(
¨gs
);

1335 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PRINTK
, &
¨g
);

1336  
¨g
.
nch
;

1339 
RTAI_PROTO
(,
πai_¥öt_to_s¸ìn
,(c⁄° *
f‹m©
, ...))

1341 
di•œy
[
VSNPRINTF_BUF_SIZE
];

1342 °ru˘ { c⁄° *
di•œy
; 
nch
; } 
¨g
 = { display, 0 };

1343 
va_li°
 
¨gs
;

1345 
va_°¨t
(
¨gs
, 
f‹m©
);

1346 
¨g
.
nch
 = 
v¢¥ötf
(
di•œy
, 
VSNPRINTF_BUF_SIZE
, 
f‹m©
, 
¨gs
);

1347 
va_íd
(
¨gs
);

1348 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PRINTK
, &
¨g
);

1349  
¨g
.
nch
;

1352 
RTAI_PROTO
(,
π_u•_sig«l_h™dÀr
,((*
h™dÀr
)()))

1354 °ru˘ { (*
h™dÀr
)(); } 
¨g
 = { handler };

1355  
πai_lxπ
(
BIDX
, 
SIZARG
, 
USP_SIGHDL
, &
¨g
).
i
[0];

1358 
RTAI_PROTO
(,
π_gë_u•_Êags
,(
RT_TASK
 *
π_èsk
))

1360 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1361  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_USP_FLAGS
, &
¨g
).
i
[
LOW
];

1364 
RTAI_PROTO
(,
π_gë_u•_Êags_mask
,(
RT_TASK
 *
π_èsk
))

1366 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1367  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_USP_FLG_MSK
, &
¨g
).
i
[
LOW
];

1370 
RTAI_PROTO
(,
π_£t_u•_Êags
,(
RT_TASK
 *
π_èsk
, 
Êags
))

1372 °ru˘ { 
RT_TASK
 *
èsk
; 
Êags
; } 
¨g
 = { 
π_èsk
, flags };

1373 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_USP_FLAGS
, &
¨g
);

1376 
RTAI_PROTO
(,
π_£t_u•_Êags_mask
,(
Êags_mask
))

1378 °ru˘ { 
Êags_mask
; } 
¨g
 = { flags_mask };

1379 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_USP_FLG_MSK
, &
¨g
);

1382 
RTAI_PROTO
(
pid_t
, 
π_gë_löux_tid
, (
RT_TASK
 *
èsk
))

1384 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1385  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_SOFT_TOGGLER
, &
¨g
).
i
[
LOW
];

1388 
RTAI_PROTO
(
RT_TASK
 *,
π_agít
,())

1390 °ru˘ { 
dummy
; } 
¨g
;

1391  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BUDDY
, &
¨g
).
v
[
LOW
];

1394 
	#π_buddy
(Ë
	`π_agít
()

	)

1396 
RTAI_PROTO
(, 
π_gëtid
, ())

1398 °ru˘ { 
dummy
; } 
¨g
;

1399  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

1424 
RTAI_PROTO
(,
π_make_h¨d_ªÆ_time
,())

1426 °ru˘ { 
dummy
; } 
¨g
;

1427 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1438 
RTAI_PROTO
(,
π_Ælow_n⁄roŸ_hπ
,())

1440 °ru˘ { 
dummy
; } 
¨g
;

1441 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NONROOT_HRT
, &
¨g
);

1444 
RTAI_PROTO
(,
π_is_h¨d_ªÆ_time
,(
RT_TASK
 *
π_èsk
))

1446 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1447  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &
¨g
).
i
[
LOW
];

1450 
	#π_is_so·_ªÆ_time
(
π_èsk
Ë(!
	`π_is_h¨d_ªÆ_time
(‘t_èsk)))

	)

1452 
RTAI_PROTO
(,
π_èsk_£t_ªsume_íd_times
,(
RTIME
 
ªsume
, RTIME 
íd
))

1454 °ru˘ { 
RTIME
 
ªsume
, 
íd
; } 
¨g
 = {Ñesume,Énd };

1455 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RESUME_END
, &
¨g
);

1458 
RTAI_PROTO
(,
π_£t_ªsume_time
,(
RT_TASK
 *
π_èsk
, 
RTIME
 
√w_ªsume_time
))

1460 °ru˘ { 
RT_TASK
 *
π_èsk
; 
RTIME
 
√w_ªsume_time
; } 
¨g
 = {Ñt_task,Çew_resume_time };

1461  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RESUME_TIME
, &
¨g
).
i
[
LOW
];

1464 
RTAI_PROTO
(, 
π_£t_≥riod
, (
RT_TASK
 *
π_èsk
, 
RTIME
 
√w_≥riod
))

1466 °ru˘ { 
RT_TASK
 *
π_èsk
; 
RTIME
 
√w_≥riod
; } 
¨g
 = {Ñt_task,Çew_period };

1467  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_PERIOD
, &
¨g
).
i
[
LOW
];

1470 
RTAI_PROTO
(, 
π_•v_RMS
, (
˝uid
))

1472 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1473 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPV_RMS
, &
¨g
);

1476 
RTAI_PROTO
(, 
π_èsk_masked_unblock
, (
RT_TASK
 *
èsk
, 
mask
))

1478 °ru˘ { 
RT_TASK
 *
èsk
; 
mask
; } 
¨g
 = {Åask, mask };

1479  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAKEUP_SLEEPING
, &
¨g
).
i
[
LOW
];

1482 
	#π_èsk_wakeup_¶ìpög
(
èsk
Ë
	`π_èsk_masked_unblock
—ask, 
RT_SCHED_DELAYED
)

	)

1484 
RTAI_PROTO
(, 
π_gë_exe˘ime
, (
RT_TASK
 *
èsk
, 
RTIME
 *
exe˘ime
))

1486 
RTIME
 
Àxe˘ime
[] = { 0LL, 0LL, 0LL };

1487 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 *
Àxe˘ime
; } 
¨g
 = {Åask,Üexectime };

1488 
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_EXECTIME
, &
¨g
);

1489 
mem˝y
(
exe˘ime
, 
Àxe˘ime
, (lexectime));

1492 
RTAI_PROTO
(, 
π_gëtime‹ig
, (
RTIME
 
time_‹ig
[]))

1494 °ru˘ { 
RTIME
 *
time_‹ig
; } 
¨g
 = {Åime_orig };

1495 
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIMEORIG
, &
¨g
);

1498 
RTAI_PROTO
(
RT_TASK
 *,
·ask_öô
,(
«me
, 
¥i‹ôy
))

1500 °ru˘ { 
«me
; 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
; } 
¨g
 = {Çame,Öriority, 0, 0, 0 };

1501  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_INIT
, &
¨g
).
v
[
LOW
];

1504 
RTAI_PROTO
(
RTIME
, 
°¨t_·imî
,(
≥riod
, 
·ick_‰eq
))

1506 °ru˘ { 
·ick_‰eq
; *
h™dÀr
; } 
¨g
 = { ftick_‰eq, 
NULL
 };

1507 i‡(!
≥riod
) {

1508 
πai_lxπ
(
BIDX
, (), 
SET_ONESHOT_MODE
, &
≥riod
);

1510 
πai_lxπ
(
BIDX
, (), 
SET_PERIODIC_MODE
, &
≥riod
);

1512 
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_RTC
, &
¨g
);

1513  
πai_lxπ
(
BIDX
, (), 
START_TIMER
, &
≥riod
).
π
;

1516 
RTAI_PROTO
(
RTIME
, 
°›_·imî
,())

1518 °ru˘ { 
dummy
; } 
¨g
;

1519 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_RTC
, &
¨g
);

1520  
πai_lxπ
(
BIDX
, 
SIZARG
, 
STOP_TIMER
, &
¨g
).
π
;

1523 
RTAI_PROTO
(, 
kî√l_ˇlibøt‹
, (
≥riod
, 
lo›s
, 
L©ícy
))

1525 °ru˘ { 
≥riod
, 
lo›s
, 
L©ícy
; } 
¨g
 = {Öeriod,Üoops, Latency };

1526  
πai_lxπ
(
BIDX
, 
SIZARG
, 
KERNEL_CALIBRATOR
, &
¨g
).
i
[0];

1529 
RTAI_PROTO
(, 
π_gë_˝u_‰eq
, ())

1531 °ru˘ { 
dummy
; } 
¨g
;

1532  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_CPU_FREQ
, &
¨g
).
i
[0];

1535 #i‚de‡
CONFIG_RTAI_TSC


1536 
	#π_gë_ts˙t
 
π_gë_time


	)

1539 
ölöe
 
RTIME
 
«nos2ts˙ts
(RTIME 
«nos
, 
˝u_‰eq
)

1541  (
RTIME
)(()
«nos
*(()
˝u_‰eq
/()1000000000));

1544 
ölöe
 
RTIME
 
ts˙ts2«nos
(RTIME 
ts˙ts
, 
˝u_‰eq
)

1546  (
RTIME
)(()
ts˙ts
*(()1000000000/()
˝u_‰eq
));

1549 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_malloc.h

24 #i‚de‡
_RTAI_MALLOC_H


25 
	#_RTAI_MALLOC_H


	)

27 
	~<πai_ty≥s.h
>

29 #ifde‡
__KERNEL__


31 #i‚de‡
__˝lu•lus


33 
	~<löux/kî√l.h
>

34 
	~<löux/li°.h
>

35 
	~<löux/•ölock.h
>

57 
	#RTHEAP_MINLOG2
 4

	)

58 
	#RTHEAP_MAXLOG2
 22

	)

59 
	#RTHEAP_MINALLOCSZ
 (1 << 
RTHEAP_MINLOG2
)

	)

60 
	#RTHEAP_MINALIGNSZ
 
RTHEAP_MINALLOCSZ


	)

61 
	#RTHEAP_NBUCKETS
 (
RTHEAP_MAXLOG2
 - 
RTHEAP_MINLOG2
 + 2)

	)

62 
	#RTHEAP_MAXEXTSZ
 0x7FFFFFFF

	)

63 
	#RTHEAP_GLOBALSZ
 (
CONFIG_RTAI_MALLOC_HEAPSZ
 * 1024)

	)

65 
	#RTHEAP_PFREE
 0

	)

66 
	#RTHEAP_PCONT
 1

	)

67 
	#RTHEAP_PLIST
 2

	)

69 
	#KMALLOC_LIMIT
 (128 * 1024)

	)

71 
	#RTHEAP_NOMEM
 (-1)

	)

72 
	#RTHEAP_PARAM
 (-2)

	)

74 
	sπexã¡
 {

76 
li°_hód
 
	mlök
;

78 
ˇddr_t
 
	mmemba£
,

79 
	mmemlim
,

80 
	m‰ìli°
;

82 
u_ch¨
 
	m∑gem≠
[1];

84 } 
	tπexã¡_t
;

87 
	#RTHEAP_EXTENDABLE
 0x1

	)

90 
	#RTHEAP_EXTEND
 0x1

	)

92 
	sπhóp
 {

94 
•ölock_t
 
	mlock
;

96 
	mÊags
;

98 
u_l⁄g
 
	mexã¡size
,

99 
	m∑gesize
,

100 
	m∑geshi·
,

101 
	mhdrsize
,

102 
	m≈ages
,

103 
	mubyãs
,

104 
	mmaxc⁄t
;

106 
li°_hód
 
	mexã¡s
;

108 
ˇddr_t
 
	mbuckës
[
RTHEAP_NBUCKETS
];

110 } 
	tπhóp_t
;

114 
	gπhóp
;

116 
πhóp
 
	tπhóp_t
;

120 
πhóp_t
 
πai_globÆ_hóp
;

122 
	#πhóp_∑ge_size
(
hóp
Ë((hóp)->
∑gesize
)

	)

123 
	#πhóp_∑ge_cou¡
(
hóp
Ë((hóp)->
≈ages
)

	)

124 
	#πhóp_u£d_mem
(
hóp
Ë((hóp)->
ubyãs
)

	)

126 #ifde‡
CONFIG_RTAI_MALLOC


127 
	#π_mÆloc
(
sz
Ë
	`πhóp_Æloc
(&
πai_globÆ_hóp
, sz, 0)

	)

128 
	#π_‰ì
(
p
Ë
	`πhóp_‰ì
(&
πai_globÆ_hóp
,Ö)

	)

130 
	#π_mÆloc
(
sz
Ë
	`kmÆloc
(sz, 
GFP_KERNEL
)

	)

131 
	#π_‰ì
(
p
Ë
	`k‰ì
’)

	)

134 #ifde‡
__˝lu•lus


138 
__πai_hóp_öô
();

140 
__πai_hóp_exô
();

142 
πhóp_öô
(
πhóp_t
 *
hóp
, *
hó∑ddr
, 
u_l⁄g
 
hópsize
, u_l⁄g 
∑gesize
, 
su¥t
);

144 
πhóp_de°roy
(
πhóp_t
 *
hóp
, 
su¥t
);

146 *
πhóp_Æloc
(
πhóp_t
 *
hóp
, 
u_l⁄g
 
size
, 
Êags
);

148 
πhóp_‰ì
(
πhóp_t
 *
hóp
, *
block
);

150 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_math.h

20 #i‚de‡
_RTAI_MATH_H


21 
	#_RTAI_MATH_H


	)

29 #ifde‡
__KERNEL__


31 
	~<πai_schedc‹e.h
>

33 
	#kî∫o
 (
	`_π_whﬂmi
()->
kî∫o
)

	)

35 *
d2°r
(
d
, 
dgt
, *
°r
);

41 #i‚de‡
HUGE_VAL


42 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

45 #i‚de‡
HUGE_VALF


46 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

49 #i‚de‡
HUGE_VALL


50 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

53 #i‚de‡
INFINITY


54 
	#INFINITY
 (
	`__buûtö_öff
())

	)

57 #i‚de‡
NAN


58 
	#NAN
 (
	`__buûtö_«nf
(""))

	)

61 
	#FP_NAN
 0

	)

62 
	#FP_INFINITE
 1

	)

63 
	#FP_ZERO
 2

	)

64 
	#FP_SUBNORMAL
 3

	)

65 
	#FP_NORMAL
 4

	)

67 
__Â˛assify
(
x
);

68 
__Â˛assifyf
(
x
);

69 
__signbô
(
x
);

70 
__signbôf
(
x
);

72 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 1

73 
__Â˛assifyd
(
x
);

74 
	#__Â˛assify
 
__Â˛assifyd


	)

75 
__signbôd
(
x
);

76 
	#__signbô
 
__signbôd


	)

79 
	#Â˛assify
(
__x
) \

80 (((
__x
Ë=()Ë? 
	`__Â˛assifyf
(__x) : \

81 
	`__Â˛assify
(
__x
))

	)

83 #i‚de‡
isföôe


84 
	#isföôe
(
__y
) \

85 (
	`__exãnsi⁄__
 ({
__cy
 = 
	`Â˛assify
(
__y
); \

86 
__cy
 !
FP_INFINITE
 && __cy !
FP_NAN
;}))

	)

89 #i‚de‡
isöf


90 
	#isöf
(
y
Ë(
	`Â˛assify
(yË=
FP_INFINITE
)

	)

93 #i‚de‡
i¢™


94 
	#i¢™
(
y
Ë(
	`Â˛assify
(yË=
FP_NAN
)

	)

97 
	#i¢‹mÆ
(
y
Ë(
	`Â˛assify
(yË=
FP_NORMAL
)

	)

98 
	#signbô
(
__x
) \

99 (((
__x
Ë=()Ë? 
	`__signbôf
(__x) : \

100 
	`__signbô
(
__x
))

	)

102 
	#isun‹dîed
(
a
, 
b
) \

103 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
a
Ë
__a
 = (a); __ty≥of__(
b
Ë
__b
 = (b); \

104 
	`Â˛assify
(
__a
Ë=
FP_NAN
 || fp˛assify(
__b
Ë=FP_NAN;}))

	)

106 
	#isgª©î
(
x
, 
y
) \

107 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

108 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x > __y);}))

	)

110 
	#isgª©îequÆ
(
x
, 
y
) \

111 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

112 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x >__y);}))

	)

114 
	#i¶ess
(
x
, 
y
) \

115 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

116 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x < __y);}))

	)

118 
	#i¶es£quÆ
(
x
, 
y
) \

119 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

120 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x <__y);}))

	)

122 
	#i¶essgª©î
(
x
, 
y
) \

123 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

124 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x < __y || __x > __y);}))

	)

128 
	#Âkîr
(
x
Ë(
	`i¢™
(xË|| 
	`isöf
(x))

	)

130 
m©hîr
();

132 
acos
(
x
);

133 
acosf
(
x
);

134 
acosh
(
x
);

135 
acoshf
(
x
);

136 
asö
(
x
);

137 
asöf
(
x
);

138 
asöh
(
x
);

139 
asöhf
(
x
);

140 
©™
(
x
);

141 
©™f
(
x
);

142 
©™2
(
y
, 
x
);

143 
©™2f
(
y
, 
x
);

144 
©™h
(
x
);

145 
©™hf
(
x
);

146 
j0
(
x
);

147 
j0f
(
x
);

148 
j1
(
x
);

149 
j1f
(
x
);

150 
jn
(
n
, 
x
);

151 
jnf
(
n
, 
x
);

152 
y0
(
x
);

153 
y0f
(
x
);

154 
y1
(
x
);

155 
y1f
(
x
);

156 
yn
(
n
, 
x
);

157 
ynf
(
n
, 
x
);

158 
cbπ
(
x
);

159 
cbπf
(
x
);

160 
c›ysign
 (
x
, 
y
);

161 
c›ysignf
 (
x
, 
y
);

162 
cosh
(
x
);

163 
coshf
(
x
);

164 
îf
(
x
);

165 
îff
(
x
);

166 
îfc
(
x
);

167 
îfcf
(
x
);

168 
exp
(
x
);

169 
expf
(
x
);

170 
exp2
(
x
);

171 
exp2f
(
x
);

172 
expm1
(
x
);

173 
expm1f
(
x
);

174 
Ábs
(
x
);

175 
Ábsf
(
x
);

176 
fdim
(
x
, 
y
);

177 
fdimf
(
x
, 
y
);

178 
Êo‹
(
x
);

179 
Êo‹f
(
x
);

180 
˚û
(
x
);

181 
˚ûf
(
x
);

182 
fma
(
x
, 
y
, 
z
);

183 
fmaf
(
x
, 
y
, 
z
);

184 
fmax
(
x
, 
y
);

185 
fmaxf
(
x
, 
y
);

186 
fmod
(
x
, 
y
);

187 
fmodf
(
x
, 
y
);

188 
‰exp
(
vÆ
, *
exp
);

189 
‰expf
(
vÆ
, *
exp
);

190 
gamma
(
x
);

191 
gammaf
(
x
);

192 
lgamma
(
x
);

193 
lgammaf
(
x
);

194 
gamma_r
(
x
, *
signgamp
);

195 
gammaf_r
(
x
, *
signgamp
);

196 
lgamma_r
(
x
, *
signgamp
);

197 
lgammaf_r
(
x
, *
signgamp
);

198 
tgamma
(
x
);

199 
tgammaf
(
x
);

200 
hypŸ
(
x
, 
y
);

201 
hypŸf
(
x
, 
y
);

202 
ûogb
(
vÆ
);

203 
ûogbf
(
vÆ
);

204 
öföôy
();

205 
öföôyf
();

206 
ldexp
(
vÆ
, 
exp
);

207 
ldexpf
(
vÆ
, 
exp
);

208 
log
(
x
);

209 
logf
(
x
);

210 
log10
(
x
);

211 
log10f
(
x
);

212 
log1p
(
x
);

213 
log1pf
(
x
);

214 
log2
(
x
);

215 
log2f
(
x
);

216 
logb
(
x
);

217 
logbf
(
x
);

218 
Ãöt
(
x
);

219 
Ãötf
(
x
);

220 
Œröt
(
x
);

221 
Œrötf
(
x
);

222 
Ãound
(
x
);

223 
Ãoundf
(
x
);

224 
Œround
(
x
);

225 
Œroundf
(
x
);

226 
modf
(
vÆ
, *
ù¨t
);

227 
modff
(
vÆ
, *
ù¨t
);

228 
«n
(const *);

229 
«nf
(const *);

230 
√¨byöt
(
x
);

231 
√¨byötf
(
x
);

232 
√xè·î
(
vÆ
, 
dú
);

233 
√xè·îf
(
vÆ
, 
dú
);

234 
pow
(
x
, 
y
);

235 
powf
(
x
, 
y
);

236 
ªmaödî
(
x
, 
y
);

237 
ªmaödîf
(
x
, 
y
);

238 
ªmquo
(
x
, 
y
, *
quo
);

239 
ªmquof
(
x
, 
y
, *
quo
);

240 
röt
(
x
);

241 
rötf
(
x
);

242 
round
(
x
);

243 
roundf
(
x
);

244 
sˇlbn
(
x
, 
n
);

245 
sˇlbnf
(
x
, 
n
);

246 
sˇlb 
(
x
, 
n
);

247 
sˇlb f
(
x
, 
n
);

248 
sö
(
x
);

249 
söf
(
x
);

250 
cos
(
x
);

251 
cosf
(
x
);

252 
söh
(
x
);

253 
söhf
(
x
);

254 
sqπ
(
x
);

255 
sqπf
(
x
);

256 
èn
(
x
);

257 
ènf
(
x
);

258 
ènh
(
x
);

259 
ènhf
(
x
);

260 
åunc
(
x
);

261 
åuncf
(
x
);

263 #ifde‡
CONFIG_RTAI_MATH_KCOMPLEX


265 
	#com∂ex
 
_Com∂ex


	)

266 
	#_Com∂ex_I
 (
__exãnsi⁄__
 1.0
iF
)

	)

267 #unde‡
I


268 
	#I
 
_Com∂ex_I


	)

270 *
cd2°r
(
com∂ex
 
d
, 
dgt
, *
°r
);

272 
	#cÂkîr
(
x
Ë(
	`Âkîr
(
__ªÆ__
 xË|| fpkîr(
__imag__
 x))

	)

274 
ˇbs
(
_Com∂ex
 
z
);

275 
ˇbsf
(
_Com∂ex
 
z
);

276 
asmlökage
 
_Com∂ex
 
ˇcos
(_Com∂ex 
z
);

277 
asmlökage
 
_Com∂ex
 
ˇcosf
(_Com∂ex 
z
);

278 
asmlökage
 
_Com∂ex
 
ˇcosh
(_Com∂ex 
z
);

279 
asmlökage
 
_Com∂ex
 
ˇcoshf
(_Com∂ex 
z
);

280 
ˇrg
(
_Com∂ex
 
z
);

281 
ˇrgf
(
_Com∂ex
 
z
);

282 
asmlökage
 
_Com∂ex
 
ˇsö
(_Com∂ex 
z
);

283 
asmlökage
 
_Com∂ex
 
ˇsöf
(_Com∂ex 
z
);

284 
asmlökage
 
_Com∂ex
 
ˇsöh
(_Com∂ex 
z
);

285 
asmlökage
 
_Com∂ex
 
ˇsöhf
(_Com∂ex 
z
);

286 
asmlökage
 
_Com∂ex
 
ˇèn
(_Com∂ex 
z
);

287 
asmlökage
 
_Com∂ex
 
ˇènf
(_Com∂ex 
z
);

288 
asmlökage
 
_Com∂ex
 
ˇènh
(_Com∂ex 
z
);

289 
asmlökage
 
_Com∂ex
 
ˇènhf
(_Com∂ex 
z
);

290 
asmlökage
 
_Com∂ex
 
ccos
(_Com∂ex 
z
);

291 
asmlökage
 
_Com∂ex
 
ccosf
(_Com∂ex 
z
);

292 
asmlökage
 
_Com∂ex
 
ccosh
(_Com∂ex 
z
);

293 
asmlökage
 
_Com∂ex
 
ccoshf
(_Com∂ex 
z
);

294 
asmlökage
 
_Com∂ex
 
˚xp
(_Com∂ex 
z
);

295 
asmlökage
 
_Com∂ex
 
˚xpf
(_Com∂ex 
z
);

296 
cimag
(
_Com∂ex
 
z
);

297 
cimagf
(
_Com∂ex
 
z
);

298 
asmlökage
 
_Com∂ex
 
˛og
(_Com∂ex 
z
);

299 
asmlökage
 
_Com∂ex
 
˛ogf
(_Com∂ex 
z
);

300 
asmlökage
 
_Com∂ex
 
˛og10
(_Com∂ex 
z
);

301 
asmlökage
 
_Com∂ex
 
˛og10f
(_Com∂ex 
z
);

302 
asmlökage
 
_Com∂ex
 
c⁄j
(_Com∂ex 
z
);

303 
asmlökage
 
_Com∂ex
 
c⁄jf
(_Com∂ex 
z
);

304 
asmlökage
 
_Com∂ex
 
˝ow
(_Com∂ex 
x
, _Com∂ex 
y
);

305 
asmlökage
 
_Com∂ex
 
˝owf
(_Com∂ex 
x
, _Com∂ex 
y
);

306 
asmlökage
 
_Com∂ex
 
˝roj
(_Com∂ex 
z
);

307 
asmlökage
 
_Com∂ex
 
˝rojf
(_Com∂ex 
z
);

308 
¸ól
(
_Com∂ex
 
z
);

309 
¸ólf
(
_Com∂ex
 
z
);

310 
asmlökage
 
_Com∂ex
 
csö
(_Com∂ex 
z
);

311 
asmlökage
 
_Com∂ex
 
csöf
(_Com∂ex 
z
);

312 
asmlökage
 
_Com∂ex
 
csöh
(_Com∂ex 
z
);

313 
asmlökage
 
_Com∂ex
 
csöhf
(_Com∂ex 
z
);

314 
asmlökage
 
_Com∂ex
 
csqπ
(_Com∂ex 
z
);

315 
asmlökage
 
_Com∂ex
 
csqπf
(_Com∂ex 
z
);

316 
asmlökage
 
_Com∂ex
 
˘™
(_Com∂ex 
z
);

317 
asmlökage
 
_Com∂ex
 
˘™f
(_Com∂ex 
z
);

318 
asmlökage
 
_Com∂ex
 
˘™h
(_Com∂ex 
z
);

319 
asmlökage
 
_Com∂ex
 
˘™hf
(_Com∂ex 
z
);

	@/usr/src/rtai/base/include/rtai_mbx.h

24 #i‚de‡
_RTAI_MBX_H


25 
	#_RTAI_MBX_H


	)

27 
	~<πai_£m.h
>

29 
	#RT_MBX_MAGIC
 0x3f81aab

30 

	)

31 
	gπ_èsk_°ru˘
;

32 
	gπ_maûbox
;

34 #ifde‡
__KERNEL__


36 #i‚de‡
__˝lu•lus


38 
	sπ_maûbox
 {

39 
	mmagic
;

40 
SEM
 
	m¢d£m
, 
	mrcv£m
;

41 
π_èsk_°ru˘
 *
	mwaôög_èsk
, *
	mowndby
;

42 *
	mbuÁdr
;

43 
	msize
, 
	mfbyã
, 
	mlbyã
, 
	mavbs
, 
	m‰bs
;

44 
•ölock_t
 
	mlock
;

45 #ifde‡
CONFIG_RTAI_RT_POLL


46 
π_pﬁl_ql
 
	mpﬁl_ªcv
;

47 
π_pﬁl_ql
 
	mpﬁl_£nd
;

49 } 
	tMBX
;

55 
__πai_mbx_öô
();

57 
__πai_mbx_exô
();

59 
RTAI_SYSCALL_MODE
 
π_ty≥d_mbx_öô
(
π_maûbox
 *
mbx
, 
size
, 
qty≥
);

61 
π_mbx_öô
(
π_maûbox
 *
mbx
, 
size
);

63 
RTAI_SYSCALL_MODE
 
π_mbx_dñëe
(
π_maûbox
 *
mbx
);

65 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

66 
ölöe
 
π_mbx_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

68  
_π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
, 1);

71 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

72 
ölöe
 
π_mbx_£nd_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

74  
_π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
, 1);

77 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

78 
ölöe
 
π_mbx_£nd_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

80  
_π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
, 1);

83 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
timei
, 
•a˚
);

84 
ölöe
 
π_mbx_£nd_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

86  
_π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
time
, 1);

89 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
);

90 
ölöe
 
π_mbx_£nd_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

92  
_π_mbx_£nd_timed
(
mbx
, 
msg
, 
msg_size
, 
dñay
, 1);

95 
RTAI_SYSCALL_MODE
 
_π_mbx_ovrwr_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

96 
ölöe
 
π_mbx_ovrwr_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

98  
_π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
, 1);

101 
RTAI_SYSCALL_MODE
 
_π_mbx_evdΩ
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

102 
ölöe
 
π_mbx_evdΩ
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

104  
_π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
, 1);

107 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

108 
ölöe
 
π_mbx_ª˚ive
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

110  
_π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
, 1);

113 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

114 
ölöe
 
π_mbx_ª˚ive_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

116  
_π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
, 1);

119 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

120 
ölöe
 
π_mbx_ª˚ive_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

122  
_π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
, 1);

125 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
, 
•a˚
);

126 
ölöe
 
π_mbx_ª˚ive_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

128  
_π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
time
, 1);

131 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
);

132 
ölöe
 
π_mbx_ª˚ive_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

134  
_π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
dñay
, 1);

137 
RTAI_SYSCALL_MODE
 
π_maûbox
 *
_π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

138 
ölöe
 
π_maûbox
 *
π_ty≥d_«med_mbx_öô
(c⁄° *
mbx_«me
, 
size
, 
qty≥
)

140  
_π_ty≥d_«med_mbx_öô
(
«m2num
(
mbx_«me
), 
size
, 
qty≥
);

143 
RTAI_SYSCALL_MODE
 
π_«med_mbx_dñëe
(
π_maûbox
 *
mbx
);

145 
	#π_«med_mbx_öô
(
mbx_«me
, 
size
Ë
	`π_ty≥d_«med_mbx_öô
(mbx_«me, size, 
FIFO_Q
)

	)

147 #ifde‡
__˝lu•lus


153 
	~<πai_lxπ.h
>

155 #ifde‡
__˝lu•lus


159 
RTAI_PROTO
(
π_maûbox
 *, 
π_ty≥d_mbx_öô
, (
«me
, 
size
, 
qty≥
))

161 °ru˘ { 
«me
; 
size
; 
qty≥
; } 
¨g
 = {Çame, size, qtype };

162  (
π_maûbox
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_MBX_INIT
, &
¨g
).
v
[
LOW
];

179 
	#π_mbx_öô
(
«me
, 
size
Ë
	`π_ty≥d_mbx_öô
“ame, size, 
FIFO_Q
)

	)

181 
RTAI_PROTO
(, 
π_mbx_dñëe
, (
π_maûbox
 *
mbx
))

183 *
¨g
 = 
mbx
;

184  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_MBX_DELETE
, &
¨g
).
i
[
LOW
];

187 
RTAI_PROTO
(
π_maûbox
 *, 
π_ty≥d_«med_mbx_öô
, (c⁄° *
«me
, 
size
, 
ty≥
))

189 °ru˘ { 
«me
; 
size
, 
ty≥
; } 
¨g
 = { 
«m2num
(name), size,Åype };

190  (
π_maûbox
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MBX_INIT
, &
¨g
).
v
[
LOW
];

193 
RTAI_PROTO
(, 
π_«med_mbx_dñëe
, (
π_maûbox
 *
mbx
))

195 °ru˘ { 
π_maûbox
 *
mbx
; } 
¨g
 = { mbx };

196  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MBX_DELETE
, &
¨g
).
i
[
LOW
];

199 
	#π_«med_mbx_öô
(
mbx_«me
, 
size
) \

200 
	`π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
FIFO_Q
)

	)

202 
RTAI_PROTO
(, 
π_mbx_£nd
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

204 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

205  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND
, &
¨g
).
i
[
LOW
];

208 
RTAI_PROTO
(, 
π_mbx_£nd_wp
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

210 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

211  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_WP
, &
¨g
).
i
[
LOW
];

214 
RTAI_PROTO
(, 
π_mbx_£nd_if
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

216 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

217  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_IF
, &
¨g
).
i
[
LOW
];

220 
RTAI_PROTO
(, 
π_mbx_£nd_u¡û
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
))

222 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size,Åime, 0 };

223  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_UNTIL
, &
¨g
).
i
[
LOW
];

226 
RTAI_PROTO
(, 
π_mbx_£nd_timed
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

228 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, delay, 0 };

229  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_TIMED
, &
¨g
).
i
[
LOW
];

232 
RTAI_PROTO
(, 
π_mbx_ovrwr_£nd
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

234 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

235  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_OVRWR_SEND
, &
¨g
).
i
[
LOW
];

238 
RTAI_PROTO
(, 
π_mbx_evdΩ
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

240 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

241  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_EVDRP
, &
¨g
).
i
[
LOW
];

244 
RTAI_PROTO
(, 
π_mbx_ª˚ive
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

246 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

247  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE
, &
¨g
).
i
[
LOW
];

250 
RTAI_PROTO
(, 
π_mbx_ª˚ive_wp
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

252 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

253  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_WP
, &
¨g
).
i
[
LOW
];

256 
RTAI_PROTO
(, 
π_mbx_ª˚ive_if
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

258 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

259  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_IF
, &
¨g
).
i
[
LOW
];

262 
RTAI_PROTO
(, 
π_mbx_ª˚ive_u¡û
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
))

264 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size,Åime, 0 };

265  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_UNTIL
, &
¨g
).
i
[
LOW
];

268 
RTAI_PROTO
(, 
π_mbx_ª˚ive_timed
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

270 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, delay, 0 };

271  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_TIMED
, &
¨g
).
i
[
LOW
];

274 #ifde‡
__˝lu•lus


280 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

282 
	sπ_maûbox
 {

283 
›aque
;

284 } 
	tMBX
;

	@/usr/src/rtai/base/include/rtai_mq.h

28 #i‚de‡
_RTAI_MQ_H


29 
	#_RTAI_MQ_H


	)

31 
	~<löux/vîsi⁄.h
>

32 
	~<πai_£m.h
>

33 
	~<πai_schedc‹e.h
>

35 
	#MQ_OPEN_MAX
 8

	)

36 #i‚def 
MQ_PRIO_MAX


37 
	#MQ_PRIO_MAX
 32

	)

39 
	#MQ_BLOCK
 0

	)

40 
	#MQ_NONBLOCK
 1

	)

41 
	#MQ_NAME_MAX
 80

	)

43 
	#MQ_MIN_MSG_PRIORITY
 0

	)

44 
	#MQ_MAX_MSG_PRIORITY
 
MQ_PRIO_MAX


	)

46 
	#MAX_PQUEUES
 4

	)

48 
	#MAX_MSGSIZE
 50

	)

49 
	#MAX_MSGS
 10

	)

51 
	#O_NOTIFY_NP
 0x1000

	)

53 
	smq_©å
 {

54 
	mmq_maxmsg
;

55 
	mmq_msgsize
;

56 
	mmq_Êags
;

57 
	mmq_curmsgs
;

58 } 
	tMQ_ATTR
;

60 
	#INVALID_PQUEUE
 0

	)

62 #ifde‡
__KERNEL__


64 
	~<löux/ty≥s.h
>

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,6)

67 
	tmqd_t
;

70 #i‚de‡
__˝lu•lus


72 
	tmq_boﬁ_t
;

74 #i‚de‡
TRUE


75 
	#TRUE
 1

	)

76 
	#FALSE
 0

	)

79 
	smsg_hdr
 {

80 
size_t
 
	msize
;

81 
uöt
 
	m¥i‹ôy
;

82 *
	m√xt
;

83 } 
	tMSG_HDR
;

85 
	#MSG_HDR_SIZE
 ((
MSG_HDR
))

	)

87 
	squeue_c⁄åﬁ
 {

88 
	mnodöd
;

89 **
	mnodes
;

90 *
	mba£
;

91 *
	mhód
;

92 *
	mèû
;

93 
MQ_ATTR
 
	m©ås
;

94 } 
	tQ_CTRL
;

96 
	smsg
 {

97 
MSG_HDR
 
	mhdr
;

98 
	md©a
;

99 } 
	tMQMSG
;

101 
	snŸify
 {

102 
RT_TASK
 *
	mèsk
;

103 
sigevít
 
	md©a
;

106 
	s_pqueue_des¸_°ru˘
 {

107 
RT_TASK
 *
	mow√r
;

108 
	m›í_cou¡
;

110 
	mq_«me
[
MQ_NAME_MAX
];

111 
uöt
 
	mq_id
;

112 
mq_boﬁ_t
 
	mm¨ked_f‹_dñëi⁄
;

114 
Q_CTRL
 
	md©a
;

115 
mode_t
 
	m≥rmissi⁄s
;

116 
nŸify
 
	mnŸify
;

117 
SEM
 
	memp_c⁄d
;

118 
SEM
 
	mfuŒ_c⁄d
;

119 
SEM
 
	mmuãx
;

120 } 
	tMSG_QUEUE
;

122 
	s_pqueue_ac˚ss_d©a
 {

123 
	mq_id
;

124 
	moÊags
;

125 
sigevít
 *
	mu•_nŸifõr
;

128 
	s_pqueue_ac˚ss_°ru˘
 {

129 
RT_TASK
 *
	mthis_èsk
;

130 
	mn_›í_pqueues
;

131 
_pqueue_ac˚ss_d©a
 
	mq_ac˚ss
[
MQ_OPEN_MAX
];

132 } *
	tQUEUE_CTRL
;

135 
	mFOR_READ
,

136 
	mFOR_WRITE


137 } 
	tQ_ACCESS
;

143 
__πai_mq_öô
();

145 
__πai_mq_exô
();

147 
RTAI_SYSCALL_MODE
 
mqd_t
 
_mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_©å, 
•a˚
);

148 
ölöe
 
mqd_t
 
mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr)

150  
_mq_›í
(
mq_«me
, 
oÊags
, 
≥rmissi⁄s
, 
mq_©å
, 1);

153 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, 
•a˚
);

154 
ölöe
 
size_t
 
mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
)

156  
_mq_ª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 1);

159 
RTAI_SYSCALL_MODE
 
_mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, 
•a˚
);

160 
ölöe
 
mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
)

162  
_mq_£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 1);

165 
RTAI_SYSCALL_MODE
 
mq_˛o£
(
mqd_t
 
mq
);

167 
RTAI_SYSCALL_MODE
 
mq_gë©å
(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
);

169 
RTAI_SYSCALL_MODE
 
mq_£èâr
(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
);

171 
RTAI_SYSCALL_MODE
 
_mq_nŸify
(
mqd_t
 
mq
, 
RT_TASK
 *
èsk
, 
•a˚
, 
ªm
, c⁄° 
sigevít
 *
nŸifiˇti⁄
);

172 
ölöe
 
mq_nŸify
(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

174  
_mq_nŸify
(
mq
, 
π_whﬂmi
(), 1, (
nŸifiˇti⁄
 ? 0 : 1),Çotification );

177 
RTAI_SYSCALL_MODE
 
mq_u∆ök
(*
mq_«me
);

179 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

180 
ölöe
 
size_t
 
mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

182  
_mq_timedª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 
ab°ime
, 1);

185 
RTAI_SYSCALL_MODE
 
_mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

186 
ölöe
 
mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

188  
_mq_timed£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 
ab°ime
, 1);

191 #ifde‡
__˝lu•lus


197 
	~<sig«l.h
>

198 
	~<πai_lxπ.h
>

199 
	~<πai_sig«l.h
>

201 
	#MQIDX
 0

	)

203 
	tmqd_t
;

205 #ifde‡
__˝lu•lus


209 
	ssu¥t_fun_¨g
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
˝uid
; 
±hªad_t
 
£lf
; };

211 #i‚de‡
__SIGNAL_SUPPORT_FUN_MQ__


212 
	#__SIGNAL_SUPPORT_FUN_MQ__


	)

214 
sig«l_su¥t_fun_mq
(
su¥t_fun_¨g
 *
fun_¨g
)

216 
	ssigtsk_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; };

217 
su¥t_fun_¨g
 
¨g
 = *
fun_¨g
;

218 
	ssigªq_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
sig«l
;} 
sigªq
 = {
NULL
, 
¨g
.èsk, (¨g.
mq
 + 
MAXSIGNALS
)};

219 
sigevít
 
nŸifiˇti⁄
;

221 i‡((
sigªq
.
sigèsk
 = 
π_thªad_öô
(
π_gë_«me
(0), 
SIGNAL_TASK_INIPRIO
, 0, 
SCHED_FIFO
, 1 << 
¨g
.
˝uid
))) {

222 i‡(!
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigªq_t
), 
RT_SIGNAL_REQUEST
, &
sigªq
).
i
[
LOW
]) {

223 
	s¨g_ªg
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
sigevít
 *
u•_nŸifiˇti⁄
;} 
¨g_ªg
 = {
¨g
.mq,árg.èsk, &
nŸifiˇti⁄
};

224 
πai_lxπ
(
MQIDX
, (
¨g_ªg
), 
MQ_REG_USP_NOTIFIER
, &arg_reg);

225 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

226 
π_make_h¨d_ªÆ_time
();

227 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigtsk_t
), 
RT_SIGNAL_WAITSIG
, &
sigªq
).
i
[
LOW
]) {

228 i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_THREAD
) {

229 
nŸifiˇti⁄
.
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄
((
sigvÆ_t
ÍŸifiˇti⁄.
sigev_vÆue
.
sivÆ_öt
);

230 } i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_SIGNAL
) {

231 
±hªad_kûl
((
±hªad_t
)
¨g
.
£lf
, 
nŸifiˇti⁄
.
sigev_signo
);

234 
π_make_so·_ªÆ_time
();

236 
π_èsk_dñëe
(
sigªq
.
sigèsk
);

242 
RTAI_PROTO
(, 
π_ªque°_sig«l_mq
, (
mqd_t
 
mq
))

244 
su¥t_fun_¨g
 
¨g
 = { 
mq
, 
NULL
, 0, 
±hªad_£lf
() };

245 
¨g
.
˝uid
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (*), 
RT_SIGNAL_HELPER
, (*)&¨g.
èsk
).
i
[
LOW
];

246 
¨g
.
èsk
 = 
π_buddy
();

247 i‡(
π_thªad_¸óã
(
sig«l_su¥t_fun_mq
, &
¨g
, 
SIGNAL_TASK_STACK_SIZE
)) {

248 
ªt
;

249 
ªt
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
RT_TASK
 *), 
RT_SIGNAL_HELPER
, &
¨g
.
èsk
).
i
[
LOW
];

250  
ªt
;

256 
RTAI_PROTO
(
mqd_t
, 
mq_›í
,(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr))

258 
mqd_t
 
ªt
;

259 °ru˘ {*
mq_«me
; 
oÊags
; 
≥rmissi⁄s
; 
mq_©å
 *mq_©å; 
«mesize
, 
©åsize
; 
•a˚
; } 
¨g
 = { mq_«me, oÊags,Öîmissi⁄s, mq_©å, 
°æí
(mq_name) + 1, (mq_attr), 0 };

260 i‡((
ªt
 = (
mqd_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_OPEN
, &
¨g
).
i
[
LOW
]) >= 0) {

262 i‡(
oÊags
 & 
O_NOTIFY_NP
) {

263 
π_ªque°_sig«l_mq
 (
ªt
);

266  
ªt
;

269 
RTAI_PROTO
(
size_t
, 
mq_ª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
))

271 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio, 0 };

272  (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_RECEIVE
, &
¨g
).
i
[
LOW
];

275 
RTAI_PROTO
(, 
mq_£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
))

277 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio, 0 };

278  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SEND
, &
¨g
).
i
[
LOW
];

281 
RTAI_PROTO
(, 
mq_˛o£
,(
mqd_t
 
mq
))

283 °ru˘ { 
mq
; } 
¨g
 = { mq };

284  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_CLOSE
, &
¨g
).
i
[
LOW
];

287 
RTAI_PROTO
(, 
mq_gë©å
,(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
))

289 °ru˘ { 
mq
; 
mq_©å
 *
©åbuf
; 
©åsize
; } 
¨g
 = { mq,áttrbuf, (mq_attr) };

290  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_GETATTR
, &
¨g
).
i
[
LOW
];

293 
RTAI_PROTO
(, 
mq_£èâr
,(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
))

295 °ru˘ { 
mq
; c⁄° 
mq_©å
 *
√w_©ås
; mq_©å *
ﬁd_©ås
; 
©åsize
; } 
¨g
 = { mq,Çew_attrs, old_attrs, (mq_attr) };

296  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SETATTR
, &
¨g
).
i
[
LOW
];

299 
RTAI_PROTO
(, 
mq_nŸify
,(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
))

301 
ªt
;

302 °ru˘ { 
mq
; 
RT_TASK
* 
èsk
; 
•a˚
; 
ªm
; c⁄° 
sigevít
 *
nŸifiˇti⁄
; 
size
;} 
¨g
 = { mq, 
π_buddy
(), 0, (notification ? 0 : 1),Çotification, (sigevent) };

303 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_NOTIFY
, &
¨g
).
i
[
LOW
]) >= 0) {

304 i‡(
ªt
 =
O_NOTIFY_NP
) {

305 
π_ªque°_sig«l_mq
 (
mq
);

306 
ªt
 = 0;

309  
ªt
;

312 
RTAI_PROTO
(, 
mq_u∆ök
,(*
mq_«me
))

314 °ru˘ { *
mq_«me
; 
size
; } 
¨g
 = { mq_«me, 
°æí
(mq_name) + 1};

315  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_UNLINK
, &
¨g
).
i
[
LOW
];

318 
RTAI_PROTO
(
size_t
, 
mq_timedª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

320 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio,ábstime, 0 };

321  (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDRECEIVE
, &
¨g
).
i
[
LOW
];

324 
RTAI_PROTO
(, 
mq_timed£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

326 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio,ábstime, 0 };

327  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDSEND
, &
¨g
).
i
[
LOW
];

330 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_msg.h

20 #i‚de‡
_RTAI_MSG_H


21 
	#_RTAI_MSG_H


	)

23 
	~<πai_ty≥s.h
>

25 
	#MSG_ERR
 ((
RT_TASK
 *)
RTE_OBJINV
)

	)

27 
	gπ_èsk_°ru˘
;

28 
	gQueueBlock
;

29 
	gQueueHook
;

31 #ifde‡
__KERNEL__


33 
	st_msgcb
 {

34 
	mcmd
;

35 *
	msbuf
;

36 
size_t
 
	msbyãs
;

37 *
	mrbuf
;

38 
size_t
 
	mrbyãs
;

39 } 
	tMSGCB
;

41 
	#PROXY_MIN_STACK_SIZE
 2048

	)

43 
	s¥oxy_t
 {

44 
π_èsk_°ru˘
 *
	mª˚ivî
;

45 
	mnmsgs
, 
	mnbyãs
;

46 *
	mmsg
;

49 
	#SYNCMSG
 0

	)

50 
	#PROXY
 -1

	)

52 #ifde‡
__˝lu•lus


56 
__πai_msg_öô
();

58 
__πai_msg_exô
();

60 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd
(π_èsk_°ru˘ *
èsk
,

61 
msg
);

63 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_if
(π_èsk_°ru˘ *
èsk
,

64 
msg
);

66 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_u¡û
(π_èsk_°ru˘ *
èsk
,

67 
msg
,

68 
RTIME
 
time
);

70 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_timed
(π_èsk_°ru˘ *
èsk
,

71 
msg
,

72 
RTIME
 
dñay
);

74 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_evdΩ
(π_èsk_°ru˘ *
èsk
,

75 *
msg
);

77 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive
(π_èsk_°ru˘ *
èsk
,

78 *
msg
);

80 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_if
(π_èsk_°ru˘ *
èsk
,

81 *
msg
);

83 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_u¡û
(π_èsk_°ru˘ *
èsk
,

84 *
msg
,

85 
RTIME
 
time
);

87 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_timed
(π_èsk_°ru˘ *
èsk
,

88 *
msg
,

89 
RTIME
 
dñay
);

91 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc
(π_èsk_°ru˘ *
èsk
,

92 
to_do
,

93 *
ªsu…
);

95 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_if
(π_èsk_°ru˘ *
èsk
,

96 
to_do
,

97 *
ªsu…
);

99 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_u¡û
(π_èsk_°ru˘ *
èsk
,

100 
to_do
,

101 *
ªsu…
,

102 
RTIME
 
time
);

104 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_timed
(π_èsk_°ru˘ *
èsk
,

105 
to_do
,

106 *
ªsu…
,

107 
RTIME
 
dñay
);

109 
RTAI_SYSCALL_MODE
 
π_i§pc
(
π_èsk_°ru˘
 *
èsk
);

111 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ªtu∫
(π_èsk_°ru˘ *
èsk
,

112 
ªsu…
);

114 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx
(π_èsk_°ru˘ *
èsk
,

115 *
smsg
,

116 *
rmsg
,

117 
ssize
,

118 
rsize
);

120 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_if
(π_èsk_°ru˘ *
èsk
,

121 *
smsg
,

122 *
rmsg
,

123 
ssize
,

124 
rsize
);

126 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_u¡û
(π_èsk_°ru˘ *
èsk
,

127 *
smsg
,

128 *
rmsg
,

129 
ssize
,

130 
rsize
,

131 
RTIME
 
time
);

133 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_timed
(π_èsk_°ru˘ *
èsk
,

134 *
smsg
,

135 *
rmsg
,

136 
ssize
,

137 
rsize
,

138 
RTIME
 
dñay
);

140 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx
(π_èsk_°ru˘ *
èsk
,

141 *
msg
,

142 
size
);

144 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_if
(π_èsk_°ru˘ *
èsk
,

145 *
msg
,

146 
size
);

148 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_u¡û
(π_èsk_°ru˘ *
èsk
,

149 *
msg
,

150 
size
,

151 
RTIME
 
time
);

153 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_timed
(π_èsk_°ru˘ *
èsk
,

154 *
msg
,

155 
size
,

156 
RTIME
 
dñay
);

158 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ªtu∫x
(π_èsk_°ru˘ *
èsk
,

159 *
msg
,

160 
size
);

162 
	#π_i§pcx
(
èsk
Ë
	`π_i§pc
—ask)

	)

164 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_evdΩx
(π_èsk_°ru˘ *
èsk
,

165 *
msg
,

166 
size
,

167 *
Àn
);

169 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex
(π_èsk_°ru˘ *
èsk
,

170 *
msg
,

171 
size
,

172 *
Àn
);

174 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_if
(π_èsk_°ru˘ *
èsk
,

175 *
msg
,

176 
size
,

177 *
Àn
);

179 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_u¡û
(π_èsk_°ru˘ *
èsk
,

180 *
msg
,

181 
size
,

182 *
Àn
,

183 
RTIME
 
time
);

185 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_timed
(π_èsk_°ru˘ *
èsk
,

186 *
msg
,

187 
size
,

188 *
Àn
,

189 
RTIME
 
dñay
);

191 
π_èsk_°ru˘
 *
__π_¥oxy_©èch
((*
func
)(),

192 
π_èsk_°ru˘
 *
èsk
,

193 *
msg
,

194 
nbyãs
,

195 
¥i‹ôy
);

197 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_¥oxy_©èch
(π_èsk_°ru˘ *
èsk
,

198 *
msg
,

199 
nbyãs
,

200 
¥i‹ôy
);

202 
RTAI_SYSCALL_MODE
 
π_¥oxy_dëach
(
π_èsk_°ru˘
 *
¥oxy
);

204 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_åiggî
(π_èsk_°ru˘ *
¥oxy
);

206 
	#exi°
(
«me
Ë
	`π_gë_adr
(
	`«m2num
“ame))

	)

208 
RTAI_SYSCALL_MODE
 
π_Síd
(
pid_t
 
pid
,

209 *
smsg
,

210 *
rmsg
,

211 
size_t
 
ssize
,

212 
size_t
 
rsize
);

214 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Re˚ive
’id_à
pid
,

215 *
msg
,

216 
size_t
 
maxsize
,

217 
size_t
 *
msgÀn
);

219 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Cª˚ive
’id_à
pid
,

220 *
msg
,

221 
size_t
 
maxsize
,

222 
size_t
 *
msgÀn
,

223 
RTIME
 
dñay
);

225 
RTAI_SYSCALL_MODE
 
π_Rïly
(
pid_t
 
pid
,

226 *
msg
,

227 
size_t
 
size
);

229 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Proxy_©èch
’id_à
pid
,

230 *
msg
,

231 
nbyãs
,

232 
¥i‹ôy
);

234 
RTAI_SYSCALL_MODE
 
π_Proxy_dëach
(
pid_t
 
pid
);

236 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Triggî
’id_à
pid
);

238 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Name_©èch
(c⁄° *
«me
);

240 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Name_loˇã
(c⁄° *
ho°
,

241 c⁄° *
«me
);

243 
RTAI_SYSCALL_MODE
 
π_Name_dëach
(
pid_t
 
pid
);

245 #ifde‡
__˝lu•lus


251 
	~<πai_lxπ.h
>

253 #ifde‡
__˝lu•lus


257 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd
,(π_èsk_°ru˘ *
èsk
, 
msg
))

259 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

260  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDMSG
, &
¨g
).
v
[
LOW
];

263 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_if
,(π_èsk_°ru˘ *
èsk
, 
msg
))

265 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

266  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_IF
, &
¨g
).
v
[
LOW
];

269 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_u¡û
,(π_èsk_°ru˘ *
èsk
, 
msg
, 
RTIME
 
time
))

271 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

272  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_UNTIL
, &
¨g
).
v
[
LOW
];

275 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_timed
,(π_èsk_°ru˘ *
èsk
, 
msg
, 
RTIME
 
dñay
))

277 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

278  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_TIMED
, &
¨g
).
v
[
LOW
];

281 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_evdΩ
,(π_èsk_°ru˘ *
èsk
, *
msg
))

283 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

284  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
EVDRP
, &
¨g
).
v
[
LOW
];

287 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive
,(π_èsk_°ru˘ *
èsk
, *
msg
))

289 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

290  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEMSG
, &
¨g
).
v
[
LOW
];

293 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_if
,(π_èsk_°ru˘ *
èsk
, *
msg
))

295 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

296  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_IF
, &
¨g
).
v
[
LOW
];

299 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
RTIME
 
time
))

301 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

302  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_UNTIL
, &
¨g
).
v
[
LOW
];

305 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
RTIME
 
dñay
))

307 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

308  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_TIMED
, &
¨g
).
v
[
LOW
];

311 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
))

313 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; } 
¨g
 = {Åask,Åo_do,Ñesult };

314  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCMSG
, &
¨g
).
v
[
LOW
];

317 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_if
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
))

319 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; } 
¨g
 = {Åask,Åo_do,Ñesult };

320  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_IF
, &
¨g
).
v
[
LOW
];

323 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_u¡û
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
time
))

325 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; 
RTIME
 
time
; } 
¨g
 = {Åask,Åo_do,Ñesult,Åime };

326  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_UNTIL
, &
¨g
).
v
[
LOW
];

329 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_timed
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
dñay
))

331 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; 
RTIME
 
dñay
; } 
¨g
 = {Åask,Åo_do,Ñesult, delay };

332  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_TIMED
, &
¨g
).
v
[
LOW
];

335 
RTAI_PROTO
(, 
π_i§pc
,(
π_èsk_°ru˘
 *
èsk
))

337 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; } 
¨g
 = {Åask };

338  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
ISRPC
, &
¨g
).
i
[
LOW
];

341 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ªtu∫
,(π_èsk_°ru˘ *
èsk
, 
ªsu…
))

343 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
ªsu…
; } 
¨g
 = {Åask,Ñesult };

344  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RETURNMSG
, &
¨g
).
v
[
LOW
];

347 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
))

349 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

350  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX
, &
¨g
).
v
[
LOW
];

353 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_if
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
))

355 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

356  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_IF
, &
¨g
).
v
[
LOW
];

359 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_u¡û
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
))

361 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

362  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_UNTIL
, &
¨g
).
v
[
LOW
];

365 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_timed
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
))

367 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

368  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_TIMED
, &
¨g
).
v
[
LOW
];

371 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

373 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

374  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX
, &
¨g
).
v
[
LOW
];

377 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_if
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

379 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

380  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_IF
, &
¨g
).
v
[
LOW
];

383 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, 
RTIME
 
time
))

385 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

386  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_UNTIL
, &
¨g
).
v
[
LOW
];

389 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
))

391 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

392  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_TIMED
, &
¨g
).
v
[
LOW
];

395 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ªtu∫x
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

397 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

398  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RETURNX
, &
¨g
).
v
[
LOW
];

401 
	#π_i§pcx
(
èsk
Ë
	`π_i§pc
—ask)

	)

403 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_evdΩx
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

405 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

406  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
EVDRPX
, &
¨g
).
v
[
LOW
];

409 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

411 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

412  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX
, &
¨g
).
v
[
LOW
];

415 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_if
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

417 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

418  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_IF
, &
¨g
).
v
[
LOW
];

421 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
))

423 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Üen,Åime };

424  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_UNTIL
, &
¨g
).
v
[
LOW
];

427 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
))

429 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size,Üen, delay };

430  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_TIMED
, &
¨g
).
v
[
LOW
];

433 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_¥oxy_©èch
,(π_èsk_°ru˘ *
¥oxy
, *
msg
, 
nbyãs
, 
¥i‹ôy
))

435 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; *
msg
; 
nbyãs
, 
¥i‹ôy
;} 
¨g
 = {Öroxy, msg,Çbytes,Öriority };

436  (
π_èsk_°ru˘
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_ATTACH
, &
¨g
).
v
[
LOW
];

439 
RTAI_PROTO
(, 
π_¥oxy_dëach
,(
π_èsk_°ru˘
 *
¥oxy
))

441 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; } 
¨g
 = {Öroxy };

442  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_DETACH
, &
¨g
).
i
[
LOW
];

445 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_åiggî
,(π_èsk_°ru˘ *
¥oxy
))

447 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; } 
¨g
 = {Öroxy };

448  (
π_èsk_°ru˘
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_TRIGGER
, &
¨g
).
v
[
LOW
];

451 
RTAI_PROTO
(, 
π_Síd
,(
pid_t
 
pid
, *
smsg
, *
rmsg
, 
size_t
 
ssize
, size_à
rsize
 ))

453 °ru˘ { 
pid
; *
smsg
; *
rmsg
; 
ssize
, 
rsize
;} 
¨g
 = {Öid, smsg,Ñmsg, ssize,Ñsize };

454  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_SEND
, &
¨g
).
i
[
LOW
];

457 
RTAI_PROTO
(
pid_t
, 
π_Re˚ive
,’id_à
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
))

459 °ru˘ { 
pid
; *
msg
; 
maxsize
; 
size_t
 *
msgÀn
; } 
¨g
 = {Öid, msg, maxsize, msglen };

460  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_RECEIVE
, &
¨g
).
i
[
LOW
];

463 
RTAI_PROTO
(
pid_t
, 
π_Cª˚ive
,’id_à
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
, 
RTIME
 
dñay
))

465 °ru˘ { 
pid
; *
msg
; 
maxsize
; 
size_t
 *
msgÀn
; 
RTIME
 
dñay
;} 
¨g
 = {Öid, msg, maxsize, msglen, delay };

466  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_CRECEIVE
, &
¨g
).
i
[
LOW
];

469 
RTAI_PROTO
(
pid_t
, 
π_Rïly
,’id_à
pid
, *
msg
, 
size_t
 
size
))

471 °ru˘ { 
pid
; *
msg
; 
size
;} 
¨g
 = {Öid, msg, size };

472  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_REPLY
, &
¨g
).
i
[
LOW
];

475 
RTAI_PROTO
(
pid_t
, 
π_Proxy_©èch
,’id_à
pid
, *
msg
, 
nbyãs
, 
¥i‹ôy
))

477 °ru˘ { 
pid
; *
msg
; 
nbyãs
, 
¥i‹ôy
;} 
¨g
 = {Öid, msg,Çbytes,Öriority };

478  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_PROXY_ATTACH
, &
¨g
).
i
[
LOW
];

481 
RTAI_PROTO
(
pid_t
, 
π_Proxy_dëach
,’id_à
pid
))

483 °ru˘ { 
pid
; } 
¨g
 = {Öid };

484  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_PROXY_DETACH
, &
¨g
).
i
[
LOW
];

487 
RTAI_PROTO
(
pid_t
, 
π_Triggî
,’id_à
pid
))

489 °ru˘ { 
pid
; } 
¨g
 = {Öid };

490  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_TRIGGER
, &
¨g
).
i
[
LOW
];

493 
RTAI_PROTO
(
pid_t
, 
π_Alüs_©èch
,(c⁄° *
«me
))

495 °ru˘ { c⁄° *
«me
; } 
¨g
 = {Çame};

496  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_ATTACH
, &
¨g
).
i
[
LOW
];

499 
RTAI_PROTO
(
pid_t
, 
π_Name_loˇã
,(c⁄° *
ho°
, c⁄° *
«me
))

501 °ru˘ { c⁄° *
ho°
, *
«me
; } 
¨g
 = { host,Çame };

502  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_LOCATE
, &
¨g
).
i
[
LOW
];

505 
RTAI_PROTO
(, 
π_Name_dëach
,(
pid_t
 
pid
))

507 °ru˘ { 
pid
; } 
¨g
 = {Öid };

508  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_DETACH
, &
¨g
).
i
[
LOW
];

511 
RTAI_PROTO
(, 
π_InôTickQueue
,())

513 °ru˘ { 
dummy
; } 
¨g
;

514  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_INITTICKQUEUE
, &
¨g
).
i
[
LOW
];

517 
RTAI_PROTO
(, 
π_Rñó£TickQueue
,())

519 °ru˘ { 
dummy
; } 
¨g
;

520 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_RELEASETICKQUEUE
, &
¨g
);

523 
RTAI_PROTO
(, 
π_qDynAŒoc
,(
n
))

525 °ru˘ { 
n
; } 
¨g
 = {Ç };

526  (Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNALLOC
, &
¨g
).
i
[
LOW
];

529 
RTAI_PROTO
(, 
π_qDynFªe
,(
n
))

531 °ru˘ { 
n
; } 
¨g
 = {Ç };

532  (Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNFREE
, &
¨g
).
i
[
LOW
];

535 
RTAI_PROTO
(
QueueBlock
 *,
π_qDynInô
,(QueueBlock **
q
, (*
fun
)(*, ), *
d©a
, 
evn
 ))

537 
QueueBlock
 *
r
;

539 °ru˘ { 
QueueBlock
 **
q
; (*
fun
)(*, ), *
d©a
; 
evn
; } 
¨g
 = { 0, fun, data,Évn };

540 
r
 = (
QueueBlock
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNINIT
, &
¨g
).
v
[
LOW
];

541 i‡(
q
Ë*q = 
r
;

542  
r
;

545 
RTAI_PROTO
(, 
π_qBlkWaô
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

547 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

548 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKWAIT
, &
¨g
);

551 
RTAI_PROTO
(, 
π_qBlkRïót
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

553 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

554 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKREPEAT
, &
¨g
);

557 
RTAI_PROTO
(, 
π_qBlkSo⁄
,(
QueueBlock
 *
q
))

559 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

560 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKSOON
, &
¨g
);

563 
RTAI_PROTO
(, 
π_qBlkDequeue
,(
QueueBlock
 *
q
))

565 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

566 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKDEQUEUE
, &
¨g
);

569 
RTAI_PROTO
(, 
π_qBlkC™˚l
,(
QueueBlock
 *
q
))

571 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

572 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKCANCEL
, &
¨g
);

575 
RTAI_PROTO
(, 
π_qBlkBef‹e
,(
QueueBlock
 *
cur
, QueueBlock *
nxt
))

577 °ru˘ { 
QueueBlock
 *
cur
, *
nxt
; } 
¨g
 = { cur,Çxt };

578 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKBEFORE
, &
¨g
);

581 
RTAI_PROTO
(, 
π_qBlkA·î
,(
QueueBlock
 *
cur
, QueueBlock *
¥v
))

583 °ru˘ { 
QueueBlock
 *
cur
, *
¥v
; } 
¨g
 = { cur,Örv };

584 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKAFTER
, &
¨g
);

587 
RTAI_PROTO
(
QueueBlock
 *,
π_qBlkUnhook
,(QueueBlock *
q
))

589 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

590  (
QueueBlock
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKUNHOOK
, &
¨g
).
v
[
LOW
];

593 
RTAI_PROTO
(, 
π_qBlkRñó£
,(
QueueBlock
 *
q
))

595 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

596 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKRELEASE
, &
¨g
);

599 
RTAI_PROTO
(, 
π_qBlkCom∂ëe
,(
QueueBlock
 *
q
))

601 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

602 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKCOMPLETE
, &
¨g
);

605 
RTAI_PROTO
(, 
π_qSync
,())

607 °ru˘ { 
dummy
; } 
¨g
;

608  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QSYNC
, &
¨g
).
i
[
LOW
];

611 
RTAI_PROTO
(
pid_t
, 
π_qRe˚ive
,’id_à
èrgë
, *
buf
, 
size_t
 
maxÀn
, size_à*
msgÀn
))

613 °ru˘ { 
èrgë
; *
buf
; 
maxÀn
; 
size_t
 *
msgÀn
; } 
¨g
 = {Åarget, buf, maxlen, msglen };

614  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QRECEIVE
, &
¨g
).
i
[
LOW
];

617 
RTAI_PROTO
(, 
π_qLo›
,())

619 °ru˘ { 
dummy
; } 
¨g
;

620 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QLOOP
, &
¨g
);

623 
RTAI_PROTO
(
RTIME
, 
π_qSãp
,())

625 °ru˘ { 
dummy
; } 
¨g
;

626  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QSTEP
, &
¨g
).
π
;

629 
RTAI_PROTO
(, 
π_qHookFlush
,(
QueueHook
 *
h
))

631 °ru˘ { 
QueueHook
 *
h
; } 
¨g
 = { h };

632 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKFLUSH
, &
¨g
);

635 
RTAI_PROTO
(, 
π_qBlkAtHód
,(
QueueBlock
 *
q
, 
QueueHook
 *
h
))

637 °ru˘ { 
QueueBlock
 *
q
; 
QueueHook
 *
h
; } 
¨g
 = { q, h };

638 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKATHEAD
, &
¨g
);

641 
RTAI_PROTO
(, 
π_qBlkAtTaû
,(
QueueBlock
 *
q
, 
QueueHook
 *
h
))

643 °ru˘ { 
QueueBlock
 *
q
; 
QueueHook
 *
h
; } 
¨g
 = { q, h };

644 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKATTAIL
, &
¨g
);

647 
RTAI_PROTO
(
QueueHook
 *,
π_qHookInô
,(QueueHook **
h
, (*
c
)(*, 
QueueBlock
 *), *
a
))

649 
QueueHook
 *
r
;

650 °ru˘ { 
QueueHook
 **
h
; (*
c
)(*, 
QueueBlock
 *), *
a
;} 
¨g
 = { 0, c,á };

651 
r
 = (
QueueHook
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKINIT
, &
¨g
).
v
[
LOW
];

652 i‡(
h
Ë*h = 
r
;

653  
r
;

656 
RTAI_PROTO
(, 
π_qHookRñó£
,(
QueueHook
 *
h
))

658 °ru˘ { 
QueueHook
 *
h
; } 
¨g
 = { h };

659 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKRELEASE
, &
¨g
);

662 
RTAI_PROTO
(, 
π_qBlkScheduÀ
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

664 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

665 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKSCHEDULE
, &
¨g
);

668 
RTAI_PROTO
(
QueueHook
 *,
π_GëTickQueueHook
,())

670 °ru˘ { 
dummy
; } 
¨g
;

671  (
QueueHook
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTICKQUEUEHOOK
, &
¨g
).
v
[
LOW
];

674 
RTAI_PROTO
(
pid_t
, 
π_vc_ª£rve
,( ))

676 °ru˘ { 
dummy
; } 
¨g
;

677  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_RESERVE
, &
¨g
).
i
[
LOW
];

680 
RTAI_PROTO
(, 
π_vc_©èch
,(
pid_t
 
pid
))

682 °ru˘ { 
pid
; } 
¨g
 = {Öid };

683  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_ATTACH
, &
¨g
).
i
[
LOW
];

686 
RTAI_PROTO
(, 
π_vc_ªÀa£
,(
pid_t
 
pid
))

688 °ru˘ { 
pid
; } 
¨g
 = {Öid };

689  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_RELEASE
, &
¨g
).
i
[
LOW
];

692 #ifde‡
__˝lu•lus


698 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

700 
	st_msgcb
 {

701 
›aque
;

702 } 
	tMSGCB
;

	@/usr/src/rtai/base/include/rtai_nam2num.h

32 #i‚de‡
_RTAI_NAM2NUM_H


33 
	#_RTAI_NAM2NUM_H


	)

35 
	~<πai_ty≥s.h
>

37 #ifde‡
__KERNEL__


39 
	~<löux/˘y≥.h
>

40 
	~<löux/°rög.h
>

41 
	#NAM2NUM_PROTO
(
ty≥
, 
«me
, 
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

45 
	~<˘y≥.h
>

46 
	~<°rög.h
>

47 
	#NAM2NUM_PROTO
 
RTAI_PROTO


	)

51 
	#MAX_NAM2NUM
 4096000003UL

52 

	)

70 
NAM2NUM_PROTO
(, 
«m2num
, (c⁄° *
«me
))

72 
	gªtvÆ
 = 0;

73 
	gc
, 
	gi
;

75 
	gi
 = 0; i < 6; i++) {

76 i‡(!(
	gc
 = 
«me
[
i
])) {

79 i‡(
i¶owî
(
c
)) {

80 
	gc
 += (10 - 'a');

81 } i‡(
isuµî
(
c
)) {

82 
	gc
 += (10 - 'A');

83 } i‡(
isdigô
(
c
)) {

84 
	gc
 -= '0';

86 
	gc
 = 
c
 == '_' ? 36 : c == '@' ? 37 : c == '.' ? 38 : 39;

88 
	gªtvÆ
 = 
ªtvÆ
*40 + 
c
;

90  
	gi
 > 0 ? 
	gªtvÆ
 + 2 : 0xFFFFFFFF;

103 
NAM2NUM_PROTO
(, 
num2«m
, (
num
, *
«me
))

105 
	gc
, 
	gi
, 
	gk
, 
	gq
;

106 i‡(
	gnum
 >
MAX_NAM2NUM
) {

107 
°∫˝y
(
«me
, "|null|", 7);

110 
	gi
 = 5;

111 
	gnum
 -= 2;

112 
	gnum
 && 
	gi
 >= 0) {

113 
q
 = 
num
/40;

114 
	gc
 = 
num
 - 
q
*40;

115 
	gnum
 = 
q
;

116 i‡(
	gc
 < 36) {

117 
	g«me
[
i
--] = 
c
 > 9 ? c + 'A' - 10 : c + '0';

119 
	g«me
[
i
--] = 
c
 == 36 ? '_' : c == 37 ? '@' : c == 38 ? '.' : '$';

122 
	gk
 = 0; 
	gi
 < 5; k++) {

123 
	g«me
[
k
] = 
«me
[++
i
];

125 
	g«me
[
k
] = 0;

	@/usr/src/rtai/base/include/rtai_names.h

19 #i‚de‡
_RTAI_NAMES_H


20 
	#_RTAI_NAMES_H


	)

22 #ifde‡
__˝lu•lus


26 
pid_t
 
π_Name_©èch
(c⁄° *
«me
);

28 
pid_t
 
π_Name_loˇã
(c⁄° *
ho°
,

29 c⁄° *
«me
);

31 
π_Name_dëach
(
pid_t
 
pid
);

33 
π_boom
();

35 
π_°omp
();

37 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_netrpc.h

19 #i‚de‡
_RTAI_NETRPC_H


20 
	#_RTAI_NETRPC_H


	)

22 
	~<πai_c⁄fig.h
>

24 
	~<πai_ªgi°ry.h
>

25 
	~<πai_lxπ.h
>

26 
	~<πai_£m.h
>

27 
	~<πai_mbx.h
>

28 
	~<πai_msg.h
>

30 
	#MAX_STUBS
 20

	)

31 
	#MAX_SOCKS
 20

	)

32 
	#MAX_MSG_SIZE
 1500

	)

34 
	#NET_RPC_EXT
 0

	)

36 
	#NETRPC_BASEPORT
 5000

	)

38 
	#PORT_SHF
 1

	)

39 
	#PORT_INC
 1

	)

40 
	#PORT_MSK
 ((1 << 
PORT_SHF
Ë- 1)

	)

42 
	#MACH_SIZE
(
p‹t
Ë((’‹tË& 
PORT_MSK
Ë? 64 : 32)

	)

47 
	#UW1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 19Ë| (((szË& 0x7Ë<< 22))

	)

48 
	#UW2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 25Ë| (((szË& 0x7Ë<< 28))

	)

51 
	#UR1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 3Ë| (((szË& 0x7Ë<< 6))

	)

52 
	#UR2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 9Ë| (((szË& 0x7Ë<< 12))

	)

54 
	#SIZARG
 (
¨g
)

	)

56 
	#PACKPORT
(
p‹t
, 
ext
, 
fun
, 
timed
Ë((’‹tË<< 18Ë| (—imedË<< 13Ë| (”xtË<< 8Ë| (fun))

	)

58 
	#PORT
(
i
Ë((iË>> 18)

	)

59 
	#FUN
(
i
Ë((iË& 0xFF)

	)

60 
	#EXT
(
i
Ë(((iË>> 8Ë& 0x1F)

	)

61 
	#TIMED
(
i
Ë(((iË>> 13Ë& 0x1F)

	)

67 
	#SYNC_NET_RPC
 0xFF

68 

	)

69 
	#PRT_REQ
 1

	)

70 
	#PRT_SRV
 2

	)

71 
	#PRT_RTR
 3

	)

72 
	#PRT_RCV
 4

	)

73 
	#RPC_REQ
 5

	)

74 
	#RPC_SRV
 6

	)

75 
	#RPC_RTR
 7

	)

76 
	#RPC_RCV
 8

	)

78 
	#ADR_CNV_MSK
 (0xFFFFFFFCUL)

	)

80 
	#OWNER
(
node
, 
èsk
) \

81 –((()(
node
)) << 32) | \

82 ((()(
èsk
)Ë& 
ADR_CNV_MSK
Ë)

	)

84 
	#TSK_FRM_WNR
(
i
Ë((iË& 0xFFFFFFFF);

	)

86 
	#WDW
 3

	)

87 
	#WDWMSK
 ((1 << 
WDW
Ë- 1)

	)

89 
	#SINT
 1

	)

90 
	#UINT
 2

	)

91 
	#VADR
 3

	)

92 
	#RTIM
 4

	)

94 
	#PARTYPES1
(
a
Ë◊)

	)

95 
	#PARTYPES2
(
a
, 
b
Ë(((bË<< 
WDW
Ë| (a))

	)

96 
	#PARTYPES3
(
a
, 
b
, 
c
Ë(((cË<< 2*
WDW
Ë| ((bË<< WDWË| (a))

	)

97 
	#PARTYPES4
(
a
, 
b
, 
c
, 
d
Ë(((dË<< 3*
WDW
Ë| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

98 
	#PARTYPES5
(
a
, 
b
, 
c
, 
d
, 
e
Ë((”Ë<< 4*
WDW
Ë| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

99 
	#PARTYPES6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ë(((fË<< 5*
WDW
Ë| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

100 
	#PARTYPES7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ë(((gË<< 6*
WDW
Ë| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

101 
	#PARTYPES8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ë(((hË<< 7*
WDW
Ë| ((gË<< 6*WDWË| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

102 
	#PARTYPES9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ë(((iË<< 8*
WDW
Ë| ((hË<< 7*WDWË| ((gË<< 6*WDWË| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

105 #i‚de‡
KERNEL_64_ADDRESS_OFFSET


106 
	#KERNEL_64_ADDRESS_OFFSET


	)

107 
	gkadr_of°
[] =

109 
ölöe
 
	$ª£t_kadr
(
vÆ
)

111  (
vÆ
 & 
ADR_CNV_MSK
Ë| 
kadr_of°
[val & 0x3];

112 
	}
}

115 
ölöe
 *
	$RTAI_LXRT
(
p‹t
, 
πai_lxπ_t
 
ªtvÆ
)

117 i‡((Ë=4 && (
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

118 
i
;

119 
i
 = 0; i < 3; i++) {

120 i‡((
ªtvÆ
.
π
 & 0xFF0000000000ULLË=(
kadr_of°
[
i
] & 0xFF0000000000ULL)) {

121 
ªtvÆ
.
π
 |
i
;

122  
ªtvÆ
.
v
[
LOW
];

125  (*)
RTE_OBJINV
;

127  
ªtvÆ
.
v
[
LOW
];

128 
	}
}

130 
	#RT_NET_RPC
(
p‹t
, 
ªtvÆ
Ë
	`RTAI_LXRT
’‹t, (
πai_lxπ_t
ÏëvÆ)

	)

132 
	#RT_NET_ADR
(
p‹t
, 
adr
) \

133 
	`RTAI_LXRT
(
p‹t
, (
πai_lxπ_t
)(()(
adr
)))

	)

135 #ifde‡
__KERNEL__


137 
	~<πai_sched.h
>

139 #ifde‡
__˝lu•lus


143 
__πai_√åpc_öô
();

145 
__πai_√åpc_exô
();

147 
RTAI_SYSCALL_MODE
 
_π_√t_Ωc
(
fun_ext_timed
,

148 
ty≥
,

149 *
¨gs
,

150 
¨gsize
,

151 
•a˚
,

152 
∑πy≥s
);

154 
	#π_√t_Ωc
(
fun_ext_timed
, 
ty≥
, 
¨gs
, 
¨gsize
, 
•a˚
, 
∑πy≥s
) \

155 ({ 
πai_lxπ_t
 
ªtvÆ
;ÑëvÆ.
π
 = 
	`_π_√t_Ωc
(
fun_ext_timed
, 
ty≥
, 
¨gs
, 
¨gsize
, 
•a˚
, 
∑πy≥s
);ÑëvÆ; })

	)

158 
RTAI_SYSCALL_MODE
 
π_£t_√åpc_timeout
–
p‹t
, 
RTIME
 
timeout
);

160 
RTAI_SYSCALL_MODE
 
π_£nd_ªq_ªl_p‹t
(
node
,

161 
p‹t
,

162 
id
,

163 
MBX
 *
mbx
,

164 
h¨d
);

166 
RTAI_SYSCALL_MODE
 
ddn2∆
(c⁄° *
ddn
);

168 
RTAI_SYSCALL_MODE
 
π_£t_this_node
(c⁄° *
ddn
,

169 
node
,

170 
h¨d
);

172 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_föd_asgn_°ub
(
ow√r
,

173 
asgn
);

175 
RTAI_SYSCALL_MODE
 
π_ªl_°ub
(
ow√r
);

177 
RTAI_SYSCALL_MODE
 
π_waôög_ªtu∫
(
node
,

178 
p‹t
);

180 
π_gë_√t_Ωc_ªt
(
MBX
 *
mbx
,

181 *
ªtvÆ
,

182 *
msg1
,

183 *
msgÀn1
,

184 *
msg2
,

185 *
msgÀn2
,

186 
RTIME
 
timeout
,

187 
ty≥
);

189 
ölöe
 
π_sync_√t_Ωc
(
node
, 
p‹t
)

191 i‡(
node
) {

192 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

193  
π_√t_Ωc
(
PACKPORT
(
abs
(
p‹t
), 
NET_RPC_EXT
, 
SYNC_NET_RPC
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
i
[
LOW
];

198 
ölöe
 *
RT_gë_adr
(
node
, 
p‹t
, c⁄° *
¢ame
)

200 i‡(
node
) {

201 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(
¢ame
) };

202  
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
GET_ADR
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)));

204  
π_gë_adr
(
«m2num
(
¢ame
));

207 
ölöe
 
RTIME
 
RT_gë_time_ns
(
node
, 
p‹t
)

209 i‡(
node
) {

210 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

211  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

213  
π_gë_time_ns
();

216 
ölöe
 
RTIME
 
RT_gë_time_ns_˝uid
(
node
, 
p‹t
, 
˝uid
)

218 i‡(
node
) {

219 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

220  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS_CPUID
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

222  
π_gë_time_ns_˝uid
(
˝uid
);

225 
ölöe
 
RTIME
 
RT_gë_˝u_time_ns
(
node
, 
p‹t
)

227 i‡(
node
) {

228 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

229  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_CPU_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

231  
π_gë_˝u_time_ns
();

234 
ölöe
 
RT_èsk_su•íd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

236 i‡(
node
) {

237 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

238  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SUSPEND
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

240  
π_èsk_su•íd
(
èsk
);

243 
ölöe
 
RT_èsk_ªsume
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

245 i‡(
node
) {

246 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

247  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RESUME
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

249  
π_èsk_ªsume
(
èsk
);

252 
ölöe
 
RT_¶ìp
(
node
, 
p‹t
, 
RTIME
 
dñay
)

254 i‡(
node
) {

255 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

256 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP
, 1), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
RTIM
));

259 
π_¶ìp
(
«no2cou¡
(
dñay
));

262 
ölöe
 
RT_¶ìp_u¡û
(
node
, 
p‹t
, 
RTIME
 
time
)

264 i‡(
node
) {

265 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

266 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP_UNTIL
, 1), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
RTIM
));

269 
π_¶ìp_u¡û
(
«no2cou¡
(
time
));

272 #i‡
CONFIG_RTAI_SEM


274 
ölöe
 
SEM
 *
RT_ty≥d_«med_£m_öô
(
node
, 
p‹t
, c⁄° *
£m_«me
, 
vÆue
, 
ty≥
)

276 i‡(
node
) {

277 °ru˘ { 
£m_«me
; 
vÆue
; 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
(£m_«me), vÆue,Åy≥, 
NULL
 };

278  (
SEM
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
NAMED_SEM_INIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
SINT
, SINT)));

280  
π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
ty≥
);

283 
ölöe
 
RT_«med_£m_dñëe
(
node
, 
p‹t
, 
SEM
 *
£m
)

285 i‡(
node
) {

286 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

287  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

289  
π_«med_£m_dñëe
(
£m
);

292 
ölöe
 
RT_£m_sig«l
(
node
, 
p‹t
, 
SEM
 *
£m
)

294 i‡(
node
) {

295 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

296  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_SIGNAL
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

298  
π_£m_sig«l
(
£m
);

301 
ölöe
 
RT_£m_brﬂdˇ°
(
node
, 
p‹t
, 
SEM
 *
£m
)

303 i‡(
node
) {

304 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

305  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_BROADCAST
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

307  
π_£m_brﬂdˇ°
(
£m
);

310 
ölöe
 
RT_£m_waô
(
node
, 
p‹t
, 
SEM
 *
£m
)

312 i‡(
node
) {

313 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

314  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

316  
π_£m_waô
(
£m
);

319 
ölöe
 
RT_£m_waô_if
(
node
, 
p‹t
, 
SEM
 *
£m
)

321 i‡(
node
) {

322 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

323  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_IF
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

325  
π_£m_waô_if
(
£m
);

328 
ölöe
 
RT_£m_waô_u¡û
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
time
)

330 i‡(
node
) {

331 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

332  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_UNTIL
, 2), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
RTIM
)).
i
[
LOW
];

334  
π_£m_waô_u¡û
(
£m
, 
«no2cou¡
(
time
));

337 
ölöe
 
RT_£m_waô_timed
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
dñay
)

339 i‡(
node
) {

340 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

341  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_TIMED
, 2), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
RTIM
)).
i
[
LOW
];

343  
π_£m_waô_timed
(
£m
, 
«no2cou¡
(
dñay
));

346 #ifde‡
CONFIG_RTAI_RT_POLL


348 
ölöe
 
RT_pﬁl_4to8
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

350 
i
;

351 
ªtvÆ
;

352 
	sπ_pﬁl_Œs
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

353 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_Œs
),Åimeout };

354 
i
 = 0; i < 
ƒ
; i++) {

355 
pdß
[
i
].
wh©
 = ()
pdßö
[i].what;

356 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

358 
ªtvÆ
 = 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

359 
i
 = 0; i < 
ƒ
; i++) {

360 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

361 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

363  
ªtvÆ
;

366 
ölöe
 
RT_pﬁl_8to4
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

368 
i
;

369 
ªtvÆ
;

370 
	sπ_pﬁl_is
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

371 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_is
),Åimeout };

372 
i
 = 0; i < 
ƒ
; i++) {

373 
pdß
[
i
].
wh©
 = ()()
pdßö
[i].what;

374 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

376 
ªtvÆ
 = 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

377 
i
 = 0; i < 
ƒ
; i++) {

378 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

379 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

381  
ªtvÆ
;

384 
ölöe
 
RT_pﬁl
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

386 i‡(
node
) {

387 i‡((Ë=4 && (
abs
(
p‹t
Ë& 
PORT_MSK
)) {

388  
RT_pﬁl_4to8
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

389 } i‡((Ë=8 && !(
abs
(
p‹t
Ë& 
PORT_MSK
)) {

390  
RT_pﬁl_8to4
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

392 °ru˘ { 
π_pﬁl_s
 *
pdß1
; π_pﬁl_†*
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(rt_poll_s),Åimeout };

393  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

396  
π_pﬁl
(
pdß
, 
ƒ
, 
«no2cou¡
(
timeout
));

403 #i‡
CONFIG_RTAI_MSG


405 
ölöe
 
RT_TASK
 *
RT_£nd
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
)

407 i‡(
node
) {

408 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

409  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDMSG
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
UINT
)));

411  
π_£nd
(
èsk
, 
msg
);

414 
ölöe
 
RT_TASK
 *
RT_£nd_if
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
)

416 i‡(
node
) {

417 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

418  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_IF
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
UINT
)));

420  
π_£nd_if
(
èsk
, 
msg
);

423 
ölöe
 
RT_TASK
 *
RT_£nd_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, 
RTIME
 
time
)

425 i‡(
node
) {

426 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

427  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_UNTIL
, 3), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, 
RTIM
)));

429  
π_£nd_u¡û
(
èsk
, 
msg
, 
«no2cou¡
(
time
));

432 
ölöe
 
RT_TASK
 *
RT_£nd_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, 
RTIME
 
dñay
)

434 i‡(
node
) {

435 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

436  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_TIMED
, 3), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, 
RTIM
)));

438  
π_£nd_timed
(
èsk
, 
msg
, 
«no2cou¡
(
dñay
));

441 
ölöe
 
RT_TASK
 *
RT_ª˚ive
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

443 i‡(!
èsk
 || !
node
) {

444  
π_ª˚ive
(
èsk
, 
msg
);

446  
π_ª˚ive
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

449 
ölöe
 
RT_TASK
 *
RT_ª˚ive_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

451 i‡(!
èsk
 || !
node
) {

452  
π_ª˚ive_if
(
èsk
, 
msg
);

454  
π_ª˚ive_if
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

457 
ölöe
 
RT_TASK
 *
RT_ª˚ive_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
RTIME
 
time
)

459 i‡(!
èsk
 || !
node
) {

460  
π_ª˚ive_u¡û
(
èsk
, 
msg
, 
«no2cou¡
(
time
));

462  
π_ª˚ive_u¡û
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
«no2cou¡
(
time
)) ?Åask : 0;

465 
ölöe
 
RT_TASK
 *
RT_ª˚ive_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
RTIME
 
dñay
)

467 i‡(!
èsk
 || !
node
) {

468  
π_ª˚ive_timed
(
èsk
, 
msg
, 
«no2cou¡
(
dñay
));

470  
π_ª˚ive_timed
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
«no2cou¡
(
dñay
)) ?Åask : 0;

473 
ölöe
 
RT_TASK
 *
RT_Ωc
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
)

475 i‡(
node
) {

476 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

477  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCMSG
, 0), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

479  
π_Ωc
(
èsk
, 
msg
, 
ªt
);

482 
ölöe
 
RT_TASK
 *
RT_Ωc_if
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
)

484 i‡(
node
) {

485 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg };

486  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_IF
, 0), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

488  
π_Ωc_if
(
èsk
, 
msg
, 
ªt
);

491 
ölöe
 
RT_TASK
 *
RT_Ωc_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
, 
RTIME
 
time
)

493 i‡(
node
) {

494 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Ñet,Åime };

495  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_UNTIL
, 4), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

497  
π_Ωc_u¡û
(
èsk
, 
msg
, 
ªt
, 
«no2cou¡
(
time
));

500 
ölöe
 
RT_TASK
 *
RT_Ωc_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
, 
RTIME
 
dñay
)

502 i‡(
node
) {

503 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg,Ñet, delay };

504  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_TIMED
, 4), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

506  
π_Ωc_timed
(
èsk
, 
msg
, 
ªt
, 
«no2cou¡
(
dñay
));

509 
ölöe
 
RT_i§pc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

511 i‡(
node
) {

512 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

513  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
ISRPC
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

515  
π_i§pc
(
èsk
);

518 
ölöe
 
RT_TASK
 *
RT_ªtu∫
(
node
, 
p‹t
, RT_TASK *
èsk
, 
ªsu…
)

520 i‡(!
èsk
 || !
node
) {

521  
π_ªtu∫
(
èsk
, 
ªsu…
);

523  
π_ªtu∫
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
ªsu…
) ?Åask : 0;

526 
ölöe
 
RT_TASK
 *
RT_evdΩ
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

528 i‡(!
èsk
 || !
node
) {

529  
π_evdΩ
(
èsk
, 
msg
);

531  
π_evdΩ
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

534 
ölöe
 
RT_TASK
 *
RT_Ωcx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

536 i‡(
node
) {

537 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

538  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX
, 0), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT)));

540  
π_Ωcx
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

543 
ölöe
 
RT_TASK
 *
RT_Ωcx_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

545 i‡(
node
) {

546 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

547  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_IF
, 0), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT)));

549  
π_Ωcx_if
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

552 
ölöe
 
RT_TASK
 *
RT_Ωcx_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
)

554 i‡(
node
) {

555 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

556  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_UNTIL
, 6), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
)));

558  
π_Ωcx_u¡û
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
«no2cou¡
(
time
));

561 
ölöe
 
RT_TASK
 *
RT_Ωcx_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
)

563 i‡(
node
) {

564 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

565  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_TIMED
, 6), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
)));

567  
π_Ωcx_timed
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
«no2cou¡
(
dñay
));

570 
ölöe
 
RT_TASK
 *
RT_£ndx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

572 i‡(
node
) {

573 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

574  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

576  
π_£ndx
(
èsk
, 
msg
, 
size
);

579 
ölöe
 
RT_TASK
 *
RT_£ndx_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

581 i‡(
node
) {

582 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

583  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_IF
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

585  
π_£ndx_if
(
èsk
, 
msg
, 
size
);

588 
ölöe
 
RT_TASK
 *
RT_£ndx_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, 
RTIME
 
time
)

590 i‡(
node
) {

591 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

592  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_UNTIL
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

594  
π_£ndx_u¡û
(
èsk
, 
msg
, 
size
, 
«no2cou¡
(
time
));

597 
ölöe
 
RT_TASK
 *
RT_£ndx_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
)

599 i‡(
node
) {

600 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

601  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_TIMED
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

603  
π_£ndx_timed
(
èsk
, 
msg
, 
size
, 
«no2cou¡
(
dñay
));

606 
ölöe
 
RT_TASK
 *
RT_ªtu∫x
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

608 i‡(!
èsk
 || !
node
) {

609  
π_ªtu∫x
(
èsk
, 
msg
, 
size
);

611  
π_ªtu∫x
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
) ?Åask : 0;

614 
ölöe
 
RT_TASK
 *
RT_evdΩx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

616 i‡(!
èsk
 || !
node
) {

617  
π_evdΩx
(
èsk
, 
msg
, 
size
, 
Àn
);

619  
π_evdΩx
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

622 
ölöe
 
RT_TASK
 *
RT_ª˚ivex
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

624 i‡(!
èsk
 || !
node
) {

625  
π_ª˚ivex
(
èsk
, 
msg
, 
size
, 
Àn
);

627  
π_ª˚ivex
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

630 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

632 i‡(!
èsk
 || !
node
) {

633  
π_ª˚ivex_if
(
èsk
, 
msg
, 
size
, 
Àn
);

635  
π_ª˚ivex_if
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

638 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
)

640 i‡(!
èsk
 || !
node
) {

641  
π_ª˚ivex_u¡û
(
èsk
, 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
time
));

643  
π_ª˚ivex_u¡û
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
time
)) ?Åask : 0;

646 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
)

648 i‡(!
èsk
 || !
node
) {

649  
π_ª˚ivex_timed
(
èsk
, 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
dñay
));

651  
π_ª˚ivex_timed
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
dñay
)) ?Åask : 0;

656 #i‡
CONFIG_RTAI_MBX


658 
ölöe
 
MBX
 *
RT_ty≥d_«med_mbx_öô
(
node
, 
p‹t
, c⁄° *
mbx_«me
, 
size
, 
qty≥
)

660 i‡(
node
) {

661 °ru˘ { 
mbx_«me
; 
size
; 
qy≥
; } 
¨g
 = { 
«m2num
(mbx_«me), size, 
qty≥
 };

662  (
MBX
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
NAMED_MBX_INIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
UINT
, UINT, UINT)));

664  
π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

667 
ölöe
 
RT_«med_mbx_dñëe
(
node
, 
p‹t
, 
MBX
 *
mbx
)

669 i‡(
node
) {

670 °ru˘ { 
MBX
 *
mbx
; } 
¨g
 = { mbx };

671  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

673  
π_«med_mbx_dñëe
(
mbx
);

676 
ölöe
 
RT_mbx_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

678 i‡(
node
) {

679 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

680  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

682  
π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
);

685 
ölöe
 
RT_mbx_£nd_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

687 i‡(
node
) {

688 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

689  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_WP
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

691  
π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
);

694 
ölöe
 
RT_mbx_£nd_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

696 i‡(
node
) {

697 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

698  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_IF
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

700  
π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
);

703 
ölöe
 
RT_mbx_ovrwr_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

705 i‡(
node
) {

706 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

707  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_OVRWR_SEND
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

709  
π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
);

712 
ölöe
 
RT_mbx_£nd_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

714 i‡(
node
) {

715 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

716  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_UNTIL
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

718  
π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
time
));

721 
ölöe
 
RT_mbx_£nd_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

723 i‡(
node
) {

724 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

725  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_TIMED
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

727  
π_mbx_£nd_timed
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
dñay
));

730 
ölöe
 
RT_mbx_evdΩ
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

732 i‡(
node
) {

733 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

734  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_EVDRP
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

736  
π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
);

739 
ölöe
 
RT_mbx_ª˚ive
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

741 i‡(
node
) {

742 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

743  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

745  
π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
);

748 
ölöe
 
RT_mbx_ª˚ive_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

750 i‡(
node
) {

751 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

752  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_WP
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

754  
π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
);

757 
ölöe
 
RT_mbx_ª˚ive_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

759 i‡(
node
) {

760 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

761  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_IF
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

763  
π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
);

766 
ölöe
 
RT_mbx_ª˚ive_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

768 i‡(
node
) {

769 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

770  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_UNTIL
, 4), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

772  
π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
time
));

775 
ölöe
 
RT_mbx_ª˚ive_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

777 i‡(
node
) {

778 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

779  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_TIMED
, 4), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

781  
π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
dñay
));

786 #ifde‡
__˝lu•lus


792 
	~<°dlib.h
>

794 
	#NET_RPC_IDX
 0

	)

796 
	#SIZARGS
 (
¨gs
)

	)

798 
ölöe
 
	$π_£nd_ªq_ªl_p‹t
(
node
, 
p‹t
, 
id
, 
MBX
 *
mbx
, 
h¨d
)

800 °ru˘ { 
node
, 
p‹t
; 
id
; 
MBX
 *
mbx
; 
h¨d
; } 
¨gs
 = {Çode,Öort, id, mbx, hard };

801  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SEND_REQ_REL_PORT
, &
¨gs
).
i
[
LOW
];

802 
	}
}

804 
ölöe
 
	$π_£t_√åpc_timeout
(
p‹t
, 
RTIME
 
timeout
)

806 °ru˘ { 
p‹t
; 
RTIME
 
timeout
; } 
¨gs
 = {Öort,Åimeout };

807  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SET_NETRPC_TIMEOUT
, &
¨gs
).
i
[
LOW
];

808 
	}
}

810 
ölöe
 
	$ddn2∆
(c⁄° *
ddn
)

812 °ru˘ { c⁄° *
ddn
; } 
¨gs
 = { ddn };

813  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
DDN2NL
, &
¨gs
).
i
[
LOW
];

814 
	}
}

816 
ölöe
 
	$π_£t_this_node
(c⁄° *
ddn
, 
node
, 
h¨d
)

818 °ru˘ { c⁄° *
ddn
; 
node
; 
h¨d
; } 
¨gs
 = { ddn,Çode, hard };

819  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SET_THIS_NODE
, &
¨gs
).
i
[
LOW
];

820 
	}
}

822 
ölöe
 
RT_TASK
 *
	$π_föd_asgn_°ub
(
ow√r
, 
asgn
)

824 °ru˘ { 
ow√r
; 
asgn
; } 
¨gs
 = { owner,ásgn };

825  (
RT_TASK
 *)
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
FIND_ASGN_STUB
, &
¨gs
).
v
[
LOW
];

826 
	}
}

828 
ölöe
 
	$π_ªl_°ub
(
ow√r
)

830 °ru˘ { 
ow√r
; } 
¨gs
 = { owner };

831  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
REL_STUB
, &
¨gs
).
i
[
LOW
];

832 
	}
}

834 
ölöe
 
	$π_waôög_ªtu∫
(
node
, 
p‹t
)

836 °ru˘ { 
node
; 
p‹t
; } 
¨gs
 = {Çode,Öort };

837  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
WAITING_RETURN
, &
¨gs
).
i
[
LOW
];

838 
	}
}

840 
ölöe
 
	$π_sync_√t_Ωc
(
node
, 
p‹t
)

842 i‡(
node
) {

843 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

844 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
	`abs
(
p‹t
), 
NET_RPC_EXT
, 
SYNC_NET_RPC
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

845  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

848 
	}
}

850 
ölöe
 *
	$RT_gë_adr
(
node
, 
p‹t
, c⁄° *
¢ame
)

852 i‡(
node
) {

853 °ru˘ { 
«me
; } 
¨g
 = { 
	`«m2num
(
¢ame
) };

854 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_ADR
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

856  
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

858  
	`π_gë_adr
(
	`«m2num
(
¢ame
));

859 
	}
}

861 
ölöe
 
RTIME
 
	$RT_gë_time_ns
(
node
, 
p‹t
)

863 i‡(
node
) {

864 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

865 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

866  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

868  
	`π_gë_time_ns
();

869 
	}
}

871 
ölöe
 
RTIME
 
	$RT_gë_time_ns_˝uid
(
node
, 
p‹t
, 
˝uid
)

873 i‡(
node
) {

874 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

875 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS_CPUID
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

876  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

878  
	`π_gë_time_ns_˝uid
(
˝uid
);

879 
	}
}

881 
ölöe
 
RTIME
 
	$RT_gë_˝u_time_ns
(
node
, 
p‹t
)

883 i‡(
node
) {

884 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

885 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_CPU_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

886  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

888  
	`π_gë_˝u_time_ns
();

889 
	}
}

891 
ölöe
 
	$RT_èsk_su•íd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

893 i‡(
node
) {

894 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

895 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SUSPEND
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

896 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

899 
	`π_èsk_su•íd
(
èsk
);

900 
	}
}

902 
ölöe
 
	$RT_èsk_ªsume
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

904 i‡(
node
) {

905 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

906 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RESUME
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

907 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

910 
	`π_èsk_ªsume
(
èsk
);

911 
	}
}

913 
ölöe
 
	$RT_¶ìp
(
node
, 
p‹t
, 
RTIME
 
dñay
)

915 i‡(
node
) {

916 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

917 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP
, 1), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
RTIM
) };

918 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

921 
	`π_¶ìp
(
	`«no2cou¡
(
dñay
));

922 
	}
}

924 
ölöe
 
	$RT_¶ìp_u¡û
(
node
, 
p‹t
, 
RTIME
 
time
)

926 i‡(
node
) {

927 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

928 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP_UNTIL
, 1), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
RTIM
) };

929 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

932 
	`π_¶ìp
(
	`«no2cou¡
(
time
));

933 
	}
}

935 #i‡
CONFIG_RTAI_SEM


937 
ölöe
 
SEM
 *
	$RT_ty≥d_«med_£m_öô
(
node
, 
p‹t
, c⁄° *
£m_«me
, 
vÆue
, 
ty≥
)

939 i‡(
node
) {

940 °ru˘ { 
£m_«me
; 
vÆue
; 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
	`«m2num
(£m_«me), vÆue,Åy≥, 
NULL
 };

941 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_INIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
SINT
, SINT) };

942  (
SEM
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

944  
	`π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
ty≥
);

945 
	}
}

947 
ölöe
 
	$RT_«med_£m_dñëe
(
node
, 
p‹t
, 
SEM
 *
£m
)

949 i‡(
node
) {

950 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

951 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

952  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

954  
	`π_«med_£m_dñëe
(
£m
);

955 
	}
}

957 
ölöe
 
	$RT_£m_sig«l
(
node
, 
p‹t
, 
SEM
 *
£m
)

959 i‡(
node
) {

960 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

961 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_SIGNAL
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

962  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

964  
	`π_£m_sig«l
(
£m
);

965 
	}
}

967 
ölöe
 
	$RT_£m_brﬂdˇ°
(
node
, 
p‹t
, 
SEM
 *
£m
)

969 i‡(
node
) {

970 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

971 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_BROADCAST
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

972  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

974  
	`π_£m_brﬂdˇ°
(
£m
);

975 
	}
}

977 
ölöe
 
	$RT_£m_waô
(
node
, 
p‹t
, 
SEM
 *
£m
)

979 i‡(
node
) {

980 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

981 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

982  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

984  
	`π_£m_waô
(
£m
);

985 
	}
}

987 
ölöe
 
	$RT_£m_waô_if
(
node
, 
p‹t
, 
SEM
 *
£m
)

989 i‡(
node
) {

990 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

991 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_IF
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

992  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

994  
	`π_£m_waô_if
(
£m
);

995 
	}
}

997 
ölöe
 
	$RT_£m_waô_u¡û
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
time
)

999 i‡(
node
) {

1000 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

1001 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_UNTIL
, 2), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
RTIM
) };

1002  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1004  
	`π_£m_waô_u¡û
(
£m
, 
	`«no2cou¡
(
time
));

1005 
	}
}

1007 
ölöe
 
	$RT_£m_waô_timed
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
dñay
)

1009 i‡(
node
) {

1010 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

1011 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_TIMED
, 2), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
RTIM
) };

1012  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1014  
	`π_£m_waô_timed
(
£m
, 
	`«no2cou¡
(
dñay
));

1015 
	}
}

1017 #ifde‡
CONFIG_RTAI_RT_POLL


1019 
ölöe
 
	$RT_pﬁl_4to8
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

1021 
i
;

1022 
ªtvÆ
;

1023 
	sπ_pﬁl_Œs
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

1024 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_Œs
),Åimeout };

1025 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
) };

1026 
i
 = 0; i < 
ƒ
; i++) {

1027 
pdß
[
i
].
wh©
 = ()
pdßö
[i].what;

1028 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

1030 
ªtvÆ
 = 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1031 
i
 = 0; i < 
ƒ
; i++) {

1032 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

1033 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

1035  
ªtvÆ
;

1036 
	}
}

1038 
ölöe
 
	$RT_pﬁl_8to4
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

1040 
i
;

1041 
ªtvÆ
;

1042 
	sπ_pﬁl_is
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

1043 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_is
),Åimeout };

1044 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1045 
i
 = 0; i < 
ƒ
; i++) {

1046 
pdß
[
i
].
wh©
 = ()()
pdßö
[i].what;

1047 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

1049 
ªtvÆ
 = 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1050 
i
 = 0; i < 
ƒ
; i++) {

1051 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

1052 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

1054  
ªtvÆ
;

1055 
	}
}

1057 
ölöe
 
	$RT_pﬁl
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

1059 i‡(
node
) {

1060 i‡((Ë=4 && (
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

1061  
	`RT_pﬁl_4to8
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

1062 } i‡((Ë=8 && !(
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

1063  
	`RT_pﬁl_8to4
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

1065 °ru˘ { 
π_pﬁl_s
 *
pdß1
; π_pﬁl_†*
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(rt_poll_s),Åimeout };

1066 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, VADR, 
UINT
, 
RTIM
) };

1067  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1070  
	`π_pﬁl
(
pdß
, 
ƒ
, 
	`«no2cou¡
(
timeout
));

1071 
	}
}

1077 #i‡
CONFIG_RTAI_MSG


1079 
ölöe
 
RT_TASK
 *
	$RT_£nd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
)

1081 i‡(
node
) {

1082 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

1083 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDMSG
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
UINT
) };

1084  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1086  
	`π_£nd
(
èsk
, 
msg
);

1087 
	}
}

1089 
ölöe
 
RT_TASK
 *
	$RT_£nd_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
)

1091 i‡(
node
) {

1092 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

1093 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_IF
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
UINT
) };

1094  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1096  
	`π_£nd_if
(
èsk
, 
msg
);

1097 
	}
}

1099 
ölöe
 
RT_TASK
 *
	$RT_£nd_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
time
)

1101 i‡(
node
) {

1102 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

1103 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_UNTIL
, 3), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, 
RTIM
) };

1104  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1106  
	`π_£nd_u¡û
(
èsk
, 
msg
, 
	`«no2cou¡
(
time
));

1107 
	}
}

1109 
ölöe
 
RT_TASK
 *
	$RT_£nd_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
dñay
)

1111 i‡(
node
) {

1112 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

1113 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_TIMED
, 3), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, 
RTIM
) };

1114  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1116  
	`π_£nd_timed
(
èsk
, 
msg
, 
	`«no2cou¡
(
dñay
));

1117 
	}
}

1119 
ölöe
 
RT_TASK
 *
	$RT_evdΩ
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1121 i‡(!
èsk
 || !
node
) {

1122  
	`π_evdΩ
(
èsk
, 
msg
);

1124  
	`π_evdΩ
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1125 
	}
}

1127 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1129 i‡(!
èsk
 || !
node
) {

1130  
	`π_ª˚ive
(
èsk
, 
msg
);

1132  
	`π_ª˚ive
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1133 
	}
}

1135 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1137 i‡(!
èsk
 || !
node
) {

1138  
	`π_ª˚ive_if
(
èsk
, 
msg
);

1140  
	`π_ª˚ive_if
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1141 
	}
}

1143 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
time
)

1145 i‡(!
èsk
 || !
node
) {

1146  
	`π_ª˚ive_u¡û
(
èsk
, 
msg
, 
	`«no2cou¡
(
time
));

1148  
	`π_ª˚ive_u¡û
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
	`«no2cou¡
(
time
)) ?Åask : 0;

1149 
	}
}

1151 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
dñay
)

1153 i‡(!
èsk
 || !
node
) {

1154  
	`π_ª˚ive_timed
(
èsk
, 
msg
, 
	`«no2cou¡
(
dñay
));

1156  
	`π_ª˚ive_timed
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
	`«no2cou¡
(
dñay
)) ?Åask : 0;

1157 
	}
}

1159 
ölöe
 
RT_TASK
 *
	$RT_Ωc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
)

1161 i‡(
node
) {

1162 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

1163 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCMSG
, 0), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1164  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1166  
	`π_Ωc
(
èsk
, 
msg
, 
ªt
);

1167 
	}
}

1169 
ölöe
 
RT_TASK
 *
	$RT_Ωc_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
)

1171 i‡(
node
) {

1172 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

1173 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_IF
, 0), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1174  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1176  
	`π_Ωc_if
(
èsk
, 
msg
, 
ªt
);

1177 
	}
}

1179 
ölöe
 
RT_TASK
 *
	$RT_Ωc_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
, 
RTIME
 
time
)

1181 i‡(
node
) {

1182 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Ñet,Åime };

1183 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_UNTIL
, 4), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1184  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1186  
	`π_Ωc_u¡û
(
èsk
, 
msg
, 
ªt
, 
	`«no2cou¡
(
time
));

1187 
	}
}

1189 
ölöe
 
RT_TASK
 *
	$RT_Ωc_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
, 
RTIME
 
dñay
)

1191 i‡(
node
) {

1192 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg,Ñet, delay };

1193 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_TIMED
, 4), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1194  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1196  
	`π_Ωc_timed
(
èsk
, 
msg
, 
ªt
, 
	`«no2cou¡
(
dñay
));

1197 
	}
}

1199 
ölöe
 
	$RT_i§pc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

1201 i‡(
node
) {

1202 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1203 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
ISRPC
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

1204  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1206  
	`π_i§pc
(
èsk
);

1207 
	}
}

1209 
ölöe
 
RT_TASK
 *
	$RT_ªtu∫
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
ªsu…
)

1212 i‡(!
èsk
 || !
node
) {

1213  
	`π_ªtu∫
(
èsk
, 
ªsu…
);

1215  
	`π_ªtu∫
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
ªsu…
) ?Åask : 0;

1216 
	}
}

1218 
ölöe
 
RT_TASK
 *
	$RT_Ωcx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1220 i‡(
node
) {

1221 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

1222 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX
, 0), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT) };

1223  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1225  
	`π_Ωcx
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

1226 
	}
}

1228 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1230 i‡(
node
) {

1231 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

1232 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_IF
, 0), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT) };

1233  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1235  
	`π_Ωcx_if
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

1236 
	}
}

1238 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
)

1240 i‡(
node
) {

1241 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

1242 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_UNTIL
, 6), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
) };

1243  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1245  
	`π_Ωcx_u¡û
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
	`«no2cou¡
(
time
));

1246 
	}
}

1248 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
)

1250 i‡(
node
) {

1251 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

1252 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_TIMED
, 6), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
) };

1253  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1255  
	`π_Ωcx_timed
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
	`«no2cou¡
(
dñay
));

1256 
	}
}

1258 
ölöe
 
RT_TASK
 *
	$RT_£ndx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1260 i‡(
node
) {

1261 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

1262 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1263  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1265  
	`π_£ndx
(
èsk
, 
msg
, 
size
);

1266 
	}
}

1268 
ölöe
 
RT_TASK
 *
	$RT_£ndx_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1270 i‡(
node
) {

1271 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

1272 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_IF
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1274  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1276  
	`π_£ndx_if
(
èsk
, 
msg
, 
size
);

1277 
	}
}

1279 
ölöe
 
RT_TASK
 *
	$RT_£ndx_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
time
)

1281 i‡(
node
) {

1282 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

1283 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_UNTIL
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1284  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1286  
	`π_£ndx_u¡û
(
èsk
, 
msg
, 
size
, 
	`«no2cou¡
(
time
));

1287 
	}
}

1289 
ölöe
 
RT_TASK
 *
	$RT_£ndx_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
)

1291 i‡(
node
) {

1292 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

1293 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_TIMED
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1294  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1296  
	`π_£ndx_timed
(
èsk
, 
msg
, 
size
, 
	`«no2cou¡
(
dñay
));

1297 
	}
}

1299 
ölöe
 
RT_TASK
 *
	$RT_ªtu∫x
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1302 i‡(!
èsk
 || !
node
) {

1303  
	`π_ªtu∫x
(
èsk
, 
msg
, 
size
);

1305  
	`π_ªtu∫x
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
) ?Åask : 0;

1306 
	}
}

1308 
ölöe
 
RT_TASK
 *
	$RT_evdΩx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1310 i‡(!
èsk
 || !
node
) {

1311  
	`π_evdΩx
(
èsk
, 
msg
, 
size
, 
Àn
);

1313  
	`π_evdΩx
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1314 
	}
}

1316 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1318 i‡(!
èsk
 || !
node
) {

1319  
	`π_ª˚ivex
(
èsk
, 
msg
, 
size
, 
Àn
);

1321  
	`π_ª˚ivex
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1322 
	}
}

1324 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1326 i‡(!
èsk
 || !
node
) {

1327  
	`π_ª˚ivex_if
(
èsk
, 
msg
, 
size
, 
Àn
);

1329  
	`π_ª˚ivex_if
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1330 
	}
}

1332 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
)

1334 i‡(!
èsk
 || !
node
) {

1335  
	`π_ª˚ivex_u¡û
(
èsk
, 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
time
));

1337  
	`π_ª˚ivex_u¡û
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
time
)) ?Åask : 0;

1338 
	}
}

1340 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
)

1342 i‡(!
èsk
 || !
node
) {

1343  
	`π_ª˚ivex_timed
(
èsk
, 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
dñay
));

1345  
	`π_ª˚ivex_timed
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
dñay
)) ?Åask : 0;

1346 
	}
}

1350 #i‡
CONFIG_RTAI_MBX


1352 
ölöe
 
MBX
 *
	$RT_ty≥d_«med_mbx_öô
(
node
, 
p‹t
, c⁄° *
mbx_«me
, 
size
, 
qty≥
)

1354 i‡(
node
) {

1355 °ru˘ { 
mbx_«me
; 
size
; 
qy≥
; } 
¨g
 = { 
	`«m2num
(mbx_«me), size, 
qty≥
 };

1356 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_INIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
UINT
, UINT, UINT) };

1357  (
MBX
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1359  (
MBX
 *)
	`π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

1360 
	}
}

1362 
ölöe
 
	$RT_«med_mbx_dñëe
(
node
, 
p‹t
, 
MBX
 *
mbx
)

1364 i‡(
node
) {

1365 °ru˘ { 
MBX
 *
mbx
; } 
¨g
 = { mbx };

1366 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

1367  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1369  
	`π_«med_mbx_dñëe
(
mbx
);

1370 
	}
}

1372 
ölöe
 
	$RT_mbx_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1374 i‡(
node
) {

1375 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1376 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1377  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1379  
	`π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
);

1380 
	}
}

1382 
ölöe
 
	$RT_mbx_£nd_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1384 i‡(
node
) {

1385 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1386 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_WP
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1387  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1389  
	`π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
);

1390 
	}
}

1392 
ölöe
 
	$RT_mbx_£nd_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1394 i‡(
node
) {

1395 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1396 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_IF
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1397  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1399  
	`π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
);

1400 
	}
}

1402 
ölöe
 
	$RT_mbx_ovrwr_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1404 i‡(
node
) {

1405 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1406 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_OVRWR_SEND
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1407  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1409  
	`π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
);

1410 
	}
}

1412 
ölöe
 
	$RT_mbx_£nd_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

1414 i‡(
node
) {

1415 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

1416 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_UNTIL
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1417  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1419  
	`π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
time
));

1420 
	}
}

1422 
ölöe
 
	$RT_mbx_£nd_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

1424 i‡(
node
) {

1425 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

1426 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_TIMED
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1427  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1429  
	`π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
dñay
));

1430 
	}
}

1432 
ölöe
 
	$RT_mbx_evdΩ
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1434 i‡(
node
) {

1435 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1436 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_EVDRP
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1437  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1439  
	`π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
);

1440 
	}
}

1442 
ölöe
 
	$RT_mbx_ª˚ive
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1444 i‡(
node
) {

1445 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1446 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1447  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1449  
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
);

1450 
	}
}

1452 
ölöe
 
	$RT_mbx_ª˚ive_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1454 i‡(
node
) {

1455 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1456 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_WP
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1457  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1459  
	`π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
);

1460 
	}
}

1462 
ölöe
 
	$RT_mbx_ª˚ive_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1464 i‡(
node
) {

1465 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1466 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_IF
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1467  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1469  
	`π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
);

1470 
	}
}

1472 
ölöe
 
	$RT_mbx_ª˚ive_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

1474 i‡(
node
) {

1475 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

1476 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_UNTIL
, 4), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1477  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1479  
	`π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
time
));

1480 
	}
}

1482 
ölöe
 
	$RT_mbx_ª˚ive_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

1484 i‡(
node
) {

1485 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

1486 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_TIMED
, 4), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1487  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1489  
	`π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
dñay
));

1490 
	}
}

1492 
	~<°ddef.h
>

1494 
ölöe
 
	$π_gë_√t_Ωc_ªt
(
MBX
 *
mbx
, *
ªtvÆ
, *
msg1
, *
msgÀn1
, *
msg2
, *
msgÀn2
, 
RTIME
 
timeout
, 
ty≥
)

1496 
	sª∂y_t
 { 
wsize
, 
w2size
, 
myp‹t
; 
ªtvÆ
; 
msg
[1], 
msg1
[1]; };

1497 
ª∂y_t
 
ª∂y
;

1498 
ªt
;

1500 
ty≥
) {

1501 
MBX_RECEIVE
:

1502 
ªt
 = 
	`π_mbx_ª˚ive
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1504 
MBX_RECEIVE_WP
:

1505 
ªt
 = 
	`π_mbx_ª˚ive_wp
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1507 
MBX_RECEIVE_IF
:

1508 
ªt
 = 
	`π_mbx_ª˚ive_if
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1510 
MBX_RECEIVE_UNTIL
:

1511 
ªt
 = 
	`π_mbx_ª˚ive_u¡û
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
), 
timeout
);

1513 
MBX_RECEIVE_TIMED
:

1514 
ªt
 = 
	`π_mbx_ª˚ive_timed
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
), 
timeout
);

1516 
ªt
 = -1;

1518 i‡(!
ªt
) {

1519 *
ªtvÆ
 = ()
ª∂y
.retval;

1520 i‡(
ª∂y
.
wsize
) {

1521 
msg
[
ª∂y
.
wsize
];

1522 
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
ª∂y
.
wsize
);

1523 i‡(*
msgÀn1
 > 
ª∂y
.
wsize
) {

1524 *
msgÀn1
 = 
ª∂y
.
wsize
;

1526 
	`mem˝y
(
msg1
, 
msg
, *
msgÀn1
);

1528 *
msgÀn1
 = 0;

1530 i‡(
ª∂y
.
w2size
) {

1531 
msg
[
ª∂y
.
w2size
];

1532 
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
ª∂y
.
w2size
);

1533 i‡(*
msgÀn2
 > 
ª∂y
.
w2size
) {

1534 *
msgÀn2
 = 
ª∂y
.
w2size
;

1536 
	`mem˝y
(
msg2
, 
msg
, *
msgÀn2
);

1538 *
msgÀn2
 = 0;

1542  
ªt
;

1543 
	}
}

1554 
	#RT_i§pcx
(
èsk
Ë
	`RT_i§pc
—ask)

	)

1556 
	#RT_waôög_ªtu∫
 
π_waôög_ªtu∫


	)

1558 
	#RT_sync_√t_Ωc
 
π_sync_√t_Ωc


	)

1560 
	#RT_ªque°_p‹t
 
π_ªque°_p‹t


	)

1562 
	#RT_ªque°_p‹t_id
 
π_ªque°_p‹t_id


	)

1564 
	#RT_ªque°_p‹t_mbx
 
π_ªque°_p‹t_mbx


	)

1566 
	#RT_ªque°_p‹t_id_mbx
 
π_ªque°_p‹t_id_mbx


	)

1568 
	#RT_ªque°_so·_p‹t
 
π_ªque°_so·_p‹t


	)

1570 
	#RT_ªque°_so·_p‹t_id
 
π_ªque°_so·_p‹t_id


	)

1572 
	#RT_ªque°_so·_p‹t_mbx
 
π_ªque°_so·_p‹t_mbx


	)

1574 
	#RT_ªque°_so·_p‹t_id_mbx
 
π_ªque°_so·_p‹t_id_mbx


	)

1576 
	#RT_ªque°_h¨d_p‹t
 
π_ªque°_h¨d_p‹t


	)

1578 
	#RT_ªque°_h¨d_p‹t_id
 
π_ªque°_h¨d_p‹t_id


	)

1580 
	#RT_ªque°_h¨d_p‹t_mbx
 
π_ªque°_h¨d_p‹t_mbx


	)

1582 
	#RT_ªque°_h¨d_p‹t_id_mbx
 
π_ªque°_h¨d_p‹t_id_mbx


	)

1584 
	#RT_ªÀa£_p‹t
 
π_ªÀa£_p‹t


	)

1586 
	#π_ªque°_p‹t
 
π_ªque°_so·_p‹t


	)

1588 
	#π_ªque°_p‹t_id
 
π_ªque°_so·_p‹t_id


	)

1590 
	#π_ªque°_p‹t_mbx
 
π_ªque°_so·_p‹t_mbx


	)

1592 
	#π_ªque°_p‹t_id_mbx
 
π_ªque°_so·_p‹t_id_mbx


	)

1598 
	#π_ªque°_so·_p‹t
(
node
) \

1599 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 0, 0)

	)

1601 
	#π_ªque°_so·_p‹t_id
(
node
, 
id
) \

1602 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 0, 0)

	)

1604 
	#π_ªque°_so·_p‹t_mbx
(
node
, 
mbx
) \

1605 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 
mbx
, 0)

	)

1607 
	#π_ªque°_so·_p‹t_id_mbx
(
node
, 
id
, 
mbx
) \

1608 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 
mbx
, 0)

	)

1610 
	#π_ªque°_h¨d_p‹t
(
node
) \

1611 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 0, 1)

	)

1613 
	#π_ªque°_h¨d_p‹t_id
(
node
, 
id
) \

1614 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 0, 1)

	)

1616 
	#π_ªque°_h¨d_p‹t_mbx
(
node
, 
mbx
) \

1617 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 
mbx
, 1)

	)

1619 
	#π_ªque°_h¨d_p‹t_id_mbx
(
node
, 
id
, 
mbx
) \

1620 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 
mbx
, 1)

	)

1622 
	#π_ªÀa£_p‹t
(
node
, 
p‹t
) \

1623 
	`π_£nd_ªq_ªl_p‹t
(
node
, 
p‹t
, 0, 0, 0)

	)

	@/usr/src/rtai/base/include/rtai_pmq.h

28 #i‚de‡
_RTAI_MQ_H


29 
	#_RTAI_MQ_H


	)

31 
	~<löux/vîsi⁄.h
>

32 
	~<πai_£m.h
>

33 
	~<πai_schedc‹e.h
>

35 
	#MQ_OPEN_MAX
 8

	)

36 #i‚de‡
MQ_PRIO_MAX


37 
	#MQ_PRIO_MAX
 32

	)

39 
	#MQ_BLOCK
 0

	)

40 
	#MQ_NONBLOCK
 1

	)

41 
	#MQ_NAME_MAX
 80

	)

43 
	#MQ_MIN_MSG_PRIORITY
 0

	)

44 
	#MQ_MAX_MSG_PRIORITY
 
MQ_PRIO_MAX


	)

46 
	#MAX_PQUEUES
 4

	)

48 
	#MAX_MSGSIZE
 50

	)

49 
	#MAX_MSGS
 10

	)

51 
	#O_NOTIFY_NP
 0x1000

	)

53 
	smq_©å
 {

54 
	mmq_maxmsg
;

55 
	mmq_msgsize
;

56 
	mmq_Êags
;

57 
	mmq_curmsgs
;

58 } 
	tMQ_ATTR
;

60 
	#INVALID_PQUEUE
 0

	)

62 #ifde‡
__KERNEL__


64 
	~<löux/ty≥s.h
>

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,6)

67 
	tmqd_t
;

70 #i‚de‡
__˝lu•lus


72 
	tmq_boﬁ_t
;

74 #i‚de‡
TRUE


75 
	#TRUE
 1

	)

76 
	#FALSE
 0

	)

79 
	smsg_hdr
 {

80 
size_t
 
	msize
;

81 
uöt
 
	m¥i‹ôy
;

82 *
	m√xt
;

83 } 
	tMSG_HDR
;

85 
	#MSG_HDR_SIZE
 ((
MSG_HDR
))

	)

87 
	squeue_c⁄åﬁ
 {

88 
	mnodöd
;

89 **
	mnodes
;

90 *
	mba£
;

91 *
	mhód
;

92 *
	mèû
;

93 
MQ_ATTR
 
	m©ås
;

94 } 
	tQ_CTRL
;

96 
	smsg
 {

97 
MSG_HDR
 
	mhdr
;

98 
	md©a
;

99 } 
	tMQMSG
;

101 
	snŸify
 {

102 
RT_TASK
 *
	mèsk
;

103 
sigevít
 
	md©a
;

106 
	s_pqueue_des¸_°ru˘
 {

107 
RT_TASK
 *
	mow√r
;

108 
	m›í_cou¡
;

110 
	mq_«me
[
MQ_NAME_MAX
];

111 
uöt
 
	mq_id
;

112 
mq_boﬁ_t
 
	mm¨ked_f‹_dñëi⁄
;

114 
Q_CTRL
 
	md©a
;

115 
mode_t
 
	m≥rmissi⁄s
;

116 
nŸify
 
	mnŸify
;

117 
SEM
 
	memp_c⁄d
;

118 
SEM
 
	mfuŒ_c⁄d
;

119 
SEM
 
	mmuãx
;

120 } 
	tMSG_QUEUE
;

122 
	s_pqueue_ac˚ss_d©a
 {

123 
	mq_id
;

124 
	moÊags
;

125 
sigevít
 *
	mu•_nŸifõr
;

128 
	s_pqueue_ac˚ss_°ru˘
 {

129 
RT_TASK
 *
	mthis_èsk
;

130 
	mn_›í_pqueues
;

131 
_pqueue_ac˚ss_d©a
 
	mq_ac˚ss
[
MQ_OPEN_MAX
];

132 } *
	tQUEUE_CTRL
;

135 
	mFOR_READ
,

136 
	mFOR_WRITE


137 } 
	tQ_ACCESS
;

143 
__πai_mq_öô
();

145 
__πai_mq_exô
();

147 
RTAI_SYSCALL_MODE
 
mqd_t
 
_mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_©å, 
•a˚
);

148 
ölöe
 
mqd_t
 
mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr)

150  
_mq_›í
(
mq_«me
, 
oÊags
, 
≥rmissi⁄s
, 
mq_©å
, 0);

153 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, 
•a˚
);

154 
ölöe
 
size_t
 
mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
)

156  
_mq_ª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 1);

159 
RTAI_SYSCALL_MODE
 
_mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, 
•a˚
);

160 
ölöe
 
mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
)

162  
_mq_£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 1);

165 
RTAI_SYSCALL_MODE
 
mq_˛o£
(
mqd_t
 
mq
);

167 
RTAI_SYSCALL_MODE
 
mq_gë©å
(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
);

169 
RTAI_SYSCALL_MODE
 
mq_£èâr
(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
);

171 
RTAI_SYSCALL_MODE
 
_mq_nŸify
(
mqd_t
 
mq
, 
RT_TASK
 *
èsk
, 
•a˚
, 
ªm
, c⁄° 
sigevít
 *
nŸifiˇti⁄
);

172 
ölöe
 
mq_nŸify
(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

174  
_mq_nŸify
(
mq
, 
π_whﬂmi
(), 0, (
nŸifiˇti⁄
 ? 0 : 1),Çotification );

177 
RTAI_SYSCALL_MODE
 
mq_u∆ök
(*
mq_«me
);

179 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

180 
ölöe
 
size_t
 
mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

182  
_mq_timedª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 
ab°ime
, 1);

185 
RTAI_SYSCALL_MODE
 
_mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

186 
ölöe
 
mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

188  
_mq_timed£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 
ab°ime
, 1);

191 #ifde‡
__˝lu•lus


197 
	~<î∫o.h
>

198 
	~<sig«l.h
>

199 
	~<πai_lxπ.h
>

200 
	~<πai_sig«l.h
>

201 
	~<πai_posix.h
>

203 
	#MQIDX
 0

	)

205 
	tmqd_t
;

207 #ifde‡
__˝lu•lus


211 
	ssu¥t_fun_¨g
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
˝uid
; 
±hªad_t
 
£lf
; };

213 #i‚de‡
__SIGNAL_SUPPORT_FUN_PMQ__


214 
	#__SIGNAL_SUPPORT_FUN_PMQ__


	)

216 
sig«l_su¥t_fun_mq
(
su¥t_fun_¨g
 *
fun_¨g
)

218 
	ssigtsk_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; };

219 
su¥t_fun_¨g
 
¨g
 = *
fun_¨g
;

220 
	ssigªq_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
sig«l
;} 
sigªq
 = {
NULL
, 
¨g
.èsk, (¨g.
mq
 + 
MAXSIGNALS
)};

221 
sigevít
 
nŸifiˇti⁄
;

223 i‡((
sigªq
.
sigèsk
 = 
π_thªad_öô
(
π_gë_«me
(0), 
SIGNAL_TASK_INIPRIO
, 0, 
SCHED_FIFO
, 1 << 
¨g
.
˝uid
))) {

224 i‡(!
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigªq_t
), 
RT_SIGNAL_REQUEST
, &
sigªq
).
i
[
LOW
]) {

225 
	s¨g_ªg
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
sigevít
 *
u•_nŸifiˇti⁄
;} 
¨g_ªg
 = {
¨g
.mq,árg.èsk, &
nŸifiˇti⁄
};

226 
πai_lxπ
(
MQIDX
, (
¨g_ªg
), 
MQ_REG_USP_NOTIFIER
, &arg_reg);

227 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

228 
π_make_h¨d_ªÆ_time
();

229 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigtsk_t
), 
RT_SIGNAL_WAITSIG
, &
sigªq
).
i
[
LOW
]) {

230 i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_THREAD
) {

231 
nŸifiˇti⁄
.
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄
((
sigvÆ_t
ÍŸifiˇti⁄.
sigev_vÆue
.
sivÆ_öt
);

232 } i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_SIGNAL
) {

233 
±hªad_kûl
((
±hªad_t
)
¨g
.
£lf
, 
nŸifiˇti⁄
.
sigev_signo
);

236 
π_make_so·_ªÆ_time
();

238 
π_èsk_dñëe
(
sigªq
.
sigèsk
);

244 
RTAI_PROTO
(, 
π_ªque°_sig«l_mq
, (
mqd_t
 
mq
))

246 
	ssu¥t_fun_¨g
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
˝uid
; 
±hªad_t
 
£lf
;} 
¨g
 = { mq, 
NULL
, 0, 
±hªad_£lf
() };

247 
¨g
.
˝uid
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (*), 
RT_SIGNAL_HELPER
, (*)&¨g.
èsk
).
i
[
LOW
];

248 
¨g
.
èsk
 = 
π_buddy
();

249 i‡(
π_thªad_¸óã
(
sig«l_su¥t_fun_mq
, &
¨g
, 
SIGNAL_TASK_STACK_SIZE
)) {

250 
ªt
;

251 
ªt
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
RT_TASK
 *), 
RT_SIGNAL_HELPER
, &
¨g
.
èsk
).
i
[
LOW
];

252  
ªt
;

258 
RTAI_PROTO
(
mqd_t
, 
mq_›í
,(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr))

260 
mqd_t
 
ªt
;

261 °ru˘ {*
mq_«me
; 
oÊags
; 
≥rmissi⁄s
; 
mq_©å
 *mq_©å; 
«mesize
, 
©åsize
; 
•a˚
; } 
¨g
 = { mq_«me, oÊags,Öîmissi⁄s, mq_©å, 
°æí
(mq_name) + 1, (mq_attr), 1 };

262 i‡((
ªt
 = (
mqd_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_OPEN
, &
¨g
).
i
[
LOW
]) >= 0) {

264 i‡(
oÊags
 & 
O_NOTIFY_NP
) {

265 
π_ªque°_sig«l_mq
 (
ªt
);

267  
ªt
;

269 
î∫o
 = -
ªt
;

273 
RTAI_PROTO
(
size_t
, 
mq_ª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
))

275 
ﬁdty≥
, 
ªt
;

276 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio, 0 };

277 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

278 
±hªad_ã°ˇn˚l
();

279 
ªt
 = (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_RECEIVE
, &
¨g
).
i
[
LOW
];

280 
±hªad_ã°ˇn˚l
();

281 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

282 i‡(
ªt
 >= 0) {

283  
ªt
;

285 
î∫o
 = -
ªt
;

289 
RTAI_PROTO
(, 
mq_£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
))

291 
ﬁdty≥
, 
ªt
;

292 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio, 0 };

293 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

294 
±hªad_ã°ˇn˚l
();

295 
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SEND
, &
¨g
).
i
[
LOW
];

296 
±hªad_ã°ˇn˚l
();

297 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

298 i‡(
ªt
 >= 0) {

299  
ªt
;

301 
î∫o
 = -
ªt
;

305 
RTAI_PROTO
(, 
mq_˛o£
,(
mqd_t
 
mq
))

307 
ªt
;

308 °ru˘ { 
mq
; } 
¨g
 = { mq };

309 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_CLOSE
, &
¨g
).
i
[
LOW
]) >= 0) {

310  
ªt
;

312 
î∫o
 = -
ªt
;

316 
RTAI_PROTO
(, 
mq_gë©å
,(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
))

318 
ªt
;

319 °ru˘ { 
mq
; 
mq_©å
 *
©åbuf
; 
©åsize
; } 
¨g
 = { mq,áttrbuf, (mq_attr) };

320 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_GETATTR
, &
¨g
).
i
[
LOW
]) >= 0) {

321  
ªt
;

323 
î∫o
 = -
ªt
;

327 
RTAI_PROTO
(, 
mq_£èâr
,(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
))

329 
ªt
;

330 °ru˘ { 
mq
; c⁄° 
mq_©å
 *
√w_©ås
; mq_©å *
ﬁd_©ås
; 
©åsize
; } 
¨g
 = { mq,Çew_attrs, old_attrs, (mq_attr) };

331 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SETATTR
, &
¨g
).
i
[
LOW
]) >= 0) {

332  
ªt
;

334 
î∫o
 = -
ªt
;

338 
RTAI_PROTO
(, 
mq_nŸify
,(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
))

340 
ªt
;

341 °ru˘ { 
mq
; 
RT_TASK
* 
èsk
; 
•a˚
; 
ªm
; c⁄° 
sigevít
 *
nŸifiˇti⁄
; 
size
;} 
¨g
 = { mq, 
π_buddy
(), 1, (notification ? 0 : 1),Çotification, (sigevent) };

342 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_NOTIFY
, &
¨g
).
i
[
LOW
]) >= 0) {

343 i‡(
ªt
 =
O_NOTIFY_NP
) {

344 
π_ªque°_sig«l_mq
 (
mq
);

345 
ªt
 = 0;

347  
ªt
;

349 
î∫o
 = -
ªt
;

353 
RTAI_PROTO
(, 
mq_u∆ök
,(*
mq_«me
))

355 
ªt
;

356 °ru˘ { *
mq_«me
; 
size
; } 
¨g
 = { mq_«me, 
°æí
(mq_name) + 1};

357 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_UNLINK
, &
¨g
).
i
[
LOW
]) >= 0) {

358  
ªt
;

360 
î∫o
 = -
ªt
;

364 
RTAI_PROTO
(
size_t
, 
mq_timedª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

366 
ﬁdty≥
, 
ªt
;

367 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio,ábstime, 0 };

368 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

369 
±hªad_ã°ˇn˚l
();

370 
ªt
 = (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDRECEIVE
, &
¨g
).
i
[
LOW
];

371 
±hªad_ã°ˇn˚l
();

372 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

373 i‡(
ªt
 >= 0) {

374  
ªt
;

376 
î∫o
 = -
ªt
;

380 
RTAI_PROTO
(, 
mq_timed£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

382 
ﬁdty≥
, 
ªt
;

383 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio,ábstime, 0 };

384 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

385 
±hªad_ã°ˇn˚l
();

386 
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDSEND
, &
¨g
).
i
[
LOW
];

387 
±hªad_ã°ˇn˚l
();

388 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

389 i‡(
ªt
 >= 0) {

390  
ªt
;

392 
î∫o
 = -
ªt
;

396 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_posix.h

20 #i‚de‡
_RTAI_POSIX_H_


21 
	#_RTAI_POSIX_H_


	)

23 
	#£m_›í_π
 
£m_›í


	)

24 
	#£m_˛o£_π
 
£m_˛o£


	)

25 
	#£m_öô_π
 
£m_öô


	)

26 
	#£m_de°roy_π
 
£m_de°roy


	)

27 
	#£m_waô_π
 
£m_waô


	)

28 
	#£m_åywaô_π
 
£m_åywaô


	)

29 
	#£m_timedwaô_π
 
£m_timedwaô


	)

30 
	#£m_po°_π
 
£m_po°


	)

31 
	#£m_gëvÆue_π
 
£m_gëvÆue


	)

33 
	#±hªad_muãx_›í_π
 
±hªad_muãx_›í


	)

34 
	#±hªad_muãx_˛o£_π
 
±hªad_muãx_˛o£


	)

35 
	#±hªad_muãx_öô_π
 
±hªad_muãx_öô


	)

36 
	#±hªad_muãx_de°roy_π
 
±hªad_muãx_de°roy


	)

37 
	#±hªad_muãx_lock_π
 
±hªad_muãx_lock


	)

38 
	#±hªad_muãx_timedlock_π
 
±hªad_muãx_timedlock


	)

39 
	#±hªad_muãx_åylock_π
 
±hªad_muãx_åylock


	)

40 
	#±hªad_muãx_u∆ock_π
 
±hªad_muãx_u∆ock


	)

42 
	#±hªad_c⁄d_›í_π
 
±hªad_c⁄d_›í


	)

43 
	#±hªad_c⁄d_˛o£_π
 
±hªad_c⁄d_˛o£


	)

44 
	#±hªad_c⁄d_öô_π
 
±hªad_c⁄d_öô


	)

45 
	#±hªad_c⁄d_de°roy_π
 
±hªad_c⁄d_de°roy


	)

46 
	#±hªad_c⁄d_sig«l_π
 
±hªad_c⁄d_sig«l


	)

47 
	#±hªad_c⁄d_brﬂdˇ°_π
 
±hªad_c⁄d_brﬂdˇ°


	)

48 
	#±hªad_c⁄d_waô_π
 
±hªad_c⁄d_waô


	)

49 
	#±hªad_c⁄d_timedwaô_π
 
±hªad_c⁄d_timedwaô


	)

51 
	#±hªad_b¨rõr_›í_π
 
±hªad_b¨rõr_›í


	)

52 
	#±hªad_b¨rõr_˛o£_π
 
±hªad_b¨rõr_˛o£


	)

53 
	#±hªad_b¨rõr_öô_π
 
±hªad_b¨rõr_öô


	)

54 
	#±hªad_b¨rõr_de°roy_π
 
±hªad_b¨rõr_de°roy


	)

55 
	#±hªad_b¨rõr_waô_π
 
±hªad_b¨rõr_waô


	)

57 
	#±hªad_rwlock_›í_π
 
±hªad_rwlock_›í


	)

58 
	#±hªad_rwlock_˛o£_π
 
±hªad_rwlock_˛o£


	)

59 
	#±hªad_rwlock_öô_π
 
±hªad_rwlock_öô


	)

60 
	#±hªad_rwlock_de°roy_π
 
±hªad_rwlock_de°roy


	)

61 
	#±hªad_rwlock_rdlock_π
 
±hªad_rwlock_rdlock


	)

62 
	#±hªad_rwlock_åyrdlock_π
 
±hªad_rwlock_åyrdlock


	)

63 
	#±hªad_rwlock_timedrdlock_π
 
±hªad_rwlock_timedrdlock


	)

64 
	#±hªad_rwlock_wæock_π
 
±hªad_rwlock_wæock


	)

65 
	#±hªad_rwlock_åywæock_π
 
±hªad_rwlock_åywæock


	)

66 
	#±hªad_rwlock_timedwæock_π
 
±hªad_rwlock_timedwæock


	)

67 
	#±hªad_rwlock_u∆ock_π
 
±hªad_rwlock_u∆ock


	)

69 
	#±hªad_•ö_öô_π
 
±hªad_•ö_öô


	)

70 
	#±hªad_•ö_de°roy_π
 
±hªad_•ö_de°roy


	)

71 
	#±hªad_•ö_lock_π
 
±hªad_•ö_lock


	)

72 
	#±hªad_•ö_åylock_π
 
±hªad_•ö_åylock


	)

73 
	#±hªad_•ö_u∆ock_π
 
±hªad_•ö_u∆ock


	)

75 
	#sched_gë_max_¥i‹ôy_π
 
sched_gë_max_¥i‹ôy


	)

76 
	#sched_gë_mö_¥i‹ôy_π
 
sched_gë_mö_¥i‹ôy


	)

78 
	#±hªad_¸óã_π
 
±hªad_¸óã


	)

79 
	#±hªad_yõld_π
 
±hªad_yõld


	)

80 
	#±hªad_exô_π
 
±hªad_exô


	)

81 
	#±hªad_joö_π
 
±hªad_joö


	)

82 
	#±hªad_ˇn˚l_π
 
±hªad_ˇn˚l


	)

83 
	#±hªad_equÆ_π
 
±hªad_equÆ


	)

84 
	#±hªad_£lf_π
 
±hªad_£lf


	)

85 
	#±hªad_©å_öô_π
 
±hªad_©å_öô


	)

86 
	#±hªad_©å_de°roy_π
 
±hªad_©å_de°roy


	)

87 
	#±hªad_©å_£tsched∑øm_π
 
±hªad_©å_£tsched∑øm


	)

88 
	#±hªad_©å_gësched∑øm_π
 
±hªad_©å_gësched∑øm


	)

89 
	#±hªad_©å_£tschedpﬁicy_π
 
±hªad_©å_£tschedpﬁicy


	)

90 
	#±hªad_©å_gëschedpﬁicy_π
 
±hªad_©å_gëschedpﬁicy


	)

91 
	#±hªad_©å_£tschedº_π
 
±hªad_©å_£tschedº


	)

92 
	#±hªad_©å_gëschedº_π
 
±hªad_©å_gëschedº


	)

93 
	#±hªad_©å_£t°acksize_π
 
±hªad_©å_£t°acksize


	)

94 
	#±hªad_©å_gë°acksize_π
 
±hªad_©å_gë°acksize


	)

95 
	#±hªad_©å_£t°ack_π
 
±hªad_©å_£t°ack


	)

96 
	#±hªad_©å_gë°ack_π
 
±hªad_©å_gë°ack


	)

97 
	#±hªad_ã°ˇn˚l_π
 
±hªad_ã°ˇn˚l


	)

99 
	#˛ock_gëtime_π
 
˛ock_gëtime


	)

100 
	#«no¶ìp_π
 
«no¶ìp


	)

102 
	#±hªad_˛ónup_push_π
 
±hªad_˛ónup_push


	)

103 
	#±hªad_˛ónup_p›_π
 
±hªad_˛ónup_p›


	)

109 
	#±hªad_©å_£tdëach°©e_π
(
©å
, 
dëach°©e
)

	)

110 
	#±hªad_dëach_π
(
thªad
)

	)

111 
	#±hªad_£tc⁄cuºícy_π
(
Àvñ
)

	)

113 #ifde‡
__KERNEL__


119 
	#±hªad_£tˇn˚…y≥_π
(
ty≥
, 
ﬁdty≥
)

	)

120 
	#±hªad_£tˇn˚l°©e_π
(
°©e
, 
ﬁd°©e
)

	)

121 
	#±hªad_©å_gë°ackaddr_π
(
©å
, 
°ackaddr
)

	)

122 
	#±hªad_©å_£t°ackaddr_π
(
©å
, 
°ackaddr
)

	)

123 
	#±hªad_©å_£tgu¨dsize_π
(
©å
, 
gu¨dsize
)

	)

124 
	#±hªad_©å_gëgu¨dsize_π
(
©å
, 
gu¨dsize
)

	)

125 
	#±hªad_©å_£tsc›e_π
(
©å
, 
sc›e
)

	)

126 
	#±hªad_©å_gësc›e_π
(
©å
, 
sc›e
)

	)

127 
	#±hªad_©å_gëdëach°©e_π
(
©å
, 
dëach°©e
)

	)

128 
	#±hªad_©å_gëdëach°©e
(
©å
, 
dëach°©e
)

	)

129 
	#±hªad_©å_£töhîôsched_π
(
©å
, 
öhîô
)

	)

130 
	#±hªad_©å_gëöhîôsched_π
(
©å
, 
öhîô
)

	)

131 
	#±hªad_©å_£töhîôsched
(
©å
, 
öhîô
)

	)

132 
	#±hªad_©å_gëöhîôsched
(
©å
, 
öhîô
)

	)

134 
	~<löux/f˙é.h
>

135 
	~<löux/dñay.h
>

137 
	~<πai_mÆloc.h
>

138 
	~<πai_rwl.h
>

139 
	~<πai_•l.h
>

140 
	~<πai_£m.h
>

141 
	~<πai_sched.h
>

142 
	~<πai_schedc‹e.h
>

145 
	#SET_ADR
(
s
Ë(((**)s)[0])

	)

147 
	#RTAI_PNAME_MAXSZ
 6

	)

148 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

151 #i‚de‡
MAX_PRIO


152 
	#MAX_PRIO
 99

	)

154 #i‚de‡
MIN_PRIO


155 
	#MIN_PRIO
 1

	)

158 #i‚de‡
CLOCK_REALTIME


159 
	#CLOCK_REALTIME
 0

	)

162 #i‚de‡
CLOCK_MONOTONIC


163 
	#CLOCK_MONOTONIC
 1

	)

166 
	#STACK_SIZE
 8192

	)

167 
	#RR_QUANTUM_NS
 1000000

	)

169 °ru˘ { 
SEM
 
	m£m
; } 
	t£m_t
;

171 °ru˘ { 
SEM
 
	mmuãx
; } 
	t±hªad_muãx_t
;

173 
	t±hªad_muãx©å_t
;

175 °ru˘ { 
SEM
 
	mc⁄d
; } 
	t±hªad_c⁄d_t
;

177 
	t±hªad_c⁄d©å_t
;

179 °ru˘ { 
SEM
 
	mb¨rõr
; } 
	t±hªad_b¨rõr_t
;

181 
	t±hªad_b¨rõøâr_t
;

183 °ru˘ { 
RWL
 
	mrwlock
; } 
	t±hªad_rwlock_t
;

185 
	t±hªad_rwlock©å_t
;

187 
	t±hªad_•ölock_t
;

189 
π_èsk_°ru˘
 *
	t±hªad_t
;

191 
	s±hªad_©å
 {

192 
	m°acksize
;

193 
	mpﬁicy
;

194 
	mº_qu™tum_ns
;

195 
	m¥i‹ôy
;

196 } 
	t±hªad_©å_t
;

198 
	s±hªad_cookõ
 {

199 
RT_TASK
 
	mèsk
;

200 
SEM
 
	m£m
;

201 (*
	mèsk_fun
)();

202 
	m¨g
;

203 *
	mcookõ
;

204 } 
	t±hªad_cookõ_t
;

206 #ifde‡
__˝lu•lus


214 
ölöe
 
£m_t
 *
£m_›í
(c⁄° *
«meö
, 
oÊags
, 
vÆue
, 
ty≥
)

216 
«mëmp
[
RTAI_PNAME_MAXSZ
 + 1];

217 
i
;

218 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

219  (
£m_t
 *)-
ENAMETOOLONG
;

222 
i
 = 0; i < 
°æí
(
«meö
); i++) {

223 i‡((
«mëmp
[
i
] = 
«meö
 [i]) >= 'a' &&Çametmp[i] <= 'z')Çametmp[i] += 'A' - 'a';

225 
«mëmp
[
i
]='\0';

226 i‡(!
oÊags
 || 
vÆue
 <
SEM_TIMOUT
) {

227 
SEM
 *
t£m
;

228 
h™dÀ
 = 0UL;

229 i‡((
t£m
 = 
_π_ty≥d_«med_£m_öô
(
«m2num
(
«mëmp
), 
vÆue
, 
ty≥
, &
h™dÀ
))) {

230 i‡((
h™dÀ
Ë&& (
oÊags
 =(
O_CREAT
 | 
O_EXCL
))) {

231  (
£m_t
 *)-
EEXIST
;

233  (
£m_t
 *)
t£m
;

235  (
£m_t
 *)-
ENOSPC
;

237  (
£m_t
 *)-
EINVAL
;

240 
ölöe
 
£m_˛o£
(
£m_t
 *
£m
)

242 i‡(
π_£m_waô_if
(&
£m
->sem)< 0) {

243  -
EBUSY
;

245 
π_«med_£m_dñëe
(&
£m
->sem);

247 
π_‰ì
(
£m
);

252 
ölöe
 
£m_u∆ök
(c⁄° *
«meö
)

254 
«mëmp
[
RTAI_PNAME_MAXSZ
 + 1];

255 
i
;

256 
SEM
 *
£m
;

257 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

258  -
ENAMETOOLONG
;

261 
i
 = 0; i < 
°æí
(
«meö
); i++) {

262 i‡((
«mëmp
[
i
] = 
«meö
 [i]) >= 'a' &&Çametmp[i] <= 'z')Çametmp[i] += 'A' - 'a';

264 
«mëmp
[
i
]='\0';

265 
£m
 = 
π_gë_adr_˙t
(
«m2num
(
«mëmp
));

266 i‡(
£m
) {

267 i‡(
π_£m_waô_if
(
£m
) >= 0) {

268 
π_£m_sig«l
(
£m
);

269 
π_«med_£m_dñëe
(
£m
);

272  -
EBUSY
;

274  -
ENOENT
;

278 
ölöe
 
£m_öô
(
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
)

280 i‡(
vÆue
 < 
SEM_TIMOUT
) {

281 
π_ty≥d_£m_öô
(&
£m
->£m, 
vÆue
, 
CNT_SEM
 | 
PRIO_Q
);

284  -
EINVAL
;

287 
ölöe
 
£m_de°roy
(
£m_t
 *
£m
)

289 i‡(
π_£m_waô_if
(&
£m
->sem) >= 0) {

290 
π_£m_sig«l
(&
£m
->sem);

291 
π_£m_dñëe
(&
£m
->sem);

294  -
EBUSY
;

297 
ölöe
 
£m_waô
(
£m_t
 *
£m
)

299  
π_£m_waô
(&
£m
->£mË< 
SEM_TIMOUT
 ? 0 : -1;

302 
ölöe
 
£m_åywaô
(
£m_t
 *
£m
)

304  
π_£m_waô_if
(&
£m
->£mË> 0 ? 0 : -
EAGAIN
;

307 
ölöe
 
£m_timedwaô
(
£m_t
 *
£m
, c⁄° 
time•ec
 *
ab°ime
)

309  
π_£m_waô_u¡û
(&
£m
->£m, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -
ETIMEDOUT
;

312 
ölöe
 
£m_po°
(
£m_t
 *
£m
)

314  
π_£m_sig«l
(&
£m
->£mË< 
SEM_TIMOUT
 ? 0 : -
ERANGE
;

317 
ölöe
 
£m_gëvÆue
(
£m_t
 *
£m
, *
svÆ
)

319 *
svÆ
 = 
π_£m_cou¡
(&
£m
->sem);

328 
PTHREAD_PROCESS_PRIVATE
,

329 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

330 
PTHREAD_PROCESS_SHARED


331 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

336 
PTHREAD_MUTEX_TIMED_NP
,

337 
PTHREAD_MUTEX_RECURSIVE_NP
,

338 
PTHREAD_MUTEX_ERRORCHECK_NP
,

339 
PTHREAD_MUTEX_ADAPTIVE_NP
,

340 
PTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

341 
PTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

342 
PTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

343 
PTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL
,

344 
PTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


347 
	#RTAI_MUTEX_DEFAULT
 (1 << 0)

	)

348 
	#RTAI_MUTEX_ERRCHECK
 (1 << 1)

	)

349 
	#RTAI_MUTEX_RECURSIVE
 (1 << 2)

	)

350 
	#RTAI_MUTEX_PSHARED
 (1 << 3)

	)

352 
ölöe
 
±hªad_muãx_öô
(
±hªad_muãx_t
 *
muãx
, c⁄° 
±hªad_muãx©å_t
 *
muãx©å
)

354 
π_ty≥d_£m_öô
(&
muãx
->muãx, !
muãx©å
 || (((*)muãx©å)[0] & 
RTAI_MUTEX_DEFAULT
Ë? 
RESEM_BINSEM
 : (((*)muãx©å)[0] & 
RTAI_MUTEX_ERRCHECK
Ë? 
RESEM_CHEKWT
 : 
RESEM_RECURS
, 
RES_SEM
);

358 
ölöe
 
±hªad_muãx_de°roy
(
±hªad_muãx_t
 *
muãx
)

360 i‡(
π_£m_waô_if
(&
muãx
->mutex) >= 0) {

361 
π_£m_sig«l
(&
muãx
->mutex);

362 
π_£m_dñëe
(&
muãx
->mutex);

365  -
EBUSY
;

368 
ölöe
 
±hªad_muãx_lock
(
±hªad_muãx_t
 *
muãx
)

370  
π_£m_waô
(&
muãx
->muãxË< 
SEM_TIMOUT
 ? 0 : -
EINVAL
;

373 
ölöe
 
±hªad_muãx_timedlock
(
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
)

375  
π_£m_waô_u¡û
(&
muãx
->muãx, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

378 
ölöe
 
±hªad_muãx_åylock
(
±hªad_muãx_t
 *
muãx
)

380  
π_£m_waô_if
(&
muãx
->muãxË> 0 ? 0 : -
EBUSY
;

383 
ölöe
 
±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *
muãx
)

385  
π_£m_sig«l
(&
muãx
->muãxË>0 ? 0 : -
EINVAL
;

388 
ölöe
 
±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *
©å
)

390 ((*)
©å
)[0] = 
RTAI_MUTEX_DEFAULT
;

394 
ölöe
 
±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *
©å
)

399 
ölöe
 
±hªad_muãx©å_gëpsh¨ed
(c⁄° 
±hªad_muãx©å_t
 *
©å
, *
psh¨ed
)

401 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

405 
ölöe
 
±hªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *
©å
, 
psh¨ed
)

407 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

408 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

409 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

411 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

415  -
EINVAL
;

418 
ölöe
 
±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *
©å
, 
köd
)

420 
köd
) {

421 
PTHREAD_MUTEX_DEFAULT
:

422 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_DEFAULT
;

424 
PTHREAD_MUTEX_ERRORCHECK
:

425 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_DEFAULT
)Ë| 
RTAI_MUTEX_ERRCHECK
;

427 
PTHREAD_MUTEX_RECURSIVE
:

428 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_RECURSIVE
;

431  -
EINVAL
;

436 
ölöe
 
±hªad_muãx©å_gëty≥
(c⁄° 
±hªad_muãx©å_t
 *
©å
, *
köd
)

438 ((*)
©å
)[0] & (
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
 | 
RTAI_MUTEX_RECURSIVE
)) {

439 
RTAI_MUTEX_DEFAULT
:

440 *
köd
 = 
PTHREAD_MUTEX_DEFAULT
;

442 
RTAI_MUTEX_ERRCHECK
:

443 *
köd
 = 
PTHREAD_MUTEX_ERRORCHECK
;

445 
RTAI_MUTEX_RECURSIVE
:

446 *
köd
 = 
PTHREAD_MUTEX_RECURSIVE
;

456 
ölöe
 
±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
c⁄d
, c⁄° 
±hªad_c⁄d©å_t
 *
c⁄d_©å
)

458 
π_ty≥d_£m_öô
(&
c⁄d
->c⁄d, 0, 
BIN_SEM
 | 
PRIO_Q
);

462 
ölöe
 
±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *
c⁄d
)

464 i‡(
π_£m_waô_if
(&
c⁄d
->cond) < 0) {

465  -
EBUSY
;

467 
π_£m_dñëe
(&
c⁄d
->cond);

471 
ölöe
 
±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
c⁄d
)

473  
π_£m_sig«l
(&
c⁄d
->cond);

476 
ölöe
 
±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
c⁄d
)

478  
π_£m_brﬂdˇ°
(&
c⁄d
->cond);

481 
ölöe
 
±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
)

483  
π_c⁄d_waô
(&
c⁄d
->c⁄d, &
muãx
->mutex);

486 
ölöe
 
±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
)

488  
π_c⁄d_waô_u¡û
(&
c⁄d
->c⁄d, &
muãx
->muãx, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -
ETIMEDOUT
;

491 
ölöe
 
±hªad_c⁄d©å_öô
(*
©å
)

493 ((*)
©å
)[0] = 0;

497 
ölöe
 
±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *
©å
)

502 
ölöe
 
±hªad_c⁄d©å_gëpsh¨ed
(c⁄° 
±hªad_c⁄d©å_t
 *
©å
, *
psh¨ed
)

504 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

508 
ölöe
 
±hªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *
©å
, 
psh¨ed
)

510 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

511 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

512 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

514 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

518  -
EINVAL
;

521 
ölöe
 
±hªad_c⁄d©å_£t˛ock
(
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 
˛ockid
)

523 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

524 ((*)
c⁄d©å
)[0] = 
˛ockid
;

527  -
EINVAL
;

530 
ölöe
 
±hªad_c⁄d©å_gë˛ock
(
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 *
˛ockid
)

532 i‡(
˛ockid
) {

533 *
˛ockid
 = ((*)
c⁄d©å
)[0];

536  -
EINVAL
;

543 
ölöe
 
±hªad_b¨rõr_öô
(
±hªad_b¨rõr_t
 *
b¨rõr
, c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, 
cou¡
)

545 i‡(
cou¡
 > 0) {

546 
π_ty≥d_£m_öô
(&
b¨rõr
->b¨rõr, 
cou¡
, 
CNT_SEM
 | 
PRIO_Q
);

549  -
EINVAL
;

552 
ölöe
 
±hªad_b¨rõr_de°roy
(
±hªad_b¨rõr_t
 *
b¨rõr
)

554 i‡(
π_£m_waô_if
(&
b¨rõr
->barrier) < 0) {

555  -
EBUSY
;

557  
π_£m_dñëe
(&
b¨rõr
->b¨rõrË=
RT_OBJINV
 ? -
EINVAL
 : 0;

560 
ölöe
 
±hªad_b¨rõr_waô
(
±hªad_b¨rõr_t
 *
b¨rõr
)

562  
π_£m_waô_b¨rõr
(&
b¨rõr
->barrier);

565 
ölöe
 
wøp_±hªad_b¨rõøâr_öô
(
±hªad_b¨rõøâr_t
 *
©å
)

567 ((*)
©å
)[0] = 
PTHREAD_PROCESS_PRIVATE
;

571 
ölöe
 
±hªad_b¨rõøâr_de°roy
(
±hªad_b¨rõøâr_t
 *
©å
)

576 
ölöe
 
±hªad_b¨rõøâr_£çsh¨ed
(
±hªad_b¨rõøâr_t
 *
©å
, 
psh¨ed
)

578 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

579 ((*)
©å
)[0] = 
psh¨ed
;

582  -
EINVAL
;

585 
ölöe
 
wøp_±hªad_b¨rõøâr_gëpsh¨ed
(c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, *
psh¨ed
)

587 *
psh¨ed
 = ((*)
©å
)[0];

595 
ölöe
 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
rwlock
, c⁄° 
±hªad_rwlock©å_t
 *
©å
)

597  
π_rwl_öô
(&
rwlock
->rwlock);

600 
ölöe
 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rwlock
)

602  
π_rwl_dñëe
(&
rwlock
->rwlock);

605 
ölöe
 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rwlock
)

607 i‡(
π_rwl_rdlock
(&
rwlock
->rwlock)) {

608  -
EDEADLK
;

613 
ölöe
 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rwlock
)

615 i‡(
π_rwl_rdlock_if
(&
rwlock
->rwlock)) {

616  -
EBUSY
;

621 
ölöe
 
±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
)

623  
π_rwl_rdlock_u¡û
(&
rwlock
->rwlock, 
time•ec2cou¡
(
ab°ime
));

626 
ölöe
 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rwlock
)

628  
π_rwl_wæock
(&
rwlock
->rwlock);

631 
ölöe
 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rwlock
)

633 i‡(
π_rwl_wæock_if
(&
rwlock
->rwlock)) {

634  -
EBUSY
;

639 
ölöe
 
±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
)

641  
π_rwl_wæock_u¡û
(&
rwlock
->rwlock, 
time•ec2cou¡
(
ab°ime
));

644 
ölöe
 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rwlock
)

646  
π_rwl_u∆ock
(&
rwlock
->rwlock);

649 
ölöe
 
±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *
©å
)

651 ((*)
©å
)[0] = 0;

655 
ölöe
 
±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *
©å
)

660 
ölöe
 
±hªad_rwlock©å_gëpsh¨ed
(c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
psh¨ed
)

662 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

668 
ölöe
 
±hªad_rwlock©å_£çsh¨ed
(
±hªad_rwlock©å_t
 *
©å
, 
psh¨ed
)

670 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

671 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

672 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

674 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

678  -
EINVAL
;

681 
ölöe
 
±hªad_rwlock©å_gëköd_≈
(c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
¥ef
)

686 
ölöe
 
±hªad_rwlock©å_£tköd_≈
(
±hªad_rwlock©å_t
 *
©å
, 
¥ef
)

695 
ölöe
 
gë_max_¥i‹ôy
(
pﬁicy
)

697  
MAX_PRIO
;

700 
ölöe
 
gë_mö_¥i‹ôy
(
pﬁicy
)

702  
MIN_PRIO
;

705 
posix_wøµî_fun
(
±hªad_cookõ_t
 *
cookõ
)

707 
cookõ
->
èsk_fun
(cookõ->
¨g
);

708 
π_£m_brﬂdˇ°
(&
cookõ
->
£m
);

709 
π_£m_dñëe
(&
cookõ
->
£m
);

713 
ölöe
 
±hªad_¸óã
(
±hªad_t
 *
thªad
, c⁄° 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
)

715 *
cookõ_mem
;

717 
cookõ_mem
 = (*)
π_mÆloc
((
±hªad_cookõ_t
Ë+ 
L1_CACHE_BYTES
);

718 i‡(
cookõ_mem
) {

719 
±hªad_cookõ_t
 *
cookõ
;

720 
îr
;

722 
cookõ
 = (
±hªad_cookõ_t
 *)–((()
cookõ_mem
Ë+ (()
L1_CACHE_BYTES
)) & ~((()L1_CACHE_BYTES) - 1UL) );

723 
cookõ
->cookõ = 
cookõ_mem
;

724 (
cookõ
->
èsk
).
magic
 = 0;

725 
cookõ
->
èsk_fun
 = (*)
°¨t_routöe
;

726 
cookõ
->
¨g
 = ()arg;

727 i‡(!(
îr
 = 
π_èsk_öô
(&
cookõ
->
èsk
, (*)
posix_wøµî_fun
, ()cookõ, (
©å
Ë?áâr->
°acksize
 : 
STACK_SIZE
, (©åË?áâr->
¥i‹ôy
 : 
RT_SCHED_LOWEST_PRIORITY
, 1, 
NULL
))) {

728 
π_ty≥d_£m_öô
(&
cookõ
->
£m
, 0, 
BIN_SEM
 | 
FIFO_Q
);

729 
π_èsk_ªsume
(&
cookõ
->
èsk
);

730 *
thªad
 = &
cookõ
->
èsk
;

733 
π_‰ì
(
cookõ
->cookie);

734  
îr
;

737  -
ENOMEM
;

740 
ölöe
 
±hªad_yõld
()

742 
π_èsk_yõld
();

746 
ölöe
 
±hªad_exô
(*
ªtvÆ
)

748 
RT_TASK
 *
π_èsk
;

749 
SEM
 *
£m
;

750 
π_èsk
 = 
π_whﬂmi
();

751 
£m
 = &((
±hªad_cookõ_t
 *)
π_èsk
)->sem;

752 
π_£m_brﬂdˇ°
(
£m
);

753 
π_£m_dñëe
(
£m
);

754 
π_èsk
->
ªtvÆ
 = ()retval;

755 
π_èsk_su•íd
(
π_èsk
);

758 
ölöe
 
±hªad_joö
(
±hªad_t
 
thªad
, **
thªad_ªtu∫
)

760 
ªtvÆ1
, 
ªtvÆ2
;

761 
ªtvÆ_thªad
;

762 
SEM
 *
£m
;

763 
£m
 = &((
±hªad_cookõ_t
 *)
thªad
)->sem;

764 i‡(
π_whﬂmi
()->
¥i‹ôy
 !
RT_SCHED_LINUX_PRIORITY
){

765 
ªtvÆ1
 = 
π_£m_waô
(
£m
);

767 (
ªtvÆ1
 = 
π_£m_waô_if
(
£m
)) <= 0) {

768 
m¶ìp
(10);

772 
ªtvÆ_thªad
 = ((
RT_TASK
 *)
thªad
)->
ªtvÆ
;

773 i‡(
thªad_ªtu∫
) {

774 *
thªad_ªtu∫
 = (*)
ªtvÆ_thªad
;

776 
ªtvÆ2
 = 
π_èsk_dñëe
(
thªad
);

777 
π_‰ì
(((
±hªad_cookõ_t
 *)
thªad
)->
cookõ
);

778  (
ªtvÆ1
Ë?ÑëvÆ1 : 
ªtvÆ2
;

781 
ölöe
 
±hªad_ˇn˚l
(
±hªad_t
 
thªad
)

783 
ªtvÆ
;

784 i‡(!
thªad
) {

785 
thªad
 = 
π_whﬂmi
();

787 
ªtvÆ
 = 
π_èsk_dñëe
(
thªad
);

788 
π_‰ì
(((
±hªad_cookõ_t
 *)
thªad
)->
cookõ
);

789  
ªtvÆ
;

792 
ölöe
 
±hªad_equÆ
(
±hªad_t
 
thªad1
,±hªad_à
thªad2
)

794  
thªad1
 =
thªad2
;

797 
ölöe
 
±hªad_t
 
±hªad_£lf
()

799  
π_whﬂmi
();

802 
ölöe
 
±hªad_©å_öô
(
±hªad_©å_t
 *
©å
)

804 
©å
->
°acksize
 = 
STACK_SIZE
;

805 
©å
->
pﬁicy
 = 
SCHED_FIFO
;

806 
©å
->
º_qu™tum_ns
 = 
RR_QUANTUM_NS
;

807 
©å
->
¥i‹ôy
 = 1;

811 
ölöe
 
±hªad_©å_de°roy
(
±hªad_©å_t
 *
©å
)

816 
ölöe
 
±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 *
©å
, c⁄° 
sched_∑øm
 *
∑øm
)

818 if(
∑øm
->
sched_¥i‹ôy
 < 
MIN_PRIO
 ||Ö¨am->sched_¥i‹ôy > 
MAX_PRIO
) {

819 (-
EINVAL
);

821 
©å
->
¥i‹ôy
 = 
MAX_PRIO
 - 
∑øm
->
sched_¥i‹ôy
;

825 
ölöe
 
±hªad_©å_gësched∑øm
(c⁄° 
±hªad_©å_t
 *
©å
, 
sched_∑øm
 *
∑øm
)

827 
∑øm
->
sched_¥i‹ôy
 = 
MAX_PRIO
 - 
©å
->
¥i‹ôy
;

831 
ölöe
 
±hªad_©å_£tschedpﬁicy
(
±hªad_©å_t
 *
©å
, 
pﬁicy
)

833 if(
pﬁicy
 !
SCHED_FIFO
 &&Öﬁicy !
SCHED_RR
) {

834  -
EINVAL
;

836 i‡((
©å
->
pﬁicy
 =ÖﬁicyË=
SCHED_RR
) {

837 
π_£t_sched_pﬁicy
(
π_whﬂmi
(), 
SCHED_RR
, 
©å
->
º_qu™tum_ns
);

843 
ölöe
 
±hªad_©å_gëschedpﬁicy
(c⁄° 
±hªad_©å_t
 *
©å
, *
pﬁicy
)

845 *
pﬁicy
 = 
©å
->policy;

849 
ölöe
 
±hªad_©å_£tschedº
(
±hªad_©å_t
 *
©å
, 
º_qu™tum_ns
)

851 
©å
->
º_qu™tum_ns
 =Ñr_quantum_ns;

856 
ölöe
 
±hªad_©å_gëschedº
(c⁄° 
±hªad_©å_t
 *
©å
, *
º_qu™tum_ns
)

858 *
º_qu™tum_ns
 = 
©å
->rr_quantum_ns;

862 
ölöe
 
±hªad_©å_£t°acksize
(
±hªad_©å_t
 *
©å
, 
°acksize
)

864 
©å
->
°acksize
 = stacksize;

868 
ölöe
 
±hªad_©å_gë°acksize
(c⁄° 
±hªad_©å_t
 *
©å
, *
°acksize
)

870 *
°acksize
 = 
©å
->stacksize;

874 
ölöe
 
±hªad_©å_£t°ack
(
±hªad_©å_t
 *
©å
, *
°ackaddr
, 
°acksize
)

876 
©å
->
°acksize
 = stacksize;

880 
ölöe
 
±hªad_©å_gë°ack
(c⁄° 
±hªad_©å_t
 *
©å
, **
°ackaddr
, *
°acksize
)

882 *
°acksize
 = 
©å
->stacksize;

886 
ölöe
 
±hªad_ã°ˇn˚l
()

888 
π_èsk_dñëe
(
π_whﬂmi
());

889 
±hªad_exô
(
NULL
);

896 
ölöe
 
±hªad_•ö_öô
(
±hªad_•ölock_t
 *
lock
, 
psh¨ed
)

898 i‡(
lock
) {

899 *
lock
 = 0UL;

902  -
EINVAL
;

905 
ölöe
 
±hªad_•ö_de°roy
(
±hªad_•ölock_t
 *
lock
)

907 i‡(
lock
) {

908 i‡(*
lock
) {

909  -
EBUSY
;

911 *
lock
 = 0UL;

914  -
EINVAL
;

917 
ölöe
 
±hªad_•ö_lock
(
±hªad_•ölock_t
 *
lock
)

919 i‡(
lock
) {

920 
tid
;

921 i‡(((*)
lock
)[0] =(
tid
 = ()(
±hªad_£lf
()))) {

922  -
EDEADLOCK
;

924 
©omic_cmpxchg
((
©omic_t
 *)
lock
, 0, 
tid
));

927  -
EINVAL
;

930 
ölöe
 
±hªad_•ö_åylock
(
±hªad_•ölock_t
 *
lock
)

932 i‡(
lock
) {

933 
tid
;

934 
tid
 = ()(
±hªad_£lf
());

935  
©omic_cmpxchg
((
©omic_t
 *)
lock
, 0, 
tid
Ë? -
EBUSY
 : 0;

937  -
EINVAL
;

940 
ölöe
 
±hªad_•ö_u∆ock
(
±hªad_•ölock_t
 *
lock
)

942 i‡(
lock
) {

944 *
lock
 = 0UL;

947 i‡(*
lock
 !()
±hªad_£lf
()) {

948  -
EPERM
;

950 *
lock
 = 0UL;

954  -
EINVAL
;

957 
ölöe
 
˛ock_gëªs
(
˛ockid
, 
time•ec
 *
ªs
)

959 
ªs
->
tv_£c
 = 0;

960 i‡(!(
ªs
->
tv_n£c
 = 
cou¡2«no
(1))) {

961 
ªs
->
tv_n£c
 = 1;

966 
ölöe
 
˛ock_gëtime
(
˛ockid
, 
time•ec
 *
ç
)

968 
cou¡2time•ec
(
π_gë_time
(), 
ç
);

972 
ölöe
 
˛ock_£âime
(
˛ockid
, c⁄° 
time•ec
 *
ç
)

977 
ölöe
 
˛ock_«no¶ìp
(
˛ockid
, 
Êags
, c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

979 
RTIME
 
expúe
;

980 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

981  -
EINVAL
;

983 
π_¶ìp_u¡û
(
expúe
 = 
Êags
 ? 
time•ec2cou¡
(
rqç
Ë: 
π_gë_time
() +Åimespec2count(rqtp));

984 i‡((
expúe
 -
π_gë_time
()) > 0) {

985 i‡(
rmç
) {

986 
cou¡2time•ec
(
expúe
, 
rmç
);

988  -
EINTR
;

993 
ölöe
 
«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

995 
RTIME
 
expúe
;

996 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 <

998  -
EINVAL
;

1000 
π_¶ìp_u¡û
(
expúe
 = 
π_gë_time
(Ë+ 
time•ec2cou¡
(
rqç
));

1001 i‡((
expúe
 -
π_gë_time
()) > 0) {

1002 i‡(
rmç
) {

1003 
cou¡2time•ec
(
expúe
, 
rmç
);

1005  -
EINTR
;

1014 
	sπ_h™dÀr_suµ‹t
 {

1015 (*
_fun˘i⁄
)(
sigvÆ_t
);

1016 
sigvÆ_t
 
fu«rg
;

1019 #i‚de‡
RTAI_POSIX_HANDLER_WRPR


1020 
	#RTAI_POSIX_HANDLER_WRPR


	)

1022 
h™dÀr_wΩr
(
sup_d©a
)

1024 ((
π_h™dÀr_suµ‹t
 *)
sup_d©a
)->
_fun˘i⁄
(((π_h™dÀr_suµ‹à*)sup_d©a)->
fu«rg
);

1029 
ölöe
 
timî_¸óã
(
˛ockid_t
 
˛ockid
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

1031 
π_èskÀt_°ru˘
 *
timî
;

1032 
π_h™dÀr_suµ‹t
 *
h™dÀr_d©a
;

1034 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

1035  -
EINTR
;

1037 i‡(
evp
 =
NULL
) {

1038  -
EINTR
;

1040 i‡(
evp
->
sigev_nŸify
 =
SIGEV_SIGNAL
) {

1041  -
EINTR
;

1042 } i‡(
evp
->
sigev_nŸify
 =
SIGEV_THREAD
) {

1043 
timî
 = 
π_mÆloc
((
π_èskÀt_°ru˘
));

1044 
h™dÀr_d©a
 = 
π_mÆloc
((
π_h™dÀr_suµ‹t
));

1045 
h™dÀr_d©a
->
fu«rg
 = 
evp
->
sigev_vÆue
;

1046 
h™dÀr_d©a
->
_fun˘i⁄
 = 
evp
->
_sigev_un
.
_sigev_thªad
._function;

1047 *
timîid
 = 
π_±imî_¸óã
(
timî
, 
h™dÀr_wΩr
, ()
h™dÀr_d©a
, 1, 0);

1049  -
EINTR
;

1056 
ölöe
 
timî_gëovîrun
(
timî_t
 
timîid
)

1058  
π_±imî_ovîrun
(
timîid
);

1061 
ölöe
 
timî_gëtime
(
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
)

1063 
RTIME
 
timî_times
[2];

1065 
π_±imî_gëtime
(
timîid
, 
timî_times
);

1066 
cou¡2time•ec
–
timî_times
[0], &(
vÆue
->
ô_vÆue
) );

1067 
cou¡2time•ec
–
timî_times
[1], &(
vÆue
->
ô_öãrvÆ
) );

1072 
ölöe
 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
, ôimî•e¯*
ovÆue
)

1074 i‡(
ovÆue
 !
NULL
) {

1075 
timî_gëtime
(
timîid
, 
ovÆue
);

1077 
π_±imî_£âime
(
timîid
, 
vÆue
, 0, 
Êags
);

1082 
ölöe
 
timî_dñëe
(
timî_t
 
timîid
)

1084 
π_±imî_dñëe
(
timîid
, 0);

1088 #ifde‡
__˝lu•lus


1094 
	~<î∫o.h
>

1095 
	~<f˙é.h
>

1096 
	~<uni°d.h
>

1097 
	~<sig«l.h
>

1098 
	~<sys/ty≥s.h
>

1099 
	~<sys/°©.h
>

1100 
	~<sys/mm™.h
>

1101 
	~<°dlib.h
>

1102 
	~<˘y≥.h
>

1104 
	~<£m≠h‹e.h
>

1105 
	~<limôs.h
>

1106 
	~<±hªad.h
>

1108 
èsk_°ru˘
;

1110 #unde‡
SEM_VALUE_MAX


1111 
	#SEM_VALUE_MAX
 (
SEM_TIMOUT
 - 1)

	)

1112 
	#SEM_BINARY
 (0x7FFFFFFF)

	)

1114 
	#RTAI_PNAME_MAXSZ
 6

	)

1115 
	#SET_ADR
(
s
Ë(((**)s)[0])

	)

1116 
	#SET_VAL
(
s
Ë(((**)s)[1])

	)

1117 
	#INC_VAL
(
s
Ë
	`©omic_öc
((
©omic_t
 *)&(((**)s)[1]))

	)

1118 
	#DEC_VAL
(
s
Ë
	`©omic_dec_™d_ã°
((
©omic_t
 *)&(((**)s)[1]))

	)

1119 
	#TST_VAL
(
s
Ë(((**)s)[1])

	)

1121 
	#LINUX_SIGNAL
 32

	)

1122 
	#LINUX_RT_SIGNAL
 32

	)

1124 
	~<asm/πai_©omic.h
>

1125 
	~<πai_£m.h
>

1126 
	~<πai_sig«l.h
>

1127 
	~<πai_èskÀts.h
>

1129 #ifde‡
__˝lu•lus


1137 
ölöe
 
MAKE_SOFT
()

1139 i‡(
π_is_h¨d_ªÆ_time
(
π_buddy
())) {

1140 
π_make_so·_ªÆ_time
();

1146 
	#MAKE_HARD
(
hs
Ëdÿ{ i‡(hsË
	`π_make_h¨d_ªÆ_time
(); } 0)

	)

1148 
RTAI_PROTO
(, 
cou¡2time•ec
, (
RTIME
 
π
, 
time•ec
 *
t
))

1150 
t
->
tv_£c
 = (
π
 = 
cou¡2«no
(rt))/1000000000;

1151 
t
->
tv_n£c
 = 
π
 -Å->
tv_£c
*1000000000LL;

1154 
RTAI_PROTO
(, 
«nos2time•ec
, (
RTIME
 
π
, 
time•ec
 *
t
))

1156 
t
->
tv_£c
 = 
π
/1000000000;

1157 
t
->
tv_n£c
 = 
π
 -Å->
tv_£c
*1000000000LL;

1160 
RTAI_PROTO
(
RTIME
, 
time•ec2cou¡
, (c⁄° 
time•ec
 *
t
))

1162  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
);

1165 
RTAI_PROTO
(
RTIME
, 
time•ec2«nos
,(c⁄° 
time•ec
 *
t
))

1167  
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
;

1170 
RTAI_PROTO
(, 
±hªad_gë_«me_≈
, (*
adr
, *
«meid
))

1172  (*
«meid
 = 
π_gë_«me
(
SET_ADR
(
adr
))Ë? 0 : 
EINVAL
;

1175 
RTAI_PROTO
(, 
±hªad_gë_adr_≈
, (
«meid
, *
adr
))

1177  (
SET_ADR
(
adr
Ë
π_gë_adr
(
«meid
)Ë? 0 : 
EINVAL
;

1184 
	#°r2u¥
(
si
, 
so
) \

1185 dÿ{ 
i
; ò0; i <
RTAI_PNAME_MAXSZ
; i++Ë
so
[i] = 
	`touµî
(
si
[i]); } 0)

	)

1187 
RTAI_PROTO
(
£m_t
 *, 
__wøp_£m_›í
, (c⁄° *
«meö
, 
oÊags
, 
vÆue
, 
ty≥
))

1189 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1190 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

1191 
î∫o
 = 
ENAMETOOLONG
;

1192  
SEM_FAILED
;

1194 
°r2u¥
(
«meö
, 
«me
);

1195 i‡(!
oÊags
 || 
vÆue
 <
SEM_VALUE_MAX
) {

1196 *
t£m
;

1197 
h™dÀ
 = 0UL;

1198 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
(name), value,Åype, &handle };

1199 i‡((
t£m
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1200 
fd
;

1201 *
p£m
;

1202 i‡(
h™dÀ
 =()
t£m
) {

1203 i‡(
oÊags
 =(
O_CREAT
 | 
O_EXCL
)) {

1204 
î∫o
 = 
EEXIST
;

1205  
SEM_FAILED
;

1207 (
fd
 = 
›í
(
«me
, 
O_RDONLY
)Ë<0 || 
ªad
(fd, &
p£m
, (psem)) != (psem));

1208 
˛o£
(
fd
);

1210 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
);

1211 
p£m
 = 
mÆloc
((*));

1212 ((**)
p£m
)[0] = 
t£m
;

1213 
fd
 = 
›í
(
«me
, 
O_CREAT
 | 
O_WRONLY
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

1214 
wrôe
(
fd
, &
p£m
, (psem));

1215 
˛o£
(
fd
);

1217  (
£m_t
 *)
p£m
;

1219 
î∫o
 = 
ENOSPC
;

1220  
SEM_FAILED
;

1222 
î∫o
 = 
EINVAL
;

1223  
SEM_FAILED
;

1226 
RTAI_PROTO
(, 
__wøp_£m_˛o£
, (
£m_t
 *
£m
))

1228 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1229 i‡(
¨g
.
£m
) {

1230 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1231 
num2«m
(
π_gë_«me
(
SET_ADR
(
£m
)), 
«me
);

1232 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1233 
î∫o
 = 
EBUSY
;

1236 i‡(!
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]) {

1237 !
u∆ök
(
«me
));

1238 
‰ì
(
£m
);

1242 
î∫o
 = 
EINVAL
;

1246 
RTAI_PROTO
(, 
__wøp_£m_u∆ök
, (c⁄° *
«meö
))

1248 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1249 
fd
;

1250 *
p£m
;

1251 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

1252 
î∫o
 = 
ENAMETOOLONG
;

1255 
°r2u¥
(
«meö
, 
«me
);

1256 i‡((
fd
 = 
›í
(
«me
, 
O_RDONLY
)Ë> 0 && 
ªad
(fd, &
p£m
, (psem)) == (psem)) {

1257  
__wøp_£m_˛o£
((
£m_t
 *)
p£m
);

1259 
î∫o
 = 
ENOENT
;

1263 
RTAI_PROTO
(, 
__wøp_£m_öô
, (
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
))

1265 i‡(
vÆue
 <
SEM_VALUE_MAX
) {

1266 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), vÆue, 
CNT_SEM
 | 
PRIO_Q
, 
NULL
 };

1267 i‡(!(
SET_ADR
(
£m
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1268 
î∫o
 = 
ENOSPC
;

1273 
î∫o
 = 
EINVAL
;

1277 
RTAI_PROTO
(, 
__wøp_£m_de°roy
, (
£m_t
 *
£m
))

1279 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1280 i‡(
¨g
.
£m
) {

1281 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1282 
î∫o
 = 
EBUSY
;

1285 
SET_ADR
(
£m
Ë
NULL
;

1286 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1289 
î∫o
 = 
EINVAL
;

1293 
RTAI_PROTO
(, 
__wøp_£m_waô
, (
£m_t
 *
£m
))

1295 
ﬁdty≥
, 
ªtvÆ
 = -1;

1296 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1297 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1298 
±hªad_ã°ˇn˚l
();

1299 i‡(
¨g
.
£m
) {

1300 i‡(
abs
(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
]Ë>
RTE_BASE
) {

1301 
î∫o
 = 
EINTR
;

1303 
ªtvÆ
 = 0;

1306 
î∫o
 = 
EINVAL
;

1308 
±hªad_ã°ˇn˚l
();

1309 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1310  
ªtvÆ
;

1313 
RTAI_PROTO
(, 
__wøp_£m_åywaô
, (
£m_t
 *
£m
))

1315 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1316 i‡(
¨g
.
£m
) {

1317 
ªtvÆ
;

1318 i‡(
abs
(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
]Ë>
RTE_BASE
) {

1319 
î∫o
 = 
EINTR
;

1322 i‡(
ªtvÆ
 <= 0) {

1323 
î∫o
 = 
EAGAIN
;

1328 
î∫o
 = 
EINVAL
;

1332 
RTAI_PROTO
(, 
__wøp_£m_timedwaô
, (
£m_t
 *
£m
, c⁄° 
time•ec
 *
ab°ime
))

1334 
ﬁdty≥
, 
ªtvÆ
 = -1;

1335 °ru˘ { *
£m
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(£m), 
time•ec2cou¡
(
ab°ime
) };

1336 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1337 
±hªad_ã°ˇn˚l
();

1338 i‡(
¨g
.
£m
) {

1339 
ªt
;

1340 i‡(
abs
(
ªt
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_TIMOUT
) {

1341 
î∫o
 = 
ETIMEDOUT
;

1342 } i‡(
ªt
 >
RTE_BASE
) {

1343 
î∫o
 = 
EINTR
;

1345 
ªtvÆ
 = 0;

1348 
î∫o
 = 
EINVAL
;

1350 
±hªad_ã°ˇn˚l
();

1351 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1352  
ªtvÆ
;

1355 
RTAI_PROTO
(, 
__wøp_£m_po°
, (
£m_t
 *
£m
))

1357 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1358 i‡(
¨g
.
£m
) {

1359 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
);

1362 
î∫o
 = 
EINVAL
;

1366 
RTAI_PROTO
(, 
__wøp_£m_gëvÆue
, (
£m_t
 *
£m
, *
svÆ
))

1368 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1369 i‡(
¨g
.
£m
) {

1370 *
svÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_COUNT
, &
¨g
).
i
[
LOW
];

1373 
î∫o
 = 
EINVAL
;

1381 
	#RTAI_MUTEX_DEFAULT
 (1 << 0)

	)

1382 
	#RTAI_MUTEX_ERRCHECK
 (1 << 1)

	)

1383 
	#RTAI_MUTEX_RECURSIVE
 (1 << 2)

	)

1384 
	#RTAI_MUTEX_PSHARED
 (1 << 3)

	)

1386 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_öô
, (
±hªad_muãx_t
 *
muãx
, c⁄° 
±hªad_muãx©å_t
 *
muãx©å
))

1388 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), !
muãx©å
 || (((*)muãx©å)[0] & 
RTAI_MUTEX_DEFAULT
Ë? 
RESEM_BINSEM
 : (((*)muãx©å)[0] & 
RTAI_MUTEX_ERRCHECK
Ë? 
RESEM_CHEKWT
 : 
RESEM_RECURS
, 
RES_SEM
, 
NULL
 };

1389 
SET_VAL
(
muãx
) = 0;

1390 i‡(!(
SET_ADR
(
muãx
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1391  
ENOMEM
;

1396 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_de°roy
, (
±hªad_muãx_t
 *
muãx
))

1398 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1399 i‡(
¨g
.
muãx
) {

1400 
cou¡
;

1401 i‡(
TST_VAL
(
muãx
)) {

1402  
EBUSY
;

1404 i‡((
cou¡
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
]) <= 0 || count > 1) {

1405 i‡(
cou¡
 > 1 && cou¡ !
RTE_DEADLOK
) {

1406 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
);

1408  
EBUSY
;

1410 
SET_ADR
(
muãx
Ë
NULL
;

1411 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1414  
EINVAL
;

1417 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_lock
, (
±hªad_muãx_t
 *
muãx
))

1419 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1420 i‡(
¨g
.
muãx
) {

1421 
ªtvÆ
;

1422 (
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
]Ë=
RTE_UNBLKD
);

1423  
abs
(
ªtvÆ
Ë< 
RTE_BASE
 ? 0 : 
EDEADLOCK
;

1425  
EINVAL
;

1428 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_åylock
, (
±hªad_muãx_t
 *
muãx
))

1430 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1431 i‡(
¨g
.
muãx
) {

1432 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] <= 0) {

1433  
EBUSY
;

1437  
EINVAL
;

1440 #ifde‡
__USE_XOPEN2K


1441 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_timedlock
, (
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
))

1443 °ru˘ { *
muãx
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(muãx), 
time•ec2cou¡
(
ab°ime
) };

1444 i‡(
¨g
.
muãx
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1445 
ªtvÆ
;

1446 (
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_UNBLKD
);

1447 i‡(
abs
(
ªtvÆ
Ë< 
RTE_BASE
) {

1450 i‡(
ªtvÆ
 =
RTE_TIMOUT
) {

1451  
ETIMEDOUT
;

1454  
EINVAL
;

1458 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_u∆ock
, (
±hªad_muãx_t
 *
muãx
))

1460 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1461 i‡(
¨g
.
muãx
) {

1462  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
).
i
[
LOW
] =
RTE_PERM
 ? 
EPERM
 : 0;

1464  
EINVAL
;

1467 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_öô
, (
±hªad_muãx©å_t
 *
©å
))

1469 ((*)
©å
)[0] = 
RTAI_MUTEX_DEFAULT
;

1473 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_de°roy
, (
±hªad_muãx©å_t
 *
©å
))

1478 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_gëpsh¨ed
, (c⁄° 
±hªad_muãx©å_t
 *
©å
, *
psh¨ed
))

1480 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1484 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_£çsh¨ed
, (
±hªad_muãx©å_t
 *
©å
, 
psh¨ed
))

1486 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1487 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1488 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1490 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1494  
EINVAL
;

1497 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_£ây≥
, (
±hªad_muãx©å_t
 *
©å
, 
köd
))

1499 
köd
) {

1500 
PTHREAD_MUTEX_DEFAULT
:

1501 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_DEFAULT
;

1503 
PTHREAD_MUTEX_ERRORCHECK
:

1504 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_DEFAULT
)Ë| 
RTAI_MUTEX_ERRCHECK
;

1506 
PTHREAD_MUTEX_RECURSIVE
:

1507 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_RECURSIVE
;

1510  
EINVAL
;

1515 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_gëty≥
, (c⁄° 
±hªad_muãx©å_t
 *
©å
, *
köd
))

1517 ((*)
©å
)[0] & (
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
 | 
RTAI_MUTEX_RECURSIVE
)) {

1518 
RTAI_MUTEX_DEFAULT
:

1519 *
köd
 = 
PTHREAD_MUTEX_DEFAULT
;

1521 
RTAI_MUTEX_ERRCHECK
:

1522 *
köd
 = 
PTHREAD_MUTEX_ERRORCHECK
;

1524 
RTAI_MUTEX_RECURSIVE
:

1525 *
köd
 = 
PTHREAD_MUTEX_RECURSIVE
;

1531 
RTAI_PROTO
(, 
±hªad_make_≥riodic_≈
, (
±hªad_t
 
thªad
, 
time•ec
 *
°¨t_dñay
, time•e¯*
≥riod
))

1533 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = { 
NULL
, 
°¨t_dñay
->
tv_£c
*1000000000LL + sèπ_dñay->
tv_n£c
,Öeriod->tv_sec*1000000000LL +Öeriod->tv_nsec };

1534 
ªtvÆ
;

1535  !(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC_NS
, &
¨g
).
i
[
LOW
]Ë? 0 :ÑëvÆ =
RTE_UNBLKD
 ? 
EINTR
 : 
ETIMEDOUT
;

1538 
RTAI_PROTO
(, 
±hªad_waô_≥riod_≈
, ())

1540 °ru˘ { 
dummy
; } 
¨g
;

1541  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAIT_PERIOD
, &
¨g
).
i
[
LOW
];

1548 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_öô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d_©å
))

1550 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), 0, 
BIN_SEM
 | 
PRIO_Q
, 
NULL
 };

1551 i‡(!(
SET_ADR
(
c⁄d
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1552  
ENOMEM
;

1557 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_de°roy
, (
±hªad_c⁄d_t
 *
c⁄d
))

1559 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1560 i‡(
¨g
.
c⁄d
) {

1561 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1562  
EBUSY
;

1564 
SET_ADR
(
c⁄d
Ë
NULL
;

1565 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1570 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_sig«l
, (
±hªad_c⁄d_t
 *
c⁄d
))

1572 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1573 i‡(
¨g
.
c⁄d
) {

1574 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_SIGNAL
, &
¨g
);

1577  
EINVAL
;

1580 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_brﬂdˇ°
, (
±hªad_c⁄d_t
 *
c⁄d
))

1582 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1583 i‡(
¨g
.
c⁄d
) {

1584 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_BROADCAST
, &
¨g
);

1587  
EINVAL
;

1590 
öã∫Æ_c⁄d_˛ónup
(*
muãx
Ë{ 
DEC_VAL
(mutex); }

1592 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_waô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
))

1594 
ﬁdty≥
, 
ªtvÆ
;

1595 °ru˘ { *
c⁄d
; *
muãx
; } 
¨g
 = { 
SET_ADR
(cond), SET_ADR(mutex) };

1596 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1597 
±hªad_ã°ˇn˚l
();

1598 i‡(
¨g
.
c⁄d
 &&árg.
muãx
) {

1599 
±hªad_˛ónup_push
(
öã∫Æ_c⁄d_˛ónup
, 
muãx
);

1600 
INC_VAL
(
muãx
);

1601 
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT
, &
¨g
).
i
[
LOW
];

1602 
ªtvÆ
 = !ªtvÆ ||ÑëvÆ =
RTE_UNBLKD
 ? 0 : 
EPERM
;

1603 
DEC_VAL
(
muãx
);

1604 
±hªad_˛ónup_p›
(0);

1606 
ªtvÆ
 = 
EINVAL
;

1608 
±hªad_ã°ˇn˚l
();

1609 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1610  
ªtvÆ
;

1613 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_timedwaô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
))

1615 
ﬁdty≥
, 
ªtvÆ
;

1616 °ru˘ { *
c⁄d
; *
muãx
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(c⁄d), SET_ADR(muãx), 
time•ec2cou¡
(
ab°ime
) };

1617 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1618 
±hªad_ã°ˇn˚l
();

1619 i‡(
¨g
.
c⁄d
 &&árg.
muãx
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1620 
±hªad_˛ónup_push
(
öã∫Æ_c⁄d_˛ónup
, 
muãx
);

1621 
INC_VAL
(
muãx
);

1622 i‡(
abs
(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_TIMOUT
) {

1623 
ªtvÆ
 = 
ETIMEDOUT
;

1625 
ªtvÆ
 = !ªtvÆ ? 0 : 
EPERM
;

1627 
DEC_VAL
(
muãx
);

1628 
±hªad_˛ónup_p›
(0);

1630 
ªtvÆ
 = 
EINVAL
;

1632 
±hªad_ã°ˇn˚l
();

1633 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1634  
ªtvÆ
;

1637 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_öô
, (
±hªad_c⁄d©å_t
 *
©å
))

1639 ((*)
©å
)[0] = 0;

1643 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_de°roy
, (
±hªad_c⁄d©å_t
 *
©å
))

1648 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_gëpsh¨ed
, (c⁄° 
±hªad_c⁄d©å_t
 *
©å
, *
psh¨ed
))

1650 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1654 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_£çsh¨ed
, (
±hªad_c⁄d©å_t
 *
©å
, 
psh¨ed
))

1656 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1657 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1658 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1660 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1664  
EINVAL
;

1667 #i‚de‡
CLOCK_MONOTONIC


1668 
	#CLOCK_MONOTONIC
 1

	)

1671 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_£t˛ock
, (
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 
˛ockid
))

1673 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

1674 ((*)
c⁄d©å
)[0] = 
˛ockid
;

1677  
EINVAL
;

1680 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_gë˛ock
, (
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 *
˛ockid
))

1682 i‡(
˛ockid
) {

1683 *
˛ockid
 = ((*)
c⁄d©å
)[0];

1686  
EINVAL
;

1693 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_öô
, (
±hªad_rwlock_t
 *
rwlock
, 
±hªad_rwlock©å_t
 *
©å
))

1695 °ru˘ { 
«me
; 
ty≥
; } 
¨g
 = { 
π_gë_«me
(0), 
RESEM_CHEKWT
 };

1696 ((
±hªad_rwlock_t
 **)
rwlock
)[0] = (±hªad_rwlock_à*)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_INIT
, &
¨g
).
v
[
LOW
];

1700 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_de°roy
, (
±hªad_rwlock_t
 *
rwlock
))

1702 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1703 i‡(
¨g
.
rwlock
) {

1704  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_DELETE
, &
¨g
).
i
[
LOW
] > 0 ? 0 : 
EINVAL
;

1706  
EINVAL
;

1709 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_rdlock
, (
±hªad_rwlock_t
 *
rwlock
))

1711 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1712 i‡(
¨g
.
rwlock
) {

1713  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK
, &
¨g
).
i
[
LOW
] ? 
EDEADLOCK
 : 0;

1715  
EINVAL
;

1718 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_åyrdlock
, (
±hªad_rwlock_t
 *
rwlock
))

1720 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1721 i‡(
¨g
.
rwlock
) {

1722  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_IF
, &
¨g
).
i
[
LOW
] ? 
EBUSY
 : 0;

1724  
EINVAL
;

1727 #ifde‡
__USE_XOPEN2K


1728 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_timedrdlock
, (
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
))

1730 °ru˘ { *
rwlock
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
‘wlock), 
time•ec2cou¡
(
ab°ime
) };

1731 i‡(
¨g
.
rwlock
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1732  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_UNTIL
, &
¨g
).
i
[
LOW
] ? 
ETIMEDOUT
 : 0;

1734  
EINVAL
;

1738 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_wæock
, (
±hªad_rwlock_t
 *
rwlock
))

1740 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1741 i‡(
¨g
.
rwlock
) {

1742  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK
, &
¨g
).
i
[
LOW
] ? 
EDEADLOCK
 : 0;

1744  
EINVAL
;

1747 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_åywæock
, (
±hªad_rwlock_t
 *
rwlock
))

1749 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1750 i‡(
¨g
.
rwlock
) {

1751  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_IF
, &
¨g
).
i
[
LOW
] ? 
EBUSY
 : 0;

1753  
EINVAL
;

1756 #ifde‡
__USE_XOPEN2K


1757 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_timedwæock
, (
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
))

1759 °ru˘ { *
rwlock
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
‘wlock), 
time•ec2cou¡
(
ab°ime
) };

1760 i‡(
¨g
.
rwlock
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1761  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_UNTIL
, &
¨g
).
i
[
LOW
] ? 
ETIMEDOUT
 : 0;

1763  
EINVAL
;

1767 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_u∆ock
, (
±hªad_rwlock_t
 *
rwlock
))

1769 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1770 i‡(
¨g
.
rwlock
) {

1771  !
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_UNLOCK
, &
¨g
).
i
[
LOW
] ? 0 : 
EPERM
;

1773  
EINVAL
;

1776 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_öô
, (
±hªad_rwlock©å_t
 *
©å
))

1778 ((*)
©å
)[0] = 0;

1782 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_de°roy
, (
±hªad_rwlock©å_t
 *
©å
))

1787 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_gëpsh¨ed
, (c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
psh¨ed
))

1789 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1795 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_£çsh¨ed
, (
±hªad_rwlock©å_t
 *
©å
, 
psh¨ed
))

1797 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1798 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1799 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1801 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1805  
EINVAL
;

1808 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_gëköd_≈
, (c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
¥ef
))

1813 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_£tköd_≈
, (
±hªad_rwlock©å_t
 *
©å
, 
¥ef
))

1822 #ifde‡
__USE_XOPEN2K


1824 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_öô
,(
±hªad_b¨rõr_t
 *
b¨rõr
, c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, 
cou¡
))

1826 i‡(
cou¡
 > 0) {

1827 °ru˘ { 
«me
; 
cou¡
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), cou¡, 
CNT_SEM
 | 
PRIO_Q
, 
NULL
 };

1828  (((
±hªad_b¨rõr_t
 **)
b¨rõr
)[0] = (±hªad_b¨rõr_à*)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
]Ë? 0 : 
ENOMEM
;

1830  
EINVAL
;

1833 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_de°roy
,(
±hªad_b¨rõr_t
 *
b¨rõr
))

1835 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(
b¨rõr
) };

1836 
SET_ADR
(
b¨rõr
Ë
NULL
;

1837 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1838  
EBUSY
;

1840  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
] =
RT_OBJINV
 ? 
EINVAL
 : 0;

1843 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_waô
,(
±hªad_b¨rõr_t
 *
b¨rõr
))

1845 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(
b¨rõr
) };

1846 i‡(
¨g
.
£m
) {

1847  !
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_BARRIER
, &
¨g
).
i
[
LOW
] ? 
PTHREAD_BARRIER_SERIAL_THREAD
 : 0;

1849  
EINVAL
;

1852 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_öô
, (
±hªad_b¨rõøâr_t
 *
©å
))

1854 ((*)
©å
)[0] = 
PTHREAD_PROCESS_PRIVATE
;

1858 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_de°roy
, (
±hªad_b¨rõøâr_t
 *
©å
))

1863 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_£çsh¨ed
, (
±hªad_b¨rõøâr_t
 *
©å
, 
psh¨ed
))

1865 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1866 ((*)
©å
)[0] = 
psh¨ed
;

1869  
EINVAL
;

1872 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_gëpsh¨ed
, (c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, *
psh¨ed
))

1874 *
psh¨ed
 = ((*)
©å
)[0];

1884 
	#PTHREAD_SOFT_REAL_TIME_NP
 1

	)

1885 
	#PTHREAD_HARD_REAL_TIME_NP
 2

	)

1887 
RTAI_PROTO
(, 
±hªad_£tsched∑øm_≈
, (
¥i‹ôy
, 
pﬁicy
, 
º_qu™tum_ns
, 
˝us_Ælowed
, 
mode
))

1889 
RT_TASK
 *
èsk
;

1890 i‡((
èsk
 = 
π_buddy
())) {

1891 
hs
;

1892 i‡(
˝us_Ælowed
) {

1893 
hs
 = 
MAKE_SOFT
();

1894 
π_èsk_öô_schmod
(0, 0, 0, 0, 0, 
˝us_Ælowed
);

1895 i‡(!
mode
) {

1896 
MAKE_HARD
(
hs
);

1899 i‡(
¥i‹ôy
 >= 0) {

1900 
π_ch™ge_¥io
(
èsk
, 
¥i‹ôy
);

1902 } i‡(
pﬁicy
 =
SCHED_FIFO
 ||Öﬁicy =
SCHED_RR
 || 
¥i‹ôy
 >0 || 
˝us_Ælowed
) {

1903 
π_èsk_öô_schmod
(
π_gë_«me
(
NULL
), 
¥i‹ôy
, 0, 0, 
pﬁicy
, 
˝us_Ælowed
);

1904 
π_grow_™d_lock_°ack
(
PTHREAD_STACK_MIN
);

1906  
EINVAL
;

1908 i‡(
pﬁicy
 =
SCHED_FIFO
 ||Öﬁicy =
SCHED_RR
) {

1909 
π_£t_sched_pﬁicy
(
èsk
, 
pﬁicy
 = 
SCHED_FIFO
 ? 0 : 1, 
º_qu™tum_ns
);

1911 i‡(
mode
) {

1912 i‡(
mode
 =
PTHREAD_HARD_REAL_TIME_NP
) {

1913 
π_make_h¨d_ªÆ_time
();

1915 
π_make_so·_ªÆ_time
();

1921 
RTAI_PROTO
(, 
±hªad_h¨d_ªÆ_time_≈
, ())

1923 
π_make_h¨d_ªÆ_time
();

1926 
RTAI_PROTO
(, 
±hªad_so·_ªÆ_time_≈
, ())

1928 
π_make_so·_ªÆ_time
();

1931 
RTAI_PROTO
(, 
±hªad_gëtid_≈
, ())

1933 °ru˘ { 
dummy
; } 
¨g
;

1934  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

1937 
	#PTHREAD_SOFT_REAL_TIME
 
PTHREAD_SOFT_REAL_TIME_NP


	)

1938 
	#PTHREAD_HARD_REAL_TIME
 
PTHREAD_HARD_REAL_TIME_NP


	)

1939 
	#±hªad_öô_ªÆ_time_≈
(
a
, 
b
, 
c
, 
d
, 
e
) \

1940 
	`±hªad_£tsched∑øm_≈
 (
b
, 
c
, 0, 
d
, 
e
)

	)

1941 
	#±hªad_make_h¨d_ªÆ_time_≈
() \

1942 
	`±hªad_h¨d_ªÆ_time_≈
()

	)

1943 
	#±hªad_make_so·_ªÆ_time_≈
() \

1944 
	`±hªad_so·_ªÆ_time_≈
()

	)

1948 
__ªÆ_±hªad_¸óã
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
);

1949 
RTAI_PROTO
(, 
__wøp_±hªad_¸óã
,(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
))

1951 
	~<sys/pﬁl.h
>

1953 
hs
, 
ªt
;

1954 
hs
 = 
MAKE_SOFT
();

1955 
ªt
 = 
__ªÆ_±hªad_¸óã
(
thªad
, 
©å
, 
°¨t_routöe
, 
¨g
);

1956 
MAKE_HARD
(
hs
);

1957  
ªt
;

1960 
	~<sys/mm™.h
>

1962 
	sloˇl_±hªad_¨gs_°ru˘
 { *(*
°¨t_routöe
)(*); *
¨g
; 
pùe
[3]; };

1964 #i‚de‡
__SUPPORT_THREAD_FUN_


1965 
	#__SUPPORT_THREAD_FUN_


	)

1967 *
suµ‹t_thªad_fun
(
loˇl_±hªad_¨gs_°ru˘
 *
¨gs
)

1969 
RT_TASK
 *
èsk
;

1970 *(*
°¨t_routöe
)(*Ë
¨gs
->start_routine;

1971 *
¨g
 = 
¨gs
->arg;

1972 
±hªad_t
 
thªad
;

1973 
pﬁicy
;

1974 
sched_∑øm
 
∑øm
;

1976 
±hªad_gësched∑øm
(
thªad
 = 
±hªad_£lf
(), &
pﬁicy
, &
∑øm
);

1977 i‡(
pﬁicy
 =
SCHED_OTHER
) {

1978 
pﬁicy
 = 
SCHED_RR
;

1979 
∑øm
.
sched_¥i‹ôy
 = 
sched_gë_¥i‹ôy_mö
(
SCHED_RR
);

1981 
±hªad_£tsched∑øm
(
±hªad_£lf
(), 
pﬁicy
, &
∑øm
);

1982 
èsk
 = 
π_èsk_öô_schmod
(
π_gë_«me
(0), 
sched_gë_¥i‹ôy_max
(
pﬁicy
Ë- 
∑øm
.
sched_¥i‹ôy
, 0, 0,Öolicy, 0xF);

1983 
˛o£
(
¨gs
->
pùe
[1]);

1984 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

1985 
π_make_h¨d_ªÆ_time
();

1986 
°¨t_routöe
(
¨g
);

1987 
π_make_so·_ªÆ_time
();

1988  
NULL
;

1993 
RTAI_PROTO
(, 
__wøp_±hªad_¸óã
,(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
))

1995 
hs
, 
ªt
;

1996 
loˇl_±hªad_¨gs_°ru˘
 
¨gs
 = { 
°¨t_routöe
, 
¨g
 };

1997 
hs
 = 
MAKE_SOFT
();

1998 
pùe
(
¨gs
.pipe);

1999 
ªt
 = 
±hªad_¸óã
(
thªad
, 
©å
, (*)
suµ‹t_thªad_fun
, (*)&
¨gs
);

2000 
ªad
(
¨gs
.
pùe
[0], &args.pipe[2], 1);

2001 
˛o£
(
¨gs
.
pùe
[0]);

2002 
MAKE_HARD
(
hs
);

2003  
ªt
;

2007 
__ªÆ_±hªad_ˇn˚l
(
±hªad_t
 
thªad
);

2008 
RTAI_PROTO
(, 
__wøp_±hªad_ˇn˚l
,(
±hªad_t
 
thªad
))

2010 
hs
, 
ªt
;

2011 
hs
 = 
MAKE_SOFT
();

2012 
ªt
 = 
__ªÆ_±hªad_ˇn˚l
(
thªad
);

2013 
MAKE_HARD
(
hs
);

2014  
ªt
;

2017 
__ªÆ_±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
√wmask
, sig£t_à*
ﬁdmask
);

2018 
RTAI_PROTO
(, 
__wøp_±hªad_sigmask
,(
how
, c⁄° 
sig£t_t
 *
√wmask
, sig£t_à*
ﬁdmask
))

2020  
__ªÆ_±hªad_sigmask
(
how
, 
√wmask
, 
ﬁdmask
);

2021 
hs
, 
ªt
;

2022 
hs
 = 
MAKE_SOFT
();

2023 
ªt
 = 
__ªÆ_±hªad_sigmask
(
how
, 
√wmask
, 
ﬁdmask
);

2024 
MAKE_HARD
(
hs
);

2025  
ªt
;

2028 
__ªÆ_±hªad_kûl
(
±hªad_t
 
thªad
, 
signo
);

2029 
RTAI_PROTO
(, 
__wøp_±hªad_kûl
,(
±hªad_t
 
thªad
, 
signo
))

2031 
hs
, 
ªt
;

2032 
hs
 = 
MAKE_SOFT
();

2033 
ªt
 = 
__ªÆ_±hªad_kûl
(
thªad
, 
signo
);

2034 
MAKE_HARD
(
hs
);

2035  
ªt
;

2039 
__ªÆ_sigwaô
(c⁄° 
sig£t_t
 *
£t
, *
sig
);

2040 
RTAI_PROTO
(, 
__wøp_sigwaô
,(c⁄° 
sig£t_t
 *
£t
, *
sig
))

2042 
hs
, 
ªt
;

2043 
hs
 = 
MAKE_SOFT
();

2044 
ªt
 = 
__ªÆ_sigwaô
(
£t
, 
sig
);

2045 
MAKE_HARD
(
hs
);

2046  
ªt
;

2049 
__ªÆ_±hªad_ã°ˇn˚l
();

2050 
RTAI_PROTO
(, 
__wøp_±hªad_ã°ˇn˚l
,())

2052 
__ªÆ_±hªad_ã°ˇn˚l
();

2054 
ﬁdty≥
, 
ﬁd°©e
;

2055 
±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, &
ﬁd°©e
);

2056 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_DEFERRED
, &
ﬁdty≥
);

2057 i‡(
ﬁd°©e
 !
PTHREAD_CANCEL_DISABLE
 && 
ﬁdty≥
 !
PTHREAD_CANCEL_DEFERRED
) {

2058 
MAKE_SOFT
();

2059 
π_èsk_dñëe
(
π_buddy
());

2060 
±hªad_exô
(
NULL
);

2062 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, &oldtype);

2063 
±hªad_£tˇn˚l°©e
(
ﬁd°©e
, &oldstate);

2066 
__ªÆ_±hªad_yõld
();

2067 
RTAI_PROTO
(, 
__wøp_±hªad_yõld
,())

2069 i‡(
π_is_h¨d_ªÆ_time
(
π_buddy
())) {

2070 °ru˘ { 
dummy
; } 
¨g
;

2071 
πai_lxπ
(
BIDX
, 
SIZARG
, 
YIELD
, &
¨g
);

2074  
__ªÆ_±hªad_yõld
();

2077 
__ªÆ_±hªad_exô
(*
ªtvÆ
);

2078 
RTAI_PROTO
(, 
__wøp_±hªad_exô
,(*
ªtvÆ
))

2080 
MAKE_SOFT
();

2081 
π_èsk_dñëe
(
NULL
);

2082 
__ªÆ_±hªad_exô
(
ªtvÆ
);

2085 
__ªÆ_±hªad_joö
(
±hªad_t
 
thªad
, **
thªad_ªtu∫
);

2086 
RTAI_PROTO
(, 
__wøp_±hªad_joö
,(
±hªad_t
 
thªad
, **
thªad_ªtu∫
))

2088 
hs
, 
ªt
;

2089 
hs
 = 
MAKE_SOFT
();

2090 
ªt
 = 
__ªÆ_±hªad_joö
(
thªad
, 
thªad_ªtu∫
);

2091 
MAKE_HARD
(
hs
);

2092  
ªt
;

2100 #ifde‡
__USE_XOPEN2K


2103 
	#ORIGINAL_TEST


	)

2104 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_öô
, (
±hªad_•ölock_t
 *
lock
, 
psh¨ed
))

2106  
lock
 ? (((
pid_t
 *Óock)[0] = 0Ë: 
EINVAL
;

2109 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_de°roy
, (
±hªad_•ölock_t
 *
lock
))

2111 i‡(
lock
) {

2112  ((
pid_t
 *)
lock
)[0] ? 
EBUSY
 : (((pid_t *)lock)[0] = 0);

2114  
EINVAL
;

2117 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_lock
,(
±hªad_•ölock_t
 *
lock
))

2119 i‡(
lock
) {

2120 
©omic_cmpxchg
(
lock
, 0, 1));

2123  
EINVAL
;

2126 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_åylock
,(
±hªad_•ölock_t
 *
lock
))

2128 i‡(
lock
) {

2129  
©omic_cmpxchg
(
lock
, 0, 1Ë? 
EBUSY
 : 0;

2131  
EINVAL
;

2134 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_u∆ock
,(
±hªad_•ölock_t
 *
lock
))

2136 i‡(
lock
) {

2137  ((
pid_t
 *)
lock
)[0] = 0;

2139  
EINVAL
;

2142 
ölöe
 
_±hªad_gëtid_≈
()

2144 °ru˘ { 
dummy
; } 
¨g
;

2145  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

2148 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_öô
, (
±hªad_•ölock_t
 *
lock
, 
psh¨ed
))

2150  
lock
 ? (((
pid_t
 *Óock)[0] = 0Ë: 
EINVAL
;

2153 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_de°roy
, (
±hªad_•ölock_t
 *
lock
))

2155 i‡(
lock
) {

2156  ((
pid_t
 *)
lock
)[0] ? 
EBUSY
 : (((pid_t *)lock)[0] = 0);

2158  
EINVAL
;

2161 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_lock
,(
±hªad_•ölock_t
 *
lock
))

2163 i‡(
lock
) {

2164 
pid_t
 
tid
;

2165 i‡(((
pid_t
 *)
lock
)[0] =(
tid
 = 
_±hªad_gëtid_≈
())) {

2166  
EDEADLOCK
;

2168 
©omic_cmpxchg
((*)
lock
, 0, 
tid
));

2171  
EINVAL
;

2174 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_åylock
,(
±hªad_•ölock_t
 *
lock
))

2176 i‡(
lock
) {

2177  
©omic_cmpxchg
((*)
lock
, 0, 
_±hªad_gëtid_≈
()Ë? 
EBUSY
 : 0;

2179  
EINVAL
;

2182 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_u∆ock
,(
±hªad_•ölock_t
 *
lock
))

2184 i‡(
lock
) {

2186  ((
pid_t
 *)
lock
)[0] = 0;

2188  ((
pid_t
 *)
lock
)[0] !
_±hªad_gëtid_≈
(Ë? 
EPERM
 : (((pid_t *)lock)[0] = 0);

2191  
EINVAL
;

2201 
RTAI_PROTO
(, 
__wøp_˛ock_gëªs
, (
˛ockid_t
 
˛ockid
, 
time•ec
 *
ªs
))

2203 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

2204 
ªs
->
tv_£c
 = 0;

2205 i‡(!(
ªs
->
tv_n£c
 = 
cou¡2«no
(1))) {

2206 
ªs
->
tv_n£c
 = 1;

2210 
î∫o
 = -
EINVAL
;

2214 
RTAI_PROTO
(, 
__wøp_˛ock_gëtime
, (
˛ockid_t
 
˛ockid
, 
time•ec
 *
ç
))

2216 i‡(
˛ockid
 =
CLOCK_MONOTONIC
) {

2217 
cou¡2time•ec
(
π_gë_ts˙t
(), 
ç
);

2219 } i‡(
˛ockid
 =
CLOCK_REALTIME
) {

2220 
cou¡2time•ec
(
π_gë_ªÆ_time
(), 
ç
);

2223 
î∫o
 = -
EINVAL
;

2227 
RTAI_PROTO
(, 
__wøp_˛ock_£âime
, (
˛ockid_t
 
˛ockid
, c⁄° 
time•ec
 *
ç
))

2229 i‡(
˛ockid
 =
CLOCK_REALTIME
) {

2230 
hs
;

2231 
hs
 = 
MAKE_SOFT
();

2232 
π_gëtime‹ig
(
NULL
);

2233 
MAKE_HARD
(
hs
);

2236 
î∫o
 = -
ENOTSUP
;

2240 
RTAI_PROTO
(, 
__wøp_˛ock_«no¶ìp
,(
˛ockid_t
 
˛ockid
, 
Êags
, c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
))

2242 
ˇnc_ty≥
, 
ªt
;

2243 
RTIME
 
expúe
;

2245 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

2246  
ENOTSUP
;

2249 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

2250  
EINVAL
;

2253 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ˇnc_ty≥
);

2255 
expúe
 = 
time•ec2cou¡
(
rqç
);

2256 i‡(
˛ockid
 =
CLOCK_MONOTONIC
) {

2257 i‡(
Êags
 !
TIMER_ABSTIME
) {

2258 
expúe
 +
π_gë_ts˙t
();

2260 
ªt
 = 
π_¶ìp_u¡û
(
expúe
);

2261 
expúe
 -
π_gë_ts˙t
();

2263 i‡(
Êags
 !
TIMER_ABSTIME
) {

2264 
expúe
 +
π_gë_ªÆ_time
();

2266 
ªt
 = 
π_¶ìp_u¡û
(
expúe
);

2267 
expúe
 -
π_gë_ªÆ_time
();

2269 i‡(
expúe
 > 0) {

2270 i‡(
rmç
) {

2271 
cou¡2time•ec
(
expúe
, 
rmç
);

2273  
ªt
 =
RTE_UNBLKD
 ? 
EINTR
 : 0;

2276 
±hªad_£tˇn˚…y≥
(
ˇnc_ty≥
, 
NULL
);

2281 
RTAI_PROTO
(, 
__wøp_«no¶ìp
,(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
))

2283 
ˇnc_ty≥
, 
ªt
;

2284 
RTIME
 
expúe
;

2285 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

2286  -
EINVAL
;

2289 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ˇnc_ty≥
);

2291 
ªt
 = 
π_¶ìp_u¡û
(
expúe
 = 
π_gë_ts˙t
(Ë+ 
time•ec2cou¡
(
rqç
));

2292 i‡((
expúe
 -
π_gë_ts˙t
()) > 0) {

2293 i‡(
rmç
) {

2294 
cou¡2time•ec
(
expúe
, 
rmç
);

2296 
î∫o
 = -
EINTR
;

2297  
ªt
 =
RTE_UNBLKD
 ? -1 : 0;

2300 
±hªad_£tˇn˚…y≥
(
ˇnc_ty≥
, 
NULL
);

2309 
suµ‹t_posix_timî
(*
d©a
)

2311 
RT_TASK
 *
èsk
;

2312 
π_èskÀt_°ru˘
 
u•èskÀt
;

2313 
	sd©a_°ru
 { 
π_èskÀt_°ru˘
 *
èskÀt
; 
signum
; } 
d©a_°ru˘
;

2315 
d©a_°ru˘
 = *(
d©a_°ru
 *)
d©a
;

2317 i‡(!(
èsk
 = 
π_thªad_öô
(()
d©a_°ru˘
.
èskÀt
, 98, 0, 
SCHED_FIFO
, 0xF))) {

2318 
¥ötf
("CANNOT INIT POSIX TIMER SUPPORT TASKLET\n");

2321 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
, *
u•èskÀt
; 
RT_TASK
 *
èsk
; } 
ªg
 = { 
d©a_°ru˘
.tasklet, &usptasklet,Åask };

2322 
πai_lxπ
(
TASKLETS_IDX
, (
ªg
), 
REG_TASK
, &reg);

2325 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

2326 
π_make_h¨d_ªÆ_time
();

2328 i‡(
d©a_°ru˘
.
signum
) {

2330 
π_èsk_su•íd
(
èsk
);

2331 i‡(
u•èskÀt
.
h™dÀr
) {

2332 
±hªad_kûl
((
±hªad_t
)
u•èskÀt
.
d©a
, 
d©a_°ru˘
.
signum
);

2339 
π_èsk_su•íd
(
èsk
);

2340 i‡(
u•èskÀt
.
h™dÀr
) {

2341 
u•èskÀt
.
h™dÀr
(u•èskÀt.
d©a
);

2348 
πai_°i
();

2349 
π_make_so·_ªÆ_time
();

2350 
π_èsk_dñëe
(
èsk
);

2355 
RTAI_PROTO
 (, 
__wøp_timî_¸óã
, (
˛ockid_t
 
˛ockid
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
))

2357 (*
h™dÀr
)() = (((*)())1);

2358 
pid
 = -1;

2359 
d©a
 = 0;

2360 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
signum
; } 
d©a_supfun
;

2362 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

2363 
î∫o
 = 
ENOTSUP
;

2367 i‡(
evp
 =
NULL
) {

2368 
d©a_supfun
.
signum
 = 
SIGALRM
;

2370 i‡(
evp
->
sigev_nŸify
 =
SIGEV_SIGNAL
) {

2371 
d©a_supfun
.
signum
 = 
evp
->
sigev_signo
;

2372 
d©a
 = ()
evp
->
sigev_vÆue
.
sivÆ_±r
;

2373 } i‡(
evp
->
sigev_nŸify
 =
SIGEV_THREAD
) {

2374 
d©a_supfun
.
signum
 = 0;

2375 
d©a
 = ()
evp
->
sigev_vÆue
.
sivÆ_öt
;

2376 
h™dÀr
 = ((*)()Ë
evp
->
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄
;

2377 
pid
 = 1;

2381 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; (*
h™dÀr
)(); 
d©a
; 
pid
; 
thªad
; } 
¨g
 = { 
NULL
, handler, data,Öid, 0 };

2382 
¨g
.
timî
 = (
π_èskÀt_°ru˘
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
INIT
, &¨g).
v
[
LOW
];

2383 
d©a_supfun
.
èskÀt
 = 
¨g
.
timî
;

2384 
¨g
.
thªad
 = 
π_thªad_¸óã
((*)
suµ‹t_posix_timî
, &
d©a_supfun
, 
TASKLET_STACK_SIZE
);

2385 *
timîid
 = (
timî_t
)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_CREATE
, &
¨g
).
i
[
LOW
];

2390 
RTAI_PROTO
 (, 
__wøp_timî_gëtime
, (
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
))

2392 
RTIME
 
timî_times
[2];

2394 °ru˘ { 
timî_t
 
timî
; 
RTIME
 *
timî_times
; } 
¨g
 = { 
timîid
,Åimer_times };

2395 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_GETTIME
, &
¨g
);

2397 
cou¡2time•ec
–
timî_times
[0], &(
vÆue
->
ô_vÆue
) );

2398 
cou¡2time•ec
–
timî_times
[1], &(
vÆue
->
ô_öãrvÆ
) );

2403 
RTAI_PROTO
 (, 
__wøp_timî_£âime
, (
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
, ôimî•e¯*
ovÆue
))

2405 i‡(
ovÆue
 !
NULL
) {

2406 
__wøp_timî_gëtime
(
timîid
, 
ovÆue
);

2408 °ru˘ { 
timî_t
 
timî
; c⁄° 
ôimî•ec
 *
vÆue
; 
d©a
; 
Êags
; } 
¨g
 = { 
timîid
, vÆue, 
±hªad_£lf
(), flags};

2409 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_SETTIME
, &
¨g
);

2414 
RTAI_PROTO
 (, 
__wøp_timî_gëovîrun
, (
timî_t
 
timîid
))

2416 °ru˘ { 
timî_t
 
timî
; } 
¨g
 = { 
timîid
 };

2417  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_OVERRUN
, &
¨g
).
π
;

2420 
RTAI_PROTO
 (, 
__wøp_timî_dñëe
, (
timî_t
 
timîid
))

2422 
thªad
;

2424 °ru˘ { 
timî_t
 
timî
; 
•a˚
;} 
¨g_dñ
 = { 
timîid
, 1 };

2425 i‡((
thªad
 = 
πai_lxπ
(
TASKLETS_IDX
, (
¨g_dñ
), 
PTIMER_DELETE
, &¨g_dñ).
i
[
LOW
])) {

2426 
π_thªad_joö
(
thªad
);

2439 
	#±hªad_£lf_π
 
±hªad_£lf


	)

2440 
	#±hªad_equÆ_π
 
±hªad_equÆ


	)

2441 
	#±hªad_©å_öô_π
 
±hªad_©å_öô


	)

2442 
	#±hªad_©å_de°roy_π
 
±hªad_©å_de°roy


	)

2443 
	#±hªad_©å_gëdëach°©e_π
 
±hªad_©å_gëdëach°©e


	)

2444 
	#±hªad_©å_£tschedpﬁicy_π
 
±hªad_©å_£tschedpﬁicy


	)

2445 
	#±hªad_©å_gëschedpﬁicy_π
 
±hªad_©å_gëschedpﬁicy


	)

2446 
	#±hªad_©å_£tsched∑øm_π
 
±hªad_©å_£tsched∑øm


	)

2447 
	#±hªad_©å_gësched∑øm_π
 
±hªad_©å_gësched∑øm


	)

2448 
	#±hªad_©å_£töhîôsched_π
 
±hªad_©å_£töhîôsched


	)

2449 
	#±hªad_©å_gëöhîôsched_π
 
±hªad_©å_gëöhîôsched


	)

2450 
	#±hªad_©å_£tsc›e_π
 
±hªad_©å_£tsc›e


	)

2451 
	#±hªad_©å_gësc›e_π
 
±hªad_©å_gësc›e


	)

2452 #ifde‡
__USE_UNIX98


2453 
	#±hªad_©å_£tgu¨dsize_π
 
±hªad_©å_£tgu¨dsize


	)

2454 
	#±hªad_©å_gëgu¨dsize_π
 
±hªad_©å_gëgu¨dsize


	)

2456 
	#±hªad_©å_£t°ackaddr_π
 
±hªad_©å_£t°ackaddr


	)

2457 
	#±hªad_©å_gë°ackaddr_π
 
±hªad_©å_gë°ackaddr


	)

2458 #ifde‡
__USE_XOPEN2K


2459 
	#±hªad_©å_£t°ack_π
 
±hªad_©å_£t°ack


	)

2460 
	#±hªad_©å_gë°ack_π
 
±hªad_©å_gë°ack


	)

2462 
	#±hªad_©å_£t°acksize_π
 
±hªad_©å_£t°acksize


	)

2463 
	#±hªad_©å_gë°acksize_π
 
±hªad_©å_gë°acksize


	)

2469 
	#±hªad_£tˇn˚l°©e_π
 
±hªad_£tˇn˚l°©e


	)

2470 
	#±hªad_£tˇn˚…y≥_π
 
±hªad_£tˇn˚…y≥


	)

2472 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_prinher.h

20 #i‚de‡
_RTAI_PRINHER_H


21 
	#_RTAI_PRINHER_H


	)

23 
	~<πai_schedc‹e.h
>

25 #ifde‡
__KERNEL__


27 #ifde‡
CONFIG_RTAI_FULL_PRINHER


29 
	#èsk_owns_£ms
(
èsk
Ë(—ask)->
ªsq
.
√xt
 !&—ask)->ªsq)

	)

31 
ölöe
 
	$íqueue_ªsqñ
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

33 
QUEUE
 *
ªsq
;

34 
ªsqñ
->
√xt
 = 
ªsq
 = &
ªsowƒ
->resq;

35 (
ªsqñ
->
¥ev
 = 
ªsq
->¥ev)->
√xt
 =Ñesqel;

36 
ªsq
->
¥ev
 = 
ªsqñ
;

37 
	}
}

39 
	#íqueue_ªsqtsk
(
ªsowƒ
)

	)

41 
	#RESQEL_TASK
 ((((
QUEUE
 *)
ªsqñ
->
èsk
)->
√xt
)->èsk)

	)

43 
ölöe
 
	$_£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

45 
h¥io
;

46 
RT_TASK
 *
èsk
;

47 
QUEUE
 *
ªsq
, *
ªsqñ
;

48 
h¥io
 = 
ªsowƒ
->
ba£_¥i‹ôy
;

49 
ªsqñ
 = 
ªsq
 = &
ªsowƒ
->resq;

50 (
ªsqñ
 =Ñesqñ->
√xt
Ë!
ªsq
 && (
èsk
 = 
RESQEL_TASK
Ë&&Åask->
¥i‹ôy
 < 
h¥io
) {

51 
h¥io
 = 
èsk
->
¥i‹ôy
;

53  
h¥io
;

54 
	}
}

56 
ölöe
 
	$dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

58 
h¥io
, 
¥io
;

59 
QUEUE
 *
q
;

60 (
ªsqñ
->
¥ev
)->
√xt
 =Ñesqel->next;

61 (
ªsqñ
->
√xt
)->
¥ev
 =Ñesqel->prev;

62 
h¥io
 = 
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

63  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë< 
h¥io
) ?Örio : hprio);

64 
	}
}

66 
ölöe
 
	$£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

68 
h¥io
, 
¥io
;

69 
QUEUE
 *
q
;

70 
h¥io
 = 
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

71  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë< 
h¥io
) ?Örio : hprio);

72 
	}
}

76 
	#èsk_owns_£ms
(
èsk
Ë(—ask)->
owndªs
)

	)

78 
	#íqueue_ªsqñ
(
ªsqñ
, 
èsk
) \

79 dÿ{ (
èsk
)->
owndªs
++; } 0)

	)

81 
	#íqueue_ªsqtsk
(
èsk
)

	)

84 
ölöe
 
	$_£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

86 
QUEUE
 *
q
;

87 
¥io
;

88  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë<Ñesowƒ->
ba£_¥i‹ôy
) ?Örio :Ñesownr->base_priority);

89 
	}
}

91 
ölöe
 
	$dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

93 i‡(--
ªsowƒ
->
owndªs
 <= 0) {

94 
ªsowƒ
->
owndªs
 = 0;

95  
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

98 
	}
}

100 
ölöe
 
	$£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

102  !
ªsowƒ
->
owndªs
 ? 
	`_£t_èsk_¥io_‰om_ªsq
(resownr) : 0;

103 
	}
}

107 
	#dequeue_ªsqñ_ª£t_cuºít_¥i‹ôy
(
ªsqñ
, 
π_cuºít
) \

108 
	`dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
ªsqñ
, 
π_cuºít
)

	)

110 
	#£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
) \

111 
	`£t_èsk_¥io_‰om_ªsq
(
π_cuºít
)

	)

113 
	#èsk_owns_msgs
(
èsk
Ë(—ask)->
msg_queue
.
√xt
 !&—ask)->msg_queue)

	)

114 
	#èsk_owns_ªs
(
èsk
Ë(
	`èsk_owns_£ms
—askË|| 
	`èsk_owns_msgs
—ask))

	)

	@/usr/src/rtai/base/include/rtai_proc_fs.h

19 #i‚de‡
_RTAI_PROC_FS_H


20 
	#_RTAI_PROC_FS_H


	)

22 
¥oc_dú_íåy
 *
πai_¥oc_roŸ
;

24 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,9,0)

26 
	~<löux/£q_fûe.h
>

28 
	#PROC_READ_FUN
(
ªad_fun_«me
) \

29 
	`ªad_fun_«me
(
£q_fûe
 *
pf
, *
v
)

	)

31 
	#PROC_READ_OPEN_OPS
(
πai_¥oc_f›s
, 
ªad_fun_«me
) \

33 
	`πai_¥oc_›í
(
öode
 *öode, 
fûe
 *file) { \

34  
	`sögÀ_›í
(
fûe
, 
ªad_fun_«me
, 
NULL
); \

37 c⁄° 
fûe_›î©i⁄s
 
πai_¥oc_f›s
 = { \

38 .
ow√r
 = 
THIS_MODULE
, \

39 .
›í
 = 
πai_¥oc_›í
, \

40 .
ªad
 = 
£q_ªad
, \

41 .
Œ£ek
 = 
£q_l£ek
, \

42 .
ªÀa£
 = 
sögÀ_ªÀa£
 \

43 };

	)

45 
ölöe
 *
	$CREATE_PROC_ENTRY
(c⁄° *
«me
, 
umode_t
 
mode
, *
∑ª¡
, c⁄° 
fûe_›î©i⁄s
 *
¥oc_f›s
)

47  !
∑ª¡
 ? 
	`¥oc_mkdú
(
«me
, 
NULL
Ë: 
	`¥oc_¸óã
“ame, 
mode
,Ö¨ít, 
¥oc_f›s
);

48 
	}
}

50 
	#SET_PROC_READ_ENTRY
(
íåy
, 
ªad_fun
Ëdÿ{ } 0)

	)

52 
	#PROC_PRINT_VARS


	)

54 
	#PROC_PRINT
(
fmt
, 
¨gs
...) \

55 dÿ{ 
	`£q_¥ötf
(
pf
, 
fmt
, ##
¨gs
); } 0)

	)

57 
	#PROC_PRINT_RETURN
 dÿ{ 
d⁄e
; } 0)

	)

59 
	#PROC_PRINT_DONE
 dÿ{  0; } 0)

	)

63 
	#PROC_READ_FUN
 \

64 
	`πai_ªad_¥oc
 (*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

	)

66 
ölöe
 *
	$CREATE_PROC_ENTRY
(c⁄° *
«me
, 
umode_t
 
mode
, *
∑ª¡
, c⁄° 
fûe_›î©i⁄s
 *
¥oc_f›s
)

68  
	`¸óã_¥oc_íåy
(
«me
, 
mode
, 
∑ª¡
);

69 
	}
}

71 
	#SET_PROC_READ_ENTRY
(
íåy
, 
ªad_fun
) \

72 dÿ{ 
íåy
->
ªad_¥oc
 = 
ªad_fun
; } 0)

	)

74 
	#LIMIT
 (
PAGE_SIZE
 - 80)

	)

83 
	#PROC_PRINT_VARS
 \

84 
off_t
 
pos
 = 0; \

85 
off_t
 
begö
 = 0; \

86 
Àn
 = 0

	)

94 
	#PROC_PRINT
(
fmt
,
¨gs
...) \

96 
Àn
 +
	`•rötf
(
∑ge
 +Üí , 
fmt
, ##
¨gs
); \

97 
pos
 +
Àn
; \

98 if(
pos
 < 
off
) { \

99 
Àn
 = 0; \

100 
begö
 = 
pos
; \

102 if(
pos
 > 
off
 + 
cou¡
) \

103 
d⁄e
; \

104 } 0)

	)

108 
	#PROC_PRINT_RETURN
 \

110 *
eof
 = 1; \

111 
d⁄e
; \

112 } 0)

	)

117 
	#PROC_PRINT_DONE
 \

119 *
eof
 = 1; \

120 
d⁄e
: \

121 *
°¨t
 = 
∑ge
 + (
off
 - 
begö
); \

122 
Àn
 -(
off
 - 
begö
); \

123 if(
Àn
 > 
cou¡
) \

124 
Àn
 = 
cou¡
; \

125 if(
Àn
 < 0) \

126 
Àn
 = 0; \

127  
Àn
; \

128 } 0)

	)

	@/usr/src/rtai/base/include/rtai_proxies.h

20 #i‚de‡
_RTAI_PROXIES_H


21 
	#_RTAI_PROXIES_H


	)

23 
	~<πai_sched.h
>

25 #ifde‡
__˝lu•lus


30 
RT_TASK
 *
__π_¥oxy_©èch
((*
func
)(),

31 
RT_TASK
 *
èsk
,

32 *
msg
,

33 
nbyãs
,

34 
¥i‹ôy
);

37 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_¥oxy_©èch
(RT_TASK *
èsk
,

38 *
msg
,

39 
nbyãs
,

40 
¥i‹ôy
);

43 
RTAI_SYSCALL_MODE
 
π_¥oxy_dëach
(
RT_TASK
 *
¥oxy
);

46 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_åiggî
(RT_TASK *
¥oxy
);

48 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_registry.h

27 #i‚de‡
_RTAI_REGISTRY_H


28 
	#_RTAI_REGISTRY_H


	)

30 
	~<πai_«m2num.h
>

32 
	gèsk_°ru˘
;

34 
	sπ_ªgi°ry_íåy
 {

35 
	m«me
;

36 *
	madr
;

37 
èsk_°ru˘
 *
	mtsk
;

38 
	mty≥
;

39 
	mcou¡
;

40 
	mÆök
;

41 
	m∆ök
;

44 
	#MAX_SLOTS
 
CONFIG_RTAI_SCHED_LXRT_NUMSLOTS


45 

	)

46 
	#IS_TASK
 0

47 
	#IS_SEM
 1

	)

48 
	#IS_RWL
 2

	)

49 
	#IS_SPL
 3

	)

50 
	#IS_MBX
 4

	)

51 
	#IS_PRX
 5

	)

52 
	#IS_BIT
 6

	)

53 
	#IS_TBX
 7

	)

54 
	#IS_HPCK
 8

	)

56 #ifde‡
__KERNEL__


58 
	~<πai.h
>

60 #ifde‡
__˝lu•lus


64 
is_¥o˚ss_ªgi°îed
(
èsk_°ru˘
 *
tsk
);

66 
π_ªgi°î
(
«m
,

67 *
adr
,

68 
typ
,

69 
èsk_°ru˘
 *
tsk
);

71 
π_drg_⁄_«me
(
«me
);

73 
π_drg_⁄_«me_˙t
(
«me
);

75 
π_drg_⁄_adr
(*
adr
);

77 
π_drg_⁄_adr_˙t
(*
adr
);

79 
RTAI_SYSCALL_MODE
 
π_gë_«me
(*
adr
);

81 
RTAI_SYSCALL_MODE
 *
π_gë_adr
(
«me
);

83 *
π_gë_adr_˙t
(
«me
);

85 
π_gë_ty≥
(
«me
);

87 #ifde‡
CONFIG_PROC_FS


88 
π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, 
π_ªgi°ry_íåy
 *
íåy
);

91 #ifde‡
__˝lu•lus


97 
	#exi°
(
«me
Ë
	`π_gë_adr
(
	`«m2num
“ame))

	)

	@/usr/src/rtai/base/include/rtai_rwl.h

19 #i‚de‡
_RTAI_RWL_H


20 
	#_RTAI_RWL_H


	)

22 
	~<πai_£m.h
>

24 
	gπai_rwlock
;

26 #ifde‡
__KERNEL__


28 #i‚de‡
__˝lu•lus


30 
	sπai_rwlock
 {

31 
SEM
 
	mwrmtx
,

32 
	mwr£m
,

33 
	mrd£m
;

34 } 
	tRWL
;

40 
RTAI_SYSCALL_MODE
 
π_ty≥d_rwl_öô
(
RWL
 *
rwl
, 
ty≥
);

42 
	#π_rwl_öô
(
rwl
Ë
	`π_ty≥d_rwl_öô
‘wl, 
RESEM_RECURS
)

	)

44 
RTAI_SYSCALL_MODE
 
π_rwl_dñëe
(
πai_rwlock
 *
rwl
);

46 
RTAI_SYSCALL_MODE
 
RWL
 *
_π_«med_rwl_öô
(
rwl_«me
);

48 
RTAI_SYSCALL_MODE
 
π_«med_rwl_dñëe
(
RWL
 *
rwl
);

50 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock
(
πai_rwlock
 *
rwl
);

52 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_if
(
πai_rwlock
 *
rwl
);

54 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_u¡û
(
πai_rwlock
 *
rwl
, 
RTIME
 
time
);

56 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_timed
(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
);

58 
RTAI_SYSCALL_MODE
 
π_rwl_wæock
(
πai_rwlock
 *
rwl
);

60 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_if
(
πai_rwlock
 *
rwl
);

62 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_u¡û
(
πai_rwlock
 *
rwl
, 
RTIME
 
time
);

64 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_timed
(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
);

66 
RTAI_SYSCALL_MODE
 
π_rwl_u∆ock
(
πai_rwlock
 *
rwl
);

68 #ifde‡
__˝lu•lus


74 #ifde‡
__˝lu•lus


78 
	#π_rwl_öô
(
rwl
Ë
	`π_ty≥d_rwl_öô
‘wl, 
RESEM_RECURS
)

	)

80 
RTAI_PROTO
(
πai_rwlock
 *, 
π_ty≥d_rwl_öô
,(
«me
, 
ty≥
))

82 °ru˘ { 
«me
; 
ty≥
; } 
¨g
 = {Çame,Åype };

83  (
πai_rwlock
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_INIT
, &
¨g
).
v
[
LOW
];

86 
RTAI_PROTO
(, 
π_rwl_dñëe
,(
πai_rwlock
 *
rwl
))

88 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

89  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_DELETE
, &
¨g
).
i
[
LOW
];

92 
RTAI_PROTO
(
πai_rwlock
 *, 
π_«med_rwl_öô
,(c⁄° *
«me
))

94 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(name) };

95  (
πai_rwlock
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_RWL_INIT
, &
¨g
).
v
[
LOW
];

98 
RTAI_PROTO
(, 
π_«med_rwl_dñëe
,(
πai_rwlock
 *
rwl
))

100 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

101  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_RWL_DELETE
, &
¨g
).
i
[
LOW
];

104 
RTAI_PROTO
(, 
π_rwl_rdlock
,(
πai_rwlock
 *
rwl
))

106 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

107  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK
, &
¨g
).
i
[
LOW
];

110 
RTAI_PROTO
(, 
π_rwl_rdlock_if
,(
πai_rwlock
 *
rwl
))

112 °ru˘ { *
rwl
; } 
¨g
 = {Ñwl };

113  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_IF
, &
¨g
).
i
[
LOW
];

116 
RTAI_PROTO
(, 
π_rwl_rdlock_u¡û
,(
πai_rwlock
 *
rwl
, 
RTIME
 
time
))

118 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
time
; } 
¨g
 = {Ñwl,Åime };

119  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_UNTIL
, &
¨g
).
i
[
LOW
];

122 
RTAI_PROTO
(, 
π_rwl_rdlock_timed
,(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
))

124 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
dñay
; } 
¨g
 = {Ñwl, delay };

125  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_TIMED
, &
¨g
).
i
[
LOW
];

128 
RTAI_PROTO
(, 
π_rwl_wæock
,(
πai_rwlock
 *
rwl
))

130 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

131  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK
, &
¨g
).
i
[
LOW
];

134 
RTAI_PROTO
(, 
π_rwl_wæock_if
,(
πai_rwlock
 *
rwl
))

136 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

137  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_IF
, &
¨g
).
i
[
LOW
];

140 
RTAI_PROTO
(, 
π_rwl_wæock_u¡û
,(
πai_rwlock
 *
rwl
, 
RTIME
 
time
))

142 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
time
; } 
¨g
 = {Ñwl,Åime };

143  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_UNTIL
, &
¨g
).
i
[
LOW
];

146 
RTAI_PROTO
(, 
π_rwl_wæock_timed
,(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
))

148 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
dñay
; } 
¨g
 = {Ñwl, delay };

149  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_TIMED
, &
¨g
).
i
[
LOW
];

152 
RTAI_PROTO
(, 
π_rwl_u∆ock
,(
πai_rwlock
 *
rwl
))

154 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

155  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_UNLOCK
, &
¨g
).
i
[
LOW
];

158 #ifde‡
__˝lu•lus


164 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

166 
	sπai_rwlock
 {

167 
›aque
;

168 } 
	tRWL
;

	@/usr/src/rtai/base/include/rtai_sanity.h

19 #i‚de‡
_RTAI_SANITY_H


20 
	#_RTAI_SANITY_H


	)

22 #i‡!–
__GNUC__
 =2 && 
__GNUC_MINOR__
 > 8 && __GNUC_MINOR__ < 96 ) && \

23 
	g__GNUC__
 > 4

24 #w¨nög: 
You
 
¨e
 
likñy
 
usög
 
™
 
unsuµ‹ãd
 
GCC
 
vîsi⁄
! \

25 
PÀa£
 
ªad
 
	gGCC
-
WARNINGS
 
	gˇªfuŒy
.

	@/usr/src/rtai/base/include/rtai_scb.h

40 #i‚de‡
_RTAI_SCB_H


41 
	#_RTAI_SCB_H


	)

43 
	~<πai_shm.h
>

44 
	~<asm/πai_©omic.h
>

46 
	#SCB
 ((*)(
scb
))

	)

47 
	#SIZE
 ((vﬁ©ûê*)
scb
)[-3]

	)

48 
	#FBYTE
 ((vﬁ©ûê*)
scb
)[-2]

	)

49 
	#LBYTE
 ((vﬁ©ûê*)
scb
)[-1]

	)

50 
	#HDRSIZ
 (3*())

	)

52 
	gèsk_°ru˘
;

54 #ifde‡
__KERNEL__


56 
	#RTAI_SCB_PROTO
(
ty≥
, 
«me
, 
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

60 
	#RTAI_SCB_PROTO
 
RTAI_PROTO


	)

105 
RTAI_SCB_PROTO
(*, 
π_scb_öô
, (
«me
, 
size
, 
su¥t
))

107 *
	gscb
;

108 i‡(
	gsu¥t
 > 1000) {

109 
	gsize
 -
HDRSIZ
 + 1;

110 
	gscb
 = (*)
su¥t
;

112 
	gscb
 = 
π_shm_Æloc
(
«me
, 
size
 + 
HDRSIZ
 + 1, 
su¥t
);

114 i‡(
	gscb
 && !
©omic_cmpxchg
((
©omic_t
 *)
scb
, 0, 
«me
)) {

115 ((*)
	gscb
)[1] = ((*)
scb
)[2] = 0;

116 ((*)
	gscb
)[0] = 
size
 + 1;

118 !((*)
	gscb
)[0]);

120  
	gscb
 ? scb + 
	gHDRSIZ
 : 0;

134 
RTAI_SCB_PROTO
(, 
π_scb_ª£t
, (*
scb
))

136 
	gLBYTE
 = 
FBYTE
 = 0;

162 
RTAI_SCB_PROTO
(, 
π_scb_dñëe
, (
«me
))

164  
π_shm_‰ì
(
«me
);

181 
RTAI_SCB_PROTO
 (, 
π_scb_avbs
, (*
scb
))

183 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

184  (
	glbyã
 >
fbyã
 ? 
lbyã
 - fbyã : 
size
 +Übyte - fbyte);

201 
RTAI_SCB_PROTO
 (, 
π_scb_byãs
, (*
scb
))

203  
π_scb_avbs
(
scb
);

220 
RTAI_SCB_PROTO
 (, 
π_scb_‰bs
, (*
scb
))

222 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

223  (
	gfbyã
 <
lbyã
 ? 
size
 + 
fbyã
 -Übyte : size -Übyte);

238 
RTAI_SCB_PROTO
(, 
π_scb_gë
, (*
scb
, *
msg
, 
msg_size
))

240 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

241 i‡(
	gmsg_size
 > 0 && ((
	glbyã
 -
fbyã
Ë>0 ? 
lbyã
 : 
size
 +ÜbyãË>
msg_size
) {

242 
to˝y
;

243 i‡((
	gto˝y
 = 
size
 - 
fbyã
Ë> 
msg_size
) {

244 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
msg_size
);

245 
	gFBYTE
 = 
fbyã
 + 
msg_size
;

247 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
to˝y
);

248 
mem˝y
(
msg
 + 
to˝y
, 
SCB
, 
msg_size
 -=Åocpy);

249 
	gFBYTE
 = 
msg_size
;

253  
	gmsg_size
;

268 
RTAI_SCB_PROTO
(, 
π_scb_evdΩ
, (*
scb
, *
msg
, 
msg_size
))

270 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

271 i‡(
	gmsg_size
 > 0 && ((
	glbyã
 -
fbyã
Ë>0 ? 
lbyã
 : 
size
 +ÜbyãË>
msg_size
) {

272 
to˝y
;

273 i‡((
	gto˝y
 = 
size
 - 
fbyã
Ë> 
msg_size
) {

274 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
msg_size
);

276 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
to˝y
);

277 
mem˝y
(
msg
 + 
to˝y
, 
SCB
, 
msg_size
 -Åocpy);

281  
	gmsg_size
;

296 
RTAI_SCB_PROTO
(, 
π_scb_put
, (*
scb
, *
msg
, 
msg_size
))

298 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

299 i‡(
	gmsg_size
 > 0 && ((
	gfbyã
 -
lbyã
Ë<0 ? 
size
 + 
fbyã
 : fbyãË> 
msg_size
) {

300 
to˝y
;

301 i‡((
	gto˝y
 = 
size
 - 
lbyã
Ë> 
msg_size
) {

302 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
msg_size
);

303 
	gLBYTE
 = 
lbyã
 + 
msg_size
;

305 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
to˝y
);

306 
mem˝y
(
SCB
, 
msg
 + 
to˝y
, 
msg_size
 -=Åocpy);

307 
	gLBYTE
 = 
msg_size
;

311  
	gmsg_size
;

314 
RTAI_SCB_PROTO
(, 
π_scb_ovrwr
, (*
scb
, *
msg
, 
msg_size
))

316 
	gsize
 = 
SIZE
, 
	glbyã
 = 
LBYTE
;

317 i‡(
	gmsg_size
 > 0 && msg_sizê< 
	gsize
) {

318 
	gto˝y
;

319 i‡((
	gto˝y
 = 
size
 - 
lbyã
Ë> 
msg_size
) {

320 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
msg_size
);

321 
	gLBYTE
 = 
lbyã
 + 
msg_size
;

323 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
to˝y
);

324 
mem˝y
(
SCB
, 
msg
 + 
to˝y
, 
msg_size
 -=Åocpy);

325 
	gLBYTE
 = 
msg_size
;

329  
	gmsg_size
;

	@/usr/src/rtai/base/include/rtai_sched.h

19 #i‚de‡
_RTAI_SCHED_H


20 
	#_RTAI_SCHED_H


	)

22 
	~<πai.h
>

23 #i‚de‡
__KERNEL__


24 
	~<sys/time.h
>

25 
	~<time.h
>

26 
	~<î∫o.h
>

27 
	~<πai_ty≥s.h
>

30 
	#RT_SCHED_UP
 1

	)

31 
	#RT_SCHED_SMP
 2

	)

32 
	#RT_SCHED_MUP
 3

	)

34 
	#RT_SCHED_HIGHEST_PRIORITY
 0

	)

35 
	#RT_SCHED_LOWEST_PRIORITY
 0x3fffFfff

	)

36 
	#RT_SCHED_LINUX_PRIORITY
 0x7fffFfff

	)

38 
	#RT_RESEM_SUSPDEL
 (-0x7fffFfff)

	)

40 
	#RT_SCHED_READY
 1

	)

41 
	#RT_SCHED_SUSPENDED
 2

	)

42 
	#RT_SCHED_DELAYED
 4

	)

43 
	#RT_SCHED_SEMAPHORE
 8

	)

44 
	#RT_SCHED_SEND
 16

	)

45 
	#RT_SCHED_RECEIVE
 32

	)

46 
	#RT_SCHED_RPC
 64

	)

47 
	#RT_SCHED_RETURN
 128

	)

48 
	#RT_SCHED_MBXSUSP
 256

	)

49 
	#RT_SCHED_SFTRDY
 512

	)

50 
	#RT_SCHED_POLL
 1024

	)

51 
	#RT_SCHED_SIGSUSP
 (1 << 15)

	)

53 
	#RT_RWLINV
 (11)

54 
	#RT_CHGPORTERR
 (10)

	)

55 
	#RT_CHGPORTOK
 (9)

	)

56 
	#RT_NETIMOUT
 (8)

	)

57 
	#RT_DEADLOK
 (7)

	)

58 
	#RT_PERM
 (6)

	)

59 
	#RT_OBJINV
 (5)

	)

60 
	#RT_OBJREM
 (4)

	)

61 
	#RT_TIMOUT
 (3)

	)

62 
	#RT_UNBLKD
 (2)

	)

63 
	#RT_TMROVRN
 (1)

64 
	#RTP_RWLINV
 ((*)
RT_RWLINV
)

	)

65 
	#RTP_CHGPORTERR
 ((*)
RT_CHGPORTERR
)

	)

66 
	#RTP_CHGPORTOK
 ((*)
RT_CHGPORTOK
)

	)

67 
	#RTP_NETIMOUT
 ((*)
RT_NETIMOUT
)

	)

68 
	#RTP_DEADLOK
 ((*)
RT_DEADLOK
)

	)

69 
	#RTP_PERM
 ((*)
RT_PERM
)

	)

70 
	#RTP_OBJINV
 ((*)
RT_OBJINV
)

	)

71 
	#RTP_OBJREM
 ((*)
RT_OBJREM
)

	)

72 
	#RTP_TIMOUT
 ((*)
RT_TIMOUT
)

	)

73 
	#RTP_UNBLKD
 ((*)
RT_UNBLKD
)

	)

74 
	#RTP_TMROVRN
 ((*)
RT_TMROVRN
)

	)

75 
	#RTP_HIGERR
 (
RTP_RWLINV
)

	)

76 
	#RTP_LOWERR
 (
RTP_TMROVRN
)

	)

77 #i‡
CONFIG_RTAI_USE_NEWERR


78 
	#RTE_BASE
 (0x3FFFFF00)

	)

79 
	#RTE_RWLINV
 (
RTE_BASE
 + 
RT_RWLINV
)

	)

80 
	#RTE_CHGPORTERR
 (
RTE_BASE
 + 
RT_CHGPORTERR
)

	)

81 
	#RTE_CHGPORTOK
 (
RTE_BASE
 + 
RT_CHGPORTOK
)

	)

82 
	#RTE_NETIMOUT
 (
RTE_BASE
 + 
RT_NETIMOUT
)

	)

83 
	#RTE_DEADLOK
 (
RTE_BASE
 + 
RT_DEADLOK
)

	)

84 
	#RTE_PERM
 (
RTE_BASE
 + 
RT_PERM
)

	)

85 
	#RTE_OBJINV
 (
RTE_BASE
 + 
RT_OBJINV
)

	)

86 
	#RTE_OBJREM
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

87 
	#RTE_TIMOUT
 (
RTE_BASE
 + 
RT_TIMOUT
)

	)

88 
	#RTE_UNBLKD
 (
RTE_BASE
 + 
RT_UNBLKD
)

	)

89 
	#RTE_TMROVRN
 (
RTE_BASE
 + 
RT_TMROVRN
)

	)

90 
	#RTE_HIGERR
 (
RTE_RWLINV
)

	)

91 
	#RTE_LOWERR
 (
RTE_TMROVRN
)

	)

93 
	#RTE_BASE
 (0xFFFB)

	)

94 
	#RTE_RWLINV
 (
RTE_BASE
 + 
RT_RWLINV
)

	)

95 
	#RTE_CHGPORTERR
 (
RTE_BASE
 + 
RT_CHGPORTERR
)

	)

96 
	#RTE_CHGPORTOK
 (
RTE_BASE
 + 
RT_CHGPORTOK
)

	)

97 
	#RTE_NETIMOUT
 (
RTE_BASE
 + 
RT_NETIMOUT
)

	)

98 
	#RTE_DEADLOK
 (
RTE_BASE
 + 
RT_DEADLOK
)

	)

99 
	#RTE_PERM
 (
RTE_BASE
 + 
RT_PERM
)

	)

100 
	#RTE_OBJINV
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

101 
	#RTE_OBJREM
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

102 
	#RTE_TIMOUT
 (
RTE_BASE
 + 
RT_TIMOUT
)

	)

103 
	#RTE_UNBLKD
 (
RTE_BASE
 + 
RT_UNBLKD
)

	)

104 
	#RTE_TMROVRN
 (
RTE_BASE
 + 
RT_TMROVRN
)

	)

105 
	#RTE_HIGERR
 (
RTE_RWLINV
)

	)

106 
	#RTE_LOWERR
 (
RTE_TMROVRN
)

	)

109 
	#RT_EINTR
 (
RTE_UNBLKD
)

	)

111 
	#π_is_ªãº
(
i
Ë(ò>
RTE_LOWERR
)

	)

113 
	#RT_IRQ_TASK
 0

	)

114 
	#RT_IRQ_TASKLET
 1

	)

115 
	#RT_IRQ_TASK_ERR
 0x7FFFFFFF

	)

117 
	gπ_èsk_°ru˘
;

119 
	sπ_èsk_öfo
 {

120 
RTIME
 
	m≥riod
; 
	mba£_¥i‹ôy
, 
	m¥i‹ôy
;

121 } 
	tRT_TASK_INFO
;

123 #ifde‡
__KERNEL__


125 
	~<löux/time.h
>

126 
	~<löux/î∫o.h
>

128 #i‡
deföed
(
CONFIG_RTAI_LONG_TIMED_LIST
Ë&& 
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

129 
	~<löux/rbåì.h
>

130 
rb_node
 
	trb_node_t
;

131 
rb_roŸ
 
	trb_roŸ_t
;

134 
	#RT_TASK_MAGIC
 0x9ad25f6f

135 

	)

136 #i‚de‡
__˝lu•lus


138 
	~<löux/sched.h
>

140 
	sπ_queue
 {

141 
π_queue
 *
	m¥ev
;

142 
π_queue
 *
	m√xt
;

143 
π_èsk_°ru˘
 *
	mèsk
;

144 } 
	tQUEUE
;

146 
	smcb_t
 {

147 *
	msbuf
;

148 
	msbyãs
;

149 *
	mrbuf
;

150 
	mrbyãs
;

154 
	sπ_ExôH™dÀr
 {

155 
π_ExôH™dÀr
 *
	mnxt
;

156 (*
	mfun
Ë(*
	m¨g1
, 
	m¨g2
);

157 *
	m¨g1
;

158 
	m¨g2
;

159 } 
	tXHDL
;

161 
	sπ_hóp_t
 { *
	mhóp
, *
	mkadr
, *
	muadr
; };

163 
	#RTAI_MAX_NAME_LENGTH
 32

	)

165 
	sπ_èsk_°ru˘
 {

166 *
°ack
 
__©åibuã__
 ((
__Æig√d__
 (
L1_CACHE_BYTES
)));

167 
	mu£s_Âu
;

168 
	mmagic
;

169 vﬁ©ûê
	m°©e
, 
	mru¬ög
;

170 
	mru¬abÀ_⁄_˝us
;

171 *
	m°ack_bŸtom
;

172 vﬁ©ûê
	m¥i‹ôy
;

173 
	mba£_¥i‹ôy
;

174 
	mpﬁicy
;

175 
	msched_lock_¥i‹ôy
;

176 
π_èsk_°ru˘
 *
	m¥io_∑s£d_to
;

177 
RTIME
 
	m≥riod
;

178 
RTIME
 
	mªsume_time
;

179 
RTIME
 
	m≥riodic_ªsume_time
;

180 
RTIME
 
	myõld_time
;

181 
	mº_qu™tum
, 
	mº_ªmaöög
;

182 
	msu•dïth
;

183 
π_queue
 
	mqueue
;

184 
	mowndªs
;

185 
π_queue
 *
	mblocked_⁄
;

186 
π_queue
 
	mmsg_queue
;

187 
	mtid
;

188 
	mmsg
;

189 
π_queue
 
	mªt_queue
;

190 (*
	msig«l
)();

191 
FPU_ENV
 
Âu_ªg
 
__©åibuã__
 ((
__Æig√d__
 (
L1_CACHE_BYTES
)));

192 
π_èsk_°ru˘
 *
	m¥ev
, *
	m√xt
;

193 
π_èsk_°ru˘
 *
	mçªv
, *
	mäext
;

194 
π_èsk_°ru˘
 *
	mΩªv
, *
	m∫ext
;

197 *
	mfun_¨gs
;

198 *
	mb°ack
;

199 
èsk_°ru˘
 *
	m xtsk
;

200 
	mªtvÆ
;

201 *
	mmsg_buf
[2];

202 
	mmax_msg_size
[2];

203 
	mèsk_«me
[
RTAI_MAX_NAME_LENGTH
];

204 *
	msy°em_d©a_±r
;

205 
π_èsk_°ru˘
 *
	m√xç
, *
	m¥evp
;

207 
RT_TRAP_HANDLER
 
	mèsk_å≠_h™dÀr
[
HAL_NR_FAULTS
];

209 
	munblocked
;

210 *
	mπ_sig«ls
;

211 vﬁ©ûê
	mp°©e
;

212 
	mu•_Êags
;

213 
	mu•_Êags_mask
;

214 
	mf‹˚_so·
;

215 vﬁ©ûê
	mis_h¨d
;

216 
	mkî∫o
;

218 
	mbusy_time_Æign
;

219 *
	mlöux_sysˇŒ_£rvî
;

222 
	mªsync_‰ame
;

225 
XHDL
 *
	mExôHook
;

227 
RTIME
 
	mexe˘ime
[2];

228 
mcb_t
 
	mmcb
;

231 
π_hóp_t
 
	mhóp
[2];

233 vﬁ©ûê
	mscheduÀr
;

235 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


236 
rb_roŸ_t
 
	mrbr
;

237 
rb_node_t
 
	mrbn
;

239 
π_queue
 
	mªsq
;

240 
	mªsumsg
;

241 } 
	tRT_TASK
 
	t__©åibuã__
 ((
	t__Æig√d__
 (
	tL1_CACHE_BYTES
)));

247 
π_èsk_öô
(
π_èsk_°ru˘
 *
èsk
,

248 (*
π_thªad
)(),

249 
d©a
,

250 
°ack_size
,

251 
¥i‹ôy
,

252 
u£s_Âu
,

253 (*
sig«l
)());

255 
π_èsk_öô_˝uid
(
π_èsk_°ru˘
 *
èsk
,

256 (*
π_thªad
)(),

257 
d©a
,

258 
°ack_size
,

259 
¥i‹ôy
,

260 
u£s_Âu
,

261 (*
sig«l
)(),

262 
run_⁄_˝u
);

264 
π_kthªad_öô
(
π_èsk_°ru˘
 *
èsk
,

265 (*
π_thªad
)(),

266 
d©a
,

267 
°ack_size
,

268 
¥i‹ôy
,

269 
u£s_Âu
,

270 (*
sig«l
)());

272 
π_kthªad_öô_˝uid
(
π_èsk_°ru˘
 *
èsk
,

273 (*
π_thªad
)(),

274 
d©a
,

275 
°ack_size
,

276 
¥i‹ôy
,

277 
u£s_Âu
,

278 (*
sig«l
)(),

279 
run_⁄_˝u
);

281 
RTAI_SYSCALL_MODE
 
π_£t_ru¬abÀ_⁄_˝us
(
π_èsk_°ru˘
 *
èsk
,

282 
˝u_mask
);

284 
RTAI_SYSCALL_MODE
 
π_£t_ru¬abÀ_⁄_˝uid
(
π_èsk_°ru˘
 *
èsk
,

285 
˝uid
);

287 
RTAI_SYSCALL_MODE
 
π_£t_sched_pﬁicy
(
π_èsk_°ru˘
 *
èsk
,

288 
pﬁicy
,

289 
º_qu™tum_ns
);

291 
π_èsk_dñëe
(
π_èsk_°ru˘
 *
èsk
);

293 
π_gë_èsk_°©e
(
π_èsk_°ru˘
 *
èsk
);

295 
π_gëtime‹ig
(
RTIME
 
time_‹ig
[]);

297 
π_gë_timî_˝u
();

299 
π_is_h¨d_timî_ru¬ög
();

301 
π_£t_≥riodic_mode
();

303 
π_£t_⁄eshŸ_mode
();

305 
RTAI_SYSCALL_MODE
 
RTIME
 
°¨t_π_timî
(
≥riod
);

307 
	#°¨t_π_timî_ns
(
≥riod
Ë
	`°¨t_π_timî
(
	`«no2cou¡
(’îiod)))

	)

309 
RTAI_SYSCALL_MODE
 
°¨t_π_≠ic_timîs
(
≠ic_timî_£tup_d©a
 *
£tup_mode
,

310 
rcvr_jiffõs_˝uid
);

312 
°›_π_timî
();

314 
π_èsk_°ru˘
 *
π_whﬂmi
();

316 
π_sched_ty≥
();

318 
RTAI_SYSCALL_MODE
 
π_èsk_sig«l_h™dÀr
(
π_èsk_°ru˘
 *
èsk
,

319 (*
h™dÀr
)());

321 
RTAI_SYSCALL_MODE
 
π_èsk_u£_Âu
(
π_èsk_°ru˘
 *
èsk
,

322 
u£_Âu_Êag
);

324 
π_löux_u£_Âu
(
u£_Âu_Êag
);

326 
RTAI_SYSCALL_MODE
 
π_h¨d_timî_tick_cou¡
();

328 
RTAI_SYSCALL_MODE
 
π_h¨d_timî_tick_cou¡_˝uid
(
˝uid
);

330 
RTAI_SYSCALL_MODE
 
RTIME
 
cou¡2«no
(RTIME 
timîcou¡s
);

332 
RTAI_SYSCALL_MODE
 
RTIME
 
«no2cou¡
(RTIME 
«no£cs
);

334 
RTAI_SYSCALL_MODE
 
RTIME
 
cou¡2«no_˝uid
(RTIME 
timîcou¡s
, 
˝uid
);

336 
RTAI_SYSCALL_MODE
 
RTIME
 
«no2cou¡_˝uid
(RTIME 
«no£cs
, 
˝uid
);

338 
RTIME
 
π_gë_time
();

340 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_time_˝uid
(
˝uid
);

342 
RTIME
 
π_gë_time_ns
();

344 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_time_ns_˝uid
(
˝uid
);

346 
RTIME
 
π_gë_˝u_time_ns
();

348 
RTIME
 
π_gë_ªÆ_time
();

350 
RTIME
 
π_gë_ªÆ_time_ns
();

352 
π_gë_¥io
(
π_èsk_°ru˘
 *
èsk
);

354 
π_gë_öhî_¥io
(
π_èsk_°ru˘
 *
èsk
);

356 
RTAI_SYSCALL_MODE
 
π_èsk_gë_öfo
(
RT_TASK
 *
èsk
, 
RT_TASK_INFO
 *
èsk_öfo
);

358 
RTAI_SYSCALL_MODE
 
π_gë_¥i‹ôõs
(
π_èsk_°ru˘
 *
èsk
, *
¥i‹ôy
, *
ba£_¥i‹ôy
);

360 
RTAI_SYSCALL_MODE
 
π_•v_RMS
(
˝uid
);

362 
RTAI_SYSCALL_MODE
 
π_ch™ge_¥io
(
π_èsk_°ru˘
 *
èsk
,

363 
¥i‹ôy
);

365 
π_sched_lock
();

367 
π_sched_u∆ock
();

369 
π_èsk_yõld
();

371 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd
(
π_èsk_°ru˘
 *
èsk
);

373 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_if
(
π_èsk_°ru˘
 *
èsk
);

375 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_u¡û
(
π_èsk_°ru˘
 *
èsk
, 
RTIME
 
u¡û
);

377 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_timed
(
π_èsk_°ru˘
 *
èsk
, 
RTIME
 
dñay
);

379 
RTAI_SYSCALL_MODE
 
π_èsk_ªsume
(
π_èsk_°ru˘
 *
èsk
);

381 
RTAI_SYSCALL_MODE
 
π_£t_löux_sysˇŒ_mode
(
sync_async
, (*
ˇŒback_fun
)(, ));

383 
löux_sysˇŒs_li°
;

384 
π_exec_löux_sysˇŒ
(
RT_TASK
 *
π_cuºít
, 
löux_sysˇŒs_li°
 *
sysˇŒs
, 
±_ªgs
 *
ªgs
);

386 
RTAI_SYSCALL_MODE
 
π_ªtu∫_löux_sysˇŒ
(
RT_TASK
 *
èsk
, 
ªtvÆ
);

388 
RTAI_SYSCALL_MODE
 
π_úq_waô
(
úq
);

390 
RTAI_SYSCALL_MODE
 
π_úq_waô_if
(
úq
);

392 
RTAI_SYSCALL_MODE
 
π_úq_waô_u¡û
(
úq
, 
RTIME
 
u¡û
);

394 
RTAI_SYSCALL_MODE
 
π_úq_waô_timed
(
úq
, 
RTIME
 
dñay
);

396 
RTAI_SYSCALL_MODE
 
π_úq_sig«l
(
úq
);

398 
RTAI_SYSCALL_MODE
 
π_ªque°_úq_èsk
 (
úq
, *
h™dÀr
, 
ty≥
, 
afföe2èsk
);

400 
RTAI_SYSCALL_MODE
 
π_ªÀa£_úq_èsk
 (
úq
);

402 
RTAI_SYSCALL_MODE
 
π_èsk_make_≥riodic_ªœtive_ns
(
π_èsk_°ru˘
 *
èsk
,

403 
RTIME
 
°¨t_dñay
,

404 
RTIME
 
≥riod
);

406 
RTAI_SYSCALL_MODE
 
π_èsk_make_≥riodic
(
π_èsk_°ru˘
 *
èsk
,

407 
RTIME
 
°¨t_time
,

408 
RTIME
 
≥riod
);

410 
RTAI_SYSCALL_MODE
 
π_èsk_£t_ªsume_íd_times
(
RTIME
 
ªsume
,

411 
RTIME
 
íd
);

413 
RTAI_SYSCALL_MODE
 
π_£t_ªsume_time
(
π_èsk_°ru˘
 *
èsk
,

414 
RTIME
 
√w_ªsume_time
);

416 
RTAI_SYSCALL_MODE
 
π_£t_≥riod
(
π_èsk_°ru˘
 *
èsk
,

417 
RTIME
 
√w_≥riod
);

419 
π_èsk_waô_≥riod
();

421 
π_scheduÀ
();

423 
RTIME
 
√xt_≥riod
();

425 
RTAI_SYSCALL_MODE
 
π_busy_¶ìp
(
«no£cs
);

427 
RTAI_SYSCALL_MODE
 
π_¶ìp
(
RTIME
 
dñay
);

429 
RTAI_SYSCALL_MODE
 
π_¶ìp_u¡û
(
RTIME
 
time
);

431 
RTAI_SYSCALL_MODE
 
π_èsk_masked_unblock
(
π_èsk_°ru˘
 *
èsk
, 
mask
);

433 
	#π_èsk_wakeup_¶ìpög
(
t
Ë
	`π_èsk_masked_unblock
—, 
RT_SCHED_DELAYED
)

	)

435 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_«med_èsk_öô
(c⁄° *
èsk_«me
,

436 (*
thªad
)(),

437 
d©a
,

438 
°ack_size
,

439 
¥io
,

440 
u£s_Âu
,

441 (*
sig«l
)());

443 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_«med_èsk_öô_˝uid
(c⁄° *
èsk_«me
,

444 (*
thªad
)(),

445 
d©a
,

446 
°ack_size
,

447 
¥io
,

448 
u£s_Âu
,

449 (*
sig«l
)(),

450 
run_⁄_˝u
);

452 
RTAI_SYSCALL_MODE
 
π_«med_èsk_dñëe
(
π_èsk_°ru˘
 *
èsk
);

454 
RT_TRAP_HANDLER
 
π_£t_èsk_å≠_h™dÀr
(
π_èsk_°ru˘
 *
èsk
,

455 
vec
,

456 
RT_TRAP_HANDLER
 
h™dÀr
);

458 
ölöe
 
RTIME
 
timevÆ2cou¡
(
timevÆ
 *
t
)

460  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_u£c
*1000);

463 
ölöe
 
cou¡2timevÆ
(
RTIME
 
π
, 
timevÆ
 *
t
)

465 
t
->
tv_£c
 = 
πai_uŒdiv
(
cou¡2«no
(
π
), 1000000000, (*)&t->
tv_u£c
);

466 
t
->
tv_u£c
 /= 1000;

469 
ölöe
 
RTIME
 
time•ec2cou¡
(c⁄° 
time•ec
 *
t
)

471  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
);

474 
ölöe
 
cou¡2time•ec
(
RTIME
 
π
, 
time•ec
 *
t
)

476 
t
->
tv_£c
 = 
πai_uŒdiv
(
cou¡2«no
(
π
), 1000000000, (*)&t->
tv_n£c
);

479 
ölöe
 
RTIME
 
time•ec2«nos
(c⁄° 
time•ec
 *
t
)

481  
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
;

484 
ölöe
 
«nos2time•ec
(
RTIME
 
π
, 
time•ec
 *
t
)

486 
t
->
tv_£c
 = 
πai_uŒdiv
(
π
, 1000000000, (*)&t->
tv_n£c
);

489 
π_make_h¨d_ªÆ_time
(
RT_TASK
 *
èsk
);

491 
π_make_so·_ªÆ_time
(
RT_TASK
 *
èsk
);

493 #ifde‡
__˝lu•lus


499 
RT_TASK
 *
π_gë_ba£_löux_èsk
(RT_TASK **
ba£_löux_èsk
);

501 
RT_TASK
 *
π_Æloc_dy«mic_èsk
();

503 
π_íq_ªady_edf_èsk
(
RT_TASK
 *
ªady_èsk
);

505 
π_íq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
);

507 
π_ªnq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
,

508 
¥i‹ôy
);

510 
π_ªm_ªady_èsk
(
RT_TASK
 *
èsk
);

512 
π_ªm_ªady_cuºít
(
RT_TASK
 *
π_cuºít
);

514 
π_íq_timed_èsk
(
RT_TASK
 *
timed_èsk
);

516 
π_ªm_timed_èsk
(
RT_TASK
 *
èsk
);

518 
π_dequeue_blocked
(
RT_TASK
 *
èsk
);

520 
RT_TASK
 **
π_ªgi°î_w©chdog
(RT_TASK *
wdog
,

521 
˝uid
);

523 
π_dîegi°î_w©chdog
(
RT_TASK
 *
wdog
,

524 
˝uid
);

530 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

532 
	sπ_èsk_°ru˘
 {

533 
›aque
;

534 } 
	tRT_TASK
;

536 
	sQueueBlock
 {

537 
›aque
;

538 } 
	tQBLK
;

540 
	sQueueHook
 {

541 
›aque
;

542 } 
	tQHOOK
;

	@/usr/src/rtai/base/include/rtai_schedcore.h

20 #i‚de‡
_RTAI_SCHEDCORE_H


21 
	#_RTAI_SCHEDCORE_H


	)

23 #ifde‡
__KERNEL__


25 
	~<löux/moduÀ.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/kî√l.h
>

28 
	~<löux/vîsi⁄.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/timex.h
>

32 
	~<löux/sched.h
>

33 
	~<asm/∑øm.h
>

34 
	~<asm/io.h
>

35 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,18)

36 
	~<löux/oom.h
>

39 
	~<πai_vîsi⁄.h
>

40 
	~<πai_lxπ.h
>

41 
	~<πai_sched.h
>

42 
	~<πai_mÆloc.h
>

43 
	~<πai_åa˚.h
>

44 
	~<πai_Àds.h
>

45 
	~<πai_£m.h
>

46 
	~<πai_rwl.h
>

47 
	~<πai_•l.h
>

48 
	~<πai_scb.h
>

49 
	~<πai_mbx.h
>

50 
	~<πai_msg.h
>

51 
	~<πai_tbx.h
>

52 
	~<πai_mq.h
>

53 
	~<πai_bôs.h
>

54 
	~<πai_wd.h
>

55 
	~<πai_èskÀts.h
>

56 
	~<πai_fifos.h
>

57 
	~<πai_√åpc.h
>

58 
	~<πai_shm.h
>

59 
	~<πai_usi.h
>

62 #ifde‡
OOM_DISABLE


63 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

64 
	#RTAI_OOM_DISABLE
() \

65 dÿ{ 
cuºít
->
oomkûœdj
 = 
OOM_DISABLE
; } 0)

	)

67 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,0)

68 
	#RTAI_OOM_DISABLE
() \

69 dÿ{ 
cuºít
->
sig«l
->
oom_adj
 = 
OOM_DISABLE
; } 0)

	)

71 
	#RTAI_OOM_DISABLE
() \

72 dÿ{ 
cuºít
->
sig«l
->
oom_sc‹e_adj
 = 
OOM_DISABLE
; } 0)

	)

76 
	#RTAI_OOM_DISABLE
()

	)

79 
	#NON_RTAI_TASK_SUSPEND
(
èsk
) \

80 dÿ{ (
èsk
->
 xtsk
)->
°©e
 = 
TASK_SOFTREALTIME
; } 0)

	)

82 
	#NON_RTAI_TASK_RESUME
(
ªady_èsk
) \

83 dÿ{ 
	`≥nd_wake_up_§q
(
ªady_èsk
->
 xtsk
, 
	`πai_˝uid
()); } 0)

	)

85 
	#REQUEST_RESUME_SRQs_STUFF
() \

87 i‡(!(
wake_up_§q
[0].
§q
 = 
	`hÆ_Æloc_úq
())) { \

88 
	`¥ötk
("*** ABORT, NO VIRQ AVAILABLE FOR THE WAKING UP SRQ. ***\n"); \

91 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
wake_up_§q
[0].
§q
, 
wake_up_§q_h™dÀr
, 
NULL
, 
IPIPE_HANDLE_FLAG
); \

92 } 0)

	)

94 
	#RELEASE_RESUME_SRQs_STUFF
() \

96 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
wake_up_§q
[0].
§q
, 
NULL
, NULL, 0); \

97 
	`hÆ_‰ì_úq
(
wake_up_§q
[0].
§q
); \

98 } 0)

	)

100 
RT_TASK
 
π_smp_löux_èsk
[];

102 
RT_TASK
 *
π_smp_cuºít
[];

104 
RTIME
 
π_smp_time_h
[];

106 
π_smp_⁄eshŸ_timî
[];

108 vﬁ©ûê
π_sched_timed
;

110 #ifde‡
CONFIG_RTAI_MALLOC


111 #ifde‡
CONFIG_RTAI_MALLOC_BUILTIN


112 
	#sched_mem_öô
() \

113 { if(
	`__πai_hóp_öô
() != 0) { \

114 (-
ENOMEM
); \

115 } }

	)

116 
	#sched_mem_íd
(Ë
	`__πai_hóp_exô
()

	)

118 
	#sched_mem_öô
()

	)

119 
	#sched_mem_íd
()

	)

121 
	#ˇŒ_exô_h™dÀrs
(
èsk
Ë
	`__ˇŒ_exô_h™dÀrs
—ask)

	)

122 
	#£t_exô_h™dÀr
(
èsk
, 
fun
, 
¨g1
, 
¨g2
Ë
	`__£t_exô_h™dÀr
—ask, fun,árg1,árg2)

	)

124 
	#sched_mem_öô
()

	)

125 
	#sched_mem_íd
()

	)

126 
	#ˇŒ_exô_h™dÀrs
(
èsk
)

	)

127 
	#£t_exô_h™dÀr
(
èsk
, 
fun
, 
¨g1
, 
¨g2
)

	)

130 
	#SEMHLF
 0x0000FFFF

	)

131 
	#RPCHLF
 0xFFFF0000

	)

132 
	#RPCINC
 0x00010000

	)

134 
	#DECLARE_RT_CURRENT
 
˝uid
; 
RT_TASK
 *
π_cuºít


	)

135 
	#ASSIGN_RT_CURRENT
 
π_cuºít
 = 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()]

	)

136 
	#RT_CURRENT
 
π_smp_cuºít
[
	`πai_˝uid
()]

	)

138 
	#MAX_LINUX_RTPRIO
 99

	)

139 
	#MIN_LINUX_RTPRIO
 1

	)

141 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


142 
πai_h™dÀ_isched_lock
(
√°ög
);

145 #ifde‡
CONFIG_SMP


146 
	#π_time_h
 (
π_smp_time_h
[
˝uid
])

	)

147 
	#⁄eshŸ_timî
 (
π_smp_⁄eshŸ_timî
[
˝uid
])

	)

148 
	#π_löux_èsk
 (
π_smp_löux_èsk
[
˝uid
])

	)

150 
	#π_time_h
 (
π_smp_time_h
[0])

	)

151 
	#⁄eshŸ_timî
 (
π_smp_⁄eshŸ_timî
[0])

	)

152 
	#π_löux_èsk
 (
π_smp_löux_èsk
[0])

	)

160 
	#RTAI_MAX_FUN_ARGS
 9

	)

161 
	sfun_¨gs
 { 
	ma
[
RTAI_MAX_FUN_ARGS
]; 
RTAI_SYSCALL_MODE
 (*
	mfun
)(, ...); };

163 
	#RTAI_FUN_ARGS
 
¨g
[0],¨g[1],¨g[2],¨g[3],¨g[4],¨g[5],¨g[6],¨g[7],¨g[
RTAI_MAX_FUN_ARGS
 - 1]

	)

165 
	#RTAI_FUNARGS
 
fu«rg
->
a
[0],fu«rg->a[1],fu«rg->a[2],fu«rg->a[3],fu«rg->a[4],fu«rg->a[5],fu«rg->a[6],fu«rg->a[7],fu«rg->a[
RTAI_MAX_FUN_ARGS
 - 1]

	)

167 
	#RTAI_FUN_A
 
a
[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[
RTAI_MAX_FUN_ARGS
 - 1]

	)

169 #ifde‡
CONFIG_SMP


171 
ölöe
 
	$£nd_sched_ùi
(
de°
)

173 
	`_£nd_sched_ùi
(
de°
);

174 
	}
}

176 
	#RT_SCHEDULE_MAP
(
schedm≠
) \

177 dÿ{ i‡(
schedm≠
Ë
	`£nd_sched_ùi
(schedm≠); } 0)

	)

179 
	#RT_SCHEDULE_MAP_BOTH
(
schedm≠
) \

180 dÿ{ i‡(
schedm≠
Ë
	`£nd_sched_ùi
(schedm≠); 
	`π_scheduÀ
(); } 0)

	)

182 
	#RT_SCHEDULE
(
èsk
, 
˝uid
) \

184 i‡((
èsk
)->
ru¬abÀ_⁄_˝us
 !(
˝uid
)) { \

185 
	`£nd_sched_ùi
(1 << (
èsk
)->
ru¬abÀ_⁄_˝us
); \

187 
	`π_scheduÀ
(); \

189 } 0)

	)

191 
	#RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
) \

193 i‡((
èsk
)->
ru¬abÀ_⁄_˝us
 !(
˝uid
)) { \

194 
	`£nd_sched_ùi
(1 << (
èsk
)->
ru¬abÀ_⁄_˝us
); \

196 
	`π_scheduÀ
(); \

197 }

	)

201 
	#£nd_sched_ùi
(
de°
)

	)

203 
	#RT_SCHEDULE_MAP_BOTH
(
schedm≠
Ë
	`π_scheduÀ
()

	)

205 
	#RT_SCHEDULE_MAP
(
schedm≠
Ë
	`π_scheduÀ
()

	)

207 
	#RT_SCHEDULE
(
èsk
, 
˝uid
Ë
	`π_scheduÀ
()

	)

209 
	#RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
Ë
	`π_scheduÀ
()

	)

213 
	#BASE_SOFT_PRIORITY
 1000000000

	)

215 #i‚de‡
TASK_NOWAKEUP


216 
	#TASK_NOWAKEUP
 
TASK_UNINTERRUPTIBLE


	)

219 
	#TASK_HARDREALTIME
 (
TASK_INTERRUPTIBLE
 | 
TASK_NOWAKEUP
)

	)

220 
	#TASK_RTAISRVSLEEP
 (
TASK_INTERRUPTIBLE
 | 
TASK_NOWAKEUP
)

	)

221 
	#TASK_SOFTREALTIME
 
TASK_INTERRUPTIBLE


	)

223 
ölöe
 
	$íq_ªady_edf_èsk
(
RT_TASK
 *
ªady_èsk
)

225 
RT_TASK
 *
èsk
;

226 #ifde‡
CONFIG_SMP


227 
èsk
 = 
π_smp_löux_èsk
[
ªady_èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
;

229 
èsk
 = 
π_smp_löux_èsk
[0].
∫ext
;

231 
èsk
->
pﬁicy
 < 0 && 
ªady_èsk
->
≥riod
 >=Åask->period) {

232 
èsk
 =Åask->
∫ext
;

234 
èsk
->
Ωªv
 = (
ªady_èsk
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñeady_task;

235 
ªady_èsk
->
∫ext
 = 
èsk
;

236 
	}
}

238 
	sïoch_°ru˘
 { 
•ölock_t
 
	mlock
; vﬁ©ûê
	mtou£
; vﬁ©ûê
RTIME
 
	mtime
[2][2]; };

240 #ifde‡
CONFIG_RTAI_CLOCK_REALTIME


241 
	#REALTIME2COUNT
(
πime
) \

242 i‡(
πime
 > 
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][0]) { \

243 
πime
 -
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][0]; \

244 }

	)

246 
	#REALTIME2COUNT
(
πime
)

	)

249 
	#MAX_WAKEUP_SRQ
 (1 << 6)

	)

251 
	skli°_t
 { 
	m§q
; vﬁ©ûê
	mö
, 
	mout
; *
	mèsk
[
MAX_WAKEUP_SRQ
]; };

252 
kli°_t
 
wake_up_§q
[];

254 
	#≥nd_wake_up_§q
(
 xtsk
, 
˝uid
) \

256 
wake_up_§q
[
˝uid
].
èsk
[wake_up_§q[˝uid].
ö
++ & (
MAX_WAKEUP_SRQ
 - 1)] = 
 xtsk
; \

257 
	`hÆ_≥nd_unc⁄d
(
wake_up_§q
[0].
§q
, 
˝uid
); \

258 } 0)

	)

260 
ölöe
 
	$íq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
)

262 
RT_TASK
 *
èsk
;

263 i‡(
ªady_èsk
->
is_h¨d
) {

264 #ifde‡
CONFIG_SMP


265 
èsk
 = 
π_smp_löux_èsk
[
ªady_èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
;

267 
èsk
 = 
π_smp_löux_èsk
[0].
∫ext
;

269 
ªady_èsk
->
¥i‹ôy
 >
èsk
->priority) {

270 i‡((
èsk
 =Åask->
∫ext
)->
¥i‹ôy
 < 0) ;

272 
èsk
->
Ωªv
 = (
ªady_èsk
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñeady_task;

273 
ªady_èsk
->
∫ext
 = 
èsk
;

275 
ªady_èsk
->
°©e
 |
RT_SCHED_SFTRDY
;

276 
	`NON_RTAI_TASK_RESUME
(
ªady_èsk
);

278 
	}
}

280 
ölöe
 
	$ªnq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
, 
¥i‹ôy
)

282 
ªtvÆ
;

283 i‡((
ªtvÆ
 = 
ªady_èsk
->
¥i‹ôy
 !=Öriority)) {

284 
ªady_èsk
->
¥i‹ôy
 =Öriority;

285 i‡(
ªady_èsk
->
°©e
 =
RT_SCHED_READY
) {

286 (
ªady_èsk
->
Ωªv
)->
∫ext
 =Ñeady_task->rnext;

287 (
ªady_èsk
->
∫ext
)->
Ωªv
 =Ñeady_task->rprev;

288 
	`íq_ªady_èsk
(
ªady_èsk
);

291  
ªtvÆ
;

292 
	}
}

294 
ölöe
 
	$ªm_ªady_èsk
(
RT_TASK
 *
èsk
)

296 i‡(
èsk
->
°©e
 =
RT_SCHED_READY
) {

297 i‡(!
èsk
->
is_h¨d
) {

298 
	`NON_RTAI_TASK_SUSPEND
(
èsk
);

301 (
èsk
->
Ωªv
)->
∫ext
 =Åask->rnext;

302 (
èsk
->
∫ext
)->
Ωªv
 =Åask->rprev;

304 
	}
}

306 
ölöe
 
	$ªm_ªady_cuºít
(
RT_TASK
 *
π_cuºít
)

308 i‡(!
π_cuºít
->
is_h¨d
) {

309 
	`NON_RTAI_TASK_SUSPEND
(
π_cuºít
);

312 (
π_cuºít
->
Ωªv
)->
∫ext
 =Ñt_current->rnext;

313 (
π_cuºít
->
∫ext
)->
Ωªv
 =Ñt_current->rprev;

314 
	}
}

316 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


319 
ölöe
 
	$íq_timed_èsk
(
RT_TASK
 *
timed_èsk
)

321 
RT_TASK
 *
èskh
, *
tsknxt
, *
èsk
;

322 
rb_node_t
 **
rbä
, *
rbçn
 = 
NULL
;

323 #ifde‡
CONFIG_SMP


324 
èsk
 = 
èskh
 = &
π_smp_löux_èsk
[
timed_èsk
->
ru¬abÀ_⁄_˝us
];

326 
èsk
 = 
èskh
 = &
π_smp_löux_èsk
[0];

328 
rbä
 = &
èskh
->
rbr
.
rb_node
;

330 *
rbä
) {

331 
rbçn
 = *
rbä
;

332 
tsknxt
 = 
	`rb_íåy
(
rbçn
, 
RT_TASK
, 
rbn
);

333 i‡(
timed_èsk
->
ªsume_time
 > 
tsknxt
->resume_time) {

334 
rbä
 = &(
rbçn
)->
rb_right
;

336 
rbä
 = &(
rbçn
)->
rb_À·
;

337 
èsk
 = 
tsknxt
;

340 
	`rb_lök_node
(&
timed_èsk
->
rbn
, 
rbçn
, 
rbä
);

341 
	`rb_ö£π_cﬁ‹
(&
timed_èsk
->
rbn
, &
èskh
->
rbr
);

342 
èsk
->
çªv
 = (
timed_èsk
->çªv =Åask->çªv)->
äext
 =Åimed_task;

343 
timed_èsk
->
äext
 = 
èsk
;

344 
	}
}

346 
	#rb_îa£_èsk
(
èsk
, 
˝uid
) \

347 
	`rb_îa£
(&(
èsk
)->
rbn
, &
π_smp_löux_èsk
[
˝uid
].
rbr
);

	)

352 
ölöe
 
	$íq_timed_èsk
(
RT_TASK
 *
timed_èsk
)

354 
RT_TASK
 *
èsk
;

355 #ifde‡
CONFIG_SMP


356 
èsk
 = 
π_smp_löux_èsk
[
timed_èsk
->
ru¬abÀ_⁄_˝us
].
äext
;

358 
èsk
 = 
π_smp_löux_èsk
[0].
äext
;

360 
timed_èsk
->
ªsume_time
 > 
èsk
->resume_time) {

361 
èsk
 =Åask->
äext
;

363 
èsk
->
çªv
 = (
timed_èsk
->çªv =Åask->çªv)->
äext
 =Åimed_task;

364 
timed_èsk
->
äext
 = 
èsk
;

365 
	}
}

367 
	#rb_îa£_èsk
(
èsk
, 
˝uid
)

	)

371 
ölöe
 
	$ªm_timed_èsk
(
RT_TASK
 *
èsk
)

373 i‡((
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

374 (
èsk
->
çªv
)->
äext
 =Åask->tnext;

375 (
èsk
->
äext
)->
çªv
 =Åask->tprev;

376 #ifde‡
CONFIG_SMP


377 
	`rb_îa£_èsk
(
èsk
,Åask->
ru¬abÀ_⁄_˝us
);

379 
	`rb_îa£_èsk
(
èsk
, 0);

382 
	}
}

384 
ölöe
 
	$wake_up_timed_èsks
(
˝uid
)

386 
RT_TASK
 *
èskh
, *
èsk
;

387 #ifde‡
CONFIG_SMP


388 
èsk
 = (
èskh
 = &
π_smp_löux_èsk
[
˝uid
])->
äext
;

390 
èsk
 = (
èskh
 = &
π_smp_löux_èsk
[0])->
äext
;

392 i‡(
èsk
->
ªsume_time
 <
π_time_h
) {

394 i‡((
èsk
->
°©e
 & 
RT_SCHED_SUSPENDED
Ë&&Åask->
su•dïth
 > 0) {

395 
èsk
->
su•dïth
 = 0;

397 i‡((
èsk
->
°©e
 &~(
RT_SCHED_DELAYED
 | 
RT_SCHED_SUSPENDED
 | 
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_RECEIVE
 | 
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
 | 
RT_SCHED_MBXSUSP
 | 
RT_SCHED_POLL
)Ë=
RT_SCHED_READY
) {

398 i‡(
èsk
->
pﬁicy
 < 0) {

399 
	`íq_ªady_edf_èsk
(
èsk
);

401 
	`íq_ªady_èsk
(
èsk
);

403 #i‡
	`deföed
(
CONFIG_RTAI_BUSY_TIME_ALIGN
) && CONFIG_RTAI_BUSY_TIME_ALIGN

404 
èsk
->
busy_time_Æign
 = 
⁄eshŸ_timî
;

407 
	`rb_îa£_èsk
(
èsk
, 
˝uid
);

408 
èsk
 =Åask->
äext
;

409 } 
èsk
->
ªsume_time
 <
π_time_h
);

410 #ifde‡
CONFIG_SMP


411 
π_smp_löux_èsk
[
˝uid
].
äext
 = 
èsk
;

412 
èsk
->
çªv
 = &
π_smp_löux_èsk
[
˝uid
];

414 
π_smp_löux_èsk
[0].
äext
 = 
èsk
;

415 
èsk
->
çªv
 = &
π_smp_löux_èsk
[0];

418 
	}
}

420 
	#gë_time
(Ë
	`π_gë_time
()

	)

422 
ölöe
 
RTIME
 
	$gë_time
()

424 #ifde‡
CONFIG_SMP


425 
˝uid
;

426  
π_smp_⁄eshŸ_timî
[
˝uid
 = 
	`πai_˝uid
()] ? 
	`rdtsc
(Ë: 
π_smp_times
[˝uid].
tick_time
;

428  
π_smp_⁄eshŸ_timî
[0] ? 
	`rdtsc
(Ë: 
π_smp_times
[0].
tick_time
;

430 
	}
}

433 
ölöe
 
	$íqueue_blocked
(
RT_TASK
 *
èsk
, 
QUEUE
 *
queue
, 
qty≥
)

435 
QUEUE
 *
q
;

436 
èsk
->
blocked_⁄
 = (
q
 = 
queue
);

437 i‡(!
qty≥
) {

438 (
q
 = q->
√xt
Ë!
queue
 && (q->
èsk
)->
¥i‹ôy
 <=Åask->priority);

440 
q
->
¥ev
 = (
èsk
->
queue
.¥ev = q->¥ev)->
√xt
 = &(task->queue);

441 
èsk
->
queue
.
√xt
 = 
q
;

442 
	}
}

445 
ölöe
 
	$dequeue_blocked
(
RT_TASK
 *
èsk
)

447 
èsk
->
¥io_∑s£d_to
 = 
NULL
;

448 (
èsk
->
queue
.
¥ev
)->
√xt
 =Åask->queue.next;

449 (
èsk
->
queue
.
√xt
)->
¥ev
 =Åask->queue.prev;

450 
èsk
->
blocked_⁄
 = 
NULL
;

451 
	}
}

453 
ölöe
 
	$∑ss_¥io
(
RT_TASK
 *
to
, RT_TASK *
‰om
)

455 
QUEUE
 *
q
, *
blocked_⁄
;

456 #ifde‡
CONFIG_SMP


457 
RT_TASK
 *
rhód
;

458 
schedm≠
;

459 
schedm≠
 = 0;

462 
to
 &&Åo->
¥i‹ôy
 > 
‰om
->priority) {

463 
to
->
¥i‹ôy
 = 
‰om
->priority;

464 i‡(
to
->
°©e
 =
RT_SCHED_READY
) {

465 i‡((
to
->
Ωªv
)->
¥i‹ôy
 >Åo->¥i‹ôy || (to->
∫ext
)->priority <Åo->priority) {

466 #ifde‡
CONFIG_SMP


467 
rhód
 = 
π_smp_löux_èsk
[
to
->
ru¬abÀ_⁄_˝us
].
∫ext
;

469 (
to
->
Ωªv
)->
∫ext
 =Åo->rnext;

470 (
to
->
∫ext
)->
Ωªv
 =Åo->rprev;

471 
	`íq_ªady_èsk
(
to
);

472 #ifde‡
CONFIG_SMP


473 i‡(
rhód
 !
π_smp_löux_èsk
[
to
->
ru¬abÀ_⁄_˝us
].
∫ext
) {

474 
	`__£t_bô
(
to
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

480 } i‡(()(
blocked_⁄
 = 
to
->blocked_⁄Ë> 
RTE_HIGERR
 && ((—o->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë&& ((
SEM
 *)blocked_⁄)->
ty≥
 > 0Ë|| (to->°©ê& (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
)))) {

481 i‡(
to
->
queue
.
¥ev
 !
blocked_⁄
) {

482 
q
 = 
blocked_⁄
;

483 (
to
->
queue
.
¥ev
)->
√xt
 =Åo->queue.next;

484 (
to
->
queue
.
√xt
)->
¥ev
 =Åo->queue.prev;

485 (
q
 = q->
√xt
Ë!
blocked_⁄
 && (q->
èsk
)->
¥i‹ôy
 <
to
->priority);

486 
q
->
¥ev
 = (
to
->
queue
.¥ev = q->¥ev)->
√xt
 = &(to->queue);

487 
to
->
queue
.
√xt
 = 
q
;

488 i‡(
to
->
queue
.
¥ev
 !
blocked_⁄
) {

492 
to
 = (to->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë? ((
SEM
 *)
blocked_⁄
)->
owndby
 : blocked_⁄->
èsk
;

496 #ifde‡
CONFIG_SMP


497  
schedm≠
;

501 
	}
}

503 
ölöe
 
RT_TASK
 *
	$_π_whﬂmi
()

505 #ifde‡
CONFIG_SMP


506 
RT_TASK
 *
π_cuºít
;

507 
Êags
;

508 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

509 
π_cuºít
 = 
RT_CURRENT
;

510 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

511  
π_cuºít
;

513  
π_smp_cuºít
[0];

515 
	}
}

517 
ölöe
 
	$__ˇŒ_exô_h™dÀrs
(
RT_TASK
 *
èsk
)

519 
XHDL
 *
±
, *
tmp
;

521 
±
 = 
èsk
->
ExôHook
;

522  
±
 ) {

523 (*
±
->
fun
Ë’t->
¨g1
,Öt->
¨g2
);

524 
tmp
 = 
±
;

525 
±
 =Öt->
nxt
;

526 
	`π_‰ì
(
tmp
);

528 
èsk
->
ExôHook
 = 0;

529 
	}
}

531 
ölöe
 
XHDL
 *
__£t_exô_h™dÀr
(
RT_TASK
 *
èsk
, (*
fun
Ë(*, ), *
¨g1
, 
¨g2
)

533 
XHDL
 *
p
;

537 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
)  0;

538 i‡(!(
p
 = (
XHDL
 *Ë
	`π_mÆloc
 ((XHDL))))  0;

539 
p
->
fun
 = fun;

540 
p
->
¨g1
 =árg1;

541 
p
->
¨g2
 =árg2;

542 
p
->
nxt
 = 
èsk
->
ExôHook
;

543  (
èsk
->
ExôHook
 = 
p
);

544 
	}
}

546 
ölöe
 
	$πai_öô_„©uªs
 ()

549 #ifde‡
CONFIG_RTAI_LEDS_BUILTIN


550 
	`__πai_Àds_öô
();

552 #ifde‡
CONFIG_RTAI_SEM_BUILTIN


553 
	`__πai_£m_öô
();

555 #ifde‡
CONFIG_RTAI_MSG_BUILTIN


556 
	`__πai_msg_öô
();

558 #ifde‡
CONFIG_RTAI_MBX_BUILTIN


559 
	`__πai_mbx_öô
();

561 #ifde‡
CONFIG_RTAI_TBX_BUILTIN


562 
	`__πai_msg_queue_öô
();

564 #ifde‡
CONFIG_RTAI_MQ_BUILTIN


565 
	`__πai_mq_öô
();

567 #ifde‡
CONFIG_RTAI_BITS_BUILTIN


568 
	`__πai_bôs_öô
();

570 #ifde‡
CONFIG_RTAI_TASKLETS_BUILTIN


571 
	`__πai_èskÀts_öô
();

573 #ifde‡
CONFIG_RTAI_FIFOS_BUILTIN


574 
	`__πai_fifos_öô
();

576 #ifde‡
CONFIG_RTAI_NETRPC_BUILTIN


577 
	`__πai_√åpc_öô
();

579 #ifde‡
CONFIG_RTAI_SHM_BUILTIN


580 
	`__πai_shm_öô
();

582 #ifde‡
CONFIG_RTAI_MATH_BUILTIN


583 
	`__πai_m©h_öô
();

585 #ifde‡
CONFIG_RTAI_USI


586 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]:Énabled.\n");

590 
	}
}

592 
ölöe
 
	$πai_˛ónup_„©uªs
 () {

594 #ifde‡
CONFIG_RTAI_MATH_BUILTIN


595 
	`__πai_m©h_exô
();

597 #ifde‡
CONFIG_RTAI_SHM_BUILTIN


598 
	`__πai_shm_exô
();

600 #ifde‡
CONFIG_RTAI_NETRPC_BUILTIN


601 
	`__πai_√åpc_exô
();

603 #ifde‡
CONFIG_RTAI_FIFOS_BUILTIN


604 
	`__πai_fifos_exô
();

606 #ifde‡
CONFIG_RTAI_TASKLETS_BUILTIN


607 
	`__πai_èskÀts_exô
();

609 #ifde‡
CONFIG_RTAI_BITS_BUILTIN


610 
	`__πai_bôs_exô
();

612 #ifde‡
CONFIG_RTAI_MQ_BUILTIN


613 
	`__πai_mq_exô
();

615 #ifde‡
CONFIG_RTAI_TBX_BUILTIN


616 
	`__πai_msg_queue_exô
();

618 #ifde‡
CONFIG_RTAI_MBX_BUILTIN


619 
	`__πai_mbx_exô
();

621 #ifde‡
CONFIG_RTAI_MSG_BUILTIN


622 
	`__πai_msg_exô
();

624 #ifde‡
CONFIG_RTAI_SEM_BUILTIN


625 
	`__πai_£m_exô
();

627 #ifde‡
CONFIG_RTAI_LEDS_BUILTIN


628 
	`__πai_Àds_exô
();

630 
	}
}

632 
π_check_cuºít_°ack
();

634 
π_kthªad_öô
(
RT_TASK
 *
èsk
,

635 (*
π_thªad
)(),

636 
d©a
,

637 
°ack_size
,

638 
¥i‹ôy
,

639 
u£s_Âu
,

640 (*
sig«l
)());

642 
	`π_kthªad_öô_˝uid
(
RT_TASK
 *
èsk
,

643 (*
π_thªad
)(),

644 
d©a
,

645 
°ack_size
,

646 
¥i‹ôy
,

647 
u£s_Âu
,

648 (*
sig«l
)(),

649 
˝uid
);

654 
	~<πai_vîsi⁄.h
>

655 
	~<πai_lxπ.h
>

656 
	~<πai_sched.h
>

657 
	~<πai_mÆloc.h
>

658 
	~<πai_åa˚.h
>

659 
	~<πai_Àds.h
>

660 
	~<πai_£m.h
>

661 
	~<πai_rwl.h
>

662 
	~<πai_•l.h
>

663 
	~<πai_scb.h
>

664 
	~<πai_mbx.h
>

665 
	~<πai_msg.h
>

666 
	~<πai_tbx.h
>

667 
	~<πai_mq.h
>

668 
	~<πai_bôs.h
>

669 
	~<πai_wd.h
>

670 
	~<πai_èskÀts.h
>

671 
	~<πai_fifos.h
>

672 
	~<πai_√åpc.h
>

673 
	~<πai_shm.h
>

674 
	~<πai_usi.h
>

	@/usr/src/rtai/base/include/rtai_sem.h

24 #i‚de‡
_RTAI_SEM_H


25 
	#_RTAI_SEM_H


	)

27 
	~<πai_ty≥s.h
>

28 
	~<πai_«m2num.h
>

29 
	~<πai_sched.h
>

31 
	#RT_SEM_MAGIC
 0x3f83ebb

32 

	)

33 
	#SEM_ERR
 (
RTE_OBJINV
)

	)

34 
	#SEM_TIMOUT
 (
RTE_TIMOUT
)

	)

36 
	sπ_pﬁl_s
 { *
	mwh©
; 
	mf‹wh©
; };

39 
	#RT_POLL_NOT_TO_USE
 0

	)

40 
	#RT_POLL_MBX_RECV
 1

	)

41 
	#RT_POLL_MBX_SEND
 2

	)

42 
	#RT_POLL_SEM_WAIT_ALL
 3

	)

43 
	#RT_POLL_SEM_WAIT_ONE
 4

	)

45 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

47 
	sπ_pﬁl_ql
 { 
QUEUE
 
	mpﬁlq
; 
•ölock_t
 
	mpﬁlock
; };

48 
	sπ_pﬁl_íc
 { 
	moff£t
; (*
	mt›ﬁl
)(*); };

49 
π_pﬁl_íc
 
π_pﬁl_of°fun
[];

51 
	sπ_£m≠h‹e
 {

52 
π_queue
 
	mqueue
;

53 
	mmagic
;

54 
	mty≥
, 
	mª°y≥
;

55 
	mcou¡
;

56 
π_èsk_°ru˘
 *
	mowndby
;

57 
	mqty≥
;

58 
π_queue
 
	mªsq
;

59 #ifde‡
CONFIG_RTAI_RT_POLL


60 
π_pﬁl_ql
 
	mpﬁl_waô_Æl
;

61 
π_pﬁl_ql
 
	mpﬁl_waô_⁄e
;

63 } 
	tSEM
;

65 #ifde‡
CONFIG_RTAI_RT_POLL


67 
RTAI_SYSCALL_MODE
 
_π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
, 
•a˚
);

68 
ölöe
 
	$π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

70  
	`_π_pﬁl
(
pdß
, 
ƒ
, 
timeout
, 1);

71 
	}
}

73 
π_wakeup_pﬁÀrs
(
π_pﬁl_ql
 *
ql
, 
ªas⁄
);

77 
ölöe
 
	$π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

79  
RTE_OBJINV
;

80 
	}
}

82 
	#π_wakeup_pﬁÀrs
(
ql
, 
ªas⁄
)

	)

88 
	sπ_£m≠h‹e
 {

89 
	m›aque
;

90 } 
	tSEM
;

94 
SEM
 
	tCND
;

96 #ifde‡
__KERNEL__


98 
	~<löux/î∫o.h
>

100 
SEM
 
	tp£m_t
;

102 
SEM
 
	tpmuãx_t
;

104 #ifde‡
__˝lu•lus


108 
__πai_£m_öô
();

110 
__πai_£m_exô
();

112 
RTAI_SYSCALL_MODE
 
π_ty≥d_£m_öô
(
SEM
 *
£m
,

113 
vÆue
,

114 
ty≥
);

116 
RTAI_SYSCALL_MODE
 
π_£m_dñëe
(
SEM
 *
£m
);

118 
RTAI_SYSCALL_MODE
 
SEM
 *
_π_ty≥d_«med_£m_öô
(
£m_«me
,

119 
vÆue
,

120 
ty≥
,

121 *
h™dÀ
);

123 
ölöe
 
SEM
 *
π_ty≥d_«med_£m_öô
(c⁄° *
£m_«me
,

124 
vÆue
,

125 
ty≥
) {

126  
_π_ty≥d_«med_£m_öô
(
«m2num
(
£m_«me
), 
vÆue
, 
ty≥
, 
NULL
);

129 
RTAI_SYSCALL_MODE
 
π_«med_£m_dñëe
(
SEM
 *
£m
);

131 
π_£m_öô
(
SEM
 *
£m
,

132 
vÆue
);

134 
RTAI_SYSCALL_MODE
 
π_£m_sig«l
(
SEM
 *
£m
);

136 
RTAI_SYSCALL_MODE
 
π_£m_brﬂdˇ°
(
SEM
 *
£m
);

138 
RTAI_SYSCALL_MODE
 
π_£m_waô
(
SEM
 *
£m
);

140 
RTAI_SYSCALL_MODE
 
π_£m_waô_if
(
SEM
 *
£m
);

142 
π_˙t£m_waô_if_™d_lock
(
SEM
 *
£m
);

144 
RTAI_SYSCALL_MODE
 
π_£m_waô_u¡û
(
SEM
 *
£m
,

145 
RTIME
 
time
);

147 
RTAI_SYSCALL_MODE
 
π_£m_waô_timed
(
SEM
 *
£m
,

148 
RTIME
 
dñay
);

150 
RTAI_SYSCALL_MODE
 
π_£m_waô_b¨rõr
(
SEM
 *
£m
);

152 
RTAI_SYSCALL_MODE
 
π_£m_cou¡
(
SEM
 *
£m
);

154 
RTAI_SYSCALL_MODE
 
π_c⁄d_sig«l
(
CND
 *
˙d
);

156 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô
(
CND
 *
˙d
,

157 
SEM
 *
mtx
);

159 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô_u¡û
(
CND
 *
˙d
,

160 
SEM
 *
mtx
,

161 
RTIME
 
time
);

163 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô_timed
(
CND
 *
˙d
,

164 
SEM
 *
mtx
,

165 
RTIME
 
dñay
);

167 
	#π_«med_£m_öô
(
£m_«me
, 
vÆue
Ë
	`π_ty≥d_«med_£m_öô
(£m_«me, vÆue, 
CNT_SEM
)

	)

169 
ölöe
 
π_p£m_öô
(
p£m_t
 *
£m
, 
psh¨ed
, 
vÆue
)

171 i‡(
vÆue
 < 
SEM_TIMOUT
) {

172 
π_ty≥d_£m_öô
(
£m
, 
vÆue
, 
psh¨ed
 | 
PRIO_Q
);

175  -
EINVAL
;

178 
ölöe
 
π_p£m_de°roy
(
p£m_t
 *
£m
)

180 i‡(
π_£m_waô_if
(
£m
) >= 0) {

181 
π_£m_sig«l
(
£m
);

182  
π_£m_dñëe
(
£m
);

184  -
EBUSY
;

187 
ölöe
 
π_p£m_waô
(
p£m_t
 *
£m
) {

188  
π_£m_waô
(
£m
Ë< 
SEM_TIMOUT
 ? 0 : -1;

191 
ölöe
 
π_p£m_timedwaô
(
p£m_t
 *
£m
, 
time•ec
 *
ab°ime
) {

192  
π_£m_waô_u¡û
(
£m
, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

195 
ölöe
 
π_p£m_åywaô
(
p£m_t
 *
£m
) {

196  
π_£m_waô_if
(
£m
Ë> 0 ? 0 : -
EAGAIN
;

199 
ölöe
 
π_p£m_po°
(
p£m_t
 *
£m
) {

200  
π_£m_sig«l
(
£m
);

203 
ölöe
 
π_p£m_gëvÆue
(
p£m_t
 *
£m
, *
svÆ
)

205 i‡((*
svÆ
 = 
π_£m_waô_if
(
£m
)) > 0) {

206 
π_£m_sig«l
(
£m
);

211 
ölöe
 
π_pmuãx_öô
(
pmuãx_t
 *
muãx
, *
muãx©å
)

213 
π_ty≥d_£m_öô
(
muãx
, 1, 
RES_SEM
);

217 
ölöe
 
π_pmuãx_de°roy
(
pmuãx_t
 *
muãx
)

219 i‡(
π_£m_waô_if
(
muãx
) > 0) {

220 
π_£m_sig«l
(
muãx
);

221  
π_£m_dñëe
(
muãx
);

223  -
EBUSY
;

226 
ölöe
 
π_pmuãx_lock
(
pmuãx_t
 *
muãx
) {

227  
π_£m_waô
(
muãx
Ë< 
SEM_TIMOUT
 ? 0 : -
EINVAL
;

230 
ölöe
 
π_pmuãx_åylock
(
pmuãx_t
 *
muãx
) {

231  
π_£m_waô_if
(
muãx
Ë> 0 ? 0 : -
EBUSY
;

234 
ölöe
 
π_pmuãx_timedlock
(
pmuãx_t
 *
£m
, 
time•ec
 *
ab°ime
) {

235  
π_£m_waô_u¡û
(
£m
, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

238 
ölöe
 
π_pmuãx_u∆ock
(
pmuãx_t
 *
muãx
) {

239  
π_£m_sig«l
(
muãx
);

242 #unde‡
π_muãx_öô


243 
	#π_muãx_öô
(
mtx
Ë
	`π_ty≥d_£m_öô
(mtx, 1, 
RES_SEM
)

	)

244 
	#π_muãx_dñëe
(
mtx
Ë
	`π_£m_dñëe
(mtx)

	)

245 
	#π_muãx_de°roy
(
mtx
Ë
	`π_£m_dñëe
(mtx)

	)

246 
	#π_muãx_åylock
(
mtx
Ë
	`π_£m_waô_if
(mtx)

	)

247 
	#π_muãx_lock
(
mtx
Ë
	`π_£m_waô
(mtx)

	)

248 
	#π_muãx_timedlock
(
mtx
, 
time
Ë
	`π_£m_waô_u¡û
(mtx,Åime)

	)

249 
	#π_muãx_u∆ock
(
mtx
Ë
	`π_£m_sig«l
(mtx)

	)

251 
	#π_c⁄d_öô
(
˙d
Ë
	`π_ty≥d_£m_öô
(˙d, 0, 
BIN_SEM
 | 
PRIO_Q
)

	)

252 
	#π_c⁄d_dñëe
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

253 
	#π_c⁄d_de°roy
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

254 
	#π_c⁄d_brﬂdˇ°
(
˙d
Ë
	`π_£m_brﬂdˇ°
(˙d)

	)

256 
ölöe
 
π_c⁄d_timedwaô
(
CND
 *
˙d
, 
SEM
 *
mtx
, 
RTIME
 
time
) {

257  
π_c⁄d_waô_u¡û
(
˙d
, 
mtx
, 
time
Ë< 
SEM_TIMOUT
 ? 0 : -1;

260 #ifde‡
__˝lu•lus


266 
	~<πai_lxπ.h
>

268 #ifde‡
__˝lu•lus


272 
RTAI_PROTO
(
SEM
 *, 
π_ty≥d_£m_öô
,(
«me
, 
vÆue
, 
ty≥
))

274 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; } 
¨g
 = {Çamê?Çamê: 
π_gë_«me
(
NULL
), value,Åype };

275  (
SEM
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SEM_INIT
, &
¨g
).
v
[
LOW
];

295 
	#π_£m_öô
(
«me
, 
vÆue
Ë
	`π_ty≥d_£m_öô
“ame, vÆue, 
CNT_SEM
)

	)

297 
	#π_«med_£m_öô
(
£m_«me
, 
vÆue
) \

298 
	`π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
CNT_SEM
)

	)

300 
RTAI_PROTO
(, 
π_£m_dñëe
,(
SEM
 *
£m
))

302 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

303  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SEM_DELETE
, &
¨g
).
i
[
LOW
];

306 
RTAI_PROTO
(
SEM
 *, 
π_ty≥d_«med_£m_öô
,(c⁄° *
«me
, 
vÆue
, 
ty≥
))

308 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
“ame), vÆue,Åy≥, 
NULL
 };

309  (
SEM
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
];

312 
RTAI_PROTO
(, 
π_«med_£m_dñëe
,(
SEM
 *
£m
))

314 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

315  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
];

318 
RTAI_PROTO
(, 
π_£m_sig«l
,(
SEM
 *
£m
))

320 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

321  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
).
i
[
LOW
];

324 
RTAI_PROTO
(, 
π_£m_brﬂdˇ°
,(
SEM
 *
£m
))

326 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

327  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_BROADCAST
, &
¨g
).
i
[
LOW
];

330 
RTAI_PROTO
(, 
π_£m_waô
,(
SEM
 *
£m
))

332 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

333  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
];

336 
RTAI_PROTO
(, 
π_£m_waô_if
,(
SEM
 *
£m
))

338 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

339  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
];

342 
RTAI_PROTO
(, 
π_£m_waô_u¡û
,(
SEM
 *
£m
, 
RTIME
 
time
))

344 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

345  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

348 
RTAI_PROTO
(, 
π_£m_waô_timed
,(
SEM
 *
£m
, 
RTIME
 
dñay
))

350 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

351  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

354 
RTAI_PROTO
(, 
π_£m_waô_b¨rõr
,(
SEM
 *
£m
))

356 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

357  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_BARRIER
, &
¨g
).
i
[
LOW
];

360 
RTAI_PROTO
(, 
π_£m_cou¡
,(
SEM
 *
£m
))

362 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

363  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_COUNT
, &
¨g
).
i
[
LOW
];

381 
	#π_c⁄d_öô
(
«me
Ë
	`π_ty≥d_£m_öô
“ame, 0, 
BIN_SEM
)

	)

382 
	#π_c⁄d_dñëe
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

383 
	#π_c⁄d_de°roy
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

384 
	#π_c⁄d_brﬂdˇ°
(
˙d
Ë
	`π_£m_brﬂdˇ°
(˙d)

	)

385 
	#π_c⁄d_timedwaô
(
˙d
, 
mtx
, 
time
Ë
	`π_c⁄d_waô_u¡û
(˙d, mtx,Åime)

	)

387 
RTAI_PROTO
(, 
π_c⁄d_sig«l
,(
CND
 *
˙d
))

389 °ru˘ { 
CND
 *
˙d
; } 
¨g
 = { cnd };

390  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_SIGNAL
, &
¨g
).
i
[
LOW
];

393 
RTAI_PROTO
(, 
π_c⁄d_waô
,(
CND
 *
˙d
, 
SEM
 *
muãx
))

395 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; } 
¨g
 = { cnd, mutex };

396  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT
, &
¨g
).
i
[
LOW
];

399 
RTAI_PROTO
(, 
π_c⁄d_waô_u¡û
,(
CND
 *
˙d
, 
SEM
 *
muãx
, 
RTIME
 
time
))

401 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; 
RTIME
 
time
; } 
¨g
 = { cnd, mutex,Åime };

402  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

405 
RTAI_PROTO
(, 
π_c⁄d_waô_timed
,(
CND
 *
˙d
, 
SEM
 *
muãx
, 
RTIME
 
dñay
))

407 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; 
RTIME
 
dñay
; } 
¨g
 = { cnd, mutex, delay };

408  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

411 
RTAI_PROTO
(, 
π_pﬁl
, (
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
))

413 #ifde‡
CONFIG_RTAI_RT_POLL


414 °ru˘ { 
π_pﬁl_s
 *
pdß
; 
ƒ
; 
RTIME
 
timeout
; 
•a˚
; } 
¨g
 = {Ödsa,Çr,Åimeout, 0 };

415  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_RT_POLL
, &
¨g
).
i
[
LOW
];

417  
RTE_OBJINV
;

421 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_shm.h

32 #i‚de‡
_RTAI_SHM_H


33 
	#_RTAI_SHM_H


	)

38 
	#GLOBAL_HEAP_ID
 0x9ac6d9e7

39 

	)

40 
	#USE_VMALLOC
 0

	)

41 
	#USE_GFP_KERNEL
 1

	)

42 
	#USE_GFP_ATOMIC
 2

	)

43 
	#USE_GFP_DMA
 3

	)

66 
	#πai_kmÆloc
(
«me
, 
size
) \

67 
	`π_shm_Æloc
(
«me
, 
size
, 
USE_VMALLOC
)

68 

	)

86 
	#πai_k‰ì
(
«me
) \

87 
	`π_shm_‰ì
(
«me
)

88 

	)

89 #i‡
deföed
(
__KERNEL__
)

91 
	~<löux/moduÀ.h
>

92 
	~<löux/vîsi⁄.h
>

93 
	~<löux/vmÆloc.h
>

94 
	~<löux/mm.h
>

97 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

98 
	~<löux/wøµî.h
>

100 
	~<löux/mm.h
>

101 
	#mem_m≠_ª£rve
(
p
Ë
	`SëPageRe£rved
’)

	)

102 
	#mem_m≠_uƒe£rve
(
p
Ë
	`CÀ¨PageRe£rved
’)

	)

106 
	#UVIRT_TO_KVA
(
adr
Ë
	`uvút_to_kva
(
	`pgd_off£t_k
◊dr), (adr))

	)

108 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,10)

109 
ölöe
 
	$ªm≠_∑ge_ønge
(
vm_¨ó_°ru˘
 *
vma
, 
uvaddr
, 
∑ddr
, 
size
, 
pg¥Ÿ_t
 
¥Ÿ
)

111  
	`ªm≠_p‚_ønge
(
vma
, 
uvaddr
, 
∑ddr
 >> 
PAGE_SHIFT
, 
size
, 
¥Ÿ
);

112 
	}
}

115 
	~<πai.h
>

118 
	~<πai_mÆloc.h
>

120 #i‚de‡
CONFIG_MMU


122 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

124  
adr
;

125 
	}
}

129 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

131 i‡(!
	`pgd_n⁄e
(*
pgd
Ë&& !
	`pgd_bad
(*pgd)) {

132 
pmd_t
 *
pmd
;

133 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

134 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

136 
pmd
 = 
	`pmd_off£t
(
	`pud_off£t
(
pgd
, 
adr
),ádr);

138 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

139 
±e_t
 *
±ï
, 
±e
;

140 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

141 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

143 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

145 
±e
 = *
±ï
;

146 i‡(
	`±e_¥e£¡
(
±e
)) {

147  ((()
	`∑ge_addªss
(
	`±e_∑ge
(
±e
))Ë| (
adr
 & (
PAGE_SIZE
 - 1)));

152 
	}
}

154 
ölöe
 
	$kvút_to_∑
(
adr
)

156  
	`vút_to_phys
((*)
	`uvút_to_kva
(
	`pgd_off£t_k
(
adr
),ádr));

157 
	}
}

161 #ifde‡
__˝lu•lus


165 
__πai_shm_öô
();

167 
__πai_shm_exô
();

169 *
π_shm_Æloc
(
«me
,

170 
size
,

171 
su¥t
);

173 
	#π_shm_Æloc_adr
(
adr
, 
«me
, 
size
) \

174 
	`π_shm_Æloc
(
«me
, 
size
, 
su¥t
)

	)

176 
RTAI_SYSCALL_MODE
 
π_shm_‰ì
(
«me
);

178 *
π_hóp_›í
(
«me
,

179 
size
,

180 
su¥t
);

182 
	#π_hóp_›í_adr
(
adr
, 
«me
, 
size
, 
su¥t
) \

183 
	`π_hóp_›í
(
«me
, 
size
, 
su¥t
)

	)

185 
RTAI_SYSCALL_MODE
 *
π_hÆloc
(
size
);

187 
RTAI_SYSCALL_MODE
 
π_h‰ì
(*
addr
);

189 
RTAI_SYSCALL_MODE
 *
π_«med_hÆloc
(
«me
, 
size
);

191 
RTAI_SYSCALL_MODE
 
π_«med_h‰ì
(*
addr
);

193 *
π_«med_mÆloc
(
«me
,

194 
size
);

196 
π_«med_‰ì
(*
addr
);

198 *
rvmÆloc
(
size
);

200 
rv‰ì
(*
mem
,

201 
size
);

203 
rvmm≠
(*
mem
,

204 
memsize
,

205 
vm_¨ó_°ru˘
 *
vma
);

207 *
rkmÆloc
(*
size
,

208 
su¥t
);

210 
rk‰ì
(*
mem
,

211 
size
);

213 
rkmm≠
(*
mem
,

214 
memsize
,

215 
vm_¨ó_°ru˘
 *
vma
);

217 #ifde‡
__˝lu•lus


223 
	~<f˙é.h
>

224 
	~<uni°d.h
>

225 
	~<sys/mm™.h
>

226 
	~<sys/io˘l.h
>

227 
	~<πai_lxπ.h
>

231 
	#RTAI_SHM_DEV
 "/dev/πai_shm"

	)

233 
RTAI_PROTO
 (*, 
_π_shm_Æloc
, (*
°¨t
, 
«me
, 
size
, 
su¥t
, 
ishóp
))

235 
hook
;

236 *
adr
 = 
NULL
;

238 i‡((
hook
 = 
›í
(
RTAI_SHM_DEV
, 
O_RDWR
)) <= 0) {

239  
NULL
;

241 °ru˘ { 
«me
, 
¨g
, 
su¥t
; }árg = {Çame, 
size
, suprt };

242 #ifde‡
SHM_USE_LXRT


243 i‡((
size
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SHM_ALLOC
, &
¨g
).
i
[
LOW
])) {

245 i‡((
size
 = 
io˘l
(
hook
, 
SHM_ALLOC
, ()(&
¨g
)))) {

247 i‡((
adr
 = 
mm≠
(
°¨t
, 
size
, 
PROT_WRITE
 | 
PROT_READ
, 
MAP_SHARED
 | 
MAP_LOCKED
, 
hook
, 0)Ë=
MAP_FAILED
) {;

248 #ifde‡
SHM_USE_LXRT


249 
πai_lxπ
(
BIDX
, (
«me
), 
SHM_FREE
, &name);

251 
io˘l
(
hook
, 
SHM_FREE
, &
«me
);

253 } i‡(
ishóp
) {

254 
¨g
.¨g = ()
adr
;

255 #ifde‡
SHM_USE_LXRT


256 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_SET
, &
¨g
);

258 
io˘l
(
hook
, 
HEAP_SET
, &
¨g
);

263 
˛o£
(
hook
);

264  
adr
;

267 
	#π_shm_Æloc
(
«me
, 
size
, 
su¥t
) \

268 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
su¥t
, 0)

	)

270 
	#π_hóp_›í
(
«me
, 
size
, 
su¥t
) \

271 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
su¥t
, 1)

	)

297 
	#πai_mÆloc
(
«me
, 
size
) \

298 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
USE_VMALLOC
, 0)

299 

	)

343 
	#π_shm_Æloc_adr
(
°¨t_addªss
, 
«me
, 
size
, 
su¥t
) \

344 
	`_π_shm_Æloc
(
°¨t_addªss
, 
«me
, 
size
, 
su¥t
, 0)

	)

346 
	#π_hóp_›í_adr
(
°¨t
, 
«me
, 
size
, 
su¥t
) \

347 
	`_π_shm_Æloc
(
°¨t
, 
«me
, 
size
, 
su¥t
, 1)

	)

372 
	#πai_mÆloc_adr
(
°¨t_addªss
, 
«me
, 
size
) \

373 
	`_π_shm_Æloc
(
°¨t_addªss
, 
«me
, 
size
, 
USE_VMALLOC
, 0)

374 

	)

375 
RTAI_PROTO
(, 
π_shm_‰ì
, (
«me
))

377 
hook
, 
size
;

378 °ru˘ { *
«módr
; } 
¨g
 = { &
«me
 };

379 i‡((
hook
 = 
›í
(
RTAI_SHM_DEV
, 
O_RDWR
)) <= 0) {

384 #ifde‡
SHM_USE_LXRT


385 i‡((
size
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SHM_SIZE
, &
¨g
).
i
[
LOW
])) {

387 i‡((
size
 = 
io˘l
(
hook
, 
SHM_SIZE
, ()&
¨g
))) {

389 i‡(
munm≠
((*)
«me
, 
size
)) {

390 
size
 = 0;

393 
˛o£
(
hook
);

394  
size
;

416 
	#πai_‰ì
(
«me
, 
adr
) \

417 
	`π_shm_‰ì
(
«me
)

418 

	)

419 
RTAI_PROTO
(*, 
π_hÆloc
, (
size
))

421 °ru˘ { 
size
; } 
¨g
 = { size };

422  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_ALLOC
, &
¨g
).
v
[
LOW
];

425 
RTAI_PROTO
(, 
π_h‰ì
, (*
addr
))

427 °ru˘ { *
addr
; } 
¨g
 = {áddr };

428 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_FREE
, &
¨g
);

431 
RTAI_PROTO
(*, 
π_«med_hÆloc
, (
«me
, 
size
))

433 °ru˘ { 
«me
; 
size
; } 
¨g
 = {Çame, size };

434  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_NAMED_ALLOC
, &
¨g
).
v
[
LOW
];

437 
RTAI_PROTO
(, 
π_«med_h‰ì
, (*
addr
))

439 °ru˘ { *
addr
; } 
¨g
 = {áddr };

440 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_NAMED_FREE
, &
¨g
);

443 
RTAI_PROTO
(*, 
π_mÆloc
, (
size
))

445 °ru˘ { 
size
; } 
¨g
 = { size };

446  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MALLOC
, &
¨g
).
v
[
LOW
];

449 
RTAI_PROTO
(, 
π_‰ì
, (*
addr
))

451 °ru˘ { *
addr
; } 
¨g
 = {áddr };

452 
πai_lxπ
(
BIDX
, 
SIZARG
, 
FREE
, &
¨g
);

455 
RTAI_PROTO
(*, 
π_«med_mÆloc
, (
«me
, 
size
))

457 °ru˘ { 
«me
; 
size
; } 
¨g
 = {Çame, size };

458  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MALLOC
, &
¨g
).
v
[
LOW
];

461 
RTAI_PROTO
(, 
π_«med_‰ì
, (*
addr
))

463 °ru˘ { *
addr
; } 
¨g
 = {áddr };

464 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_FREE
, &
¨g
);

490 
	#π_hóp_˛o£
(
«me
, 
adr
Ë
	`π_shm_‰ì
“ame)

	)

493 
	#π_hóp_öô
 
π_hóp_›í


	)

494 
	#π_hóp_¸óã
 
π_hóp_›í


	)

495 
	#π_hóp_acquúe
 
π_hóp_›í


	)

496 
	#π_hóp_öô_adr
 
π_hóp_›í_adr


	)

497 
	#π_hóp_¸óã_adr
 
π_hóp_›í_adr


	)

498 
	#π_hóp_acquúe_adr
 
π_hóp_›í_adr


	)

500 
	#π_hóp_dñëe
 
π_hóp_˛o£


	)

501 
	#π_hóp_de°roy
 
π_hóp_˛o£


	)

502 
	#π_hóp_ªÀa£
 
π_hóp_˛o£


	)

521 
	#π_globÆ_hóp_›í
(Ë
	`π_hóp_›í
(
GLOBAL_HEAP_ID
, 0, 0)

	)

539 
	#π_globÆ_hóp_˛o£
(Ë
	`π_hóp_˛o£
(
GLOBAL_HEAP_ID
, 0)

	)

	@/usr/src/rtai/base/include/rtai_signal.h

20 #i‚de‡
_RTAI_SIGNAL_H_


21 
	#_RTAI_SIGNAL_H_


	)

23 
	#RTAI_SIGNALS_IDX
 
BIDX


	)

25 
	~<πai_sched.h
>

27 
	#MAXSIGNALS
 16

	)

29 
	#SIGNAL_TASK_INIPRIO
 0

	)

31 
	sπ_sig«l_t
 { 
	mÊags
; 
RT_TASK
 *
	msigèsk
; };

33 
	ssigsu¥t_t
 { 
RT_TASK
 *
	msigèsk
; RT_TASK *
	mèsk
; 
	msig«l
; (*
	msighdl
)(, 
	mRT_TASK
 *); 
	m˝uid
; };

35 #ifde‡
__KERNEL__


37 
	#SIGNAL_ENBIT
 0

	)

38 
	#SIGNAL_PNDBIT
 1

	)

40 
	#SIGNAL_TASK_STACK_SIZE
 8192

	)

42 
RTAI_SYSCALL_MODE
 
π_sig«l_hñ≥r
(
RT_TASK
 *
èsk
);

44 
π_ªque°_sig«l
(
sig«l
, (*
sighdl
)(, 
RT_TASK
 *));

46 
RTAI_SYSCALL_MODE
 
	`π_ªque°_sig«l_
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
, 
sig«l
);

48 
RTAI_SYSCALL_MODE
 
	`π_ªÀa£_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

50 
RTAI_SYSCALL_MODE
 
	`π_íabÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

52 
RTAI_SYSCALL_MODE
 
	`π_dißbÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

54 
RTAI_SYSCALL_MODE
 
	`π_åiggî_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

56 
RTAI_SYSCALL_MODE
 
	`π_waô_sig«l
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
);

60 
	~<sys/mm™.h
>

62 
	~<πai_lxπ.h
>

64 
	#SIGNAL_TASK_STACK_SIZE
 64*1024

	)

66 #i‚de‡
__SIGNAL_SUPPORT_FUN__


67 
	#__SIGNAL_SUPPORT_FUN__


	)

69 
	$sig«l_su¥t_fun
(
sigsu¥t_t
 *
fu«rg
)

71 
	ssigtsk_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; };

72 
	ssigªq_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
sig«l
; (*
sighdl
)(, RT_TASK *); };

73 
sigsu¥t_t
 
¨g
 = *
fu«rg
;

75 i‡((
¨g
.
sigèsk
 = 
	`π_thªad_öô
(
	`π_gë_«me
(0), 
SIGNAL_TASK_INIPRIO
, 0, 
SCHED_FIFO
, 1 <<árg.
˝uid
))) {

76 i‡(!
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigªq_t
), 
RT_SIGNAL_REQUEST
, &
¨g
).
i
[
LOW
]) {

77 
	`π_grow_™d_lock_°ack
(
SIGNAL_TASK_STACK_SIZE
/2);

78 
	`π_make_h¨d_ªÆ_time
();

79 
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigtsk_t
), 
RT_SIGNAL_WAITSIG
, &
¨g
).
i
[
LOW
]) {

80 
¨g
.
	`sighdl
◊rg.
sig«l
,árg.
èsk
);

82 
	`π_make_so·_ªÆ_time
();

84 
	`π_èsk_dñëe
(
¨g
.
sigèsk
);

86 
	}
}

90 
RTAI_PROTO
(, 
π_ªque°_sig«l
, (
sig«l
, (*
sighdl
)(, 
RT_TASK
 *)))

92 i‡(
sig«l
 >0 && 
sighdl
) {

93 
sigsu¥t_t
 
¨g
 = { 
NULL
, 
	`π_buddy
(), 
sig«l
, 
sighdl
 };

94 
¨g
.
˝uid
 = 
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (*), 
RT_SIGNAL_HELPER
, &¨g.
sigèsk
).
i
[
LOW
];

95 i‡(
	`π_thªad_¸óã
((*)
sig«l_su¥t_fun
, &
¨g
, 
SIGNAL_TASK_STACK_SIZE
)) {

96  
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
RT_TASK
 *), 
RT_SIGNAL_HELPER
, &
¨g
.
èsk
).
i
[
LOW
];

99  -
EINVAL
;

100 
	}
}

102 
RTAI_PROTO
(, 
π_ªÀa£_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

104 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

105  
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_RELEASE
, &
¨g
).
	gi
[
LOW
];

108 
RTAI_PROTO
(, 
π_íabÀ_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

110 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

111 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_ENABLE
, &
¨g
);

114 
RTAI_PROTO
(, 
π_dißbÀ_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

116 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

117 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_DISABLE
, &
¨g
);

120 
RTAI_PROTO
(, 
π_åiggî_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

122 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

123 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_TRIGGER
, &
¨g
);

	@/usr/src/rtai/base/include/rtai_spl.h

19 #i‚de‡
_RTAI_SPL_H


20 
	#_RTAI_SPL_H


	)

22 
	~<πai_£m.h
>

24 
	gπai_•l
;

26 #ifde‡
__KERNEL__


28 #i‚de‡
__˝lu•lus


30 
	sπai_•l
 {

31 *
	mowndby
;

32 
	mcou¡
;

33 
	mÊags
;

34 } 
	tSPL
;

40 
RTAI_SYSCALL_MODE
 
π_•l_öô
(
πai_•l
 *
•l
);

42 
RTAI_SYSCALL_MODE
 
π_•l_dñëe
(
πai_•l
 *
•l
);

44 
RTAI_SYSCALL_MODE
 
SPL
 *
_π_«med_•l_öô
(
•l_«me
);

46 
RTAI_SYSCALL_MODE
 
π_«med_•l_dñëe
(
SPL
 *
•l
);

48 
RTAI_SYSCALL_MODE
 
π_•l_lock
(
πai_•l
 *
•l
);

50 
RTAI_SYSCALL_MODE
 
π_•l_lock_if
(
πai_•l
 *
•l
);

52 
RTAI_SYSCALL_MODE
 
π_•l_lock_timed
(
πai_•l
 *
•l
,

53 
ns
);

55 
RTAI_SYSCALL_MODE
 
π_•l_u∆ock
(
πai_•l
 *
•l
);

57 #ifde‡
__˝lu•lus


63 #ifde‡
__˝lu•lus


67 
RTAI_PROTO
(
πai_•l
 *, 
π_•l_öô
,(
«me
))

69 °ru˘ { 
«me
; } 
¨g
 = {Çame };

70  (
πai_•l
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SPL_INIT
, &
¨g
).
v
[
LOW
];

73 
RTAI_PROTO
(, 
π_•l_dñëe
,(
πai_•l
 *
•l
))

75 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

76  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SPL_DELETE
, &
¨g
).
i
[
LOW
];

79 
RTAI_PROTO
(
πai_•l
 *, 
π_«med_•l_öô
,(c⁄° *
«me
))

81 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(name) };

82  (
πai_•l
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SPL_INIT
, &
¨g
).
v
[
LOW
];

85 
RTAI_PROTO
(, 
π_«med_•l_dñëe
,(
πai_•l
 *
•l
))

87 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

88  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SPL_DELETE
, &
¨g
).
i
[
LOW
];

91 
RTAI_PROTO
(, 
π_•l_lock
,(
πai_•l
 *
•l
))

93 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

94  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK
, &
¨g
).
i
[
LOW
];

97 
RTAI_PROTO
(, 
π_•l_lock_if
,(
πai_•l
 *
•l
))

99 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

100  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK_IF
, &
¨g
).
i
[
LOW
];

103 
RTAI_PROTO
(, 
π_•l_lock_timed
,(
πai_•l
 *
•l
, 
RTIME
 
dñay
))

105 °ru˘ { 
πai_•l
 *
•l
; 
RTIME
 
dñay
; } 
¨g
 = { spl, delay };

106  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK_TIMED
, &
¨g
).
i
[
LOW
];

109 
RTAI_PROTO
(, 
π_•l_u∆ock
,(
πai_•l
 *
•l
))

111 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

112  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_UNLOCK
, &
¨g
).
i
[
LOW
];

115 #ifde‡
__˝lu•lus


121 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

123 
	sπai_•l
 {

124 
›aque
;

125 } 
	tSPL
;

	@/usr/src/rtai/base/include/rtai_tasklets.h

26 #i‚de‡
_RTAI_TASKLETS_H


27 
	#_RTAI_TASKLETS_H


	)

33 
	~<πai_ty≥s.h
>

34 
	~<πai_sched.h
>

36 
	#TASKLETS_IDX
 1

	)

38 
	#INIT
 0

	)

39 
	#DELETE
 1

	)

40 
	#TASK_INSERT
 2

	)

41 
	#TASK_REMOVE
 3

	)

42 
	#USE_FPU
 4

	)

43 
	#TIMER_INSERT
 5

	)

44 
	#TIMER_REMOVE
 6

	)

45 
	#SET_TASKLETS_PRI
 7

	)

46 
	#SET_FIR_TIM
 8

	)

47 
	#SET_PER
 9

	)

48 
	#SET_HDL
 10

	)

49 
	#SET_DAT
 11

	)

50 
	#EXEC_TASKLET
 12

	)

51 
	#WAIT_IS_HARD
 13

	)

52 
	#SET_TSK_PRI
 14

	)

53 
	#REG_TASK
 15

	)

54 
	#GET_TMR_TIM
 16

	)

55 
	#GET_TMR_OVRN
 17

	)

59 
	#PTIMER_CREATE
 18

	)

60 
	#PTIMER_SETTIME
 19

	)

61 
	#PTIMER_OVERRUN
 20

	)

62 
	#PTIMER_GETTIME
 21

	)

63 
	#PTIMER_DELETE
 22

	)

65 
	#POSIX_TIMERS
 128

	)

69 
	gπ_èsk_°ru˘
;

71 
	#TASKLET_STACK_SIZE
 8196

	)

73 
	sπ_u•_èskÀt_°ru˘
 {

74 
π_èskÀt_°ru˘
 *
	m√xt
, *
	m¥ev
;

75 
	m¥i‹ôy
, 
	mu£s_Âu
, 
	m˝uid
;

76 
RTIME
 
	mfúög_time
, 
	m≥riod
;

77 (*
	mh™dÀr
)();

78 
	md©a
, 
	mid
;

79 
	mthªad
;

80 
π_èsk_°ru˘
 *
	mèsk
;

81 
π_èskÀt_°ru˘
 *
	mu•èskÀt
;

82 
	movîrun
;

85 #ifde‡
__KERNEL__


87 
	sπ_èskÀt_°ru˘
 {

88 
π_èskÀt_°ru˘
 *
	m√xt
, *
	m¥ev
;

89 
	m¥i‹ôy
, 
	mu£s_Âu
, 
	m˝uid
;

90 
RTIME
 
	mfúög_time
, 
	m≥riod
;

91 (*
	mh™dÀr
)();

92 
	md©a
, 
	mid
;

93 
	mthªad
;

94 
π_èsk_°ru˘
 *
	mèsk
;

95 
π_èskÀt_°ru˘
 *
	mu•èskÀt
;

96 
	movîrun
;

97 #ifde‡ 
CONFIG_RTAI_LONG_TIMED_LIST


98 
rb_roŸ_t
 
	mrbr
;

99 
rb_node_t
 
	mrbn
;

103 #ifde‡
__˝lu•lus


107 
__πai_èskÀts_öô
();

109 
__πai_èskÀts_exô
();

111 
π_èskÀt_°ru˘
 *
π_öô_èskÀt
();

113 
RTAI_SYSCALL_MODE
 
π_dñëe_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

115 
RTAI_SYSCALL_MODE
 
π_ö£π_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
, (*
h™dÀr
)(), 
d©a
, 
id
, 
pid
);

117 
RTAI_SYSCALL_MODE
 
π_ªmove_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

119 
π_èskÀt_°ru˘
 *
π_föd_èskÀt_by_id
(
id
);

121 
RTAI_SYSCALL_MODE
 
π_exec_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

123 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_¥i‹ôy
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
);

125 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_h™dÀr
(
π_èskÀt_°ru˘
 *
èskÀt
, (*
h™dÀr
)());

127 
	#π_Á°_£t_èskÀt_h™dÀr
(
t
, 
h
Ëdÿ{ (t)->
h™dÀr
 = (h); } 0)

	)

129 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_d©a
(
π_èskÀt_°ru˘
 *
èskÀt
, 
d©a
);

131 
	#π_Á°_£t_èskÀt_d©a
(
t
, 
d
) \

133 (
t
)->
d©a
 = (
d
); \

134 } 0)

	)

156 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_èskÀt_u£_Âu
(
π_èskÀt_°ru˘
 *
èskÀt
, 
u£_Âu
);

173 
	#π_öô_timî
 
π_öô_èskÀt


	)

190 
	#π_dñëe_timî
 
π_dñëe_èskÀt


	)

192 
RTAI_SYSCALL_MODE
 
π_ö£π_timî
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
, 
RTIME
 
fúög_time
, RTIME 
≥riod
, (*
h™dÀr
)(), 
d©a
, 
pid
);

194 
RTAI_SYSCALL_MODE
 
π_ªmove_timî
(
π_èskÀt_°ru˘
 *
timî
);

196 
RTAI_SYSCALL_MODE
 
π_£t_timî_¥i‹ôy
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
);

198 
RTAI_SYSCALL_MODE
 
π_£t_timî_fúög_time
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
);

200 
RTAI_SYSCALL_MODE
 
π_£t_timî_≥riod
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
≥riod
);

202 
RTAI_SYSCALL_MODE
 
π_gë_timî_times
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
timî_times
[]);

204 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_timî_ovîrun
(
π_èskÀt_°ru˘
 *
timî
);

208 
RTAI_SYSCALL_MODE
 
timî_t
 
π_±imî_¸óã
(
π_èskÀt_°ru˘
 *
timî
, (*
h™dÀr
)(), 
d©a
, 
pid
, 
thªad
);

210 
RTAI_SYSCALL_MODE
 
π_±imî_£âime
(
timî_t
 
timî
, c⁄° 
ôimî•ec
 *
vÆue
, 
d©a
, 
Êags
);

212 
RTAI_SYSCALL_MODE
 
π_±imî_ovîrun
(
timî_t
 
timî
);

214 
RTAI_SYSCALL_MODE
 
π_±imî_gëtime
(
timî_t
 
timî
, 
RTIME
 
timî_times
[]);

216 
RTAI_SYSCALL_MODE
 
π_±imî_dñëe
(
timî_t
 
timî
, 
•a˚
);

220 
	#π_Á°_£t_timî_≥riod
(
t
, 
p
) \

222 (
t
)->
≥riod
 = (
p
); \

223 } 0)

	)

247 
	#π_£t_timî_h™dÀr
 
π_£t_èskÀt_h™dÀr


	)

249 
	#π_Á°_£t_timî_h™dÀr
(
t
, 
h
Ëdÿ{ (t)->
h™dÀr
 = (h); } 0)

	)

272 
	#π_£t_timî_d©a
 
π_£t_èskÀt_d©a


	)

274 
	#π_Á°_£t_timî_d©a
(
t
, 
d
Ëdÿ{ (t)->
d©a
 = (d); } 0)

	)

276 
	#π_timî_u£_Âu
 
π_èskÀt_u£_Âu


	)

278 
RTAI_SYSCALL_MODE
 
π_waô_èskÀt_is_h¨d
(
π_èskÀt_°ru˘
 *
èskÀt
, 
thªad
);

280 
RTAI_SYSCALL_MODE
 
π_ªgi°î_èsk
(
π_èskÀt_°ru˘
 *
èskÀt
, π_èskÀt_°ru˘ *
u•èskÀt
, 
π_èsk_°ru˘
 *
èsk
);

282 #ifde‡
__˝lu•lus


288 
	~<sys/ty≥s.h
>

289 
	~<sys/waô.h
>

290 
	~<sys/mm™.h
>

291 
	~<°d¨g.h
>

293 
	~<πai_usi.h
>

294 
	~<πai_lxπ.h
>

296 
	#π_èskÀt_°ru˘
 
π_u•_èskÀt_°ru˘


	)

298 
	sπ_èskÀt_°ru˘
 {

299 
π_èskÀt_°ru˘
 *
√xt
, *
¥ev
;

300 
¥i‹ôy
, 
u£s_Âu
, 
˝uid
;

301 
RTIME
 
fúög_time
, 
≥riod
;

302 (*
h™dÀr
)();

303 
d©a
, 
id
;

304 
thªad
;

305 
π_èsk_°ru˘
 *
èsk
;

306 
π_èskÀt_°ru˘
 *
u•èskÀt
;

307 
ovîrun
;

308 #ifde‡ 
CONFIG_RTAI_LONG_TIMED_LIST


309 °ru˘ { *
rb_∑ª¡
; 
rb_cﬁ‹
; *
rb_right
, *
rb_À·
; } 
rbn
;

310 °ru˘ { *
rb_node
; } 
rbr
;

315 #i‚de‡
__SUPPORT_TASKLET__


316 
	#__SUPPORT_TASKLET__


	)

318 
	ssuµ‹t_èskÀt_s
 { 
π_èskÀt_°ru˘
 *
	mèskÀt
; 
±hªad_t
 
	mthªad
; vﬁ©ûê
	md⁄e
; };

320 
	$suµ‹t_èskÀt
(
suµ‹t_èskÀt_s
 *
¨gs
)

322 
RT_TASK
 *
èsk
;

323 
π_èskÀt_°ru˘
 
u•èskÀt
;

325 i‡((
èsk
 = 
	`π_thªad_öô
(()
¨gs
->
èskÀt
, 98, 0, 
SCHED_FIFO
, 0xF))) {

327 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
, *
u•èskÀt
; 
RT_TASK
 *
èsk
; } 
ªg
 = { 
¨gs
->tasklet, &usptasklet,Åask };

328 
	`πai_lxπ
(
TASKLETS_IDX
, (
ªg
), 
REG_TASK
, &reg);

330 
	`π_grow_™d_lock_°ack
(
TASKLET_STACK_SIZE
/2);

331 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

332 
	`π_make_h¨d_ªÆ_time
();

333 
¨gs
->
d⁄e
 = 1;

335 
	`π_èsk_su•íd
(
èsk
);

336 i‡(
u•èskÀt
.
h™dÀr
) {

337 
u•èskÀt
.
	`h™dÀr
(u•èskÀt.
d©a
);

342 
	`πai_°i
();

343 
	`π_make_so·_ªÆ_time
();

344 
	`π_èsk_dñëe
(
èsk
);

347 
	`¥ötf
("CANNOT INIT SUPPORT TASKLET\n");

350 
	}
}

353 #ifde‡
__˝lu•lus


357 
RTAI_PROTO
(, 
π_dñëe_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
));

359 
RTAI_PROTO
(
π_èskÀt_°ru˘
 *, 
π_öô_èskÀt
, ())

361 
is_h¨d
;

362 
suµ‹t_èskÀt_s
 
¨g
;

364 i‡((
¨g
.
èskÀt
 = (
π_èskÀt_°ru˘
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
INIT
, &¨g).
v
[
LOW
])) {

365 i‡((
is_h¨d
 = 
π_is_h¨d_ªÆ_time
(
NULL
))) {

366 
π_make_so·_ªÆ_time
();

368 
¨g
.
d⁄e
 = 0;

369 i‡((
¨g
.
thªad
 = 
π_thªad_¸óã
((*)
suµ‹t_èskÀt
, &¨g.
èskÀt
, 
TASKLET_STACK_SIZE
))) {

370 
i
;

371 
	#POLLS_PER_SEC
 100

	)

372 
i
 = 0; i < 
POLLS_PER_SEC
/5 && !
¨g
.
d⁄e
; i++) {

373 
time•ec
 
dñay
 = { 0, 1000000000/
POLLS_PER_SEC
 };

374 
«no¶ìp
(&
dñay
, 
NULL
);

376 #unde‡
POLLS_PER_SEC


377 i‡(!
¨g
.
d⁄e
 || 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
WAIT_IS_HARD
, &¨g).
i
[
LOW
]) {

378 
nŸd⁄e
;

381 
nŸd⁄e
:

382 
π_dñëe_èskÀt
(
¨g
.
èskÀt
);

383 
¨g
.
èskÀt
 = 
NULL
;

385 i‡(
is_h¨d
) {

386 
π_make_h¨d_ªÆ_time
();

389  
¨g
.
èskÀt
;

392 
	#π_öô_timî
 
π_öô_èskÀt


	)

394 
RTAI_PROTO
(, 
π_dñëe_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

396 
thªad
;

397 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

398 i‡((
thªad
 = 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
DELETE
, &
¨g
).
i
[
LOW
])) {

399 
π_thªad_joö
(
thªad
);

403 
	#π_dñëe_timî
 
π_dñëe_èskÀt


	)

405 
RTAI_PROTO
(, 
π_ö£π_timî
,(
π_èskÀt_°ru˘
 *
timî
,

406 
¥i‹ôy
,

407 
RTIME
 
fúög_time
,

408 
RTIME
 
≥riod
,

409 (*
h™dÀr
)(),

410 
d©a
,

411 
pid
))

413 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
¥i‹ôy
; 
RTIME
 
fúög_time
; RTIME 
≥riod
; (*
h™dÀr
)(); 
d©a
; 
pid
; } 
¨g
 = {Åimer,Öriority, firing_time,Öeriod, handler, data,Öid };

414  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TIMER_INSERT
, &
¨g
).
i
[
LOW
];

417 
RTAI_PROTO
(, 
π_ªmove_timî
, (
π_èskÀt_°ru˘
 *
timî
))

419 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; } 
¨g
 = {Åimer };

420 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TIMER_REMOVE
, &
¨g
);

423 
RTAI_PROTO
(, 
π_£t_timî_¥i‹ôy
, (
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
))

425 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
¥i‹ôy
; } 
¨g
 = {Åimer,Öriority };

426 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_TASKLETS_PRI
, &
¨g
);

429 
RTAI_PROTO
(, 
π_£t_timî_fúög_time
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
))

431 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 
fúög_time
; } 
¨g
 = {Åimer, firing_time };

432 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_FIR_TIM
, &
¨g
);

435 
RTAI_PROTO
(, 
π_£t_timî_≥riod
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
≥riod
))

437 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 
≥riod
; } 
¨g
 = {Åimer,Öeriod };

438 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_PER
, &
¨g
);

441 
RTAI_PROTO
(, 
π_gë_timî_times
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
timî_times
[]))

443 i‡(
timî_times
) {

444 
RTIME
 
…imî_times
[2];

445 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 *
timî_times
; } 
¨g
 = {Åimî, 
…imî_times
 };

446 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
GET_TMR_TIM
, &
¨g
);

447 
mem˝y
(
timî_times
, 
…imî_times
, (ltimer_times));

451 
RTAI_PROTO
(
RTIME
, 
π_gë_timî_ovîrun
, (
π_èskÀt_°ru˘
 *
timî
 ))

453 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; } 
¨g
 = {Åimer };

454  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
GET_TMR_OVRN
, &
¨g
).
π
;

457 
RTAI_PROTO
(, 
π_£t_èskÀt_h™dÀr
, (
π_èskÀt_°ru˘
 *
èskÀt
, (*
h™dÀr
)()))

459 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; (*
h™dÀr
)(); } 
¨g
 = {Åasklet, handler };

460  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_HDL
, &
¨g
).
i
[
LOW
];

463 
	#π_£t_timî_h™dÀr
 
π_£t_èskÀt_h™dÀr


	)

465 
RTAI_PROTO
(, 
π_£t_èskÀt_d©a
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
d©a
))

467 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
d©a
; } 
¨g
 = {Åasklet, data };

468 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_DAT
, &
¨g
);

471 
	#π_£t_timî_d©a
 
π_£t_èskÀt_d©a


	)

473 
RTAI_PROTO
(
RT_TASK
 *, 
π_èskÀt_u£_Âu
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
u£_Âu
))

475 
RT_TASK
 *
èsk
;

476 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
u£_Âu
; } 
¨g
 = {Åasklet, use_fpu };

477 i‡((
èsk
 = (
RT_TASK
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
USE_FPU
, &
¨g
).
v
[
LOW
])) {

478 
π_èsk_u£_Âu
(
èsk
, 
u£_Âu
);

480  
èsk
;

483 
	#π_timî_u£_Âu
 
π_èskÀt_u£_Âu


	)

485 
RTAI_PROTO
(, 
π_ö£π_èskÀt
,(
π_èskÀt_°ru˘
 *
èskÀt
,

486 
¥i‹ôy
,

487 (*
h™dÀr
)(),

488 
d©a
,

489 
id
,

490 
pid
))

492 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
¥i‹ôy
; (*
h™dÀr
)(); 
d©a
; 
id
; 
pid
; } 
¨g
 = {Åasklet,Öriority, handler, data, id,Öid };

493  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TASK_INSERT
, &
¨g
).
i
[
LOW
];

496 
RTAI_PROTO
(, 
π_£t_èskÀt_¥i‹ôy
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
))

498 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
¥i‹ôy
; } 
¨g
 = {Åasklet,Öriority };

499 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_TSK_PRI
, &
¨g
);

502 
RTAI_PROTO
(, 
π_ªmove_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

504 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

505 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TASK_REMOVE
, &
¨g
);

508 
RTAI_PROTO
(, 
π_exec_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

510 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

511  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
EXEC_TASKLET
, &
¨g
).
i
[
LOW
];

514 
	~<°dlib.h
>

516 
	sπ_èskÀts_°ru˘
 { vﬁ©ûê
ö
, 
out
, 
avb
, 
¡askÀts
; 
π_èskÀt_°ru˘
 **
èskÀts
; 
lock
; };

518 
RTAI_PROTO
(
π_èskÀts_°ru˘
 *, 
π_¸óã_èskÀts
, (
¡askÀts
))

520 
π_èskÀts_°ru˘
 *
èskÀts
;

521 i‡((
èskÀts
 = (
π_èskÀts_°ru˘
 *)
mÆloc
((rt_tasklets_struct)))) {

522 i‡((
èskÀts
->èskÀt†(
π_èskÀt_°ru˘
 **)
mÆloc
(
¡askÀts
*(rt_tasklet_struct *)))) {

523 
i
;

524 
i
 = 0; i < 
¡askÀts
; i++) {

525 i‡(!(
èskÀts
->èskÀts[
i
] = 
π_öô_èskÀt
())) {

526 
k
;

527 
k
 = 0; k < 
i
; k++) {

528 
π_dñëe_èskÀt
(
èskÀts
->èskÀts[
k
]);

530 
‰ì
(
èskÀts
->tasklets);

531 
‰ì_èskÀts
;

534 
èskÀts
->
lock
 = 0;

535 
èskÀts
->
¡askÀts
 =ÅaskÀts->
avb
 =ÅaskÀts->
ö
 =ÅaskÀts->
out
 =Çtasklets;

536  
èskÀts
;

538 
‰ì_èskÀts
:

539 
‰ì
(
èskÀts
);

542  
NULL
;

545 
	#π_¸óã_timîs
 
π_¸óã_èskÀts


	)

547 
RTAI_PROTO
(, 
π_de°roy_èskÀts
, (
π_èskÀts_°ru˘
 *
èskÀts
))

549 
i
;

550 
i
 = 0; i < 
èskÀts
->
¡askÀts
; i++) {

551 
π_dñëe_èskÀt
(
èskÀts
->èskÀts[
i
]);

553 
‰ì
(
èskÀts
->tasklets);

554 
‰ì
(
èskÀts
);

557 
	#π_de°roy_timîs
 
π_de°roy_èskÀts


	)

559 
	~<asm/πai_©omic.h
>

561 
RTAI_PROTO
(
π_èskÀt_°ru˘
 *, 
π_gë_èskÀt
, (
π_èskÀts_°ru˘
 *
èskÀts
))

563 
π_èskÀt_°ru˘
 *
èskÀt
;

564 
©omic_cmpxchg
((*)&
èskÀts
->
lock
, 0, 1));

565 i‡(
èskÀts
->
avb
 > 0) {

566 i‡(
èskÀts
->
out
 >èskÀts->
¡askÀts
) {

567 
èskÀts
->
out
 = 0;

569 
èskÀts
->
avb
--;

570 
èskÀt
 = 
èskÀts
->èskÀts[èskÀts->
out
++];

571 
èskÀts
->
lock
 = 0;

572  
èskÀt
;

574 
èskÀts
->
lock
 = 0;

575  
NULL
;

578 
	#π_gë_timî
 
π_gë_èskÀt


	)

580 
RTAI_PROTO
(, 
π_gvb_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
π_èskÀts_°ru˘
 *
èskÀts
))

582 
©omic_cmpxchg
((*)&
èskÀts
->
lock
, 0, 1));

583 i‡(
èskÀts
->
avb
 <ÅaskÀts->
¡askÀts
) {

584 i‡(
èskÀts
->
ö
 >èskÀts->
¡askÀts
) {

585 
èskÀts
->
ö
 = 0;

587 
èskÀts
->
avb
++;

588 
èskÀts
->èskÀts[èskÀts->
ö
++] = 
èskÀt
;

589 
èskÀts
->
lock
 = 0;

592 
èskÀts
->
lock
 = 0;

593  
EINVAL
;

596 
	#π_gvb_timî
 
π_gvb_èskÀt


	)

598 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_tbx.h

21 #i‚de‡
_RTAI_RT_MSGQ_H


22 
	#_RTAI_RT_MSGQ_H


	)

24 
	~<löux/vîsi⁄.h
>

25 
	~<πai_£m.h
>

27 
	#MSGQ_INIT
 
TBX_INIT


	)

28 
	#MSGQ_DELETE
 
TBX_DELETE


	)

29 
	#NAMED_MSGQ_INIT
 
NAMED_TBX_INIT


	)

30 
	#NAMED_MSGQ_DELETE
 
NAMED_TBX_DELETE


	)

31 
	#MSG_SEND
 
TBX_SEND


	)

32 
	#MSG_SEND_IF
 
TBX_SEND_IF


	)

33 
	#MSG_SEND_UNTIL
 
TBX_SEND_UNTIL


	)

34 
	#MSG_SEND_TIMED
 
TBX_SEND_TIMED


	)

35 
	#MSG_RECEIVE
 
TBX_RECEIVE


	)

36 
	#MSG_RECEIVE_IF
 
TBX_RECEIVE_IF


	)

37 
	#MSG_RECEIVE_UNTIL
 
TBX_RECEIVE_UNTIL


	)

38 
	#MSG_RECEIVE_TIMED
 
TBX_RECEIVE_TIMED


	)

39 
	#MSG_BROADCAST
 
TBX_BROADCAST


	)

40 
	#MSG_BROADCAST_IF
 
TBX_BROADCAST_IF


	)

41 
	#MSG_BROADCAST_UNTIL
 
TBX_BROADCAST_UNTIL


	)

42 
	#MSG_BROADCAST_TIMED
 
TBX_BROADCAST_TIMED


	)

43 
	#MSG_EVDRP
 
TBX_URGENT


	)

45 
	#TBX
 
RT_MSGQ


	)

47 #ifde‡
__KERNEL__


49 
	sπ_msgh
 {

50 *
	mmÆloc
;

51 
	mbrﬂdˇ°
;

52 
	msize
;

53 
	m¥i‹ôy
;

54 *
	m√xt
;

55 } 
	tRT_MSGH
;

57 
	#RT_MSGH_SIZE
 ((
RT_MSGH
))

	)

59 
	sπ_msg
 {

60 
RT_MSGH
 
	mhdr
;

61 
	mmsg
[1];

62 } 
	tRT_MSG
;

64 
	sπ_msgq
 {

65 
	mnmsg
;

66 
	mÁ°size
;

67 
	m¶Ÿ
;

68 **
	m¶Ÿs
;

69 *
	mfú°msg
;

70 
SEM
 
	mª˚ivîs
, 
	m£ndîs
;

71 
SEM
 
	mª˚ived
, 
	m‰e¶Ÿs
;

72 
SEM
 
	mbrﬂdˇ°
;

73 
•ölock_t
 
	mlock
;

74 } 
	tRT_MSGQ
;

76 
	~<löux/ty≥s.h
>

78 #ifde‡
__˝lu•lus


82 
__πai_msg_queue_öô
();

84 
__πai_msg_queue_exô
();

86 
RTAI_SYSCALL_MODE
 
π_msgq_öô
(
RT_MSGQ
 *
msgq
, 
nmsg
, 
msg_size
);

88 
RTAI_SYSCALL_MODE
 
π_msgq_dñëe
(
RT_MSGQ
 *
msgq
);

90 
RTAI_SYSCALL_MODE
 
RT_MSGQ
 *
_π_«med_msgq_öô
(
msgq_«me
, 
nmsg
, 
size
);

91 
ölöe
 
RT_MSGQ
 *
π_«med_msgq_öô
(c⁄° *
msgq_«me
, 
nmsg
, 
size
)

93  
_π_«med_msgq_öô
(
«m2num
(
msgq_«me
), 
nmsg
, 
size
);

96 
RTAI_SYSCALL_MODE
 
π_«med_msgq_dñëe
(
RT_MSGQ
 *
msgq
);

98 
RTAI_SYSCALL_MODE
 
_π_msg_£nd
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

99 
ölöe
 
π_msg_£nd
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

101  
_π_msg_£nd
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

104 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

105 
ölöe
 
π_msg_£nd_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

107  
_π_msg_£nd_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

110 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

111 
ölöe
 
π_msg_£nd_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
)

113  
_π_msg_£nd_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

116 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

117 
ölöe
 
π_msg_£nd_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
)

119  
_π_msg_£nd_timed
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

122 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

123 
ölöe
 
π_msg_ª˚ive
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

125  
_π_msg_ª˚ive
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

128 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

129 
ölöe
 
π_msg_ª˚ive_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

131  
_π_msg_ª˚ive_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

134 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

135 
ölöe
 
π_msg_ª˚ive_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
u¡û
)

137  
_π_msg_ª˚ive_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

140 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

141 
ölöe
 
π_msg_ª˚ive_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
dñay
)

143  
_π_msg_ª˚ive_timed
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

146 
RTAI_SYSCALL_MODE
 
_π_msg_evdΩ
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

147 
ölöe
 
π_msg_evdΩ
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

149  
_π_msg_evdΩ
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

152 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

153 
ölöe
 
π_msg_brﬂdˇ°
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

155  
_π_msg_brﬂdˇ°
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

158 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

159 
ölöe
 
π_msg_brﬂdˇ°_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

161  
_π_msg_brﬂdˇ°_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

164 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

165 
ölöe
 
π_msg_brﬂdˇ°_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
)

167  
_π_msg_brﬂdˇ°_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

170 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

171 
ölöe
 
π_msg_brﬂdˇ°_dñay
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
)

173  
_π_msg_brﬂdˇ°_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

176 #ifde‡
__˝lu•lus


182 
	~<sig«l.h
>

183 
	~<πai_lxπ.h
>

185 
π_msgh
;

187 #ifde‡
__˝lu•lus


191 
	sπ_msgq
 {

192 
dummy
;

193 } 
	tRT_MSGQ
;

195 
RTAI_PROTO
(
RT_MSGQ
 *, 
π_msgq_öô
, (
msgq
, 
nmsg
, 
msg_size
))

197 °ru˘ { 
msgq
; 
nmsg
; 
msg_size
; } 
¨g
 = { msgq,Çmsg, msg_size };

198  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_INIT
, &
¨g
).
v
[
LOW
];

201 
RTAI_PROTO
(, 
π_msgq_dñëe
, (
RT_MSGQ
 *
msgq
))

203 °ru˘ { 
RT_MSGQ
 *
msgq
; } 
¨g
 = { msgq };

204  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_DELETE
, &
¨g
).
i
[
LOW
];

207 
RTAI_PROTO
(
RT_MSGQ
 *, 
π_«med_msgq_öô
,(c⁄° *
«me
, 
nmsg
, 
size
))

209 °ru˘ { 
«me
; 
nmsg
; 
size
; } 
¨g
 = { 
«m2num
(name),Çmsg, size };

210  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_INIT
, &
¨g
).
v
[
LOW
];

213 
RTAI_PROTO
(, 
π_«med_msgq_dñëe
, (
RT_MSGQ
 *
msgq
))

215 °ru˘ { 
RT_MSGQ
 *
msgq
; } 
¨g
 = { msgq };

216  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_DELETE
, &
¨g
).
i
[
LOW
];

219 
RTAI_PROTO
(, 
π_msg_£nd
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

221 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

222  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND
, &
¨g
).
i
[
LOW
];

225 
RTAI_PROTO
(, 
π_msg_£nd_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

227 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

228  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_IF
, &
¨g
).
i
[
LOW
];

231 
RTAI_PROTO
(, 
π_msg_£nd_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
u¡û
))

233 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

234  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_UNTIL
, &
¨g
).
i
[
LOW
];

237 
RTAI_PROTO
(, 
π_msg_£nd_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
dñay
))

239 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

240  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_TIMED
, &
¨g
).
i
[
LOW
];

243 
RTAI_PROTO
(, 
π_msg_ª˚ive
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

245 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

246  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE
, &
¨g
).
i
[
LOW
];

249 
RTAI_PROTO
(, 
π_msg_ª˚ive_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

251 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

252  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_IF
, &
¨g
).
i
[
LOW
];

255 
RTAI_PROTO
(, 
π_msg_ª˚ive_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
, 
RTIME
 
u¡û
))

257 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

258  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_UNTIL
, &
¨g
).
i
[
LOW
];

261 
RTAI_PROTO
(, 
π_msg_ª˚ive_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
, 
RTIME
 
dñay
))

263 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

264  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_TIMED
, &
¨g
).
i
[
LOW
];

267 
RTAI_PROTO
(, 
π_msg_evdΩ
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

269 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

270  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_EVDRP
, &
¨g
).
i
[
LOW
];

273 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

275 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

276  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST
, &
¨g
).
i
[
LOW
];

279 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

281 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

282  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_IF
, &
¨g
).
i
[
LOW
];

285 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
u¡û
))

287 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

288  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_UNTIL
, &
¨g
).
i
[
LOW
];

291 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
dñay
))

293 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

294  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_TIMED
, &
¨g
).
i
[
LOW
];

297 #ifde‡
__˝lu•lus


303 
	#π_tbx_öô
(
tbx
, 
size
, 
Êags
Ë
	`π_msgq_öô
—bx, size, 0)

	)

304 
	#π_tbx_dñëe
(
tbx
Ë
	`π_msgq_dñëe
—bx)

	)

306 
	#π_tbx_£nd
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd
—bx, msg, msg_size, 1)

	)

307 
	#π_tbx_£nd_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd_if
—bx, msg, msg_size, 1)

	)

308 
	#π_tbx_£nd_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_£nd_u¡û
—bx, msg, msg_size, 1, u¡û)

	)

309 
	#π_tbx_£nd_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_£nd_timed
—bx, msg, msg_size, 1, dñay)

	)

311 
	#π_tbx_ª˚ive
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_ª˚ive
—bx, msg, msg_size, 0)

	)

312 
	#π_tbx_ª˚ive_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_ª˚ive_if
—bx, msg, msg_size, 0)

	)

313 
	#π_tbx_ª˚ive_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_ª˚ive_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

314 
	#π_tbx_ª˚ive_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_ª˚ive_timed
—bx, msg, msg_size, 0, dñay)

	)

316 
	#π_tbx_brﬂdˇ°
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_brﬂdˇ°
—bx, msg, msg_size, 0)

	)

317 
	#π_tbx_brﬂdˇ°_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_brﬂdˇ°_if
—bx, msg, msg_size, 0)

	)

318 
	#π_tbx_brﬂdˇ°_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_brﬂdˇ°_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

319 
	#π_tbx_brﬂdˇ°_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_brﬂdˇ°_timed
—bx, msg, msg_size, 0, dñay)

	)

321 
	#π_tbx_urgít
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd
—bx, msg, msg_size, 0)

	)

322 
	#π_tbx_urgít_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd_if
—bx, msg, msg_size, 0)

	)

323 
	#π_tbx_urgít_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_£nd_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

324 
	#π_tbx_urgít_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_£nd_timed
—bx, msg, msg_size, 0, dñay)

	)

	@/usr/src/rtai/base/include/rtai_trace.h

21 #i‚de‡
_RTAI_TRACE_H


22 
	#_RTAI_TRACE_H


	)

24 
	~<πai_ty≥s.h
>

26 #i‡
deföed
(
CONFIG_RTAI_TRACE
Ë&& deföed(
__KERNEL__
)

28 
	~<löux/åa˚.h
>

33 
	gπ_ªgi°î_åa˚r


34 (
	gåa˚r_ˇŒ
 );

35 
	gπ_uƒegi°î_åa˚r


36 (
	gåa˚r_ˇŒ
 );

37 
	gπ_åa˚_evít


38 (
	guöt8_t
 ,

42 
	#RT_TRACE_EVENT
(
ID
, 
DATA
Ë
	`π_åa˚_evít
(ID, DATA)

	)

44 
	#TRACE_RTAI_START
 
TRACE_EV_MAX


	)

47 
	#TRACE_RTAI_EV_MOUNT
 
TRACE_RTAI_START
 + 1

	)

48 
	#TRACE_RTAI_EV_UMOUNT
 
TRACE_RTAI_START
 + 2

	)

49 
	#TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
 
TRACE_RTAI_START
 + 3

	)

50 
	#TRACE_RTAI_EV_GLOBAL_IRQ_EXIT
 
TRACE_RTAI_START
 + 4

	)

51 
	#TRACE_RTAI_EV_OWN_IRQ_ENTRY
 
TRACE_RTAI_START
 + 5

	)

52 
	#TRACE_RTAI_EV_OWN_IRQ_EXIT
 
TRACE_RTAI_START
 + 6

	)

53 
	#TRACE_RTAI_EV_TRAP_ENTRY
 
TRACE_RTAI_START
 + 7

	)

54 
	#TRACE_RTAI_EV_TRAP_EXIT
 
TRACE_RTAI_START
 + 8

	)

55 
	#TRACE_RTAI_EV_SRQ_ENTRY
 
TRACE_RTAI_START
 + 9

	)

56 
	#TRACE_RTAI_EV_SRQ_EXIT
 
TRACE_RTAI_START
 + 10

	)

57 
	#TRACE_RTAI_EV_SWITCHTO_LINUX
 
TRACE_RTAI_START
 + 11

	)

58 
	#TRACE_RTAI_EV_SWITCHTO_RT
 
TRACE_RTAI_START
 + 12

	)

59 
	#TRACE_RTAI_EV_SCHED_CHANGE
 
TRACE_RTAI_START
 + 13

	)

60 
	#TRACE_RTAI_EV_TASK
 
TRACE_RTAI_START
 + 14

	)

61 
	#TRACE_RTAI_EV_TIMER
 
TRACE_RTAI_START
 + 15

	)

62 
	#TRACE_RTAI_EV_SEM
 
TRACE_RTAI_START
 + 16

	)

63 
	#TRACE_RTAI_EV_MSG
 
TRACE_RTAI_START
 + 17

	)

64 
	#TRACE_RTAI_EV_RPC
 
TRACE_RTAI_START
 + 18

	)

65 
	#TRACE_RTAI_EV_MBX
 
TRACE_RTAI_START
 + 19

	)

66 
	#TRACE_RTAI_EV_FIFO
 
TRACE_RTAI_START
 + 20

	)

67 
	#TRACE_RTAI_EV_SHM
 
TRACE_RTAI_START
 + 21

	)

68 
	#TRACE_RTAI_EV_POSIX
 
TRACE_RTAI_START
 + 22

	)

69 
	#TRACE_RTAI_EV_LXRT
 
TRACE_RTAI_START
 + 23

	)

70 
	#TRACE_RTAI_EV_LXRTI
 
TRACE_RTAI_START
 + 24

	)

73 
	#TRACE_RTAI_EV_MAX
 
TRACE_RTAI_EV_LXRTI


	)

77 
	#TRACE_RTAI_MOUNT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_MOUNT
, 
NULL
)

	)

80 
	#TRACE_RTAI_UMOUNT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_UMOUNT
, 
NULL
)

	)

83 
	s_åa˚_πai_globÆ_úq_íåy


85 
uöt8_t
 
	múq_id
;

86 
uöt8_t
 
	mkî√l
;

87 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_globÆ_úq_íåy
;

88 #i‡
CONFIG_X86


89 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
, 
__dummy
) \

92 
uöt32_t
 
eÊags
, 
xcs
; \

93 
åa˚_πai_globÆ_úq_íåy
 
úq_íåy
;\

94 
úq_íåy
.
úq_id
 = 
ID
;\

95 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

96 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

97 
úq_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

98 
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
, &
úq_íåy
);\

99 } 0)

	)

101 #i‡
CONFIG_PPC


102 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
, 
KERNEL
) \

105 
åa˚_πai_globÆ_úq_íåy
 
úq_íåy
;\

106 
úq_íåy
.
úq_id
 = 
ID
;\

107 
úq_íåy
.
kî√l
 = 
KERNEL
;\

108 
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
, &
úq_íåy
);\

109 } 0)

	)

113 
	#TRACE_RTAI_GLOBAL_IRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_EXIT
, 
NULL
)

	)

116 
	s_åa˚_πai_own_úq_íåy


118 
uöt8_t
 
	múq_id
;

119 
uöt8_t
 
	mkî√l
;

120 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_own_úq_íåy
;

121 #i‡
CONFIG_X86


122 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
) \

125 
uöt32_t
 
eÊags
, 
xcs
; \

126 
åa˚_πai_own_úq_íåy
 
úq_íåy
;\

127 
úq_íåy
.
úq_id
 = 
ID
;\

128 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

129 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

130 
úq_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

131 
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_ENTRY
, &
úq_íåy
);\

132 } 0)

	)

134 #i‡
CONFIG_PPC


135 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
, 
KERNEL
) \

138 
åa˚_πai_own_úq_íåy
 
úq_íåy
;\

139 
úq_íåy
.
úq_id
 = 
ID
;\

140 
úq_íåy
.
kî√l
 = 
KERNEL
;\

141 
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_ENTRY
, &
úq_íåy
);\

142 } 0)

	)

146 
	#TRACE_RTAI_OWN_IRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_EXIT
, 
NULL
)

	)

149 
	s_åa˚_πai_å≠_íåy


151 
uöt8_t
 
	må≠_id
;

152 
uöt32_t
 
	maddªss
;

153 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_å≠_íåy
;

154 
	#TRACE_RTAI_TRAP_ENTRY
(
ID
,
ADDR
) \

157 
åa˚_πai_å≠_íåy
 
å≠_evít
;\

158 
å≠_evít
.
å≠_id
 = 
ID
;\

159 
å≠_evít
.
addªss
 = 
ADDR
; \

160 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TRAP_ENTRY
, &
å≠_evít
);\

161 } 0)

	)

169 
	#TRACE_RTAI_TRAP_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_TRAP_EXIT
, 
NULL
)

	)

172 
	s_åa˚_πai_§q_íåy


174 
uöt8_t
 
	m§q_id
;

175 
uöt8_t
 
	mkî√l
;

176 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_§q_íåy
;

177 #i‡
CONFIG_X86


178 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
) \

181 
uöt32_t
 
eÊags
, 
xcs
; \

182 
åa˚_πai_§q_íåy
 
§q_íåy
;\

183 
§q_íåy
.
§q_id
 = 
ID
;\

184 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

185 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

186 
§q_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

187 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_ENTRY
, &
§q_íåy
);\

188 } 0)

	)

190 #i‡
CONFIG_PPC
 || 
CONFIG_ARM


191 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
,
KERNEL
) \

194 
åa˚_πai_§q_íåy
 
§q_íåy
;\

195 
§q_íåy
.
§q_id
 = 
ID
;\

196 
§q_íåy
.
kî√l
 = 
KERNEL
;\

197 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_ENTRY
, &
§q_íåy
);\

198 } 0)

	)

202 
	#TRACE_RTAI_SRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_EXIT
, 
NULL
)

	)

205 
	s_åa˚_πai_swôchto_löux


207 
uöt8_t
 
	m˝u_id
;

208 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_swôchto_löux
;

209 
	#TRACE_RTAI_SWITCHTO_LINUX
(
ID
) \

212 
åa˚_πai_swôchto_löux
 
swôch_evít
; \

213 
swôch_evít
.
˝u_id
 = (
uöt8_t
Ë
ID
; \

214 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SWITCHTO_LINUX
, &
swôch_evít
); \

215 } 0)

	)

218 
	s_åa˚_πai_swôchto_π


220 
uöt8_t
 
	m˝u_id
;

221 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_swôchto_π
;

222 
	#TRACE_RTAI_SWITCHTO_RT
(
ID
) \

225 
åa˚_πai_swôchto_π
 
swôch_evít
; \

226 
swôch_evít
.
˝u_id
 = (
uöt8_t
Ë
ID
; \

227 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SWITCHTO_RT
, &
swôch_evít
); \

228 } 0)

	)

231 
	s_åa˚_πai_sched_ch™ge


233 
uöt32_t
 
	mout
;

234 
uöt32_t
 
	mö
;

235 
uöt32_t
 
	mout_°©e
;

236 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_sched_ch™ge
;

237 
	#TRACE_RTAI_SCHED_CHANGE
(
OUT
, 
IN
, 
OUT_STATE
) \

240 
åa˚_πai_sched_ch™ge
 
sched_evít
;\

241 
sched_evít
.
out
 = (
uöt32_t
Ë
OUT
;\

242 
sched_evít
.
ö
 = (
uöt32_t
Ë
IN
;\

243 
sched_evít
.
out_°©e
 = (
uöt32_t
Ë
OUT_STATE
; \

244 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SCHED_CHANGE
, &
sched_evít
);\

245 } 0)

	)

248 
	#TRACE_RTAI_EV_TASK_INIT
 1

	)

249 
	#TRACE_RTAI_EV_TASK_DELETE
 2

	)

250 
	#TRACE_RTAI_EV_TASK_SIG_HANDLER
 3

	)

251 
	#TRACE_RTAI_EV_TASK_YIELD
 4

	)

252 
	#TRACE_RTAI_EV_TASK_SUSPEND
 5

	)

253 
	#TRACE_RTAI_EV_TASK_RESUME
 6

	)

254 
	#TRACE_RTAI_EV_TASK_MAKE_PERIOD_RELATIVE
 7

	)

255 
	#TRACE_RTAI_EV_TASK_MAKE_PERIOD
 8

	)

256 
	#TRACE_RTAI_EV_TASK_WAIT_PERIOD
 9

	)

257 
	#TRACE_RTAI_EV_TASK_BUSY_SLEEP
 10

	)

258 
	#TRACE_RTAI_EV_TASK_SLEEP
 11

	)

259 
	#TRACE_RTAI_EV_TASK_SLEEP_UNTIL
 12

	)

260 
	s_åa˚_πai_èsk


262 
uöt8_t
 
	mevít_sub_id
;

263 
uöt32_t
 
	mevít_d©a1
;

264 
uöt64_t
 
	mevít_d©a2
;

265 
uöt64_t
 
	mevít_d©a3
;

266 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_èsk
;

267 
	#TRACE_RTAI_TASK
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

270 
åa˚_πai_èsk
 
èsk_evít
;\

271 
èsk_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
;\

272 
èsk_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

273 
èsk_evít
.
evít_d©a2
 = (
uöt64_t
Ë
DATA2
; \

274 
èsk_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

275 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TASK
, &
èsk_evít
);\

276 } 0)

	)

279 
	#TRACE_RTAI_EV_TIMER_REQUEST
 1

	)

280 
	#TRACE_RTAI_EV_TIMER_FREE
 2

	)

281 
	#TRACE_RTAI_EV_TIMER_REQUEST_APIC
 3

	)

282 
	#TRACE_RTAI_EV_TIMER_APIC_FREE
 4

	)

283 
	#TRACE_RTAI_EV_TIMER_HANDLE_EXPIRY
 5

	)

284 
	s_åa˚_πai_timî


286 
uöt8_t
 
	mevít_sub_id
;

287 
uöt32_t
 
	mevít_d©a1
;

288 
uöt32_t
 
	mevít_d©a2
;

289 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_timî
;

290 
	#TRACE_RTAI_TIMER
(
ID
, 
DATA1
, 
DATA2
) \

293 
åa˚_πai_timî
 
timî_evít
; \

294 
timî_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

295 
timî_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

296 
timî_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

297 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TIMER
, &
timî_evít
); \

298 } 0)

	)

301 
	#TRACE_RTAI_EV_SEM_INIT
 1

	)

302 
	#TRACE_RTAI_EV_SEM_DELETE
 2

	)

303 
	#TRACE_RTAI_EV_SEM_SIGNAL
 3

	)

304 
	#TRACE_RTAI_EV_SEM_WAIT
 4

	)

305 
	#TRACE_RTAI_EV_SEM_WAIT_IF
 5

	)

306 
	#TRACE_RTAI_EV_SEM_WAIT_UNTIL
 6

	)

307 
	s_åa˚_πai_£m


309 
uöt8_t
 
	mevít_sub_id
;

310 
uöt32_t
 
	mevít_d©a1
;

311 
uöt64_t
 
	mevít_d©a2
;

312 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_£m
;

313 
	#TRACE_RTAI_SEM
(
ID
, 
DATA1
, 
DATA2
) \

316 
åa˚_πai_£m
 
£m_evít
; \

317 
£m_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

318 
£m_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

319 
£m_evít
.
evít_d©a2
 = (
uöt64_t
Ë
DATA2
; \

320 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SEM
, &
£m_evít
); \

321 } 0)

	)

324 
	#TRACE_RTAI_EV_MSG_SEND
 1

	)

325 
	#TRACE_RTAI_EV_MSG_SEND_IF
 2

	)

326 
	#TRACE_RTAI_EV_MSG_SEND_UNTIL
 3

	)

327 
	#TRACE_RTAI_EV_MSG_RECV
 4

	)

328 
	#TRACE_RTAI_EV_MSG_RECV_IF
 5

	)

329 
	#TRACE_RTAI_EV_MSG_RECV_UNTIL
 6

	)

330 
	s_åa˚_πai_msg


332 
uöt8_t
 
	mevít_sub_id
;

333 
uöt32_t
 
	mevít_d©a1
;

334 
uöt32_t
 
	mevít_d©a2
;

335 
uöt64_t
 
	mevít_d©a3
;

336 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_msg
;

337 
	#TRACE_RTAI_MSG
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

340 
åa˚_πai_msg
 
msg_evít
; \

341 
msg_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

342 
msg_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

343 
msg_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

344 
msg_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

345 
	`π_åa˚_evít
(
TRACE_RTAI_EV_MSG
, &
msg_evít
); \

346 } 0)

	)

349 
	#TRACE_RTAI_EV_RPC_MAKE
 1

	)

350 
	#TRACE_RTAI_EV_RPC_MAKE_IF
 2

	)

351 
	#TRACE_RTAI_EV_RPC_MAKE_UNTIL
 3

	)

352 
	#TRACE_RTAI_EV_RPC_RETURN
 4

	)

353 
	s_åa˚_πai_Ωc


355 
uöt8_t
 
	mevít_sub_id
;

356 
uöt32_t
 
	mevít_d©a1
;

357 
uöt32_t
 
	mevít_d©a2
;

358 
uöt64_t
 
	mevít_d©a3
;

359 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_Ωc
;

360 
	#TRACE_RTAI_RPC
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

363 
åa˚_πai_Ωc
 
Ωc_evít
; \

364 
Ωc_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

365 
Ωc_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

366 
Ωc_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

367 
Ωc_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

368 
	`π_åa˚_evít
(
TRACE_RTAI_EV_RPC
, &
Ωc_evít
); \

369 } 0)

	)

372 
	#TRACE_RTAI_EV_MBX_INIT
 1

	)

373 
	#TRACE_RTAI_EV_MBX_DELETE
 2

	)

374 
	#TRACE_RTAI_EV_MBX_SEND
 3

	)

375 
	#TRACE_RTAI_EV_MBX_SEND_WP
 4

	)

376 
	#TRACE_RTAI_EV_MBX_SEND_IF
 5

	)

377 
	#TRACE_RTAI_EV_MBX_SEND_UNTIL
 6

	)

378 
	#TRACE_RTAI_EV_MBX_RECV
 7

	)

379 
	#TRACE_RTAI_EV_MBX_RECV_WP
 8

	)

380 
	#TRACE_RTAI_EV_MBX_RECV_IF
 9

	)

381 
	#TRACE_RTAI_EV_MBX_RECV_UNTIL
 10

	)

382 
	s_åa˚_πai_mbx


384 
uöt8_t
 
	mevít_sub_id
;

385 
uöt32_t
 
	mevít_d©a1
;

386 
uöt32_t
 
	mevít_d©a2
;

387 
uöt64_t
 
	mevít_d©a3
;

388 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_mbx
;

389 
	#TRACE_RTAI_MBX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

392 
åa˚_πai_mbx
 
mbx_evít
; \

393 
mbx_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

394 
mbx_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

395 
mbx_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

396 
mbx_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

397 
	`π_åa˚_evít
(
TRACE_RTAI_EV_MBX
, &
mbx_evít
); \

398 } 0)

	)

401 
	#TRACE_RTAI_EV_FIFO_CREATE
 1

	)

402 
	#TRACE_RTAI_EV_FIFO_DESTROY
 2

	)

403 
	#TRACE_RTAI_EV_FIFO_RESET
 3

	)

404 
	#TRACE_RTAI_EV_FIFO_RESIZE
 4

	)

405 
	#TRACE_RTAI_EV_FIFO_PUT
 5

	)

406 
	#TRACE_RTAI_EV_FIFO_GET
 6

	)

407 
	#TRACE_RTAI_EV_FIFO_CREATE_HANDLER
 7

	)

408 
	#TRACE_RTAI_EV_FIFO_OPEN
 8

	)

409 
	#TRACE_RTAI_EV_FIFO_RELEASE
 9

	)

410 
	#TRACE_RTAI_EV_FIFO_READ
 10

	)

411 
	#TRACE_RTAI_EV_FIFO_WRITE
 11

	)

412 
	#TRACE_RTAI_EV_FIFO_READ_TIMED
 12

	)

413 
	#TRACE_RTAI_EV_FIFO_WRITE_TIMED
 13

	)

414 
	#TRACE_RTAI_EV_FIFO_READ_ALLATONCE
 14

	)

415 
	#TRACE_RTAI_EV_FIFO_LLSEEK
 15

	)

416 
	#TRACE_RTAI_EV_FIFO_FASYNC
 16

	)

417 
	#TRACE_RTAI_EV_FIFO_IOCTL
 17

	)

418 
	#TRACE_RTAI_EV_FIFO_POLL
 18

	)

419 
	#TRACE_RTAI_EV_FIFO_SUSPEND_TIMED
 19

	)

420 
	#TRACE_RTAI_EV_FIFO_SET_ASYNC_SIG
 20

	)

421 
	#TRACE_RTAI_EV_FIFO_SEM_INIT
 21

	)

422 
	#TRACE_RTAI_EV_FIFO_SEM_POST
 22

	)

423 
	#TRACE_RTAI_EV_FIFO_SEM_WAIT
 23

	)

424 
	#TRACE_RTAI_EV_FIFO_SEM_TRY_WAIT
 24

	)

425 
	#TRACE_RTAI_EV_FIFO_SEM_TIMED_WAIT
 25

	)

426 
	#TRACE_RTAI_EV_FIFO_SEM_DESTROY
 26

	)

427 
	s_åa˚_πai_fifo


429 
uöt8_t
 
	mevít_sub_id
;

430 
uöt32_t
 
	mevít_d©a1
;

431 
uöt32_t
 
	mevít_d©a2
;

432 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_fifo
;

433 
	#TRACE_RTAI_FIFO
(
ID
, 
DATA1
, 
DATA2
) \

436 
åa˚_πai_fifo
 
fifo_evít
; \

437 
fifo_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

438 
fifo_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

439 
fifo_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

440 
	`π_åa˚_evít
(
TRACE_RTAI_EV_FIFO
, &
fifo_evít
); \

441 } 0)

	)

444 
	#TRACE_RTAI_EV_SHM_MALLOC
 1

	)

445 
	#TRACE_RTAI_EV_SHM_KMALLOC
 2

	)

446 
	#TRACE_RTAI_EV_SHM_GET_SIZE
 3

	)

447 
	#TRACE_RTAI_EV_SHM_FREE
 4

	)

448 
	#TRACE_RTAI_EV_SHM_KFREE
 5

	)

449 
	s_åa˚_πai_shm


451 
uöt8_t
 
	mevít_sub_id
;

452 
uöt32_t
 
	mevít_d©a1
;

453 
uöt32_t
 
	mevít_d©a2
;

454 
uöt32_t
 
	mevít_d©a3
;

455 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_shm
;

456 
	#TRACE_RTAI_SHM
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

459 
åa˚_πai_shm
 
shm_evít
; \

460 
shm_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

461 
shm_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

462 
shm_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

463 
shm_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

464 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SHM
, &
shm_evít
); \

465 } 0)

	)

468 
	#TRACE_RTAI_EV_POSIX_MQ_OPEN
 1

	)

469 
	#TRACE_RTAI_EV_POSIX_MQ_CLOSE
 2

	)

470 
	#TRACE_RTAI_EV_POSIX_MQ_SEND
 3

	)

471 
	#TRACE_RTAI_EV_POSIX_MQ_RECV
 4

	)

472 
	#TRACE_RTAI_EV_POSIX_MQ_GET_ATTR
 5

	)

473 
	#TRACE_RTAI_EV_POSIX_MQ_SET_ATTR
 6

	)

474 
	#TRACE_RTAI_EV_POSIX_MQ_NOTIFY
 7

	)

475 
	#TRACE_RTAI_EV_POSIX_MQ_UNLINK
 8

	)

476 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CREATE
 9

	)

477 
	#TRACE_RTAI_EV_POSIX_PTHREAD_EXIT
 10

	)

478 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SELF
 11

	)

479 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_INIT
 12

	)

480 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_DESTROY
 13

	)

481 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETDETACHSTATE
 14

	)

482 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETDETACHSTATE
 15

	)

483 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCHEDPARAM
 16

	)

484 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCHEDPARAM
 17

	)

485 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCHEDPOLICY
 18

	)

486 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCHEDPOLICY
 19

	)

487 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETINHERITSCHED
 20

	)

488 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETINHERITSCHED
 21

	)

489 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCOPE
 22

	)

490 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCOPE
 23

	)

491 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SCHED_YIELD
 24

	)

492 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CLOCK_GETTIME
 25

	)

493 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_INIT
 26

	)

494 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_DESTROY
 27

	)

495 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_INIT
 28

	)

496 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_DESTROY
 29

	)

497 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_SETKIND_NP
 30

	)

498 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_GETKIND_NP
 31

	)

499 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SETSCHEDPARAM
 32

	)

500 
	#TRACE_RTAI_EV_POSIX_PTHREAD_GETSCHEDPARAM
 33

	)

501 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_TRY_LOCK
 34

	)

502 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_LOCK
 35

	)

503 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_UNLOCK
 36

	)

504 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_INIT
 37

	)

505 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_DESTROY
 38

	)

506 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CONDATTR_INIT
 39

	)

507 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CONDATTR_DESTROY
 40

	)

508 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_WAIT
 41

	)

509 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_TIMEDWAIT
 42

	)

510 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_SIGNAL
 43

	)

511 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_BROADCAST
 44

	)

512 
	s_åa˚_πai_posix


514 
uöt8_t
 
	mevít_sub_id
;

515 
uöt32_t
 
	mevít_d©a1
;

516 
uöt32_t
 
	mevít_d©a2
;

517 
uöt32_t
 
	mevít_d©a3
;

518 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_posix
;

519 
	#TRACE_RTAI_POSIX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

522 
åa˚_πai_posix
 
posix_evít
; \

523 
posix_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

524 
posix_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

525 
posix_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

526 
posix_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

527 
	`π_åa˚_evít
(
TRACE_RTAI_EV_POSIX
, &
posix_evít
); \

528 } 0)

	)

531 
	#TRACE_RTAI_EV_LXRT_RTAI_SYSCALL_ENTRY
 1

	)

532 
	#TRACE_RTAI_EV_LXRT_RTAI_SYSCALL_EXIT
 2

	)

533 
	#TRACE_RTAI_EV_LXCHANGE
 3

	)

534 
	#TRACE_RTAI_EV_LXRT_STEAL_TASK
 4

	)

535 
	#TRACE_RTAI_EV_LXRT_GIVE_BACK_TASK
 5

	)

536 
	#TRACE_RTAI_EV_LXRT_SUSPEND
 6

	)

537 
	#TRACE_RTAI_EV_LXRT_RESUME
 7

	)

538 
	#TRACE_RTAI_EV_LXRT_HANDLE
 8

	)

539 
	s_åa˚_πai_lxπ


541 
uöt8_t
 
	mevít_sub_id
;

542 
uöt32_t
 
	mevít_d©a1
;

543 
uöt32_t
 
	mevít_d©a2
;

544 
uöt32_t
 
	mevít_d©a3
;

545 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_lxπ
;

546 
	#TRACE_RTAI_LXRT
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

549 
åa˚_πai_lxπ
 
lxπ_evít
; \

550 
lxπ_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

551 
lxπ_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

552 
lxπ_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

553 
lxπ_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

554 
	`π_åa˚_evít
(
TRACE_RTAI_EV_LXRT
, &
lxπ_evít
); \

555 } 0)

	)

558 
	#TRACE_RTAI_EV_LXRTI_NAME_ATTACH
 1

	)

559 
	#TRACE_RTAI_EV_LXRTI_NAME_LOCATE
 2

	)

560 
	#TRACE_RTAI_EV_LXRTI_NAME_DETACH
 3

	)

561 
	#TRACE_RTAI_EV_LXRTI_SEND
 4

	)

562 
	#TRACE_RTAI_EV_LXRTI_RECV
 5

	)

563 
	#TRACE_RTAI_EV_LXRTI_CRECV
 6

	)

564 
	#TRACE_RTAI_EV_LXRTI_REPLY
 7

	)

565 
	#TRACE_RTAI_EV_LXRTI_PROXY_ATTACH
 8

	)

566 
	#TRACE_RTAI_EV_LXRTI_PROXY_DETACH
 9

	)

567 
	#TRACE_RTAI_EV_LXRTI_TRIGGER
 10

	)

568 
	s_åa˚_πai_lxπi


570 
uöt8_t
 
	mevít_sub_id
;

571 
uöt32_t
 
	mevít_d©a1
;

572 
uöt32_t
 
	mevít_d©a2
;

573 
uöt64_t
 
	mevít_d©a3
;

574 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_lxπi
;

575 
	#TRACE_RTAI_LXRTI
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

578 
åa˚_πai_lxπi
 
lxπi_evít
; \

579 
lxπi_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

580 
lxπi_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

581 
lxπi_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

582 
lxπi_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

583 
	`π_åa˚_evít
(
TRACE_RTAI_EV_LXRTI
, &
lxπi_evít
); \

584 } 0)

	)

587 
	#RT_TRACE_EVENT
(
ID
, 
DATA
)

	)

588 
	#TRACE_RTAI_MOUNT
()

	)

589 
	#TRACE_RTAI_UMOUNT
()

	)

590 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
,
X
)

	)

591 
	#TRACE_RTAI_GLOBAL_IRQ_EXIT
()

	)

592 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
)

	)

593 
	#TRACE_RTAI_OWN_IRQ_EXIT
()

	)

594 
	#TRACE_RTAI_TRAP_ENTRY
(
ID
,
ADDR
)

	)

595 
	#TRACE_RTAI_TRAP_EXIT
()

	)

596 #i‡
deföed
(
CONFIG_PPC
Ë&& deföed(
CONFIG_ARM
) && (CONFIG_PPC || CONFIG_ARM)

597 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
,
KERNEL
)

	)

599 
	#TRACE_RTAI_SRQ_ENTRY
(
a
)

	)

601 
	#TRACE_RTAI_SRQ_EXIT
()

	)

602 
	#TRACE_RTAI_SWITCHTO_LINUX
(
ID
)

	)

603 
	#TRACE_RTAI_SWITCHTO_RT
(
ID
)

	)

604 
	#TRACE_RTAI_SCHED_CHANGE
(
OUT
, 
IN
, 
OUT_STATE
)

	)

605 
	#TRACE_RTAI_TASK
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

606 
	#TRACE_RTAI_TIMER
(
ID
, 
DATA1
, 
DATA2
)

	)

607 
	#TRACE_RTAI_SEM
(
ID
, 
DATA1
, 
DATA2
)

	)

608 
	#TRACE_RTAI_MSG
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

609 
	#TRACE_RTAI_RPC
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

610 
	#TRACE_RTAI_MBX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

611 
	#TRACE_RTAI_FIFO
(
ID
, 
DATA1
, 
DATA2
)

	)

612 
	#TRACE_RTAI_SHM
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

613 
	#TRACE_RTAI_POSIX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

614 
	#TRACE_RTAI_LXRT
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

615 
	#TRACE_RTAI_LXRTI
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

	@/usr/src/rtai/base/include/rtai_types.h

19 #i‚de‡
_RTAI_TYPES_H


20 
	#_RTAI_TYPES_H


	)

22 
	~<πai_c⁄fig.h
>

23 
	~<πai_wøµîs.h
>

25 
	#PRIO_Q
 0

	)

26 
	#FIFO_Q
 4

	)

27 
	#RES_Q
 3

	)

29 
	#BIN_SEM
 1

	)

30 
	#CNT_SEM
 2

	)

31 
	#RES_SEM
 3

	)

33 
	#RESEM_RECURS
 1

	)

34 
	#RESEM_BINSEM
 0

	)

35 
	#RESEM_CHEKWT
 -1

	)

37 
	#RT_SCHED_FIFO
 0

	)

38 
	#RT_SCHED_RR
 1

	)

40 
	g±_ªgs
;

42 
	gπ_èsk_°ru˘
;

44 
	tRTIME
;

46 (*
	tRT_TRAP_HANDLER
)(, , 
	t±_ªgs
 *,*);

48 
	sπ_times
 {

49 
löux_tick
;

50 
≥riodic_tick
;

51 
RTIME
 
tick_time
;

52 
RTIME
 
löux_time
;

53 
RTIME
 
öå_time
;

	@/usr/src/rtai/base/include/rtai_usi.h

19 #i‚de‡
_RTAI_USI_H


20 
	#_RTAI_USI_H


	)

22 #i‚de‡
__KERNEL__


24 
	~<asm/πai_usi.h
>

25 
	~<asm/πai_§q.h
>

27 #ifde‡
__˝lu•lus


36 
ölöe
 
	$π_°¨tup_úq
(
úq
)

38  ()
	`πai_§q
(
USI_SRQ_MASK
 | 
_STARTUP_IRQ
, 
úq
);

39 
	}
}

42 
	#π_shutdown_úq
(
úq
) \

43 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_SHUTDOWN_IRQ
, 
úq
); } 0)

	)

45 
	#π_íabÀ_úq
(
úq
) \

46 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ENABLE_IRQ
, 
úq
); } 0)

	)

48 
	#π_dißbÀ_úq
(
úq
) \

49 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_DISABLE_IRQ
, 
úq
); } 0)

	)

51 
	#π_mask_™d_ack_úq
(
úq
) \

52 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_MASK_AND_ACK_IRQ
, 
úq
); } 0)

	)

54 
	#π_ack_úq
(
úq
) \

55 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ACK_IRQ
, 
úq
); } 0)

	)

57 
	#π_unmask_úq
(
úq
) \

58 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_UNMASK_IRQ
, 
úq
); } 0)

	)

60 
	#πai_˛i
() \

61 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_DISINT
, 0); } 0)

	)

63 
	#πai_°i
() \

64 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ENINT
, 0); } 0)

	)

66 
	#πai_ßve_Êags_™d_˛i
(
Êags
) \

67 dÿ{ 
Êags
 = ()
	`πai_§q
(
USI_SRQ_MASK
 | 
_SAVE_FLAGS_CLI
, 0); } 0)

	)

69 
	#πai_ª°‹e_Êags
(
Êags
) \

70 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_RESTORE_FLAGS
, 
Êags
); } 0)

	)

72 #ifde‡
CONFIG_SMP


74 
	s__usi_xchg_dummy
 { 
a
[100]; };

75 
	#__usi_xg
(
x
Ë((
__usi_xchg_dummy
 *)(x))

	)

77 
ölöe
 
usi_©omic_cmpxchg
(vﬁ©ûê*
±r
, 
o
, 
n
)

79 
¥ev
;

80 
__asm__
 
__vﬁ©ûe__
 ("lock; cmpxchgl %1, %2"

81 : "˜" (
¥ev
)

82 : "q"(
n
), "m" (*
__usi_xg
(
±r
)), "0" (
o
)

84  
¥ev
;

87 
	#π_•ö_lock
(
lock
) \

88 dÿ{ 
	`usi_©omic_cmpxchg
(
lock
, 0, 1)); } 0)

	)

90 
	#π_•ö_u∆ock
(
lock
) \

91 dÿ{ *(vﬁ©ûê*)
lock
 = 0; } 0)

	)

94 
	#π_•ö_lock
(
lock
);

	)

96 
	#π_•ö_u∆ock
(
lock
);

	)

99 
	#π_•ö_lock_öô
(
lock
) \

100 dÿ{ *(vﬁ©ûê*)
lock
 = 0; } 0)

	)

102 
	#π_•ö_lock_úq
(
lock
) \

103 dÿ{ 
	`πai_˛i
(); 
	`π_•ö_lock
(
lock
); } 0)

	)

105 
	#π_•ö_u∆ock_úq
(
lock
) \

106 dÿ{ 
	`π_•ö_u∆ock
(
lock
); 
	`πai_°i
(); } 0)

	)

108 
ölöe
 
π_•ö_lock_úqßve
(*
lock
)

110 
Êags
;

111 
πai_ßve_Êags_™d_˛i
(
Êags
);

112 
π_•ö_lock
(
lock
);

113  
Êags
;

116 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
) \

117 dÿ{ 
	`π_•ö_u∆ock
(
lock
); 
	`πai_ª°‹e_Êags
(
Êags
); } 0)

	)

119 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_version.h

19 
	~<πai_c⁄fig.h
>

21 
	#RTAI_RELEASE
 
PACKAGE_VERSION


	)

22 
	#RTAI_MANGLE_VERSION
(
a
,
b
,
c
Ë((◊Ë* 65536Ë+ ((bË* 256Ë+ (c))

	)

23 
	#RTAI_VERSION_CODE
 
	`RTAI_MANGLE_VERSION
(
CONFIG_RTAI_VERSION_MAJOR
,
CONFIG_RTAI_VERSION_MINOR
,
CONFIG_RTAI_REVISION_LEVEL
)

	)

	@/usr/src/rtai/base/include/rtai_wd.h

22 #i‚de‡
_RTAI_WD_H


23 
	#_RTAI_WD_H


	)

25 
	~<πai_ty≥s.h
>

28 
	#NSECS_PER_SEC
 1000000000

	)

31 
	#WDLOG
(
fmt
, 
¨gs
...Ë
	`π_¥ötk
("RTAI[w©chdog]: " fmt, ##¨gs)

	)

34 
	ew©chdog_pﬁicy
 {

35 
	mWD_NOTHING
,

36 
	mWD_RESYNC
,

37 
	mWD_DEBUG
,

38 
	mWD_STRETCH
,

39 
	mWD_SLIP
,

40 
	mWD_SUSPEND
,

41 
	mWD_KILL


42 } 
	twd_pﬁicy
;

45 
	sbad_π_èsk
 {

46 
RT_TASK
 *
	mèsk
;

47 
	mö_u£
;

48 
	m¶ùpög
;

49 
	mcou¡down
;

50 
	mcou¡
;

51 
	mvÆid
;

52 
	mf‹˚d
;

53 
RTIME
 
	m‹ig_≥riod
;

54 
wd_pﬁicy
 
	mpﬁicy
;

55 
bad_π_èsk
 *
	m√xt
;

56 } 
	tBAD_RT_TASK
;

58 
	#WD_INDX
 2

	)

60 
	#WD_SET_GRACE
 1

	)

61 
	#WD_SET_GRACEDIV
 2

	)

62 
	#WD_SET_SAFETY
 3

	)

63 
	#WD_SET_POLICY
 4

	)

64 
	#WD_SET_SLIP
 5

	)

65 
	#WD_SET_STRETCH
 6

	)

66 
	#WD_SET_LIMIT
 7

	)

68 #ifde‡
__KERNEL__


70 #ifde‡
__˝lu•lus


74 
__πai_wd_öô
();

76 
__πai_wd_exô
();

79 
RTAI_SYSCALL_MODE
 
π_wd£t_gø˚
(
√w_vÆue
);

81 
RTAI_SYSCALL_MODE
 
π_wd£t_gø˚div
(
√w_vÆue
);

83 
RTAI_SYSCALL_MODE
 
wd_pﬁicy
 
π_wd£t_pﬁicy
(wd_pﬁicy 
√w_vÆue
);

85 
RTAI_SYSCALL_MODE
 
π_wd£t_¶ù
(
√w_vÆue
);

87 
RTAI_SYSCALL_MODE
 
π_wd£t_°ªtch
(
√w_vÆue
);

89 
RTAI_SYSCALL_MODE
 
π_wd£t_limô
(
√w_vÆue
);

91 
RTAI_SYSCALL_MODE
 
π_wd£t_ß„ty
(
√w_vÆue
);

93 #ifde‡
__˝lu•lus


99 #ifde‡
__˝lu•lus


104 
RTAI_PROTO
(, 
π_wd£t_gø˚
, (
√w_vÆue
))

106 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

107  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_GRACE
, &
¨g
).
i
[
LOW
];

110 
RTAI_PROTO
(, 
π_wd£t_gø˚div
, (
√w_vÆue
))

112 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

113  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_GRACEDIV
, &
¨g
).
i
[
LOW
];

116 
RTAI_PROTO
(
wd_pﬁicy
, 
π_wd£t_pﬁicy
, (wd_pﬁicy 
√w_vÆue
))

118 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

119  (
wd_pﬁicy
)
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_POLICY
, &
¨g
).
i
[
LOW
];

122 
RTAI_PROTO
(, 
π_wd£t_¶ù
, (
√w_vÆue
))

124 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

125  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_SLIP
, &
¨g
).
i
[
LOW
];

128 
RTAI_PROTO
(, 
π_wd£t_°ªtch
, (
√w_vÆue
))

130 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

131  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_STRETCH
, &
¨g
).
i
[
LOW
];

134 
RTAI_PROTO
(, 
π_wd£t_limô
, (
√w_vÆue
))

136 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

137  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_LIMIT
, &
¨g
).
i
[
LOW
];

140 
RTAI_PROTO
(, 
π_wd£t_ß„ty
, (
√w_vÆue
))

142 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

143  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_SAFETY
, &
¨g
).
i
[
LOW
];

146 #ifde‡
__˝lu•lus


	@/usr/src/rtai/base/include/rtai_wrappers.h

19 #i‚de‡
_RTAI_WRAPPERS_H


20 
	#_RTAI_WRAPPERS_H


	)

22 #ifde‡
__KERNEL__


24 
	~<löux/vîsi⁄.h
>

25 #i‚de‡
__˝lu•lus


26 
	~<löux/moduÀ.h
>

29 
	~<löux/moduÀ∑øm.h
>

31 
	#RTAI_MODULE_PARM
(
«me
, 
ty≥
) \

32 
	`moduÀ_∑øm
(
«me
, 
ty≥
, 0444)

	)

34 #i‚de‡
DEFINE_SPINLOCK


35 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
SPIN_LOCK_UNLOCKED


	)

38 #i‚de‡
DECLARE_MUTEX_LOCKED


39 #i‚de‡
__DECLARE_SEMAPHORE_GENERIC


40 
	#DECLARE_MUTEX_LOCKED
(
«me
) \

41 
£m≠h‹e
 
«me
 = 
	`__SEMAPHORE_INITIALIZER
“ame, 0)

	)

43 
	#DECLARE_MUTEX_LOCKED
(
«me
Ë
	`__DECLARE_SEMAPHORE_GENERIC
“ame,0)

	)

47 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

48 
	#IRQF_SHARED
 
SA_SHIRQ


	)

51 #i‚de‡
˝u_⁄löe_m≠


52 
	#˝u_⁄löe_m≠
 (*(
˝umask_t
 *)
˝u_⁄löe_mask
)

	)

55 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

57 
	~<löux/bô›s.h
>

59 
	#CONFIG_MMU
 1

	)

61 
	t˛ockid_t
;

63 #i‚de‡
TIMER_ABSTIME


64 
	#TIMER_ABSTIME
 0x01

	)

67 
	ttimî_t
;

69 #i‚de‡
__dïªˇãd


70 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

71 ({ c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

72 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

75 #i‚de‡
__dïªˇãd


76 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

79 
	#RTAI_MODULE_PARM_ARRAY
(
«me
, 
ty≥
, 
addr
, 
size
) \

80 
ölöe
 *
__check_exi°í˚_
##
	`«me
(Ë{  &
«me
; } \

81 
	`MODULE_PARM
(
«me
, "1-" 
	`__MODULE_STRING
(
size
Ë
_MODULE_PARM_STRING_
 ## 
ty≥
);

	)

82 
	#_MODULE_PARM_STRING_ch¨p
 "s"

	)

84 
	#PID_MAX_LIMIT
 
PID_MAX


	)

85 
	#num_⁄löe_˝us
(Ë
smp_num_˝us


	)

86 
	#mm_ªm≠_∑ge_ønge
(
vma
,
‰om
,
to
,
size
,
¥Ÿ
Ë
	`ªm≠_∑ge_ønge
(‰om,to,size,¥Ÿ)

	)

87 
	#__u£r


	)

89 
	#£t_tsk_√ed_ªsched
(
t
) do { \

90 (
t
)->
√ed_ªsched
 = 1; \

91 } 0)

	)

93 
	#˛ór_tsk_√ed_ªsched
(
t
) do { \

94 (
t
)->
√ed_ªsched
 = 0; \

95 } 0)

	)

97 
	#£t_√ed_ªsched
(Ë
	`£t_tsk_√ed_ªsched
(
cuºít
)

	)

99 
	#LIST_POISON1
 
NULL


	)

100 
	#LIST_POISON2
 
NULL


	)

102 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,23Ë|| 
__˝lu•lus


103 
	túqªtu∫_t
;

106 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,28)

107 
	#m¶ìp
(
dñay
) \

109 
	`£t_cuºít_°©e
(
TASK_RTAISRVSLEEP
); \

110 
	`scheduÀ_timeout
(((
dñay
)*
HZ
)/1000); \

111 } 0)

	)

114 
	#gë_tsk_addr_limô
(
t
Ë(—)->
addr_limô
.
£g
)

	)

116 
	#èsk_˝u
(
t
Ë(—)->
¥o˚ss‹
)

	)

118 
	#£lf_d´m⁄ize
(
«me
) do { \

119 
	`°r˝y
(
cuºít
->
comm
,"gatekeeper"); \

120 
	`d´m⁄ize
(); \

121 } 0)

	)

123 
	#gë_thªad_±r
(
t
Ë—)

	)

125 
	#RTAI_LINUX_IRQ_HANDLED


	)

127 
ölöe
 
	$hweight_l⁄g
(
w
)

129  (
w
Ë=4 ? 
	`hweight32
(w) : hweight32(w);

130 
	}
}

134 #i‚de‡
öô_MUTEX_LOCKED


135 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

136 
	#öô_MUTEX_LOCKED
(
£m
Ë
	`£ma_öô
(£m, 0)

	)

140 
	#RTAI_MODULE_PARM_ARRAY
(
«me
, 
ty≥
, 
addr
, 
size
) \

141 
	`moduÀ_∑øm_¨øy
(
«me
, 
ty≥
, 
addr
, 0400);

	)

145 #ifde‡
CONFIG_SYSFS


146 
	~<löux/devi˚.h
>

147 #i‡ 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,25)

148 
˛ass
 
	t˛ass_t
;

150 #i‡ 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

151 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`devi˚_¸óã
(˛s, 
NULL
, devt, NULL, fmt, ##¨g)

	)

153 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`devi˚_¸óã
(˛s, 
NULL
, devt, fmt, ##¨g)

	)

156 
	#˛ass_devi˚_de°roy
(
a
, 
b
Ë
	`devi˚_de°roy
◊, b)

	)

158 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,15)

159 
˛ass
 
	t˛ass_t
;

160 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`˛ass_devi˚_¸óã
(˛s, 
NULL
, devt, devi˚, fmt, ##árg)

	)

162 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,13)

163 
˛ass
 
	t˛ass_t
;

164 
	#CLASS_DEVICE_CREATE
 
˛ass_devi˚_¸óã


	)

166 
˛ass_sim∂e
 
	t˛ass_t
;

167 
	#CLASS_DEVICE_CREATE
 
˛ass_sim∂e_devi˚_add


	)

168 
	#˛ass_¸óã
 
˛ass_sim∂e_¸óã


	)

169 
	#˛ass_de°roy
 
˛ass_sim∂e_de°roy


	)

170 
	#˛ass_devi˚_de°roy
(
a
, 
b
Ë
	`˛ass_sim∂e_devi˚_ªmove
(b)

	)

176 
	#mm_ªm≠_∑ge_ønge
(
vma
,
‰om
,
to
,
size
,
¥Ÿ
Ë
	`ªm≠_∑ge_ønge
(vma,‰om,to,size,¥Ÿ)

	)

178 
	#gë_tsk_addr_limô
(
t
Ë(—)->
thªad_öfo
->
addr_limô
.
£g
)

	)

180 
	#£lf_d´m⁄ize
(
«me
Ë
	`d´m⁄ize
“ame)

	)

182 
	#gë_thªad_±r
(
t
Ë(—)->
thªad_öfo
)

	)

184 
	#RTAI_LINUX_IRQ_HANDLED
 
IRQ_HANDLED


	)

186 #i‚de‡
MODULE_LICENSE


187 
	#MODULE_LICENSE
(
s
Ë

	)

192 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,7)

193 
	#CPUMASK_T
(
«me
Ë“ame)

	)

194 
	#CPUMASK
(
«me
Ë“ame)

	)

196 
	#CPUMASK_T
(
«me
Ë((
˝umask_t
){ {Çamê} })

	)

197 
	#CPUMASK
(
«me
Ë“ame.
bôs
[0])

	)

200 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

202 
	~<löux/pid.h
>

204 
	#föd_èsk_by_pid
(
ƒ
) \

205 
	`föd_èsk_by_pid_ns
(
ƒ
, &
öô_pid_ns
)

	)

206 
	#kûl_¥oc
(
pid
, 
sig
, 
¥iv
) \

207 
	`kûl_¥oc_öfo
(
sig
, (
¥iv
Ë? 
SEND_SIG_PRIV
 : 
SEND_SIG_NOINFO
, 
pid
)

	)

211 #i‚de‡
CONFIG_SYSFS


212 * 
	t˛ass_t
;

213 
	#˛ass_¸óã
(
a
,
b
Ë((*)1)

	)

214 
	#CLASS_DEVICE_CREATE
(
a
, 
b
, 
c
, 
d
, ...Ë((*)1)

	)

215 
	#˛ass_devi˚_de°roy
(
a
, 
b
)

	)

216 
	#˛ass_de°roy
(
a
)

	)

	@/usr/src/rtai/base/ipc/bits/bits.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/î∫o.h
>

22 
	~<löux/vîsi⁄.h
>

23 
	~<asm/uac˚ss.h
>

25 
	~<πai_schedc‹e.h
>

26 
	~<πai_sched.h
>

27 
	~<πai_lxπ.h
>

28 
	~<πai_bôs.h
>

30 
MODULE_LICENSE
("GPL");

32 
	#MASK0
(
x
Ë((*)&(x))[0]

	)

33 
	#MASK1
(
x
Ë((*)&(x))[1]

	)

35 
	$Æl_£t
(
BITS
 *
bôs
, 
mask
)

37  (
bôs
->
mask
 & mask) == mask;

38 
	}
}

40 
	$™y_£t
(
BITS
 *
bôs
, 
mask
)

42  (
bôs
->
mask
 & mask);

43 
	}
}

45 
	$Æl_˛r
(
BITS
 *
bôs
, 
mask
)

47  (~
bôs
->
mask
 & mask) == mask;

48 
	}
}

50 
	$™y_˛r
(
BITS
 *
bôs
, 
mask
)

52  (~
bôs
->
mask
 & mask);

53 
	}
}

55 
	$Æl_£t_™d_™y_£t
(
BITS
 *
bôs
, 
masks
)

57  (
bôs
->
mask
 & 
	`MASK1
(
masks
)Ë&& (bôs->mask & 
	`MASK0
(masks)) == MASK0(masks);

58 
	}
}

60 
	$Æl_£t_™d_Æl_˛r
(
BITS
 *
bôs
, 
masks
)

62  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë=MASK0(masksË&& (~bôs->mask & 
	`MASK1
(masks)) == MASK1(masks);

63 
	}
}

65 
	$Æl_£t_™d_™y_˛r
(
BITS
 *
bôs
, 
masks
)

67  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë=MASK0(masksË&& (~bôs->mask & 
	`MASK1
(masks));

68 
	}
}

70 
	$™y_£t_™d_Æl_˛r
(
BITS
 *
bôs
, 
masks
)

72  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë&& (~bôs->mask & 
	`MASK1
(masks)) == MASK1(masks);

73 
	}
}

75 
	$™y_£t_™d_™y_˛r
(
BITS
 *
bôs
, 
masks
)

77  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë&& (~bôs->mask & 
	`MASK1
(masks));

78 
	}
}

80 
	$Æl_˛r_™d_™y_˛r
(
BITS
 *
bôs
, 
masks
)

82  (~
bôs
->
mask
 & 
	`MASK1
(
masks
)Ë&& (~bôs->mask & 
	`MASK0
(masks)) == MASK0(masks);

83 
	}
}

85 
	$Æl_£t_‹_™y_£t
(
BITS
 *
bôs
, 
masks
)

87  (
bôs
->
mask
 & 
	`MASK1
(
masks
)Ë|| (bôs->mask & 
	`MASK0
(masks)) == MASK0(masks);

88 
	}
}

90 
	$Æl_£t_‹_Æl_˛r
(
BITS
 *
bôs
, 
masks
)

92  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë=MASK0(masksË|| (~bôs->mask & 
	`MASK1
(masks)) == MASK1(masks);

93 
	}
}

95 
	$Æl_£t_‹_™y_˛r
(
BITS
 *
bôs
, 
masks
)

97  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë=MASK0(masksË|| (~bôs->mask & 
	`MASK1
(masks));

98 
	}
}

100 
	$™y_£t_‹_Æl_˛r
(
BITS
 *
bôs
, 
masks
)

102  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë|| (~bôs->mask & 
	`MASK1
(masks)) == MASK1(masks);

103 
	}
}

105 
	$™y_£t_‹_™y_˛r
(
BITS
 *
bôs
, 
masks
)

107  (
bôs
->
mask
 & 
	`MASK0
(
masks
)Ë|| (~bôs->mask & 
	`MASK1
(masks));

108 
	}
}

110 
	$Æl_˛r_‹_™y_˛r
(
BITS
 *
bôs
, 
masks
)

112  (~
bôs
->
mask
 & 
	`MASK1
(
masks
)Ë|| (~bôs->mask & 
	`MASK0
(masks)) == MASK0(masks);

113 
	}
}

115 
	$£t_bôs_mask
(
BITS
 *
bôs
, 
mask
)

117 
bôs
->
mask
 |= mask;

118 
	}
}

120 
	$˛r_bôs_mask
(
BITS
 *
bôs
, 
mask
)

122 
bôs
->
mask
 &= ~mask;

123 
	}
}

125 
	$£t_˛r_bôs_mask
(
BITS
 *
bôs
, 
masks
)

127 
bôs
->
mask
 = (bôs->mask | 
	`MASK0
(
masks
)Ë& ~
	`MASK1
(masks);

128 
	}
}

130 
	$n›_fun
(
BITS
 *
bôs
, 
mask
)

132 
	}
}

134 (*
ã°_fun
[])(
BITS
 *, ) = {

135 
Æl_£t
, 
™y_£t
, 
Æl_˛r
, 
™y_˛r
,

136 
Æl_£t_™d_™y_£t
, 
Æl_£t_™d_Æl_˛r
, 
Æl_£t_™d_™y_˛r
,

137 
™y_£t_™d_Æl_˛r
, 
™y_£t_™d_™y_˛r
,

138 
Æl_˛r_™d_™y_˛r
,

139 
Æl_£t_‹_™y_£t
, 
Æl_£t_‹_Æl_˛r
, 
Æl_£t_‹_™y_˛r
,

140 
™y_£t_‹_Æl_˛r
, 
™y_£t_‹_™y_˛r
,

141 
Æl_˛r_‹_™y_˛r


142 
	}
};

144 (*
exec_fun
[])(
BITS
 *, ) = {

145 
£t_bôs_mask
, 
˛r_bôs_mask
,

146 
£t_˛r_bôs_mask
,

147 
n›_fun


148 
	}
};

150 
	#CHECK_BITS_MAGIC
(
bôs
) \

151 dÿ{ i‡(
bôs
->
magic
 !
RT_BITS_MAGIC
Ë 
RTE_OBJINV
; } 0)

	)

153 
	$π_bôs_öô
(
BITS
 *
bôs
, 
mask
)

155 
bôs
->
magic
 = 
RT_BITS_MAGIC
;

156 
bôs
->
queue
.
¥ev
 = &(bits->queue);

157 
bôs
->
queue
.
√xt
 = &(bits->queue);

158 
bôs
->
queue
.
èsk
 = 0;

159 
bôs
->
mask
 = mask;

160 
	}
}

162 
	$π_bôs_dñëe
(
BITS
 *
bôs
)

164 
Êags
, 
schedm≠
;

165 
RT_TASK
 *
èsk
;

166 
QUEUE
 *
q
;

168 
	`CHECK_BITS_MAGIC
(
bôs
);

170 
schedm≠
 = 0;

171 
q
 = &
bôs
->
queue
;

172 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

173 
bôs
->
magic
 = 0;

174 (
q
 = q->
√xt
Ë!&
bôs
->
queue
 && (
èsk
 = q->task)) {

175 
	`ªm_timed_èsk
(
èsk
);

176 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

177 
èsk
->
blocked_⁄
 = 
RTP_OBJREM
;

178 
	`íq_ªady_èsk
(
èsk
);

179 #ifde‡
CONFIG_SMP


180 
	`£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

184 
	`RT_SCHEDULE_MAP
(
schedm≠
);

185 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

187 
	}
}

189 
	#TEST_BUF
(
x
, 
y
Ëdÿ{ (x)->
ªtvÆ
 = ()(y); } 0)

	)

190 
	#TEST_FUN
(
x
Ë((*)(()(x)->
ªtvÆ
))[0]

	)

191 
	#TEST_MASK
(
x
Ë((*)(()(x)->
ªtvÆ
))[1]

	)

193 
RTAI_SYSCALL_MODE
 
	$π_gë_bôs
(
BITS
 *
bôs
)

195  
bôs
->
mask
;

196 
	}
}

198 
RTAI_SYSCALL_MODE
 
	$π_bôs_ª£t
(
BITS
 *
bôs
, 
mask
)

200 
Êags
, 
schedm≠
, 
ﬁdmask
;

201 
RT_TASK
 *
èsk
;

202 
QUEUE
 *
q
;

204 
	`CHECK_BITS_MAGIC
(
bôs
);

206 
schedm≠
 = 0;

207 
q
 = &
bôs
->
queue
;

208 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

209 
ﬁdmask
 = 
bôs
->
mask
;

210 
bôs
->
mask
 = mask;

211 (
q
 = q->
√xt
Ë!&
bôs
->
queue
) {

212 
	`dequeue_blocked
(
èsk
 = 
q
->task);

213 
	`ªm_timed_èsk
(
èsk
);

214 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

215 
	`íq_ªady_èsk
(
èsk
);

216 #ifde‡
CONFIG_SMP


217 
	`£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

221 
bôs
->
queue
.
¥ev
 = bôs->queue.
√xt
 = &bits->queue;

222 
	`RT_SCHEDULE_MAP
(
schedm≠
);

223 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

224  
ﬁdmask
;

225 
	}
}

227 
RTAI_SYSCALL_MODE
 
	$π_bôs_sig«l
(
BITS
 *
bôs
, 
£tfun
, 
masks
)

229 
Êags
, 
schedm≠
;

230 
RT_TASK
 *
èsk
;

231 
QUEUE
 *
q
;

233 
	`CHECK_BITS_MAGIC
(
bôs
);

235 
schedm≠
 = 0;

236 
q
 = &
bôs
->
queue
;

237 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

238 
exec_fun
[
£tfun
](
bôs
, 
masks
);

239 
masks
 = 
bôs
->
mask
;

240 (
q
 = q->
√xt
Ë!&
bôs
->
queue
) {

241 
èsk
 = 
q
->task;

242 i‡(
ã°_fun
[
	`TEST_FUN
(
èsk
)](
bôs
, 
	`TEST_MASK
(task))) {

243 
	`dequeue_blocked
(
èsk
);

244 
	`ªm_timed_èsk
(
èsk
);

245 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

246 
	`íq_ªady_èsk
(
èsk
);

247 #ifde‡
CONFIG_SMP


248 
	`£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

253 
	`RT_SCHEDULE_MAP
(
schedm≠
);

254 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

255  
masks
;

256 
	}
}

258 
RTAI_SYSCALL_MODE
 
	$_π_bôs_waô
(
BITS
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
)

260 
RT_TASK
 *
π_cuºít
;

261 
Êags
, 
mask
 = 0;

262 
ªtvÆ
;

264 
	`CHECK_BITS_MAGIC
(
bôs
);

266 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

267 i‡(!
ã°_fun
[
ã°fun
](
bôs
, 
ã°masks
)) {

268 *
ªç¡
;

269 
bôs_ã°
[2];

270 
π_cuºít
 = 
RT_CURRENT
;

271 
	`TEST_BUF
(
π_cuºít
, 
bôs_ã°
);

272 
	`TEST_FUN
(
π_cuºít
Ë
ã°fun
;

273 
	`TEST_MASK
(
π_cuºít
Ë
ã°masks
;

274 
π_cuºít
->
°©e
 |
RT_SCHED_SEMAPHORE
;

275 
	`ªm_ªady_cuºít
(
π_cuºít
);

276 
	`íqueue_blocked
(
π_cuºít
, &
bôs
->
queue
, 1);

277 
	`π_scheduÀ
();

278 i‡(
	`u∆ikñy
((
ªç¡
 = 
π_cuºít
->
blocked_⁄
Ë!
NULL
)) {

279 i‡(
	`likñy
(
ªç¡
 !
RTP_OBJREM
)) {

280 
	`dequeue_blocked
(
π_cuºít
);

281 
ªtvÆ
 = 
RTE_UNBLKD
;

283 
π_cuºít
->
¥io_∑s£d_to
 = 
NULL
;

284 
ªtvÆ
 = 
RTE_OBJREM
;

286 
ªtmask
;

289 
ªtvÆ
 = 0;

290 
mask
 = 
bôs
->mask;

291 
exec_fun
[
exôfun
](
bôs
, 
exômasks
);

292 
ªtmask
:

293 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

294 i‡(
ªsu…ög_mask
) {

295 i‡(
•a˚
) {

296 *
ªsu…ög_mask
 = 
mask
;

298 
	`π_c›y_to_u£r
(
ªsu…ög_mask
, &
mask
, (mask));

301  
ªtvÆ
;

302 
	}
}

304 
RTAI_SYSCALL_MODE
 
	$_π_bôs_waô_if
(
BITS
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
)

306 
Êags
, 
mask
;

307 
ªtvÆ
;

309 
	`CHECK_BITS_MAGIC
(
bôs
);

311 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

312 
mask
 = 
bôs
->mask;

313 i‡(
ã°_fun
[
ã°fun
](
bôs
, 
ã°masks
)) {

314 
exec_fun
[
exôfun
](
bôs
, 
exômasks
);

315 
ªtvÆ
 = 1;

317 
ªtvÆ
 = 0;

319 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

320 i‡(
ªsu…ög_mask
) {

321 i‡(
•a˚
) {

322 *
ªsu…ög_mask
 = 
mask
;

324 
	`π_c›y_to_u£r
(
ªsu…ög_mask
, &
mask
, (mask));

327  
ªtvÆ
;

328 
	}
}

330 
RTAI_SYSCALL_MODE
 
	$_π_bôs_waô_u¡û
(
BITS
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
, 
•a˚
)

332 
RT_TASK
 *
π_cuºít
;

333 
Êags
, 
mask
 = 0;

334 
ªtvÆ
;

336 
	`CHECK_BITS_MAGIC
(
bôs
);

338 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

339 i‡(!
ã°_fun
[
ã°fun
](
bôs
, 
ã°masks
)) {

340 *
ªç¡
;

341 
bôs_ã°
[2];

342 
π_cuºít
 = 
RT_CURRENT
;

343 
	`TEST_BUF
(
π_cuºít
, 
bôs_ã°
);

344 
	`TEST_FUN
(
π_cuºít
Ë
ã°fun
;

345 
	`TEST_MASK
(
π_cuºít
Ë
ã°masks
;

346 
π_cuºít
->
blocked_⁄
 = &
bôs
->
queue
;

347 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
	`gë_time
()) {

348 
π_cuºít
->
°©e
 |(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
);

349 
	`ªm_ªady_cuºít
(
π_cuºít
);

350 
	`íqueue_blocked
(
π_cuºít
, &
bôs
->
queue
, 1);

351 
	`íq_timed_èsk
(
π_cuºít
);

352 
	`π_scheduÀ
();

354 
π_cuºít
->
queue
.
¥ev
 =Ñt_cuºít->queue.
√xt
 = &rt_current->queue;

356 i‡(
	`u∆ikñy
((
ªç¡
 = 
π_cuºít
->
blocked_⁄
Ë!
NULL
)) {

357 i‡(
	`likñy
(
ªç¡
 !
RTP_OBJREM
)) {

358 
	`dequeue_blocked
(
π_cuºít
);

359 
ªtvÆ
 = 
	`likñy
(
ªç¡
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
;

361 
π_cuºít
->
¥io_∑s£d_to
 = 
NULL
;

362 
ªtvÆ
 = 
RTE_OBJREM
;

364 
ªtmask
;

367 
ªtvÆ
 = 0;

368 
mask
 = 
bôs
->mask;

369 
exec_fun
[
exôfun
](
bôs
, 
exômasks
);

370 
ªtmask
:

371 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

372 i‡(
ªsu…ög_mask
) {

373 i‡(
•a˚
) {

374 *
ªsu…ög_mask
 = 
mask
;

376 
	`π_c›y_to_u£r
(
ªsu…ög_mask
, &
mask
, (mask));

379  
ªtvÆ
;

380 
	}
}

382 
RTAI_SYSCALL_MODE
 
	$_π_bôs_waô_timed
(
BITS
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
, 
•a˚
)

384  
	`_π_bôs_waô_u¡û
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
	`gë_time
(Ë+ 
dñay
, 
ªsu…ög_mask
, 
•a˚
);

385 
	}
}

389 
	~<πai_ªgi°ry.h
>

391 
RTAI_SYSCALL_MODE
 
BITS
 *
	$π_«med_bôs_öô
(c⁄° *
bôs_«me
, 
mask
)

393 
BITS
 *
bôs
;

394 
«me
;

396 i‡((
bôs
 = 
	`π_gë_adr
(
«me
 = 
	`«m2num
(
bôs_«me
)))) {

397  
bôs
;

399 i‡((
bôs
 = 
	`π_mÆloc
((
SEM
)))) {

400 
	`π_bôs_öô
(
bôs
, 
mask
);

401 i‡(
	`π_ªgi°î
(
«me
, 
bôs
, 
IS_BIT
, 0)) {

402  
bôs
;

404 
	`π_bôs_dñëe
(
bôs
);

406 
	`π_‰ì
(
bôs
);

407  
NULL
;

408 
	}
}

410 
RTAI_SYSCALL_MODE
 
	$π_«med_bôs_dñëe
(
BITS
 *
bôs
)

412 i‡(!
	`π_bôs_dñëe
(
bôs
)) {

413 
	`π_‰ì
(
bôs
);

415  
	`π_drg_⁄_adr
(
bôs
);

416 
	}
}

418 
RTAI_SYSCALL_MODE
 *
	$π_bôs_öô_u
(
«me
, 
mask
)

420 
BITS
 *
bôs
;

421 i‡(
	`π_gë_adr
(
«me
)) {

422  
NULL
;

424 i‡((
bôs
 = 
	`π_mÆloc
((
BITS
)))) {

425 
	`π_bôs_öô
(
bôs
, 
mask
);

426 i‡(
	`π_ªgi°î
(
«me
, 
bôs
, 
IS_BIT
, 
cuºít
)) {

427  
bôs
;

429 
	`π_‰ì
(
bôs
);

432  
NULL
;

433 
	}
}

435 
RTAI_SYSCALL_MODE
 
	$π_bôs_dñëe_u
(
BITS
 *
bôs
)

437 i‡(
	`π_bôs_dñëe
(
bôs
)) {

438  -
EFAULT
;

440 
	`π_‰ì
(
bôs
);

441  
	`π_drg_⁄_adr
(
bôs
);

442 
	}
}

446 
π_«tive_fun_íåy
 
	gπ_bôs_íåõs
[] = {

447 { { 0, 
π_bôs_öô_u
 }, 
BITS_INIT
 },

448 { { 0, 
π_bôs_dñëe_u
 }, 
BITS_DELETE
 },

449 { { 0, 
π_«med_bôs_öô
 }, 
NAMED_BITS_INIT
 },

450 { { 0, 
π_«med_bôs_dñëe
 }, 
NAMED_BITS_DELETE
 },

451 { { 1, 
π_gë_bôs
 }, 
BITS_GET
 },

452 { { 1, 
π_bôs_ª£t
 }, 
BITS_RESET
 },

453 { { 1, 
π_bôs_sig«l
 }, 
BITS_SIGNAL
 },

454 { { 1, 
_π_bôs_waô
 }, 
BITS_WAIT
 },

455 { { 1, 
_π_bôs_waô_if
 }, 
BITS_WAIT_IF
 },

456 { { 1, 
_π_bôs_waô_u¡û
 }, 
BITS_WAIT_UNTIL
 },

457 { { 1, 
_π_bôs_waô_timed
 }, 
BITS_WAIT_TIMED
 },

461 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

462 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

464 
	$__πai_bôs_öô
()

466  
	`£t_π_fun_íåõs
(
π_bôs_íåõs
);

467 
	}
}

469 
	$__πai_bôs_exô
()

471 
	`ª£t_π_fun_íåõs
(
π_bôs_íåõs
);

472 
	}
}

474 #i‚de‡
CONFIG_RTAI_BITS_BUILTIN


475 
moduÀ_öô
(
__πai_bôs_öô
);

476 
moduÀ_exô
(
__πai_bôs_exô
);

479 #ifde‡
CONFIG_KBUILD


480 
EXPORT_SYMBOL
(
π_bôs_öô
);

481 
EXPORT_SYMBOL
(
π_bôs_dñëe
);

482 
EXPORT_SYMBOL
(
π_gë_bôs
);

483 
EXPORT_SYMBOL
(
π_bôs_ª£t
);

484 
EXPORT_SYMBOL
(
π_bôs_sig«l
);

485 
EXPORT_SYMBOL
(
_π_bôs_waô
);

486 
EXPORT_SYMBOL
(
_π_bôs_waô_if
);

487 
EXPORT_SYMBOL
(
_π_bôs_waô_u¡û
);

488 
EXPORT_SYMBOL
(
_π_bôs_waô_timed
);

489 
EXPORT_SYMBOL
(
π_«med_bôs_öô
);

490 
EXPORT_SYMBOL
(
π_«med_bôs_dñëe
);

491 
EXPORT_SYMBOL
(
π_bôs_öô_u
);

492 
EXPORT_SYMBOL
(
π_bôs_dñëe_u
);

	@/usr/src/rtai/base/ipc/bits/rtai_bits.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

22 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

23 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

24 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

25 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

26 { 0x11089ac7, 
__VMLINUX_SYMBOL_STR
(
_˘y≥
) },

27 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

28 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

29 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

30 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

31 { 0xade90a55, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr
) },

32 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

33 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

34 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

35 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

36 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

37 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

38 { 0x111d17e8, 
__VMLINUX_SYMBOL_STR
(
π_drg_⁄_adr
) },

39 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

40 { 0xe70f28b6, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î
) },

41 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

42 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

43 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

44 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

47 c⁄° 
	g__moduÀ_dïíds
[]

48 
__u£d


49 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

53 
MODULE_INFO
(
§cvîsi⁄
, "C2B502B5D10EA79C3609CA3");

	@/usr/src/rtai/base/ipc/fifos/fifos.c

139 
	~<löux/moduÀ.h
>

140 
	~<löux/öô.h
>

141 
	~<löux/kî√l.h
>

142 
	~<löux/vîsi⁄.h
>

143 
	~<löux/î∫o.h
>

144 
	~<löux/mm.h
>

145 
	~<löux/vmÆloc.h
>

146 
	~<löux/pﬁl.h
>

147 
	~<löux/ãrmios.h
>

148 
	~<löux/ây_drivî.h
>

149 
	~<löux/c⁄sﬁe.h
>

150 
	~<löux/¶ab.h
>

151 
	~<löux/°©.h
>

152 
	~<löux/¥oc_fs.h
>

154 
	~<πai_fifos.h
>

155 
	~<πai_åa˚.h
>

156 
	~<πai_¥oc_fs.h
>

157 
	~<πai_sched.h
>

158 
	~<πai_lxπ.h
>

160 
MODULE_LICENSE
("GPL");

163 
	#πf_ßve_Êags_™d_˛i
(
x
Ëdo{x=
	`π_•ö_lock_úqßve
(&
πf_lock
);}0)

	)

164 
	#πf_ª°‹e_Êags
(
x
Ë
	`π_•ö_u∆ock_úqª°‹e
((x),&
πf_lock
)

	)

165 
	#πf_•ö_lock_úqßve
(
x
,
y
Ëdo{x=
	`π_•ö_lock_úqßve
(&(y));}0)

	)

166 
	#πf_•ö_u∆ock_úqª°‹e
(
x
,
y
Ë
	`π_•ö_u∆ock_úqª°‹e
((x),&(y))

	)

167 
	#πf_ªque°_§q
(
x
Ë
	`π_ªque°_§q
(0, (x), 0)

	)

168 
	#πf_‰ì_§q
(
x
Ë
	`π_‰ì_§q
((x))

	)

169 
	#πf_≥nd_§q
(
x
Ë
	`π_≥nd_löux_§q
((x))

	)

171 #ifde‡
CONFIG_PROC_FS


172 
πai_¥oc_fifo_ªgi°î
();

173 
πai_¥oc_fifo_uƒegi°î
();

176 
	slx_queue
 {

177 
lx_queue
 *
	m¥ev
;

178 
lx_queue
 *
	m√xt
;

179 
lx_èsk_°ru˘
 *
	mèsk
;

180 } 
	tF_QUEUE
;

182 
	slx_£m≠h‹e
 {

183 
	m‰ì
;

184 
	mqty≥
;

185 
F_QUEUE
 
	mqueue
;

186 } 
	tF_SEM
;

188 
	slx_èsk_°ru˘
 {

189 
	mblocked
;

190 
	m¥i‹ôy
;

191 
F_QUEUE
 
	mqueue
;

192 
èsk_°ru˘
 *
	mèsk
;

193 } 
	tLX_TASK
;

195 
	slx_maûbox
 {

196 
	msize
;

197 
	mfbyã
;

198 
	mlbyã
;

199 
	mavbs
;

200 
	m‰bs
;

201 *
	mbuÁdr
;

202 
F_SEM
 
	m¢d£m
, 
	mrcv£m
;

203 
èsk_°ru˘
 *
	mwaôög_èsk
;

204 
•ölock_t
 
	mbuÊock
;

205 } 
	tF_MBX
;

207 
	sπ_fifo_°ru˘
 {

208 
F_MBX
 
	mmbx
;

209 
	m›n˙t
;

210 
	mmÆloc_ty≥
;

211 
	mpﬁ_asyn_≥nded
;

212 
waô_queue_hód_t
 
	mpﬁlq
;

213 
Ásync_°ru˘
 *
	masynq
;

214 
πf_h™dÀr_t
 
	mh™dÀr
;

215 
F_SEM
 
	m£m
;

216 
	m«me
[
RTF_NAMELEN
+1];

217 } 
	tFIFO
;

219 
	gfifo_§q
, 
	gasync_sig
;

220 
DEFINE_SPINLOCK
(
πf_lock
);

221 
DEFINE_SPINLOCK
(
πf_«me_lock
);

223 
	#MAX_FIFOS
 64

	)

225 
FIFO
 *
	gfifo
;

227 
	#MAXREQS
 64

228 °ru˘ { 
ö
, 
out
; 
èsk_°ru˘
 *
èsk
[
MAXREQS
]; } 
èskq
;

	)

229 °ru˘ { 
	mö
, 
	mout
; 
FIFO
 *
	mfifo
[
MAXREQS
]; } 
	gpﬁ_asyn_q
;

231 
	$do_nŸhög
(
¨g
, 
rw
Ë{  0; 
	}
}

233 
ölöe
 
	$íqueue_blocked
(
LX_TASK
 *
èsk
, 
F_QUEUE
 *
queue
, 
qty≥
, 
¥i‹ôy
)

235 
F_QUEUE
 *
q
;

237 
èsk
->
blocked
 = 1;

238 
q
 = 
queue
;

239 i‡(!
qty≥
) {

240 (
q
 = q->
√xt
Ë!
queue
 && (q->
èsk
)->
¥i‹ôy
 >=Öriority);

242 
q
->
¥ev
 = (
èsk
->
queue
.¥ev = q->¥ev)->
√xt
 = &(task->queue);

243 
èsk
->
queue
.
√xt
 = 
q
;

244 
	}
}

246 
ölöe
 
	$dequeue_blocked
(
LX_TASK
 *
èsk
)

248 
èsk
->
blocked
 = 0;

249 (
èsk
->
queue
.
¥ev
)->
√xt
 =Åask->queue.next;

250 (
èsk
->
queue
.
√xt
)->
¥ev
 =Åask->queue.prev;

251 
	}
}

253 
ölöe
 
	$mbx_£m_sig«l
(
F_SEM
 *
£m
, 
FIFO
 *
fif›
)

255 
Êags
;

256 
LX_TASK
 *
èsk
;

258 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

259 i‡((
èsk
 = (
£m
->
queue
.
√xt
)->task)) {

260 
	`dequeue_blocked
(
èsk
);

261 
èskq
.
èsk
[èskq.
ö
] =Åask->task;

262 
èskq
.
ö
 = (èskq.ö + 1Ë& (
MAXREQS
 - 1);

263 
	`πf_≥nd_§q
(
fifo_§q
);

265 
£m
->
‰ì
 = 1;

266 i‡(
fif›
 && !(fif›->
pﬁ_asyn_≥nded
) &&

267 (((
F_MBX
 *)
fif›
)->
avbs
 || ((F_MBX *)fif›)->
‰bs
) &&

268 (
	`waôqueue_a˘ive
(&
fif›
->
pﬁlq
Ë|| fif›->
asynq
)) {

269 
fif›
->
pﬁ_asyn_≥nded
 = 1;

270 
pﬁ_asyn_q
.
fifo
[pﬁ_asyn_q.
ö
] = 
fif›
;

271 
pﬁ_asyn_q
.
ö
 = (pﬁ_asyn_q.ö + 1Ë& (
MAXREQS
 - 1);

272 
	`πf_≥nd_§q
(
fifo_§q
);

275 
	`πf_ª°‹e_Êags
(
Êags
);

277 
	}
}

279 
ölöe
 
	$mbx_sig«l
(
F_MBX
 *
mbx
)

281 
Êags
;

282 
èsk_°ru˘
 *
èsk
;

284 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

285 i‡((
èsk
 = 
mbx
->
waôög_èsk
)) {

286 
mbx
->
waôög_èsk
 = 0;

287 
èskq
.
èsk
[èskq.
ö
] =Åask;

288 
èskq
.
ö
 = (èskq.ö + 1Ë& (
MAXREQS
 - 1);

289 
	`πf_≥nd_§q
(
fifo_§q
);

291 
	`πf_ª°‹e_Êags
(
Êags
);

293 
	}
}

295 
ölöe
 
	$mbx_£m_waô_if
(
F_SEM
 *
£m
)

297 
Êags
;

299 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

300 i‡(
£m
->
‰ì
) {

301 
£m
->
‰ì
 = 0;

302 
	`πf_ª°‹e_Êags
(
Êags
);

305 
	`πf_ª°‹e_Êags
(
Êags
);

307 
	}
}

309 
ölöe
 
	$mbx_£m_waô
(
F_SEM
 *
£m
)

311 
Êags
;

312 
LX_TASK
 
èsk
;

313 
ªt
;

315 
ªt
 = 0;

316 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

317 i‡(!
£m
->
‰ì
) {

318 
èsk
.
queue
.task = &task;

319 
èsk
.
¥i‹ôy
 = 
cuºít
->
π_¥i‹ôy
;

320 
	`íqueue_blocked
(&
èsk
, &
£m
->
queue
, sem->
qty≥
,Åask.
¥i‹ôy
);

321 
èsk
.èsk = 
cuºít
;

322 
	`πf_ª°‹e_Êags
(
Êags
);

323 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

324 
	`scheduÀ
();

325 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

326 
ªt
 = -
ERESTARTSYS
;

328 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

329 i‡(
èsk
.
blocked
) {

330 
	`dequeue_blocked
(&
èsk
);

331 i‡(!(
£m
->
queue
.
√xt
)->
èsk
) {

332 
£m
->
‰ì
 = 1;

334 i‡(!
ªt
) {

335 
ªt
 = -1;

339 
£m
->
‰ì
 = 0;

341 
	`πf_ª°‹e_Êags
(
Êags
);

342  
ªt
;

343 
	}
}

345 
ölöe
 
	$mbx_waô
(
F_MBX
 *
mbx
, *
‰avbs
)

347 
Êags
;

349 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

350 i‡(!(*
‰avbs
)) {

351 
mbx
->
waôög_èsk
 = 
cuºít
;

352 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

353 
	`πf_ª°‹e_Êags
(
Êags
);

354 
	`scheduÀ
();

355 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

356  -
ERESTARTSYS
;

358 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

359 i‡(
mbx
->
waôög_èsk
 =
cuºít
) {

360 
mbx
->
waôög_èsk
 = 0;

361 
	`πf_ª°‹e_Êags
(
Êags
);

365 
	`πf_ª°‹e_Êags
(
Êags
);

367 
	}
}

369 
ölöe
 
	$mbx_£m_waô_timed
(
F_SEM
 *
£m
, 
dñay
)

371 
Êags
;

372 
LX_TASK
 
èsk
;

374 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

375 i‡(!
£m
->
‰ì
) {

376 
èsk
.
queue
.task = &task;

377 
èsk
.
¥i‹ôy
 = 
cuºít
->
π_¥i‹ôy
;

378 
	`íqueue_blocked
(&
èsk
, &
£m
->
queue
, sem->
qty≥
,Åask.
¥i‹ôy
);

379 
èsk
.èsk = 
cuºít
;

380 
	`πf_ª°‹e_Êags
(
Êags
);

381 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

382 
	`scheduÀ_timeout
(
dñay
);

383 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

384  -
ERESTARTSYS
;

386 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

387 i‡(
èsk
.
blocked
) {

388 
	`dequeue_blocked
(&
èsk
);

389 i‡(!((
£m
->
queue
.
√xt
)->
èsk
)) {

390 
£m
->
‰ì
 = 1;

392 
	`πf_ª°‹e_Êags
(
Êags
);

396 
£m
->
‰ì
 = 0;

398 
	`πf_ª°‹e_Êags
(
Êags
);

400 
	}
}

402 
ölöe
 
	$mbx_waô_timed
(
F_MBX
 *
mbx
, *
‰avbs
, 
dñay
)

404 
Êags
;

406 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

407 i‡(!(*
‰avbs
)) {

408 
mbx
->
waôög_èsk
 = 
cuºít
;

409 
	`πf_ª°‹e_Êags
(
Êags
);

410 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

411 
	`scheduÀ_timeout
(
dñay
);

412 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

413  -
ERESTARTSYS
;

415 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

416 i‡(
mbx
->
waôög_èsk
 =
cuºít
) {;

417 
mbx
->
waôög_èsk
 = 0;

418 
	`πf_ª°‹e_Êags
(
Êags
);

422 
	`πf_ª°‹e_Êags
(
Êags
);

424 
	}
}

426 
	#MOD_SIZE
(
ödx
Ë((ödxË< 
mbx
->
size
 ? (ödxË: (ödxË- mbx->size)

	)

428 
ölöe
 
	$mbx_put
(
F_MBX
 *
mbx
, **
msg
, 
msg_size
, 
 x
)

430 
Êags
;

431 
to˝y
;

433 
msg_size
 > 0 && 
mbx
->
‰bs
) {

434 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

435 
to˝y
 = 
msg_size
;

437 i‡(
to˝y
 > 
mbx
->
‰bs
) {

438 
to˝y
 = 
mbx
->
‰bs
;

440 i‡(
 x
) {

441 
	`π_c›y_‰om_u£r
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

443 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

445 
	`πf_•ö_lock_úqßve
(
Êags
, 
mbx
->
buÊock
);

446 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

447 
mbx
->
‰bs
 -
to˝y
;

448 
mbx
->
avbs
 +
to˝y
;

449 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
mbx
->
buÊock
);

450 
msg_size
 -
to˝y
;

451 *
msg
 +
to˝y
;

453  
msg_size
;

454 
	}
}

456 
ölöe
 
	$mbx_ovrwr_put
(
F_MBX
 *
mbx
, **
msg
, 
msg_size
, 
 x
)

458 
Êags
;

459 
to˝y
,
n
;

461 i‡((
n
 = 
msg_size
 - 
mbx
->
size
) > 0) {

462 *
msg
 +
n
;

463 
msg_size
 -
n
;

465 
msg_size
 > 0) {

466 i‡(
mbx
->
‰bs
) {

467 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

468 
to˝y
 = 
msg_size
;

470 i‡(
to˝y
 > 
mbx
->
‰bs
) {

471 
to˝y
 = 
mbx
->
‰bs
;

473 i‡(
 x
) {

474 
	`π_c›y_‰om_u£r
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

476 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

478 
	`πf_•ö_lock_úqßve
(
Êags
, 
mbx
->
buÊock
);

479 
mbx
->
‰bs
 -
to˝y
;

480 
mbx
->
avbs
 +
to˝y
;

481 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
mbx
->
buÊock
);

482 
msg_size
 -
to˝y
;

483 *
msg
 +
to˝y
;

484 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

486 i‡(
msg_size
) {

487 (
n
 = 
msg_size
 - 
mbx
->
‰bs
) > 0) {

488 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
fbyã
Ë> 
n
) {

489 
to˝y
 = 
n
;

491 i‡(
to˝y
 > 
mbx
->
avbs
) {

492 
to˝y
 = 
mbx
->
avbs
;

494 
	`πf_•ö_lock_úqßve
(
Êags
, 
mbx
->
buÊock
);

495 
mbx
->
‰bs
 +
to˝y
;

496 
mbx
->
avbs
 -
to˝y
;

497 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
mbx
->
buÊock
);

498 
mbx
->
fbyã
 = 
	`MOD_SIZE
(mbx->fbyã + 
to˝y
);

503 
	}
}

505 
ölöe
 
	$mbx_gë
(
F_MBX
 *
mbx
, **
msg
, 
msg_size
, 
 x
)

507 
Êags
;

508 
to˝y
;

510 
msg_size
 > 0 && 
mbx
->
avbs
) {

511 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
fbyã
Ë> 
msg_size
) {

512 
to˝y
 = 
msg_size
;

514 i‡(
to˝y
 > 
mbx
->
avbs
) {

515 
to˝y
 = 
mbx
->
avbs
;

517 i‡(
 x
) {

518 
	`π_c›y_to_u£r
(*
msg
, 
mbx
->
buÁdr
 + mbx->
fbyã
, 
to˝y
);

520 
	`mem˝y
(*
msg
, 
mbx
->
buÁdr
 + mbx->
fbyã
, 
to˝y
);

522 
	`πf_•ö_lock_úqßve
(
Êags
, 
mbx
->
buÊock
);

523 
mbx
->
fbyã
 = 
	`MOD_SIZE
(mbx->fbyã + 
to˝y
);

524 
mbx
->
‰bs
 +
to˝y
;

525 
mbx
->
avbs
 -
to˝y
;

526 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
mbx
->
buÊock
);

527 
msg_size
 -
to˝y
;

528 *
msg
 +
to˝y
;

530  
msg_size
;

531 
	}
}

533 
ölöe
 
	$mbx_evdΩ
(
F_MBX
 *
mbx
, **
msg
, 
msg_size
, 
 x
)

535 
to˝y
, 
fbyã
, 
avbs
;

537 
fbyã
 = 
mbx
->fbyte;

538 
avbs
 = 
mbx
->avbs;

539 
msg_size
 > 0 && 
avbs
) {

540 i‡((
to˝y
 = 
mbx
->
size
 - 
fbyã
Ë> 
msg_size
) {

541 
to˝y
 = 
msg_size
;

543 i‡(
to˝y
 > 
avbs
) {

544 
to˝y
 = 
avbs
;

546 i‡(
 x
) {

547 
	`π_c›y_to_u£r
(*
msg
, 
mbx
->
buÁdr
 + 
fbyã
, 
to˝y
);

549 
	`mem˝y
(*
msg
, 
mbx
->
buÁdr
 + 
fbyã
, 
to˝y
);

551 
avbs
 -
to˝y
;

552 
msg_size
 -
to˝y
;

553 *
msg
 +
to˝y
;

554 
fbyã
 = 
	`MOD_SIZE
(fbyã + 
to˝y
);

556  
msg_size
;

557 
	}
}

559 
ölöe
 
	$mbx_£m_öô
(
F_SEM
 *
£m
, 
vÆue
)

561 
£m
->
‰ì
 = 
vÆue
;

562 
£m
->
qty≥
 = 0;

563 
£m
->
queue
.
¥ev
 = &(sem->queue);

564 
£m
->
queue
.
√xt
 = &(sem->queue);

565 
£m
->
queue
.
èsk
 = 0;

566 
	}
}

568 
ölöe
 
	$mbx_£m_dñëe
(
F_SEM
 *
£m
)

570 
Êags
;

571 
LX_TASK
 *
èsk
;

573 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

574 (
èsk
 = (
£m
->
queue
.
√xt
)->task)) {

575 
£m
->
queue
.
√xt
 = 
èsk
->queue.next;

576 (
èsk
->
queue
.
√xt
)->
¥ev
 = &(
£m
->queue);

577 
èskq
.
èsk
[èskq.
ö
] =Åask->task;

578 
èskq
.
ö
 = (èskq.ö + 1Ë& (
MAXREQS
 - 1);

579 
	`πf_≥nd_§q
(
fifo_§q
);

581 
	`πf_ª°‹e_Êags
(
Êags
);

583 
	}
}

585 
ölöe
 
	$mbx_öô
(
F_MBX
 *
mbx
, 
size
, *
buÁdr
)

587 
	`mbx_£m_öô
(&(
mbx
->
¢d£m
), 1);

588 
	`mbx_£m_öô
(&(
mbx
->
rcv£m
), 1);

589 
mbx
->
waôög_èsk
 = 0;

590 
mbx
->
buÁdr
 = bufadr;

591 
mbx
->
size
 = mbx->
‰bs
 = size;

592 
mbx
->
fbyã
 = mbx->
lbyã
 = mbx->
avbs
 = 0;

593 #ifde‡
CONFIG_SMP


594 
	`•ö_lock_öô
(&
mbx
->
buÊock
);

596 
	`•ö_lock_öô
(&(
mbx
->
buÊock
));

597 
	}
}

599 
ölöe
 
	$mbx_dñëe
(
F_MBX
 *
mbx
)

601 
	`mbx_sig«l
(
mbx
);

602 i‡(
	`mbx_£m_dñëe
(&(
mbx
->
¢d£m
)Ë|| mbx_£m_dñëe(&(mbx->
rcv£m
))) {

603  -
EFAULT
;

606 
	}
}

608 
ölöe
 
	$mbx_£nd
(
F_MBX
 *
mbx
, c⁄° *
msg
, 
msg_size
, 
 x
)

610 i‡(
	`mbx_£m_waô
(&(
mbx
->
¢d£m
))) {

611  
msg_size
;

613 
msg_size
) {

614 i‡(
	`mbx_waô
(
mbx
, &mbx->
‰bs
)) {

615 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

616  
msg_size
;

618 
msg_size
 = 
	`mbx_put
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

619 
	`mbx_sig«l
(
mbx
);

621 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

623 
	}
}

625 
ölöe
 
	$mbx_£nd_wp
(
F_MBX
 *
mbx
, c⁄° *
msg
, 
msg_size
, 
 x
)

627 
Êags
;

629 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

630 i‡(
mbx
->
¢d£m
.
‰ì
 && mbx->
‰bs
) {

631 
mbx
->
¢d£m
.
‰ì
 = 0;

632 
	`πf_ª°‹e_Êags
(
Êags
);

633 
msg_size
 = 
	`mbx_put
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

634 
	`mbx_sig«l
(
mbx
);

635 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

637 
	`πf_ª°‹e_Êags
(
Êags
);

639  
msg_size
;

640 
	}
}

642 
ölöe
 
	$mbx_£nd_if
(
F_MBX
 *
mbx
, c⁄° *
msg
, 
msg_size
, 
 x
)

644 
Êags
;

646 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

647 i‡(
mbx
->
¢d£m
.
‰ì
 && (mbx->
‰bs
 >
msg_size
)) {

648 
mbx
->
¢d£m
.
‰ì
 = 0;

649 
	`πf_ª°‹e_Êags
(
Êags
);

650 
msg_size
 = 
	`mbx_put
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

651 
	`mbx_sig«l
(
mbx
);

652 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

654 
	`πf_ª°‹e_Êags
(
Êags
);

656  
msg_size
;

657 
	}
}

659 
	$mbx_£nd_timed
(
F_MBX
 *
mbx
, c⁄° *
msg
, 
msg_size
, 
dñay
, 
 x
)

661 i‡(
	`mbx_£m_waô_timed
(&(
mbx
->
¢d£m
), 
dñay
)) {

662  
msg_size
;

664 
msg_size
) {

665 i‡(
	`mbx_waô_timed
(
mbx
, &(mbx->
‰bs
), 
dñay
)) {

666 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

667  
msg_size
;

669 
msg_size
 = 
	`mbx_put
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

670 
	`mbx_sig«l
(
mbx
);

672 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

674 
	}
}

676 
ölöe
 
	$mbx_ª˚ive
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
 x
)

678 i‡(
	`mbx_£m_waô
(&(
mbx
->
rcv£m
))) {

679  
msg_size
;

681 
msg_size
) {

682 i‡(
	`mbx_waô
(
mbx
, &mbx->
avbs
)) {

683 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

684  
msg_size
;

686 
msg_size
 = 
	`mbx_gë
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

687 
	`mbx_sig«l
(
mbx
);

689 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

691 
	}
}

693 
ölöe
 
	$mbx_ª˚ive_wjo
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
 x
)

695 i‡(
	`mbx_£m_waô
(&(
mbx
->
rcv£m
))) {

696  
msg_size
;

698 i‡(
msg_size
) {

699 i‡(
	`mbx_waô
(
mbx
, &mbx->
avbs
)) {

700 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

701  
msg_size
;

703 
msg_size
 = 
	`mbx_gë
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

704 
	`mbx_sig«l
(
mbx
);

706 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

707  
msg_size
;

708 
	}
}

710 
ölöe
 
	$mbx_ª˚ive_wp
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
 x
)

712 
Êags
;

714 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

715 i‡(
mbx
->
rcv£m
.
‰ì
 && mbx->
avbs
) {

716 
mbx
->
rcv£m
.
‰ì
 = 0;

717 
	`πf_ª°‹e_Êags
(
Êags
);

718 
msg_size
 = 
	`mbx_gë
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

719 
	`mbx_sig«l
(
mbx
);

720 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

722 
	`πf_ª°‹e_Êags
(
Êags
);

724  
msg_size
;

725 
	}
}

727 
ölöe
 
	$mbx_ª˚ive_if
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
 x
)

729 
Êags
;

731 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

732 i‡(
mbx
->
rcv£m
.
‰ì
 && mbx->
avbs
 >
msg_size
) {

733 
mbx
->
rcv£m
.
‰ì
 = 0;

734 
	`πf_ª°‹e_Êags
(
Êags
);

735 
msg_size
 = 
	`mbx_gë
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

736 
	`mbx_sig«l
(
mbx
);

737 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

739 
	`πf_ª°‹e_Êags
(
Êags
);

741  
msg_size
;

742 
	}
}

744 
	$mbx_ª˚ive_timed
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
dñay
, 
 x
)

746 i‡(
	`mbx_£m_waô_timed
(&(
mbx
->
rcv£m
), 
dñay
)) {

747  
msg_size
;

749 
msg_size
) {

750 i‡(
	`mbx_waô_timed
(
mbx
, &(mbx->
avbs
), 
dñay
)) {

751 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

752  
msg_size
;

754 
msg_size
 = 
	`mbx_gë
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

755 
	`mbx_sig«l
(
mbx
);

757 
	`mbx_£m_sig«l
(&(
mbx
->
rcv£m
), (
FIFO
 *)mbx);

759 
	}
}

761 
ölöe
 
	$mbx_ovrwr_£nd
(
F_MBX
 *
mbx
, *
msg
, 
msg_size
, 
 x
)

763 
Êags
;

765 
	`πf_ßve_Êags_™d_˛i
(
Êags
);

766 i‡(
mbx
->
¢d£m
.
‰ì
) {

767 
mbx
->
¢d£m
.
‰ì
 = 0;

768 
	`πf_ª°‹e_Êags
(
Êags
);

769 
msg_size
 = 
	`mbx_ovrwr_put
(
mbx
, (**)(&
msg
), msg_size, 
 x
);

770 
	`mbx_sig«l
(
mbx
);

771 
	`mbx_£m_sig«l
(&(
mbx
->
¢d£m
), (
FIFO
 *)mbx);

773 
	`πf_ª°‹e_Êags
(
Êags
);

775  
msg_size
;

776 
	}
}

778 
	$πf_sy§q_h™dÀr
()

780 
FIFO
 *
fif›
;

781 
èskq
.
out
 !èskq.
ö
) {

782 i‡(
èskq
.
èsk
[èskq.
out
]->
°©e
 =
TASK_INTERRUPTIBLE
) {

783 
	`wake_up_¥o˚ss
(
èskq
.
èsk
[èskq.
out
]);

785 
èskq
.
out
 = (èskq.ouà+ 1Ë& (
MAXREQS
 - 1);

788 
pﬁ_asyn_q
.
out
 !pﬁ_asyn_q.
ö
) {

789 
fif›
 = 
pﬁ_asyn_q
.
fifo
[pﬁ_asyn_q.
out
];

790 
fif›
->
pﬁ_asyn_≥nded
 = 0;

791 i‡(
	`waôqueue_a˘ive
(&(
fif›
 = 
pﬁ_asyn_q
.
fifo
[pﬁ_asyn_q.
out
])->
pﬁlq
)) {

792 
	`wake_up_öãºu±ibÀ
(&(
fif›
->
pﬁlq
));

794 i‡(
fif›
->
asynq
) {

795 
	`kûl_Ásync
(&
fif›
->
asynq
, 
async_sig
, 
POLL_IN
);

797 
pﬁ_asyn_q
.
out
 = (pﬁ_asyn_q.ouà+ 1Ë& (
MAXREQS
 - 1);

799 
	`£t_tsk_√ed_ªsched
(
cuºít
);

800 
	}
}

802 
	#VALID_FIFO
 i‡(
mö‹
 >
MAX_FIFOS
Ë{  -
ENODEV
; } \

803 i‡(!(
fifo
[
mö‹
].
›n˙t
)Ë{  -
EINVAL
; }

	)

821 
RTAI_SYSCALL_MODE
 
	$πf_ª£t
(
mö‹
)

823 
£mvÆ
;

824 
F_MBX
 *
mbx
;

826 
VALID_FIFO
;

828 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_RESET
, 
mö‹
, 0);

830 
mbx
 = &(
fifo
[
mö‹
].mbx);

831 i‡(!
	`mbx_£m_waô
(&(
mbx
->
rcv£m
))) {

832 !(
£mvÆ
 = 
	`mbx_£m_waô_if
(&
mbx
->
¢d£m
)Ë&& !mbx->
waôög_èsk
) {

833 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

834 
	`scheduÀ_timeout
(1);

837  -
EBADF
;

839 
mbx
->
‰bs
 = mbx->
size
;

840 
mbx
->
fbyã
 = mbx->
lbyã
 = mbx->
avbs
 = 0;

841 i‡(
£mvÆ
) {

842 
	`mbx_£m_sig«l
(&
mbx
->
¢d£m
, (
FIFO
 *)mbx);

844 
	`mbx_sig«l
(
mbx
);

846 
	`mbx_£m_sig«l
(&
mbx
->
rcv£m
, (
FIFO
 *)mbx);

848 
	}
}

871 
RTAI_SYSCALL_MODE
 
	$πf_ªsize
(
mö‹
, 
size
)

873 *
ﬁdbuf
, *
√wbuf
;

874 
ﬁd_mÆloc_ty≥
, 
√w_mÆloc_ty≥
, 
£mvÆ
;

875 
F_MBX
 *
mbx
;

877 
VALID_FIFO
;

879 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_RESIZE
, 
mö‹
, 
size
);

881 
mbx
 = &(
fifo
[
mö‹
].mbx);

882 i‡(!
size
) {

883  -
EINVAL
;

885 i‡(
size
 <
PAGE_SIZE
*32) {

886 i‡(!(
√wbuf
 = 
	`kmÆloc
(
size
, 
GFP_KERNEL
))) {

887  -
ENOMEM
;

889 
√w_mÆloc_ty≥
 = 'k';

891 i‡(!(
√wbuf
 = 
	`vmÆloc
(
size
))) {

892  -
ENOMEM
;

894 
√w_mÆloc_ty≥
 = 'v';

896 i‡(!
	`mbx_£m_waô
(&(
mbx
->
rcv£m
))) {

897 !(
£mvÆ
 = 
	`mbx_£m_waô_if
(&
mbx
->
¢d£m
)Ë&& !mbx->
waôög_èsk
) {

898 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

899 
	`scheduÀ_timeout
(1);

902  -
EBADF
;

904 i‡(
size
 < 
mbx
->
avbs
) {

905 i‡(
£mvÆ
) {

906 
	`mbx_£m_sig«l
(&
mbx
->
¢d£m
, (
FIFO
 *)mbx);

908 
	`mbx_£m_sig«l
(&
mbx
->
rcv£m
, (
FIFO
 *)mbx);

909 
√w_mÆloc_ty≥
 ='k' ? 
	`k‰ì
(
√wbuf
Ë: 
	`v‰ì
(newbuf);

910  -
EBUSY
;

912 
ﬁdbuf
 = 
√wbuf
;

913 
mbx
->
‰bs
 = 
	`mbx_gë
(mbx, (**)(&
ﬁdbuf
), 
size
, 0);

914 
mbx
->
avbs
 = mbx->
lbyã
 = 
size
 - mbx->
‰bs
;

915 
mbx
->
fbyã
 = 0;

916 
ﬁdbuf
 = 
mbx
->
buÁdr
;

917 
mbx
->
buÁdr
 = 
√wbuf
;

918 
ﬁd_mÆloc_ty≥
 = 
fifo
[
mö‹
].
mÆloc_ty≥
;

919 
fifo
[
mö‹
].
mÆloc_ty≥
 = 
√w_mÆloc_ty≥
;

920 i‡(
£mvÆ
) {

921 
mbx
->
size
 = size;

922 
	`mbx_£m_sig«l
(&
mbx
->
¢d£m
, (
FIFO
 *)mbx);

923 } i‡(
size
 > 
mbx
->size) {

924 
mbx
->
size
 = size;

925 
	`mbx_sig«l
(
mbx
);

927 
	`mbx_£m_sig«l
(&
mbx
->
rcv£m
, (
FIFO
 *)mbx);

928 
ﬁd_mÆloc_ty≥
 ='k' ? 
	`k‰ì
(
ﬁdbuf
Ë: 
	`v‰ì
(oldbuf);

929  
size
;

930 
	}
}

971 
RTAI_SYSCALL_MODE
 
	$πf_¸óã
(
mö‹
, 
size
)

973 *
buf
;

975 i‡(
mö‹
 >
MAX_FIFOS
) {

976  -
ENODEV
;

978 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_CREATE
, 
mö‹
, 
size
);

979 i‡(!
	`©omic_cmpxchg
((
©omic_t
 *)&
fifo
[
mö‹
].
›n˙t
, 0, 1)) {

980 i‡(
size
 <
PAGE_SIZE
*32) {

981 i‡(!(
buf
 = 
	`kmÆloc
(
size
, 
GFP_KERNEL
))) {

982 
fifo
[
mö‹
].
›n˙t
 = 0;

983  -
ENOMEM
;

985 
fifo
[
mö‹
].
mÆloc_ty≥
 = 'k';

987 i‡(!(
buf
 = 
	`vmÆloc
(
size
))) {

988 
fifo
[
mö‹
].
›n˙t
 = 0;

989  -
ENOMEM
;

991 
fifo
[
mö‹
].
mÆloc_ty≥
 = 'v';

993 
fifo
[
mö‹
].
h™dÀr
 = 
do_nŸhög
;

994 
	`mbx_öô
(&(
fifo
[
mö‹
].
mbx
), 
size
, 
buf
);

995 
	`mbx_£m_öô
(&(
fifo
[
mö‹
].
£m
), 0);

996 
fifo
[
mö‹
].
pﬁ_asyn_≥nded
 = 0;

997 
fifo
[
mö‹
].
asynq
 = 0;

999 i‡(
size
 > 
fifo
[
mö‹
].
mbx
.size) {

1000 
	`πf_ªsize
(
mö‹
, 
size
);

1002 
	`©omic_öc
((
©omic_t
 *)&
fifo
[
mö‹
].
›n˙t
);

1005 
	}
}

1030 
RTAI_SYSCALL_MODE
 
	$πf_de°roy
(
mö‹
)

1032 
VALID_FIFO
;

1034 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_DESTROY
, 
mö‹
, 0);

1036 i‡(
	`©omic_dec_™d_ã°
((
©omic_t
 *)&
fifo
[
mö‹
].
›n˙t
)) {

1037 i‡(
fifo
[
mö‹
].
mÆloc_ty≥
 == 'k') {

1038 
	`k‰ì
(
fifo
[
mö‹
].
mbx
.
buÁdr
);

1040 
	`v‰ì
(
fifo
[
mö‹
].
mbx
.
buÁdr
);

1042 
fifo
[
mö‹
].
h™dÀr
 = 
do_nŸhög
;

1043 
	`mbx_dñëe
(&(
fifo
[
mö‹
].
mbx
));

1044 
fifo
[
mö‹
].
pﬁ_asyn_≥nded
 = 0;

1045 
fifo
[
mö‹
].
asynq
 = 0;

1046 
fifo
[
mö‹
].
«me
[0] = 0;

1048  
fifo
[
mö‹
].
›n˙t
;

1049 
	}
}

1077 
	$πf_¸óã_h™dÀr
(
mö‹
, *
h™dÀr
)

1079 i‡(
mö‹
 >
MAX_FIFOS
 || !
h™dÀr
) {

1080  -
EINVAL
;

1083 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_CREATE_HANDLER
, 
mö‹
, 
h™dÀr
);

1085 
fifo
[
mö‹
].
h™dÀr
 = handler;

1087 
	}
}

1116 
RTAI_SYSCALL_MODE
 
	$πf_put
(
mö‹
, *
buf
, 
cou¡
)

1118 
VALID_FIFO
;

1120 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_PUT
, 
mö‹
, 
cou¡
);

1122 
cou¡
 -
	`mbx_£nd_wp
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 0);

1123  
cou¡
;

1124 
	}
}

1126 
RTAI_SYSCALL_MODE
 
	$πf_ovrwr_put
(
mö‹
, *
buf
, 
cou¡
)

1128 
VALID_FIFO
;

1129  
	`mbx_ovrwr_£nd
(&(
fifo
[
mö‹
].
mbx
), 
buf
, 
cou¡
, 0);

1130 
	}
}

1132 
RTAI_SYSCALL_MODE
 
	$πf_put_if
(
mö‹
, *
buf
, 
cou¡
)

1134 
VALID_FIFO
;

1136 
cou¡
 -
	`mbx_£nd_if
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 0);

1137  
cou¡
;

1138 
	}
}

1140 
RTAI_SYSCALL_MODE
 
	$πf_gë_avbs
(
mö‹
)

1142 
VALID_FIFO
;

1143  
fifo
[
mö‹
].
mbx
.
avbs
;

1144 
	}
}

1146 
RTAI_SYSCALL_MODE
 
	$πf_gë_‰bs
(
mö‹
)

1148 
VALID_FIFO
;

1149  
fifo
[
mö‹
].
mbx
.
‰bs
;

1150 
	}
}

1184 
RTAI_SYSCALL_MODE
 
	$πf_gë
(
mö‹
, *
buf
, 
cou¡
)

1186 
VALID_FIFO
;

1188 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_GET
, 
mö‹
, 
cou¡
);

1190 
cou¡
 -
	`mbx_ª˚ive_wp
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 0);

1191  
cou¡
;

1192 
	}
}

1194 
	$πf_evdΩ
(
mö‹
, *
msg
, 
msg_size
)

1196 
VALID_FIFO
;

1198  
msg_size
 - 
	`mbx_evdΩ
(&(
fifo
[
mö‹
].
mbx
), (**)(&
msg
), msg_size, 0);

1199 
	}
}

1201 
RTAI_SYSCALL_MODE
 
	$πf_gë_if
(
mö‹
, *
buf
, 
cou¡
)

1203 
VALID_FIFO
;

1205  
cou¡
 - 
	`mbx_ª˚ive_if
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 0);

1206 
	}
}

1229 
RTAI_SYSCALL_MODE
 
	$πf_£m_öô
(
mö‹
, 
vÆue
)

1231 
VALID_FIFO
;

1233 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_INIT
, 
mö‹
, 
vÆue
);

1235 
	`mbx_£m_öô
(&(
fifo
[
mö‹
].
£m
), 
vÆue
);

1237 
	}
}

1257 
RTAI_SYSCALL_MODE
 
	$πf_£m_po°
(
mö‹
)

1259 
VALID_FIFO
;

1261 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_POST
, 
mö‹
, 0);

1263 
	`mbx_£m_sig«l
(&(
fifo
[
mö‹
].
£m
), 0);

1265 
	}
}

1286 
RTAI_SYSCALL_MODE
 
	$πf_£m_åywaô
(
mö‹
)

1288 
VALID_FIFO
;

1290 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_TRY_WAIT
, 
mö‹
, 0);

1292  
	`mbx_£m_waô_if
(&(
fifo
[
mö‹
].
£m
));

1293 
	}
}

1313 
RTAI_SYSCALL_MODE
 
	$πf_£m_de°roy
(
mö‹
)

1315 
VALID_FIFO
;

1317 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_DESTROY
, 
mö‹
, 0);

1319  
	`mbx_£m_dñëe
(&(
fifo
[
mö‹
].
£m
));

1320 
	}
}

1322 
	$πf_›í
(
öode
 *öode, 
fûe
 *
fûp
)

1324 
	#DEFAULT_SIZE
 1000

	)

1325 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_OPEN
, 
	`MINOR
(
öode
->
i_rdev
), 
DEFAULT_SIZE
);

1327  
	`πf_¸óã
(
	`MINOR
(
öode
->
i_rdev
), 
DEFAULT_SIZE
);

1328 
	}
}

1330 
	$πf_Ásync
(
fd
, 
fûe
 *
fûp
, 
mode
)

1332 
mö‹
;

1333 
mö‹
 = 
	`MINOR
((
fûp
->
f_díåy
->
d_öode
)->
i_rdev
);

1335 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_FASYNC
, 
mö‹
, 
fd
);

1337  
	`Ásync_hñ≥r
(
fd
, 
fûp
, 
mode
, &(
fifo
[
mö‹
].
asynq
));

1338 i‡(!
mode
) {

1339 
fifo
[
mö‹
].
asynq
 = 0;

1341 
	}
}

1343 
	$πf_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
)

1345 
mö‹
;

1346 
mö‹
 = 
	`MINOR
(
öode
->
i_rdev
);

1348 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_RELEASE
, 
mö‹
, 0);

1350 i‡(
	`waôqueue_a˘ive
(&(
fifo
[
mö‹
].
pﬁlq
))) {

1351 
	`wake_up_öãºu±ibÀ
(&(
fifo
[
mö‹
].
pﬁlq
));

1353 
	`πf_Ásync
(-1, 
fûp
, 0);

1354 
	`£t_tsk_√ed_ªsched
(
cuºít
);

1355  
	`πf_de°roy
(
mö‹
);

1356 
	}
}

1358 
ssize_t
 
	$πf_ªad
(
fûe
 *
fûp
, *
buf
, 
size_t
 
cou¡
, 
loff_t
* 
µos
)

1360 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

1361 
mö‹
 = 
	`MINOR
(
öode
->
i_rdev
);

1362 
h™dÀr_ªt
;

1364 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_READ
, 
mö‹
, 
cou¡
);

1366 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
) {

1367 
cou¡
 -
	`mbx_ª˚ive_wp
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 1);

1368 i‡(!
cou¡
) {

1369  -
EAGAIN
;

1372 
cou¡
 -
	`mbx_ª˚ive_wjo
(&(
fifo
[
mö‹
].
mbx
), 
buf
, count, 1);

1375 i‡(
cou¡
) {

1376 
öode
->
i_©ime
 = 
CURRENT_TIME
;

1377 i‡((
h™dÀr_ªt
 = (
fifo
[
mö‹
].
h™dÀr
)(minor, 'r')) < 0) {

1378  
h™dÀr_ªt
;

1382  
cou¡
;

1383 
	}
}

1385 
ssize_t
 
	$πf_wrôe
(
fûe
 *
fûp
, c⁄° *
buf
, 
size_t
 
cou¡
, 
loff_t
* 
µos
)

1387 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

1388 
mö‹
 = 
	`MINOR
(
öode
->
i_rdev
);

1389 
h™dÀr_ªt
;

1391 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_WRITE
, 
mö‹
, 
cou¡
);

1393 i‡(
fûp
->
f_Êags
 & 
O_NONBLOCK
) {

1394 
cou¡
 -
	`mbx_£nd_wp
(&(
fifo
[
mö‹
].
mbx
), (*)
buf
, count, 1);

1395 i‡(!
cou¡
) {

1396  -
EAGAIN
;

1399 
cou¡
 -
	`mbx_£nd
(&(
fifo
[
mö‹
].
mbx
), (*)
buf
, count, 1);

1402 
öode
->
i_˘ime
 = inode->
i_mtime
 = 
CURRENT_TIME
;

1403 i‡((
h™dÀr_ªt
 = (
fifo
[
mö‹
].
h™dÀr
)(minor, 'w')) < 0) {

1404  
h™dÀr_ªt
;

1407  
cou¡
;

1408 
	}
}

1410 
	#DELAY
(
x
Ë(((x)*
HZ
 + 500)/1000)

	)

1412 #ifde‡
HAVE_UNLOCKED_IOCTL


1413 
	$πf_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
)

1415 
öode
 *öodê
fûp
->
f_díåy
->
d_öode
;

1417 
	$πf_io˘l
(
öode
 *öode, 
fûe
 *
fûp
, 
cmd
, 
¨g
)

1420 
mö‹
;

1421 
FIFO
 *
fif›
;

1423 
fif›
 = 
fifo
 + (
mö‹
 = 
	`MINOR
(
öode
->
i_rdev
));

1425 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_IOCTL
, 
mö‹
, 
cmd
);

1427 
cmd
) {

1428 
RESET
: {

1429  
	`πf_ª£t
(
mö‹
);

1431 
RESIZE
: {

1432  
	`πf_ªsize
(
mö‹
, 
¨g
);

1434 
SUSPEND_TIMED
: {

1435 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SUSPEND_TIMED
, 
	`DELAY
(
¨g
), 0);

1436 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

1437 
	`scheduÀ_timeout
(
	`DELAY
(
¨g
));

1438 i‡(
	`sig«l_≥ndög
(
cuºít
)) {

1439  -
ERESTARTSYS
;

1443 
OPEN_SIZED
: {

1444  
	`πf_¸óã
(
mö‹
, 
¨g
);

1446 
READ_ALL_AT_ONCE
: {

1447 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
;

1448 
h™dÀr_ªt
;

1449 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_READ_ALLATONCE
, 0, 0);

1450 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1451 
¨gs
.
cou¡
 -
	`mbx_ª˚ive
(&(
fif›
->
mbx
),árgs.
buf
,árgs.count, 1);

1452 i‡(
¨gs
.
cou¡
) {

1453 
öode
->
i_©ime
 = 
CURRENT_TIME
;

1454 i‡((
h™dÀr_ªt
 = (
fifo
[
mö‹
].
h™dÀr
)(minor,

1456  
h™dÀr_ªt
;

1458  
¨gs
.
cou¡
;

1462 
EAVESDROP
: {

1463 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
;

1464 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1465  
¨gs
.
cou¡
 - 
	`mbx_evdΩ
(&(
fif›
->
mbx
), (**)&¨gs.
buf
,árgs.count, 1);

1467 
READ_TIMED
: {

1468 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
;

1469 
h™dÀr_ªt
;

1470 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1471 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_READ_TIMED
, 
¨gs
.
cou¡
, 
	`DELAY
◊rgs.
dñay
));

1472 i‡(!
¨gs
.
dñay
) {

1473 
¨gs
.
cou¡
 -
	`mbx_ª˚ive_wp
(&(
fif›
->
mbx
),árgs.
buf
,árgs.count, 1);

1474 i‡(!
¨gs
.
cou¡
) {

1475  -
EAGAIN
;

1478 
¨gs
.
cou¡
 -
	`mbx_ª˚ive_timed
(&(
fif›
->
mbx
),árgs.
buf
,árgs.cou¡, 
	`DELAY
◊rgs.
dñay
), 1);

1480 i‡(
¨gs
.
cou¡
) {

1481 
öode
->
i_©ime
 = 
CURRENT_TIME
;

1483 i‡((
h™dÀr_ªt
 = (
fif›
->
h™dÀr
)(
mö‹
, 'r')) < 0) {

1484  
h™dÀr_ªt
;

1486  
¨gs
.
cou¡
;

1490 
READ_IF
: {

1491 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
;

1492 
h™dÀr_ªt
;

1493 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1494 
¨gs
.
cou¡
 -
	`mbx_ª˚ive_if
(&(
fif›
->
mbx
),árgs.
buf
,árgs.count, 1);

1495 i‡(
¨gs
.
cou¡
) {

1496 
öode
->
i_©ime
 = 
CURRENT_TIME
;

1497 i‡((
h™dÀr_ªt
 = (
fifo
[
mö‹
].
h™dÀr
)(minor, 'r')) < 0) {

1498  
h™dÀr_ªt
;

1500  
¨gs
.
cou¡
;

1504 
WRITE_TIMED
: {

1505 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
;

1506 
h™dÀr_ªt
;

1507 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1508 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_WRITE_TIMED
, 
¨gs
.
cou¡
, 
	`DELAY
◊rgs.
dñay
));

1509 i‡(!
¨gs
.
dñay
) {

1510 
¨gs
.
cou¡
 -
	`mbx_£nd_wp
(&(
fif›
->
mbx
),árgs.
buf
,árgs.count, 1);

1511 i‡(!
¨gs
.
cou¡
) {

1512  -
EAGAIN
;

1515 
¨gs
.
cou¡
 -
	`mbx_£nd_timed
(&(
fif›
->
mbx
),árgs.
buf
,árgs.cou¡, 
	`DELAY
◊rgs.
dñay
), 1);

1517 
öode
->
i_˘ime
 = inode->
i_mtime
 = 
CURRENT_TIME
;

1519 i‡((
h™dÀr_ªt
 = (
fif›
->
h™dÀr
)(
mö‹
, 'w')) < 0) {

1520  
h™dÀr_ªt
;

1522  
¨gs
.
cou¡
;

1524 
WRITE_IF
: {

1525 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
;

1526 
h™dÀr_ªt
;

1527 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1528 i‡(
¨gs
.
cou¡
) {

1529 
¨gs
.
cou¡
 -
	`mbx_£nd_wp
(&(
fif›
->
mbx
),árgs.
buf
,árgs.count, 1);

1530 i‡(!
¨gs
.
cou¡
) {

1531  -
EAGAIN
;

1534 
öode
->
i_˘ime
 = inode->
i_mtime
 = 
CURRENT_TIME
;

1535 i‡((
h™dÀr_ªt
 = (
fifo
[
mö‹
].
h™dÀr
)(minor, 'w')) <

1537  
h™dÀr_ªt
;

1539  
¨gs
.
cou¡
;

1541 
OVRWRITE
: {

1542 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
;

1543 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1544  
	`mbx_ovrwr_£nd
(&(
fif›
->
mbx
), (**)&
¨gs
.
buf
,árgs.
cou¡
, 1);

1546 
RTF_SEM_INIT
: {

1547 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_INIT
, 
mö‹
, 
¨g
);

1548 
	`mbx_£m_öô
(&(
fif›
->
£m
), 
¨g
);

1551 
RTF_SEM_WAIT
: {

1552 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_WAIT
, 
mö‹
, 0);

1553  
	`mbx_£m_waô
(&(
fif›
->
£m
));

1555 
RTF_SEM_TRYWAIT
: {

1556 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_TRY_WAIT
, 
mö‹
, 0);

1557  
	`mbx_£m_waô_if
(&(
fif›
->
£m
));

1559 
RTF_SEM_TIMED_WAIT
: {

1560 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_TIMED_WAIT
, 
mö‹
, 
	`DELAY
(
¨g
));

1561  
	`mbx_£m_waô_timed
(&(
fif›
->
£m
), 
	`DELAY
(
¨g
));

1563 
RTF_SEM_POST
: {

1564 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_POST
, 
mö‹
, 0);

1565 
	`mbx_£m_sig«l
(&(
fif›
->
£m
), 0);

1568 
RTF_SEM_DESTROY
: {

1569 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SEM_DESTROY
, 
mö‹
, 0);

1570 
	`mbx_£m_dñëe
(&(
fif›
->
£m
));

1573 
SET_ASYNC_SIG
: {

1574 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_SET_ASYNC_SIG
, 
¨g
, 0);

1575 
async_sig
 = 
¨g
;

1578 
FIONREAD
: {

1579  
	`put_u£r
(
fifo
[
mö‹
].
mbx
.
avbs
, (*)
¨g
);

1585 
RTF_GET_N_FIFOS
: {

1586  
MAX_FIFOS
;

1588 
RTF_GET_FIFO_INFO
: {

1589 
π_fifo_gë_öfo_°ru˘
 
ªq
;

1590 
i
, 
n
;

1592 
	`π_c›y_‰om_u£r
(&
ªq
, (*)
¨g
, (req));

1593  
i
 = 
ªq
.
fifo
, 
n
 = 0;

1594 
i
 < 
MAX_FIFOS
 && 
n
 < 
ªq
.n;

1595 
i
++, 
n
++

1597 
π_fifo_öfo_°ru˘
 
öfo
;

1599 
öfo
.
fifo_numbî
 = 
i
;

1600 
öfo
.
size
 = 
fifo
[
i
].
mbx
.size;

1601 
öfo
.
›n˙t
 = 
fifo
[
i
].opncnt;

1602 
öfo
.
avbs
 = 
fifo
[
i
].
mbx
.avbs;

1603 
öfo
.
‰bs
 = 
fifo
[
i
].
mbx
.frbs;

1604 
	`°∫˝y
(
öfo
.
«me
, 
fifo
[
i
].«me, 
RTF_NAMELEN
+1);

1605 
	`π_c›y_to_u£r
(
ªq
.
±r
 + 
n
, &
öfo
, (info));

1607  
n
;

1609 
RTF_NAMED_CREATE
: {

1610 °ru˘ { 
«me
[
RTF_NAMELEN
+1]; 
size
; } 
¨gs
;

1612 
	`π_c›y_‰om_u£r
(&
¨gs
, (*)
¨g
, (args));

1613  
	`πf_«med_¸óã
(
¨gs
.
«me
,árgs.
size
);

1615 
RTF_CREATE_NAMED
: {

1616 
«me
[
RTF_NAMELEN
+1];

1618 
	`π_c›y_‰om_u£r
(
«me
, (*)
¨g
, 
RTF_NAMELEN
+1);

1619  
	`πf_¸óã_«med
(
«me
);

1621 
RTF_NAME_LOOKUP
: {

1622 
«me
[
RTF_NAMELEN
+1];

1624 
	`π_c›y_‰om_u£r
(
«me
, (*)
¨g
, 
RTF_NAMELEN
+1);

1625  
	`πf_gëfifoby«me
(
«me
);

1627 
TCGETS
:

1629  -
ENOTTY
;

1632 
	`¥ötk
("RTAI-FIFO: cmd %d i†nŸ im∂emíãd\n", 
cmd
);

1633  -
EINVAL
;

1637 
	}
}

1639 
	$πf_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ
 *
waô
)

1641 
ªtvÆ
, 
mö‹
;

1643 
ªtvÆ
 = 0;

1644 
mö‹
 = 
	`MINOR
((
fûp
->
f_díåy
->
d_öode
)->
i_rdev
);

1645 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_POLL
, 
mö‹
, 0);

1646 
	`pﬁl_waô
(
fûp
, &(
fifo
[
mö‹
].
pﬁlq
), 
waô
);

1647 i‡(
fifo
[
mö‹
].
mbx
.
avbs
) {

1648 
ªtvÆ
 |
POLLIN
 | 
POLLRDNORM
;

1650 i‡(
fifo
[
mö‹
].
mbx
.
‰bs
) {

1651 
ªtvÆ
 |
POLLOUT
 | 
POLLWRNORM
;

1653  
ªtvÆ
;

1654 
	}
}

1656 
loff_t
 
	$πf_Œ£ek
(
fûe
 *
fûp
, 
loff_t
 
off£t
, 
‹igö
)

1658 
	`TRACE_RTAI_FIFO
(
TRACE_RTAI_EV_FIFO_LLSEEK
, 
	`MINOR
((
fûp
->
f_díåy
->
d_öode
)->
i_rdev
), 
off£t
);

1660  
	`πf_ª£t
(
	`MINOR
((
fûp
->
f_díåy
->
d_öode
)->
i_rdev
));

1661 
	}
}

1663 
fûe_›î©i⁄s
 
	gπf_f›s
 =

1665 
ow√r
: 
THIS_MODULE
,

1666 
Œ£ek
: 
πf_Œ£ek
,

1667 
ªad
: 
πf_ªad
,

1668 
wrôe
: 
πf_wrôe
,

1669 
pﬁl
: 
πf_pﬁl
,

1670 #ifde‡
HAVE_UNLOCKED_IOCTL


1671 
u∆ocked_io˘l
: 
πf_io˘l
,

1673 
io˘l
: 
πf_io˘l
,

1675 
›í
: 
πf_›í
,

1676 
ªÀa£
: 
πf_ªÀa£
,

1677 
Ásync
: 
πf_Ásync
,

1680 #ifde‡
CONFIG_DEVFS_FS


1681 
	~<löux/devfs_fs_kî√l.h
>

1682 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

1683 
devfs_h™dÀ_t
 
	gdevfs_h™dÀ
;

1687 
	gMaxFifos
 = 
MAX_FIFOS
;

1688 
RTAI_MODULE_PARM
(
MaxFifos
, );

1690 
	#LXRTEXT


	)

1692 #ifde‡
LXRTEXT


1694 
π_fun_íåy
 
	gπai_fifos_fun
[] = {

1695 [
_CREATE
] = { 0, 
πf_¸óã
 },

1696 [
_DESTROY
] = { 0, 
πf_de°roy
 },

1697 [
_PUT
] = { 0, 
πf_put
 },

1698 [
_GET
] = { 0, 
πf_gë
 },

1699 [
_RESET
] = { 0, 
πf_ª£t
 },

1700 [
_RESIZE
] = { 0, 
πf_ªsize
 },

1701 [
_SEM_INIT
] = { 0, 
πf_£m_öô
 },

1702 [
_SEM_DESTRY
] = { 0, 
πf_£m_de°roy
 },

1703 [
_SEM_POST
] = { 0, 
πf_£m_po°
 },

1704 [
_SEM_TRY
] = { 0, 
πf_£m_åywaô
 },

1705 [
_CREATE_NAMED
] = { 0, 
πf_¸óã_«med
 },

1706 [
_GETBY_NAME
] = { 0, 
πf_gëfifoby«me
 },

1707 [
_OVERWRITE
] = { 0, 
πf_ovrwr_put
 },

1708 [
_PUT_IF
] = { 0, 
πf_put_if
 },

1709 [
_GET_IF
] = { 0, 
πf_gë_if
 },

1710 [
_AVBS
] = { 0, 
πf_gë_avbs
 },

1711 [
_FRBS
] = { 0, 
πf_gë_‰bs
 }

1714 
	$ªgi°î_lxπ_fifos_suµ‹t
()

1716 i‡(
	`£t_π_fun_ext_ödex
(
πai_fifos_fun
, 
FUN_FIFOS_LXRT_INDX
)) {

1717 
	`¥ötk
("LXRT EXTENSION SLOT FOR FIFOS (%dËALREADY USED\n", 
FUN_FIFOS_LXRT_INDX
);

1718  -
EACCES
;

1721 
	}
}

1723 
	$uƒegi°î_lxπ_fifos_suµ‹t
()

1725 
	`ª£t_π_fun_ext_ödex
(
πai_fifos_fun
, 
FUN_FIFOS_LXRT_INDX
);

1726 
	}
}

1730 
	$ªgi°î_lxπ_fifos_suµ‹t
(Ë{  0; 
	}
}

1731 
	#uƒegi°î_lxπ_fifos_suµ‹t
()

	)

1735 
	#USE_UDEV_CLASS
 1

	)

1737 #i‡
USE_UDEV_CLASS


1738 
˛ass_t
 *
	gfifo_˛ass
 = 
NULL
;

1741 
	$__πai_fifos_öô
()

1743 
mö‹
;

1745 i‡(!(
fifo
 = (
FIFO
 *)
	`kmÆloc
(
MaxFifos
*(FIFO), 
GFP_KERNEL
))) {

1746 
	`¥ötk
("RTAI-FIFO: cannotállocate memory for FIFOS structure.\n");

1747  -
ENOSPC
;

1749 
	`mem£t
(
fifo
, 0, 
MaxFifos
*(
FIFO
));

1751 #i‡
USE_UDEV_CLASS


1752 i‡((
fifo_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "πai_fifos")Ë=
NULL
) {

1753 
	`¥ötk
("RTAI-FIFO: cannot create class.\n");

1754  -
EBUSY
;

1756 
mö‹
 = 0; mö‹ < 
MAX_FIFOS
; minor++) {

1757 i‡(
	`CLASS_DEVICE_CREATE
(
fifo_˛ass
, 
	`MKDEV
(
RTAI_FIFOS_MAJOR
, 
mö‹
), 
NULL
, "rtf%d", minor) == NULL) {

1758 
	`¥ötk
("RTAI-FIFO: cannotáttach class.\n");

1759 
	`˛ass_de°roy
(
fifo_˛ass
);

1760  -
EBUSY
;

1765 i‡(
	`ªgi°î_chrdev
(
RTAI_FIFOS_MAJOR
, "πai_fifo", &
πf_f›s
)) {

1766 
	`¥ötk
("RTAI-FIFO: c™nŸÑegi°î maj‹ %d.\n", 
RTAI_FIFOS_MAJOR
);

1767  -
EIO
;

1770 i‡((
fifo_§q
 = 
	`πf_ªque°_§q
(
πf_sy§q_h™dÀr
)) < 0) {

1771 
	`¥ötk
("RTAI-FIFO:Ço srqávailable inÑtai.\n");

1772  
fifo_§q
;

1774 
èskq
.
ö
 =Åaskq.
out
 = 
pﬁ_asyn_q
.in =Öol_asyn_q.out = 0;

1775 
async_sig
 = 
SIGIO
;

1777 
mö‹
 = 0; mö‹ < 
MAX_FIFOS
; minor++) {

1778 
fifo
[
mö‹
].
›n˙t
 = fifo[mö‹].
pﬁ_asyn_≥nded
 = 0;

1779 
	`öô_waôqueue_hód
(&
fifo
[
mö‹
].
pﬁlq
);

1780 
fifo
[
mö‹
].
asynq
 = 0;;

1781 
	`mbx_£m_öô
(&(
fifo
[
mö‹
].
£m
), 0);

1783 #ifde‡
CONFIG_PROC_FS


1784 
	`πai_¥oc_fifo_ªgi°î
();

1786  
	`ªgi°î_lxπ_fifos_suµ‹t
();

1787 
	}
}

1789 
	$__πai_fifos_exô
()

1791 
	`uƒegi°î_lxπ_fifos_suµ‹t
();

1792 
	`uƒegi°î_chrdev
(
RTAI_FIFOS_MAJOR
, "rtai_fifo");

1794 #i‡
USE_UDEV_CLASS


1796 
mö‹
;

1797 
mö‹
 = 0; mö‹ < 
MAX_FIFOS
; minor++) {

1798 
	`˛ass_devi˚_de°roy
(
fifo_˛ass
, 
	`MKDEV
(
RTAI_FIFOS_MAJOR
, 
mö‹
));

1800 
	`˛ass_de°roy
(
fifo_˛ass
);

1804 i‡(
	`πf_‰ì_§q
(
fifo_§q
) < 0) {

1805 
	`¥ötk
("RTAI-FIFO:Ñèò§q %d iŒegÆ o∏Æªady fªe.\n", 
fifo_§q
);

1807 #ifde‡
CONFIG_PROC_FS


1808 
	`πai_¥oc_fifo_uƒegi°î
();

1810 
	`k‰ì
(
fifo
);

1811 
	}
}

1813 #i‚de‡
CONFIG_RTAI_FIFOS_BUILTIN


1814 
moduÀ_öô
(
__πai_fifos_öô
);

1815 
moduÀ_exô
(
__πai_fifos_exô
);

1818 #ifde‡
CONFIG_PROC_FS


1821 
	$PROC_READ_FUN
(
πai_ªad_fifos
)

1823 
i
;

1824 
PROC_PRINT_VARS
;

1826 
	`PROC_PRINT
("RTAI Real Time fifos status.\n\n");

1827 
	`PROC_PRINT
("MaximumÇumbî o‡FIFOS %d.\n\n", 
MaxFifos
);

1828 
	`PROC_PRINT
("fifo No Open Cnt Buff Size handler mallocÅype");

1829 
	`PROC_PRINT
(" Name\n----------------");

1830 
	`PROC_PRINT
("-----------------------------------------\n");

1834 
i
 = 0; i < 
MAX_FIFOS
; i++) {

1835 i‡(
fifo
[
i
].
›n˙t
 > 0) {

1836 
	`PROC_PRINT
("%-8d %-9d %-10d %-10∞%-12s", 
i
,

1837 
fifo
[
i
].
›n˙t
, fifo[i].
mbx
.
size
,

1838 
fifo
[
i
].
h™dÀr
,

1839 
fifo
[
i
].
mÆloc_ty≥
 == 'v'

1842 
	`PROC_PRINT
("%s\n", 
fifo
[
i
].
«me
);

1847 
	}
}

1849 
PROC_READ_OPEN_OPS
(
πai_fifos_f›s
, 
πai_ªad_fifos
);

1851 
	$πai_¥oc_fifo_ªgi°î
()

1853 
¥oc_dú_íåy
 *
¥oc_fifo_ít
;

1854 
¥oc_fifo_ít
 = 
	`CREATE_PROC_ENTRY
("fifos", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
, &
πai_fifos_f›s
);

1855 i‡(!
¥oc_fifo_ít
) {

1856 
	`¥ötk
("UnableÅo initialize /proc/rtai/fifos\n");

1859 
	`SET_PROC_READ_ENTRY
(
¥oc_fifo_ít
, 
πai_ªad_fifos
);

1860 
PROC_PRINT_DONE
;

1861 
	}
}

1863 
	$πai_¥oc_fifo_uƒegi°î
()

1865 
	`ªmove_¥oc_íåy
("fifos", 
πai_¥oc_roŸ
);

1866 
	}
}

1875 
	$πf_«med_¸óã
(c⁄° *
«me
, 
size
)

1877 
mö‹
, 
îr
;

1878 
Êags
;

1880 i‡(
	`°æí
(
«me
Ë> 
RTF_NAMELEN
) {

1881  -
EINVAL
;

1883 
	`πf_•ö_lock_úqßve
(
Êags
, 
πf_«me_lock
);

1884 
mö‹
 = 0; mö‹ < 
MAX_FIFOS
; minor++) {

1885 i‡(!
	`°∫cmp
(
«me
, 
fifo
[
mö‹
].«me, 
RTF_NAMELEN
)) {

1887 } i‡(!
fifo
[
mö‹
].
›n˙t
 && !fifo[mö‹].
«me
[0]) {

1888 
	`°∫˝y
(
fifo
[
mö‹
].
«me
,Çame, 
RTF_NAMELEN
 + 1);

1889 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
πf_«me_lock
);

1890 i‡((
îr
 = 
	`πf_¸óã
(
mö‹
, 
size
)) < 0) {

1891 
fifo
[
mö‹
].
«me
[0] = 0;

1892  
îr
;

1894  
mö‹
;

1897 
	`πf_•ö_u∆ock_úqª°‹e
(
Êags
, 
πf_«me_lock
);

1898  -
EBUSY
;

1899 
	}
}

1901 
RTAI_SYSCALL_MODE
 
	$πf_¸óã_«med
(c⁄° *
«me
)

1903  
	`πf_«med_¸óã
(
«me
, 
DEFAULT_SIZE
);

1904 
	}
}

1906 
RTAI_SYSCALL_MODE
 
	$πf_gëfifoby«me
(c⁄° *
«me
)

1908 
mö‹
;

1910 i‡(
	`°æí
(
«me
Ë> 
RTF_NAMELEN
) {

1911  -
EINVAL
;

1913 
mö‹
 = 0; mö‹ < 
MAX_FIFOS
; minor++) {

1914 i‡–
fifo
[
mö‹
].
›n˙t
 &&

1915 !
	`°∫cmp
(
«me
, 
fifo
[
mö‹
].«me, 
RTF_NAMELEN
)

1917  
mö‹
;

1920  -
ENODEV
;

1921 
	}
}

1923 #ifde‡
CONFIG_KBUILD


1924 
EXPORT_SYMBOL
(
πf_¸óã
);

1925 
EXPORT_SYMBOL
(
πf_¸óã_h™dÀr
);

1926 
EXPORT_SYMBOL
(
πf_¸óã_«med
);

1927 
EXPORT_SYMBOL
(
πf_de°roy
);

1928 
EXPORT_SYMBOL
(
πf_evdΩ
);

1929 
EXPORT_SYMBOL
(
πf_gë
);

1930 
EXPORT_SYMBOL
(
πf_gë_if
);

1931 
EXPORT_SYMBOL
(
πf_gëfifoby«me
);

1932 
EXPORT_SYMBOL
(
πf_ovrwr_put
);

1933 
EXPORT_SYMBOL
(
πf_put
);

1934 
EXPORT_SYMBOL
(
πf_put_if
);

1935 
EXPORT_SYMBOL
(
πf_gë_avbs
);

1936 
EXPORT_SYMBOL
(
πf_gë_‰bs
);

1937 
EXPORT_SYMBOL
(
πf_ª£t
);

1938 
EXPORT_SYMBOL
(
πf_ªsize
);

1939 
EXPORT_SYMBOL
(
πf_£m_de°roy
);

1940 
EXPORT_SYMBOL
(
πf_£m_öô
);

1941 
EXPORT_SYMBOL
(
πf_£m_po°
);

1942 
EXPORT_SYMBOL
(
πf_£m_åywaô
);

1943 
EXPORT_SYMBOL
(
πf_«med_¸óã
);

	@/usr/src/rtai/base/ipc/fifos/rtai_fifos.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x6bc3fbc0, 
__VMLINUX_SYMBOL_STR
(
__uƒegi°î_chrdev
) },

22 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

23 { 0xd6ì688f, 
__VMLINUX_SYMBOL_STR
(
vmÆloc
) },

24 { 0x5603e8bd, 
__VMLINUX_SYMBOL_STR
(
sögÀ_›í
) },

25 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

26 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

27 { 0x34184a„, 
__VMLINUX_SYMBOL_STR
(
cuºít_kî√l_time
) },

28 { 0xa9475aˇ, 
__VMLINUX_SYMBOL_STR
(
sögÀ_ªÀa£
) },

29 { 0x4a70f94a, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

30 { 0x24ˇfbeb, 
__VMLINUX_SYMBOL_STR
(
ªmove_¥oc_íåy
) },

31 { 0xf19d9390, 
__VMLINUX_SYMBOL_STR
(
devi˚_de°roy
) },

32 { 0x27bc628d, 
__VMLINUX_SYMBOL_STR
(
__ªgi°î_chrdev
) },

33 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

34 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

35 { 0xcf012e93, 
__VMLINUX_SYMBOL_STR
(
£q_ªad
) },

36 { 0x68dfc59f, 
__VMLINUX_SYMBOL_STR
(
__öô_waôqueue_hód
) },

37 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

38 { 0x985fˇbb, 
__VMLINUX_SYMBOL_STR
(
¥oc_mkdú
) },

39 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

40 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

41 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

42 { 0xa1c76e0a, 
__VMLINUX_SYMBOL_STR
(
_c⁄d_ªsched
) },

43 { 0x9166Áda, 
__VMLINUX_SYMBOL_STR
(
°∫˝y
) },

44 { 0xf0a7af68, 
__VMLINUX_SYMBOL_STR
(
Ásync_hñ≥r
) },

45 { 0x5a921311, 
__VMLINUX_SYMBOL_STR
(
°∫cmp
) },

46 { 0x5f50e4eb, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_§q
) },

47 { 0xa16óe4a, 
__VMLINUX_SYMBOL_STR
(
devi˚_¸óã
) },

48 { 0x25455d5c, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_ext_ödex
) },

49 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

50 { 0x496187d3, 
__VMLINUX_SYMBOL_STR
(
π_≥nd_löux_§q
) },

51 { 0xb2fd5˚b, 
__VMLINUX_SYMBOL_STR
(
__put_u£r_4
) },

52 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

53 { 0x1000e51, 
__VMLINUX_SYMBOL_STR
(
scheduÀ
) },

54 { 0xd62c833f, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

55 { 0xd5560cbc, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

56 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

57 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

58 { 0xe45f60d8, 
__VMLINUX_SYMBOL_STR
(
__wake_up
) },

59 { 0x8c98615, 
__VMLINUX_SYMBOL_STR
(
¥oc_¸óã_d©a
) },

60 { 0xf2cb2´0, 
__VMLINUX_SYMBOL_STR
(
£q_l£ek
) },

61 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

62 { 0xcdde3d26, 
__VMLINUX_SYMBOL_STR
(
πai_¥oc_roŸ
) },

63 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

64 { 0xc67142d7, 
__VMLINUX_SYMBOL_STR
(
˛ass_de°roy
) },

65 { 0x8795724b, 
__VMLINUX_SYMBOL_STR
(
kûl_Ásync
) },

66 { 0x909a72e2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_ext_ödex
) },

67 { 0x7d056198, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_§q
) },

68 { 0x124cde05, 
__VMLINUX_SYMBOL_STR
(
__˛ass_¸óã
) },

71 c⁄° 
	g__moduÀ_dïíds
[]

72 
__u£d


73 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

77 
MODULE_INFO
(
§cvîsi⁄
, "00F1F66A7BEF930CD766D13");

	@/usr/src/rtai/base/ipc/mbx/mbx.c

31 
	~<löux/kî√l.h
>

32 
	~<löux/moduÀ.h
>

34 
	~<asm/uac˚ss.h
>

36 
	~<πai_schedc‹e.h
>

37 
	~<πai_¥öhî.h
>

39 
MODULE_LICENSE
("GPL");

43 
	#_mbx_sig«l
(
mbx
, 
blckd⁄
) \

45 
Êags
; \

46 
RT_TASK
 *
èsk
; \

47 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
(); \

48 i‡((
èsk
 = 
mbx
->
waôög_èsk
)) { \

49 
	`ªm_timed_èsk
(
èsk
); \

50 
èsk
->
blocked_⁄
 = 
blckd⁄
; \

51 
mbx
->
waôög_èsk
 = 
NULL
; \

52 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_MBXSUSP
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) { \

53 
	`íq_ªady_èsk
(
èsk
); \

54 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
()); \

57 
	`π_globÆ_ª°‹e_Êags
(
Êags
); \

58 } 0)

	)

60 
	$mbx_dñëe_sig«l
(
MBX
 *
mbx
)

62 
	`_mbx_sig«l
(
mbx
, 
RTP_OBJREM
);

63 
	}
}

65 
	$mbx_sig«l
(
MBX
 *
mbx
)

67 
	`_mbx_sig«l
(
mbx
, 
NULL
);

68 
	}
}

70 
	$mbx_waô
(
MBX
 *
mbx
, *
‰avbs
, 
RT_TASK
 *
π_cuºít
)

72 
Êags
;

74 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

75 i‡(!(*
‰avbs
)) {

76 
ªtvÆ
;

77 
π_cuºít
->
°©e
 |
RT_SCHED_MBXSUSP
;

78 
	`ªm_ªady_cuºít
(
π_cuºít
);

79 
π_cuºít
->
blocked_⁄
 = (*)
mbx
;

80 
mbx
->
waôög_èsk
 = 
π_cuºít
;

81 
	`π_scheduÀ
();

82 i‡(
	`u∆ikñy
(
ªtvÆ
 = ()
π_cuºít
->
blocked_⁄
)) {

83 
mbx
->
waôög_èsk
 = 
NULL
;

84 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

85  
ªtvÆ
;

88 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

90 
	}
}

92 
	$mbx_waô_u¡û
(
MBX
 *
mbx
, *
‰avbs
, 
RTIME
 
time
, 
RT_TASK
 *
π_cuºít
)

94 
Êags
;

96 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

97 i‡(!(*
‰avbs
)) {

98 *
ªç
;

99 
π_cuºít
->
blocked_⁄
 = (*)
mbx
;

100 
mbx
->
waôög_èsk
 = 
π_cuºít
;

101 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_smp_time_h
[
	`πai_˝uid
()]) {

102 
π_cuºít
->
°©e
 |(
RT_SCHED_MBXSUSP
 | 
RT_SCHED_DELAYED
);

103 
	`ªm_ªady_cuºít
(
π_cuºít
);

104 
	`íq_timed_èsk
(
π_cuºít
);

105 
	`π_scheduÀ
();

107 i‡(
	`u∆ikñy
((
ªç
 = 
π_cuºít
->
blocked_⁄
Ë!
NULL
)) {

108 
mbx
->
waôög_èsk
 = 
NULL
;

109 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

110  
	`likñy
(
ªç
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : (ªç =
RTP_UNBLKD
 ? 
RTE_UNBLKD
 : 
RTE_OBJREM
);

113 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

115 
	}
}

117 
	#MOD_SIZE
(
ödx
Ë((ödxË< 
mbx
->
size
 ? (ödxË: (ödxË- mbx->size)

	)

119 
	$mbxput
(
MBX
 *
mbx
, **
msg
, 
msg_size
, 
•a˚
)

121 
Êags
;

122 
to˝y
;

124 
msg_size
 > 0 && 
mbx
->
‰bs
) {

125 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

126 
to˝y
 = 
msg_size
;

128 i‡(
to˝y
 > 
mbx
->
‰bs
) {

129 
to˝y
 = 
mbx
->
‰bs
;

131 i‡(
•a˚
) {

132 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

134 
	`π_c›y_‰om_u£r
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

136 
Êags
 = 
	`π_•ö_lock_úqßve
(&(
mbx
->
lock
));

137 
mbx
->
‰bs
 -
to˝y
;

138 
mbx
->
avbs
 +
to˝y
;

139 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &(
mbx
->
lock
));

140 
msg_size
 -
to˝y
;

141 *
msg
 +
to˝y
;

142 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

144  
msg_size
;

145 
	}
}

147 
	$mbxovrwΩut
(
MBX
 *
mbx
, **
msg
, 
msg_size
, 
•a˚
)

149 
Êags
;

150 
to˝y
,
n
;

152 i‡((
n
 = 
msg_size
 - 
mbx
->
size
) > 0) {

153 *
msg
 +
n
;

154 
msg_size
 -
n
;

156 
msg_size
 > 0) {

157 i‡(
mbx
->
‰bs
) {

158 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

159 
to˝y
 = 
msg_size
;

161 i‡(
to˝y
 > 
mbx
->
‰bs
) {

162 
to˝y
 = 
mbx
->
‰bs
;

164 i‡(
•a˚
) {

165 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

167 
	`π_c›y_‰om_u£r
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

169 
Êags
 = 
	`π_•ö_lock_úqßve
(&(
mbx
->
lock
));

170 
mbx
->
‰bs
 -
to˝y
;

171 
mbx
->
avbs
 +
to˝y
;

172 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &(
mbx
->
lock
));

173 
msg_size
 -
to˝y
;

174 *
msg
 +
to˝y
;

175 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

177 i‡(
msg_size
) {

178 (
n
 = 
msg_size
 - 
mbx
->
‰bs
) > 0) {

179 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
fbyã
Ë> 
n
) {

180 
to˝y
 = 
n
;

182 i‡(
to˝y
 > 
mbx
->
avbs
) {

183 
to˝y
 = 
mbx
->
avbs
;

185 
Êags
 = 
	`π_•ö_lock_úqßve
(&(
mbx
->
lock
));

186 
mbx
->
‰bs
 +
to˝y
;

187 
mbx
->
avbs
 -
to˝y
;

188 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &(
mbx
->
lock
));

189 
mbx
->
fbyã
 = 
	`MOD_SIZE
(mbx->fbyã + 
to˝y
);

194 
	}
}

196 
	$mbxgë
(
MBX
 *
mbx
, **
msg
, 
msg_size
, 
•a˚
)

198 
Êags
;

199 
to˝y
;

201 
msg_size
 > 0 && 
mbx
->
avbs
) {

202 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
fbyã
Ë> 
msg_size
) {

203 
to˝y
 = 
msg_size
;

205 i‡(
to˝y
 > 
mbx
->
avbs
) {

206 
to˝y
 = 
mbx
->
avbs
;

208 i‡(
•a˚
) {

209 
	`mem˝y
(*
msg
, 
mbx
->
buÁdr
 + mbx->
fbyã
, 
to˝y
);

211 
	`π_c›y_to_u£r
(*
msg
, 
mbx
->
buÁdr
 + mbx->
fbyã
, 
to˝y
);

213 
Êags
 = 
	`π_•ö_lock_úqßve
(&(
mbx
->
lock
));

214 
mbx
->
‰bs
 +
to˝y
;

215 
mbx
->
avbs
 -
to˝y
;

216 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &(
mbx
->
lock
));

217 
msg_size
 -
to˝y
;

218 *
msg
 +
to˝y
;

219 
mbx
->
fbyã
 = 
	`MOD_SIZE
(mbx->fbyã + 
to˝y
);

221  
msg_size
;

222 
	}
}

224 
	$mbxevdΩ
(
MBX
 *
mbx
, **
msg
, 
msg_size
, 
•a˚
)

226 
to˝y
, 
fbyã
, 
avbs
;

228 
fbyã
 = 
mbx
->fbyte;

229 
avbs
 = 
mbx
->avbs;

230 
msg_size
 > 0 && 
avbs
) {

231 i‡((
to˝y
 = 
mbx
->
size
 - 
fbyã
Ë> 
msg_size
) {

232 
to˝y
 = 
msg_size
;

234 i‡(
to˝y
 > 
avbs
) {

235 
to˝y
 = 
avbs
;

237 i‡(
•a˚
) {

238 
	`mem˝y
(*
msg
, 
mbx
->
buÁdr
 + 
fbyã
, 
to˝y
);

240 
	`π_c›y_to_u£r
(*
msg
, 
mbx
->
buÁdr
 + mbx->
fbyã
, 
to˝y
);

242 
avbs
 -
to˝y
;

243 
msg_size
 -
to˝y
;

244 *
msg
 +
to˝y
;

245 
fbyã
 = 
	`MOD_SIZE
(fbyã + 
to˝y
);

247  
msg_size
;

248 
	}
}

269 
RTAI_SYSCALL_MODE
 
	$_π_mbx_evdΩ
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

271  
	`mbxevdΩ
(
mbx
, (**)(&
msg
), 
msg_size
, 
•a˚
);

272 
	}
}

275 
	#CHK_MBX_MAGIC
 \

276 dÿ{ i‡(!
mbx
 || mbx->
magic
 !
RT_MBX_MAGIC
Ë (
CONFIG_RTAI_USE_NEWERR
 ? 
RTE_OBJINV
 : -
EINVAL
); } 0)

	)

278 
	#MBX_RET
(
msg_size
, 
ªtvÆ
) \

279 (
CONFIG_RTAI_USE_NEWERR
 ? 
ªtvÆ
 : 
msg_size
)

	)

301 
RTAI_SYSCALL_MODE
 
	$π_ty≥d_mbx_öô
(
MBX
 *
mbx
, 
size
, 
ty≥
)

303 i‡(!(
mbx
->
buÁdr
 = 
	`π_mÆloc
(
size
))) {

304  -
ENOMEM
;

306 
	`π_ty≥d_£m_öô
(&(
mbx
->
¢d£m
), 1, 
ty≥
 & 3 ?Åy≥ : 
BIN_SEM
 |Åype);

307 
	`π_ty≥d_£m_öô
(&(
mbx
->
rcv£m
), 1, 
ty≥
 & 3 ?Åy≥ : 
BIN_SEM
 |Åype);

308 
mbx
->
magic
 = 
RT_MBX_MAGIC
;

309 
mbx
->
size
 = mbx->
‰bs
 = size;

310 
mbx
->
owndby
 = mbx->
waôög_èsk
 = 
NULL
;

311 
mbx
->
fbyã
 = mbx->
lbyã
 = mbx->
avbs
 = 0;

312 
	`•ö_lock_öô
(&(
mbx
->
lock
));

313 #ifde‡
CONFIG_RTAI_RT_POLL


314 
mbx
->
pﬁl_ªcv
.
pﬁlq
.
¥ev
 = mbx->pﬁl_ªcv.pﬁlq.
√xt
 = &(mbx->poll_recv.pollq);

315 
mbx
->
pﬁl_£nd
.
pﬁlq
.
¥ev
 = mbx->pﬁl_£nd.pﬁlq.
√xt
 = &(mbx->poll_send.pollq);

316 
mbx
->
pﬁl_ªcv
.
pﬁlq
.
èsk
 = mbx->
pﬁl_£nd
.pﬁlq.èsk = 
NULL
;

317 
	`•ö_lock_öô
(&(
mbx
->
pﬁl_ªcv
.
pﬁlock
));

318 
	`•ö_lock_öô
(&(
mbx
->
pﬁl_£nd
.
pﬁlock
));

321 
	}
}

357 
	$π_mbx_öô
(
MBX
 *
mbx
, 
size
)

359  
	`π_ty≥d_mbx_öô
(
mbx
, 
size
, 
PRIO_Q
);

360 
	}
}

377 
RTAI_SYSCALL_MODE
 
	$π_mbx_dñëe
(
MBX
 *
mbx
)

379 
CHK_MBX_MAGIC
;

380 
mbx
->
magic
 = 0;

381 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 
RTE_OBJREM
);

382 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_£nd
, 
RTE_OBJREM
);

383 i‡(
	`π_£m_dñëe
(&
mbx
->
¢d£m
Ë||Ñt_£m_dñëe(&mbx->
rcv£m
)) {

384  -
EFAULT
;

386 
mbx
->
waôög_èsk
) {

387 
	`mbx_dñëe_sig«l
(
mbx
);

389 
	`π_‰ì
(
mbx
->
buÁdr
);

391 
	}
}

416 
RTAI_SYSCALL_MODE
 
	$_π_mbx_£nd
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

418 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

419 
ªtvÆ
;

421 
CHK_MBX_MAGIC
;

422 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mbx
->
¢d£m
)) > 1) {

423  
	`MBX_RET
(
msg_size
, 
ªtvÆ
);

425 
msg_size
) {

426 i‡((
ªtvÆ
 = 
	`mbx_waô
(
mbx
, &mbx->
‰bs
, 
π_cuºít
))) {

427 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

428 
ªtvÆ
 = 
	`MBX_RET
(
msg_size
,Ñetval);

429 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 
ªtvÆ
);

430  
ªtvÆ
;

432 
msg_size
 = 
	`mbxput
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

433 
	`mbx_sig«l
(
mbx
);

435 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

436 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 0);

438 
	}
}

457 
RTAI_SYSCALL_MODE
 
	$_π_mbx_£nd_wp
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

459 
Êags
;

460 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

461 
size
 = 
msg_size
;

463 
CHK_MBX_MAGIC
;

464 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

465 i‡(
mbx
->
¢d£m
.
cou¡
 > 0 && mbx->
‰bs
) {

466 
mbx
->
¢d£m
.
cou¡
 = 0;

467 i‡(
mbx
->
¢d£m
.
ty≥
 > 0) {

468 
mbx
->
¢d£m
.
owndby
 = 
π_cuºít
;

469 
	`íqueue_ªsqñ
(&
mbx
->
¢d£m
.
ªsq
, 
π_cuºít
);

471 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

472 
msg_size
 = 
	`mbxput
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

473 
	`mbx_sig«l
(
mbx
);

474 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

476 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

478 i‡(
msg_size
 < 
size
) {

479 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 0);

481  
msg_size
;

482 
	}
}

498 
RTAI_SYSCALL_MODE
 
	$_π_mbx_£nd_if
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

500 
Êags
;

501 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

503 
CHK_MBX_MAGIC
;

504 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

505 i‡(
mbx
->
¢d£m
.
cou¡
 > 0 && 
msg_size
 <mbx->
‰bs
) {

506 
mbx
->
¢d£m
.
cou¡
 = 0;

507 i‡(
mbx
->
¢d£m
.
ty≥
 > 0) {

508 
mbx
->
¢d£m
.
owndby
 = 
π_cuºít
;

509 
	`íqueue_ªsqñ
(&
mbx
->
¢d£m
.
ªsq
, 
π_cuºít
);

511 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

512 
	`mbxput
(
mbx
, (**)(&
msg
), 
msg_size
, 
•a˚
);

513 
	`mbx_sig«l
(
mbx
);

514 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

515 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 0);

518 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

519  
msg_size
;

520 
	}
}

546 
RTAI_SYSCALL_MODE
 
	$_π_mbx_£nd_u¡û
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
, 
•a˚
)

548 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

549 
ªtvÆ
;

551 
CHK_MBX_MAGIC
;

552 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mbx
->
¢d£m
, 
time
)) > 1) {

553  
	`MBX_RET
(
msg_size
, 
ªtvÆ
);

555 
msg_size
) {

556 i‡((
ªtvÆ
 = 
	`mbx_waô_u¡û
(
mbx
, &mbx->
‰bs
, 
time
, 
π_cuºít
))) {

557 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

558 
ªtvÆ
 = 
	`MBX_RET
(
msg_size
,Ñetval);

559 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 
ªtvÆ
);

560  
ªtvÆ
;

562 
msg_size
 = 
	`mbxput
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

563 
	`mbx_sig«l
(
mbx
);

565 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

566 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 0);

568 
	}
}

594 
RTAI_SYSCALL_MODE
 
	$_π_mbx_£nd_timed
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
)

596  
	`_π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`gë_time
(Ë+ 
dñay
, 
•a˚
);

597 
	}
}

619 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ª˚ive
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

621 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

622 
ªtvÆ
;

624 
CHK_MBX_MAGIC
;

625 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mbx
->
rcv£m
)) > 1) {

626  
msg_size
;

628 
msg_size
) {

629 i‡((
ªtvÆ
 = 
	`mbx_waô
(
mbx
, &mbx->
avbs
, 
π_cuºít
))) {

630 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

631 
ªtvÆ
 = 
	`MBX_RET
(
msg_size
,Ñetval);

632 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 
ªtvÆ
);

633  
ªtvÆ
;

634  
	`MBX_RET
(
msg_size
, 
ªtvÆ
);

636 
msg_size
 = 
	`mbxgë
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

637 
	`mbx_sig«l
(
mbx
);

639 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

640 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_£nd
, 0);

642 
	}
}

662 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ª˚ive_wp
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

664 
Êags
;

665 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

666 
size
 = 
msg_size
;

668 
CHK_MBX_MAGIC
;

669 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

670 i‡(
mbx
->
rcv£m
.
cou¡
 > 0 && mbx->
avbs
) {

671 
mbx
->
rcv£m
.
cou¡
 = 0;

672 i‡(
mbx
->
rcv£m
.
ty≥
 > 0) {

673 
mbx
->
rcv£m
.
owndby
 = 
π_cuºít
;

674 
	`íqueue_ªsqñ
(&
mbx
->
rcv£m
.
ªsq
, 
π_cuºít
);

676 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

677 
msg_size
 = 
	`mbxgë
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

678 
	`mbx_sig«l
(
mbx
);

679 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

681 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

683 i‡(
msg_size
 < 
size
) {

684 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_£nd
, 0);

686  
msg_size
;

687 
	}
}

708 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ª˚ive_if
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

710 
Êags
;

711 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

713 
CHK_MBX_MAGIC
;

714 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

715 i‡(
mbx
->
rcv£m
.
cou¡
 > 0 && 
msg_size
 <mbx->
avbs
) {

716 
mbx
->
rcv£m
.
cou¡
 = 0;

717 i‡(
mbx
->
rcv£m
.
ty≥
 > 0) {

718 
mbx
->
rcv£m
.
owndby
 = 
π_cuºít
;

719 
	`íqueue_ªsqñ
(&
mbx
->
rcv£m
.
ªsq
, 
π_cuºít
);

721 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

722 
	`mbxgë
(
mbx
, (**)(&
msg
), 
msg_size
, 
•a˚
);

723 
	`mbx_sig«l
(
mbx
);

724 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

725 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_£nd
, 0);

728 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

729  
msg_size
;

730 
	}
}

756 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ª˚ive_u¡û
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
, 
•a˚
)

758 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

759 
ªtvÆ
;

761 
CHK_MBX_MAGIC
;

762 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mbx
->
rcv£m
, 
time
)) > 1) {

763  
	`MBX_RET
(
msg_size
, 
ªtvÆ
);

765 
msg_size
) {

766 i‡((
ªtvÆ
 = 
	`mbx_waô_u¡û
(
mbx
, &mbx->
avbs
, 
time
, 
π_cuºít
))) {

767 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

768 
ªtvÆ
 = 
	`MBX_RET
(
msg_size
,Ñetval);

769 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_ªcv
, 
ªtvÆ
);

770  
ªtvÆ
;

772 
msg_size
 = 
	`mbxgë
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

773 
	`mbx_sig«l
(
mbx
);

775 
	`π_£m_sig«l
(&
mbx
->
rcv£m
);

776 
	`π_wakeup_pﬁÀrs
(&
mbx
->
pﬁl_£nd
, 0);

778 
	}
}

804 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ª˚ive_timed
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
)

806  
	`_π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`gë_time
(Ë+ 
dñay
, 
•a˚
);

807 
	}
}

823 
RTAI_SYSCALL_MODE
 
	$_π_mbx_ovrwr_£nd
(
MBX
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
)

825 
Êags
;

826 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
;

828 
CHK_MBX_MAGIC
;

830 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

831 i‡(
mbx
->
¢d£m
.
cou¡
 > 0) {

832 
mbx
->
¢d£m
.
cou¡
 = 0;

833 i‡(
mbx
->
¢d£m
.
ty≥
 > 0) {

834 
mbx
->
¢d£m
.
owndby
 = 
π_cuºít
;

835 
	`íqueue_ªsqñ
(&
mbx
->
¢d£m
.
ªsq
, 
π_cuºít
);

837 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

838 
msg_size
 = 
	`mbxovrwΩut
(
mbx
, (**)(&
msg
), msg_size, 
•a˚
);

839 
	`mbx_sig«l
(
mbx
);

840 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

842 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

844  
msg_size
;

845 
	}
}

849 
	~<πai_ªgi°ry.h
>

874 
RTAI_SYSCALL_MODE
 
MBX
 *
	$_π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
)

876 
MBX
 *
mbx
;

878 i‡((
mbx
 = 
	`π_gë_adr_˙t
(
mbx_«me
))) {

879  
mbx
;

881 i‡((
mbx
 = 
	`π_mÆloc
((
MBX
)))) {

882 
	`π_ty≥d_mbx_öô
(
mbx
, 
size
, 
qty≥
);

883 i‡(
	`π_ªgi°î
(
mbx_«me
, 
mbx
, 
IS_MBX
, 0)) {

884  
mbx
;

886 
	`π_mbx_dñëe
(
mbx
);

888 
	`π_‰ì
(
mbx
);

889  (
MBX
 *)0;

890 
	}
}

913 
RTAI_SYSCALL_MODE
 
	$π_«med_mbx_dñëe
(
MBX
 *
mbx
)

915 
ªt
;

916 i‡(!(
ªt
 = 
	`π_drg_⁄_adr_˙t
(
mbx
))) {

917 i‡(!
	`π_mbx_dñëe
(
mbx
)) {

918 
	`π_‰ì
(
mbx
);

921  -
EFAULT
;

924  
ªt
;

925 
	}
}

929 
π_«tive_fun_íåy
 
	gπ_mbx_íåõs
[] = {

931 { { 0, 
π_ty≥d_mbx_öô
 }, 
TYPED_MBX_INIT
 },

932 { { 0, 
π_mbx_dñëe
 }, 
MBX_DELETE
 },

933 { { 1, 
_π_mbx_£nd
 }, 
MBX_SEND
 },

934 { { 1, 
_π_mbx_£nd_wp
 }, 
MBX_SEND_WP
 },

935 { { 1, 
_π_mbx_£nd_if
 }, 
MBX_SEND_IF
 },

936 { { 1, 
_π_mbx_£nd_u¡û
 }, 
MBX_SEND_UNTIL
 },

937 { { 1, 
_π_mbx_£nd_timed
 }, 
MBX_SEND_TIMED
 },

938 { { 1, 
_π_mbx_ovrwr_£nd
 }, 
MBX_OVRWR_SEND
 },

939 { { 1, 
_π_mbx_evdΩ
 }, 
MBX_EVDRP
 },

940 { { 1, 
_π_mbx_ª˚ive
 }, 
MBX_RECEIVE
 },

941 { { 1, 
_π_mbx_ª˚ive_wp
 }, 
MBX_RECEIVE_WP
 },

942 { { 1, 
_π_mbx_ª˚ive_if
 }, 
MBX_RECEIVE_IF
 },

943 { { 1, 
_π_mbx_ª˚ive_u¡û
 }, 
MBX_RECEIVE_UNTIL
 },

944 { { 1, 
_π_mbx_ª˚ive_timed
 }, 
MBX_RECEIVE_TIMED
 },

945 { { 0, 
_π_ty≥d_«med_mbx_öô
 }, 
NAMED_MBX_INIT
 },

946 { { 0, 
π_«med_mbx_dñëe
 }, 
NAMED_MBX_DELETE
 },

950 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

951 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

953 
	$ªcv_blocks
(*
mbx
Ë{  ((
MBX
 *)mbx)->
avbs
 <0; 
	}
}

954 
	$£nd_blocks
(*
mbx
Ë{  ((
MBX
 *)mbx)->
‰bs
 <0; 
	}
}

956 
	$__πai_mbx_öô
 ()

958 
π_pﬁl_of°fun
[
RT_POLL_MBX_RECV
].
t›ﬁl
 = 
ªcv_blocks
;

959 
π_pﬁl_of°fun
[
RT_POLL_MBX_SEND
].
t›ﬁl
 = 
£nd_blocks
;

960  
	`£t_π_fun_íåõs
(
π_mbx_íåõs
);

961 
	}
}

963 
	$__πai_mbx_exô
 ()

965 
π_pﬁl_of°fun
[
RT_POLL_MBX_RECV
].
t›ﬁl
 = 
NULL
;

966 
π_pﬁl_of°fun
[
RT_POLL_MBX_SEND
].
t›ﬁl
 = 
NULL
;

967 
	`ª£t_π_fun_íåõs
(
π_mbx_íåõs
);

968 
	}
}

972 #i‚de‡
CONFIG_RTAI_MBX_BUILTIN


973 
moduÀ_öô
(
__πai_mbx_öô
);

974 
moduÀ_exô
(
__πai_mbx_exô
);

977 #ifde‡
CONFIG_KBUILD


978 
EXPORT_SYMBOL
(
_π_mbx_evdΩ
);

979 
EXPORT_SYMBOL
(
π_ty≥d_mbx_öô
);

980 
EXPORT_SYMBOL
(
π_mbx_öô
);

981 
EXPORT_SYMBOL
(
π_mbx_dñëe
);

982 
EXPORT_SYMBOL
(
_π_mbx_£nd
);

983 
EXPORT_SYMBOL
(
_π_mbx_£nd_wp
);

984 
EXPORT_SYMBOL
(
_π_mbx_£nd_if
);

985 
EXPORT_SYMBOL
(
_π_mbx_£nd_u¡û
);

986 
EXPORT_SYMBOL
(
_π_mbx_£nd_timed
);

987 
EXPORT_SYMBOL
(
_π_mbx_ª˚ive
);

988 
EXPORT_SYMBOL
(
_π_mbx_ª˚ive_wp
);

989 
EXPORT_SYMBOL
(
_π_mbx_ª˚ive_if
);

990 
EXPORT_SYMBOL
(
_π_mbx_ª˚ive_u¡û
);

991 
EXPORT_SYMBOL
(
_π_mbx_ª˚ive_timed
);

992 
EXPORT_SYMBOL
(
_π_mbx_ovrwr_£nd
);

993 
EXPORT_SYMBOL
(
_π_ty≥d_«med_mbx_öô
);

994 
EXPORT_SYMBOL
(
π_«med_mbx_dñëe
);

	@/usr/src/rtai/base/ipc/mbx/rtai_mbx.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa1768906, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô
) },

22 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

23 { 0xØc1311b, 
__VMLINUX_SYMBOL_STR
(
π_£m_dñëe
) },

24 { 0x50819030, 
__VMLINUX_SYMBOL_STR
(
π_pﬁl_of°fun
) },

25 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

26 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

27 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

28 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

29 { 0x5a23f0´, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr_˙t
) },

30 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

31 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

32 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

33 { 0x1b˚b0ba, 
__VMLINUX_SYMBOL_STR
(
π_£m_sig«l
) },

34 { 0x592d73ˇ, 
__VMLINUX_SYMBOL_STR
(
π_drg_⁄_adr_˙t
) },

35 { 0xc4723f52, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_u¡û
) },

36 { 0xe01e0c16, 
__VMLINUX_SYMBOL_STR
(
π_smp_time_h
) },

37 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

38 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

39 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

40 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

41 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

42 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

43 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

44 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

45 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

46 { 0xe70f28b6, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î
) },

47 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

48 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

49 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

50 { 0x5c˚6be5, 
__VMLINUX_SYMBOL_STR
(
π_ty≥d_£m_öô
) },

51 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

54 c⁄° 
	g__moduÀ_dïíds
[]

55 
__u£d


56 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

60 
MODULE_INFO
(
§cvîsi⁄
, "96E7BFE8C561B1F8B9EE89E");

	@/usr/src/rtai/base/ipc/mq/mq.c

30 
	~<löux/moduÀ.h
>

31 
	~<löux/kî√l.h
>

32 
	~<löux/vîsi⁄.h
>

33 
	~<löux/î∫o.h
>

34 
	~<löux/°©.h
>

35 
	~<asm/uac˚ss.h
>

36 #ifde‡
CONFIG_PROC_FS


37 
	~<löux/¥oc_fs.h
>

38 
¥oc_dú_íåy
 *
πai_¥oc_roŸ
;

40 
	~<πai_schedc‹e.h
>

41 
	~<πai_¥oc_fs.h
>

42 
	~<πai_sig«l.h
>

44 
MODULE_LICENSE
("GPL");

46 
	#mq_c⁄d_t
 
SEM


	)

47 
	#mq_muãx_t
 
SEM


	)

48 
	#mq_muãx_öô
(
muãx
, 
©å
Ë
	`π_ty≥d_£m_öô
(muãx, 1, 
BIN_SEM
 | 
PRIO_Q
)

	)

49 
	#mq_muãx_u∆ock
 
π_£m_sig«l


	)

50 
	#mq_muãx_lock
(
muãx
) \

52 i‡(
	`abs
(
	`π_£m_waô
(
muãx
)Ë>
RTE_LOWERR
) { \

53  -
EBADF
; \

55 } 0)

	)

56 
	#mq_muãx_timedlock
(
muãx
, 
ab°ime
) \

58 
RTIME
 
t
 = 
	`time•ec2cou¡
(
ab°ime
); \

59 
ªt
; \

60 i‡((
ªt
 = 
	`abs
(
	`π_£m_waô_u¡û
(
muãx
, 
t
))Ë>
RTE_LOWERR
) { \

61  
ªt
 =
RTE_TIMOUT
 ? -
ETIMEDOUT
 : -
EBADF
; \

63 } 0)

	)

64 
	#mq_muãx_åylock
 
π_£m_waô_if


	)

65 
	#mq_muãx_de°roy
 
π_£m_dñëe


	)

66 
	#mq_c⁄d_öô
(
c⁄d
, 
©å
Ë
	`π_£m_öô
(c⁄d, 0)

	)

67 
	#mq_c⁄d_waô
(
c⁄d
, 
muãx
) \

69 
	`π_£m_sig«l
(
muãx
); \

70 i‡(
	`abs
(
	`π_£m_waô
(
c⁄d
)Ë>
RTE_LOWERR
) { \

71  -
EBADF
; \

73 i‡(
	`abs
(
	`π_£m_waô
(
muãx
)Ë>
RTE_LOWERR
) { \

74 
	`π_£m_sig«l
(
c⁄d
); \

75  -
EBADF
; \

77 } 0)

	)

78 
	#mq_c⁄d_timedwaô
(
c⁄d
, 
muãx
, 
ab°ime
) \

80 
RTIME
 
t
 = 
	`time•ec2cou¡
(
ab°ime
); \

81 
ªt
; \

82 
	`π_£m_sig«l
(
muãx
); \

83 i‡((
ªt
 = 
	`abs
(
	`π_£m_waô_u¡û
(
c⁄d
, 
t
))Ë>
RTE_LOWERR
) { \

84  
ªt
 =
RTE_TIMOUT
 ? -
ETIMEDOUT
 : -
EBADF
; \

86 i‡((
ªt
 = 
	`abs
(
	`π_£m_waô_u¡û
(
muãx
, 
t
))Ë>
RTE_LOWERR
) { \

87 
	`π_£m_sig«l
(
c⁄d
); \

88  
ªt
 =
RTE_TIMOUT
 ? -
ETIMEDOUT
 : -
EBADF
; \

90 } 0)

	)

91 
	#mq_c⁄d_sig«l
 
π_£m_sig«l


	)

92 
	#mq_c⁄d_de°roy
 
π_£m_dñëe


	)

94 #i‚de‡
OK


95 
	#OK
 0

	)

97 #i‚de‡
ERROR


98 
	#ERROR
 -1

	)

105 
	#MAX_RT_TASKS
 128

	)

111 
	gnum_pqueues
 = 0;

112 
_pqueue_des¸_°ru˘
 
	gπ_pqueue_des¸
[
MAX_PQUEUES
] = {{0}};

113 
_pqueue_ac˚ss_°ru˘
 
	gèsk_pqueue_ac˚ss
[
MAX_RT_TASKS
] = {{0}};

114 
MQ_ATTR
 
	gdeÁu…_queue_©ås
 = { 
MAX_MSGS
, 
MAX_MSGSIZE
, 
MQ_NONBLOCK
, 0 };

116 
mq_muãx_t
 
	gpqueue_muãx
;

122 
	$«me_to_id
(*
«me
)

124 
öd
;

125 
öd
 = 0; ind < 
MAX_PQUEUES
; ind++) {

126 i‡(
π_pqueue_des¸
[
öd
].
q_«me
[0] && !
	`°rcmp
‘t_pqueue_des¸[öd].q_«me, 
«me
)) {

127  
öd
;

130  
ERROR
;

131 
	}
}

134 
ölöe
 
mq_boﬁ_t
 
	$is_em±y
(
queue_c⁄åﬁ
 *
q
)

136  !
q
->
©ås
.
mq_curmsgs
;

137 
	}
}

140 
ölöe
 
mq_boﬁ_t
 
	$is_fuŒ
(
queue_c⁄åﬁ
 *
q
)

142  
q
->
©ås
.
mq_curmsgs
 =q->©ås.
mq_maxmsg
;

143 
	}
}

146 
ölöe
 
MSG_HDR
* 
	$gënode
(
Q_CTRL
 *
queue
)

148  
queue
->
©ås
.
mq_curmsgs
 < queue->©ås.
mq_maxmsg
 ? queue->
nodes
[queue->©ås.mq_curmsgs++] : 
NULL
;

149 
	}
}

151 
ölöe
 
	$‰ìnode
(*
node
, 
Q_CTRL
 *
queue
)

153 i‡(
queue
->
©ås
.
mq_curmsgs
 > 0) {

154 
queue
->
nodes
[--queue->
©ås
.
mq_curmsgs
] = 
node
;

157  -
EINVAL
;

158 
	}
}

161 
	$ö£π_mesßge
(
Q_CTRL
 *
q
, 
MSG_HDR
 *
this_msg
)

168 
MSG_HDR
 *
¥ev
, *
ö£π±
;

175 i‡(((
MSG_HDR
 *)
q
->
èû
)->
¥i‹ôy
 >
this_msg
->priority) {

176 ((
MSG_HDR
*)
q
->
èû
)->
√xt
 = 
this_msg
;

177 
q
->
èû
 = 
this_msg
;

179 
¥ev
 = 
ö£π±
 = 
q
->
hód
;

182 
ö£π±
->
¥i‹ôy
 >
this_msg
->priority) {

183 
¥ev
 = 
ö£π±
;

184 
ö£π±
 = in£π±->
√xt
;

188 i‡(
ö£π±
 =
q
->
hód
) {

189 
this_msg
->
√xt
 = 
q
->
hód
;

190 
q
->
hód
 = 
this_msg
;

192 
this_msg
->
√xt
 = 
¥ev
->next;

193 
¥ev
->
√xt
 = 
this_msg
;

196 
	}
}

198 #unde‡
mqueues


199 
	#mqueues
 
sy°em_d©a_±r


	)

201 
mq_boﬁ_t
 
	$is_blockög
(
MSG_QUEUE
 *
q
)

203 
q_öd
;

204 
_pqueue_ac˚ss_d©a
 *
a˚s
;

206 
a˚s
 = ((
QUEUE_CTRL
)
	`_π_whﬂmi
()->
mqueues
)->
q_ac˚ss
;

207 
q_öd
 = 0; q_öd < 
MQ_OPEN_MAX
; q_ind++) {

208 i‡(
a˚s
[
q_öd
].
q_id
 =
q
->q_id) {

209  !(
a˚s
[
q_öd
].
oÊags
 & 
O_NONBLOCK
);

212  
FALSE
;

213 
	}
}

216 
mq_boﬁ_t
 
	$ˇn_ac˚ss
(
MSG_QUEUE
 *
q
, 
Q_ACCESS
 
ac˚ss
)

218 
RT_TASK
 *
ˇŒî
 = 
	`_π_whﬂmi
();

220 i‡(
q
->
ow√r
 =
ˇŒî
 ? (((
ac˚ss
 =
FOR_READ
Ë&& (q->
≥rmissi⁄s
 & 
S_IRUSR
)Ë|| (◊c˚s†=
FOR_WRITE
Ë&& (q->≥rmissi⁄†& 
S_IWUSR
))Ë: ((◊c˚s†=FOR_READË&& (q->≥rmissi⁄†& 
S_IRGRP
)Ë|| (◊c˚s†=FOR_WRITEË&& (q->≥rmissi⁄†& 
S_IWGRP
)))) {

221 
q_öd
;

222 
_pqueue_ac˚ss_d©a
 *
a˚s
;

223 
_pqueue_ac˚ss_°ru˘
 *
èsk_queue_d©a_±r
;

224 
q_ac˚ss_Êags
 = 0;

226 
èsk_queue_d©a_±r
 = (
QUEUE_CTRL
)
ˇŒî
->
mqueues
;

227 i‡(
èsk_queue_d©a_±r
 =
NULL
) {

228  
FALSE
;

230 
a˚s
 = 
èsk_queue_d©a_±r
->
q_ac˚ss
;

231 
q_öd
 = 0; q_öd < 
MQ_OPEN_MAX
; q_ind++) {

232 i‡(
a˚s
[
q_öd
].
q_id
 =
q
->q_id) {

233 
q_ac˚ss_Êags
 = 
a˚s
[
q_öd
].
oÊags
;

234 
£t_mode
;

237  
FALSE
;

238 
£t_mode
: i‡(
ac˚ss
 =
FOR_WRITE
) {

239 i‡((
q_ac˚ss_Êags
 & 
O_WRONLY
Ë|| (q_ac˚ss_Êag†& 
O_RDWR
)) {

240  
TRUE
;

243  
TRUE
;

246  
FALSE
;

247 
	}
}

250 
ölöe
 
	$öôüli£_queue
(
Q_CTRL
 *
q
)

252 
msg_size
, 
msg_öd
;

253 *
msg_±r
;

255 
msg_size
 = 
q
->
©ås
.
mq_msgsize
 + (
MSG_HDR
);

256 
msg_±r
 = 
q
->
ba£
;

257 
q
->
nodes
 = 
msg_±r
 + 
msg_size
*q->
©ås
.
mq_maxmsg
;

258 
msg_öd
 = 0; msg_öd < 
q
->
©ås
.
mq_maxmsg
; msg_ind++) {

259 
q
->
nodes
[
msg_öd
] = 
msg_±r
;

260 ((
MSG_HDR
 *)
msg_±r
)->
size
 = 0;

261 ((
MSG_HDR
 *)
msg_±r
)->
¥i‹ôy
 = 
MQ_MIN_MSG_PRIORITY
;

262 ((
MSG_HDR
 *)
msg_±r
)->
√xt
 = 
NULL
;

263 
msg_±r
 +
msg_size
;

265 
	}
}

268 
	$dñëe_queue
(
q_ödex
)

270 
	`π_‰ì
(
π_pqueue_des¸
[
q_ödex
].
d©a
.
ba£
);

272 
π_pqueue_des¸
[
q_ödex
].
ow√r
 = 
NULL
;

273 
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
 = 0;

274 
	`°r˝y
(
π_pqueue_des¸
[
q_ödex
].
q_«me
, "\0");

275 
π_pqueue_des¸
[
q_ödex
].
q_id
 = 
INVALID_PQUEUE
;

276 
π_pqueue_des¸
[
q_ödex
].
d©a
.
ba£
 = 
NULL
;

277 
π_pqueue_des¸
[
q_ödex
].
d©a
.
hód
 = 
NULL
;

278 
π_pqueue_des¸
[
q_ödex
].
d©a
.
èû
 = 
NULL
;

279 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
 = (
MQ_ATTR
){ 0, 0, 0, 0 };

280 
π_pqueue_des¸
[
q_ödex
].
≥rmissi⁄s
 = 0;

282 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

283 
	`mq_muãx_de°roy
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

284 
	`mq_c⁄d_de°roy
(&
π_pqueue_des¸
[
q_ödex
].
emp_c⁄d
);

285 
	`mq_c⁄d_de°roy
(&
π_pqueue_des¸
[
q_ödex
].
fuŒ_c⁄d
);

287 i‡(
num_pqueues
 > 0) {

288 
num_pqueues
--;

290 
	}
}

292 
	$sig«l_su¥t_fun_mq
(*
fun_¨g
)

294 
	ssu¥t_fun_¨g
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
mqd_t
 
mq
; } 
¨g
 = *(
su¥t_fun_¨g
 *)
fun_¨g
;

296 
¨g
.
sigèsk
 = 
RT_CURRENT
;

297 i‡(!
	`π_ªque°_sig«l_
(
¨g
.
sigèsk
,árg.
èsk
, (¨g.
mq
 + 
MAXSIGNALS
))) {

298 
	`π_waô_sig«l
(
¨g
.
sigèsk
,árg.
èsk
)) {

299 
π_pqueue_des¸
[
¨g
.
mq
 - 1].
nŸify
.
d©a
.
_sigev_un
.
_sigev_thªad
.
	`_fun˘i⁄
((
sigvÆ_t
Ït_pqueue_des¸[¨g.mq - 1].nŸify.d©a.
sigev_vÆue
.
sivÆ_±r
);

302 
	`π_èsk_ªsume
(
¨g
.
èsk
);

304 
	}
}

306 
	$π_ªque°_sig«l_mq
(
mqd_t
 
mq
)

308 
RT_TASK
 *
sigèsk
;

309 
	ssu¥t_fun_¨g
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
mqd_t
 
mq
; } 
¨g
 = { 
NULL
, 
	`π_whﬂmi
(), mq };

310 i‡((
sigèsk
 = 
	`π_mÆloc
((
RT_TASK
)))) {

311 
	`π_èsk_öô_˝uid
(
sigèsk
, (*)
sig«l_su¥t_fun_mq
, ()&
¨g
, 
SIGNAL_TASK_STACK_SIZE
,árg.
èsk
->
¥i‹ôy
, 0, 0, 
RT_CURRENT
->
ru¬abÀ_⁄_˝us
);

312 
	`π_èsk_ªsume
(
sigèsk
);

313 
	`π_èsk_su•íd
(
¨g
.
èsk
);

314  
¨g
.
èsk
->
ªtvÆ
;

316  -
EINVAL
;

317 
	}
}

323 
RTAI_SYSCALL_MODE
 
mqd_t
 
	$_mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_©å, 
•a˚
)

325 
q_ödex
, 
t_ödex
, 
q_öd
;

326 
•¨e_cou¡
 = 0, 
fú°_•¨e
 = 0;

327 
mq_boﬁ_t
 
q_found
 = 
FALSE
;

328 
RT_TASK
 *
this_èsk
 = 
	`_π_whﬂmi
();

329 
_pqueue_ac˚ss_°ru˘
 *
èsk_d©a_±r
;

331 
èsk_d©a_±r
 = (
QUEUE_CTRL
)
this_èsk
->
mqueues
;

333 
	`mq_muãx_lock
(&
pqueue_muãx
);

334 i‡((
q_ödex
 = 
	`«me_to_id
(
mq_«me
)) >= 0) {

338 i‡((
oÊags
 & 
O_CREAT
Ë&& (oÊag†& 
O_EXCL
)) {

339 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

340  -
EEXIST
;

342 i‡(
èsk_d©a_±r
 =
NULL
) {

343 
t_ödex
 = 0;Å_ödex < 
MAX_RT_TASKS
;Å_index++) {

344 i‡(
èsk_pqueue_ac˚ss
[
t_ödex
].
this_èsk
 =
NULL
) {

345 
èsk_d©a_±r
 = &(
èsk_pqueue_ac˚ss
[
t_ödex
]);

346 
èsk_d©a_±r
->
this_èsk
 =Åhis_task;

347 
this_èsk
->
mqueues
 = 
èsk_d©a_±r
;

351 i‡(
t_ödex
 =
MAX_RT_TASKS
) {

352 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

353  -
ENOMEM
;

361 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

362 
q_öd
 = 0; q_öd < 
MQ_OPEN_MAX
; q_ind++) {

363 i‡(
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 =
π_pqueue_des¸
[
q_ödex
].q_id) {

364 
q_found
 = 
TRUE
;

366 } if(
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 =
INVALID_PQUEUE
) {

367 i‡(
•¨e_cou¡
 == 0) {

368 
fú°_•¨e
 = 
q_öd
;

370 
•¨e_cou¡
++;

375 i‡(!
q_found
 && 
•¨e_cou¡
 == 0) {

376 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

377 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

378  -
EINVAL
;

382 i‡(!
q_found
) {

384 
èsk_d©a_±r
->
n_›í_pqueues
++;

385 
q_öd
 = 
fú°_•¨e
;

387 
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 = 
π_pqueue_des¸
[
q_ödex
].q_id;

388 
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
oÊags
 = oflags;

389 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

390 } i‡(
oÊags
 & 
O_CREAT
) {

394 if(
num_pqueues
 >
MAX_PQUEUES
) {

395 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

396  -
ENOMEM
;

399 if–
	`°æí
(
mq_«me
Ë>
MQ_NAME_MAX
) {

400 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

401  -
ENAMETOOLONG
;

407 i‡(
èsk_d©a_±r
 =
NULL
) {

409 
t_ödex
 = 0;Å_ödex < 
MAX_RT_TASKS
;Å_index++) {

410 i‡(
èsk_pqueue_ac˚ss
[
t_ödex
].
this_èsk
 =
NULL
) {

411 
èsk_d©a_±r
 = &
èsk_pqueue_ac˚ss
[
t_ödex
];

412 
èsk_d©a_±r
->
this_èsk
 =Åhis_task;

413 
this_èsk
->
mqueues
 = 
èsk_d©a_±r
;

417 i‡(
t_ödex
 =
MAX_RT_TASKS
) {

418 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

419  -
ENOMEM
;

421 } i‡(
èsk_d©a_±r
->
n_›í_pqueues
 >
MQ_OPEN_MAX
) {

422 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

423  -
EINVAL
;

426 i‡(
mq_©å
 =
NULL
) {

427 
mq_©å
 = &
deÁu…_queue_©ås
;

430 
q_ödex
 = 0; q_ödex < 
MAX_PQUEUES
; q_index++) {

431 i‡(
π_pqueue_des¸
[
q_ödex
].
q_id
 =
INVALID_PQUEUE
) {

432 
msg_size
, 
queue_size
;

433 *
mem_±r
;

435 
msg_size
 = 
mq_©å
->
mq_msgsize
 + (
MSG_HDR
);

436 
queue_size
 = (
msg_size
 + (*))*
mq_©å
->
mq_maxmsg
;

437 
mem_±r
 = 
	`π_mÆloc
(
queue_size
);

438 if(
mem_±r
 =
NULL
) {

439 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

440  -
ENOMEM
;

442 
π_pqueue_des¸
[
q_ödex
].
d©a
.
ba£
 = 
mem_±r
;

444 
π_pqueue_des¸
[
q_ödex
].
ow√r
 = 
this_èsk
;

445 
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
 = 0;

446 
	`°r˝y
(
π_pqueue_des¸
[
q_ödex
].
q_«me
, 
mq_«me
);

447 
π_pqueue_des¸
[
q_ödex
].
q_id
 = q_index + 1;

448 
π_pqueue_des¸
[
q_ödex
].
m¨ked_f‹_dñëi⁄
 = 
FALSE
;

449 
π_pqueue_des¸
[
q_ödex
].
d©a
.
hód
 =

450 
π_pqueue_des¸
[
q_ödex
].
d©a
.
èû
 =Ñt_pqueue_des¸[q_ödex].d©a.
ba£
;

451 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
 = *(
mq_©å
);

452 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
.
mq_curmsgs
 = 0;

453 
π_pqueue_des¸
[
q_ödex
].
≥rmissi⁄s
 =Öermissions;

455 
	`mq_c⁄d_öô
(&
π_pqueue_des¸
[
q_ödex
].
emp_c⁄d
, 
NULL
);

456 
	`mq_c⁄d_öô
(&
π_pqueue_des¸
[
q_ödex
].
fuŒ_c⁄d
, 
NULL
);

457 
	`mq_muãx_öô
(&
π_pqueue_des¸
[
q_ödex
].
muãx
, 
NULL
);

460 
	`öôüli£_queue
(&
π_pqueue_des¸
[
q_ödex
].
d©a
);

462 
q_öd
 = 
èsk_d©a_±r
->
n_›í_pqueues
++;

463 
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 = 
q_ödex
 + 1;

464 
èsk_d©a_±r
->
q_ac˚ss
[
q_öd
].
oÊags
 = oflags;

468 if(
q_ödex
 >
MAX_PQUEUES
) {

469 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

470  -
EMFILE
;

472 
num_pqueues
++;

477 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

478  -
ENOENT
;

482 
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
++;

483 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

486 i‡((
oÊags
 & 
O_NOTIFY_NP
Ë&& 
•a˚
 == 0) {

487 
	`π_ªque°_sig«l_mq
(
π_pqueue_des¸
[
q_ödex
].
q_id
);

490  (
mqd_t
)
π_pqueue_des¸
[
q_ödex
].
q_id
;

491 
	}
}

492 
EXPORT_SYMBOL
(
_mq_›í
);

494 
RTAI_SYSCALL_MODE
 
size_t
 
	$_mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, 
size_t
 
buÊí
, *
msg¥io
, 
•a˚
)

496 
q_ödex
 = 
mq
 - 1, 
size
;

497 
MQMSG
 *
msg_±r
;

498 
MSG_QUEUE
 *
q
;

500 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

501  -
EBADF
;

503 
q
 = &
π_pqueue_des¸
[
q_ödex
];

504 i‡(
buÊí
 < 
q
->
d©a
.
©ås
.
mq_msgsize
) {

505  -
EMSGSIZE
;

507 i‡(
	`ˇn_ac˚ss
(
q
, 
FOR_READ
Ë=
FALSE
) {

508  -
EINVAL
;

510 i‡(
	`is_blockög
(
q
)) {

511 
	`mq_muãx_lock
(&
q
->
muãx
);

512 } i‡(
	`mq_muãx_åylock
(&
q
->
muãx
) <= 0) {

513  -
EAGAIN
;

515 
	`is_em±y
(&
q
->
d©a
)) {

516 i‡(
	`is_blockög
(
q
)) {

517 
	`mq_c⁄d_waô
(&
q
->
emp_c⁄d
, &q->
muãx
);

519 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

520  -
EAGAIN
;

523 
msg_±r
 = 
q
->
d©a
.
hód
;

524 i‡(
msg_±r
->
hdr
.
size
 <
buÊí
) {

525 
size
 = 
msg_±r
->
hdr
.size;

526 i‡(
•a˚
) {

527 
	`mem˝y
(
msg_buf„r
, &
msg_±r
->
d©a
, 
size
);

528 i‡(
msg¥io
) {

529 *
msg¥io
 = 
msg_±r
->
hdr
.
¥i‹ôy
;

532 
	`π_c›y_to_u£r
(
msg_buf„r
, &
msg_±r
->
d©a
, 
size
);

533 i‡(
msg¥io
) {

534 
	`π_put_u£r
(
msg_±r
->
hdr
.
¥i‹ôy
, 
msg¥io
);

538 
size
 = 
ERROR
;

540 
q
->
d©a
.
hód
 = 
msg_±r
->
hdr
.
√xt
;

541 
msg_±r
->
hdr
.
size
 = 0;

542 
msg_±r
->
hdr
.
√xt
 = 
NULL
;

543 
	`‰ìnode
(
msg_±r
, &
q
->
d©a
);

544 if(
q
->
d©a
.
hód
 =
NULL
) {

545 
q
->
d©a
.
hód
 = q->d©a.
èû
 = q->d©a.
nodes
[0];

547 
	`mq_c⁄d_sig«l
(&
q
->
fuŒ_c⁄d
);

548 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

549  
size
;

550 
	}
}

551 
EXPORT_SYMBOL
(
_mq_ª˚ive
);

553 
RTAI_SYSCALL_MODE
 
size_t
 
	$_mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, 
size_t
 
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
)

555 
q_ödex
 = 
mq
 - 1, 
size
;

556 
MQMSG
 *
msg_±r
;

557 
MSG_QUEUE
 *
q
;

558 
time•ec
 
time
;

560 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

561  -
EBADF
;

563 
q
 = &
π_pqueue_des¸
[
q_ödex
];

564 i‡(
buÊí
 < 
q
->
d©a
.
©ås
.
mq_msgsize
) {

565  -
EMSGSIZE
;

567 i‡(
	`ˇn_ac˚ss
(
q
, 
FOR_READ
Ë=
FALSE
) {

568  -
EINVAL
;

570 i‡(!
•a˚
) {

571 
	`π_c›y_‰om_u£r
(&
time
, 
ab°ime
, (
time•ec
));

572 
ab°ime
 = &
time
;

574 i‡(
	`is_blockög
(
q
)) {

575 
	`mq_muãx_timedlock
(&
q
->
muãx
, 
ab°ime
);

576 } i‡(
	`mq_muãx_åylock
(&
q
->
muãx
) <= 0) {

577  -
EAGAIN
;

579 
	`is_em±y
(&
q
->
d©a
)) {

580 i‡(
	`is_blockög
(
q
)) {

581 
	`mq_c⁄d_timedwaô
(&
q
->
emp_c⁄d
, &q->
muãx
, 
ab°ime
);

583  -
EAGAIN
;

586 
msg_±r
 = 
q
->
d©a
.
hód
;

587 i‡(
msg_±r
->
hdr
.
size
 <
buÊí
) {

588 
size
 = 
msg_±r
->
hdr
.size;

589 i‡(
•a˚
) {

590 
	`mem˝y
(
msg_buf„r
, &
msg_±r
->
d©a
, 
size
);

591 i‡(
msg¥io
) {

592 *
msg¥io
 = 
msg_±r
->
hdr
.
¥i‹ôy
;

595 
	`π_c›y_to_u£r
(
msg_buf„r
, &
msg_±r
->
d©a
, 
size
);

596 i‡(
msg¥io
) {

597 
	`π_put_u£r
(
msg_±r
->
hdr
.
¥i‹ôy
, 
msg¥io
);

601 
size
 = 
ERROR
;

603 
q
->
d©a
.
hód
 = 
msg_±r
->
hdr
.
√xt
;

604 
msg_±r
->
hdr
.
size
 = 0;

605 
msg_±r
->
hdr
.
√xt
 = 
NULL
;

606 
	`‰ìnode
(
msg_±r
, &
q
->
d©a
);

607 if(
q
->
d©a
.
hód
 =
NULL
) {

608 
q
->
d©a
.
hód
 = q->d©a.
èû
 = q->d©a.
nodes
[0];

610 
	`mq_c⁄d_sig«l
(&
q
->
fuŒ_c⁄d
);

611 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

612  
size
;

613 
	}
}

614 
EXPORT_SYMBOL
(
_mq_timedª˚ive
);

616 
RTAI_SYSCALL_MODE
 
	$_mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, 
•a˚
)

618 
q_ödex
 = 
mq
 - 1;

619 
MSG_QUEUE
 *
q
;

620 
MSG_HDR
 *
this_msg
;

621 
mq_boﬁ_t
 
q_was_em±y
;

623 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

624  -
EBADF
;

626 
q
 = &
π_pqueue_des¸
[
q_ödex
];

627 if–
	`ˇn_ac˚ss
(
q
, 
FOR_WRITE
Ë=
FALSE
) {

628  -
EINVAL
;

630 if(
msg¥io
 > 
MQ_PRIO_MAX
) {

631  -
EINVAL
;

633 i‡(
	`is_blockög
(
q
)) {

634 
	`mq_muãx_lock
(&
q
->
muãx
);

635 } i‡(
	`mq_muãx_åylock
(&
q
->
muãx
) <= 0) {

636  -
EAGAIN
;

638 
q_was_em±y
 = 
	`is_em±y
(&
q
->
d©a
);

639 
	`is_fuŒ
(&
q
->
d©a
)) {

640 i‡(
	`is_blockög
(
q
)) {

641 
	`mq_c⁄d_waô
(&
q
->
fuŒ_c⁄d
, &q->
muãx
);

643 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

644  -
EAGAIN
;

647 if–(
this_msg
 = 
	`gënode
(&
q
->
d©a
)Ë=
NULL
) {

648 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

649  -
ENOBUFS
;

651 i‡(
msgÀn
 > 
q
->
d©a
.
©ås
.
mq_msgsize
) {

652 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

653  -
EMSGSIZE
;

655 
this_msg
->
size
 = 
msgÀn
;

656 
this_msg
->
¥i‹ôy
 = 
msg¥io
;

657 i‡(
•a˚
) {

658 
	`mem˝y
(&((
MQMSG
 *)
this_msg
)->
d©a
, 
msg
, 
msgÀn
);

660 
	`π_c›y_‰om_u£r
(&((
MQMSG
 *)
this_msg
)->
d©a
, 
msg
, 
msgÀn
);

662 
	`ö£π_mesßge
(&
q
->
d©a
, 
this_msg
);

663 
	`mq_c⁄d_sig«l
(&
q
->
emp_c⁄d
);

664 if(
q_was_em±y
 && 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 !
NULL
) {

665 
	`π_åiggî_sig«l
((
MAXSIGNALS
 + 
mq
), 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
);

666 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 = 
NULL
;

668 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

669  
msgÀn
;

670 
	}
}

671 
EXPORT_SYMBOL
(
_mq_£nd
);

673 
RTAI_SYSCALL_MODE
 
	$_mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
)

675 
q_ödex
 = 
mq
 - 1;

676 
MSG_QUEUE
 *
q
;

677 
MSG_HDR
 *
this_msg
;

678 
mq_boﬁ_t
 
q_was_em±y
;

679 
time•ec
 
time
;

681 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

682  -
EBADF
;

684 
q
 = &
π_pqueue_des¸
[
q_ödex
];

685 i‡(
	`ˇn_ac˚ss
(
q
, 
FOR_WRITE
Ë=
FALSE
) {

686  -
EINVAL
;

688 i‡(
msg¥io
 > 
MQ_PRIO_MAX
) {

689  -
EINVAL
;

691 i‡(!
•a˚
) {

692 
	`π_c›y_‰om_u£r
(&
time
, 
ab°ime
, (
time•ec
));

693 
ab°ime
 = &
time
;

695 i‡(
	`is_blockög
(
q
)) {

696 
	`mq_muãx_timedlock
(&
q
->
muãx
, 
ab°ime
);

697 } i‡(
	`mq_muãx_åylock
(&
q
->
muãx
) <= 0) {

698  -
EAGAIN
;

700 
q_was_em±y
 = 
	`is_em±y
(&
q
->
d©a
);

701 
	`is_fuŒ
(&
q
->
d©a
)) {

702 i‡(
	`is_blockög
(
q
)) {

703 
	`mq_c⁄d_timedwaô
(&
q
->
fuŒ_c⁄d
, &q->
muãx
, 
ab°ime
);

705 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

706  -
EAGAIN
;

709 i‡((
this_msg
 = 
	`gënode
(&
q
->
d©a
)Ë=
NULL
) {

710 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

711  -
ENOBUFS
;

713 i‡(
msgÀn
 > 
q
->
d©a
.
©ås
.
mq_msgsize
) {

714 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

715  -
EMSGSIZE
;

717 
this_msg
->
size
 = 
msgÀn
;

718 
this_msg
->
¥i‹ôy
 = 
msg¥io
;

719 i‡(
•a˚
) {

720 
	`mem˝y
(&((
MQMSG
 *)
this_msg
)->
d©a
, 
msg
, 
msgÀn
);

722 
	`π_c›y_‰om_u£r
(&((
MQMSG
 *)
this_msg
)->
d©a
, 
msg
, 
msgÀn
);

724 
	`ö£π_mesßge
(&
q
->
d©a
, 
this_msg
);

725 
	`mq_c⁄d_sig«l
(&
q
->
emp_c⁄d
);

726 i‡(
q_was_em±y
 && 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 !
NULL
) {

727 
	`π_åiggî_sig«l
((
MAXSIGNALS
 + 
mq
), 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
);

728 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 = 
NULL
;

730 
	`mq_muãx_u∆ock
(&
q
->
muãx
);

731  
msgÀn
;

733 
	}
}

734 
EXPORT_SYMBOL
(
_mq_timed£nd
);

736 
RTAI_SYSCALL_MODE
 
	$mq_˛o£
(
mqd_t
 
mq
)

738 
q_ödex
 = 
mq
 - 1;

739 
q_öd
;

740 
RT_TASK
 *
this_èsk
 = 
	`_π_whﬂmi
();

741 
_pqueue_ac˚ss_°ru˘
 *
èsk_queue_d©a_±r
;

743 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

744  -
EINVAL
;

746 
èsk_queue_d©a_±r
 = (
QUEUE_CTRL
)
this_èsk
->
mqueues
;

747 i‡(
èsk_queue_d©a_±r
 =
NULL
 ) {

748  -
EINVAL
;

750 
	`mq_muãx_lock
(&
pqueue_muãx
);

751 
q_öd
 = 0; q_öd < 
MQ_OPEN_MAX
; q_ind++) {

752 i‡(
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 =
mq
) {

753 
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 = 
INVALID_PQUEUE
;

754 
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
u•_nŸifõr
 = 
NULL
;

755 
	`π_ªÀa£_sig«l
((
mq
 + 
MAXSIGNALS
), 
èsk_queue_d©a_±r
->
this_èsk
);

756 
èsk_queue_d©a_±r
->
n_›í_pqueues
--;

760 i‡(
q_öd
 =
MQ_OPEN_MAX
) {

761 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

762  -
EINVAL
;

764 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

765 i‡(
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 =
this_èsk
) {

766 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 = 
NULL
;

768 i‡(--
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
 <= 0 &&

769 
π_pqueue_des¸
[
q_ödex
].
m¨ked_f‹_dñëi⁄
 =
TRUE
 ) {

770 
	`dñëe_queue
(
q_ödex
);

772 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

773 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

774  
OK
;

775 
	}
}

776 
EXPORT_SYMBOL
(
mq_˛o£
);

778 
RTAI_SYSCALL_MODE
 
	$mq_gë©å
(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
)

780 
q_ödex
 = 
mq
 - 1;

782 i‡(0 <
q_ödex
 && q_ödex < 
MAX_PQUEUES
) {

783 *
©åbuf
 = 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
;

784  
OK
;

786  -
EBADF
;

787 
	}
}

788 
EXPORT_SYMBOL
(
mq_gë©å
);

790 
RTAI_SYSCALL_MODE
 
	$mq_£èâr
(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
)

792 
q_ödex
 = 
mq
 - 1;

793 
q_öd
;

794 
RT_TASK
 *
this_èsk
 = 
	`_π_whﬂmi
();

795 
_pqueue_ac˚ss_°ru˘
 *
èsk_queue_d©a_±r
;

797 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

798  -
EBADF
;

800 i‡(
ﬁd_©ås
 !
NULL
) {

801 *
ﬁd_©ås
 = 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
;

803 
èsk_queue_d©a_±r
 = (
QUEUE_CTRL
)
this_èsk
->
mqueues
;

804 i‡(
èsk_queue_d©a_±r
 =
NULL
) {

805  -
EINVAL
;

807 
q_öd
 = 0; q_öd < 
MQ_OPEN_MAX
; q_ind++) {

808 i‡(
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
q_id
 =
mq
) {

809 if(
√w_©ås
->
mq_Êags
 =
MQ_NONBLOCK
) {

810 
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
oÊags
 |
O_NONBLOCK
;

811 } i‡(
√w_©ås
->
mq_Êags
 =
MQ_BLOCK
) {

812 
èsk_queue_d©a_±r
->
q_ac˚ss
[
q_öd
].
oÊags
 &~
O_NONBLOCK
;

814  -
EINVAL
;

819 i‡(
q_öd
 =
MQ_OPEN_MAX
) {

820  -
EINVAL
;

822 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

823 
π_pqueue_des¸
[
q_ödex
].
d©a
.
©ås
.
mq_Êags
 = 
√w_©ås
->mq_flags;

824 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

825  
OK
;

826 
	}
}

827 
EXPORT_SYMBOL
(
mq_£èâr
);

829 
RTAI_SYSCALL_MODE
 
	$mq_ªg_u•_nŸifõr
(
mqd_t
 
mq
, 
RT_TASK
 *
èsk
, 
sigevít
 *
u•_nŸifiˇti⁄
)

831 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
mq
 -1].
muãx
);

832 ((
QUEUE_CTRL
)
èsk
->
mqueues
)->
q_ac˚ss
[
mq
 -1].
u•_nŸifõr
 = 
u•_nŸifiˇti⁄
;

833 
	`π_c›y_to_u£r
(
u•_nŸifiˇti⁄
, &
π_pqueue_des¸
[
mq
 -1].
nŸify
.
d©a
, (
sigevít
));

834 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
mq
 -1].
muãx
);

836 
	}
}

838 
RTAI_SYSCALL_MODE
 
	$_mq_nŸify
(
mqd_t
 
mq
, 
RT_TASK
 *
èsk
, 
•a˚
, 
ªm
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

840 
q_ödex
 = 
mq
 - 1;

841 
πn
;

842 i‡(
q_ödex
 < 0 || q_ödex >
MAX_PQUEUES
) {

843  -
EBADF
;

845 i‡(
ªm
) {

846 i‡(
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 ==Åask) {

847 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

848 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 = 
NULL
;

849 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

850  
OK
;

852  -
EBUSY
;

855 i‡(!
•a˚
 && !
èsk
->
π_sig«ls
) {

856 
	`π_ªque°_sig«l_mq
(
mq
);

857 } i‡(!
•a˚
 && !((
π_sig«l_t
 *)
èsk
->
π_sig«ls
)[
MAXSIGNALS
 + 
mq
].
sigèsk
) {

858 
	`π_ªque°_sig«l_mq
(
mq
);

860 i‡(!
•a˚
 && (
nŸifiˇti⁄
->
sigev_nŸify
 !
SIGEV_THREAD
)){

861  
ERROR
;

863 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

864 i‡(
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 =
NULL
) {

865 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
èsk
 =Åask;

866 
π_pqueue_des¸
[
q_ödex
].
nŸify
.
d©a
 = *
nŸifiˇti⁄
;

867 i‡(
•a˚
) {

868 i‡(((
QUEUE_CTRL
)
èsk
->
mqueues
)->
q_ac˚ss
[
mq
 -1].
u•_nŸifõr
) {

869 
	`π_c›y_to_u£r
(((
QUEUE_CTRL
)
èsk
->
mqueues
)->
q_ac˚ss
[
mq
 -1].
u•_nŸifõr
, &
π_pqueue_des¸
[mq -1].
nŸify
.
d©a
, (
sigevít
));

870 
πn
 = 
OK
;

872 
πn
 = 
O_NOTIFY_NP
;

875 
πn
 = 
OK
;

878 
πn
 = -
EBUSY
;

880 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

881  
πn
;

882 
	}
}

883 
EXPORT_SYMBOL
(
_mq_nŸify
);

885 
RTAI_SYSCALL_MODE
 
	$mq_u∆ök
(*
mq_«me
)

887 
q_ödex
, 
πn
;

889 
	`mq_muãx_lock
(&
pqueue_muãx
);

890 
q_ödex
 = 
	`«me_to_id
(
mq_«me
);

892 i‡(
q_ödex
 < 0) {

893 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

894  -
ENOENT
;

896 
	`mq_muãx_lock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

897 i‡(
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
 > 0) {

898 
	`°r˝y
(
π_pqueue_des¸
[
q_ödex
].
q_«me
, "\0");

899 
π_pqueue_des¸
[
q_ödex
].
m¨ked_f‹_dñëi⁄
 = 
TRUE
;

900 
πn
 = 
π_pqueue_des¸
[
q_ödex
].
›í_cou¡
;

902 
	`dñëe_queue
(
q_ödex
);

903 
πn
 = 
OK
;

905 
	`mq_muãx_u∆ock
(&
π_pqueue_des¸
[
q_ödex
].
muãx
);

906 
	`mq_muãx_u∆ock
(&
pqueue_muãx
);

907  
πn
;

908 
	}
}

909 
EXPORT_SYMBOL
(
mq_u∆ök
);

915 #ifde‡
CONFIG_PROC_FS


917 
	$PROC_READ_FUN
(
pqueue_ªad_¥oc
)

919 
öd
;

920 
PROC_PRINT_VARS
;

922 
	`PROC_PRINT
("\nRTAI Posix Queue Status\n");

923 
	`PROC_PRINT
("-----------------------\n\n");

924 
	`PROC_PRINT
("MAX_PQUEUES = %2d (sy°em wide)\n", 
MAX_PQUEUES
);

925 
	`PROC_PRINT
("MQ_OPEN_MAX = %2d (≥∏RTÅask)\n", 
MQ_OPEN_MAX
);

926 
	`PROC_PRINT
("MQ_NAME_MAX = %d\n", 
MQ_NAME_MAX
);

928 
	`PROC_PRINT
("\nID NOpen NMsgs MaxMsgs MaxSz Perms Del Name\n");

929 
	`PROC_PRINT
("--------------------------------------------------------------------------------\n");

930 
öd
 = 0; ind < 
MAX_PQUEUES
; ind++) {

931 i‡(
π_pqueue_des¸
[
öd
].
q_«me
[0] ||Ñt_pqueue_des¸[öd].
›í_cou¡
) {

932 
	`PROC_PRINT
( "%-3d %-6d ",

933 
π_pqueue_des¸
[
öd
].
q_id
,

934 
π_pqueue_des¸
[
öd
].
›í_cou¡


936 
	`PROC_PRINT
( "%-6ld %-6ld %-5ld ",

937 
π_pqueue_des¸
[
öd
].
d©a
.
©ås
.
mq_curmsgs
,

938 
π_pqueue_des¸
[
öd
].
d©a
.
©ås
.
mq_maxmsg
,

939 
π_pqueue_des¸
[
öd
].
d©a
.
©ås
.
mq_msgsize


941 
	`PROC_PRINT
( "%-4o %c %s\n",

942 
π_pqueue_des¸
[
öd
].
≥rmissi⁄s
,

943 
π_pqueue_des¸
[
öd
].
m¨ked_f‹_dñëi⁄
 ? '*' : ' ',

944 
π_pqueue_des¸
[
öd
].
q_«me


948 
PROC_PRINT_DONE
;

949 
	}
}

951 
	$PROC_READ_OPEN_OPS
(
πai_pqueue_f›s
, 
pqueue_ªad_¥oc
)

953 
¥oc_dú_íåy
 *
¥oc_πai_pqueue
;

955 
	$pqueue_¥oc_ªgi°î
()

957 
¥oc_πai_pqueue
 = 
	`CREATE_PROC_ENTRY
("pqueue", 0, 
πai_¥oc_roŸ
, &
πai_pqueue_f›s
);

958 
	`SET_PROC_READ_ENTRY
(
¥oc_πai_pqueue
, 
pqueue_ªad_¥oc
);

960 
	}
}

962 
	$pqueue_¥oc_uƒegi°î
()

964 
	`ªmove_¥oc_íåy
("pqueue", 
πai_¥oc_roŸ
);

966 
	}
}

973 
π_«tive_fun_íåy
 
	gπ_pqueue_íåõs
[] = {

974 { { 
UR1
(1, 5Ë| 
UR2
(4, 6), 
_mq_›í
 }, 
MQ_OPEN
 },

975 { { 1, 
_mq_ª˚ive
 }, 
MQ_RECEIVE
 },

976 { { 1, 
_mq_£nd
 }, 
MQ_SEND
 },

977 { { 1, 
mq_˛o£
 }, 
MQ_CLOSE
 },

978 { { 
UW1
(2, 3), 
mq_gë©å
 }, 
MQ_GETATTR
 },

979 { { 
UR1
(2, 4Ë| 
UW1
(3, 4), 
mq_£èâr
 }, 
MQ_SETATTR
 },

980 { { 
UR1
(5, 6), 
_mq_nŸify
 }, 
MQ_NOTIFY
 },

981 { { 
UR1
(1, 2), 
mq_u∆ök
 }, 
MQ_UNLINK
 },

982 { { 1, 
_mq_timedª˚ive
 }, 
MQ_TIMEDRECEIVE
 },

983 { { 1, 
_mq_timed£nd
 }, 
MQ_TIMEDSEND
 },

984 { { 1, 
mq_ªg_u•_nŸifõr
 }, 
MQ_REG_USP_NOTIFIER
 },

988 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

989 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

991 
	$__πai_mq_öô
()

993 
num_pqueues
 = 0;

994 
	`mq_muãx_öô
(&
pqueue_muãx
, 
NULL
);

995 #ifde‡
CONFIG_PROC_FS


996 
	`pqueue_¥oc_ªgi°î
();

998 
	`¥ötk
(
KERN_INFO
 "RTAI[mq]:Üoaded.\n");

999  
	`£t_π_fun_íåõs
(
π_pqueue_íåõs
);

1000  
OK
;

1001 
	}
}

1003 
	$__πai_mq_exô
()

1005 
	`mq_muãx_de°roy
(&
pqueue_muãx
);

1006 
	`ª£t_π_fun_íåõs
(
π_pqueue_íåõs
);

1007 #ifde‡
CONFIG_PROC_FS


1008 
	`pqueue_¥oc_uƒegi°î
();

1010 
	`¥ötk
(
KERN_INFO
 "RTAI[mq]: unloaded.\n");

1011 
	}
}

1013 #i‚de‡
CONFIG_RTAI_MQ_BUILTIN


1014 
moduÀ_öô
(
__πai_mq_öô
);

1015 
moduÀ_exô
(
__πai_mq_exô
);

	@/usr/src/rtai/base/ipc/mq/rtai_mq.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa1768906, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô
) },

22 { 0xØc1311b, 
__VMLINUX_SYMBOL_STR
(
π_£m_dñëe
) },

23 { 0x5603e8bd, 
__VMLINUX_SYMBOL_STR
(
sögÀ_›í
) },

24 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

25 { 0xa3536b55, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô_˝uid
) },

26 { 0xa9475aˇ, 
__VMLINUX_SYMBOL_STR
(
sögÀ_ªÀa£
) },

27 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

28 { 0xb22c9294, 
__VMLINUX_SYMBOL_STR
(
π_èsk_ªsume
) },

29 { 0x4a70f94a, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

30 { 0x24ˇfbeb, 
__VMLINUX_SYMBOL_STR
(
ªmove_¥oc_íåy
) },

31 { 0xØ3„c65, 
__VMLINUX_SYMBOL_STR
(
π_£m_öô
) },

32 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

33 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

34 { 0xcf012e93, 
__VMLINUX_SYMBOL_STR
(
£q_ªad
) },

35 { 0xe2d5255a, 
__VMLINUX_SYMBOL_STR
(
°rcmp
) },

36 { 0xcdbfc52b, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_if
) },

37 { 0x985fˇbb, 
__VMLINUX_SYMBOL_STR
(
¥oc_mkdú
) },

38 { 0x7ec06bc3, 
__VMLINUX_SYMBOL_STR
(
π_waô_sig«l
) },

39 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

40 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

41 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

42 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

43 { 0x1b˚b0ba, 
__VMLINUX_SYMBOL_STR
(
π_£m_sig«l
) },

44 { 0xc4723f52, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_u¡û
) },

45 { 0x61f43b˚, 
__VMLINUX_SYMBOL_STR
(
π_ªÀa£_sig«l
) },

46 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

47 { 0xb1bde420, 
__VMLINUX_SYMBOL_STR
(
π_whﬂmi
) },

48 { 0x12c0d4b7, 
__VMLINUX_SYMBOL_STR
(
π_èsk_su•íd
) },

49 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

50 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

51 { 0x139e6c45, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_sig«l_
) },

52 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

53 { 0x8c98615, 
__VMLINUX_SYMBOL_STR
(
¥oc_¸óã_d©a
) },

54 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

55 { 0xf2cb2´0, 
__VMLINUX_SYMBOL_STR
(
£q_l£ek
) },

56 { 0xcdde3d26, 
__VMLINUX_SYMBOL_STR
(
πai_¥oc_roŸ
) },

57 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

58 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

59 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

60 { 0x5c˚6be5, 
__VMLINUX_SYMBOL_STR
(
π_ty≥d_£m_öô
) },

61 { 0x33351eb5, 
__VMLINUX_SYMBOL_STR
(
π_åiggî_sig«l
) },

62 { 0xe914e41e, 
__VMLINUX_SYMBOL_STR
(
°r˝y
) },

65 c⁄° 
	g__moduÀ_dïíds
[]

66 
__u£d


67 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

71 
MODULE_INFO
(
§cvîsi⁄
, "07B4592F6A66ED98B541C9B");

	@/usr/src/rtai/base/ipc/msg/msg.c

38 
	~<löux/kî√l.h
>

39 
	~<löux/moduÀ.h
>

40 
	~<löux/î∫o.h
>

41 
	~<löux/vîsi⁄.h
>

43 
	~<πai_schedc‹e.h
>

44 
	~<πai_¥öhî.h
>

46 
MODULE_LICENSE
("GPL");

50 
	#_π_ªtu∫
(
ªsu…
) \

52 
sched
; \

53 
	`dequeue_blocked
(
èsk
); \

54 
sched
 = 
	`£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
); \

55 
èsk
->
msg
 = 
ªsu…
; \

56 
èsk
->
msg_queue
.task =Åask; \

57 
	`ªm_timed_èsk
(
èsk
); \

58 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RETURN
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) { \

59 
	`íq_ªady_èsk
(
èsk
); \

60 i‡(
sched
) { \

61 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
); \

63 
	`RT_SCHEDULE
(
èsk
, 
˝uid
); \

65 } i‡(
sched
) { \

66 
	`π_scheduÀ
(); \

68 } 0)

	)

72 
	#TASK_INVAL
 ((
RT_TASK
 *)
RTE_OBJINV
)

	)

74 
	#msg_nŸ_£¡
() \

76 *
ªç
; \

77 i‡((
ªç
 = 
π_cuºít
->
blocked_⁄
Ë!
RTP_OBJREM
) { \

78 
	`£t_èsk_¥io_‰om_ªsq
(
èsk
); \

79 
	`dequeue_blocked
(
π_cuºít
); \

80 
èsk
 = (*)()(
CONFIG_RTAI_USE_NEWERR
 ? ((
	`likñy
(
ªç
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
)) : 0); \

82 
π_cuºít
->
¥io_∑s£d_to
 = 
NULL
; \

83 
èsk
 = (*)()(
CONFIG_RTAI_USE_NEWERR
 ? 
RTE_OBJREM
 : 0); \

85 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current; \

86 } 0)

	)

88 
	#msg_nŸ_ª˚ived
() \

90 
π_cuºít
->
ªt_queue
.
èsk
 = 
NULL
; \

91 
èsk
 = (*)()(
CONFIG_RTAI_USE_NEWERR
 ? (((*)
π_cuºít
->
blocked_⁄
 !
RTP_UNBLKD
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
) : 0); \

92 } 0)

	)

96 
	#CHECK_SENDER_MAGIC
(
èsk
) \

97 dÿ{ i‡(()
èsk
 <
RTE_HIGERR
 ||Åask->
magic
 !
RT_TASK_MAGIC
Ë 
TASK_INVAL
; } 0)

	)

99 
	#CHECK_RECEIVER_MAGIC
(
èsk
) \

100 dÿ{ i‡(
èsk
 &&Åask->
magic
 !
RT_TASK_MAGIC
Ë 
TASK_INVAL
; } 0)

	)

134 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£nd
(
RT_TASK
 *
èsk
, 
msg
)

136 
DECLARE_RT_CURRENT
;

137 
Êags
;

139 
	`CHECK_SENDER_MAGIC
(
èsk
);

141 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

142 
ASSIGN_RT_CURRENT
;

143 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

144 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

145 
èsk
->
msg
 = msg;

146 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

147 
èsk
->
ªt_queue
.èsk = 
NULL
;

148 
	`ªm_timed_èsk
(
èsk
);

149 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

150 
	`íq_ªady_èsk
(
èsk
);

151 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

154 
π_cuºít
->
msg
 = msg;

155 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

156 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
msg_queue
, 0);

157 
π_cuºít
->
°©e
 |
RT_SCHED_SEND
;

158 
	`íqueue_ªsqtsk
(
èsk
);

159 
	`∑ss_¥io
(
èsk
, 
π_cuºít
);

160 
	`ªm_ªady_cuºít
(
π_cuºít
);

161 
	`π_scheduÀ
();

163 i‡(
π_cuºít
->
msg_queue
.
èsk
 !=Ñt_current) {

164 
	`msg_nŸ_£¡
();

166 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

167  
èsk
;

168 
	}
}

198 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£nd_if
(
RT_TASK
 *
èsk
, 
msg
)

200 
DECLARE_RT_CURRENT
;

201 
Êags
;

203 
	`CHECK_SENDER_MAGIC
(
èsk
);

205 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

206 
ASSIGN_RT_CURRENT
;

207 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

208 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

209 
èsk
->
msg
 = msg;

210 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

211 
èsk
->
ªt_queue
.èsk = 
NULL
;

212 
	`ªm_timed_èsk
(
èsk
);

213 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

214 
	`íq_ªady_èsk
(
èsk
);

215 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

217 i‡(
π_cuºít
->
msg_queue
.
èsk
 !=Ñt_current) {

218 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current;

219 
èsk
 = 
NULL
;

222 
èsk
 = 
NULL
;

224 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

225  
èsk
;

226 
	}
}

268 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£nd_u¡û
(
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
time
)

270 
DECLARE_RT_CURRENT
;

271 
Êags
;

273 
	`CHECK_SENDER_MAGIC
(
èsk
);

275 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

276 
ASSIGN_RT_CURRENT
;

277 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

278 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

279 
èsk
->
msg
 = msg;

280 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

281 
èsk
->
ªt_queue
.èsk = 
NULL
;

282 
	`ªm_timed_èsk
(
èsk
);

283 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

284 
	`íq_ªady_èsk
(
èsk
);

285 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

288 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

289 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

290 
π_cuºít
->
msg
 = msg;

291 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
msg_queue
, 0);

292 
π_cuºít
->
°©e
 |(
RT_SCHED_SEND
 | 
RT_SCHED_DELAYED
);

293 
	`íqueue_ªsqtsk
(
èsk
);

294 
	`∑ss_¥io
(
èsk
, 
π_cuºít
);

295 
	`ªm_ªady_cuºít
(
π_cuºít
);

296 
	`íq_timed_èsk
(
π_cuºít
);

297 
	`π_scheduÀ
();

299 
π_cuºít
->
queue
.
¥ev
 =Ñt_cuºít->queue.
√xt
 = &rt_current->queue;

302 i‡(
π_cuºít
->
msg_queue
.
èsk
 !=Ñt_current) {

303 
	`msg_nŸ_£¡
();

305 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

306  
èsk
;

307 
	}
}

349 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£nd_timed
(
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
dñay
)

351  
	`π_£nd_u¡û
(
èsk
, 
msg
, 
	`gë_time
(Ë+ 
dñay
);

352 
	}
}

404 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωc
(
RT_TASK
 *
èsk
, 
to_do
, *
ªsu…
)

407 
DECLARE_RT_CURRENT
;

408 
Êags
;

410 
	`CHECK_SENDER_MAGIC
(
èsk
);

412 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

413 
ASSIGN_RT_CURRENT
;

414 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

415 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

416 
π_cuºít
->
msg
 = 
èsk
->msg = 
to_do
;

417 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

418 
èsk
->
ªt_queue
.èsk = 
NULL
;

419 
	`ªm_timed_èsk
(
èsk
);

420 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

421 
	`íq_ªady_èsk
(
èsk
);

423 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
ªt_queue
, 0);

424 
π_cuºít
->
°©e
 |
RT_SCHED_RETURN
;

426 
π_cuºít
->
msg
 = 
to_do
;

427 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
msg_queue
, 0);

428 
π_cuºít
->
°©e
 |
RT_SCHED_RPC
;

430 
	`íqueue_ªsqtsk
(
èsk
);

431 
	`∑ss_¥io
(
èsk
, 
π_cuºít
);

432 
	`ªm_ªady_cuºít
(
π_cuºít
);

433 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

434 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

435 i‡(
π_cuºít
->
msg_queue
.
èsk
 ==Ñt_current) {

436 i‡(
ªsu…
) {

437 *(*)
ªsu…
 = 
π_cuºít
->
msg
;

440 
	`msg_nŸ_£¡
();

442 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

443  
èsk
;

444 
	}
}

486 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωc_if
(
RT_TASK
 *
èsk
, 
to_do
, *
ªsu…
)

488 
DECLARE_RT_CURRENT
;

489 
Êags
;

491 
	`CHECK_SENDER_MAGIC
(
èsk
);

493 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

494 
ASSIGN_RT_CURRENT
;

495 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

496 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

497 
π_cuºít
->
msg
 = 
èsk
->msg = 
to_do
;

498 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

499 
èsk
->
ªt_queue
.èsk = 
NULL
;

500 
	`ªm_timed_èsk
(
èsk
);

501 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

502 
	`íq_ªady_èsk
(
èsk
);

504 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
ªt_queue
, 0);

505 
π_cuºít
->
°©e
 |
RT_SCHED_RETURN
;

506 
	`íqueue_ªsqtsk
(
èsk
);

507 
	`∑ss_¥io
(
èsk
, 
π_cuºít
);

508 
	`ªm_ªady_cuºít
(
π_cuºít
);

509 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

510 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

511 i‡(
π_cuºít
->
msg_queue
.
èsk
 ==Ñt_current) {

512 i‡(
ªsu…
) {

513 *(*)
ªsu…
 = 
π_cuºít
->
msg
;

516 
	`msg_nŸ_£¡
();

519 
èsk
 = 
NULL
;

521 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

522  
èsk
;

523 
	}
}

564 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωc_u¡û
(
RT_TASK
 *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
time
)

566 
DECLARE_RT_CURRENT
;

567 
Êags
;

569 
	`CHECK_SENDER_MAGIC
(
èsk
);

571 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

572 
ASSIGN_RT_CURRENT
;

573 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë<
π_time_h
) {

574 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

575  (
RT_TASK
 *)0;

577 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

578 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

579 
π_cuºít
->
msg
 = 
èsk
->msg = 
to_do
;

580 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

581 
èsk
->
ªt_queue
.èsk = 
NULL
;

582 
	`ªm_timed_èsk
(
èsk
);

583 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

584 
	`íq_ªady_èsk
(
èsk
);

586 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
ªt_queue
, 0);

587 
π_cuºít
->
°©e
 |(
RT_SCHED_RETURN
 | 
RT_SCHED_DELAYED
);

589 
π_cuºít
->
msg
 = 
to_do
;

590 
	`íqueue_blocked
(
π_cuºít
, &
èsk
->
msg_queue
, 0);

591 
π_cuºít
->
°©e
 |(
RT_SCHED_RPC
 | 
RT_SCHED_DELAYED
);

593 
	`íqueue_ªsqtsk
(
èsk
);

594 
	`∑ss_¥io
(
èsk
, 
π_cuºít
);

595 
	`ªm_ªady_cuºít
(
π_cuºít
);

596 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

597 
	`íq_timed_èsk
(
π_cuºít
);

598 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

599 i‡(
π_cuºít
->
msg_queue
.
èsk
 ==Ñt_current) {

600 i‡(
ªsu…
) {

601 *(*)
ªsu…
 = 
π_cuºít
->
msg
;

604 
	`msg_nŸ_£¡
();

606 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

607  
èsk
;

608 
	}
}

649 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωc_timed
(
RT_TASK
 *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
dñay
)

651  
	`π_Ωc_u¡û
(
èsk
, 
to_do
, 
ªsu…
, 
	`gë_time
(Ë+ 
dñay
);

652 
	}
}

680 
RTAI_SYSCALL_MODE
 
	$π_i§pc
(
RT_TASK
 *
èsk
)

682  
èsk
->
°©e
 & 
RT_SCHED_RETURN
;

683 
	}
}

721 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ªtu∫
(
RT_TASK
 *
èsk
, 
ªsu…
)

723 
DECLARE_RT_CURRENT
;

724 
Êags
;

726 
	`CHECK_SENDER_MAGIC
(
èsk
);

728 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

729 
ASSIGN_RT_CURRENT
;

730 i‡((
èsk
->
°©e
 & 
RT_SCHED_RETURN
Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

731 
	`_π_ªtu∫
(
ªsu…
);

733 
èsk
 = 
NULL
;

735 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

736  
èsk
;

737 
	}
}

769 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_evdΩ
(
RT_TASK
 *
èsk
, *
msg
)

771 
DECLARE_RT_CURRENT
;

773 
	`CHECK_RECEIVER_MAGIC
(
èsk
);

775 
ASSIGN_RT_CURRENT
;

776 i‡(!
èsk
Ëèsk = (
π_cuºít
->
msg_queue
.
√xt
)->task;

777 i‡((
èsk
->
°©e
 & (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
)Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

778 i‡(
msg
) {

779 *(*)
msg
 = 
èsk
->msg;

782 
èsk
 = 
NULL
;

784  
èsk
;

785 
	}
}

823 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ive
(
RT_TASK
 *
èsk
, *
msg
)

825 
DECLARE_RT_CURRENT
;

826 
Êags
;

828 
	`CHECK_RECEIVER_MAGIC
(
èsk
);

830 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

831 
ASSIGN_RT_CURRENT
;

832 i‡(!
èsk
Ëèsk = (
π_cuºít
->
msg_queue
.
√xt
)->task;

833 i‡((
èsk
->
°©e
 & (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
)Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

834 
	`dequeue_blocked
(
èsk
);

835 
	`ªm_timed_èsk
(
èsk
);

836 i‡(
msg
) {

837 *(*)
msg
 = 
èsk
->msg;

839 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

840 i‡(
èsk
->
°©e
 & 
RT_SCHED_SEND
) {

841 
sched
;

842 
èsk
->
msg_queue
.task =Åask;

843 
sched
 = 
	`£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
);

844 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEND
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

845 
	`íq_ªady_èsk
(
èsk
);

846 i‡(
sched
) {

847 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

849 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

852 } i‡(
èsk
->
°©e
 & 
RT_SCHED_RPC
) {

853 
	`íqueue_blocked
(
èsk
, &
π_cuºít
->
ªt_queue
, 0);

854 
èsk
->
°©e
 = (èsk->°©ê& ~(
RT_SCHED_RPC
 | 
RT_SCHED_DELAYED
)Ë| 
RT_SCHED_RETURN
;

857 
π_cuºít
->
ªt_queue
.
èsk
 = 
RTP_HIGERR
;

858 
π_cuºít
->
°©e
 |
RT_SCHED_RECEIVE
;

859 
	`ªm_ªady_cuºít
(
π_cuºít
);

860 
π_cuºít
->
msg_queue
.
èsk
 =Åask !π_cuºíà?Åask : (
RT_TASK
 *)0;

861 
	`π_scheduÀ
();

862 i‡(
msg
) {

863 *(*)
msg
 = 
π_cuºít
->msg;

866 i‡(
π_cuºít
->
ªt_queue
.
èsk
) {

867 
	`msg_nŸ_ª˚ived
();

869 
èsk
 = 
π_cuºít
->
msg_queue
.task;

871 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current;

872 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

873 i‡(()
èsk
 > 
RTE_HIGERR
 && (
¥oxy_t
 *Èask->
°ack_bŸtom
) {

874 i‡(((
¥oxy_t
 *)
èsk
->
°ack_bŸtom
)->
ª˚ivî
 =
π_cuºít
) {

875 
	`π_ªtu∫
(
èsk
, 0);

878  
èsk
;

879 
	}
}

913 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ive_if
(
RT_TASK
 *
èsk
, *
msg
)

915 
DECLARE_RT_CURRENT
;

916 
Êags
;

918 
	`CHECK_RECEIVER_MAGIC
(
èsk
);

920 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

921 
ASSIGN_RT_CURRENT
;

922 i‡(!
èsk
Ëèsk = (
π_cuºít
->
msg_queue
.
√xt
)->task;

923 i‡((
èsk
->
°©e
 & (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
)Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

924 
	`dequeue_blocked
(
èsk
);

925 
	`ªm_timed_èsk
(
èsk
);

926 i‡(
msg
) {

927 *(*)
msg
 = 
èsk
->msg;

929 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

930 i‡(
èsk
->
°©e
 & 
RT_SCHED_SEND
) {

931 
sched
;

932 
èsk
->
msg_queue
.task =Åask;

933 
sched
 = 
	`£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
);

934 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEND
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

935 
	`íq_ªady_èsk
(
èsk
);

936 i‡(
sched
) {

937 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

939 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

942 } i‡(
èsk
->
°©e
 & 
RT_SCHED_RPC
) {

943 
	`íqueue_blocked
(
èsk
, &
π_cuºít
->
ªt_queue
, 0);

944 
èsk
->
°©e
 = (èsk->°©ê& ~(
RT_SCHED_RPC
 | 
RT_SCHED_DELAYED
)Ë| 
RT_SCHED_RETURN
;

946 i‡(
π_cuºít
->
ªt_queue
.
èsk
) {

947 
π_cuºít
->
ªt_queue
.
èsk
 = 
NULL
;

948 
èsk
 = 
NULL
;

950 
èsk
 = 
π_cuºít
->
msg_queue
.task;

952 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current;

954 
èsk
 = 
NULL
;

956 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

957 i‡(()
èsk
 > 
RTE_HIGERR
 && (
¥oxy_t
 *Èask->
°ack_bŸtom
) {

958 i‡(((
¥oxy_t
 *)
èsk
->
°ack_bŸtom
)->
ª˚ivî
 =
π_cuºít
) {

959 
	`π_ªtu∫
(
èsk
, 0);

962  
èsk
;

963 
	}
}

1007 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ive_u¡û
(
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
time
)

1009 
DECLARE_RT_CURRENT
;

1010 
Êags
;

1012 
	`CHECK_RECEIVER_MAGIC
(
èsk
);

1014 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1015 
ASSIGN_RT_CURRENT
;

1016 i‡(!
èsk
Ëèsk = (
π_cuºít
->
msg_queue
.
√xt
)->task;

1017 i‡((
èsk
->
°©e
 & (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
)Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

1018 
	`dequeue_blocked
(
èsk
);

1019 
	`ªm_timed_èsk
(
èsk
);

1020 i‡(
msg
) {

1021 *(*)
msg
 = 
èsk
->msg;

1023 
π_cuºít
->
msg_queue
.
èsk
 =Åask;

1024 i‡(
èsk
->
°©e
 & 
RT_SCHED_SEND
) {

1025 
sched
;

1026 
èsk
->
msg_queue
.task =Åask;

1027 
sched
 = 
	`£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
);

1028 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEND
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

1029 
	`íq_ªady_èsk
(
èsk
);

1030 i‡(
sched
) {

1031 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

1033 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

1036 } i‡(
èsk
->
°©e
 & 
RT_SCHED_RPC
) {

1037 
	`íqueue_blocked
(
èsk
, &
π_cuºít
->
ªt_queue
, 0);

1038 
èsk
->
°©e
 = (èsk->°©ê& ~(
RT_SCHED_RPC
 | 
RT_SCHED_DELAYED
)Ë| 
RT_SCHED_RETURN
;

1041 
π_cuºít
->
ªt_queue
.
èsk
 = 
RTP_HIGERR
;

1042 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

1043 
π_cuºít
->
°©e
 |(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
);

1044 
	`ªm_ªady_cuºít
(
π_cuºít
);

1045 
π_cuºít
->
msg_queue
.
èsk
 =Åask !π_cuºíà?Åask : (
RT_TASK
 *)0;

1046 
	`íq_timed_èsk
(
π_cuºít
);

1047 
	`π_scheduÀ
();

1048 i‡(
msg
) {

1049 *(*)
msg
 = 
π_cuºít
->msg;

1053 i‡(
π_cuºít
->
ªt_queue
.
èsk
) {

1054 
	`msg_nŸ_ª˚ived
();

1056 
èsk
 = 
π_cuºít
->
msg_queue
.task;

1058 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current;

1059 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1060 i‡(()
èsk
 > 
RTE_HIGERR
 && (
¥oxy_t
 *Èask->
°ack_bŸtom
) {

1061 i‡(((
¥oxy_t
 *)
èsk
->
°ack_bŸtom
)->
ª˚ivî
 =
π_cuºít
) {

1062 
	`π_ªtu∫
(
èsk
, 0);

1065  
èsk
;

1066 
	}
}

1111 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ive_timed
(
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
dñay
)

1113  
	`π_ª˚ive_u¡û
(
èsk
, 
msg
, 
	`gë_time
(Ë+ 
dñay
);

1114 
	}
}

1121 
	#SET_RPC_MCB
() \

1123 
mcb
.
sbuf
 = 
smsg
; \

1124 
mcb
.
sbyãs
 = 
ssize
; \

1125 
mcb
.
rbuf
 = 
rmsg
; \

1126 
mcb
.
rbyãs
 = 
rsize
; \

1127 } 0)

	)

1165 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωcx
(
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1167 i‡(
èsk
) {

1168 
mcb_t
 
mcb
;

1169 
ªåï
;

1170 
	`SET_RPC_MCB
();

1171  
	`π_Ωc
(
èsk
, ()&
mcb
, &
ªåï
);

1174 
	}
}

1215 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωcx_if
(
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1217 i‡(
èsk
) {

1218 
mcb_t
 
mcb
;

1219 
ªåï
;

1220 
	`SET_RPC_MCB
();

1221  
	`π_Ωc_if
(
èsk
, ()&
mcb
, &
ªåï
);

1224 
	}
}

1270 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωcx_u¡û
(
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
)

1272 i‡(
èsk
) {

1273 
mcb_t
 
mcb
;

1274 
ªåï
;

1275 
	`SET_RPC_MCB
();

1276  
	`π_Ωc_u¡û
(
èsk
, ()&
mcb
, &
ªåï
, 
time
);

1279 
	}
}

1325 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_Ωcx_timed
(
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
)

1327 i‡(
èsk
) {

1328 
mcb_t
 
mcb
;

1329 
ªåï
;

1330 
	`SET_RPC_MCB
();

1331  
	`π_Ωc_timed
(
èsk
, ()&
mcb
, &
ªåï
, 
dñay
);

1334 
	}
}

1336 
	#SEND_RCV_BYTES
 0xFFFFFFFF

	)

1337 
	#SET_SEND_MCB
() \

1339 
mcb
.
sbuf
 = 
msg
; \

1340 
mcb
.
sbyãs
 = 
size
; \

1341 
mcb
.
rbuf
 = 
NULL
; \

1342 
mcb
.
rbyãs
 = 
SEND_RCV_BYTES
; \

1343 } 0)

	)

1378 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£ndx
(
RT_TASK
 *
èsk
, *
msg
, 
size
)

1380 i‡(
èsk
) {

1381 
mcb_t
 
mcb
;

1382 
ªåï
;

1383 
	`SET_SEND_MCB
();

1384  
	`π_Ωc
(
èsk
, ()&
mcb
, &
ªåï
);

1387 
	}
}

1421 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£ndx_if
(
RT_TASK
 *
èsk
, *
msg
, 
size
)

1423 
DECLARE_RT_CURRENT
;

1424 
Êags
;

1426 
	`CHECK_SENDER_MAGIC
(
èsk
);

1428 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1429 
ASSIGN_RT_CURRENT
;

1430 i‡((
èsk
->
°©e
 & 
RT_SCHED_RECEIVE
) &&

1431 (!
èsk
->
msg_queue
.èsk ||Åask->msg_queue.èsk =
π_cuºít
)) {

1432 
èsk
->
mcb
.
sbuf
 = 
msg
;

1433 
èsk
->
mcb
.
sbyãs
 = 
size
;

1434 
èsk
->
msg
 = ()&èsk->
mcb
;

1435 
èsk
->
msg_queue
.èsk = 
π_cuºít
;

1436 
èsk
->
ªt_queue
.èsk = 
NULL
;

1437 
	`ªm_timed_èsk
(
èsk
);

1438 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_RECEIVE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

1439 
	`íq_ªady_èsk
(
èsk
);

1440 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

1442 i‡(
π_cuºít
->
msg_queue
.
èsk
 !=Ñt_current) {

1443 
π_cuºít
->
msg_queue
.
èsk
 =Ñt_current;

1444 
èsk
 = 
NULL
;

1447 
èsk
 = 
NULL
;

1449 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1450  
èsk
;

1451 
	}
}

1495 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£ndx_u¡û
(
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
time
)

1497 i‡(
èsk
) {

1498 
mcb_t
 
mcb
;

1499 
ªåï
;

1500 
	`SET_SEND_MCB
();

1501  
	`π_Ωc_u¡û
(
èsk
, ()&
mcb
, &
ªåï
, 
time
);

1504 
	}
}

1548 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_£ndx_timed
(
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
)

1550 i‡(
èsk
) {

1551 
mcb_t
 
mcb
;

1552 
ªåï
;

1553 
	`SET_SEND_MCB
();

1554  
	`π_Ωc_timed
(
èsk
, ()&
mcb
, &
ªåï
, 
dñay
);

1557 
	}
}

1595 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ªtu∫x
(
RT_TASK
 *
èsk
, *
msg
, 
size
)

1597 
DECLARE_RT_CURRENT
;

1598 
Êags
;

1600 
	`CHECK_SENDER_MAGIC
(
èsk
);

1602 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1603 
ASSIGN_RT_CURRENT
;

1604 i‡((
èsk
->
°©e
 & 
RT_SCHED_RETURN
Ë&&Åask->
msg_queue
.èsk =
π_cuºít
) {

1605 
mcb_t
 *
mcb
;

1606 i‡((
mcb
 = (
mcb_t
 *)
èsk
->
msg
)->
rbyãs
 < 
size
) {

1607 
size
 = 
mcb
->
rbyãs
;

1609 i‡(
msg
 && 
size
 > 0) {

1610 
	`mem˝y
(
mcb
->
rbuf
, 
msg
, 
size
);

1612 
	`_π_ªtu∫
(0UL);

1614 
èsk
 = 
NULL
;

1616 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1617  
èsk
;

1618 
	}
}

1620 
	#DO_RCV_MSG
() \

1622 i‡(
msg
 && (*
Àn
 = 
size
 <
mcb
->
sbyãs
 ? size : mcb->sbytes)) { \

1623 
	`mem˝y
(
msg
, 
mcb
->
sbuf
, *
Àn
); \

1625 i‡(()
èsk
 > 
RTE_HIGERR
 && !
mcb
->
rbuf
 && mcb->
rbyãs
 =
SEND_RCV_BYTES
) { \

1626 
	`π_ªtu∫
(
èsk
, 0UL); \

1628 } 0)

	)

1663 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_evdΩx
(
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1665 
mcb_t
 *
mcb
;

1666 i‡(()(
èsk
 = 
	`π_evdΩ
—ask, (*)&
mcb
)Ë> 
RTE_HIGERR
) {

1667 
	`DO_RCV_MSG
();

1669  
èsk
;

1670 
	}
}

1713 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ivex
(
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1715 
mcb_t
 *
mcb
;

1716 i‡(()(
èsk
 = 
	`π_ª˚ive
—ask, (*)&
mcb
)Ë> 
RTE_HIGERR
) {

1717 
	`DO_RCV_MSG
();

1719  
èsk
;

1720 
	}
}

1763 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ivex_if
(
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1765 
mcb_t
 *
mcb
;

1766 i‡(()(
èsk
 = 
	`π_ª˚ive_if
—ask, (*)&
mcb
)Ë> 
RTE_HIGERR
) {

1767 
	`DO_RCV_MSG
();

1769  
èsk
;

1770 
	}
}

1819 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ivex_u¡û
(
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
)

1821 
mcb_t
 *
mcb
;

1822 i‡(()(
èsk
 = 
	`π_ª˚ive_u¡û
—ask, (*)&
mcb
, 
time
)Ë> 
RTE_HIGERR
) {

1823 
	`DO_RCV_MSG
();

1825  
èsk
;

1826 
	}
}

1875 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_ª˚ivex_timed
(
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
)

1877 
mcb_t
 *
mcb
;

1878 i‡(()(
èsk
 = 
	`π_ª˚ive_timed
—ask, (*)&
mcb
, 
dñay
)Ë> 
RTE_HIGERR
) {

1879 
	`DO_RCV_MSG
();

1881  
èsk
;

1882 
	}
}

1887 
RT_TASK
 * 
π_föd_èsk_by_pid
(
pid_t
);

1889 
ölöe
 
π_èsk_°ru˘
 *
	$pid2πèsk
(
pid
)

1891 
èsk_°ru˘
 *
 xtsk
 = 
	`föd_èsk_by_pid
(
pid
);

1892  
 xtsk
 ?Ünxtsk->
	`πai_tskext
(
TSKEXT0
Ë: 
	`π_föd_èsk_by_pid
(
pid
);

1893 
	}
}

1895 
ölöe
 
	$πèsk2pid
(
π_èsk_°ru˘
 * 
èsk
)

1897  
èsk
->
 xtsk
 ?Åask-> xtsk->
pid
 :Åask->
tid
;

1898 
	}
}

1904 
	$¥oxy_èsk
(
RT_TASK
 *
me
)

1906 
¥oxy_t
 *
my
;

1907 
ªt
;

1909 
my
 = (
¥oxy_t
 *)
me
->
°ack_bŸtom
;

1911 
my
->
nmsgs
) {

1912 
	`©omic_dec
((
©omic_t
 *)&
my
->
nmsgs
);

1913 
	`π_Ωc
(
my
->
ª˚ivî
, *((*)my->
msg
), &
ªt
);

1915 
	`π_èsk_su•íd
(
me
);

1917 
	}
}

1920 
RT_TASK
 *
__π_¥oxy_©èch
((*
agít
)(), RT_TASK *
èsk
, *
msg
, 
nbyãs
, 
¥i‹ôy
)

1922 
RT_TASK
 *
¥oxy
, *
π_cuºít
;

1923 
¥oxy_t
 *
my
;

1925 
π_cuºít
 = 
	`_π_whﬂmi
();

1926 i‡(!
èsk
) {

1927 
èsk
 = 
π_cuºít
;

1930 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

1934 i‡(!(
¥oxy
 = 
	`π_mÆloc
((
RT_TASK
)))) {

1938 i‡(
¥i‹ôy
 =-1 && (¥i‹ôy = 
π_cuºít
->
ba£_¥i‹ôy
Ë=
RT_SCHED_LINUX_PRIORITY
) {

1939 
¥i‹ôy
 = 
RT_SCHED_LOWEST_PRIORITY
;

1941 i‡(
	`π_èsk_öô
(
¥oxy
, 
agít
, (Ìroxy, 
PROXY_MIN_STACK_SIZE
 + 
nbyãs
 + (
¥oxy_t
), 
¥i‹ôy
, 0, 0)) {

1942 
	`π_‰ì
(
¥oxy
);

1946 
my
 = (
¥oxy_t
 *)(
¥oxy
->
°ack_bŸtom
);

1947 
my
->
ª˚ivî
 = 
èsk
 ;

1948 
my
->
msg
 = ((*)(
¥oxy
->
°ack_bŸtom
)Ë+ (
¥oxy_t
);

1949 
my
->
nmsgs
 = 0;

1950 
my
->
nbyãs
 =Çbytes;

1951 i‡(
msg
 && 
nbyãs
) {

1952 
	`mem˝y
(
my
->
msg
, msg, 
nbyãs
);

1956  
¥oxy
;

1957 
	}
}

1960 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_¥oxy_©èch
(
RT_TASK
 *
èsk
, *
msg
, 
nbyãs
, 
¥io
)

1962  
	`__π_¥oxy_©èch
((*)
¥oxy_èsk
, 
èsk
, 
msg
, 
nbyãs
, 
¥io
);

1963 
	}
}

1967 
RTAI_SYSCALL_MODE
 
	$π_¥oxy_dëach
(
RT_TASK
 *
¥oxy
)

1969 i‡(!
	`π_èsk_dñëe
(
¥oxy
)) {

1970 
	`π_‰ì
(
¥oxy
);

1973  -
EINVAL
;

1974 
	}
}

1977 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_åiggî
(
RT_TASK
 *
¥oxy
)

1979 
¥oxy_t
 *
his
;

1981 
his
 = (
¥oxy_t
 *)(
¥oxy
->
°ack_bŸtom
);

1982 i‡(
his
 && 
¥oxy
->
magic
 =
RT_TASK_MAGIC
) {

1983 
	`©omic_öc
((
©omic_t
 *)&
his
->
nmsgs
);

1984 
	`π_èsk_ªsume
(
¥oxy
);

1985  
his
->
ª˚ivî
;

1987  (
RT_TASK
 *)0;

1988 
	}
}

1995 
	~<asm/uac˚ss.h
>

1997 
	~"πai_ªgi°ry.h
"

1998 
	~"πai_msg.h
"

2000 
RTAI_SYSCALL_MODE
 
	$π_Síd
(
pid_t
 
pid
, *
smsg
, *
rmsg
, 
size_t
 
ssize
, size_à
rsize
)

2002 
RT_TASK
 *
èsk
;

2003 i‡((
èsk
 = 
	`pid2πèsk
(
pid
))) {

2004 
MSGCB
 
cb
;

2005 
RT_TASK
 *
ª∂õr
;

2006 
ª∂yÀn
;

2007 
cb
.
cmd
 = 
SYNCMSG
;

2008 
cb
.
sbuf
 = 
smsg
;

2009 
cb
.
sbyãs
 = 
ssize
;

2010 
cb
.
rbuf
 = 
rmsg
;

2011 
cb
.
rbyãs
 = 
rsize
;

2012 i‡(!(
ª∂õr
 = 
	`π_Ωc
(
èsk
, ()&
cb
, &
ª∂yÀn
))) {

2013  -
EINVAL
;

2014 } i‡(
ª∂õr
 !
èsk
) {

2015  -
ESRCH
;

2017  
ª∂yÀn
 ;

2019  -
ESRCH
;

2020 
	}
}

2022 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Re˚ive
(
pid_t
 
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
)

2024 
RT_TASK
 *
èsk
;

2025 
MSGCB
 *
cb
;

2026 i‡((
èsk
 = 
	`π_ª˚ive
(
pid
 ? 
	`pid2πèsk
’idË: 0, (*)&
cb
))) {

2027 i‡((
pid
 = 
	`πèsk2pid
(
èsk
))) {

2028 *
msgÀn
 = 
maxsize
 <
cb
->
sbyãs
 ? maxsize : cb->sbytes;

2029 i‡(*
msgÀn
) {

2030 
	`mem˝y
(
msg
, 
cb
->
sbuf
, *
msgÀn
);

2032  
pid
;

2034  -
ESRCH
;

2036  -
EINVAL
;

2037 
	}
}

2039 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Cª˚ive
(
pid_t
 
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
, 
RTIME
 
dñay
)

2041 
RT_TASK
 *
èsk
;

2042 
MSGCB
 *
cb
;

2043 
èsk
 = 
pid
 ? 
	`pid2πèsk
(pid) : 0;

2044 i‡(
dñay
) {

2045 
èsk
 = 
	`π_ª˚ive_timed
—ask, (*)&
cb
, 
dñay
);

2047 
èsk
 = 
	`π_ª˚ive_if
—ask, (*)&
cb
);

2049 i‡(
èsk
) {

2050 i‡((
pid
 = 
	`πèsk2pid
(
èsk
))) {

2051 *
msgÀn
 = 
maxsize
 <
cb
->
sbyãs
 ? maxsize : cb->sbytes;

2052 i‡(*
msgÀn
) {

2053 
	`mem˝y
(
msg
, 
cb
->
sbuf
, *
msgÀn
);

2055  
pid
;

2060 
	}
}

2062 
RTAI_SYSCALL_MODE
 
	$π_Rïly
(
pid_t
 
pid
, *
msg
, 
size_t
 
size
)

2064 
RT_TASK
 *
èsk
;

2065 i‡((
èsk
 = 
	`pid2πèsk
(
pid
))) {

2066 
MSGCB
 *
cb
;

2067 i‡((
cb
 = (
MSGCB
 *)
èsk
->
msg
)->
cmd
 =
SYNCMSG
) {

2068 
ªéí
;

2069 
RT_TASK
 *
ªèsk
;

2070 i‡((
ªéí
 = 
size
 <
cb
->
rbyãs
 ? size : cb->rbytes)) {

2071 
	`mem˝y
(
cb
->
rbuf
, 
msg
, 
ªéí
);

2073 i‡(!(
ªèsk
 = 
	`π_ªtu∫
(
èsk
, 
ªéí
))) {

2074  -
EINVAL
;

2075 } i‡(
ªèsk
 !
èsk
) {

2076  -
ESRCH
;

2080  -
EPERM
;

2082  -
ESRCH
;

2083 
	}
}

2085 
	$Proxy_Task
(
RT_TASK
 *
me
)

2087 
¥oxy_t
 *
my
;

2088 
MSGCB
 
cb
;

2089 
ª∂yÀn
;

2090 
my
 = (
¥oxy_t
 *)
me
->
°ack_bŸtom
;

2091 
cb
.
cmd
 = 
PROXY
;

2092 
cb
.
sbuf
 = 
my
->
msg
;

2093 
cb
.
sbyãs
 = 
my
->
nbyãs
;

2094 
cb
.
rbuf
 = &
ª∂yÀn
;

2095 
cb
.
rbyãs
 = (
ª∂yÀn
);

2097 
my
->
nmsgs
) {

2098 
	`©omic_dec
((
©omic_t
 *)&
my
->
nmsgs
);

2099 
	`π_Ωc
(
my
->
ª˚ivî
, ()(&
cb
), &
ª∂yÀn
);

2101 
	`π_èsk_su•íd
(
me
);

2103 
	}
}

2105 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Proxy_©èch
(
pid_t
 
pid
, *
msg
, 
nbyãs
, 
¥io
)

2107 
RT_TASK
 *
èsk
;

2108  (
èsk
 = 
	`__π_¥oxy_©èch
((*)
Proxy_Task
, 
pid
 ? 
	`pid2πèsk
’idË: 0, 
msg
, 
nbyãs
, 
¥io
)Ë?Åask->
tid
 : -
ENOMEM
;

2109 
	}
}

2111 
RTAI_SYSCALL_MODE
 
	$π_Proxy_dëach
(
pid_t
 
pid
)

2113 
RT_TASK
 *
¥oxy
;

2114 i‡(!
	`π_èsk_dñëe
(
¥oxy
 = 
	`pid2πèsk
(
pid
))) {

2115 
	`π_‰ì
(
¥oxy
);

2118  -
EINVAL
;

2119 
	}
}

2121 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Triggî
(
pid_t
 
pid
)

2123 
RT_TASK
 *
¥oxy
;

2124 
¥oxy_t
 *
his
;

2125 i‡((
¥oxy
 = 
	`pid2πèsk
(
pid
))) {

2126 
his
 = (
¥oxy_t
 *)(
¥oxy
->
°ack_bŸtom
);

2127 i‡(
his
 && 
¥oxy
->
magic
 =
RT_TASK_MAGIC
) {

2128 
	`©omic_öc
((
©omic_t
 *)&
his
->
nmsgs
);

2129 
	`π_èsk_ªsume
(
¥oxy
);

2130  
	`πèsk2pid
(
his
->
ª˚ivî
);

2132  -
EINVAL
;

2134  -
ESRCH
;

2135 
	}
}

2138 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Name_©èch
(c⁄° *
¨g«me
)

2140 
RT_TASK
 *
èsk
;

2141 
èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
Ë? (
RT_TASK
 *)cuºít->πai_tskext(TSKEXT0Ë: 
	`_π_whﬂmi
();

2142 i‡(
cuºít
->
comm
[0] != 'U' && current->comm[1] != ':') {

2143 
	`π_°∫˝y_‰om_u£r
(
èsk
->
èsk_«me
, 
¨g«me
, 
RTAI_MAX_NAME_LENGTH
);

2145 
	`°∫˝y
(
èsk
->
èsk_«me
, 
¨g«me
, 
RTAI_MAX_NAME_LENGTH
);

2147 
èsk
->
èsk_«me
[
RTAI_MAX_NAME_LENGTH
 - 1] = 0;

2148  
	`°∫Àn
(
èsk
->
èsk_«me
, 
RTAI_MAX_NAME_LENGTH
Ë> (RTAI_MAX_NAME_LENGTH - 1Ë? -
EINVAL
 :Åask->
tid
;

2149 
	}
}

2151 
RTAI_SYSCALL_MODE
 
pid_t
 
	$π_Name_loˇã
(c⁄° *
¨gho°
, c⁄° *
¨g«me
)

2153 
RT_TASK
 
π_smp_löux_èsk
[];

2154 
˝uid
;

2155 
RT_TASK
 *
èsk
;

2156 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

2157 
èsk
 = &
π_smp_löux_èsk
[
˝uid
];

2158 (
èsk
 =Åask->
√xt
)) {

2159 i‡(!
	`°∫cmp
(
¨g«me
, 
èsk
->
èsk_«me
, 
RTAI_MAX_NAME_LENGTH
 - 1)) {

2160  
èsk
->
tid
;

2164  
	`°æí
(
¨g«me
Ë<6 && (
èsk
 = 
	`π_gë_adr
(
	`«m2num
◊rg«me))Ë? 
	`πèsk2pid
(task) : 0;

2165 
	}
}

2167 
RTAI_SYSCALL_MODE
 
	$π_Name_dëach
(
pid_t
 
pid
)

2169 
	`π_föd_èsk_by_pid
(
pid
)->
èsk_«me
[0] = 0;

2171 
	}
}

2176 
π_«tive_fun_íåy
 
	gπ_msg_íåõs
[] = {

2177 { { 1, 
π_£nd
 }, 
SENDMSG
 },

2178 { { 1, 
π_£nd_if
 }, 
SEND_IF
 },

2179 { { 1, 
π_£nd_u¡û
 }, 
SEND_UNTIL
 },

2180 { { 1, 
π_£nd_timed
 }, 
SEND_TIMED
 },

2181 { { 
UW1
(2, 0), 
π_evdΩ
 }, 
EVDRP
 },

2182 { { 
UW1
(2, 0), 
π_ª˚ive
 }, 
RECEIVEMSG
 },

2183 { { 
UW1
(2, 0), 
π_ª˚ive_if
 }, 
RECEIVE_IF
 },

2184 { { 
UW1
(2, 0), 
π_ª˚ive_u¡û
 }, 
RECEIVE_UNTIL
 },

2185 { { 
UW1
(2, 0), 
π_ª˚ive_timed
 }, 
RECEIVE_TIMED
 },

2186 { { 
UW1
(3, 0), 
π_Ωc
 }, 
RPCMSG
 },

2187 { { 
UW1
(3, 0), 
π_Ωc_if
 }, 
RPC_IF
 },

2188 { { 
UW1
(3, 0), 
π_Ωc_u¡û
 }, 
RPC_UNTIL
 },

2189 { { 
UW1
(3, 0), 
π_Ωc_timed
 }, 
RPC_TIMED
 },

2190 { { 0, 
π_i§pc
 }, 
ISRPC
 },

2191 { { 1, 
π_ªtu∫
 }, 
RETURNMSG
 },

2192 { { 
UR1
(2, 4Ë| 
UW1
(3, 5), 
π_Ωcx
 }, 
RPCX
 },

2193 { { 
UR1
(2, 4Ë| 
UW1
(3, 5), 
π_Ωcx_if
 }, 
RPCX_IF
 },

2194 { { 
UR1
(2, 4Ë| 
UW1
(3, 5), 
π_Ωcx_u¡û
 }, 
RPCX_UNTIL
 },

2195 { { 
UR1
(2, 4Ë| 
UW1
(3, 5), 
π_Ωcx_timed
 }, 
RPCX_TIMED
 },

2196 { { 
UR1
(2, 3), 
π_£ndx
 }, 
SENDX
 },

2197 { { 
UR1
(2, 3), 
π_£ndx_if
 }, 
SENDX_IF
 },

2198 { { 
UR1
(2, 3), 
π_£ndx_u¡û
 }, 
SENDX_UNTIL
 },

2199 { { 
UR1
(2, 3), 
π_£ndx_timed
 }, 
SENDX_TIMED
 },

2200 { { 
UR1
(2, 3), 
π_ªtu∫x
 }, 
RETURNX
 },

2201 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_evdΩx
 }, 
EVDRPX
 },

2202 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_ª˚ivex
 }, 
RECEIVEX
 },

2203 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_ª˚ivex_if
 }, 
RECEIVEX_IF
 },

2204 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_ª˚ivex_u¡û
 }, 
RECEIVEX_UNTIL
 },

2205 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_ª˚ivex_timed
 }, 
RECEIVEX_TIMED
 },

2206 { { 
UR1
(2, 3), 
π_¥oxy_©èch
 }, 
PROXY_ATTACH
 },

2207 { { 1, 
π_¥oxy_dëach
 }, 
PROXY_DETACH
 },

2208 { { 1, 
π_åiggî
 }, 
PROXY_TRIGGER
 },

2209 { { 
UR1
(2, 4Ë| 
UW1
(3, 5), 
π_Síd
 }, 
RT_SEND
 },

2210 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_Re˚ive
 }, 
RT_RECEIVE
 },

2211 { { 
UW1
(2, 3Ë| 
UW2
(4, 0), 
π_Cª˚ive
 }, 
RT_CRECEIVE
 },

2212 { { 
UR1
(2, 3), 
π_Rïly
 }, 
RT_REPLY
 },

2213 { { 
UR1
(2, 3), 
π_Proxy_©èch
 }, 
RT_PROXY_ATTACH
 },

2214 { { 1, 
π_Proxy_dëach
 }, 
RT_PROXY_DETACH
 },

2215 { { 1, 
π_Triggî
 }, 
RT_TRIGGER
 },

2216 { { 1, 
π_Name_©èch
 }, 
RT_NAME_ATTACH
 },

2217 { { 0, 
π_Name_loˇã
 }, 
RT_NAME_LOCATE
 },

2218 { { 1, 
π_Name_dëach
 }, 
RT_NAME_DETACH
 },

2222 
	$__πai_msg_öô
 ()

2224  
	`£t_π_fun_íåõs
(
π_msg_íåõs
);

2225 
	}
}

2227 
	$__πai_msg_exô
 ()

2229 
	`ª£t_π_fun_íåõs
(
π_msg_íåõs
);

2230 
	}
}

2232 #i‚de‡
CONFIG_RTAI_MSG_BUILTIN


2233 
moduÀ_öô
(
__πai_msg_öô
);

2234 
moduÀ_exô
(
__πai_msg_exô
);

2237 #ifde‡
CONFIG_KBUILD


2238 
EXPORT_SYMBOL
(
π_£nd
);

2239 
EXPORT_SYMBOL
(
π_£nd_if
);

2240 
EXPORT_SYMBOL
(
π_£nd_u¡û
);

2241 
EXPORT_SYMBOL
(
π_£nd_timed
);

2242 
EXPORT_SYMBOL
(
π_Ωc
);

2243 
EXPORT_SYMBOL
(
π_Ωc_if
);

2244 
EXPORT_SYMBOL
(
π_Ωc_u¡û
);

2245 
EXPORT_SYMBOL
(
π_Ωc_timed
);

2246 
EXPORT_SYMBOL
(
π_i§pc
);

2247 
EXPORT_SYMBOL
(
π_ªtu∫
);

2248 
EXPORT_SYMBOL
(
π_evdΩ
);

2249 
EXPORT_SYMBOL
(
π_ª˚ive
);

2250 
EXPORT_SYMBOL
(
π_ª˚ive_if
);

2251 
EXPORT_SYMBOL
(
π_ª˚ive_u¡û
);

2252 
EXPORT_SYMBOL
(
π_ª˚ive_timed
);

2253 
EXPORT_SYMBOL
(
π_Ωcx
);

2254 
EXPORT_SYMBOL
(
π_Ωcx_if
);

2255 
EXPORT_SYMBOL
(
π_Ωcx_u¡û
);

2256 
EXPORT_SYMBOL
(
π_Ωcx_timed
);

2257 
EXPORT_SYMBOL
(
π_£ndx
);

2258 
EXPORT_SYMBOL
(
π_£ndx_if
);

2259 
EXPORT_SYMBOL
(
π_£ndx_u¡û
);

2260 
EXPORT_SYMBOL
(
π_£ndx_timed
);

2261 
EXPORT_SYMBOL
(
π_ªtu∫x
);

2262 
EXPORT_SYMBOL
(
π_evdΩx
);

2263 
EXPORT_SYMBOL
(
π_ª˚ivex
);

2264 
EXPORT_SYMBOL
(
π_ª˚ivex_if
);

2265 
EXPORT_SYMBOL
(
π_ª˚ivex_u¡û
);

2266 
EXPORT_SYMBOL
(
π_ª˚ivex_timed
);

2268 
EXPORT_SYMBOL
(
__π_¥oxy_©èch
);

2269 
EXPORT_SYMBOL
(
π_¥oxy_©èch
);

2270 
EXPORT_SYMBOL
(
π_¥oxy_dëach
);

2271 
EXPORT_SYMBOL
(
π_åiggî
);

2273 
EXPORT_SYMBOL
(
π_Síd
);

2274 
EXPORT_SYMBOL
(
π_Re˚ive
);

2275 
EXPORT_SYMBOL
(
π_Cª˚ive
);

2276 
EXPORT_SYMBOL
(
π_Rïly
);

2277 
EXPORT_SYMBOL
(
π_Proxy_©èch
);

2278 
EXPORT_SYMBOL
(
π_Proxy_dëach
);

2279 
EXPORT_SYMBOL
(
π_Triggî
);

2280 
EXPORT_SYMBOL
(
π_Name_©èch
);

2281 
EXPORT_SYMBOL
(
π_Name_loˇã
);

2282 
EXPORT_SYMBOL
(
π_Name_dëach
);

	@/usr/src/rtai/base/ipc/msg/rtai_msg.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

22 { 0x754d539c, 
__VMLINUX_SYMBOL_STR
(
°æí
) },

23 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

24 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

25 { 0xb22c9294, 
__VMLINUX_SYMBOL_STR
(
π_èsk_ªsume
) },

26 { 0x53cb81f1, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô
) },

27 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

28 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

29 { 0x11089ac7, 
__VMLINUX_SYMBOL_STR
(
_˘y≥
) },

30 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

31 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

32 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

33 { 0x9166Áda, 
__VMLINUX_SYMBOL_STR
(
°∫˝y
) },

34 { 0x5a921311, 
__VMLINUX_SYMBOL_STR
(
°∫cmp
) },

35 { 0xade90a55, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr
) },

36 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

37 { 0xe01e0c16, 
__VMLINUX_SYMBOL_STR
(
π_smp_time_h
) },

38 { 0x4b55ad3c, 
__VMLINUX_SYMBOL_STR
(
π_föd_èsk_by_pid
) },

39 { 0x12c0d4b7, 
__VMLINUX_SYMBOL_STR
(
π_èsk_su•íd
) },

40 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

41 { 0xa916b694, 
__VMLINUX_SYMBOL_STR
(
°∫Àn
) },

42 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

43 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

44 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

45 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

46 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

47 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

48 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

49 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

50 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

51 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

52 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

55 c⁄° 
	g__moduÀ_dïíds
[]

56 
__u£d


57 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

61 
MODULE_INFO
(
§cvîsi⁄
, "2D1B4A75AF8DD1CA6D740D1");

	@/usr/src/rtai/base/ipc/netrpc/netrpc.c

20 
	~<löux/kî√l.h
>

21 
	~<löux/moduÀ.h
>

22 
	~<löux/vîsi⁄.h
>

23 
	~<löux/timî.h
>

24 
	~<löux/uni°d.h
>

25 
	~<asm/uac˚ss.h
>

27 
	~<√t/ù.h
>

29 
	~<πai_schedc‹e.h
>

30 
	~<πai_¥öhî.h
>

31 
	~<πai_√åpc.h
>

32 
	~<πai_£m.h
>

33 
	~<πai_mbx.h
>

35 
MODULE_LICENSE
("GPL");

37 
	#COMPILE_ANYHOW


38 
	~<πdm.h
>

	)

39 
	~"π√tP.h
"

43 
	#SOFT_RTNET
 1

	)

45 #ifde‡
CONFIG_RTAI_NETRPC_RTNET


46 
	#HARD_RTNET
 1

	)

48 
	#HARD_RTNET
 0

	)

53 #i‡
HARD_RTNET


54 #i‚de‡
COMPILE_ANYHOW


55 
	~<π√t.h
>

57 
	#MSG_SOFT
 0

	)

58 
	#MSG_HARD
 1

	)

59 
	#h¨d_π_sockë
 
π_dev_sockë


	)

60 
	#h¨d_π_böd
 
π_dev_böd


	)

61 
	#h¨d_π_˛o£
 
π_dev_˛o£


	)

62 
	#h¨d_π_sockë_ˇŒback
 
h¨d_π_sockë_ˇŒback


	)

63 
	#h¨d_π_ªcv‰om
 
π_dev_ªcv‰om


	)

64 
	#h¨d_π_£ndto
 
π_dev_£ndto


	)

66 
	#MSG_SOFT
 0

	)

67 
	#MSG_HARD
 1

	)

68 
	#h¨d_π_sockë
(
a
, 
b
, 
c
Ë
p‹t¶Ÿ
[
i
].
sockë
[0]

	)

69 
	#h¨d_π_böd
(
a
, 
b
, 
c
)

	)

70 
	#h¨d_π_˛o£
(
a
)

	)

71 
	#h¨d_π_sockë_ˇŒback
 
so·_π_sockë_ˇŒback


	)

72 
	#h¨d_π_ªcv‰om
 
so·_π_ªcv‰om


	)

73 
	#h¨d_π_£ndto
 
so·_π_£ndto


	)

76 
	#LOCALHOST
 "127.0.0.1"

	)

78 
	#BASEPORT
 (
NETRPC_BASEPORT
)

	)

80 
	#NETRPC_STACK_SIZE
 6000

	)

82 
	gMaxStubs
 = 
MAX_STUBS
;

83 
RTAI_MODULE_PARM
(
MaxStubs
, 
ul⁄g
);

84 
	gMaxStubsM⁄e
;

86 
	gMaxSocks
 = 
MAX_SOCKS
;

87 
RTAI_MODULE_PARM
(
MaxSocks
, 
ul⁄g
);

89 
	gSèckSize
 = 
NETRPC_STACK_SIZE
;

90 
RTAI_MODULE_PARM
(
SèckSize
, );

92 *
	gThisNode
 = 
LOCALHOST
;

93 
RTAI_MODULE_PARM
(
ThisNode
, 
ch¨p
);

95 *
	gThisSo·Node
 = 0;

96 
RTAI_MODULE_PARM
(
ThisSo·Node
, 
ch¨p
);

98 *
	gThisH¨dNode
 = 0;

99 
RTAI_MODULE_PARM
(
ThisH¨dNode
, 
ch¨p
);

101 
	#MAX_DFUN_EXT
 16

	)

103 
π_fun_íåy
 *
π_fun_ext
[];

104 
	#π_√t_Ωc_fun_ext
 
π_fun_ext


	)

106 
	gthis_node
[2];

108 
	#PRTSRVNAME
 0xFFFFFFFF

	)

109 
	sp‹t¶Ÿ_t
 { 
p‹t¶Ÿ_t
 *
	mp
; 
	mèsk
; 
	mödx
, 
	m∂a˚
, 
	msockë
[2], 
	mh¨d
; 
	mow√r
; 
SEM
 
	m£m
; *
	mmsg
; 
sockaddr_ö
 
	maddr
; 
MBX
 *
	mmbx
; 
	m«me
; 
RTIME
 
	mtimeout
; 
	mªcovîed
; };

110 
DEFINE_SPINLOCK
(
p‹t¶Ÿ_lock
);

111 vﬁ©ûê
	gp‹t¶Ÿ•
;

113 
DEFINE_SPINLOCK
(
°ub_lock
);

114 vﬁ©ûê
	g°ubs•
 = 1;

117 
p‹t¶Ÿ_t
 *
	gp‹t¶Ÿ
;

118 
sockaddr_ö
 
	gSPRT_ADDR
;

119 
	sªcovîy_msg
 { 
	mh¨d
, 
	m¥i‹ôy
; 
	mow√r
; 
sockaddr
 
	maddr
; };

120 °ru˘ { 
	mö
, 
	mout
; 
ªcovîy_msg
 *
	mmsg
; } 
	gªcovîy
;

121 
DEFINE_SPINLOCK
(
ªcovîy_lock
);

123 #i‡
HARD_RTNET


124 
	$h¨d_π_sockë_ˇŒback
(
fd
, *
func
, *
¨g
)

126 
π√t_ˇŒback
 
¨gs
 = { 
func
, 
¨g
 };

127 (
	`π_dev_io˘l
(
fd
, 
RTNET_RTIOC_CALLBACK
, &
¨gs
));

128 
	}
}

131 
ölöe
 
p‹t¶Ÿ_t
 *
	$gë_p‹t¶Ÿ
()

133 
Êags
;

135 
Êags
 = 
	`π_•ö_lock_úqßve
(&
p‹t¶Ÿ_lock
);

136 i‡(
p‹t¶Ÿ•
 < 
MaxSocks
) {

137 
p‹t¶Ÿ_t
 *
p
;

138 
p
 = 
p‹t¶Ÿ
[
p‹t¶Ÿ•
++].p;

139 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
p‹t¶Ÿ_lock
);

140  
p
;

142 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
p‹t¶Ÿ_lock
);

144 
	}
}

146 
ölöe
 
	$gvb_p‹t¶Ÿ
(
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
)

148 
Êags
;

150 
Êags
 = 
	`π_•ö_lock_úqßve
(&
p‹t¶Ÿ_lock
);

151 i‡(
p‹t¶Ÿ•
 > 
MaxStubs
) {

152 
p‹t¶Ÿ_t
 *
tmp_p
;

153 
tmp_∂a˚
;

154 
tmp_p
 = 
p‹t¶Ÿ
[--
p‹t¶Ÿ•
].
p
;

155 
tmp_∂a˚
 = 
p‹t¶Ÿp
->
∂a˚
;

156 
p‹t¶Ÿp
->
∂a˚
 = 
p‹t¶Ÿ•
;

157 
p‹t¶Ÿ
[
p‹t¶Ÿ•
].
p
 = 
p‹t¶Ÿp
;

158 
tmp_p
->
∂a˚
 = 
tmp_∂a˚
;

159 
p‹t¶Ÿ
[
tmp_∂a˚
].
p
 = 
tmp_p
;

160 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
p‹t¶Ÿ_lock
);

163 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
p‹t¶Ÿ_lock
);

164  -
EINVAL
;

165 
	}
}

167 
ölöe
 
	$check_p‹t¶Ÿ
(
node
, 
p‹t
, 
p‹t¶Ÿ_t
 **
p
)

170 
i
;

171 
p‹t¶Ÿ_t
 *
p_ﬁd
;

173 
p_ﬁd
 = *
p
;

175 
i
 = 
MaxStubs
; i < 
p‹t¶Ÿ•
; i++) {

176 i‡(
p‹t¶Ÿ
[
i
].
p
->
addr
.
sö_p‹t
 =
	`ht⁄s
(
p‹t
Ë&&Ö‹t¶Ÿ[i].p->addr.
sö_addr
.
s_addr
 =
node
) {

177 *
p
 = 
p‹t¶Ÿ
[
i
].p;

182 i‡(
p_ﬁd
 !*
p
) {

183 
	`gvb_p‹t¶Ÿ
(
p_ﬁd
);

186 
	}
}

188 
	#NETRPC_POLL_TMOUT
 1000

	)

189 
	#NETRPC_DELAY_FREQ
 50

	)

190 
	#NETRPC_TIMER_FREQ
 50

	)

191 
timî_li°
 
	gtimî
;

192 
SEM
 
	gtimî_£m
;

194 
	$timî_fun
(
n⁄e
)

196 i‡(
timî_£m
.
cou¡
 < 0) {

197 
	`π_£m_sig«l
(&
timî_£m
);

198 
timî
.
expúes
 = 
jiffõs
 + 
HZ
/
NETRPC_TIMER_FREQ
;

199 
	`add_timî
(&
timî
);

201 
	}
}

203 (*
ícode
)(
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
, *
msg
, 
size
, 
whîe
);

204 (*
decode
)(
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
, *
msg
, 
size
, 
whîe
);

206 *
ícdec_ext
;

207 
	$£t_√åpc_ícodög
(*
ícode_fun
, *
decode_fun
, *
ext
)

209 
ícode
 = 
ícode_fun
;

210 
decode
 = 
decode_fun
;

211 i‡(!
	`£t_π_fun_ext_ödex
(
ext
, 1)) {

212 
ícdec_ext
 = 
ext
;

215 
	}
}

217 
	sªq_ªl_msg
 { 
	m›
, 
	mp‹t
, 
	m¥i‹ôy
, 
	mh¨d
; 
	mow√r
, 
	m«me
, 
	mªm_node
, 
	mchk•¨e
;};

219 
	s∑r_t
 { 
	mmach
, 
	m¥i‹ôy
, 
	mba£_¥i‹ôy
, 
	m¨gsize
, 
	mrsize
, 
	mfun_ext_timed
, 
	mty≥
; 
	mow√r
, 
	m∑πy≥s
; 
	ma
[1]; };

221 
	sª∂y_t
 { 
	mwsize
, 
	mw2size
, 
	mmyp‹t
; 
	mªtvÆ
; 
	mmsg
[1], 
	mmsg1
[1]; };

223 
ölöe
 
	$¨gc⁄v
(*
aö
, *
aout
, 
£nd_mach
, 
¨gsize
, 
∑πy≥s
)

225 
	#ªcv_mach
 (())

	)

226 
¨gsizeout
;

227 i‡(
£nd_mach
 =
ªcv_mach
) {

228 
	`mem˝y
(
aout
, 
aö
, 
¨gsize
);

229  
¨gsize
;

231 
¨gsizeout
 = 0;

232 i‡(
£nd_mach
 =4 && 
ªcv_mach
 == 8) {

233 *
out
 = 
aout
;

234 *
ö
 = 
aö
;

235 
¨gsize
) {

236 
¨gsize
 -= 4;

237 
¨gsizeout
 += 8;

238 
∑πy≥s
 & 
WDWMSK
) {

239 
SINT
:

240 *
out
++ = *
ö
++;

242 
UINT
:

243 *
out
++ = ()*
ö
++;

245 
VADR
:

246 *
out
++ = 
	`ª£t_kadr
(*
ö
++);

248 
RTIM
:

249 *
out
++ = ()*
ö
++;

250 
ö
++;

251 
¨gsize
 -= 4;

254 
∑πy≥s
 >>
WDW
;

257 *
out
 = 
aout
;

258 *
ö
 = 
aö
;

259 
¨gsize
) {

260 
¨gsize
 -= 8;

261 
¨gsizeout
 += 4;

262 
∑πy≥s
 & 
WDWMSK
) {

263 
SINT
:

264 
UINT
:

265 
VADR
:

266 *
out
++ = *
ö
++;

268 
RTIM
:

269 *((*)
out
++Ë*
ö
++;

270 
out
++;

271 
¨gsizeout
 += 4;

274 
∑πy≥s
 >>
WDW
;

277  
¨gsizeout
;

278 #unde‡
ªcv_mach


279 
	}
}

281 
	$√t_ªsume_èsk
(
sock
, 
p‹t¶Ÿ_t
 *
p
)

283 
Æl_ok
;

284 
RT_TASK
 *
my
;

285 
my
 = 
	`_π_whﬂmi
();

286 
Æl_ok
 = 1;

287 i‡((
p
->
ödx
 > 0Ë&& (p->ödx < 
MaxStubs
)) {

288 i‡(!((
p
->
èsk
Ë&& (p->
h¨d
 =
my
->
is_h¨d
))) {

289 
Æl_ok
 = 0;

292 i‡(
Æl_ok
) {

293 
	`π_£m_sig«l
(&
p
->
£m
);

295 
i
;

296 
Êags
;

297 
∑r_t
 *
∑r
;

298 
msg
[
MAX_MSG_SIZE
];

299 
sockaddr
 *
addr
;

300 
∑r
 = (*)
msg
;

301 
addr
 = (
sockaddr
*)&
p
->addr;

303 i‡(
my
->
is_h¨d
) {

304 
	`h¨d_π_ªcv‰om
(
p
->
sockë
[1], 
msg
, 
MAX_MSG_SIZE
, 0, 
addr
, (*)&
i
Ë=-
EAGAIN
);

306 
	`so·_π_ªcv‰om
(
p
->
sockë
[0], 
msg
, 
MAX_MSG_SIZE
, 0, 
addr
, &
i
);

309 
Êags
 = 
	`π_•ö_lock_úqßve
(&
ªcovîy_lock
);

310 
ªcovîy
.
msg
[ªcovîy.
ö
].
¥i‹ôy
 = 
∑r
->priority;

311 
ªcovîy
.
msg
[ªcovîy.
ö
].
ow√r
 = 
∑r
->owner;

312 
ªcovîy
.
msg
[ªcovîy.
ö
].
addr
 = *addr;

313 
ªcovîy
.
msg
[ªcovîy.
ö
].
h¨d
 = 
my
->
is_h¨d
;

314 
ªcovîy
.
ö
 = (ªcovîy.ö + 1Ë& 
MaxStubsM⁄e
;

315 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
ªcovîy_lock
);

316 
	`π_£m_sig«l
(&
p‹t¶Ÿ
[0].
£m
);

318 
	}
}

320 
gë_mö_èsks_˝uid
();

321 
£t_πext
(
RT_TASK
 *, , , (*)(), , *);

322 
	`˛r_πext
(
RT_TASK
 *);

323 
	`π_scheduÀ_so·
(
RT_TASK
 *);

325 
ölöe
 
	$so·_π_fun_ˇŒ
(
RT_TASK
 *
èsk
, *
fun
, *
¨g
)

327 uni⁄ { 
Œ
; 
l
; } 
ªtvÆ
;

328 
èsk
->
fun_¨gs
[0] = ()
¨g
;

329 ((
fun_¨gs
 *)
èsk
->fun_¨gs)->
fun
 = fun;

330 
	`π_scheduÀ_so·
(
èsk
);

331 
ªtvÆ
.
Œ
 = 
èsk
->retval;

332  ()
ªtvÆ
.
l
;

333 
	}
}

335 
ölöe
 
	$so·_π_gífun_ˇŒ
(
RT_TASK
 *
èsk
, *
fun
, *
¨gs
, 
¨gsize
)

337 
	`mem˝y
(
èsk
->
fun_¨gs
, 
¨gs
, 
¨gsize
);

338 ((
fun_¨gs
 *)
èsk
->fun_¨gs)->
fun
 = fun;

339 
	`π_scheduÀ_so·
(
èsk
);

340  
èsk
->
ªtvÆ
;

341 
	}
}

343 
π_d´m⁄ize
();

344 
	$thªad_fun
(
RT_TASK
 *
èsk
)

346 i‡(!
	`£t_πext
(
èsk
,Åask->
fun_¨gs
[3], 0, 0, 
	`gë_mö_èsks_˝uid
(), 0)) {

347 
	`π_d´m⁄ize
();

348 
	`sigfûl£t
(&
cuºít
->
blocked
);

349 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, 
SCHED_FIFO
, 
MIN_LINUX_RTPRIO
);

350 
	`so·_π_fun_ˇŒ
(
èsk
, 
π_èsk_su•íd
,Åask);

351 (((*)())
èsk
->
fun_¨gs
[1])(task->fun_args[2]);

352 
èsk
->
fun_¨gs
[1] = 0;

354 
	}
}

356 
	~<löux/kthªad.h
>

358 
	$so·_kthªad_öô
(
RT_TASK
 *
èsk
, 
fun
, 
¨g
, 
¥i‹ôy
)

360 
èsk
->
magic
 =Åask->
°©e
 = 0;

361 (
èsk
->
fun_¨gs
 = (*)—ask + 1))[1] = 
fun
;

362 
èsk
->
fun_¨gs
[2] = 
¨g
;

363 
èsk
->
fun_¨gs
[3] = 
¥i‹ôy
;

364 i‡(!
	`IS_ERR
(
	`kthªad_run
((*)
thªad_fun
, 
èsk
, " "))) {

365 
èsk
->
°©e
 !(
RT_SCHED_READY
 | 
RT_SCHED_SUSPENDED
)) {

366 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

367 
	`scheduÀ_timeout
(
HZ
/
NETRPC_TIMER_FREQ
);

371  -
ENOEXEC
;

372 
	}
}

374 
	$so·_kthªad_dñëe
(
RT_TASK
 *
èsk
)

376 
èsk
->
fun_¨gs
[1] = 1;

377 
èsk
->
fun_¨gs
[1]) {

378 
	`π_èsk_masked_unblock
(
èsk
, ~
RT_SCHED_READY
);

379 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

380 
	`scheduÀ_timeout
(
HZ
/
NETRPC_TIMER_FREQ
);

382 
	`˛r_πext
(
èsk
);

384 
	}
}

386 
	#ADRSZ
 (
sockaddr
)

	)

388 
ölöe
 
	$gë_°ub
(
ow√r
)

390 
Êags
;

391 
i
;

393 
Êags
 = 
	`π_•ö_lock_úqßve
(&
°ub_lock
);

394 i‡(
°ubs•
 < 
MaxStubsM⁄e
) {

395 
p‹t¶Ÿ_t
 *
p
;

396 
i
 = 1;

397 ((
p
 = 
p‹t¶Ÿ
[
i
].p)->
ow√r
 !ow√rË&& (ò< 
°ubs•
)) {

398 
i
++;

400 i‡(
p
->
ow√r
 != owner) {

401 
p
 = 
p‹t¶Ÿ
[
°ubs•
++].p;

402 
p
->
ow√r
 = owner;

404 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

405  
p
->
ödx
;

407 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

409 
	}
}

411 
ölöe
 
	$gvb_°ub
(
¶Ÿ
, 
ow√r
)

413 
Êags
;

414 
RT_TASK
 *
èsk
;

416 
Êags
 = 
	`π_•ö_lock_úqßve
(&
°ub_lock
);

417 i‡(
°ubs•
 > 1) {

418 i‡(
¶Ÿ
 > 0 && slŸ < 
MaxStubs
) {

419 i‡(
p‹t¶Ÿ
[
¶Ÿ
].
ow√r
 == owner) {

420 
p‹t¶Ÿ_t
 *
tmp_p
;

421 
tmp_∂a˚
;

422 
èsk
 = (
RT_TASK
 *)
p‹t¶Ÿ
[
¶Ÿ
].task;

423 
p‹t¶Ÿ
[
¶Ÿ
].
èsk
 = 0;

424 
p‹t¶Ÿ
[
¶Ÿ
].
ow√r
 = 0;

425 
tmp_p
 = 
p‹t¶Ÿ
[--
°ubs•
].
p
;

426 
tmp_∂a˚
 = 
p‹t¶Ÿ
[
¶Ÿ
].
∂a˚
;

427 
p‹t¶Ÿ
[
¶Ÿ
].
∂a˚
 = 
°ubs•
;

428 
p‹t¶Ÿ
[
°ubs•
].
p
 = &p‹t¶Ÿ[
¶Ÿ
];

429 
tmp_p
->
∂a˚
 = 
tmp_∂a˚
;

430 
p‹t¶Ÿ
[
tmp_∂a˚
].
p
 = 
tmp_p
;

431 
¶Ÿ
 +
BASEPORT
;

432 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

433 i‡(
èsk
->
is_h¨d
) {

434 
	`π_èsk_dñëe
(
èsk
);

436 
	`so·_kthªad_dñëe
(
èsk
);

438 
	`k‰ì
(
èsk
);

440 
¶Ÿ
 = !
p‹t¶Ÿ
[¶Ÿ].
ow√r
 ? slŸ + 
BASEPORT
 : -
ENXIO
;

441 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

444 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

446  
¶Ÿ
;

448 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

449  -
EINVAL
;

450 
	}
}

452 
ölöe
 
	$föd_°ub
(
ow√r
)

454 
Êags
;

455 
i
;

456 
p‹t¶Ÿ_t
 *
p
;

457 
i
 = 1;

458 
Êags
 = 
	`π_•ö_lock_úqßve
(&
°ub_lock
);

459 ((
p
 = 
p‹t¶Ÿ
[
i
].p)->
ow√r
 !ow√rË&& (ò< 
°ubs•
)) {

460 
i
++;

462 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
°ub_lock
);

463  
p
->
ow√r
 !ow√∏? 0 :Ö->
ödx
;

464 
	}
}

466 
	$so·_°ub_fun
(
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
)

468 
msg
[
MAX_MSG_SIZE
];

469 
sockaddr
 *
addr
;

470 
RT_TASK
 *
èsk
;

471 
SEM
 *
£m
;

472 
∑r_t
 *
∑r
;

473 
wsize
, 
w2size
, 
sock
;

474 *
aö
;

475 
ty≥
;

477 
addr
 = (
sockaddr
 *)&
p‹t¶Ÿp
->addr;

478 
sock
 = 
p‹t¶Ÿp
->
sockë
[0];

479 
£m
 = &
p‹t¶Ÿp
->sem;

480 
aö
 = (
∑r
 = (*)
msg
)->
a
;

481 
èsk
 = (
RT_TASK
 *)
p‹t¶Ÿp
->task;

482 
	`•rötf
(
cuºít
->
comm
, "SFTSTB:%ld", 
sock
);

484 
ªcvrys
:

486 
	`so·_π_fun_ˇŒ
(
èsk
, 
π_£m_waô
, 
£m
Ë< 
RTE_LOWERR
) {

487 
wsize
 = 
	`so·_π_ªcv‰om
(
sock
, 
msg
, 
MAX_MSG_SIZE
, 0, 
addr
, &
w2size
);

488 i‡(
decode
) {

489 
	`decode
(
p‹t¶Ÿp
, 
msg
, 
wsize
, 
RPC_SRV
);

491 i‡(
p‹t¶Ÿp
->
ow√r
 !
∑r
->owner) {

492 
Êags
;

494 
Êags
 = 
	`π_•ö_lock_úqßve
(&
ªcovîy_lock
);

495 
ªcovîy
.
msg
[ªcovîy.
ö
].
¥i‹ôy
 = 
∑r
->priority;

496 
ªcovîy
.
msg
[ªcovîy.
ö
].
ow√r
 = 
∑r
->owner;

497 
ªcovîy
.
msg
[ªcovîy.
ö
].
addr
 = *addr;

498 
ªcovîy
.
msg
[ªcovîy.
ö
].
h¨d
 = 0;

499 
ªcovîy
.
ö
 = (ªcovîy.ö + 1Ë& 
MaxStubsM⁄e
;

500 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
ªcovîy_lock
);

501 
	`π_£m_sig«l
(&
p‹t¶Ÿ
[0].
£m
);

503 
¨gsize
;

504 
a
[
∑r
->
¨gsize
/() + 1];

505 if(
∑r
->
¥i‹ôy
 >0 &&Ö¨->¥i‹ôy < 
RT_SCHED_LINUX_PRIORITY
) {

506 i‡((
wsize
 = 
∑r
->
¥i‹ôy
Ë< 
èsk
->priority) {

507 
èsk
->
¥i‹ôy
 = 
wsize
;

508 
	`πai_£t_löux_èsk_¥i‹ôy
(
èsk
->
 xtsk
,Åask-> xtsk->
pﬁicy
, 
wsize
 >
MAX_LINUX_RTPRIO
 ? 
MIN_LINUX_RTPRIO
 : MAX_LINUX_RTPRIO - wsize);

510 
èsk
->
ba£_¥i‹ôy
 = 
∑r
->base_priority;

512 
¨gsize
 = 
	`¨gc⁄v
(
aö
, 
a
, 
∑r
->
mach
,Ö¨->¨gsize,Ö¨->
∑πy≥s
);

513 
ty≥
 = 
∑r
->type;

514 i‡(
∑r
->
rsize
) {

515 
a
[
	`USP_RBF1
(
ty≥
Ë- 1] = ()((*)
aö
 + 
∑r
->
¨gsize
);

517 i‡(
	`NEED_TO_W
(
ty≥
)) {

518 
wsize
 = 
	`USP_WSZ1
(
ty≥
);

519 
wsize
 = wsizê? 
a
[wsizê- 1] : 
∑r
->
mach
;

521 
wsize
 = 0;

523 i‡(
	`NEED_TO_W2ND
(
ty≥
)) {

524 
w2size
 = 
	`USP_WSZ2
(
ty≥
);

525 
w2size
 = w2sizê? 
a
[w2sizê- 1] : 
∑r
->
mach
;

527 
w2size
 = 0;

530 
	smsg_t
 { 
ª∂y_t
 
¨g
; 
buf•a˚
[
wsize
 + 
w2size
]; }árg;

531 
¨g
.¨g.
myp‹t
 = 0;

532 i‡(
wsize
 > 0) {

533 
¨g
.¨g.
wsize
 = wsize;

534 
a
[
	`USP_WBF1
(
ty≥
Ë- 1] = ()
¨g
.¨g.
msg
;

535 i‡((
	`USP_WBF1
(
ty≥
Ë- 1Ë=(
	`USP_RBF1
—y≥Ë- 1Ë&& 
wsize
 =
∑r
->
rsize
) {

536 
	`mem˝y
(
¨g
.¨g.
msg
, (*)
aö
 + 
∑r
->
¨gsize
, 
wsize
);

537 
a
[
	`USP_RBF1
(
ty≥
Ë- 1] = ()(
¨g
.¨g.
msg
);

540 
¨g
.¨g.
wsize
 = 0;

542 i‡(
w2size
 > 0) {

543 
¨g
.¨g.
w2size
 = w2size;

544 
a
[
	`USP_WBF2
(
ty≥
Ë- 1] = ()(
¨g
.¨g.
msg
 +árg.¨g.
wsize
);

546 
¨g
.¨g.
w2size
 = 0;

548 #i‚de‡
NETRPC_ALIGN_RTIME


549 i‡((
wsize
 = 
	`TIMED
(
∑r
->
fun_ext_timed
) - 1) >= 0) {

551 i‡((
wsize
 = 
	`TIMED
(
∑r
->
fun_ext_timed
)) > 0) {

552 
wsize
 +(
	`NETRPC_ALIGN_RTIME
(wsize) - 1);

554 *((*)(
a
 + 
wsize
)Ë
	`«no2cou¡
(*((*)(a + wsize)));

556 
¨g
.¨g.
ªtvÆ
 = 
	`so·_π_gífun_ˇŒ
(
èsk
, 
π_√t_Ωc_fun_ext
[
	`EXT
(
∑r
->
fun_ext_timed
)][
	`FUN
’¨->fun_ext_timed)].
fun
, 
a
, 
¨gsize
);

557 
	`so·_π_£ndto
(
sock
, &
¨g
, 
ícode
 ? 
	`ícode
(
p‹t¶Ÿp
, &¨g, (
msg_t
), 
RPC_RTR
Ë: (msg_t), 0, 
addr
, 
ADRSZ
);

561 i‡(
p‹t¶Ÿp
->
ªcovîed
) {

562 
ª∂y_t
 
¨g
;

563 
p‹t¶Ÿp
->
ªcovîed
 = 0;

564 
¨g
.
myp‹t
 = 
sock
 + 
BASEPORT
;

565 
¨g
.
ªtvÆ
 = 
p‹t¶Ÿp
->
ow√r
;

566 
	`so·_π_£ndto
(
sock
, &
¨g
, 
ícode
 ? 
	`ícode
(
p‹t¶Ÿp
, &¨g, (
ª∂y_t
), 
RPC_RTR
Ë: (ª∂y_t), 0, 
addr
, 
ADRSZ
);

567 
ªcvrys
;

569 
	}
}

571 
	$h¨d_°ub_fun
(
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
)

573 
msg
[
MAX_MSG_SIZE
];

574 
sockaddr
 *
addr
;

575 
RT_TASK
 *
èsk
;

576 
SEM
 *
£m
;

577 
∑r_t
 *
∑r
;

578 
wsize
, 
w2size
, 
sock
;

579 *
aö
;

580 
ty≥
;

582 
addr
 = (
sockaddr
 *)&
p‹t¶Ÿp
->addr;

583 
sock
 = 
p‹t¶Ÿp
->
sockë
[1];

584 
£m
 = &
p‹t¶Ÿp
->sem;

585 
aö
 = (
∑r
 = (*)
msg
)->
a
;

586 
èsk
 = (
RT_TASK
 *)
p‹t¶Ÿp
->task;

587 i‡(
èsk
->
 xtsk
) {

588 
	`•rötf
(
cuºít
->
comm
, "HRDSTB-%ld", 
sock
);

591 
ªcvryh
:

593 
	`π_£m_waô
(
£m
Ë< 
RTE_LOWERR
) {

594 
wsize
 = 
	`h¨d_π_ªcv‰om
(
sock
, 
msg
, 
MAX_MSG_SIZE
, 0, 
addr
, (*)&
w2size
);

595 i‡(
decode
) {

596 
	`decode
(
p‹t¶Ÿp
, 
msg
, 
wsize
, 
RPC_SRV
);

598 i‡(
p‹t¶Ÿp
->
ow√r
 !
∑r
->owner) {

599 
Êags
;

601 
Êags
 = 
	`π_•ö_lock_úqßve
(&
ªcovîy_lock
);

602 
ªcovîy
.
msg
[ªcovîy.
ö
].
¥i‹ôy
 = 
∑r
->priority;

603 
ªcovîy
.
msg
[ªcovîy.
ö
].
ow√r
 = 
∑r
->owner;

604 
ªcovîy
.
msg
[ªcovîy.
ö
].
addr
 = *addr;

605 
ªcovîy
.
msg
[ªcovîy.
ö
].
h¨d
 = 1;

606 
ªcovîy
.
ö
 = (ªcovîy.ö + 1Ë& 
MaxStubsM⁄e
;

607 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
ªcovîy_lock
);

608 
	`π_£m_sig«l
(&
p‹t¶Ÿ
[0].
£m
);

610 
¨gsize
;

611 
a
[
∑r
->
¨gsize
/() + 1];

612 if(
∑r
->
¥i‹ôy
 >0 &&Ö¨->¥i‹ôy < 
RT_SCHED_LINUX_PRIORITY
) {

613 i‡((
wsize
 = 
∑r
->
¥i‹ôy
Ë< 
èsk
->priority) {

614 
èsk
->
¥i‹ôy
 = 
wsize
;

616 
èsk
->
ba£_¥i‹ôy
 = 
∑r
->base_priority;

618 
¨gsize
 = 
	`¨gc⁄v
(
aö
, 
a
, 
∑r
->
mach
,Ö¨->¨gsize,Ö¨->
∑πy≥s
);

619 
ty≥
 = 
∑r
->type;

620 i‡(
∑r
->
rsize
) {

621 
a
[
	`USP_RBF1
(
ty≥
Ë- 1] = ()((*)
aö
 + 
∑r
->
¨gsize
);

623 i‡(
	`NEED_TO_W
(
ty≥
)) {

624 
wsize
 = 
	`USP_WSZ1
(
ty≥
);

625 
wsize
 = wsizê? 
a
[wsizê- 1] : 
∑r
->
mach
;

627 
wsize
 = 0;

629 i‡(
	`NEED_TO_W2ND
(
ty≥
)) {

630 
w2size
 = 
	`USP_WSZ2
(
ty≥
);

631 
w2size
 = w2sizê? 
a
[w2sizê- 1] : 
∑r
->
mach
;

633 
w2size
 = 0;

636 
	smsg_t
 { 
ª∂y_t
 
¨g
; 
buf•a˚
[
wsize
 + 
w2size
]; }árg;

637 
¨g
.¨g.
myp‹t
 = 0;

638 i‡(
wsize
 > 0) {

639 
¨g
.¨g.
wsize
 = wsize;

640 i‡((
	`USP_WBF1
(
ty≥
Ë- 1Ë=(
	`USP_RBF1
—y≥Ë- 1Ë&& 
wsize
 =
∑r
->
rsize
) {

641 
	`mem˝y
(
¨g
.¨g.
msg
, (*)
aö
 + 
∑r
->
¨gsize
, 
wsize
);

642 
a
[
	`USP_RBF1
(
ty≥
Ë- 1] = ()(
¨g
.¨g.
msg
);

644 
a
[
	`USP_WBF1
(
ty≥
Ë- 1] = ()
¨g
.¨g.
msg
;

646 
¨g
.¨g.
wsize
 = 0;

648 i‡(
w2size
 > 0) {

649 
¨g
.¨g.
w2size
 = w2size;

650 
a
[
	`USP_WBF2
(
ty≥
Ë- 1] = ()(
¨g
.¨g.
msg
 +árg.¨g.
wsize
);

652 
¨g
.¨g.
w2size
 = 0;

654 #i‚de‡
NETRPC_ALIGN_RTIME


655 i‡((
wsize
 = 
	`TIMED
(
∑r
->
fun_ext_timed
) - 1) >= 0) {

657 i‡((
wsize
 = 
	`TIMED
(
∑r
->
fun_ext_timed
)) > 0) {

658 
wsize
 +(
	`NETRPC_ALIGN_RTIME
(wsize) - 1);

660 *((*)(
a
 + 
wsize
)Ë
	`«no2cou¡
(*((*)(a + wsize)));

662 
¨g
.¨g.
ªtvÆ
 = (((*)(, ...))
π_√t_Ωc_fun_ext
[
	`EXT
(
∑r
->
fun_ext_timed
)][
	`FUN
’¨->fun_ext_timed)].
fun
)(
RTAI_FUN_A
);

663 
	`h¨d_π_£ndto
(
sock
, &
¨g
, 
ícode
 ? 
	`ícode
(
p‹t¶Ÿp
, &¨g, (
msg_t
), 
RPC_RTR
Ë: (msg_t), 0, 
addr
, 
ADRSZ
);

667 i‡(
p‹t¶Ÿp
->
ªcovîed
) {

668 
ª∂y_t
 
¨g
;

669 
p‹t¶Ÿp
->
ªcovîed
 = 0;

670 
¨g
.
myp‹t
 = 
sock
 + 
BASEPORT
;

671 
¨g
.
ªtvÆ
 = 
p‹t¶Ÿp
->
ow√r
;

672 
	`h¨d_π_£ndto
(
sock
, &
¨g
, 
ícode
 ? 
	`ícode
(
p‹t¶Ÿp
, &¨g, (
ª∂y_t
), 
RPC_RTR
Ë: (ª∂y_t), 0, 
addr
, 
ADRSZ
);

673 
ªcvryh
;

675 
	`π_èsk_su•íd
(
èsk
);

676 
	}
}

678 
	$p‹t_£rvî_fun
(
RT_TASK
 *
p‹t_£rvî
)

680 
ªcovîed
;

681 
i
, 
rsize
;

682 
RT_TASK
 *
èsk
;

683 
sockaddr
 *
addr
;

684 
ªq_ªl_msg
 
msg
;

686 
addr
 = (
sockaddr
 *)&
p‹t¶Ÿ
[0].addr;

687 
	`•rötf
(
cuºít
->
comm
, "PRTSRV");

689 
	`so·_π_fun_ˇŒ
(
p‹t_£rvî
, 
π_£m_waô
, &
p‹t¶Ÿ
[0].
£m
Ë< 
RTE_LOWERR
) {

690 i‡(
ªcovîy
.
out
 !ªcovîy.
ö
) {

691 
ªcovîed
 = 1;

692 
msg
.
¥i‹ôy
 = 
ªcovîy
.msg[ªcovîy.
out
].priority;

693 
msg
.
h¨d
 = 
ªcovîy
.msg[ªcovîy.
out
].hard;

694 
msg
.
ow√r
 = 
ªcovîy
.msg[ªcovîy.
out
].owner;

695 
msg
.
«me
 = 
	`TSK_FRM_WNR
(
ªcovîy
.msg[ªcovîy.
out
].
ow√r
);

696 *
addr
 = 
ªcovîy
.
msg
[ªcovîy.
out
].addr;

697 
msg
.
›
 = 0;

698 
msg
.
p‹t
 = 0;

699 
ªcovîy
.
out
 = (ªcovîy.ouà+ 1Ë& 
MaxStubsM⁄e
;

701 
ªcovîed
 = 0;

702 
rsize
 = 
	`so·_π_ªcv‰om
(
p‹t¶Ÿ
[0].
sockë
[0], &
msg
, (msg), 0, 
addr
, &
i
);

703 i‡(
decode
) {

704 
	`decode
(&
p‹t¶Ÿ
[0], &
msg
, 
rsize
, 
PRT_SRV
);

707 i‡(
msg
.
›
) {

708 
msg
.
p‹t
 = 
	`gvb_°ub
(msg.
›
 - 
BASEPORT
, msg.
ow√r
);

709 
ªt
;

711 i‡(!(
msg
.
p‹t
 = 
	`gë_°ub
(msg.
ow√r
))) {

712 
msg
.
p‹t
 = -
ENODEV
;

713 
ªt
;

715 i‡(!
p‹t¶Ÿ
[
msg
.
p‹t
].
èsk
) {

716 i‡((
èsk
 = 
	`kmÆloc
((
RT_TASK
Ë+ 2*(
fun_¨gs
), 
GFP_KERNEL
))) {

717 i‡((
msg
.
h¨d
 ? 
	`π_èsk_öô
(
èsk
, (*)
h¨d_°ub_fun
, ()(
p‹t¶Ÿ
 + msg.
p‹t
), 
SèckSize
 + 2*
MAX_MSG_SIZE
, msg.
¥i‹ôy
, 0, 
NULL
Ë: 
	`so·_kthªad_öô
—ask, ()
so·_°ub_fun
, ()’‹t¶Ÿ + msg.p‹t), msg.¥i‹ôy < 
BASE_SOFT_PRIORITY
 ? msg.priority + BASE_SOFT_PRIORITY : msg.priority))) {

718 
	`k‰ì
(
èsk
);

719 
èsk
 = 0;

722 i‡(!
èsk
) {

723 
p‹t¶Ÿ
[
msg
.
p‹t
].
ow√r
 = 0;

724 
msg
.
p‹t
 = -
ENOMEM
;

725 
ªt
;

727 
p‹t¶Ÿ
[
msg
.
p‹t
].
«me
 = msg.name;

728 
p‹t¶Ÿ
[
msg
.
p‹t
].
èsk
 = ()task;

729 i‡(
msg
.
h¨d
) {

730 
p‹t¶Ÿ
[
msg
.
p‹t
].
h¨d
 = 
MSG_HARD
;

732 
p‹t¶Ÿ
[
msg
.
p‹t
].
h¨d
 = 
MSG_SOFT
;

734 
p‹t¶Ÿ
[
msg
.
p‹t
].
£m
.
cou¡
 = 0;

735 
p‹t¶Ÿ
[
msg
.
p‹t
].
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿ[msg.p‹t].£m.queue.
√xt
 = &portslot[msg.port].sem.queue;

736 
p‹t¶Ÿ
[
msg
.
p‹t
].
addr
 =Öortslot[0].addr;

737 
	`π_èsk_ªsume
(
èsk
);

739 
p‹t¶Ÿ
[
msg
.
p‹t
].
ªcovîed
 =Ñecovered;

740 
msg
.
ªm_node
 = 
this_node
[msg.
h¨d
];

741 
msg
.
p‹t
 +
BASEPORT
;

742 
msg
.
chk•¨e
 = ();

743 
ªt
:

744 i‡(
ªcovîed
) {

745 
	`π_èsk_masked_unblock
((
RT_TASK
 *)
p‹t¶Ÿ
[
msg
.
p‹t
-
BASEPORT
].
èsk
,~
RT_SCHED_READY
);

747 
	`so·_π_£ndto
(
p‹t¶Ÿ
[0].
sockë
[0], &
msg
, 
ícode
 ? 
	`ícode
(&p‹t¶Ÿ[0], &msg, (msg), 
PRT_RTR
Ë: (msg), 0, 
addr
, 
ADRSZ
);

750 
	}
}

752 
	gmod_timî_§q
;

754 
RTAI_SYSCALL_MODE
 
	$π_£nd_ªq_ªl_p‹t
(
node
, 
›
, 
id
, 
MBX
 *
mbx
, 
h¨d
)

756 
RT_TASK
 *
èsk
;

757 
i
, 
msgsize
;

758 
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
;

759 
ªq_ªl_msg
 
msg
;

761 
›
 >>
PORT_SHF
;

762 i‡(!
node
 || (
›
 && (› < 
MaxStubs
 || o∞>
MaxSocks
))) {

763  -
EINVAL
;

765 i‡(!(
p‹t¶Ÿp
 = 
	`gë_p‹t¶Ÿ
())) {

766  -
ENODEV
;

768 
p‹t¶Ÿp
->
«me
 = 
PRTSRVNAME
;

769 
p‹t¶Ÿp
->
addr
 = 
SPRT_ADDR
;

770 
p‹t¶Ÿp
->
addr
.
sö_addr
.
s_addr
 = 
node
;

771 
èsk
 = 
	`_π_whﬂmi
();

772 i‡(
›
) {

773 
msg
.
›
 = 
	`¡ohs
(
p‹t¶Ÿ
[›].
addr
.
sö_p‹t
);

774 
id
 = 
p‹t¶Ÿ
[
›
].
«me
;

775 
h¨d
 = 
p‹t¶Ÿ
[
›
].hard;

777 
msg
.
›
 = 0;

778 i‡(!
id
) {

779 
id
 = ()
èsk
;

782 
msg
.
p‹t
 = 
p‹t¶Ÿp
->
£m
.
cou¡
 = 0;

783 
p‹t¶Ÿp
->
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿp->£m.queue.
√xt
 = &portslotp->sem.queue;

784 
msg
.
h¨d
 = h¨d ? 
MSG_HARD
 : 
MSG_SOFT
;

785 
msg
.
«me
 = 
id
;

786 
msg
.
ow√r
 = 
	`OWNER
(
this_node
[0], 
id
);

787 
msg
.
ªm_node
 = 0;

788 
msg
.
¥i‹ôy
 = 
èsk
->
ba£_¥i‹ôy
;

789 
msgsize
 = 
ícode
 ? 
	`ícode
(&
p‹t¶Ÿ
[0], &
msg
, (msg), 
PRT_REQ
) : (msg);

790 
i
 = 0; i < 
NETRPC_TIMER_FREQ
 && !
p‹t¶Ÿp
->
£m
.
cou¡
; i++) {

791 
	`so·_π_£ndto
(
p‹t¶Ÿp
->
sockë
[0], &
msg
, 
msgsize
, 0, (*)&p‹t¶Ÿp->
addr
, 
ADRSZ
);

792 
	`π_≥nd_löux_§q
(
mod_timî_§q
);

793 
	`π_£m_waô
(&
timî_£m
);

795 i‡(
p‹t¶Ÿp
->
£m
.
cou¡
 >= 1) {

796 
msgsize
 = 
	`so·_π_ªcv‰om
(
p‹t¶Ÿp
->
sockë
[0], &
msg
, (msg), 0, (*)&p‹t¶Ÿp->
addr
, &
i
);

797 i‡(
decode
) {

798 
	`decode
(&
p‹t¶Ÿ
[0], &
msg
, 
msgsize
, 
PRT_RCV
);

800 i‡(
msg
.
p‹t
 > 0) {

801 i‡(
›
) {

802 
p‹t¶Ÿ
[
›
].
èsk
 = 0;

803 
	`gvb_p‹t¶Ÿ
(
p‹t¶Ÿ
 + 
›
);

804 
	`gvb_p‹t¶Ÿ
(
p‹t¶Ÿp
);

805  
›
;

807 
	`check_p‹t¶Ÿ
(
node
, 
msg
.
p‹t
, &
p‹t¶Ÿp
);

808 
p‹t¶Ÿp
->
£m
.
cou¡
 = 0;

809 
p‹t¶Ÿp
->
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿp->£m.queue.
√xt
 = &portslotp->sem.queue;

810 
p‹t¶Ÿp
->
h¨d
 = 
msg
.hard;

811 
p‹t¶Ÿp
->
ow√r
 = 
msg
.owner;

812 
p‹t¶Ÿp
->
«me
 = 
msg
.name;

813 
p‹t¶Ÿp
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
msg
.
p‹t
);

814 
p‹t¶Ÿp
->
mbx
 = mbx;

815 
p‹t¶Ÿp
->
ªcovîed
 = 1;

816 
p‹t¶Ÿp
->
addr
.
sö_addr
.
s_addr
 = 
msg
.
ªm_node
;

817 i‡(
msg
.
chk•¨e
 == 4) {

818  (
p‹t¶Ÿp
->
ödx
 << 
PORT_SHF
);

820  (
p‹t¶Ÿp
->
ödx
 << 
PORT_SHF
Ë+ 
PORT_INC
;

825 
	`gvb_p‹t¶Ÿ
(
p‹t¶Ÿp
);

826  
msg
.
p‹t
 ? msg.p‹à: -
ETIMEDOUT
;

827 
	}
}

829 
RTAI_SYSCALL_MODE
 
	$π_£t_√åpc_timeout
(
p‹t
, 
RTIME
 
timeout
)

831 
p‹t¶Ÿ
[
p‹t
 >> 
PORT_SHF
].
timeout
 =Åimeout;

833 
	}
}

835 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_föd_asgn_°ub
(
ow√r
, 
asgn
)

837 
i
;

838 
i
 = 
asgn
 ? 
	`gë_°ub
(
ow√r
Ë: 
	`föd_°ub
(owner);

839  
i
 > 0 ? (
RT_TASK
 *)
p‹t¶Ÿ
[i].
èsk
 : 0;

840 
	}
}

842 
RTAI_SYSCALL_MODE
 
	$π_ªl_°ub
(
ow√r
)

844 
i
;

845 
i
 = 
	`föd_°ub
(
ow√r
);

846 i‡(
i
)

848 
i
 = 
	`gvb_°ub
(i,
ow√r
);

849  
i
;

851  -
ESRCH
;

853 
	}
}

855 
RTAI_SYSCALL_MODE
 
	$π_waôög_ªtu∫
(
node
, 
p‹t
)

857 
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
;

858 
p‹t¶Ÿp
 = 
p‹t¶Ÿ
 + (
	`abs
(
p‹t
Ë>> 
PORT_SHF
);

859  
p‹t¶Ÿp
->
èsk
 < 0 && !p‹t¶Ÿp->
£m
.
cou¡
;

860 
	}
}

864 
ölöe
 
	$mbx_£nd_if
(
MBX
 *
mbx
, *
£ndmsg
, 
msg_size
)

866 
	#MOD_SIZE
(
ödx
Ë((ödxË< 
mbx
->
size
 ? (ödxË: (ödxË- mbx->size)

	)

868 
Êags
;

869 
to˝y
, 
avbs
;

870 *
msg
;

872 i‡(!
mbx
) {

875 
msg
 = 
£ndmsg
;

876 i‡(
msg_size
 <
mbx
->
‰bs
) {

877 
RT_TASK
 *
èsk
;

878 
avbs
 = 
mbx
->avbs;

879 
msg_size
 > 0 && 
mbx
->
‰bs
) {

880 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

881 
to˝y
 = 
msg_size
;

883 i‡(
to˝y
 > 
mbx
->
‰bs
) {

884 
to˝y
 = 
mbx
->
‰bs
;

886 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, 
msg
, 
to˝y
);

887 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mbx
->
lock
);

888 
mbx
->
‰bs
 -
to˝y
;

889 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mbx
->
lock
);

890 
avbs
 +
to˝y
;

891 
msg_size
 -
to˝y
;

892 *
msg
 +
to˝y
;

893 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

895 
mbx
->
avbs
 =ávbs;

896 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

897 i‡((
èsk
 = 
mbx
->
waôög_èsk
)) {

898 
	`ªm_timed_èsk
(
èsk
);

899 
mbx
->
waôög_èsk
 = (*)0;

900 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_MBXSUSP
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

901 
	`íq_ªady_èsk
(
èsk
);

902 
	`π_scheduÀ
();

905 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

907 
	}
}

911 
ölöe
 
	$mbx_sig«l
(
MBX
 *
mbx
)

913 
Êags
;

914 
RT_TASK
 *
èsk
;

916 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

917 i‡((
èsk
 = 
mbx
->
waôög_èsk
)) {

918 
	`ªm_timed_èsk
(
èsk
);

919 
èsk
->
blocked_⁄
 = 
NULL
;

920 
mbx
->
waôög_èsk
 = 
NULL
;

921 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_MBXSUSP
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

922 
	`íq_ªady_èsk
(
èsk
);

923 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

926 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

927 
	}
}

929 
	#MOD_SIZE
(
ödx
Ë((ödxË< 
mbx
->
size
 ? (ödxË: (ödxË- mbx->size)

	)

931 
ölöe
 
	$mbxput
(
MBX
 *
mbx
, **
msg
, 
msg_size
)

933 
Êags
;

934 
to˝y
;

936 
msg_size
 > 0 && 
mbx
->
‰bs
) {

937 i‡((
to˝y
 = 
mbx
->
size
 - mbx->
lbyã
Ë> 
msg_size
) {

938 
to˝y
 = 
msg_size
;

940 i‡(
to˝y
 > 
mbx
->
‰bs
) {

941 
to˝y
 = 
mbx
->
‰bs
;

943 
	`mem˝y
(
mbx
->
buÁdr
 + mbx->
lbyã
, *
msg
, 
to˝y
);

944 
Êags
 = 
	`π_•ö_lock_úqßve
(&(
mbx
->
lock
));

945 
mbx
->
‰bs
 -
to˝y
;

946 
mbx
->
avbs
 +
to˝y
;

947 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &(
mbx
->
lock
));

948 
msg_size
 -
to˝y
;

949 *
msg
 +
to˝y
;

950 
mbx
->
lbyã
 = 
	`MOD_SIZE
(mbx->lbyã + 
to˝y
);

952 
	}
}

954 
	$mbx_£nd_if
(
MBX
 *
mbx
, *
msg
, 
msg_size
)

956 
Êags
;

957 
RT_TASK
 *
π_cuºít
;

959 i‡(!
mbx
 || mbx->
magic
 !
RT_MBX_MAGIC
) {

963 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

964 
π_cuºít
 = 
RT_CURRENT
;

965 i‡(
mbx
->
¢d£m
.
cou¡
 > 0 && 
msg_size
 <mbx->
‰bs
) {

966 
mbx
->
¢d£m
.
cou¡
 = 0;

967 i‡(
mbx
->
¢d£m
.
ty≥
 > 0) {

968 
mbx
->
¢d£m
.
owndby
 = 
π_cuºít
;

969 
	`íqueue_ªsqñ
(&
mbx
->
¢d£m
.
ªsq
, 
π_cuºít
);

971 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

972 
	`mbxput
(
mbx
, (**)(&
msg
), 
msg_size
);

973 
	`mbx_sig«l
(
mbx
);

974 
	`π_£m_sig«l
(&
mbx
->
¢d£m
);

976 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

977 
	}
}

981 
	#RETURN_ERR
(
îr
) \

983 uni⁄ { 
Œ
; 
l
; } 
ªtvÆ
; \

984 
ªtvÆ
.
l
 = 
îr
; \

985  
ªtvÆ
.
Œ
; \

986 } 0)

	)

988 
RTAI_SYSCALL_MODE
 
	$_π_√t_Ωc
(
fun_ext_timed
, 
ty≥
, *
¨gs
, 
¨gsize
, 
•a˚
, 
∑πy≥s
)

990 
msg
[
MAX_MSG_SIZE
];

991 
ª∂y_t
 *
ª∂y
;

992 
rsize
, 
p‹t
;

993 
p‹t¶Ÿ_t
 *
p‹t¶Ÿp
;

995 i‡((
p‹t
 = 
	`PORT
(
fun_ext_timed
)) > 0) {

996 
p‹t
 >>
PORT_SHF
;

997 i‡((
p‹t¶Ÿp
 = 
p‹t¶Ÿ
 + 
p‹t
)->
èsk
 < 0) {

998 
i
;

999 
sockaddr
 
addr
;

1001 i‡(
p‹t¶Ÿp
->
timeout
) {

1002 if(
	`π_£m_waô_timed
(&
p‹t¶Ÿp
->
£m
,p‹t¶Ÿp->
timeout
Ë=
RTE_TIMOUT
)

1003 
	`RETURN_ERR
(
RTE_NETIMOUT
);

1005 
	`π_£m_waô
(&
p‹t¶Ÿp
->
£m
);

1007 i‡((
rsize
 = 
p‹t¶Ÿp
->
h¨d
 ? 
	`h¨d_π_ªcv‰om
’‹t¶Ÿp->
sockë
[1], 
msg
, 
MAX_MSG_SIZE
, 0, &
addr
, (*)&
i
Ë: 
	`so·_π_ªcv‰om
(portslotp->socket[0], msg, MAX_MSG_SIZE, 0, &addr, &i))) {

1008 i‡(
decode
) {

1009 
rsize
 = 
	`decode
(
p‹t¶Ÿp
, 
msg
,Ñsize, 
RPC_RCV
);

1011 if((
ª∂y
 = (*)
msg
)->
myp‹t
) {

1012 i‡(
ª∂y
->
myp‹t
 < 0) {

1013 
	`RETURN_ERR
(-
RTE_CHGPORTERR
);

1015 
p‹t¶Ÿp
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
ª∂y
->
myp‹t
);

1016 
p‹t¶Ÿp
->
£m
.
cou¡
 = 0;

1017 
p‹t¶Ÿp
->
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿp->£m.queue.
√xt
 = &portslotp->sem.queue;

1018 
p‹t¶Ÿp
->
ow√r
 = 
ª∂y
->
ªtvÆ
;

1019 
p‹t¶Ÿp
->
«me
 = ()(
	`_π_whﬂmi
());

1020 
	`RETURN_ERR
(-
RTE_CHGPORTOK
);

1022 
	`mbx_£nd_if
(
p‹t¶Ÿp
->
mbx
, 
msg
, 
	`off£tof
(
ª∂y_t
, msgË+ 
ª∂y
->
wsize
 +Ñïly->
w2size
);

1025 
p‹t¶Ÿp
->
èsk
 = 1;

1027 
p‹t¶Ÿp
->
msg
 = msg;

1029 
p‹t
 = -(
	`abs
’‹tË>> 
PORT_SHF
);

1030 i‡((
p‹t¶Ÿp
 = 
p‹t¶Ÿ
 - 
p‹t
)->
èsk
 < 0) {

1031 i‡(!
	`π_£m_waô_if
(&
p‹t¶Ÿp
->
£m
)) {

1034 
i
;

1035 
sockaddr
 
addr
;

1037 i‡((
rsize
 = 
p‹t¶Ÿp
->
h¨d
 ? 
	`h¨d_π_ªcv‰om
’‹t¶Ÿp->
sockë
[1], 
msg
, 
MAX_MSG_SIZE
, 0, &
addr
, (*)&
i
Ë: 
	`so·_π_ªcv‰om
(portslotp->socket[0], msg, MAX_MSG_SIZE, 0, &addr, &i))) {

1038 i‡(
decode
) {

1039 
rsize
 = 
	`decode
(
p‹t¶Ÿp
, 
msg
,Ñsize, 
RPC_RCV
);

1041 if((
ª∂y
 = (*)
msg
)->
myp‹t
) {

1042 i‡(
ª∂y
->
myp‹t
 < 0) {

1043 
	`RETURN_ERR
(-
RTE_CHGPORTERR
);

1046 
p‹t¶Ÿp
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
ª∂y
->
myp‹t
);

1047 
p‹t¶Ÿp
->
£m
.
cou¡
 = 0;

1048 
p‹t¶Ÿp
->
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿp->£m.queue.
√xt
 = &portslotp->sem.queue;

1049 
p‹t¶Ÿp
->
ow√r
 = 
ª∂y
->
ªtvÆ
;

1050 
p‹t¶Ÿp
->
«me
 = ()(
	`_π_whﬂmi
());

1051 
	`RETURN_ERR
(-
RTE_CHGPORTOK
);

1053 
	`mbx_£nd_if
(
p‹t¶Ÿp
->
mbx
, 
msg
, 
	`off£tof
(
ª∂y_t
, msgË+ 
ª∂y
->
wsize
 +Ñïly->
w2size
);

1058 
p‹t¶Ÿp
->
èsk
 = -1;

1061 i‡(
	`FUN
(
fun_ext_timed
Ë=
SYNC_NET_RPC
) {

1062 
	`RETURN_ERR
(1);

1064 i‡(
	`NEED_TO_R
(
ty≥
)) {

1065 
rsize
 = 
	`USP_RSZ1
(
ty≥
);

1066 
rsize
 =Ñsizê? ((*)
¨gs
)[rsize - 1] : ();

1068 
rsize
 = 0;

1071 
∑r_t
 *
¨g
;

1072 
RT_TASK
 *
èsk
;

1074 
¨g
 = (*)
msg
;

1075 
¨g
->
¥i‹ôy
 = (
èsk
 = 
	`_π_whﬂmi
())->priority;

1076 
¨g
->
ba£_¥i‹ôy
 = 
èsk
->base_priority;

1077 
¨g
->
¨gsize
 =árgsize;

1078 
¨g
->
rsize
 =Ñsize;

1079 
¨g
->
fun_ext_timed
 = fun_ext_timed;

1080 
¨g
->
ty≥
 =Åype;

1081 
¨g
->
ow√r
 = 
p‹t¶Ÿp
->owner;

1082 
¨g
->
∑πy≥s
 =Öartypes;

1083 
	`mem˝y
(
¨g
->
a
, 
¨gs
, 
¨gsize
);

1084 i‡(
rsize
 > 0) {

1085 i‡(
•a˚
) {

1086 
	`mem˝y
((*)
¨g
->
a
 + 
¨gsize
, (*)((*)
¨gs
 + 
	`USP_RBF1
(
ty≥
Ë- 1)[0], 
rsize
);

1088 
	`π_c›y_‰om_u£r
((*)
¨g
->
a
 + 
¨gsize
, (*)((*)
¨gs
 + 
	`USP_RBF1
(
ty≥
Ë- 1)[0], 
rsize
);

1091 
rsize
 = (
∑r_t
Ë- (Ë+ 
¨gsize
 +Ñsize;

1092 i‡(
ícode
) {

1093 
rsize
 = 
	`ícode
(
p‹t¶Ÿp
, 
msg
,Ñsize, 
RPC_REQ
);

1095 
¨g
->
mach
 = ();

1096 i‡(
p‹t¶Ÿp
->
h¨d
) {

1097 
	`h¨d_π_£ndto
(
p‹t¶Ÿp
->
sockë
[1], 
msg
, 
rsize
, 0, (
sockaddr
 *)&p‹t¶Ÿp->
addr
, 
ADRSZ
);

1099 
	`so·_π_£ndto
(
p‹t¶Ÿp
->
sockë
[0], 
msg
, 
rsize
, 0, (
sockaddr
 *)&p‹t¶Ÿp->
addr
, 
ADRSZ
);

1102 i‡(
p‹t
 > 0) {

1103 
sockaddr
 
addr
;

1105 i‡(
p‹t¶Ÿp
->
timeout
) {

1106 if(
	`π_£m_waô_timed
(&
p‹t¶Ÿp
->
£m
,p‹t¶Ÿp->
timeout
Ë=
RTE_TIMOUT
)

1107 
	`RETURN_ERR
(-
RTE_NETIMOUT
);

1109 
	`π_£m_waô
(&
p‹t¶Ÿp
->
£m
);

1111 
rsize
 = 
p‹t¶Ÿp
->
h¨d
 ? 
	`h¨d_π_ªcv‰om
’‹t¶Ÿp->
sockë
[1], 
msg
, 
MAX_MSG_SIZE
, 0, &
addr
, (*)&
p‹t
Ë: 
	`so·_π_ªcv‰om
(portslotp->socket[0], msg, MAX_MSG_SIZE, 0, &addr, &port);

1112 i‡(
decode
) {

1113 
	`decode
(
p‹t¶Ÿp
,Ö‹t¶Ÿp->
msg
, 
rsize
, 
RPC_RCV
);

1115 if((
ª∂y
 = (*)
msg
)->
myp‹t
) {

1116 i‡(
ª∂y
->
myp‹t
 < 0) {

1117 
	`RETURN_ERR
(-
RTE_CHGPORTERR
);

1119 
p‹t¶Ÿp
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
ª∂y
->
myp‹t
);

1120 
p‹t¶Ÿp
->
£m
.
cou¡
 = 0;

1121 
p‹t¶Ÿp
->
£m
.
queue
.
¥ev
 =Ö‹t¶Ÿp->£m.queue.
√xt
 = &portslotp->sem.queue;

1122 
p‹t¶Ÿp
->
ow√r
 = 
ª∂y
->
ªtvÆ
;

1123 
p‹t¶Ÿp
->
«me
 = ()(
	`_π_whﬂmi
());

1124 
	`RETURN_ERR
(-
RTE_CHGPORTOK
);

1126 i‡(
ª∂y
->
wsize
) {

1127 i‡(
•a˚
) {

1128 
	`mem˝y
((*)(*((*)
¨gs
 + 
	`USP_WBF1
(
ty≥
Ë- 1)), 
ª∂y
->
msg
,Ñïly->
wsize
);

1130 
	`π_c›y_to_u£r
((*)(*((*)
¨gs
 + 
	`USP_WBF1
(
ty≥
Ë- 1)), 
ª∂y
->
msg
,Ñïly->
wsize
);

1132 i‡(
ª∂y
->
w2size
) {

1133 i‡(
•a˚
) {

1134 
	`mem˝y
((*)(*((*)
¨gs
 + 
	`USP_WBF2
(
ty≥
Ë- 1)), 
ª∂y
->
msg
 +Ñïly->
wsize
,Ñïly->
w2size
);

1136 
	`π_c›y_to_u£r
((*)(*((*)
¨gs
 + 
	`USP_WBF2
(
ty≥
Ë- 1)), 
ª∂y
->
msg
 +Ñïly->
wsize
,Ñïly->
w2size
);

1140  
ª∂y
->
ªtvÆ
;

1144 
	}
}

1146 
	$π_gë_√t_Ωc_ªt
(
MBX
 *
mbx
, *
ªtvÆ
, *
msg1
, *
msgÀn1
, *
msg2
, *
msgÀn2
, 
RTIME
 
timeout
, 
ty≥
)

1148 
ª∂y_t
 
ª∂y
;

1149 
ªt
;

1151 i‡((
ªt
 = (((*)(
MBX
 *, ...))
π_√t_Ωc_fun_ext
[
NET_RPC_EXT
][
ty≥
].
fun
)(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
), 
timeout
))) {

1152  
ªt
;

1154 *
ªtvÆ
 = 
ª∂y
.retval;

1155 i‡(
ª∂y
.
wsize
) {

1156 i‡(*
msgÀn1
 > 
ª∂y
.
wsize
) {

1157 *
msgÀn1
 = 
ª∂y
.
wsize
;

1159 
	`_π_mbx_ª˚ive
(
mbx
, &
msg1
, *
msgÀn1
, 1);

1161 *
msgÀn1
 = 0;

1163 i‡(
ª∂y
.
w2size
) {

1164 i‡(*
msgÀn2
 > 
ª∂y
.
w2size
) {

1165 *
msgÀn2
 = 
ª∂y
.
w2size
;

1167 
	`_π_mbx_ª˚ive
(
mbx
, &
msg2
, *
msgÀn2
, 1);

1169 *
msgÀn2
 = 0;

1172 
	}
}

1174 
RTAI_SYSCALL_MODE
 
	$ddn2∆
(c⁄° *
ddn
)

1176 
p
, 
n
, 
c
;

1177 uni⁄ { 
l
; 
c
[4]; } 
u
;

1179 
p
 = 
n
 = 0;

1180 (
c
 = *
ddn
++)) {

1181 i‡(
c
 != '.') {

1182 
n
 =Ç*10 + 
c
 - '0';

1184 i‡(
n
 > 0xFF) {

1187 
u
.
c
[
p
++] = 
n
;

1188 
n
 = 0;

1191 
u
.
c
[3] = 
n
;

1193  
u
.
l
;

1194 
	}
}

1196 
RTAI_SYSCALL_MODE
 
	$π_£t_this_node
(c⁄° *
ddn
, 
node
, 
h¨d
)

1198  
this_node
[
h¨d
 ? 
MSG_HARD
 : 
MSG_SOFT
] = 
ddn
 ? 
	`ddn2∆
(ddnË: 
node
;

1199 
	}
}

1201 #ifde‡
CONFIG_RTAI_RT_POLL


1203 
RTAI_SYSCALL_MODE
 
	$π_pﬁl_√åpc
(
π_pﬁl_s
 *
pdß1
, π_pﬁl_†*
pdß2
, 
pdß_size
, 
RTIME
 
timeout
)

1205 
ªtvÆ
 = 
pdß_size
/(
π_pﬁl_s
);

1206 i‡((Ë=8 && !(()
pdß1
[0].
wh©
 & 0xFFFFFFFF00000000ULL)) {

1207 
i
;

1208 
i
 = 0; i < 
ªtvÆ
; i++) {

1209 
pdß1
[
i
].
wh©
 = (*)
	`ª£t_kadr
(()pdsa1[i].what);

1212 
ªtvÆ
 = 
	`_π_pﬁl
(
pdß1
,ÑëvÆ, 
timeout
, 1);

1213 
	`mem˝y
(
pdß2
, 
pdß1
, 
pdß_size
);

1214  
ªtvÆ
;

1215 
	}
}

1217 
EXPORT_SYMBOL
(
π_pﬁl_√åpc
);

1223 
π_«tive_fun_íåy
 
	gπ_√åpc_íåõs
[] = {

1224 { { 1, 
_π_√t_Ωc
 }, 
NETRPC
 },

1225 { { 0, 
π_£t_√åpc_timeout
 }, 
SET_NETRPC_TIMEOUT
 },

1226 { { 1, 
π_£nd_ªq_ªl_p‹t
 }, 
SEND_REQ_REL_PORT
 },

1227 { { 0, 
ddn2∆
 }, 
DDN2NL
 },

1228 { { 0, 
π_£t_this_node
 }, 
SET_THIS_NODE
 },

1229 { { 0, 
π_föd_asgn_°ub
 }, 
FIND_ASGN_STUB
 },

1230 { { 0, 
π_ªl_°ub
 }, 
REL_STUB
 },

1231 { { 0, 
π_waôög_ªtu∫
 }, 
WAITING_RETURN
 },

1232 #ifde‡
CONFIG_RTAI_RT_POLL


1233 { { 1, 
π_pﬁl_√åpc
 }, 
RT_POLL_NETRPC
 },

1238 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

1239 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

1241 
RT_TASK
 *
	gp‹t_£rvî
;

1243 
öô_so·π√t
();

1244 
˛ónup_so·π√t
();

1246 
	$do_mod_timî
()

1248 
	`mod_timî
(&
timî
, 
jiffõs
 + 
HZ
/
NETRPC_TIMER_FREQ
);

1249 
	}
}

1251 
sock_t
 *
	gsocks
;

1253 
	$so·_π_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

1255 
i
;

1256 
i
 = 0; i < 
MaxSocks
; i++) {

1257 i‡(!
	`cmpxchg
(&
socks
[
i
].
›nd
, 0, 1)) {

1258  
i
;

1262 
	}
}

1264 
	$so·_π_˛o£
(
sock
)

1266 i‡(
sock
 >0 && sock < 
MaxSocks
) {

1267  
socks
[
sock
].
›nd
 = 0;

1270 
	}
}

1272 
	$so·_π_böd
(
sock
, 
sockaddr
 *
addr
, 
addæí
)

1275 
	}
}

1277 
so·_π_sockë_ˇŒback
(
sock
, (*
func
)(sock, *
¨g
), *arg)

1279 i‡(
sock
 >0 && sock < 
MaxSocks
 && 
func
 > 0) {

1280 
socks
[
sock
].
ˇŒback
 = 
func
;

1281 
socks
[
sock
].
¨g
 =árg;

1285 
	}
}

1287 
	gMaxSockSrq
;

1288 °ru˘ { 
	m§q
, 
	mö
, 
	mout
, *
	msocködx
; } 
	gsy§q
;

1289 
DEFINE_SPINLOCK
(
sy§q_lock
);

1291 
	$so·_π_£ndto
(
sock
, c⁄° *
msg
, 
msgÀn
, 
sÊags
, 
sockaddr
 *
to
, 
tﬁí
)

1293 
Êags
;

1294 i‡(
sock
 >0 && sock < 
MaxSocks
) {

1295 i‡(
msgÀn
 > 
MAX_MSG_SIZE
) {

1296 
msgÀn
 = 
MAX_MSG_SIZE
;

1298 
	`mem˝y
(
socks
[
sock
].
msg
, msg, socks[sock].
to£nd
 = 
msgÀn
);

1299 
	`mem˝y
(&
socks
[
sock
].
addr
, 
to
, 
tﬁí
);

1300 
Êags
 = 
	`π_•ö_lock_úqßve
(&
sy§q_lock
);

1301 
sy§q
.
socködx
[sy§q.
ö
] = 
sock
;

1302 
sy§q
.
ö
 = (sy§q.ö + 1Ë& 
MaxSockSrq
;

1303 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
sy§q_lock
);

1304 
	`π_≥nd_löux_§q
(
sy§q
.
§q
);

1305  
msgÀn
;

1308 
	}
}

1310 
	$so·_π_ªcv‰om
(
sock
, *
msg
, 
msgÀn
, 
Êags
, 
sockaddr
 *
‰om
, *
‰omÀn
)

1312 i‡(
sock
 >0 && sock < 
MaxSocks
) {

1313 i‡(
msgÀn
 > 
socks
[
sock
].
ªcvd
) {

1314 
msgÀn
 = 
socks
[
sock
].
ªcvd
;

1316 
	`mem˝y
(
msg
, 
socks
[
sock
].msg, 
msgÀn
);

1317 i‡(
‰om
 && 
‰omÀn
) {

1318 
	`mem˝y
(
‰om
, &
socks
[
sock
].
addr
, socks[sock].
addæí
);

1319 *
‰omÀn
 = 
socks
[
sock
].
addæí
;

1321  
msgÀn
;

1324 
	}
}

1326 
	~<löux/uni°d.h
>

1327 
	~<löux/pﬁl.h
>

1328 
	~<löux/√t.h
>

1330 
	gî∫o
;

1332 
	#SYSCALL_BGN
() \

1333 dÿ{ 
ªtvÆ
; 
mm_£gmít_t
 
svdfs
 = 
	`gë_fs
(); 
	`£t_fs
(
KERNEL_DS
)

	)

1334 
	#SYSCALL_END
() \

1335 
	`£t_fs
(
svdfs
);  
ªtvÆ
; } 0)

	)

1337 #ifde‡
__NR_sockëˇŒ


1339 *
sys_ˇŒ_èbÀ
[];

1341 
ölöe
 
	$k˛o£
(
fd
)

1343 
	`SYSCALL_BGN
();

1344 
ªtvÆ
 = ((
asmlökage
 (*)())
sys_ˇŒ_èbÀ
[
__NR_˛o£
])(
fd
);

1345 
	`SYSCALL_END
();

1346 
	}
}

1349 
ölöe
 
	$kpﬁl
(
pﬁlfd
 *
ufds
, 
nfds
, 
timeout
)

1351 
	`SYSCALL_BGN
();

1352 
ªtvÆ
 = ((
asmlökage
 (*)(
pﬁlfd
 *, ... ))
sys_ˇŒ_èbÀ
[
__NR_pﬁl
])(
ufds
, 
nfds
, 
timeout
);

1354 
	`SYSCALL_END
();

1355 
	}
}

1358 
ölöe
 
	$ksockëˇŒ
(
ˇŒ
, *
¨gs
)

1360 
	`SYSCALL_BGN
();

1361 
ªtvÆ
 = ((
asmlökage
 (*)(, ... ))
sys_ˇŒ_èbÀ
[
__NR_sockëˇŒ
])(
ˇŒ
, 
¨gs
);

1363 
	`SYSCALL_END
();

1364 
	}
}

1366 
ölöe
 
	$ksockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
)

1368 °ru˘ { 
Ámûy
; 
ty≥
; 
¥Ÿocﬁ
; } 
¨gs
 = { family,Åype,Örotocol };

1369  
	`ksockëˇŒ
(
SYS_SOCKET
, &
¨gs
);

1370 
	}
}

1372 
ölöe
 
	$kböd
(
fd
, 
sockaddr
 *
umyaddr
, 
addæí
)

1374 °ru˘ { 
fd
; 
sockaddr
 *
umyaddr
; 
addæí
; } 
¨gs
 = { fd, umyaddr,áddrlen };

1375  
	`ksockëˇŒ
(
SYS_BIND
, &
¨gs
);

1376 
	}
}

1378 
ölöe
 
	$kc⁄√˘
(
fd
, 
sockaddr
 *
£rv_addr
, 
addæí
)

1380 °ru˘ { 
fd
; 
sockaddr
 *
£rv_addr
; 
addæí
; } 
¨gs
 = { fd, serv_addr,áddrlen };

1381  
	`ksockëˇŒ
(
SYS_CONNECT
, &
¨gs
);

1382 
	}
}

1384 
ölöe
 
	$kli°í
(
fd
, 
backlog
)

1386 °ru˘ { 
fd
; 
backlog
; } 
¨gs
 = { fd, backlog };

1387  
	`ksockëˇŒ
(
SYS_LISTEN
, &
¨gs
);

1388 
	}
}

1390 
ölöe
 
	$kac˚±
(
fd
, 
sockaddr
 *
u≥î_sockaddr
, *
u≥î_addæí
)

1392 °ru˘ { 
fd
; 
sockaddr
 *
u≥î_sockaddr
; *
u≥î_addæí
; } 
¨gs
 = { fd, upeer_sockaddr, upeer_addrlen };

1393  
	`ksockëˇŒ
(
SYS_ACCEPT
, &
¨gs
);

1394 
	}
}

1396 
ölöe
 
	$kgësock«me
(
fd
, 
sockaddr
 *
usockaddr
, *
usockaddr_Àn
)

1398 °ru˘ { 
fd
; 
sockaddr
 *
usockaddr
; *
usockaddr_Àn
; } 
¨gs
 = { fd, usockaddr, usockaddr_len };

1399  
	`ksockëˇŒ
(
SYS_GETSOCKNAME
, &
¨gs
);

1400 
	}
}

1402 
ölöe
 
	$kgë≥î«me
(
fd
, 
sockaddr
 *
usockaddr
, *
usockaddr_Àn
)

1404 °ru˘ { 
fd
; 
sockaddr
 *
usockaddr
; *
usockaddr_Àn
; } 
¨gs
 = { fd, usockaddr, usockaddr_len };

1405  
	`ksockëˇŒ
(
SYS_GETPEERNAME
, &
¨gs
);

1406 
	}
}

1408 
ölöe
 
	$ksockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, *
usockvec
)

1410 °ru˘ { 
Ámûy
; 
ty≥
; 
¥Ÿocﬁ
; *
usockvec
; } 
¨gs
 = { family,Åype,Örotocol, usockvec };

1411  
	`ksockëˇŒ
(
SYS_SOCKETPAIR
, &
¨gs
);

1412 
	}
}

1414 
ölöe
 
	$k£ndto
(
fd
, *
buff
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 *
addr
, 
addr_Àn
)

1416 °ru˘ { 
fd
; *
buff
; 
size_t
 
Àn
; 
Êags
; 
sockaddr
 *
addr
; 
addr_Àn
; } 
¨gs
 = { fd, buff,Üen, flags,áddr,áddr_len };

1417  
	`ksockëˇŒ
(
SYS_SENDTO
, &
¨gs
);

1418 
	}
}

1420 
ölöe
 
	$kªcv‰om
(
fd
, *
ubuf
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 *
addr
, *
addr_Àn
)

1422 °ru˘ { 
fd
; *
ubuf
; 
size_t
 
Àn
; 
Êags
; 
sockaddr
 *
addr
; *
addr_Àn
; } 
¨gs
 = { fd, ubuf,Üen, flags,áddr,áddr_len };

1423  
	`ksockëˇŒ
(
SYS_RECVFROM
, &
¨gs
);

1424 
	}
}

1426 
ölöe
 
	$kshutdown
(
fd
, 
how
)

1428 °ru˘ { 
fd
; 
how
; } 
¨gs
 = { fd, how };

1429  
	`ksockëˇŒ
(
SYS_SHUTDOWN
, &
¨gs
);

1430 
	}
}

1432 
ölöe
 
	$k£tsock›t
(
fd
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
)

1434 °ru˘ { 
fd
; 
Àvñ
; 
›äame
; *
›tvÆ
; 
›éí
; } 
¨gs
 = { fd,Üevel, optname, optval, optlen };

1435  
	`ksockëˇŒ
(
SYS_SETSOCKOPT
, &
¨gs
);

1436 
	}
}

1438 
ölöe
 
	$kgësock›t
(
fd
, 
Àvñ
, 
›äame
, *
›tvÆ
, *
›éí
)

1440 °ru˘ { 
fd
; 
Àvñ
; 
›äame
; *
›tvÆ
; *
›éí
; } 
¨gs
 = { fd,Üevel, optname, optval, optlen };

1441  
	`ksockëˇŒ
(
SYS_GETSOCKOPT
, &
¨gs
);

1442 
	}
}

1444 
ölöe
 
	$k£ndmsg
(
fd
, 
msghdr
 *
msg
, 
Êags
)

1446 °ru˘ { 
fd
; 
msghdr
 *
msg
; 
Êags
; } 
¨gs
 = { fd, msg, flags };

1447  
	`ksockëˇŒ
(
SYS_SENDMSG
, &
¨gs
);

1448 
	}
}

1450 
ölöe
 
	$kªcvmsg
(
fd
, 
msghdr
 *
msg
, 
Êags
)

1452 °ru˘ { 
fd
; 
msghdr
 *
msg
; 
Êags
; } 
¨gs
 = { fd, msg, flags };

1453  
	`ksockëˇŒ
(
SYS_RECVMSG
, &
¨gs
);

1454 
	}
}

1459 
	#__NR_sockë
 1

	)

1460 
	#__NR_böd
 1

	)

1461 
	#__NR_c⁄√˘
 1

	)

1462 
	#__NR_ac˚±
 1

	)

1463 
	#__NR_li°í
 1

	)

1464 
	#__NR_gësock«me
 1

	)

1465 
	#__NR_gë≥î«me
 1

	)

1466 
	#__NR_sockë∑ú
 1

	)

1467 
	#__NR_£ndto
 1

	)

1468 
	#__NR_ªcv‰om
 1

	)

1469 
	#__NR_shutdown
 1

	)

1470 
	#__NR_£tsock›t
 1

	)

1471 
	#__NR_gësock›t
 1

	)

1472 
	#__NR_£ndmsg
 1

	)

1473 
	#__NR_ªcvmsg
 1

	)

1476 *
sys_ˇŒ_èbÀ
[];

1478 
ölöe
 
	$k˛o£
(
fd
)

1480 
	`SYSCALL_BGN
();

1481 
ªtvÆ
 = ((
asmlökage
 (*)())
sys_ˇŒ_èbÀ
[
__NR_˛o£
])(
fd
);

1482 
	`SYSCALL_END
();

1483 
	}
}

1486 
ölöe
 
	$kpﬁl
(
pﬁlfd
 *
ufds
, 
nfds
, 
timeout
)

1488 
	`SYSCALL_BGN
();

1489 
ªtvÆ
 = (((*)(*, , ))
sys_ˇŒ_èbÀ
[
__NR_pﬁl
])(
ufds
, 
nfds
, 
timeout
);

1491 
	`SYSCALL_END
();

1492 
	}
}

1495 
ölöe
 
	$ksockë
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
)

1497 
	`SYSCALL_BGN
();

1498 
ªtvÆ
 = (((*)(, , ))
sys_ˇŒ_èbÀ
[
__NR_sockë
])(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
);

1500 
	`SYSCALL_END
();

1501 
	}
}

1504 
ölöe
 
	$kböd
(
fd
, 
sockaddr
 *
umyaddr
, 
addæí
)

1506 
	`SYSCALL_BGN
();

1507 
ªtvÆ
 = (((*)(, 
sockaddr
 *, ))
sys_ˇŒ_èbÀ
[
__NR_böd
])(
fd
, 
umyaddr
, 
addæí
);

1509 
	`SYSCALL_END
();

1510 
	}
}

1513 
ölöe
 
	$kc⁄√˘
(
fd
, 
sockaddr
 *
£rv_addr
, 
addæí
)

1515 
	`SYSCALL_BGN
();

1516 
ªtvÆ
 = (((*)(, 
sockaddr
 *, ))
sys_ˇŒ_èbÀ
[
__NR_c⁄√˘
])(
fd
, 
£rv_addr
, 
addæí
);

1518 
	`SYSCALL_END
();

1519 
	}
}

1522 
ölöe
 
	$kli°í
(
fd
, 
backlog
)

1524 
	`SYSCALL_BGN
();

1525 
ªtvÆ
 = (((*)(, ))
sys_ˇŒ_èbÀ
[
__NR_li°í
])(
fd
, 
backlog
);

1527 
	`SYSCALL_END
();

1528 
	}
}

1531 
ölöe
 
	$kac˚±
(
fd
, 
sockaddr
 *
u≥î_sockaddr
, *
u≥î_addæí
)

1533 
	`SYSCALL_BGN
();

1534 
ªtvÆ
 = (((*)(, 
sockaddr
 *, *))
sys_ˇŒ_èbÀ
[
__NR_ac˚±
])(
fd
, 
u≥î_sockaddr
, 
u≥î_addæí
);

1536 
	`SYSCALL_END
();

1537 
	}
}

1540 
ölöe
 
	$kgësock«me
(
fd
, 
sockaddr
 *
usockaddr
, *
usockaddr_Àn
)

1542 
	`SYSCALL_BGN
();

1543 
ªtvÆ
 = (((*)(, 
sockaddr
 *, *))
sys_ˇŒ_èbÀ
[
__NR_gësock«me
])(
fd
, 
usockaddr
, 
usockaddr_Àn
);

1545 
	`SYSCALL_END
();

1546 
	}
}

1549 
ölöe
 
	$kgë≥î«me
(
fd
, 
sockaddr
 *
usockaddr
, *
usockaddr_Àn
)

1551 
	`SYSCALL_BGN
();

1552 
ªtvÆ
 = (((*)(, 
sockaddr
 *, *))
sys_ˇŒ_èbÀ
[
__NR_gë≥î«me
])(
fd
, 
usockaddr
, 
usockaddr_Àn
);

1554 
	`SYSCALL_END
();

1555 
	}
}

1558 
ölöe
 
	$ksockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, *
usockvec
)

1560 
	`SYSCALL_BGN
();

1561 
ªtvÆ
 = (((*)(, , , *))
sys_ˇŒ_èbÀ
[
__NR_sockë∑ú
])(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
usockvec
);

1563 
	`SYSCALL_END
();

1564 
	}
}

1567 
ölöe
 
	$k£ndto
(
fd
, *
buff
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 *
addr
, 
addr_Àn
)

1569 
	`SYSCALL_BGN
();

1570 
ªtvÆ
 = (((*)(, *, 
size_t
, , 
sockaddr
 *, ))
sys_ˇŒ_èbÀ
[
__NR_£ndto
])(
fd
, 
buff
, 
Àn
, 
Êags
, 
addr
, 
addr_Àn
);

1572 
	`SYSCALL_END
();

1573 
	}
}

1576 
ölöe
 
	$kªcv‰om
(
fd
, *
ubuf
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 *
addr
, *
addr_Àn
)

1578 
	`SYSCALL_BGN
();

1579 
ªtvÆ
 = (((*)(, *, 
size_t
, , 
sockaddr
 *, *))
sys_ˇŒ_èbÀ
[
__NR_ªcv‰om
])(
fd
, 
ubuf
, 
Àn
, 
Êags
, 
addr
, 
addr_Àn
);

1581 
	`SYSCALL_END
();

1582 
	}
}

1585 
ölöe
 
	$kshutdown
(
fd
, 
how
)

1587 
	`SYSCALL_BGN
();

1588 
ªtvÆ
 = (((*)(, ))
sys_ˇŒ_èbÀ
[
__NR_shutdown
])(
fd
, 
how
);

1590 
	`SYSCALL_END
();

1591 
	}
}

1594 
ölöe
 
	$k£tsock›t
(
fd
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
›éí
)

1596 
	`SYSCALL_BGN
();

1597 
ªtvÆ
 = (((*)(, , , *, ))
sys_ˇŒ_èbÀ
[
__NR_£tsock›t
])(
fd
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

1599 
	`SYSCALL_END
();

1600 
	}
}

1603 
ölöe
 
	$kgësock›t
(
fd
, 
Àvñ
, 
›äame
, *
›tvÆ
, *
›éí
)

1605 
	`SYSCALL_BGN
();

1606 
ªtvÆ
 = (((*)(, , , *, *))
sys_ˇŒ_èbÀ
[
__NR_gësock›t
])(
fd
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

1608 
	`SYSCALL_END
();

1609 
	}
}

1612 
ölöe
 
	$k£ndmsg
(
fd
, 
msghdr
 *
msg
, 
Êags
)

1614 
	`SYSCALL_BGN
();

1615 
ªtvÆ
 = (((*)(, 
msghdr
 *, ))
sys_ˇŒ_èbÀ
[
__NR_£ndmsg
])(
fd
, 
msg
, 
Êags
);

1617 
	`SYSCALL_END
();

1618 
	}
}

1621 
ölöe
 
	$kªcvmsg
(
fd
, 
msghdr
 *
msg
, 
Êags
)

1623 
	`SYSCALL_BGN
();

1624 
ªtvÆ
 = (((*)(, 
msghdr
 *, ))
sys_ˇŒ_èbÀ
[
__NR_ªcvmsg
])(
fd
, 
msg
, 
Êags
);

1626 
	`SYSCALL_END
();

1627 
	}
}

1631 
ölöe
 
	$k£nd
(
fd
, *
buff
, 
size_t
 
Àn
, 
Êags
)

1633  
	`k£ndto
(
fd
, 
buff
, 
Àn
, 
Êags
, 
NULL
, 0);

1634 
	}
}

1636 
ölöe
 
	$kªcv
(
fd
, *
ubuf
, 
size_t
 
size
, 
Êags
)

1638  
	`kªcv‰om
(
fd
, 
ubuf
, 
size
, 
Êags
, 
NULL
, NULL);

1639 
	}
}

1641 
DECLARE_MUTEX_LOCKED
(
mtx
);

1642 
	gíd_so·π√t
;

1644 
	$£nd_thªad
()

1646 
i
;

1648 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, 
SCHED_FIFO
, 
MAX_LINUX_RTPRIO
);

1649 
	`sigfûl£t
(&
cuºít
->
blocked
);

1650 !
íd_so·π√t
) {

1651 
i
 = 
	`down_öãºu±ibÀ
(&
mtx
);

1652 
sy§q
.
out
 !sy§q.
ö
) {

1653 
i
 = 
sy§q
.
socködx
[sy§q.
out
];

1654 
	`k£ndto
(
socks
[
i
].
sock
, socks[i].
msg
, socks[i].
to£nd
, 
MSG_DONTWAIT
, &socks[i].
addr
, 
ADRSZ
);

1655 
sy§q
.
out
 = (sy§q.ouà+ 1Ë& 
MaxSockSrq
;

1658 
	`£t_bô
(1, &
íd_so·π√t
);

1659 
	}
}

1661 
pﬁlfd
 *
	gpﬁlv
;

1662 
èsk_°ru˘
 *
	gªcv_h™dÀ
;

1664 
	$ªcv_thªad
()

1666 
i
, 
√víts
;

1668 
i
 = 0; i < 
MaxSocks
; i++) {

1669 
k
;

1670 
SPRT_ADDR
.
sö_p‹t
 = 
	`ht⁄s
(
BASEPORT
 + 
i
);

1671 i‡((
socks
[
i
].
sock
 = 
	`ksockë
(
AF_INET
, 
SOCK_DGRAM
, 0)Ë< 0 || (
k
 = 
	`kböd
(socks[i].sock, (
sockaddr
 *)&
SPRT_ADDR
, 
ADRSZ
)) < 0) {

1672 
	`π_‰ì_§q
(
sy§q
.
§q
);

1673 
	`k‰ì
(
socks
);

1674 
	`k‰ì
(
pﬁlv
);

1675 
	`k‰ì
(
sy§q
.
socködx
);

1676 
	`¥ötk
("SOFT RTNet: unableÅo set up Linux support sockets.\n");

1679 
socks
[
i
].
addæí
 = 
ADRSZ
;

1680 
pﬁlv
[
i
].
fd
 = 
socks
[i].
sock
;

1681 
pﬁlv
[
i
].
evíts
 = 
POLLIN
;

1683 
ªcv_h™dÀ
 = 
cuºít
;

1684 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, 
SCHED_RR
, 
MAX_LINUX_RTPRIO
);

1685 
	`sigfûl£t
(&
cuºít
->
blocked
);

1686 !
íd_so·π√t
) {

1687 i‡((
√víts
 = 
	`kpﬁl
(
pﬁlv
, 
MaxSocks
, 
NETRPC_POLL_TMOUT
)) > 0) {

1688 
i
 = -1;

1690 !
pﬁlv
[++
i
].
ªvíts
);

1691 i‡((
socks
[
i
].
ªcvd
 = 
	`kªcv‰om
(socks[i].
sock
, socks[i].
msg
, 
MAX_MSG_SIZE
, 
MSG_DONTWAIT
, &socks[i].
addr
, &socks[i].
addæí
)) > 0) {

1692 
socks
[
i
].
	`ˇŒback
(i, socks[i].
¨g
);

1694 } --
√víts
);

1697 
i
 = 0; i < 
MaxSocks
; i++) {

1698 
	`k˛o£
(
socks
[
i
].
sock
);

1700 
	`£t_bô
(2, &
íd_so·π√t
);

1701 
	}
}

1703 
	$so·π√t_hdl
()

1705 
	`up
(&
mtx
);

1706 
	}
}

1708 
	$öô_so·π√t
()

1710 
i
;

1711 
i
 = 8*(Ë- 1; !
	`ã°_bô
(i, &
MaxSocks
); i--);

1712 
MaxSockSrq
 = ((1 << 
i
Ë!
MaxSocks
 ? 1 << (i + 1) : MaxSocks) - 1;

1713 i‡((
sy§q
.
§q
 = 
	`π_ªque°_§q
(0xbadbìf2, 
so·π√t_hdl
, 0)) < 0) {

1714 
	`¥ötk
("SOFT RTNet:Ço sysrqávailable.\n");

1715  
sy§q
.
§q
;

1717 i‡(!(
sy§q
.
socködx
 = (*)
	`kmÆloc
((
MaxSockSrq
 + 1)*(), 
GFP_KERNEL
))) {

1718 
	`¥ötk
("SOFT RTNet:Ço memoryávailable for socket queus.\n");

1719  -
ENOMEM
;

1721 i‡(!(
socks
 = (
sock_t
 *)
	`kmÆloc
(
MaxSocks
*(sock_t), 
GFP_KERNEL
))) {

1722 
	`k‰ì
(
sy§q
.
socködx
);

1723 
	`¥ötk
("SOFT RTNet:Ço memoryávailable for socks.\n");

1724  -
ENOMEM
;

1726 i‡(!(
pﬁlv
 = (
pﬁlfd
 *)
	`kmÆloc
(
MaxSocks
*(pﬁlfd), 
GFP_KERNEL
))) {

1727 
	`k‰ì
(
sy§q
.
socködx
);

1728 
	`k‰ì
(
socks
);

1729 
	`¥ötk
("SOFT RTNet:Ço memoryávailable forÖolling.\n");

1730  -
ENOMEM
;

1732 
	`mem£t
(
socks
, 0, 
MaxSocks
*(
sock_t
));

1733 i‡(
	`IS_ERR
(
	`kthªad_run
((*)
£nd_thªad
, 0, "SNDSRV")Ë|| IS_ERR(kthªad_run((*)
ªcv_thªad
, 0, "RCVSRV"))) {

1734 
	`k‰ì
(
sy§q
.
socködx
);

1735 
	`k‰ì
(
socks
);

1736 
	`k‰ì
(
pﬁlv
);

1737 
	`¥ötk
("SOFT RTNet: unableÅo set up Linux support kernelÅhreads.\n");

1738  -
EINVAL
;

1740 !
ªcv_h™dÀ
) {

1741 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

1742 
	`scheduÀ_timeout
(
HZ
/
NETRPC_DELAY_FREQ
);

1745 
	}
}

1747 
	$˛ónup_so·π√t
()

1749 
	`π_‰ì_§q
(
sy§q
.
§q
);

1750 
íd_so·π√t
 = 1;

1755 
	`so·π√t_hdl
();

1756 
íd_so·π√t
 < 7) {

1757 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

1758 
	`scheduÀ_timeout
(
HZ
/
NETRPC_DELAY_FREQ
);

1760 
	`k‰ì
(
sy§q
.
socködx
);

1761 
	`k‰ì
(
socks
);

1762 
	`k‰ì
(
pﬁlv
);

1763 
	}
}

1769 **
	gπ_√t_Ωc_fun_hook
 = (*)
π_√t_Ωc_fun_ext
;

1771 
	$__πai_√åpc_öô
()

1773 
i
;

1775 
MaxStubsM⁄e
 = 
MaxStubs
 - 1;

1776 i‡((
mod_timî_§q
 = 
	`π_ªque°_§q
(0xbadbìf1, 
do_mod_timî
, 0)) < 0) {

1777 
	`¥ötk
("MOD_TIMER:Ço sysrqávailable.\n");

1778  
mod_timî_§q
;

1780 i‡(!(
ªcovîy
.
msg
 = (
ªcovîy_msg
 *)
	`kmÆloc
((
MaxStubs
)*(ªcovîy_msg), 
GFP_KERNEL
))) {

1781 
	`¥ötk
("Init MODULEÇo memory forÑecovery queue.\n");

1782 
	`π_‰ì_§q
(
mod_timî_§q
);

1783  -
ENOMEM
;

1785 
MaxSocks
 +
MaxStubs
;

1786 
SPRT_ADDR
.
sö_Ámûy
 = 
AF_INET
;

1787 
SPRT_ADDR
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1788 i‡(
	`öô_so·π√t
()) {

1791 
π_√t_Ωc_fun_ext
[
NET_RPC_EXT
] = 
π_fun_lxπ
;

1792 
	`£t_π_fun_íåõs
(
π_√åpc_íåõs
);

1793 i‡(!(
p‹t¶Ÿ
 = 
	`kmÆloc
(
MaxSocks
*(
p‹t¶Ÿ_t
), 
GFP_KERNEL
))) {

1794 
	`¥ötk
("KMALLOC FAILED ALLOCATING PORT SLOTS\n");

1796 i‡(!
ThisSo·Node
) {

1797 
ThisSo·Node
 = 
ThisNode
;

1799 i‡(!
ThisH¨dNode
) {

1800 
ThisH¨dNode
 = 
ThisNode
;

1802 
this_node
[0] = 
	`ddn2∆
(
ThisSo·Node
);

1803 
this_node
[1] = 
	`ddn2∆
(
ThisH¨dNode
);

1805 
i
 = 0; i < 
MaxSocks
; i++) {

1806 
p‹t¶Ÿ
[
i
].
p
 =Öortslot + i;

1807 
p‹t¶Ÿ
[
i
].
ödx
 =Ö‹t¶Ÿ[i].
∂a˚
 = i;

1808 
SPRT_ADDR
.
sö_p‹t
 = 
	`ht⁄s
(
BASEPORT
 + 
i
);

1809 
p‹t¶Ÿ
[
i
].
addr
 = 
SPRT_ADDR
;

1810 
p‹t¶Ÿ
[
i
].
sockë
[0] = 
	`so·_π_sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1811 
	`so·_π_böd
(
p‹t¶Ÿ
[
i
].
sockë
[0], (
sockaddr
 *)&
SPRT_ADDR
, 
ADRSZ
);

1812 
p‹t¶Ÿ
[
i
].
sockë
[1] = 
	`h¨d_π_sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1813 
	`h¨d_π_böd
(
p‹t¶Ÿ
[
i
].
sockë
[1], (
sockaddr
 *)&
SPRT_ADDR
, 
ADRSZ
);

1814 
	`so·_π_sockë_ˇŒback
(
p‹t¶Ÿ
[
i
].
sockë
[0], (*)
√t_ªsume_èsk
, &p‹t¶Ÿ[i].
p
);

1815 
	`h¨d_π_sockë_ˇŒback
(
p‹t¶Ÿ
[
i
].
sockë
[1], (*)
√t_ªsume_èsk
, &p‹t¶Ÿ[i].
p
);

1816 
p‹t¶Ÿ
[
i
].
ow√r
 = 0;

1817 
	`π_ty≥d_£m_öô
(&
p‹t¶Ÿ
[
i
].
£m
, 0, 
BIN_SEM
 | 
FIFO_Q
);

1818 
p‹t¶Ÿ
[
i
].
èsk
 = 0;

1819 
p‹t¶Ÿ
[
i
].
timeout
 = 0;

1821 
SPRT_ADDR
.
sö_p‹t
 = 
	`ht⁄s
(
BASEPORT
);

1822 
p‹t¶Ÿ•
 = 
MaxStubs
;

1823 
p‹t¶Ÿ
[0].
h¨d
 = 0;

1824 
p‹t¶Ÿ
[0].
«me
 = 
PRTSRVNAME
;

1825 
p‹t¶Ÿ
[0].
ow√r
 = 
	`OWNER
(
this_node
[0], ()
p‹t_£rvî
);

1826 
p‹t_£rvî
 = 
	`kmÆloc
((
RT_TASK
Ë+ 3*(
fun_¨gs
), 
GFP_KERNEL
);

1827 
	`so·_kthªad_öô
(
p‹t_£rvî
, ()
p‹t_£rvî_fun
, (Ì‹t_£rvî, 
RT_SCHED_LOWEST_PRIORITY
);

1828 
p‹t¶Ÿ
[0].
èsk
 = ()
p‹t_£rvî
;

1829 
	`π_èsk_ªsume
(
p‹t_£rvî
);

1830 
	`π_ty≥d_£m_öô
(&
timî_£m
, 0, 
BIN_SEM
 | 
FIFO_Q
);

1831 
	`öô_timî
(&
timî
);

1832 
timî
.
fun˘i⁄
 = 
timî_fun
;

1834 
	}
}

1836 
	$__πai_√åpc_exô
()

1838 
i
;

1840 
	`ª£t_π_fun_ext_ödex
(
NULL
, 1);

1841 i‡(
ícdec_ext
) {

1842 
	`ª£t_π_fun_ext_ödex
(
ícdec_ext
, 1);

1844 
	`dñ_timî
(&
timî
);

1845 
	`π_£m_dñëe
(&
timî_£m
);

1846 
i
 = 0; i < 
MaxStubs
; i++) {

1847 i‡(
p‹t¶Ÿ
[
i
].
èsk
) {

1848 i‡(
p‹t¶Ÿ
[
i
].
h¨d
) {

1849 
	`π_èsk_dñëe
((
RT_TASK
 *)
p‹t¶Ÿ
[
i
].
èsk
);

1851 
	`so·_kthªad_dñëe
((
RT_TASK
 *)
p‹t¶Ÿ
[
i
].
èsk
);

1852 
	`k‰ì
((
RT_TASK
 *)
p‹t¶Ÿ
[
i
].
èsk
);

1856 
i
 = 0; i < 
MaxSocks
; i++) {

1857 
	`π_£m_dñëe
(&
p‹t¶Ÿ
[
i
].
£m
);

1858 
	`so·_π_˛o£
(
p‹t¶Ÿ
[
i
].
sockë
[0]);

1859 
	`h¨d_π_˛o£
(
p‹t¶Ÿ
[
i
].
sockë
[1]);

1861 
	`k‰ì
(
p‹t¶Ÿ
);

1862 
	`˛ónup_so·π√t
();

1863 
	`π_‰ì_§q
(
mod_timî_§q
);

1865 
	}
}

1867 #i‚de‡
CONFIG_RTAI_NETRPC_BUILTIN


1868 
moduÀ_öô
(
__πai_√åpc_öô
);

1869 
moduÀ_exô
(
__πai_√åpc_exô
);

1872 
EXPORT_SYMBOL
(
£t_√åpc_ícodög
);

1873 
EXPORT_SYMBOL
(
π_£nd_ªq_ªl_p‹t
);

1874 
EXPORT_SYMBOL
(
π_föd_asgn_°ub
);

1875 
EXPORT_SYMBOL
(
π_ªl_°ub
);

1876 
EXPORT_SYMBOL
(
π_waôög_ªtu∫
);

1877 
EXPORT_SYMBOL
(
_π_√t_Ωc
);

1878 
EXPORT_SYMBOL
(
π_gë_√t_Ωc_ªt
);

1879 
EXPORT_SYMBOL
(
π_£t_this_node
);

1880 
EXPORT_SYMBOL
(
π_£t_√åpc_timeout
);

1883 #ifde‡
SOFT_RTNET


1884 
EXPORT_SYMBOL
(
so·_π_sockë
);

1885 
EXPORT_SYMBOL
(
so·_π_˛o£
);

1886 
EXPORT_SYMBOL
(
so·_π_böd
);

1887 
EXPORT_SYMBOL
(
so·_π_sockë_ˇŒback
);

1888 
EXPORT_SYMBOL
(
so·_π_£ndto
);

1889 
EXPORT_SYMBOL
(
so·_π_ªcv‰om
);

1890 
EXPORT_SYMBOL
(
ddn2∆
);

1893 
EXPORT_SYMBOL
(
π_√t_Ωc_fun_hook
);

	@/usr/src/rtai/base/ipc/netrpc/rtai_netrpc.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa1768906, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô
) },

22 { 0xd33f781e, 
__VMLINUX_SYMBOL_STR
(
π_d´m⁄ize
) },

23 { 0x9fÁ0732, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

24 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

25 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

26 { 0x4c4„f19, 
__VMLINUX_SYMBOL_STR
(
kî√l_°ack
) },

27 { 0xØc1311b, 
__VMLINUX_SYMBOL_STR
(
π_£m_dñëe
) },

28 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

29 { 0xc996d097, 
__VMLINUX_SYMBOL_STR
(
dñ_timî
) },

30 { 0x93d08ac6, 
__VMLINUX_SYMBOL_STR
(
π_èsk_masked_unblock
) },

31 { 0xb22c9294, 
__VMLINUX_SYMBOL_STR
(
π_èsk_ªsume
) },

32 { 0x53cb81f1, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô
) },

33 { 0x4792c572, 
__VMLINUX_SYMBOL_STR
(
down_öãºu±ibÀ
) },

34 { 0x3b23b3a2, 
__VMLINUX_SYMBOL_STR
(
π_fun_ext
) },

35 { 0x593a99b, 
__VMLINUX_SYMBOL_STR
(
öô_timî_key
) },

36 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

37 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

38 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

39 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

40 { 0x7e5dì59, 
__VMLINUX_SYMBOL_STR
(
kthªad_¸óã_⁄_node
) },

41 { 0x7d11c268, 
__VMLINUX_SYMBOL_STR
(
jiffõs
) },

42 { 0x35b6b772, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_ch¨p
) },

43 { 0xcdbfc52b, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_if
) },

44 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

45 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

46 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

47 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

48 { 0xdfdb18bd, 
__VMLINUX_SYMBOL_STR
(
sys_ˇŒ_èbÀ
) },

49 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

50 { 0x1b˚b0ba, 
__VMLINUX_SYMBOL_STR
(
π_£m_sig«l
) },

51 { 0x5f50e4eb, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_§q
) },

52 { 0x8834396c, 
__VMLINUX_SYMBOL_STR
(
mod_timî
) },

53 { 0xbe2c0274, 
__VMLINUX_SYMBOL_STR
(
add_timî
) },

54 { 0x79d25270, 
__VMLINUX_SYMBOL_STR
(
πai_£t_löux_èsk_¥i‹ôy
) },

55 { 0x2ede4954, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ_so·
) },

56 { 0x25455d5c, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_ext_ödex
) },

57 { 0x3edc7ˇd, 
__VMLINUX_SYMBOL_STR
(
gë_mö_èsks_˝uid
) },

58 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

59 { 0x496187d3, 
__VMLINUX_SYMBOL_STR
(
π_≥nd_löux_§q
) },

60 { 0x12c0d4b7, 
__VMLINUX_SYMBOL_STR
(
π_èsk_su•íd
) },

61 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

62 { 0x9e2af924, 
__VMLINUX_SYMBOL_STR
(
_π_mbx_ª˚ive
) },

63 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

64 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

65 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

66 { 0xd62c833f, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

67 { 0xf6a8479e, 
__VMLINUX_SYMBOL_STR
(
£t_πext
) },

68 { 0xd5560cbc, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

69 { 0x79537e0, 
__VMLINUX_SYMBOL_STR
(
˛r_πext
) },

70 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

71 { 0xc1364ba9, 
__VMLINUX_SYMBOL_STR
(
π_fun_lxπ
) },

72 { 0x23˚179d, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

73 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

74 { 0x885d6118, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_timed
) },

75 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

76 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

77 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

78 { 0xc4554217, 
__VMLINUX_SYMBOL_STR
(
up
) },

79 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

80 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

81 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

82 { 0x909a72e2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_ext_ödex
) },

83 { 0x7d056198, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_§q
) },

84 { 0x5c˚6be5, 
__VMLINUX_SYMBOL_STR
(
π_ty≥d_£m_öô
) },

85 { 0xe5d95985, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_ul⁄g
) },

86 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

89 c⁄° 
	g__moduÀ_dïíds
[]

90 
__u£d


91 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

95 
MODULE_INFO
(
§cvîsi⁄
, "AAABB79BC99594DA7149BD5");

	@/usr/src/rtai/base/ipc/netrpc/rtnetP.h

19 #i‚de‡
__RTNET_RTNETP_H


20 
	#__RTNET_RTNETP_H


	)

22 
so·_π_böd
(
s
,

23 
sockaddr
 *
my_addr
,

24 
addæí
);

26 
so·_π_˛o£
(
s
);

28 
so·_π_ªcv‰om
(
s
,

29 *
buf
,

30 
Àn
,

31 
Êags
,

32 
sockaddr
 *
‰om
,

33 *
‰omÀn
);

35 
so·_π_£ndto
(
s
,

36 c⁄° *
buf
,

37 
Àn
,

38 
Êags
,

39 
sockaddr
 *
to
,

40 
tﬁí
);

42 
so·_π_sockë
(
domaö
,

43 
ty≥
,

44 
¥Ÿocﬁ
);

46 
so·_π_sockë_ˇŒback
(
s
,

47 (*
func
)(
s
, *
¨g
),

48 *
¨g
);

50 
	ssock_t
 {

51 
sock
, 
›nd
;

52 
to£nd
, 
ªcvd
;

53 
sockaddr
 
addr
;

54 
addæí
;

55 (*
ˇŒback
)(
sock
, *
¨g
);

56 *
¨g
;

57 
msg
[
MAX_MSG_SIZE
];

60 #ifde‡
COMPILE_ANYHOW


64 
πdm_dev_c⁄ãxt
;

66 
	sπ√t_ˇŒback
 {

67 (*
func
)(
πdm_dev_c⁄ãxt
 *, *);

68 *
¨g
;

71 
	#RTIOC_TYPE_NETWORK
 
RTDM_CLASS_NETWORK


	)

73 
	#RTNET_RTIOC_CALLBACK
 
	`_IOW
(
RTIOC_TYPE_NETWORK
, 0x12, 
π√t_ˇŒback
)

	)

	@/usr/src/rtai/base/ipc/sem/rtai_sem.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

22 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

23 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

24 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

25 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

26 { 0x5a23f0´, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr_˙t
) },

27 { 0xb9bd6a10, 
__VMLINUX_SYMBOL_STR
(
boŸ_ïoch
) },

28 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

29 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

30 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

31 { 0x592d73ˇ, 
__VMLINUX_SYMBOL_STR
(
π_drg_⁄_adr_˙t
) },

32 { 0xe01e0c16, 
__VMLINUX_SYMBOL_STR
(
π_smp_time_h
) },

33 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

34 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

35 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

36 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

37 { 0x141719e3, 
__VMLINUX_SYMBOL_STR
(
πai_tu«bÀs
) },

38 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

39 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

40 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

41 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

42 { 0xe70f28b6, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î
) },

43 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

44 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

45 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

46 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

49 c⁄° 
	g__moduÀ_dïíds
[]

50 
__u£d


51 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

55 
MODULE_INFO
(
§cvîsi⁄
, "6E4E2DC87A821AE341A7947");

	@/usr/src/rtai/base/ipc/sem/sem.c

31 
	~<löux/kî√l.h
>

32 
	~<löux/moduÀ.h
>

34 
	~<asm/uac˚ss.h
>

36 
	~<πai_schedc‹e.h
>

37 
	~<πai_¥öhî.h
>

38 
	~<πai_£m.h
>

39 
	~<πai_rwl.h
>

40 
	~<πai_•l.h
>

42 
MODULE_LICENSE
("GPL");

44 
ïoch_°ru˘
 
boŸ_ïoch
;

48 
	#UBI_MAIOR_MINOR_CESSAT_WAIT
(
£m
) \

50 
RT_TASK
 *
èsk
; \

51 i‡((
èsk
 = 
£m
->
owndby
Ë&& 
π_cuºít
->
¥i‹ôy
 <Åask->¥i‹ôy &&Åask->
ru¬ög
 <= 0) { \

52 i‡(!
èsk
->
ru¬ög
) { \

53 
£m
->
cou¡
--; \

54 
	`ªm_ªady_èsk
(
èsk
); \

55 
èsk
->
°©e
 |
RT_SCHED_SEMAPHORE
; \

56 } i‡(
èsk
->
ªsume_time
 > 
π_smp_time_h
[èsk->
ru¬abÀ_⁄_˝us
]) { \

57 
£m
->
cou¡
--; \

58 
	`ªm_ªady_èsk
(
èsk
); \

59 
èsk
->
°©e
 |(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
);\

60 
	`íq_timed_èsk
(
èsk
); \

62 
	`íqueue_blocked
(
èsk
, &
£m
->
queue
, 
PRIO_Q
); \

63 
	`íqueue_ªsqñ
(&
£m
->
ªsq
, sem->
owndby
 = 
π_cuºít
); \

64 
	`π_globÆ_ª°‹e_Êags
(
Êags
); \

67 } 0)

	)

69 
	#UBI_MAIOR_MINOR_CESSAT_WAIT_IF
(
£m
) \

71 i‡(
£m
->
ty≥
 > 0) { \

72 
RT_TASK
 *
π_cuºít
 = 
RT_CURRENT
; \

73 
	`UBI_MAIOR_MINOR_CESSAT_WAIT
(
£m
); \

75 } 0)

	)

79 
	#UBI_MAIOR_MINOR_CESSAT_WAIT
(
£m
)

	)

81 
	#UBI_MAIOR_MINOR_CESSAT_WAIT_IF
(
£m
)

	)

85 #ifde‡
CONFIG_RTAI_RT_POLL


87 
	#WAKEUP_WAIT_ONE_POLLER
(
wakeup
) \

88 i‡(
wakeup
Ë
	`π_wakeup_pﬁÀrs
(&
£m
->
pﬁl_waô_⁄e
, 0);

	)

90 
	#WAKEUP_WAIT_ALL_POLLERS
(
wakeup
) \

92 
	`WAKEUP_WAIT_ONE_POLLER
(
wakeup
) \

93 i‡(
£m
->
cou¡
 =1Ë
	`π_wakeup_pﬁÀrs
(&£m->
pﬁl_waô_Æl
, 0);\

94 } 0)

	)

98 
	#WAKEUP_WAIT_ONE_POLLER
(
wakeup
)

	)

100 
	#WAKEUP_WAIT_ALL_POLLERS
(
wakeup
)

	)

104 
	#CHECK_SEM_MAGIC
(
£m
) \

105 dÿ{ i‡(
£m
->
magic
 !
RT_SEM_MAGIC
Ë 
RTE_OBJINV
; } 0)

	)

168 
RTAI_SYSCALL_MODE
 
	$π_ty≥d_£m_öô
(
SEM
 *
£m
, 
vÆue
, 
ty≥
)

170 
£m
->
magic
 = 
RT_SEM_MAGIC
;

171 
£m
->
cou¡
 = 
vÆue
;

172 
£m
->
ª°y≥
 = 0;

173 i‡((
ty≥
 & 
RES_SEM
) == RES_SEM) {

174 
£m
->
qty≥
 = 0;

176 
£m
->
qty≥
 = (
ty≥
 & 
FIFO_Q
) ? 1 : 0;

178 
ty≥
 = (type & 3) - 2;

179 i‡((
£m
->
ty≥
 =Åy≥Ë< 0 && 
vÆue
 > 1) {

180 
£m
->
cou¡
 = 1;

181 } i‡(
ty≥
 > 0) {

182 
£m
->
ty≥
 = sem->
cou¡
 = 1;

183 
£m
->
ª°y≥
 = 
vÆue
;

185 
£m
->
queue
.
¥ev
 = &(sem->queue);

186 
£m
->
queue
.
√xt
 = &(sem->queue);

187 
£m
->
queue
.
èsk
 = sem->
owndby
 = 
NULL
;

189 
£m
->
ªsq
.
¥ev
 = sem->ªsq.
√xt
 = &sem->resq;

190 
£m
->
ªsq
.
èsk
 = (*)&£m->
queue
;

191 #ifde‡
CONFIG_RTAI_RT_POLL


192 
£m
->
pﬁl_waô_Æl
.
pﬁlq
.
¥ev
 = sem->pﬁl_waô_Æl.pﬁlq.
√xt
 = &(sem->poll_wait_all.pollq);

193 
£m
->
pﬁl_waô_⁄e
.
pﬁlq
.
¥ev
 = sem->pﬁl_waô_⁄e.pﬁlq.
√xt
 = &(sem->poll_wait_one.pollq);

194 
£m
->
pﬁl_waô_Æl
.
pﬁlq
.
èsk
 = sem->
pﬁl_waô_⁄e
.pﬁlq.èsk = 
NULL
;

195 
	`•ö_lock_öô
(&(
£m
->
pﬁl_waô_Æl
.
pﬁlock
));

196 
	`•ö_lock_öô
(&(
£m
->
pﬁl_waô_⁄e
.
pﬁlock
));

198 
	}
}

228 
	$π_£m_öô
(
SEM
 *
£m
, 
vÆue
)

230 
	`π_ty≥d_£m_öô
(
£m
, 
vÆue
, 
CNT_SEM
);

231 
	}
}

257 
RTAI_SYSCALL_MODE
 
	$π_£m_dñëe
(
SEM
 *
£m
)

259 
Êags
;

260 
RT_TASK
 *
èsk
;

261 
schedm≠
, 
sched
;

262 
QUEUE
 *
q
;

264 
	`CHECK_SEM_MAGIC
(
£m
);

266 
	`π_wakeup_pﬁÀrs
(&
£m
->
pﬁl_waô_Æl
, 
RTE_OBJREM
);

267 
	`π_wakeup_pﬁÀrs
(&
£m
->
pﬁl_waô_⁄e
, 
RTE_OBJREM
);

268 
schedm≠
 = 0;

269 
q
 = &(
£m
->
queue
);

270 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

271 
£m
->
magic
 = 0;

272 (
q
 = q->
√xt
Ë!&(
£m
->
queue
Ë&& (
èsk
 = q->task)) {

273 
	`ªm_timed_èsk
(
èsk
);

274 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

275 
èsk
->
blocked_⁄
 = 
RTP_OBJREM
;

276 
	`íq_ªady_èsk
(
èsk
);

277 
	`£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

280 
sched
 = 
schedm≠
;

281 
	`˛ór_bô
(
	`πai_˝uid
(), &
schedm≠
);

282 i‡((
èsk
 = 
£m
->
owndby
Ë&& sem->
ty≥
 > 0) {

283 
sched
 |
	`dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(&
£m
->
ªsq
, 
èsk
);

284 i‡(
èsk
->
su•dïth
) {

285 i‡(
èsk
->
su•dïth
 > 0) {

286 
èsk
->
°©e
 |
RT_SCHED_SUSPENDED
;

287 
	`ªm_ªady_èsk
(
èsk
);

288 
sched
 = 1;

289 } i‡(
èsk
->
su•dïth
 =
RT_RESEM_SUSPDEL
) {

290 
	`π_èsk_dñëe
(
èsk
);

294 i‡(
sched
) {

295 i‡(
schedm≠
) {

296 
	`RT_SCHEDULE_MAP_BOTH
(
schedm≠
);

298 
	`π_scheduÀ
();

301 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

303 
	}
}

306 
RTAI_SYSCALL_MODE
 
	$π_£m_cou¡
(
SEM
 *
£m
)

308  
£m
->
cou¡
;

309 
	}
}

336 
RTAI_SYSCALL_MODE
 
	$π_£m_sig«l
(
SEM
 *
£m
)

338 
Êags
;

339 
RT_TASK
 *
èsk
;

340 
tosched
;

342 
	`CHECK_SEM_MAGIC
(
£m
);

344 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

345 i‡(
£m
->
ty≥
) {

346 i‡(
£m
->
ª°y≥
 && (!£m->
owndby
 || sem->owndby !
RT_CURRENT
)) {

347 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

348  
RTE_PERM
;

350 i‡(
£m
->
ty≥
 > 1) {

351 
£m
->
ty≥
--;

352 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

355 i‡(++
£m
->
cou¡
 > 1) {

356 
£m
->
cou¡
 = 1;

359 
£m
->
cou¡
++;

361 i‡((
èsk
 = (
£m
->
queue
.
√xt
)->task)) {

362 
	`dequeue_blocked
(
èsk
);

363 
	`ªm_timed_èsk
(
èsk
);

364 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

365 
	`íq_ªady_èsk
(
èsk
);

366 i‡(
£m
->
ty≥
 <= 0) {

367 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

368 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

369 
	`WAKEUP_WAIT_ALL_POLLERS
(1);

372 
èsk
->
ru¬ög
 = - (èsk->
°©e
 & 
RT_SCHED_DELAYED
);

373 
tosched
 = 1;

374 
ªs
;

377 
tosched
 = 0;

378 
ªs
: i‡(
£m
->
ty≥
 > 0) {

379 
DECLARE_RT_CURRENT
;

380 
sched
;

381 
ASSIGN_RT_CURRENT
;

382 
£m
->
owndby
 = 
èsk
;

383 
sched
 = 
	`dequeue_ªsqñ_ª£t_cuºít_¥i‹ôy
(&
£m
->
ªsq
, 
π_cuºít
);

384 i‡(
π_cuºít
->
su•dïth
) {

385 i‡(
π_cuºít
->
su•dïth
 > 0) {

386 
π_cuºít
->
°©e
 |
RT_SCHED_SUSPENDED
;

387 
	`ªm_ªady_cuºít
(
π_cuºít
);

388 
sched
 = 1;

389 } i‡(
èsk
->
su•dïth
 =
RT_RESEM_SUSPDEL
) {

390 
	`π_èsk_dñëe
(
π_cuºít
);

393 i‡(
sched
) {

394 i‡(
tosched
) {

395 
	`RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
);

397 
	`π_scheduÀ
();

399 } i‡(
tosched
) {

400 
	`RT_SCHEDULE
(
èsk
, 
˝uid
);

403 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

404 
	`WAKEUP_WAIT_ALL_POLLERS
(1);

406 
	}
}

425 
RTAI_SYSCALL_MODE
 
	$π_£m_brﬂdˇ°
(
SEM
 *
£m
)

427 
Êags
, 
schedm≠
;

428 
RT_TASK
 *
èsk
;

429 
QUEUE
 *
q
;

431 
	`CHECK_SEM_MAGIC
(
£m
);

433 
schedm≠
 = 0;

434 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

435 (
q
 = 
£m
->
queue
.
√xt
) != &(sem->queue)) {

436 i‡((
èsk
 = 
q
->task)) {

437 
	`dequeue_blocked
(
èsk
 = 
q
->task);

438 
	`ªm_timed_èsk
(
èsk
);

439 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

440 
	`íq_ªady_èsk
(
èsk
);

441 
	`£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

444 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

445 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

447 
£m
->
cou¡
 = 0;

448 i‡(
schedm≠
) {

449 i‡(
	`ã°_™d_˛ór_bô
(
	`πai_˝uid
(), &
schedm≠
)) {

450 
	`RT_SCHEDULE_MAP_BOTH
(
schedm≠
);

452 
	`RT_SCHEDULE_MAP
(
schedm≠
);

455 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

456 
	`WAKEUP_WAIT_ONE_POLLER
(
schedm≠
);

458 
	}
}

503 
RTAI_SYSCALL_MODE
 
	$π_£m_waô
(
SEM
 *
£m
)

505 
RT_TASK
 *
π_cuºít
;

506 
Êags
;

507 
cou¡
;

509 
	`CHECK_SEM_MAGIC
(
£m
);

511 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

512 
π_cuºít
 = 
RT_CURRENT
;

513 i‡((
cou¡
 = 
£m
->count) <= 0) {

514 *
ªç
;

515 
schedm≠
;

516 i‡(
£m
->
ty≥
 > 0) {

517 
	`UBI_MAIOR_MINOR_CESSAT_WAIT
(
£m
);

518 i‡(
£m
->
ª°y≥
 && sem->
owndby
 =
π_cuºít
) {

519 i‡(
£m
->
ª°y≥
 > 0) {

520 
cou¡
 = 
£m
->
ty≥
++;

521 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

522  
cou¡
 + 1;

524 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

525  
RTE_DEADLOK
;

527 
schedm≠
 = 
	`∑ss_¥io
(
£m
->
owndby
, 
π_cuºít
);

529 
schedm≠
 = 0;

531 
£m
->
cou¡
--;

532 
π_cuºít
->
°©e
 |
RT_SCHED_SEMAPHORE
;

533 
	`ªm_ªady_cuºít
(
π_cuºít
);

534 
	`íqueue_blocked
(
π_cuºít
, &
£m
->
queue
, sem->
qty≥
);

535 
	`RT_SCHEDULE_MAP_BOTH
(
schedm≠
);

536 i‡(
	`likñy
(!(
ªç
 = 
π_cuºít
->
blocked_⁄
))) {

537 
cou¡
 = 
£m
->count;

539 i‡(
	`likñy
(
ªç
 !
RTP_OBJREM
)) {

540 
	`dequeue_blocked
(
π_cuºít
);

541 i‡(++
£m
->
cou¡
 > 1 && sem->
ty≥
) {

542 
£m
->
cou¡
 = 1;

544 i‡(
£m
->
owndby
 && sem->
ty≥
 > 0) {

545 
	`£t_èsk_¥io_‰om_ªsq
(
£m
->
owndby
);

547 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

548  
RTE_UNBLKD
;

550 
π_cuºít
->
¥io_∑s£d_to
 = 
NULL
;

551 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

552  
RTE_OBJREM
;

556 
£m
->
cou¡
--;

558 i‡(
£m
->
ty≥
 > 0) {

559 
	`íqueue_ªsqñ
(&
£m
->
ªsq
, sem->
owndby
 = 
π_cuºít
);

561 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

562  
cou¡
;

563 
	}
}

588 
RTAI_SYSCALL_MODE
 
	$π_£m_waô_if
(
SEM
 *
£m
)

590 
cou¡
;

591 
Êags
;

593 
	`CHECK_SEM_MAGIC
(
£m
);

595 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

596 i‡((
cou¡
 = 
£m
->count) <= 0) {

597 
	`UBI_MAIOR_MINOR_CESSAT_WAIT_IF
(
£m
);

598 i‡(
£m
->
ª°y≥
 && sem->
owndby
 =
RT_CURRENT
) {

599 i‡(
£m
->
ª°y≥
 > 0) {

600 
cou¡
 = 
£m
->
ty≥
++;

601 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

602  
cou¡
 + 1;

604 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

605  
RTE_DEADLOK
;

608 
£m
->
cou¡
--;

609 i‡(
£m
->
ty≥
 > 0) {

610 
	`íqueue_ªsqñ
(&
£m
->
ªsq
, sem->
owndby
 = 
RT_CURRENT
);

613 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

614  
cou¡
;

615 
	}
}

652 
RTAI_SYSCALL_MODE
 
	$π_£m_waô_u¡û
(
SEM
 *
£m
, 
RTIME
 
time
)

654 
DECLARE_RT_CURRENT
;

655 
cou¡
;

656 
Êags
;

658 
	`CHECK_SEM_MAGIC
(
£m
);

660 
	`REALTIME2COUNT
(
time
);

662 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

663 
ASSIGN_RT_CURRENT
;

664 i‡((
cou¡
 = 
£m
->count) <= 0) {

665 *
ªç
;

666 
π_cuºít
->
blocked_⁄
 = &
£m
->
queue
;

667 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

668 
schedm≠
;

669 i‡(
£m
->
ty≥
 > 0) {

670 
	`UBI_MAIOR_MINOR_CESSAT_WAIT
(
£m
);

671 i‡(
£m
->
ª°y≥
 && sem->
owndby
 =
π_cuºít
) {

672 i‡(
£m
->
ª°y≥
 > 0) {

673 
cou¡
 = 
£m
->
ty≥
++;

674 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

675  
cou¡
 + 1;

677 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

678  
RTE_DEADLOK
;

680 
schedm≠
 = 
	`∑ss_¥io
(
£m
->
owndby
, 
π_cuºít
);

682 
schedm≠
 = 0;

684 
£m
->
cou¡
--;

685 
π_cuºít
->
°©e
 |(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
);

686 
	`ªm_ªady_cuºít
(
π_cuºít
);

687 
	`íqueue_blocked
(
π_cuºít
, &
£m
->
queue
, sem->
qty≥
);

688 
	`íq_timed_èsk
(
π_cuºít
);

689 
	`RT_SCHEDULE_MAP_BOTH
(
schedm≠
);

691 
£m
->
cou¡
--;

692 
π_cuºít
->
queue
.
¥ev
 =Ñt_cuºít->queue.
√xt
 = &rt_current->queue;

694 i‡(
	`likñy
(!(
ªç
 = 
π_cuºít
->
blocked_⁄
))) {

695 
cou¡
 = 
£m
->count;

696 } i‡(
	`likñy
(
ªç
 !
RTP_OBJREM
)) {

697 
	`dequeue_blocked
(
π_cuºít
);

698 i‡(++
£m
->
cou¡
 > 1 && sem->
ty≥
) {

699 
£m
->
cou¡
 = 1;

701 i‡(
£m
->
owndby
 && sem->
ty≥
 > 0) {

702 
	`£t_èsk_¥io_‰om_ªsq
(
£m
->
owndby
);

704 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

705  
	`likñy
(
ªç
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
;

707 
π_cuºít
->
¥io_∑s£d_to
 = 
NULL
;

708 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

709  
RTE_OBJREM
;

712 
£m
->
cou¡
--;

714 i‡(
£m
->
ty≥
 > 0) {

715 
	`íqueue_ªsqñ
(&
£m
->
ªsq
, sem->
owndby
 = 
π_cuºít
);

717 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

718  
cou¡
;

719 
	}
}

756 
RTAI_SYSCALL_MODE
 
	$π_£m_waô_timed
(
SEM
 *
£m
, 
RTIME
 
dñay
)

758  
	`π_£m_waô_u¡û
(
£m
, 
	`gë_time
(Ë+ 
dñay
);

759 
	}
}

775 
RTAI_SYSCALL_MODE
 
	$π_£m_waô_b¨rõr
(
SEM
 *
£m
)

777 
Êags
;

779 
	`CHECK_SEM_MAGIC
(
£m
);

781 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

782 i‡(!
£m
->
owndby
) {

783 
£m
->
owndby
 = (*)()(£m->
cou¡
 < 1 ? 1 : sem->count);

784 
£m
->
cou¡
 = sem->
ty≥
 = 0;

786 i‡((1 - 
£m
->
cou¡
Ë< ()£m->
owndby
) {

787 
	`π_£m_waô
(
£m
);

788 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

791 
	`π_£m_brﬂdˇ°
(
£m
);

792 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

794 
	}
}

813 
RTAI_SYSCALL_MODE
 
	$π_c⁄d_sig«l
(
CND
 *
˙d
)

815 
Êags
;

816 
RT_TASK
 *
èsk
;

818 
	`CHECK_SEM_MAGIC
(
˙d
);

820 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

821 i‡((
èsk
 = (
˙d
->
queue
.
√xt
)->task)) {

822 
	`dequeue_blocked
(
èsk
);

823 
	`ªm_timed_èsk
(
èsk
);

824 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

825 
	`íq_ªady_èsk
(
èsk
);

826 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

829 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

831 
	}
}

833 
ölöe
 
	$π_˙dmtx_sig«l
(
SEM
 *
mtx
, 
RT_TASK
 *
π_cuºít
)

835 
ty≥
;

836 
RT_TASK
 *
èsk
;

838 i‡((
ty≥
 = 
mtx
->type) > 1) {

839 
mtx
->
ty≥
 = 1;

841 i‡(++
mtx
->
cou¡
 > 1) {

842 
mtx
->
cou¡
 = 1;

844 i‡((
èsk
 = (
mtx
->
queue
.
√xt
)->task)) {

845 
	`dequeue_blocked
(
èsk
);

846 
	`ªm_timed_èsk
(
èsk
);

847 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

848 
	`íq_ªady_èsk
(
èsk
);

849 
èsk
->
ru¬ög
 = - (èsk->
°©e
 & 
RT_SCHED_DELAYED
);

852 
mtx
->
owndby
 = 0;

853 
	`dequeue_ªsqñ_ª£t_cuºít_¥i‹ôy
(&
mtx
->
ªsq
, 
π_cuºít
);

854 i‡(
èsk
) {

855 
	`RT_SCHEDULE_BOTH
(
èsk
, 
	`πai_˝uid
());

857 
	`π_scheduÀ
();

859  
ty≥
;

860 
	}
}

882 
RTAI_SYSCALL_MODE
 
	$π_c⁄d_waô
(
CND
 *
˙d
, 
SEM
 *
mtx
)

884 
RT_TASK
 *
π_cuºít
;

885 
Êags
;

886 *
ªç
;

887 
ªtvÆ
, 
ty≥
;

889 
	`CHECK_SEM_MAGIC
(
˙d
);

890 
	`CHECK_SEM_MAGIC
(
mtx
);

892 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

893 
π_cuºít
 = 
RT_CURRENT
;

894 i‡(
mtx
->
owndby
 !
π_cuºít
) {

895 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

896  
RTE_PERM
;

898 
π_cuºít
->
°©e
 |
RT_SCHED_SEMAPHORE
;

899 
	`ªm_ªady_cuºít
(
π_cuºít
);

900 
	`íqueue_blocked
(
π_cuºít
, &
˙d
->
queue
, cnd->
qty≥
);

901 
ty≥
 = 
	`π_˙dmtx_sig«l
(
mtx
, 
π_cuºít
);

902 i‡(
	`likñy
((
ªç
 = 
π_cuºít
->
blocked_⁄
Ë!
RTP_OBJREM
)) {

903 i‡(
	`u∆ikñy
(
ªç
 !
NULL
)) {

904 
	`dequeue_blocked
(
π_cuºít
);

905 
ªtvÆ
 = 
RTE_UNBLKD
;

907 
ªtvÆ
 = 0;

910 
ªtvÆ
 = 
RTE_OBJREM
;

912 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

913 i‡(
	`π_£m_waô
(
mtx
Ë< 
RTE_LOWERR
) {

914 
mtx
->
ty≥
 =Åype;

916  
ªtvÆ
;

917 
	}
}

943 
RTAI_SYSCALL_MODE
 
	$π_c⁄d_waô_u¡û
(
CND
 *
˙d
, 
SEM
 *
mtx
, 
RTIME
 
time
)

945 
DECLARE_RT_CURRENT
;

946 
Êags
;

947 *
ªç
;

948 
ªtvÆ
, 
ty≥
;

950 
	`CHECK_SEM_MAGIC
(
˙d
);

951 
	`CHECK_SEM_MAGIC
(
mtx
);

953 
	`REALTIME2COUNT
(
time
);

955 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

956 
ASSIGN_RT_CURRENT
;

957 i‡(
mtx
->
owndby
 !
π_cuºít
) {

958 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

959  
RTE_PERM
;

961 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

962 
π_cuºít
->
°©e
 |(
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_DELAYED
);

963 
	`ªm_ªady_cuºít
(
π_cuºít
);

964 
	`íqueue_blocked
(
π_cuºít
, &
˙d
->
queue
, cnd->
qty≥
);

965 
	`íq_timed_èsk
(
π_cuºít
);

966 
ty≥
 = 
	`π_˙dmtx_sig«l
(
mtx
, 
π_cuºít
);

967 i‡(
	`u∆ikñy
((
ªç
 = 
π_cuºít
->
blocked_⁄
Ë=
RTP_OBJREM
)) {

968 
ªtvÆ
 = 
RTE_OBJREM
;

969 } i‡(
	`u∆ikñy
(
ªç
 !
NULL
)) {

970 
	`dequeue_blocked
(
π_cuºít
);

971 
ªtvÆ
 = 
	`likñy
(
ªç
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
;

973 
ªtvÆ
 = 0;

975 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

976 i‡(
	`π_£m_waô
(
mtx
Ë< 
RTE_LOWERR
) {

977 
mtx
->
ty≥
 =Åype;

980 
ªtvÆ
 = 
RTE_TIMOUT
;

981 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

983  
ªtvÆ
;

984 
	}
}

1011 
RTAI_SYSCALL_MODE
 
	$π_c⁄d_waô_timed
(
CND
 *
˙d
, 
SEM
 *
mtx
, 
RTIME
 
dñay
)

1013  
	`π_c⁄d_waô_u¡û
(
˙d
, 
mtx
, 
	`gë_time
(Ë+ 
dñay
);

1014 
	}
}

1037 
RTAI_SYSCALL_MODE
 
	$π_ty≥d_rwl_öô
(
RWL
 *
rwl
, 
ty≥
)

1039 
	`π_ty≥d_£m_öô
(&
rwl
->
wrmtx
, 
ty≥
, 
RES_SEM
);

1040 
	`π_ty≥d_£m_öô
(&
rwl
->
wr£m
, 0, 
CNT_SEM
 | 
PRIO_Q
);

1041 
	`π_ty≥d_£m_öô
(&
rwl
->
rd£m
, 0, 
CNT_SEM
 | 
PRIO_Q
);

1043 
	}
}

1057 
RTAI_SYSCALL_MODE
 
	$π_rwl_dñëe
(
RWL
 *
rwl
)

1059 
ªt
;

1061 
ªt
 = 
	`π_£m_dñëe
(&
rwl
->
rd£m
);

1062 
ªt
 |
	`π_£m_dñëe
(&
rwl
->
wr£m
);

1063 
ªt
 |
	`π_£m_dñëe
(&
rwl
->
wrmtx
);

1064  !
ªt
 ? 0 : 
RTE_OBJINV
;

1065 
	}
}

1082 
RTAI_SYSCALL_MODE
 
	$π_rwl_rdlock
(
RWL
 *
rwl
)

1084 
Êags
;

1085 
RT_TASK
 *
wèsk
, *
π_cuºít
;

1087 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1088 
π_cuºít
 = 
RT_CURRENT
;

1089 
rwl
->
wrmtx
.
owndby
 || ((
wèsk
 = (rwl->
wr£m
.
queue
.
√xt
)->
èsk
Ë&& wèsk->
¥i‹ôy
 <
π_cuºít
->priority)) {

1090 
ªt
;

1091 i‡(
rwl
->
wrmtx
.
owndby
 =
π_cuºít
) {

1092 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1093  
RTE_RWLINV
;

1095 i‡((
ªt
 = 
	`π_£m_waô
(&
rwl
->
rd£m
)Ë>
RTE_LOWERR
) {

1096 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1097  
ªt
;

1100 ((vﬁ©ûê*)&
rwl
->
rd£m
.
owndby
)[0]++;

1101 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1103 
	}
}

1119 
RTAI_SYSCALL_MODE
 
	$π_rwl_rdlock_if
(
RWL
 *
rwl
)

1121 
Êags
;

1122 
RT_TASK
 *
wèsk
;

1124 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1125 i‡(!
rwl
->
wrmtx
.
owndby
 && (!(
wèsk
 = (rwl->
wr£m
.
queue
.
√xt
)->
èsk
Ë|| wèsk->
¥i‹ôy
 > 
RT_CURRENT
->priority)) {

1126 ((vﬁ©ûê*)&
rwl
->
rd£m
.
owndby
)[0]++;

1127 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1130 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1132 
	}
}

1152 
RTAI_SYSCALL_MODE
 
	$π_rwl_rdlock_u¡û
(
RWL
 *
rwl
, 
RTIME
 
time
)

1154 
Êags
;

1155 
RT_TASK
 *
wèsk
, *
π_cuºít
;

1157 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1158 
π_cuºít
 = 
RT_CURRENT
;

1159 
rwl
->
wrmtx
.
owndby
 || ((
wèsk
 = (rwl->
wr£m
.
queue
.
√xt
)->
èsk
Ë&& wèsk->
¥i‹ôy
 <
π_cuºít
->priority)) {

1160 
ªt
;

1161 i‡(
rwl
->
wrmtx
.
owndby
 =
π_cuºít
) {

1162 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1163  
RTE_RWLINV
;

1165 i‡((
ªt
 = 
	`π_£m_waô_u¡û
(&
rwl
->
rd£m
, 
time
)Ë>
RTE_LOWERR
) {

1166 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1167  
ªt
;

1170 ((vﬁ©ûê*)&
rwl
->
rd£m
.
owndby
)[0]++;

1171 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1173 
	}
}

1194 
RTAI_SYSCALL_MODE
 
	$π_rwl_rdlock_timed
(
RWL
 *
rwl
, 
RTIME
 
dñay
)

1196  
	`π_rwl_rdlock_u¡û
(
rwl
, 
	`gë_time
(Ë+ 
dñay
);

1197 
	}
}

1213 
RTAI_SYSCALL_MODE
 
	$π_rwl_wæock
(
RWL
 *
rwl
)

1215 
Êags
;

1216 
ªt
;

1218 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1219 
rwl
->
rd£m
.
owndby
) {

1220 i‡((
ªt
 = 
	`π_£m_waô
(&
rwl
->
wr£m
)Ë>
RTE_LOWERR
) {

1221 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1222  
ªt
;

1225 i‡((
ªt
 = 
	`π_£m_waô
(&
rwl
->
wrmtx
)Ë>
RTE_LOWERR
) {

1226 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1227  
ªt
;

1229 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1231 
	}
}

1246 
RTAI_SYSCALL_MODE
 
	$π_rwl_wæock_if
(
RWL
 *
rwl
)

1248 
Êags
;

1249 
ªt
;

1251 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1252 i‡(!
rwl
->
rd£m
.
owndby
 && (
ªt
 = 
	`π_£m_waô_if
(&rwl->
wrmtx
)Ë> 0 &&Ñë < 
RTE_LOWERR
) {

1253 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1256 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1258 
	}
}

1278 
RTAI_SYSCALL_MODE
 
	$π_rwl_wæock_u¡û
(
RWL
 *
rwl
, 
RTIME
 
time
)

1280 
Êags
;

1281 
ªt
;

1283 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1284 
rwl
->
rd£m
.
owndby
) {

1285 i‡((
ªt
 = 
	`π_£m_waô_u¡û
(&
rwl
->
wr£m
, 
time
)Ë>
RTE_LOWERR
) {

1286 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1287  
ªt
;

1290 i‡((
ªt
 = 
	`π_£m_waô_u¡û
(&
rwl
->
wrmtx
, 
time
)Ë>
RTE_LOWERR
) {

1291 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1292  
ªt
;

1294 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1296 
	}
}

1317 
RTAI_SYSCALL_MODE
 
	$π_rwl_wæock_timed
(
RWL
 *
rwl
, 
RTIME
 
dñay
)

1319  
	`π_rwl_wæock_u¡û
(
rwl
, 
	`gë_time
(Ë+ 
dñay
);

1320 
	}
}

1337 
RTAI_SYSCALL_MODE
 
	$π_rwl_u∆ock
(
RWL
 *
rwl
)

1339 
Êags
;

1341 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1342 i‡(
rwl
->
wrmtx
.
owndby
 =
RT_CURRENT
) {

1343 
	`π_£m_sig«l
(&
rwl
->
wrmtx
);

1344 } i‡(
rwl
->
rd£m
.
owndby
) {

1345 ((vﬁ©ûê*)&
rwl
->
rd£m
.
owndby
)[0]--;

1347 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1348  
RTE_PERM
;

1350 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1351 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1352 i‡(!
rwl
->
wrmtx
.
owndby
 && !rwl->
rd£m
.owndby) {

1353 
RT_TASK
 *
wèsk
, *
πask
;

1354 
wèsk
 = (
rwl
->
wr£m
.
queue
.
√xt
)->
èsk
;

1355 
πask
 = (
rwl
->
rd£m
.
queue
.
√xt
)->
èsk
;

1356 i‡(
wèsk
 && 
πask
) {

1357 i‡(
wèsk
->
¥i‹ôy
 <
πask
->priority) {

1358 
	`π_£m_sig«l
(&
rwl
->
wr£m
);

1360 
	`π_£m_brﬂdˇ°
(&
rwl
->
rd£m
);

1362 } i‡(
wèsk
) {

1363 
	`π_£m_sig«l
(&
rwl
->
wr£m
);

1364 } i‡(
πask
) {

1365 
	`π_£m_brﬂdˇ°
(&
rwl
->
rd£m
);

1368 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1370 
	}
}

1393 
RTAI_SYSCALL_MODE
 
	$π_•l_öô
(
SPL
 *
•l
)

1395 
•l
->
owndby
 = 0;

1396 
•l
->
cou¡
 = 0;

1398 
	}
}

1412 
RTAI_SYSCALL_MODE
 
	$π_•l_dñëe
(
SPL
 *
•l
)

1415 
	}
}

1433 
RTAI_SYSCALL_MODE
 
	$π_•l_lock
(
SPL
 *
•l
)

1435 
Êags
;

1436 
RT_TASK
 *
π_cuºít
;

1438 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1439 i‡(
•l
->
owndby
 =(
π_cuºít
 = 
RT_CURRENT
)) {

1440 
•l
->
cou¡
++;

1442 
	`cmpxchg
(&
•l
->
owndby
, 0L, 
π_cuºít
));

1443 
•l
->
Êags
 = flags;

1445 
	`πai_ª°‹e_Êags
(
Êags
);

1447 
	}
}

1464 
RTAI_SYSCALL_MODE
 
	$π_•l_lock_if
(
SPL
 *
•l
)

1466 
Êags
;

1467 
RT_TASK
 *
π_cuºít
;

1469 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1470 i‡(
•l
->
owndby
 =(
π_cuºít
 = 
RT_CURRENT
)) {

1471 
•l
->
cou¡
++;

1473 i‡(
	`cmpxchg
(&
•l
->
owndby
, 0L, 
π_cuºít
)) {

1474 
	`πai_ª°‹e_Êags
(
Êags
);

1477 
•l
->
Êags
 = flags;

1479 
	`πai_ª°‹e_Êags
(
Êags
);

1481 
	}
}

1504 
RTAI_SYSCALL_MODE
 
	$π_•l_lock_timed
(
SPL
 *
•l
, 
ns
)

1506 
Êags
;

1507 
RT_TASK
 *
π_cuºít
;

1509 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1510 i‡(
•l
->
owndby
 =(
π_cuºít
 = 
RT_CURRENT
)) {

1511 
•l
->
cou¡
++;

1513 
RTIME
 
íd_time
;

1514 
locked
;

1515 
íd_time
 = 
	`πai_rdtsc
(Ë+ 
	`imuldiv
(
ns
, 
tu√d
.
˝u_‰eq
, 1000000000);

1516 (
locked
 = ()
	`cmpxchg
(&
•l
->
owndby
, 0L, 
π_cuºít
)Ë&& 
	`πai_rdtsc
(Ë< 
íd_time
);

1517 i‡(
locked
) {

1518 
	`πai_ª°‹e_Êags
(
Êags
);

1521 
•l
->
Êags
 = flags;

1523 
	`πai_ª°‹e_Êags
(
Êags
);

1525 
	}
}

1544 
RTAI_SYSCALL_MODE
 
	$π_•l_u∆ock
(
SPL
 *
•l
)

1546 
Êags
;

1547 
RT_TASK
 *
π_cuºít
;

1549 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1550 i‡(
•l
->
owndby
 =(
π_cuºít
 = 
RT_CURRENT
)) {

1551 i‡(
•l
->
cou¡
) {

1552 --
•l
->
cou¡
;

1554 
•l
->
owndby
 = 0;

1555 
•l
->
cou¡
 = 0;

1557 
	`πai_ª°‹e_Êags
(
•l
->
Êags
);

1560 
	`πai_ª°‹e_Êags
(
Êags
);

1562 
	}
}

1566 
	~<πai_ªgi°ry.h
>

1609 
RTAI_SYSCALL_MODE
 
SEM
 *
	$_π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
ty≥
, *
h™dÀ
)

1611 
SEM
 *
£m
;

1613 i‡((
£m
 = 
	`π_gë_adr_˙t
(
£m_«me
))) {

1614 i‡(
h™dÀ
) {

1615 i‡(()
h™dÀ
 > 
PAGE_OFFSET
) {

1616 *
h™dÀ
 = 1;

1618 
	`π_c›y_to_u£r
(
h™dÀ
, 
£m
, (
SEM
 *));

1621  
£m
;

1623 i‡((
£m
 = 
	`π_mÆloc
((
SEM
)))) {

1624 
	`π_ty≥d_£m_öô
(
£m
, 
vÆue
, 
ty≥
);

1625 i‡(
	`π_ªgi°î
(
£m_«me
, 
£m
, 
IS_SEM
, 0)) {

1626  
£m
;

1628 
	`π_£m_dñëe
(
£m
);

1630 
	`π_‰ì
(
£m
);

1631  (
SEM
 *)0;

1632 
	}
}

1655 
RTAI_SYSCALL_MODE
 
	$π_«med_£m_dñëe
(
SEM
 *
£m
)

1657 
ªt
;

1658 i‡(!(
ªt
 = 
	`π_drg_⁄_adr_˙t
(
£m
))) {

1659 i‡(!
	`π_£m_dñëe
(
£m
)) {

1660 
	`π_‰ì
(
£m
);

1663  
RTE_OBJINV
;

1666  
ªt
;

1667 
	}
}

1698 
RTAI_SYSCALL_MODE
 
RWL
 *
	$_π_«med_rwl_öô
(
rwl_«me
)

1700 
RWL
 *
rwl
;

1702 i‡((
rwl
 = 
	`π_gë_adr_˙t
(
rwl_«me
))) {

1703  
rwl
;

1705 i‡((
rwl
 = 
	`π_mÆloc
((
RWL
)))) {

1706 
	`π_rwl_öô
(
rwl
);

1707 i‡(
	`π_ªgi°î
(
rwl_«me
, 
rwl
, 
IS_RWL
, 0)) {

1708  
rwl
;

1710 
	`π_rwl_dñëe
(
rwl
);

1712 
	`π_‰ì
(
rwl
);

1713  (
RWL
 *)0;

1714 
	}
}

1736 
RTAI_SYSCALL_MODE
 
	$π_«med_rwl_dñëe
(
RWL
 *
rwl
)

1738 
ªt
;

1739 i‡(!(
ªt
 = 
	`π_drg_⁄_adr_˙t
(
rwl
))) {

1740 i‡(!
	`π_rwl_dñëe
(
rwl
)) {

1741 
	`π_‰ì
(
rwl
);

1744  
RTE_OBJINV
;

1747  
ªt
;

1748 
	}
}

1778 
RTAI_SYSCALL_MODE
 
SPL
 *
	$_π_«med_•l_öô
(
•l_«me
)

1780 
SPL
 *
•l
;

1782 i‡((
•l
 = 
	`π_gë_adr_˙t
(
•l_«me
))) {

1783  
•l
;

1785 i‡((
•l
 = 
	`π_mÆloc
((
SPL
)))) {

1786 
	`π_•l_öô
(
•l
);

1787 i‡(
	`π_ªgi°î
(
•l_«me
, 
•l
, 
IS_SPL
, 0)) {

1788  
•l
;

1790 
	`π_•l_dñëe
(
•l
);

1792 
	`π_‰ì
(
•l
);

1793  (
SPL
 *)0;

1794 
	}
}

1815 
RTAI_SYSCALL_MODE
 
	$π_«med_•l_dñëe
(
SPL
 *
•l
)

1817 
ªt
;

1818 i‡(!(
ªt
 = 
	`π_drg_⁄_adr_˙t
(
•l
))) {

1819 
	`π_•l_dñëe
(
•l
);

1820 
	`π_‰ì
(
•l
);

1823  
ªt
;

1824 
	}
}

1828 
π_pﬁl_íc
 
	gπ_pﬁl_of°fun
[] = {

1829 [
RT_POLL_NOT_TO_USE
] = { 0 , 
NULL
 },

1830 #ifde‡
CONFIG_RTAI_RT_POLL


1831 [
RT_POLL_MBX_RECV
] = { 
off£tof
(
MBX
, 
pﬁl_ªcv
), 
NULL
 },

1832 [
RT_POLL_MBX_SEND
] = { 
off£tof
(
MBX
, 
pﬁl_£nd
), 
NULL
 },

1833 [
RT_POLL_SEM_WAIT_ALL
] = { 
off£tof
(
SEM
, 
pﬁl_waô_Æl
), 
NULL
 },

1834 [
RT_POLL_SEM_WAIT_ONE
] = { 
off£tof
(
SEM
, 
pﬁl_waô_⁄e
), 
NULL
 }

1836 [
RT_POLL_MBX_RECV
] = { 0, 
NULL
 },

1837 [
RT_POLL_MBX_SEND
] = { 0, 
NULL
 },

1838 [
RT_POLL_SEM_WAIT_ALL
] = { 0, 
NULL
 },

1839 [
RT_POLL_SEM_WAIT_ONE
] = { 0, 
NULL
 }

1842 
EXPORT_SYMBOL
(
π_pﬁl_of°fun
);

1844 #ifde‡
CONFIG_RTAI_RT_POLL


1846 
	sπ_pﬁl_£m
 { 
QUEUE
 
	mqueue
; 
RT_TASK
 *
	mèsk
; 
	mwaô
; } 
	tPOLL_SEM
;

1848 
ölöe
 
	$π_scheduÀ_tosched
(
tosched_mask
)

1850 
Êags
;

1851 #ifde‡
CONFIG_SMP


1852 
˝umask
, 
rmask
;

1853 
rmask
 = 
tosched_mask
 & ~(
˝umask
 = (1 << 
	`πai_˝uid
()));

1854 i‡(
rmask
) {

1855 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1856 
	`£nd_sched_ùi
(
rmask
);

1857 
	`πai_ª°‹e_Êags
(
Êags
);

1859 i‡(
tosched_mask
 | 
˝umask
)

1862 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1863 
	`π_scheduÀ
();

1864 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1866 
	}
}

1868 
ölöe
 
	$π_pﬁl_waô
(
POLL_SEM
 *
£m
, 
RT_TASK
 *
π_cuºít
)

1870 
Êags
;

1871 
ªtvÆ
 = 0;

1873 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1874 i‡(
£m
->
waô
) {

1875 
π_cuºít
->
°©e
 |
RT_SCHED_POLL
;

1876 
	`ªm_ªady_cuºít
(
π_cuºít
);

1877 
	`íqueue_blocked
(
π_cuºít
, &
£m
->
queue
, 1);

1878 
	`π_scheduÀ
();

1879 i‡(
	`u∆ikñy
(
π_cuºít
->
blocked_⁄
 !
NULL
)) {

1880 
	`dequeue_blocked
(
π_cuºít
);

1881 
ªtvÆ
 = 
RTE_UNBLKD
;

1884 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1885  
ªtvÆ
;

1886 
	}
}

1888 
ölöe
 
	$π_pﬁl_waô_u¡û
(
POLL_SEM
 *
£m
, 
RTIME
 
time
, 
RT_TASK
 *
π_cuºít
, 
˝uid
)

1890 
Êags
;

1891 
ªtvÆ
 = 0;

1893 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1894 i‡(
£m
->
waô
) {

1895 
π_cuºít
->
blocked_⁄
 = &
£m
->
queue
;

1896 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

1897 
π_cuºít
->
°©e
 |(
RT_SCHED_POLL
 | 
RT_SCHED_DELAYED
);

1898 
	`ªm_ªady_cuºít
(
π_cuºít
);

1899 
	`íqueue_blocked
(
π_cuºít
, &
£m
->
queue
, 1);

1900 
	`íq_timed_èsk
(
π_cuºít
);

1901 
	`π_scheduÀ
();

1903 i‡(
	`u∆ikñy
(
π_cuºít
->
blocked_⁄
 !
NULL
)) {

1904 
ªtvÆ
 = 
	`likñy
((*)
π_cuºít
->
blocked_⁄
 > 
RTP_HIGERR
Ë? 
RTE_TIMOUT
 : 
RTE_UNBLKD
;

1905 
	`dequeue_blocked
(
π_cuºít
);

1908 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1909  
ªtvÆ
;

1910 
	}
}

1912 
ölöe
 
	$π_pﬁl_sig«l
(
POLL_SEM
 *
£m
)

1914 
Êags
;

1915 
RT_TASK
 *
èsk
;

1916 
ªtvÆ
 = 0;

1918 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1919 
£m
->
waô
 = 0;

1920 i‡((
èsk
 = (
£m
->
queue
.
√xt
)->task)) {

1921 
	`dequeue_blocked
(
èsk
);

1922 
	`ªm_timed_èsk
(
èsk
);

1923 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
 && (èsk->°©ê&~(
RT_SCHED_POLL
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

1924 
	`íq_ªady_èsk
(
èsk
);

1925 
ªtvÆ
 = (1 << 
èsk
->
ru¬abÀ_⁄_˝us
);

1928 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1929  
ªtvÆ
;

1930 
	}
}

1932 
	$π_wakeup_pﬁÀrs
(
π_pﬁl_ql
 *
ql
, 
ªas⁄
)

1934 
QUEUE
 *
q
, *
queue
 = &
ql
->
pﬁlq
;

1935 
•ölock_t
 *
qlock
 = &
ql
->
pﬁlock
;

1937 
	`π_•ö_lock_úq
(
qlock
);

1938 i‡((
q
 = 
queue
->
√xt
) != queue) {

1939 
POLL_SEM
 *
£m
;

1940 
tosched_mask
 = 0UL;

1942 
£m
 = (
POLL_SEM
 *)
q
->
èsk
;

1943 
q
->
èsk
 = (*)(()
ªas⁄
);

1944 (
queue
->
√xt
 = 
q
->√xt)->
¥ev
 = queue;

1945 
tosched_mask
 |
	`π_pﬁl_sig«l
(
£m
);

1946 
	`π_•ö_u∆ock_úq
(
qlock
);

1947 
	`π_•ö_lock_úq
(
qlock
);

1948 } (
q
 = 
queue
->
√xt
) != queue);

1949 
	`π_•ö_u∆ock_úq
(
qlock
);

1950 
	`π_scheduÀ_tosched
(
tosched_mask
);

1952 
	`π_•ö_u∆ock_úq
(
qlock
);

1954 
	}
}

1956 
EXPORT_SYMBOL
(
π_wakeup_pﬁÀrs
);

2039 
	#QL
(
i
Ë((
π_pﬁl_ql
 *)(
pds
[i].
wh©
 + 
π_pﬁl_of°fun
[pds[i].
f‹wh©
].
off£t
))

	)

2041 
RTAI_SYSCALL_MODE
 
	$_π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
, 
•a˚
)

2043 
π_pﬁl_s
 *
pds
;

2044 
i
, 
pﬁÀd
, 
£mªt
, 
˝uid
;

2045 
POLL_SEM
 
£m
 = { { &£m.
queue
, &£m.queue, 
NULL
 }, 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()], 1 };

2046 #ifde‡
CONFIG_RTAI_RT_POLL_ON_STACK


2047 
π_pﬁl_s
 
pdsv
[
ƒ
];

2048 
QUEUE
 
pﬁlq
[
ƒ
];

2050 
π_pﬁl_s
 *
pdsv
;

2051 
QUEUE
 *
pﬁlq
;

2052 i‡(!(
pdsv
 = 
	`π_mÆloc
(
ƒ
*(
π_pﬁl_s
))) &&Çr > 0) {

2053  
ENOMEM
;

2055 i‡(!(
pﬁlq
 = 
	`π_mÆloc
(
ƒ
*(
QUEUE
))) &&Çr > 0) {

2056 
	`π_‰ì
(
pdsv
);

2057  
ENOMEM
;

2060 i‡(
•a˚
) {

2061 
pds
 = 
pdß
;

2063 
	`π_c›y_‰om_u£r
(
pdsv
, 
pdß
, 
ƒ
*(
π_pﬁl_s
));

2064 
pds
 = 
pdsv
;

2066 
pﬁÀd
 = 
i
 = 0; i < 
ƒ
; i++) {

2067 
QUEUE
 *
queue
 = 
NULL
;

2068 
•ölock_t
 *
qlock
 = 
NULL
;

2069 i‡(
π_pﬁl_of°fun
[
pds
[
i
].
f‹wh©
].
	`t›ﬁl
’ds[i].
wh©
)) {

2070 
π_pﬁl_ql
 *
ql
 = 
	`QL
(
i
);

2071 
queue
 = &
ql
->
pﬁlq
;

2072 
qlock
 = &
ql
->
pﬁlock
;

2074 
pﬁlq
[
i
].
èsk
 = 
NULL
;

2075 
pﬁÀd
++;

2077 i‡(
queue
) {

2078 
QUEUE
 *
q
 = 
queue
;

2079 
pﬁlq
[
i
].
èsk
 = (
RT_TASK
 *)&
£m
;

2080 
	`π_•ö_lock_úq
(
qlock
);

2081 (
q
 = q->
√xt
Ë!
queue
 && (((
POLL_SEM
 *)q->
èsk
)->èsk)->
¥i‹ôy
 <
£m
.task->priority);

2082 
pﬁlq
[
i
].
√xt
 = 
q
;

2083 
q
->
¥ev
 = (
pﬁlq
[
i
].¥ev = q->¥ev)->
√xt
 = &pollq[i];

2084 
	`π_•ö_u∆ock_úq
(
qlock
);

2086 
pds
[
i
].
f‹wh©
 = 0;

2089 
£mªt
 = 0;

2090 i‡(!
pﬁÀd
) {

2091 i‡(
timeout
 < 0) {

2092 
£mªt
 = 
	`π_pﬁl_waô_u¡û
(&
£m
, 
	`gë_time
(Ë- 
timeout
, sem.
èsk
, 
˝uid
);

2093 } i‡(
timeout
 > 1) {

2094 
£mªt
 = 
	`π_pﬁl_waô_u¡û
(&
£m
, 
timeout
, sem.
èsk
, 
˝uid
);

2095 } i‡(
timeout
 < 1 && 
ƒ
 > 0) {

2096 
£mªt
 = 
	`π_pﬁl_waô
(&
£m
, sem.
èsk
);

2099 
pﬁÀd
 = 
i
 = 0; i < 
ƒ
; i++) {

2100 i‡(
pds
[
i
].
f‹wh©
) {

2101 
•ölock_t
 *
qlock
 = &
	`QL
(
i
)->
pﬁlock
;

2102 
	`π_•ö_lock_úq
(
qlock
);

2103 i‡(
pﬁlq
[
i
].
èsk
 =(*)&
£m
) {

2104 (
pﬁlq
[
i
].
¥ev
)->
√xt
 =Öollq[i].next;

2105 (
pﬁlq
[
i
].
√xt
)->
¥ev
 =Öollq[i].prev;

2107 
	`π_•ö_u∆ock_úq
(
qlock
);

2109 i‡(
pﬁlq
[
i
].
èsk
 !(*)&
£m
) {

2110 
pds
[
i
].
wh©
 = 
pﬁlq
[i].
èsk
;

2111 
pﬁÀd
++;

2114 i‡(!
•a˚
) {

2115 
	`π_c›y_to_u£r
(
pdß
, 
pds
, 
ƒ
*(
π_pﬁl_s
));

2117 #i‚de‡
CONFIG_RTAI_RT_POLL_ON_STACK


2118 
	`π_‰ì
(
pdsv
);

2119 
	`π_‰ì
(
pﬁlq
);

2121  
pﬁÀd
 ?ÖﬁÀd : 
£mªt
;

2122 
	}
}

2124 
EXPORT_SYMBOL
(
_π_pﬁl
);

2132 
π_«tive_fun_íåy
 
	gπ_£m_íåõs
[] = {

2133 { { 0, 
π_ty≥d_£m_öô
 }, 
TYPED_SEM_INIT
 },

2134 { { 0, 
π_£m_dñëe
 }, 
SEM_DELETE
 },

2135 { { 0, 
_π_ty≥d_«med_£m_öô
 }, 
NAMED_SEM_INIT
 },

2136 { { 0, 
π_«med_£m_dñëe
 }, 
NAMED_SEM_DELETE
 },

2137 { { 1, 
π_£m_sig«l
 }, 
SEM_SIGNAL
 },

2138 { { 1, 
π_£m_brﬂdˇ°
 }, 
SEM_BROADCAST
 },

2139 { { 1, 
π_£m_waô
 }, 
SEM_WAIT
 },

2140 { { 1, 
π_£m_waô_if
 }, 
SEM_WAIT_IF
 },

2141 { { 1, 
π_£m_waô_u¡û
 }, 
SEM_WAIT_UNTIL
 },

2142 { { 1, 
π_£m_waô_timed
 }, 
SEM_WAIT_TIMED
 },

2143 { { 1, 
π_£m_waô_b¨rõr
 }, 
SEM_WAIT_BARRIER
 },

2144 { { 1, 
π_£m_cou¡
 }, 
SEM_COUNT
 },

2145 { { 1, 
π_c⁄d_sig«l
}, 
COND_SIGNAL
 },

2146 { { 1, 
π_c⁄d_waô
 }, 
COND_WAIT
 },

2147 { { 1, 
π_c⁄d_waô_u¡û
 }, 
COND_WAIT_UNTIL
 },

2148 { { 1, 
π_c⁄d_waô_timed
 }, 
COND_WAIT_TIMED
 },

2149 { { 0, 
π_ty≥d_rwl_öô
 }, 
RWL_INIT
 },

2150 { { 0, 
π_rwl_dñëe
 }, 
RWL_DELETE
 },

2151 { { 0, 
_π_«med_rwl_öô
 }, 
NAMED_RWL_INIT
 },

2152 { { 0, 
π_«med_rwl_dñëe
 }, 
NAMED_RWL_DELETE
 },

2153 { { 1, 
π_rwl_rdlock
 }, 
RWL_RDLOCK
 },

2154 { { 1, 
π_rwl_rdlock_if
 }, 
RWL_RDLOCK_IF
 },

2155 { { 1, 
π_rwl_rdlock_u¡û
 }, 
RWL_RDLOCK_UNTIL
 },

2156 { { 1, 
π_rwl_rdlock_timed
 }, 
RWL_RDLOCK_TIMED
 },

2157 { { 1, 
π_rwl_wæock
 }, 
RWL_WRLOCK
 },

2158 { { 1, 
π_rwl_wæock_if
 }, 
RWL_WRLOCK_IF
 },

2159 { { 1, 
π_rwl_wæock_u¡û
 }, 
RWL_WRLOCK_UNTIL
 },

2160 { { 1, 
π_rwl_wæock_timed
 }, 
RWL_WRLOCK_TIMED
 },

2161 { { 1, 
π_rwl_u∆ock
 }, 
RWL_UNLOCK
 },

2162 { { 0, 
π_•l_öô
 }, 
SPL_INIT
 },

2163 { { 0, 
π_•l_dñëe
 }, 
SPL_DELETE
 },

2164 { { 0, 
_π_«med_•l_öô
 }, 
NAMED_SPL_INIT
 },

2165 { { 0, 
π_«med_•l_dñëe
 }, 
NAMED_SPL_DELETE
 },

2166 { { 1, 
π_•l_lock
 }, 
SPL_LOCK
 },

2167 { { 1, 
π_•l_lock_if
 }, 
SPL_LOCK_IF
 },

2168 { { 1, 
π_•l_lock_timed
 }, 
SPL_LOCK_TIMED
 },

2169 { { 1, 
π_•l_u∆ock
 }, 
SPL_UNLOCK
 },

2170 #ifde‡
CONFIG_RTAI_RT_POLL


2171 { { 1, 
_π_pﬁl
 }, 
SEM_RT_POLL
 },

2176 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

2177 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

2179 
	$pﬁl_waô
(*
£m
Ë{  ((
SEM
 *)£m)->
cou¡
 <0; 
	}
}

2181 
	$__πai_£m_öô
 ()

2183 
π_pﬁl_of°fun
[
RT_POLL_SEM_WAIT_ALL
].
t›ﬁl
 =

2184 
π_pﬁl_of°fun
[
RT_POLL_SEM_WAIT_ONE
].
t›ﬁl
 = 
pﬁl_waô
;

2185  
	`£t_π_fun_íåõs
(
π_£m_íåõs
);

2186 
	}
}

2188 
	$__πai_£m_exô
 ()

2190 
π_pﬁl_of°fun
[
RT_POLL_SEM_WAIT_ALL
].
t›ﬁl
 =

2191 
π_pﬁl_of°fun
[
RT_POLL_SEM_WAIT_ONE
].
t›ﬁl
 = 
NULL
;

2192 
	`ª£t_π_fun_íåõs
(
π_£m_íåõs
);

2193 
	}
}

2199 #i‚de‡
CONFIG_RTAI_SEM_BUILTIN


2200 
moduÀ_öô
(
__πai_£m_öô
);

2201 
moduÀ_exô
(
__πai_£m_exô
);

2204 
EXPORT_SYMBOL
(
π_ty≥d_£m_öô
);

2205 
EXPORT_SYMBOL
(
π_£m_öô
);

2206 
EXPORT_SYMBOL
(
π_£m_dñëe
);

2207 
EXPORT_SYMBOL
(
π_£m_cou¡
);

2208 
EXPORT_SYMBOL
(
π_£m_sig«l
);

2209 
EXPORT_SYMBOL
(
π_£m_brﬂdˇ°
);

2210 
EXPORT_SYMBOL
(
π_£m_waô
);

2211 
EXPORT_SYMBOL
(
π_£m_waô_if
);

2212 
EXPORT_SYMBOL
(
π_£m_waô_u¡û
);

2213 
EXPORT_SYMBOL
(
π_£m_waô_timed
);

2214 
EXPORT_SYMBOL
(
π_£m_waô_b¨rõr
);

2215 
EXPORT_SYMBOL
(
_π_ty≥d_«med_£m_öô
);

2216 
EXPORT_SYMBOL
(
π_«med_£m_dñëe
);

2218 
EXPORT_SYMBOL
(
π_c⁄d_sig«l
);

2219 
EXPORT_SYMBOL
(
π_c⁄d_waô
);

2220 
EXPORT_SYMBOL
(
π_c⁄d_waô_u¡û
);

2221 
EXPORT_SYMBOL
(
π_c⁄d_waô_timed
);

2223 
EXPORT_SYMBOL
(
π_ty≥d_rwl_öô
);

2224 
EXPORT_SYMBOL
(
π_rwl_dñëe
);

2225 
EXPORT_SYMBOL
(
π_rwl_rdlock
);

2226 
EXPORT_SYMBOL
(
π_rwl_rdlock_if
);

2227 
EXPORT_SYMBOL
(
π_rwl_rdlock_u¡û
);

2228 
EXPORT_SYMBOL
(
π_rwl_rdlock_timed
);

2229 
EXPORT_SYMBOL
(
π_rwl_wæock
);

2230 
EXPORT_SYMBOL
(
π_rwl_wæock_if
);

2231 
EXPORT_SYMBOL
(
π_rwl_wæock_u¡û
);

2232 
EXPORT_SYMBOL
(
π_rwl_wæock_timed
);

2233 
EXPORT_SYMBOL
(
π_rwl_u∆ock
);

2234 
EXPORT_SYMBOL
(
_π_«med_rwl_öô
);

2235 
EXPORT_SYMBOL
(
π_«med_rwl_dñëe
);

2237 
EXPORT_SYMBOL
(
π_•l_öô
);

2238 
EXPORT_SYMBOL
(
π_•l_dñëe
);

2239 
EXPORT_SYMBOL
(
π_•l_lock
);

2240 
EXPORT_SYMBOL
(
π_•l_lock_if
);

2241 
EXPORT_SYMBOL
(
π_•l_lock_timed
);

2242 
EXPORT_SYMBOL
(
π_•l_u∆ock
);

2243 
EXPORT_SYMBOL
(
_π_«med_•l_öô
);

2244 
EXPORT_SYMBOL
(
π_«med_•l_dñëe
);

	@/usr/src/rtai/base/ipc/shm/kvmem.c

17 
	~<löux/¶ab.h
>

19 
	~<πai_shm.h
>

21 #i‚de‡
VM_RESERVED


22 
	#VM_RESERVED
 (
VM_DONTEXPAND
 | 
VM_DONTDUMP
)

	)

25 
__ölöe__
 
	$vm_ªm≠_∑ge_ønge
(
vm_¨ó_°ru˘
 *
vma
, 
‰om
, 
to
)

27 
vma
->
vm_Êags
 |
VM_RESERVED
;

28 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,14)

29  
	`vm_ö£π_∑ge
(
vma
, 
‰om
, 
	`vmÆloc_to_∑ge
((*)
to
));

31  
	`mm_ªm≠_∑ge_ønge
(
vma
, 
‰om
, 
	`kvút_to_∑
(
to
), 
PAGE_SIZE
, 
PAGE_SHARED
);

33 
	}
}

35 
__ölöe__
 
	$km_ªm≠_∑ge_ønge
(
vm_¨ó_°ru˘
 *
vma
, 
‰om
, 
to
, 
size
)

37 
vma
->
vm_Êags
 |
VM_RESERVED
;

38  
	`mm_ªm≠_∑ge_ønge
(
vma
, 
‰om
, 
	`vút_to_phys
((*)
to
), 
size
, 
PAGE_SHARED
);

39 
	}
}

42 *
	$rvmÆloc
(
size
)

44 *
mem
;

45 
adr
;

47 i‡((
mem
 = 
	`vmÆloc
(
size
))) {

48 
adr
 = ()
mem
;

49 
size
 > 0) {

51 
	`SëPageRe£rved
(
	`vmÆloc_to_∑ge
((*)
adr
));

52 
adr
 +
PAGE_SIZE
;

53 
size
 -
PAGE_SIZE
;

56  
mem
;

57 
	}
}

59 
	$rv‰ì
(*
mem
, 
size
)

61 
adr
;

63 i‡((
adr
 = ()
mem
)) {

64 
size
 > 0) {

66 
	`CÀ¨PageRe£rved
(
	`vmÆloc_to_∑ge
((*)
adr
));

67 
adr
 +
PAGE_SIZE
;

68 
size
 -
PAGE_SIZE
;

70 
	`v‰ì
(
mem
);

72 
	}
}

75 
	$rvmm≠
(*
mem
, 
memsize
, 
vm_¨ó_°ru˘
 *
vma
)

77 
pos
, 
size
, 
off£t
;

78 
°¨t
 = 
vma
->
vm_°¨t
;

82 i‡(
vma
->
vm_pgoff
 > (~0UL >> 
PAGE_SHIFT
)) {

83  -
EFAULT
;

85 
off£t
 = 
vma
->
vm_pgoff
 << 
PAGE_SHIFT
;

86 
size
 = 
vma
->
vm_íd
 - 
°¨t
;

87 i‡((
size
 + 
off£t
Ë> 
memsize
) {

88  -
EFAULT
;

90 
pos
 = ()
mem
 + 
off£t
;

91 i‡(
pos
%
PAGE_SIZE
 || 
°¨t
%PAGE_SIZE || 
size
%PAGE_SIZE) {

92  -
EFAULT
;

94 
size
 > 0) {

96 i‡(
	`vm_ªm≠_∑ge_ønge
(
vma
, 
°¨t
, 
pos
)) {

97  -
EAGAIN
;

99 
°¨t
 +
PAGE_SIZE
;

100 
pos
 +
PAGE_SIZE
;

101 
size
 -
PAGE_SIZE
;

104 
	}
}

107 *
	$rkmÆloc
(*
msize
, 
su¥t
)

109 
mem
, 
adr
, 
size
;

111 i‡(*
msize
 <
KMALLOC_LIMIT
) {

112 
mem
 = ()
	`kmÆloc
(*
msize
, 
su¥t
);

114 
mem
 = ()
	`__gë_‰ì_∑ges
(
su¥t
, 
	`gë_‹dî
(*
msize
));

116 i‡(
mem
) {

117 
adr
 = 
	`PAGE_ALIGN
(
mem
);

118 
size
 = *
msize
 -(
adr
 - 
mem
);

119 
size
 > 0) {

121 
	`SëPageRe£rved
(
	`vút_to_∑ge
(
adr
));

122 
adr
 +
PAGE_SIZE
;

123 
size
 -
PAGE_SIZE
;

126  (*)
mem
;

127 
	}
}

129 
	$rk‰ì
(*
mem
, 
size
)

131 
adr
;

133 i‡((
adr
 = ()
mem
)) {

134 
sz
 = 
size
;

135 
adr
 = 
	`PAGE_ALIGN
(()
mem
);

136 
size
 > 0) {

138 
	`CÀ¨PageRe£rved
(
	`vút_to_∑ge
(
adr
));

139 
adr
 +
PAGE_SIZE
;

140 
size
 -
PAGE_SIZE
;

142 i‡(
sz
 <
KMALLOC_LIMIT
) {

143 
	`k‰ì
(
mem
);

145 
	`‰ì_∑ges
(()
mem
, 
	`gë_‹dî
(
sz
));

148 
	}
}

151 
	$rkmm≠
(*
mem
, 
memsize
, 
vm_¨ó_°ru˘
 *
vma
)

153 
pos
, 
size
, 
off£t
;

154 
°¨t
 = 
vma
->
vm_°¨t
;

158 i‡(
vma
->
vm_pgoff
 > (~0UL >> 
PAGE_SHIFT
)) {

159  -
EFAULT
;

161 
off£t
 = 
vma
->
vm_pgoff
 << 
PAGE_SHIFT
;

162 
size
 = 
vma
->
vm_íd
 - 
°¨t
;

163 i‡((
size
 + 
off£t
Ë> 
memsize
) {

164  -
EFAULT
;

166 
pos
 = ()
mem
 + 
off£t
;

167 i‡(
pos
%
PAGE_SIZE
 || 
°¨t
%PAGE_SIZE || 
size
%PAGE_SIZE) {

168  -
EFAULT
;

171 i‡(
	`km_ªm≠_∑ge_ønge
(
vma
, 
°¨t
, 
pos
, 
size
)) {

172  -
EAGAIN
;

175 
	}
}

	@/usr/src/rtai/base/ipc/shm/rtai_shm.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

22 { 0xbd692b47, 
__VMLINUX_SYMBOL_STR
(
max_¶Ÿs
) },

23 { 0xd6ì688f, 
__VMLINUX_SYMBOL_STR
(
vmÆloc
) },

24 { 0x4cb8a0a2, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp_size
) },

25 { 0x352a661c, 
__VMLINUX_SYMBOL_STR
(
π_drg_⁄_«me_˙t
) },

26 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

27 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

28 { 0x7c40802e, 
__VMLINUX_SYMBOL_STR
(
π_gë_ty≥
) },

29 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

30 { 0x5a23f0´, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr_˙t
) },

31 { 0x10067de1, 
__VMLINUX_SYMBOL_STR
(
misc_ªgi°î
) },

32 { 0xe6ddbf5c, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp_adr
) },

33 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

34 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

35 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

36 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

37 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

38 { 0x4c9d28b0, 
__VMLINUX_SYMBOL_STR
(
phys_ba£
) },

39 { 0xc340„de, 
__VMLINUX_SYMBOL_STR
(
πhóp_öô
) },

40 { 0xade90a55, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr
) },

41 { 0x925c3dd2, 
__VMLINUX_SYMBOL_STR
(
vm_ö£π_∑ge
) },

42 { 0xfb7745bb, 
__VMLINUX_SYMBOL_STR
(
π_gë_«me
) },

43 { 0xf1dd92a8, 
__VMLINUX_SYMBOL_STR
(
π_¥ötk
) },

44 { 0x93fˇ811, 
__VMLINUX_SYMBOL_STR
(
__gë_‰ì_∑ges
) },

45 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

46 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

47 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

48 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

49 { 0x4302d0eb, 
__VMLINUX_SYMBOL_STR
(
‰ì_∑ges
) },

50 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

51 { 0x92b4115e, 
__VMLINUX_SYMBOL_STR
(
π_smp_cuºít
) },

52 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

53 { 0x2a46c1a8, 
__VMLINUX_SYMBOL_STR
(
ªm≠_p‚_ønge
) },

54 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

55 { 0xfda83159, 
__VMLINUX_SYMBOL_STR
(
π_gë_ªgi°ry_¶Ÿ
) },

56 { 0xe70f28b6, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î
) },

57 { 0x58a9c8de, 
__VMLINUX_SYMBOL_STR
(
vmÆloc_to_∑ge
) },

58 { 0x50a80ó4, 
__VMLINUX_SYMBOL_STR
(
misc_dîegi°î
) },

61 c⁄° 
	g__moduÀ_dïíds
[]

62 
__u£d


63 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

67 
MODULE_INFO
(
§cvîsi⁄
, "BAA40FCB265B55F9099877A");

	@/usr/src/rtai/base/ipc/shm/shm.c

32 
	#RTAI_SHM_MISC_MINOR
 254

33 

	)

34 
	~<löux/vîsi⁄.h
>

35 
	~<löux/moduÀ.h
>

36 
	~<löux/î∫o.h
>

37 
	~<löux/fs.h
>

38 
	~<löux/mm.h
>

39 
	~<löux/miscdevi˚.h
>

41 
	~<πai_åa˚.h
>

42 
	~<πai_schedc‹e.h
>

43 
	~<πai_ªgi°ry.h
>

44 
	~"πai_shm.h
"

46 
MODULE_LICENSE
("GPL");

48 
	#ALIGN2PAGE
(
adr
Ë((*)
	`PAGE_ALIGN
((Ôdr))

	)

49 
	#RT_SHM_OP_PERM
(Ë(!(
	`_π_whﬂmi
()->
is_h¨d
))

	)

51 
	gSUPRT
[] = { 0, 
GFP_KERNEL
, 
GFP_ATOMIC
, 
GFP_DMA
 };

53 
ölöe
 *
	$_π_shm_Æloc
(
«me
, 
size
, 
su¥t
)

55 *
adr
;

58 i‡(!(
adr
 = 
	`π_gë_adr_˙t
(
«me
)Ë&& 
size
 > 0 && 
su¥t
 >0 && 
	`RT_SHM_OP_PERM
()) {

59 
size
 = ((sizê- 1Ë& 
PAGE_MASK
Ë+ 
PAGE_SIZE
;

60 i‡((
adr
 = 
su¥t
 ? 
	`rkmÆloc
(&
size
, 
SUPRT
[su¥t]Ë: 
	`rvmÆloc
(size))) {

61 i‡(!
	`π_ªgi°î
(
«me
, 
adr
, 
su¥t
 ? -
size
 : size, 0)) {

62 i‡(
su¥t
) {

63 
	`rk‰ì
(
adr
, 
size
);

65 
	`rv‰ì
(
adr
, 
size
);

69 
	`mem£t
(
	`ALIGN2PAGE
(
adr
), 0, 
size
);

72  
	`ALIGN2PAGE
(
adr
);

73 
	}
}

75 
ölöe
 
	$_π_shm_‰ì
(
«me
, 
size
)

77 *
adr
;

79 i‡(
size
 && (
adr
 = 
	`π_gë_adr
(
«me
))) {

80 i‡(
	`RT_SHM_OP_PERM
()) {

81 i‡(!
	`π_drg_⁄_«me_˙t
(
«me
Ë&&Çamê!
GLOBAL_HEAP_ID
) {

82 i‡(
size
 < 0) {

83 
	`rk‰ì
(
adr
, -
size
);

85 
	`rv‰ì
(
adr
, 
size
);

89  
	`abs
(
size
);

92 
	}
}

130 *
	$π_shm_Æloc
(
«me
, 
size
, 
su¥t
)

132 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_KMALLOC
, 
«me
, 
size
, 0);

133  
	`_π_shm_Æloc
(
«me
, 
size
, 
su¥t
);

134 
	}
}

136 
RTAI_SYSCALL_MODE
 
	$π_shm_Æloc_u•
(
«me
, 
size
, 
su¥t
)

138 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_MALLOC
, 
«me
, 
size
, 
cuºít
->
pid
);

140 i‡(
	`_π_shm_Æloc
(
«me
, 
size
, 
su¥t
)) {

141 
cuºít
->
	`πai_tskext
(
TSKEXT1
Ë(*)
«me
;

142  
	`abs
(
	`π_gë_ty≥
(
«me
));

145 
	}
}

167 
RTAI_SYSCALL_MODE
 
	$π_shm_‰ì
(
«me
)

169 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_KFREE
, 
«me
, 0, 0);

170  
	`_π_shm_‰ì
(
«me
, 
	`π_gë_ty≥
(name));

171 
	}
}

173 
RTAI_SYSCALL_MODE
 
	$π_shm_size
(*
¨g
)

175 
size
;

176 
vm_¨ó_°ru˘
 *
vma
;

178 
size
 = 
	`abs
(
	`π_gë_ty≥
(*
¨g
));

179 
vma
 = (
cuºít
->
mm
)->
mm≠
; vma; vm®vma->
vm_√xt
) {

180 i‡(
vma
->
vm_¥iv©e_d©a
 =(*)*
¨g
 && (vma->
vm_íd
 - vma->
vm_°¨t
Ë=
size
) {

181 *
¨g
 = 
vma
->
vm_°¨t
;

182  
size
;

186 
	}
}

188 
	$πai_shm_vm_›í
(
vm_¨ó_°ru˘
 *
vma
)

190 
	`π_gë_adr_˙t
(()
vma
->
vm_¥iv©e_d©a
);

191 
	}
}

193 
	$πai_shm_vm_˛o£
(
vm_¨ó_°ru˘
 *
vma
)

195 
	`_π_shm_‰ì
(()
vma
->
vm_¥iv©e_d©a
, 
	`π_gë_ty≥
(()vma->vm_private_data));

196 
	}
}

198 
vm_›î©i⁄s_°ru˘
 
	gπai_shm_vm_›s
 = {

199 
›í
: 
πai_shm_vm_›í
,

200 
˛o£
: 
πai_shm_vm_˛o£


203 #ifde‡
CONFIG_RTAI_MALLOC


204 
RTAI_SYSCALL_MODE
 
π_£t_hóp
(, *);

207 #ifde‡
HAVE_UNLOCKED_IOCTL


208 
	$πai_shm_f_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

210 
	$πai_shm_f_io˘l
(
öode
 *öode, 
fûe
 *fûe, 
cmd
, 
¨g
)

213 
cmd
) {

214 
SHM_ALLOC
: {

215 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_MALLOC
, ((*)
¨g
)[0], 
cmd
, 
cuºít
->
pid
);

216  
	`π_shm_Æloc_u•
(((*)
¨g
)[0], ((*)arg)[1], ((*)arg)[2]);

218 
SHM_FREE
: {

219 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_FREE
, 
¨g
, 
cmd
, 
cuºít
->
pid
);

220  
	`_π_shm_‰ì
(
¨g
, 
	`π_gë_ty≥
(arg));

222 
SHM_SIZE
: {

223 
	`TRACE_RTAI_SHM
(
TRACE_RTAI_EV_SHM_GET_SIZE
, 
¨g
, 
cmd
, 
cuºít
->
pid
);

224  
	`π_shm_size
((*)((*)
¨g
)[0]);

226 #ifde‡
CONFIG_RTAI_MALLOC


227 
HEAP_SET
: {

228 
	`π_£t_hóp
(((*)
¨g
)[0], (*)((*)arg)[1]);

234 
	}
}

236 
	$πai_shm_f_mm≠
(
fûe
 *fûe, 
vm_¨ó_°ru˘
 *
vma
)

238 
«me
;

239 
size
;

240 i‡(!
vma
->
vm_›s
) {

241 
vma
->
vm_›s
 = &
πai_shm_vm_›s
;

242 
vma
->
vm_Êags
 |
VM_LOCKED
;

243 
«me
 = ()(
vma
->
vm_¥iv©e_d©a
 = 
cuºít
->
	`πai_tskext
(
TSKEXT1
));

244 
cuºít
->
	`πai_tskext
(
TSKEXT1
Ëcuºít->πai_tskext(
TSKEXT0
Ë? cuºíà: 
NULL
;

245  (
size
 = 
	`π_gë_ty≥
(
«me
)Ë< 0 ? 
	`rkmm≠
(
	`ALIGN2PAGE
(
	`π_gë_adr
“ame)), -size, 
vma
Ë: 
	`rvmm≠
(rt_get_adr(name), size, vma);

247  -
EFAULT
;

248 
	}
}

250 
fûe_›î©i⁄s
 
	gπai_shm_f›s
 = {

251 #ifde‡
HAVE_UNLOCKED_IOCTL


252 
u∆ocked_io˘l
: 
πai_shm_f_io˘l
,

254 
io˘l
: 
πai_shm_f_io˘l
,

256 
mm≠
: 
πai_shm_f_mm≠


259 
miscdevi˚
 
	gπai_shm_dev
 =

260 { 
RTAI_SHM_MISC_MINOR
, "πai_shm", &
πai_shm_f›s
 };

262 #ifde‡
CONFIG_RTAI_MALLOC


264 
ölöe
 *
	$_π_hÆloc
(
size
, 
π_hóp_t
 *
hóp
)

266 *
mem_±r
 = 
NULL
;

268 i‡((
mem_±r
 = 
	`πhóp_Æloc
(
hóp
->hóp, 
size
, 0))) {

269 
mem_±r
 = 
hóp
->
uadr
 + (mem_±∏- hóp->
kadr
);

271  
mem_±r
;

272 
	}
}

274 
ölöe
 
	$_π_h‰ì
(*
addr
, 
π_hóp_t
 *
hóp
)

276 
	`πhóp_‰ì
(
hóp
->hóp, hóp->
kadr
 + (
addr
 - hóp->
uadr
));

277 
	}
}

279 
	#GLOBAL
 0

	)

280 
	#SPECIFIC
 1

	)

338 *
	$π_«med_mÆloc
(
«me
, 
size
)

340 *
mem_±r
;

342 i‡((
mem_±r
 = 
	`π_gë_adr_˙t
(
«me
))) {

343  
mem_±r
;

345 i‡((
mem_±r
 = 
	`_π_hÆloc
(
size
, &
π_smp_löux_èsk
->
hóp
[
GLOBAL
]))) {

346 i‡(
	`π_ªgi°î
(
«me
, 
mem_±r
, 
IS_HPCK
, 0)) {

347  
mem_±r
;

349 
	`π_h‰ì
(
mem_±r
);

351  
NULL
;

352 
	}
}

373 
	$π_«med_‰ì
(*
adr
)

375 
«me
;

377 
«me
 = 
	`π_gë_«me
(
adr
);

378 i‡(!
	`π_drg_⁄_«me_˙t
(
«me
)) {

379 
	`_π_h‰ì
(
adr
, &
π_smp_löux_èsk
->
hóp
[
GLOBAL
]);

381 
	}
}

387 
	#RTAI_TASK
(
ªtu∫_ö°r
) \

389 i‡(!(
èsk
 = 
	`_π_whﬂmi
())->
is_h¨d
) { \

390 i‡(!(
èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
))) { \

391 
ªtu∫_ö°r
; \

394 } 0)

	)

396 
ölöe
 *
	$π_hÆloc_ty≥d
(
size
, 
hty≥
)

398 
RT_TASK
 *
èsk
;

400 
	`RTAI_TASK
( 
NULL
);

401  
	`_π_hÆloc
(
size
, &
èsk
->
hóp
[
hty≥
]);

402 
	}
}

404 
ölöe
 
	$π_h‰ì_ty≥d
(*
addr
, 
hty≥
)

406 
RT_TASK
 *
èsk
;

408 
	`RTAI_TASK
();

409 
	`_π_h‰ì
(
addr
, &
èsk
->
hóp
[
hty≥
]);

410 
	}
}

412 
ölöe
 *
	$π_«med_hÆloc_ty≥d
(
«me
, 
size
, 
hty≥
)

414 
RT_TASK
 *
èsk
;

415 *
mem_±r
;

417 
	`RTAI_TASK
( 
NULL
);

418 i‡((
mem_±r
 = 
	`π_gë_adr_˙t
(
«me
))) {

419  
èsk
->
hóp
[
hty≥
].
uadr
 + (
mem_±r
 -Åask->hóp[hty≥].
kadr
);

421 i‡((
mem_±r
 = 
	`_π_hÆloc
(
size
, &
èsk
->
hóp
[
hty≥
]))) {

422 i‡(
	`π_ªgi°î
(
«me
, 
èsk
->
hóp
[
hty≥
].
kadr
 + (
mem_±r
 -Åask->hóp[hty≥].
uadr
), 
IS_HPCK
, 0)) {

423  
mem_±r
;

425 
	`_π_h‰ì
(
mem_±r
, &
èsk
->
hóp
[
hty≥
]);

427  
NULL
;

428 
	}
}

430 
ölöe
 
	$π_«med_h‰ì_ty≥d
(*
adr
, 
hty≥
)

432 
RT_TASK
 *
èsk
;

433 
«me
;

435 
	`RTAI_TASK
();

436 
«me
 = 
	`π_gë_«me
(
èsk
->
hóp
[
hty≥
].
kadr
 + (
adr
 -Åask->hóp[hty≥].
uadr
));

437 i‡(!
	`π_drg_⁄_«me_˙t
(
«me
)) {

438 
	`_π_h‰ì
(
adr
, &
èsk
->
hóp
[
hty≥
]);

440 
	}
}

462 
RTAI_SYSCALL_MODE
 *
	$π_hÆloc
(
size
)

464  
	`π_hÆloc_ty≥d
(
size
, 
SPECIFIC
);

465 
	}
}

479 
RTAI_SYSCALL_MODE
 
	$π_h‰ì
(*
adr
)

481 
	`π_h‰ì_ty≥d
(
adr
, 
SPECIFIC
);

482 
	}
}

515 
RTAI_SYSCALL_MODE
 *
	$π_«med_hÆloc
(
«me
, 
size
)

517  
	`π_«med_hÆloc_ty≥d
(
«me
, 
size
, 
SPECIFIC
);

518 
	}
}

539 
RTAI_SYSCALL_MODE
 
	$π_«med_h‰ì
(*
adr
)

541 
	`π_«med_h‰ì_ty≥d
(
adr
, 
SPECIFIC
);

542 
	}
}

544 
πhóp_t
 
πai_globÆ_hóp
;

545 *
πai_globÆ_hóp_adr
;

546 
πai_globÆ_hóp_size
;

548 
RTAI_SYSCALL_MODE
 *
	$π_mÆloc_u•
(
size
)

550  
πai_globÆ_hóp_adr
 ? 
	`π_hÆloc_ty≥d
(
size
, 
GLOBAL
Ë: 
NULL
;

551 
	}
}

553 
RTAI_SYSCALL_MODE
 
	$π_‰ì_u•
(*
adr
)

555 i‡(
πai_globÆ_hóp_adr
) {

556 
	`π_h‰ì_ty≥d
(
adr
, 
GLOBAL
);

558 
	}
}

560 
RTAI_SYSCALL_MODE
 *
	$π_«med_mÆloc_u•
(
«me
, 
size
)

562  
πai_globÆ_hóp_adr
 ? 
	`π_«med_hÆloc_ty≥d
(
«me
, 
size
, 
GLOBAL
Ë: 
NULL
;

563 
	}
}

565 
RTAI_SYSCALL_MODE
 
	$π_«med_‰ì_u•
(*
adr
)

567 i‡(
πai_globÆ_hóp_adr
) {

568 
	`π_«med_h‰ì_ty≥d
(
adr
, 
GLOBAL
);

570 
	}
}

572 
RTAI_SYSCALL_MODE
 
	$π_£t_hóp
(
«me
, *
adr
)

574 *
hóp
, *
h±r
;

575 
size
;

576 
RT_TASK
 *
èsk
;

578 
hóp
 = 
	`π_gë_adr
(
«me
);

579 
h±r
 = 
	`ALIGN2PAGE
(
hóp
);

580 
size
 = ((
	`abs
(
	`π_gë_ty≥
(
«me
)Ë- (
πhóp_t
Ë- (
h±r
 - 
hóp
)Ë& 
PAGE_MASK
);

581 
hóp
 = 
h±r
 + 
size
;

582 i‡(!
	`©omic_cmpxchg
((
©omic_t
 *)
h±r
, 0, 
«me
)) {

583 
	`πhóp_öô
(
hóp
, 
h±r
, 
size
, 
PAGE_SIZE
, 0);

585 
	`RTAI_TASK
();

586 i‡(
«me
 =
GLOBAL_HEAP_ID
) {

587 
èsk
->
hóp
[
GLOBAL
].hó∞&
πai_globÆ_hóp
;

588 
èsk
->
hóp
[
GLOBAL
].
kadr
 = 
πai_globÆ_hóp_adr
;

589 
èsk
->
hóp
[
GLOBAL
].
uadr
 = 
adr
;

591 
èsk
->
hóp
[
SPECIFIC
].heap = heap;

592 
èsk
->
hóp
[
SPECIFIC
].
kadr
 = 
h±r
;

593 
èsk
->
hóp
[
SPECIFIC
].
uadr
 = 
adr
;

595 
	}
}

632 *
	$π_hóp_›í
(
«me
, 
size
, 
su¥t
)

634 *
adr
;

635 i‡((
adr
 = 
	`π_shm_Æloc
(
«me
, ((
size
 - 1Ë& 
PAGE_MASK
Ë+ 
PAGE_SIZE
 + (
πhóp_t
), 
su¥t
))) {

636 
	`π_£t_hóp
(
«me
, 
adr
);

637  
adr
;

640 
	}
}

644 
π_«tive_fun_íåy
 
	gπ_shm_íåõs
[] = {

645 { { 0, 
π_shm_Æloc_u•
 }, 
SHM_ALLOC
 },

646 { { 0, 
π_shm_‰ì
 }, 
SHM_FREE
 },

647 { { 0, 
π_shm_size
 }, 
SHM_SIZE
 },

648 #ifde‡
CONFIG_RTAI_MALLOC


649 { { 0, 
π_£t_hóp
 }, 
HEAP_SET
},

650 { { 0, 
π_hÆloc
 }, 
HEAP_ALLOC
 },

651 { { 0, 
π_h‰ì
 }, 
HEAP_FREE
 },

652 { { 0, 
π_«med_hÆloc
 }, 
HEAP_NAMED_ALLOC
 },

653 { { 0, 
π_«med_h‰ì
 }, 
HEAP_NAMED_FREE
 },

654 { { 0, 
π_mÆloc_u•
 }, 
MALLOC
 },

655 { { 0, 
π_‰ì_u•
 }, 
FREE
 },

656 { { 0, 
π_«med_mÆloc_u•
 }, 
NAMED_MALLOC
 },

657 { { 0, 
π_«med_‰ì_u•
 }, 
NAMED_FREE
 },

662 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

663 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

665 
	#USE_UDEV_CLASS
 0

	)

667 #i‡
USE_UDEV_CLASS


668 
˛ass_t
 *
	gshm_˛ass
 = 
NULL
;

671 
	$__πai_shm_öô
 ()

673 #i‡
USE_UDEV_CLASS


674 i‡((
shm_˛ass
 = 
	`˛ass_¸óã
(
THIS_MODULE
, "πai_shm")Ë=
NULL
) {

675 
	`¥ötk
("RTAI-SHM: cannot create class.\n");

676  -
EBUSY
;

678 i‡(
	`CLASS_DEVICE_CREATE
(
shm_˛ass
, 
	`MKDEV
(
MISC_MAJOR
, 
RTAI_SHM_MISC_MINOR
), 
NULL
, "rtai_shm") == NULL) {

679 
	`¥ötk
("RTAI-SHM: cannotáttach class.\n");

680 
	`˛ass_de°roy
(
shm_˛ass
);

681  -
EBUSY
;

685 i‡(
	`misc_ªgi°î
(&
πai_shm_dev
) < 0) {

686 
	`¥ötk
("***** UNABLE TO REGISTER THE SHARED MEMORY DEVICE (miscdev mö‹: %dË*****\n", 
RTAI_SHM_MISC_MINOR
);

687  -
EBUSY
;

689 #ifde‡
CONFIG_RTAI_MALLOC


690 #ifde‡
CONFIG_RTAI_MALLOC_VMALLOC


691 
	`π_ªgi°î
(
GLOBAL_HEAP_ID
, 
πai_globÆ_hóp_adr
, 
πai_globÆ_hóp_size
, 0);

692 
π_smp_löux_èsk
->
hóp
[
GLOBAL
].hó∞&
πai_globÆ_hóp
;

693 
π_smp_löux_èsk
->
hóp
[
GLOBAL
].
kadr
 =

694 
π_smp_löux_èsk
->
hóp
[
GLOBAL
].
uadr
 = 
πai_globÆ_hóp_adr
;

696 
	`¥ötk
("***** WARNING: GLOBAL HEAP NEITHER SHARABLE NOR USABLE FROM USER SPACE (useÅhe vmalloc option for RTAI malloc) *****\n");

699  
	`£t_π_fun_íåõs
(
π_shm_íåõs
);

700 
	}
}

702 
	$__πai_shm_exô
 ()

704 
max_¶Ÿs
;

705 
¶Ÿ
;

706 
π_ªgi°ry_íåy
 
íåy
;

708 #ifde‡
CONFIG_RTAI_MALLOC_VMALLOC


709 
	`π_drg_⁄_«me_˙t
(
GLOBAL_HEAP_ID
);

711 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

712 i‡(
	`π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, &
íåy
)) {

713 i‡(
	`abs
(
íåy
.
ty≥
Ë>
PAGE_SIZE
) {

714 
«me
[8];

715 
	`_π_shm_‰ì
(
íåy
.
«me
,É¡ry.
ty≥
));

716 
	`num2«m
(
íåy
.
«me
,Çame);

717 
	`π_¥ötk
("\nSHM_CLEANUP_MODULEÑñó£s: '%s':0x%lx:%lu (%d).\n", 
«me
, 
íåy
.«me,É¡ry.«me,É¡ry.
ty≥
);

721 
	`ª£t_π_fun_íåõs
(
π_shm_íåõs
);

722 
	`misc_dîegi°î
(&
πai_shm_dev
);

723 #i‡
USE_UDEV_CLASS


724 
	`˛ass_devi˚_de°roy
(
shm_˛ass
, 
	`MKDEV
(
MISC_MAJOR
, 
RTAI_SHM_MISC_MINOR
));

725 
	`˛ass_de°roy
(
shm_˛ass
);

728 
	}
}

732 #i‚de‡
CONFIG_RTAI_SHM_BUILTIN


733 
moduÀ_öô
(
__πai_shm_öô
);

734 
moduÀ_exô
(
__πai_shm_exô
);

737 #ifde‡
CONFIG_KBUILD


738 
EXPORT_SYMBOL
(
π_shm_Æloc
);

739 
EXPORT_SYMBOL
(
π_shm_‰ì
);

740 #ifde‡
CONFIG_RTAI_MALLOC


741 
EXPORT_SYMBOL
(
π_«med_mÆloc
);

742 
EXPORT_SYMBOL
(
π_«med_‰ì
);

743 
EXPORT_SYMBOL
(
π_hÆloc
);

744 
EXPORT_SYMBOL
(
π_h‰ì
);

745 
EXPORT_SYMBOL
(
π_«med_hÆloc
);

746 
EXPORT_SYMBOL
(
π_«med_h‰ì
);

747 
EXPORT_SYMBOL
(
π_hóp_›í
);

	@/usr/src/rtai/base/ipc/tbx/rtai_tbx.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa1768906, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô
) },

22 { 0xØc1311b, 
__VMLINUX_SYMBOL_STR
(
π_£m_dñëe
) },

23 { 0xb91c32d2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_íåõs
) },

24 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

25 { 0x5a23f0´, 
__VMLINUX_SYMBOL_STR
(
π_gë_adr_˙t
) },

26 { 0xcdbfc52b, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_if
) },

27 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

28 { 0x809da33f, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_íåõs
) },

29 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

30 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

31 { 0x1b˚b0ba, 
__VMLINUX_SYMBOL_STR
(
π_£m_sig«l
) },

32 { 0x37ab9a71, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_b¨rõr
) },

33 { 0x592d73ˇ, 
__VMLINUX_SYMBOL_STR
(
π_drg_⁄_adr_˙t
) },

34 { 0xc4723f52, 
__VMLINUX_SYMBOL_STR
(
π_£m_waô_u¡û
) },

35 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

36 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

37 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

38 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

39 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

40 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

41 { 0xe70f28b6, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î
) },

42 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

43 { 0x5c˚6be5, 
__VMLINUX_SYMBOL_STR
(
π_ty≥d_£m_öô
) },

46 c⁄° 
	g__moduÀ_dïíds
[]

47 
__u£d


48 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

52 
MODULE_INFO
(
§cvîsi⁄
, "A5372D883564B5C5A98F726");

	@/usr/src/rtai/base/ipc/tbx/tbx.c

21 
	~<löux/moduÀ.h
>

22 
	~<löux/kî√l.h
>

23 
	~<löux/î∫o.h
>

24 
	~<asm/uac˚ss.h
>

26 
	~<πai_ªgi°ry.h
>

27 
	~<πai_schedc‹e.h
>

28 
	~<πai_tbx.h
>

30 
MODULE_LICENSE
("GPL");

32 
ölöe
 
	$íq_msg
(
RT_MSGQ
 *
q
, 
RT_MSGH
 *
msg
)

34 
RT_MSGH
 *
¥ev
, *
√xt
;

36 
¥ev
 = 
√xt
 = 
q
->
fú°msg
; 
msg
->
¥i‹ôy
 >=Çext->priority;Örev =Çext,Çext =Çext->next);

37 i‡(
√xt
 =
¥ev
) {

38 
msg
->
√xt
 =Çext;

39 
q
->
fú°msg
 = 
msg
;

41 
msg
->
√xt
 = 
¥ev
->next;

42 
¥ev
->
√xt
 = 
msg
;

44 
	}
}

46 
RTAI_SYSCALL_MODE
 
	$π_msgq_öô
(
RT_MSGQ
 *
mq
, 
nmsg
, 
msg_size
)

48 
i
;

49 *
p
;

51 i‡(!(
mq
->
¶Ÿs
 = 
	`π_mÆloc
((
msg_size
 + 
RT_MSGH_SIZE
 + (*))*
nmsg
 + RT_MSGH_SIZE))) {

52  -
ENOMEM
;

54 
mq
->
nmsg
 =Çmsg;

55 
mq
->
Á°size
 = 
msg_size
;

56 
mq
->
¶Ÿ
 = 0;

57 
p
 = 
mq
->
¶Ÿs
 + 
nmsg
;

58 
i
 = 0; i < 
nmsg
; i++) {

59 
mq
->
¶Ÿs
[
i
] = 
p
;

60 ((
RT_MSGH
 *)
p
)->
¥i‹ôy
 = 0;

61 
p
 +(
msg_size
 + 
RT_MSGH_SIZE
);

63 ((
RT_MSGH
 *)(
mq
->
fú°msg
 = 
p
))->
¥i‹ôy
 = (0xFFFFFFFF/2);

64 
	`π_ty≥d_£m_öô
(&
mq
->
ª˚ivîs
, 1, 
RES_SEM
);

65 
	`π_ty≥d_£m_öô
(&
mq
->
£ndîs
, 1, 
RES_SEM
);

66 
	`π_ty≥d_£m_öô
(&
mq
->
ª˚ived
, 0, 
CNT_SEM
);

67 
	`π_ty≥d_£m_öô
(&
mq
->
‰e¶Ÿs
, 
nmsg
, 
CNT_SEM
);

68 
	`•ö_lock_öô
(&
mq
->
lock
);

70 
	}
}

72 
RTAI_SYSCALL_MODE
 
	$π_msgq_dñëe
(
RT_MSGQ
 *
mq
)

74 
îr
;

75 
îr
 = 
	`π_£m_dñëe
(&
mq
->
ª˚ivîs
Ë||Ñt_£m_dñëe(&mq->
£ndîs
Ë||Ñt_£m_dñëe(&mq->
ª˚ived
Ë||Ñt_£m_dñëe(&mq->
‰e¶Ÿs
);

76 
	`π_£m_dñëe
(&
mq
->
brﬂdˇ°
);

77 
	`π_‰ì
(
mq
->
¶Ÿs
);

78  
îr
 ? -
EFAULT
 : 0;

79 
	}
}

81 
RTAI_SYSCALL_MODE
 
RT_MSGQ
 *
	$_π_«med_msgq_öô
(
msgq_«me
, 
nmsg
, 
msg_size
)

83 
RT_MSGQ
 *
msgq
;

85 i‡((
msgq
 = 
	`π_gë_adr_˙t
(
msgq_«me
))) {

86  
msgq
;

88 i‡((
msgq
 = 
	`π_mÆloc
((
RT_MSGQ
)))) {

89 
	`π_msgq_öô
(
msgq
, 
nmsg
, 
msg_size
);

90 i‡(
	`π_ªgi°î
(
msgq_«me
, 
msgq
, 
IS_MBX
, 0)) {

91  
msgq
;

93 
	`π_msgq_dñëe
(
msgq
);

95 
	`π_‰ì
(
msgq
);

96  
NULL
;

97 
	}
}

99 
RTAI_SYSCALL_MODE
 
	$π_«med_msgq_dñëe
(
RT_MSGQ
 *
msgq
)

101 
ªt
;

102 i‡(!(
ªt
 = 
	`π_drg_⁄_adr_˙t
(
msgq
))) {

103 i‡(!
	`π_msgq_dñëe
(
msgq
)) {

104 
	`π_‰ì
(
msgq
);

107  -
EFAULT
;

110  
ªt
;

111 
	}
}

113 
	$_£nd
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
)

115 
Êags
;

116 
RT_MSG
 *
msg_±r
;

117 *
p
;

119 i‡(
msg_size
 > 
mq
->
Á°size
) {

120 i‡(!(
p
 = 
	`π_mÆloc
(
msg_size
))) {

121 
	`π_£m_sig«l
(&
mq
->
‰e¶Ÿs
);

122 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

123  -
ENOMEM
;

126 
p
 = 
NULL
;

128 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mq
->
lock
);

129 
msg_±r
 = 
mq
->
¶Ÿs
[mq->
¶Ÿ
++];

130 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mq
->
lock
);

131 
msg_±r
->
hdr
.
size
 = 
msg_size
;

132 
msg_±r
->
hdr
.
¥i‹ôy
 = 
msg¥i
;

133 
msg_±r
->
hdr
.
mÆloc
 = 
p
;

134 
msg_±r
->
hdr
.
brﬂdˇ°
 = 0;

135 i‡(
•a˚
) {

136 
	`mem˝y
(
p
 ?Ö : 
msg_±r
->
msg
, msg, 
msg_size
);

138 
	`π_c›y_‰om_u£r
(
p
 ?Ö : 
msg_±r
->
msg
, msg, 
msg_size
);

140 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mq
->
lock
);

141 
	`íq_msg
(
mq
, &
msg_±r
->
hdr
);

142 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mq
->
lock
);

143 
	`π_£m_sig«l
(&
mq
->
ª˚ived
);

144 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

146 
	}
}

148 
	#TBX_RET
(
msg_size
, 
ªtvÆ
) \

149 (
CONFIG_RTAI_USE_NEWERR
 ? 
ªtvÆ
 : 
msg_size
)

	)

151 
RTAI_SYSCALL_MODE
 
	$_π_msg_£nd
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
)

153 
ªtvÆ
;

155 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mq
->
£ndîs
)Ë>
RTE_LOWERR
) {

156  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

158 i‡(
	`π_£m_waô
(&
mq
->
‰e¶Ÿs
Ë>
RTE_LOWERR
) {

159 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

160  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

162  
	`_£nd
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

163 
	}
}

165 
RTAI_SYSCALL_MODE
 
	$_π_msg_£nd_if
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
)

167 i‡(
	`π_£m_waô_if
(&
mq
->
£ndîs
) <= 0) {

168  
msg_size
;

170 i‡(
	`π_£m_waô_if
(&
mq
->
‰e¶Ÿs
) <= 0) {

171 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

172  
msg_size
;

174  
	`_£nd
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

175 
	}
}

177 
RTAI_SYSCALL_MODE
 
	$_π_msg_£nd_u¡û
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
)

179 
ªtvÆ
;

180 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
£ndîs
, 
u¡û
)Ë>
RTE_LOWERR
) {

181  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

183 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
‰e¶Ÿs
, 
u¡û
)Ë>
RTE_LOWERR
) {

184 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

185  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

187  
	`_£nd
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

188 
	}
}

190 
RTAI_SYSCALL_MODE
 
	$_π_msg_£nd_timed
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
)

192  
	`_π_msg_£nd_u¡û
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
	`gë_time
(Ë+ 
dñay
, 
•a˚
);

193 
	}
}

195 
	$_ª˚ive
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
)

197 
size
;

198 
RT_MSG
 *
msg_±r
;

199 *
p
;

201 
size
 = 
	`mö
((
msg_±r
 = 
mq
->
fú°msg
)->
hdr
.size, 
msg_size
);

202 i‡(
•a˚
) {

203 
	`mem˝y
(
msg
, (
p
 = 
msg_±r
->
hdr
.
mÆloc
Ë?Ö : msg_±r->msg, 
size
);

204 i‡(
msg¥i
) {

205 *
msg¥i
 = 
msg_±r
->
hdr
.
¥i‹ôy
;

208 
	`π_c›y_to_u£r
(
msg
, (
p
 = 
msg_±r
->
hdr
.
mÆloc
Ë?Ö : msg_±r->msg, 
size
);

209 i‡(
msg¥i
) {

210 
	`π_put_u£r
(
msg_±r
->
hdr
.
¥i‹ôy
, 
msg¥i
);

214 i‡(
msg_±r
->
hdr
.
brﬂdˇ°
) {

215 i‡(!--
msg_±r
->
hdr
.
brﬂdˇ°
) {

216 
	`π_£m_waô_b¨rõr
(&
mq
->
brﬂdˇ°
);

217 
ªl¶Ÿ
;

219 
	`π_£m_sig«l
(&
mq
->
ª˚ived
);

220 
	`π_£m_sig«l
(&
mq
->
ª˚ivîs
);

221 
	`π_£m_waô_b¨rõr
(&
mq
->
brﬂdˇ°
);

224 
Êags
;

225 
ªl¶Ÿ
: 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mq
->
lock
);

226 
mq
->
fú°msg
 = 
msg_±r
->
hdr
.
√xt
;

227 
mq
->
¶Ÿs
[--mq->
¶Ÿ
] = 
msg_±r
;

228 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mq
->
lock
);

229 
	`π_£m_sig«l
(&
mq
->
‰e¶Ÿs
);

230 
	`π_£m_sig«l
(&
mq
->
ª˚ivîs
);

231 i‡(
p
) {

232 
	`π_‰ì
(
p
);

235  
msg_size
 - 
size
;

236 
	}
}

238 
RTAI_SYSCALL_MODE
 
	$_π_msg_ª˚ive
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
)

240 
ªtvÆ
;

241 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mq
->
ª˚ivîs
)Ë>
RTE_LOWERR
) {

242  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

244 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mq
->
ª˚ived
)Ë>
RTE_LOWERR
) { ;

245 
	`π_£m_sig«l
(&
mq
->
ª˚ivîs
);

246  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

248  
	`_ª˚ive
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

249 
	}
}

251 
RTAI_SYSCALL_MODE
 
	$_π_msg_ª˚ive_if
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
)

253 i‡(
	`π_£m_waô_if
(&
mq
->
ª˚ivîs
) <= 0) {

254  
msg_size
;

256 i‡(
	`π_£m_waô_if
(&
mq
->
ª˚ived
) <= 0) { ;

257 
	`π_£m_sig«l
(&
mq
->
ª˚ivîs
);

258  
msg_size
;

260  
	`_ª˚ive
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

261 
	}
}

263 
RTAI_SYSCALL_MODE
 
	$_π_msg_ª˚ive_u¡û
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
)

265 
ªtvÆ
;

266 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
ª˚ivîs
, 
u¡û
)Ë>
RTE_LOWERR
) {

267  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

269 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
ª˚ived
, 
u¡û
)Ë>
RTE_LOWERR
) {

270 
	`π_£m_sig«l
(&
mq
->
ª˚ivîs
);

271  
	`TBX_RET
(
msg_size
, 
ªtvÆ
);

273  
	`_ª˚ive
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

274 
	}
}

276 
RTAI_SYSCALL_MODE
 
	$_π_msg_ª˚ive_timed
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
dñay
, 
•a˚
)

278  
	`_π_msg_ª˚ive_u¡û
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
	`gë_time
(Ë+ 
dñay
, 
•a˚
);

279 
	}
}

281 
RTAI_SYSCALL_MODE
 
	$_π_msg_evdΩ
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
)

283 
size
;

284 
RT_MSG
 *
msg_±r
;

285 *
p
;

287 
size
 = 
	`mö
((
msg_±r
 = 
mq
->
fú°msg
)->
hdr
.size, 
msg_size
);

288 i‡(
•a˚
) {

289 
	`mem˝y
(
msg
, (
p
 = 
msg_±r
->
hdr
.
mÆloc
Ë?Ö : msg_±r->msg, 
size
);

290 i‡(
msg¥i
) {

291 *
msg¥i
 = 
msg_±r
->
hdr
.
¥i‹ôy
;

294 
	`π_c›y_to_u£r
(
msg
, (
p
 = 
msg_±r
->
hdr
.
mÆloc
Ë?Ö : msg_±r->msg, 
size
);

295 i‡(
msg¥i
) {

296 
	`π_put_u£r
(
msg_±r
->
hdr
.
¥i‹ôy
, 
msg¥i
);

300 
	}
}

302 
	$_brﬂdˇ°
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
brﬂdˇ°
, 
•a˚
)

304 
Êags
;

305 
RT_MSG
 *
msg_±r
;

306 *
p
;

308 i‡(
msg_size
 > 
mq
->
Á°size
) {

309 i‡(!(
p
 = 
	`π_mÆloc
(
msg_size
))) {

310 
	`π_£m_sig«l
(&
mq
->
‰e¶Ÿs
);

311 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

312  -
ENOMEM
;

315 
p
 = 
NULL
;

317 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mq
->
lock
);

318 
msg_±r
 = 
mq
->
¶Ÿs
[mq->
¶Ÿ
++];

319 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mq
->
lock
);

320 
msg_±r
->
hdr
.
size
 = 
msg_size
;

321 
msg_±r
->
hdr
.
¥i‹ôy
 = 
msg¥i
;

322 
msg_±r
->
hdr
.
mÆloc
 = 
p
;

323 i‡(
•a˚
) {

324 
	`mem˝y
(
p
 ?Ö : 
msg_±r
->
msg
, msg, 
msg_size
);

326 
	`π_c›y_‰om_u£r
(
p
 ?Ö : 
msg_±r
->
msg
, msg, 
msg_size
);

328 
	`π_ty≥d_£m_öô
(&
mq
->
brﬂdˇ°
, brﬂdˇ° + 1, 
CNT_SEM
 | 
PRIO_Q
);

329 
msg_±r
->
hdr
.
brﬂdˇ°
 = broadcast;

330 
Êags
 = 
	`π_•ö_lock_úqßve
(&
mq
->
lock
);

331 
	`íq_msg
(
mq
, &
msg_±r
->
hdr
);

332 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
mq
->
lock
);

333 
	`π_£m_sig«l
(&
mq
->
ª˚ived
);

334 
	`π_£m_waô_b¨rõr
(&
mq
->
brﬂdˇ°
);

335 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

336  
brﬂdˇ°
;

337 
	}
}

339 
RTAI_SYSCALL_MODE
 
	$_π_msg_brﬂdˇ°
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
)

341 
ªtvÆ
;

343 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mq
->
£ndîs
)Ë>
RTE_LOWERR
) {

344  
	`TBX_RET
(0, 
ªtvÆ
);

346 i‡(
mq
->
ª˚ived
.
cou¡
 >= 0) {

347 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

350 i‡((
ªtvÆ
 = 
	`π_£m_waô
(&
mq
->
‰e¶Ÿs
)Ë>
RTE_LOWERR
) {

351 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

352  
	`TBX_RET
(0, 
ªtvÆ
);

354  
	`_brﬂdˇ°
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, -(mq->
ª˚ived
.
cou¡
 + mq->
ª˚ivîs
.cou¡), 
•a˚
);

355 
	}
}

357 
RTAI_SYSCALL_MODE
 
	$_π_msg_brﬂdˇ°_if
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
)

359 i‡(
	`π_£m_waô_if
(&
mq
->
£ndîs
) <= 0) {

362 i‡(
mq
->
ª˚ived
.
cou¡
 >= 0) {

363 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

366 i‡(
	`π_£m_waô_if
(&
mq
->
‰e¶Ÿs
) <= 0) {

367 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

370  
	`_brﬂdˇ°
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, -(mq->
ª˚ived
.
cou¡
 + mq->
ª˚ivîs
.cou¡), 
•a˚
);

371 
	}
}

373 
RTAI_SYSCALL_MODE
 
	$_π_msg_brﬂdˇ°_u¡û
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
)

375 
ªtvÆ
;

377 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
£ndîs
, 
u¡û
)Ë>
RTE_LOWERR
) {

378  
	`TBX_RET
(0, 
ªtvÆ
);

380 i‡(
mq
->
ª˚ived
.
cou¡
 >= 0) {

381 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

384 i‡((
ªtvÆ
 = 
	`π_£m_waô_u¡û
(&
mq
->
‰e¶Ÿs
, 
u¡û
)Ë>
RTE_LOWERR
) {

385 
	`π_£m_sig«l
(&
mq
->
£ndîs
);

386  
	`TBX_RET
(0, 
ªtvÆ
);

388  
	`_brﬂdˇ°
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, -(mq->
ª˚ived
.
cou¡
 + mq->
ª˚ivîs
.cou¡), 
•a˚
);

389 
	}
}

391 
RTAI_SYSCALL_MODE
 
	$_π_msg_brﬂdˇ°_timed
(
RT_MSGQ
 *
mq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
)

393  
	`_π_msg_brﬂdˇ°_u¡û
(
mq
, 
msg
, 
msg_size
, 
msg¥i
, 
	`gë_time
(Ë+ 
dñay
, 
•a˚
);

394 
	}
}

396 
π_«tive_fun_íåy
 
	gπ_msg_queue_íåõs
[] = {

397 { { 0, 
π_msgq_öô
 }, 
MSGQ_INIT
 },

398 { { 1, 
π_msgq_dñëe
 }, 
MSGQ_DELETE
 },

399 { { 0, 
_π_«med_msgq_öô
 }, 
NAMED_MSGQ_INIT
 },

400 { { 1, 
π_«med_msgq_dñëe
 }, 
NAMED_MSGQ_DELETE
 },

401 { { 1, 
_π_msg_£nd
 }, 
MSG_SEND
 },

402 { { 1, 
_π_msg_£nd_if
 }, 
MSG_SEND_IF
 },

403 { { 1, 
_π_msg_£nd_u¡û
 }, 
MSG_SEND_UNTIL
 },

404 { { 1, 
_π_msg_£nd_timed
 }, 
MSG_SEND_TIMED
 },

405 { { 1, 
_π_msg_ª˚ive
 }, 
MSG_RECEIVE
 },

406 { { 1, 
_π_msg_ª˚ive_if
 }, 
MSG_RECEIVE_IF
 },

407 { { 1, 
_π_msg_ª˚ive_u¡û
 }, 
MSG_RECEIVE_UNTIL
 },

408 { { 1, 
_π_msg_ª˚ive_timed
 }, 
MSG_RECEIVE_TIMED
 },

409 { { 1, 
_π_msg_brﬂdˇ°
 }, 
MSG_BROADCAST
 },

410 { { 1, 
_π_msg_brﬂdˇ°_if
 }, 
MSG_BROADCAST_IF
 },

411 { { 1, 
_π_msg_brﬂdˇ°_u¡û
 }, 
MSG_BROADCAST_UNTIL
 },

412 { { 1, 
_π_msg_brﬂdˇ°_timed
 }, 
MSG_BROADCAST_TIMED
 },

413 { { 1, 
_π_msg_evdΩ
 }, 
MSG_EVDRP
 },

417 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

418 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

420 
	$__πai_msg_queue_öô
()

422 
	`¥ötk
(
KERN_INFO
 "RTAI[rtai_msgq]:Üoaded.\n");

423  
	`£t_π_fun_íåõs
(
π_msg_queue_íåõs
);

424 
	}
}

426 
	$__πai_msg_queue_exô
()

428 
	`ª£t_π_fun_íåõs
(
π_msg_queue_íåõs
);

429 
	`¥ötk
(
KERN_INFO
 "RTAI[rtai_msgq]: unloaded.\n");

430 
	}
}

432 #i‚de‡
CONFIG_RTAI_TBX_BUILTIN


433 
moduÀ_öô
(
__πai_msg_queue_öô
);

434 
moduÀ_exô
(
__πai_msg_queue_exô
);

437 #ifde‡
CONFIG_KBUILD


438 
EXPORT_SYMBOL
(
π_msgq_öô
);

439 
EXPORT_SYMBOL
(
π_msgq_dñëe
);

440 
EXPORT_SYMBOL
(
_π_«med_msgq_öô
);

441 
EXPORT_SYMBOL
(
π_«med_msgq_dñëe
);

442 
EXPORT_SYMBOL
(
_π_msg_£nd
);

443 
EXPORT_SYMBOL
(
_π_msg_£nd_if
);

444 
EXPORT_SYMBOL
(
_π_msg_£nd_u¡û
);

445 
EXPORT_SYMBOL
(
_π_msg_£nd_timed
);

446 
EXPORT_SYMBOL
(
_π_msg_ª˚ive
);

447 
EXPORT_SYMBOL
(
_π_msg_ª˚ive_if
);

448 
EXPORT_SYMBOL
(
_π_msg_ª˚ive_u¡û
);

449 
EXPORT_SYMBOL
(
_π_msg_ª˚ive_timed
);

450 
EXPORT_SYMBOL
(
_π_msg_brﬂdˇ°
);

451 
EXPORT_SYMBOL
(
_π_msg_brﬂdˇ°_if
);

452 
EXPORT_SYMBOL
(
_π_msg_brﬂdˇ°_u¡û
);

453 
EXPORT_SYMBOL
(
_π_msg_brﬂdˇ°_timed
);

454 
EXPORT_SYMBOL
(
_π_msg_evdΩ
);

	@/usr/src/rtai/base/leds/leds.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/moduÀ.h
>

23 
	~<πai.h
>

24 
	~<πai_Àds.h
>

26 
MODULE_LICENSE
("GPL");

28 
	gÀds
;

29 
	gp‹t
;

31 (*
Àds_func
)(
p‹t
, 
Àds
);

33 
	$π_Àds_£t_mask
(
mask
, 
vÆue
)

35 
Àds
 &~
mask
;

36 
Àds
 |(
mask
 & 
vÆue
);

37 
	`Àds_func
(
p‹t
, 
Àds
);

38 
	}
}

40 
	$π_toggÀ_Àds
(
l
)

42 
Àds
 ^
l
;

43 
	`Àds_func
(
p‹t
, 
Àds
);

44 
	}
}

46 
	$π_ª£t_Àds
(
l
)

48 
Àds
 &~
l
;

49 
	`Àds_func
(
p‹t
, 
Àds
);

50 
	}
}

52 
	$π_£t_Àds
(
l
)

54 
Àds
 |
l
;

55 
	`Àds_func
(
p‹t
, 
Àds
);

56 
	}
}

58 
	$π_˛ór_Àds
()

60 
Àds
 = 0;

61 
	`Àds_func
(
p‹t
, 
Àds
);

62 
	}
}

64 
	$π_gë_Àds
()

66  
Àds
;

67 
	}
}

69 
	$π_£t_Àds_p‹t
(
p
)

71 
p‹t
 = 
p
;

72 
	}
}

74 
π_c⁄fig_Àds
(
ty≥
,

75 (*
func
)(
p
, 
l
),

76 
p
)

79 
ty≥
){

81 
Àds_func
 = 
func
;

82 
p‹t
 = 
p
;

85 
Àds_func
 = 
LEDS_DEFAULT_FUNC
;

86 
p‹t
 = 
LEDS_DEFAULT_PORT
;

89 
	}
}

91 
	$__πai_Àds_öô
()

93 
	`π_c⁄fig_Àds
(1,
NULL
,0);

95 
	`¥ötk
(
KERN_INFO
 "RTAI[leds]:Üoaded.\n");

97 
	}
}

99 
	$__πai_Àds_exô
()

101 
	`¥ötk
(
KERN_INFO
 "RTAI[leds]: unloaded.\n");

102 
	}
}

104 #i‚de‡
CONFIG_RTAI_LEDS_BUILTIN


105 
moduÀ_öô
(
__πai_Àds_öô
);

106 
moduÀ_exô
(
__πai_Àds_exô
);

109 #ifde‡
CONFIG_KBUILD


110 
EXPORT_SYMBOL
(
π_Àds_£t_mask
);

111 
EXPORT_SYMBOL
(
π_toggÀ_Àds
);

112 
EXPORT_SYMBOL
(
π_ª£t_Àds
);

113 
EXPORT_SYMBOL
(
π_£t_Àds
);

114 
EXPORT_SYMBOL
(
π_˛ór_Àds
);

115 
EXPORT_SYMBOL
(
π_gë_Àds
);

116 
EXPORT_SYMBOL
(
π_£t_Àds_p‹t
);

117 
EXPORT_SYMBOL
(
π_c⁄fig_Àds
);

	@/usr/src/rtai/base/malloc/malloc.c

28 
	~<löux/moduÀ.h
>

29 
	~<löux/kî√l.h
>

30 
	~<löux/vîsi⁄.h
>

31 
	~<löux/¶ab.h
>

33 
	~<πai_c⁄fig.h
>

34 
	~<asm/πai.h
>

35 
	~<πai_mÆloc.h
>

36 
	~<πai_shm.h
>

38 
	gπai_globÆ_hóp_size
 = 
RTHEAP_GLOBALSZ
;

39 
RTAI_MODULE_PARM
(
πai_globÆ_hóp_size
, );

41 *
	gπai_globÆ_hóp_adr
 = 
NULL
;

43 
πhóp_t
 
	gπai_globÆ_hóp
;

45 *
	$Æloc_exã¡
(
u_l⁄g
 
size
, 
su¥t
)

47 
ˇddr_t
 
p
;

48 i‡(!
su¥t
) {

49 i‡((
p
 = (
ˇddr_t
)
	`vmÆloc
(
size
))) {

50 
_p
 = ()
p
;

52 ; 
size
 > 0; sizê-
PAGE_SIZE
, 
_p
 += PAGE_SIZE) {

54 
	`SëPageRe£rved
(
	`vmÆloc_to_∑ge
((*)
_p
));

58 i‡(
size
 <
KMALLOC_LIMIT
) {

59 
p
 = 
	`kmÆloc
(
size
, 
su¥t
);

61 
p
 = (*)
	`__gë_‰ì_∑ges
(
su¥t
, 
	`gë_‹dî
(
size
));

66 i‡(
p
) {

67 
	`mem£t
(
p
, 0, 
size
);

69  
p
;

70 
	}
}

72 
	$‰ì_exã¡
(*
p
, 
u_l⁄g
 
size
, 
su¥t
)

74 i‡(!
su¥t
) {

75 
_p
 = ()
p
;

78 ; 
size
 > 0; sizê-
PAGE_SIZE
, 
_p
 += PAGE_SIZE) {

80 
	`CÀ¨PageRe£rved
(
	`vmÆloc_to_∑ge
((*)
_p
));

82 
	`v‰ì
(
p
);

86 i‡(
size
 <
KMALLOC_LIMIT
) {

87 
	`k‰ì
(
p
);

89 
	`‰ì_∑ges
(()
p
, 
	`gë_‹dî
(
size
));

92 
	}
}

94 #i‚de‡
CONFIG_RTAI_USE_TLSF


95 
	#CONFIG_RTAI_USE_TLSF
 0

	)

98 #i‡
CONFIG_RTAI_USE_TLSF


100 
size_t
 
öô_mem‹y_poﬁ
(size_à
mem_poﬁ_size
, *
mem_poﬁ
);

101 
ölöe
 *
mÆloc_ex
(
size_t
 
size
, *
mem_poﬁ
);

102 
ölöe
 
‰ì_ex
(*
±r
, *
mem_poﬁ
);

104 
	$öô_exã¡
(
πhóp_t
 *
hóp
, 
πexã¡_t
 *
exã¡
)

106 
	`INIT_LIST_HEAD
(&
exã¡
->
lök
);

107 
exã¡
->
memba£
 = (
ˇddr_t
Îxã¡ + (
πexã¡_t
);

108 
exã¡
->
memlim
 = (
ˇddr_t
Îxã¡ + 
hóp
->
exã¡size
;

109 
	}
}

111 
	$πhóp_öô
(
πhóp_t
 *
hóp
, *
hó∑ddr
, 
u_l⁄g
 
hópsize
, u_l⁄g 
∑gesize
, 
su¥t
)

113 
πexã¡_t
 *
exã¡
;

115 
	`INIT_LIST_HEAD
(&
hóp
->
exã¡s
);

116 
	`•ö_lock_öô
(&
hóp
->
lock
);

118 
hóp
->
exã¡size
 = 
hópsize
;

119 i‡(!
hó∑ddr
 && 
su¥t
) {

120 i‡(
hópsize
 <
KMALLOC_LIMIT
 || (
hó∑ddr
 = 
	`Æloc_exã¡
(hópsize, 
su¥t
)Ë=
NULL
) {

121 
hóp
->
exã¡size
 = 
KMALLOC_LIMIT
;

122 
hó∑ddr
 = 
NULL
;

126 i‡(
hó∑ddr
) {

127 
exã¡
 = (
πexã¡_t
 *)
hó∑ddr
;

128 
	`öô_exã¡
(
hóp
, 
exã¡
);

129 
	`li°_add_èû
(&
exã¡
->
lök
, &
hóp
->
exã¡s
);

130  
	`öô_mem‹y_poﬁ
(
hópsize
 - (
πexã¡_t
), 
hó∑ddr
 + ‘ãxã¡_t)Ë< 0 ? 
RTHEAP_NOMEM
 : 0;

132 
u_l⁄g
 
öô_size
 = 0;

133 
öô_size
 < 
hópsize
) {

134 i‡(!(
exã¡
 = (
πexã¡_t
 *)
	`Æloc_exã¡
(
hóp
->
exã¡size
, 
su¥t
)Ë|| 
	`öô_mem‹y_poﬁ
(heap->extentsize - (rtextent_t), (*)extent + (rtextent_t)) < 0) {

135 
li°_hód
 *
hﬁdî
, *
nhﬁdî
;

136 
	`li°_f‹_óch_ß„
(
hﬁdî
, 
nhﬁdî
, &
hóp
->
exã¡s
) {

137 
exã¡
 = 
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
);

138 
	`‰ì_exã¡
(
exã¡
, 
hóp
->
exã¡size
, 
su¥t
);

140  
RTHEAP_NOMEM
;

142 
	`öô_exã¡
(
hóp
, 
exã¡
);

143 
	`li°_add_èû
(&
exã¡
->
lök
, &
hóp
->
exã¡s
);

144 
öô_size
 +
hóp
->
exã¡size
;

148 
	}
}

150 
	$πhóp_de°roy
(
πhóp_t
 *
hóp
, 
su¥t
)

152 
li°_hód
 *
hﬁdî
, *
nhﬁdî
;

153 
	`li°_f‹_óch_ß„
(
hﬁdî
, 
nhﬁdî
, &
hóp
->
exã¡s
) {

154 
	`‰ì_exã¡
(
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
), 
hóp
->
exã¡size
, 
su¥t
);

156 
	}
}

158 *
	$πhóp_Æloc
(
πhóp_t
 *
hóp
, 
u_l⁄g
 
size
, 
mode
)

160 *
adr
 = 
NULL
;

161 
li°_hód
 *
hﬁdî
;

162 
Êags
;

164 i‡(!
size
) {

165  
NULL
;

168 
Êags
 = 
	`π_•ö_lock_úqßve
(&
hóp
->
lock
);

169 
	`li°_f‹_óch
(
hﬁdî
, &
hóp
->
exã¡s
) {

170 i‡((
adr
 = 
	`mÆloc_ex
(
size
, 
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
)->
memba£
)Ë!
NULL
) {

174 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
hóp
->
lock
);

175  
adr
;

176 
	}
}

178 
	$πhóp_‰ì
(
πhóp_t
 *
hóp
, *
block
)

180 
Êags
;

181 
li°_hód
 *
hﬁdî
;

183 
Êags
 = 
	`π_•ö_lock_úqßve
(&
hóp
->
lock
);

184 
	`li°_f‹_óch
(
hﬁdî
, &
hóp
->
exã¡s
) {

185 
πexã¡_t
 *
exã¡
;

186 
exã¡
 = 
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
);

187 i‡((
ˇddr_t
)
block
 < 
exã¡
->
memlim
 && (ˇddr_t)block >exã¡->
memba£
) {

188 
	`‰ì_ex
(
block
, 
exã¡
->
memba£
);

192 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
hóp
->
lock
);

194 
	}
}

255 #i‚de‡
TLSF_USE_LOCKS


256 
	#TLSF_USE_LOCKS
 (0)

	)

259 #i‚de‡
TLSF_STATISTIC


260 
	#TLSF_STATISTIC
 (1)

	)

263 #i‚de‡
USE_MMAP


264 
	#USE_MMAP
 (0)

	)

267 #i‚de‡
USE_SBRK


268 
	#USE_SBRK
 (0)

	)

272 #i‡
TLSF_USE_LOCKS


273 
	~"èrgë.h
"

275 
	#TLSF_CREATE_LOCK
(
_unu£d_
Ëdo{}0)

	)

276 
	#TLSF_DESTROY_LOCK
(
_unu£d_
Ëdo{}0)

	)

277 
	#TLSF_ACQUIRE_LOCK
(
_unu£d_
Ëdo{}0)

	)

278 
	#TLSF_RELEASE_LOCK
(
_unu£d_
Ëdo{}0)

	)

281 #i‡
TLSF_STATISTIC


282 
	#TLSF_ADD_SIZE
(
ésf
, 
b
) do { \

283 
ésf
->
u£d_size
 +(
b
->
size
 & 
BLOCK_SIZE
Ë+ 
BHDR_OVERHEAD
; \

284 i‡(
ésf
->
u£d_size
 >Ålsf->
max_size
) { \

285 
ésf
->
max_size
 =Ålsf->
u£d_size
; \

287 } 0)

	)

289 
	#TLSF_REMOVE_SIZE
(
ésf
, 
b
) do { \

290 
ésf
->
u£d_size
 -(
b
->
size
 & 
BLOCK_SIZE
Ë+ 
BHDR_OVERHEAD
; \

291 } 0)

	)

293 
	#TLSF_ADD_SIZE
(
ésf
, 
b
Ëdo{}0)

	)

294 
	#TLSF_REMOVE_SIZE
(
ésf
, 
b
Ëdo{}0)

	)

297 #i‡
USE_MMAP
 || 
USE_SBRK


298 
	~<uni°d.h
>

301 #i‡
USE_MMAP


302 
	~<sys/mm™.h
>

305 #i‡!
deföed
(
__GNUC__
)

306 #i‚de‡
__ölöe__


307 
	#__ölöe__


	)

312 #i‚de‡
_DEBUG_TLSF_


313 
	#_DEBUG_TLSF_
 (0)

	)

322 
	#BLOCK_ALIGN
 ((*Ë* 2)

	)

324 
	#MAX_FLI
 (30)

	)

325 
	#MAX_LOG2_SLI
 (5)

	)

326 
	#MAX_SLI
 (1 << 
MAX_LOG2_SLI
Ë

	)

328 
	#FLI_OFFSET
 (6Ë

	)

330 
	#SMALL_BLOCK
 (128)

	)

331 
	#REAL_FLI
 (
MAX_FLI
 - 
FLI_OFFSET
)

	)

332 
	#MIN_BLOCK_SIZE
 ( (
‰ì_±r_t
))

	)

333 
	#BHDR_OVERHEAD
 ( (
bhdr_t
Ë- 
MIN_BLOCK_SIZE
)

	)

334 
	#TLSF_SIGNATURE
 (0x2A59FA59)

	)

336 
	#PTR_MASK
 ((*Ë- 1)

	)

337 #unde‡
BLOCK_SIZE


338 
	#BLOCK_SIZE
 (0xFFFFFFFF - 
PTR_MASK
)

	)

340 
	#GET_NEXT_BLOCK
(
_addr
, 
_r
Ë((
bhdr_t
 *Ë((*Ë(_addrË+ (_r)))

	)

341 
	#MEM_ALIGN
 ((
BLOCK_ALIGN
Ë- 1)

	)

342 
	#ROUNDUP_SIZE
(
_r
Ë(((_rË+ 
MEM_ALIGN
Ë& ~MEM_ALIGN)

	)

343 
	#ROUNDDOWN_SIZE
(
_r
Ë((_rË& ~
MEM_ALIGN
)

	)

344 
	#ROUNDUP
(
_x
, 
_v
Ë((((~(_x)Ë+ 1Ë& ((_v)-1)Ë+ (_x))

	)

346 
	#BLOCK_STATE
 (0x1)

	)

347 
	#PREV_STATE
 (0x2)

	)

350 
	#FREE_BLOCK
 (0x1)

	)

351 
	#USED_BLOCK
 (0x0)

	)

354 
	#PREV_FREE
 (0x2)

	)

355 
	#PREV_USED
 (0x0)

	)

358 
	#DEFAULT_AREA_SIZE
 (1024*10)

	)

360 #i‡
USE_MMAP


361 
	#PAGE_SIZE
 (
	`gë∑gesize
())

	)

364 
	#PRINT_MSG
(
fmt
, 
¨gs
...Ë
	`π_¥ötk
(fmt, ##árgs)

	)

365 
	#ERROR_MSG
(
fmt
, 
¨gs
...Ë
	`π_¥ötk
(fmt, ##árgs)

	)

367 
	tu32_t
;

368 
	tu8_t
;

370 
	s‰ì_±r_°ru˘
 {

371 
bhdr_°ru˘
 *
	m¥ev
;

372 
bhdr_°ru˘
 *
	m√xt
;

373 } 
	t‰ì_±r_t
;

375 
	sbhdr_°ru˘
 {

377 
bhdr_°ru˘
 *
	m¥ev_hdr
;

379 
size_t
 
	msize
;

382 
‰ì_±r_°ru˘
 
	m‰ì_±r
;

383 
u8_t
 
	mbuf„r
[1];

384 } 
	m±r
;

385 } 
	tbhdr_t
;

390 
	s¨ó_öfo_°ru˘
 {

391 
bhdr_t
 *
	míd
;

392 
¨ó_öfo_°ru˘
 *
	m√xt
;

393 } 
	t¨ó_öfo_t
;

395 
	sTLSF_°ru˘
 {

397 
u32_t
 
	mésf_sig«tuª
;

399 #i‡
TLSF_USE_LOCKS


400 
TLSF_MLOCK_T
 
	mlock
;

403 #i‡
TLSF_STATISTIC


406 
size_t
 
	mu£d_size
;

407 
size_t
 
	mmax_size
;

411 
¨ó_öfo_t
 *
	m¨ó_hód
;

415 
u32_t
 
	mÊ_bôm≠
;

418 
u32_t
 
	m¶_bôm≠
[
REAL_FLI
];

420 
bhdr_t
 *
	mm©rix
[
REAL_FLI
][
MAX_SLI
];

421 } 
	tésf_t
;

427 
__ölöe__
 
ésf_£t_bô
(
ƒ
, 
u32_t
 * 
addr
);

428 
__ölöe__
 
ésf_˛ór_bô
(
ƒ
, 
u32_t
 * 
addr
);

429 
__ölöe__
 
ls_bô
(
x
);

430 
__ölöe__
 
ms_bô
(
x
);

431 
__ölöe__
 
MAPPING_SEARCH
(
size_t
 * 
_r
, *
_Ê
, *
_¶
);

432 
__ölöe__
 
MAPPING_INSERT
(
size_t
 
_r
, *
_Ê
, *
_¶
);

433 
__ölöe__
 
bhdr_t
 *
FIND_SUITABLE_BLOCK
(
ésf_t
 * 
_ésf
, *
_Ê
, *
_¶
);

434 
__ölöe__
 
bhdr_t
 *
¥o˚ss_¨ó
(*
¨ó
, 
size_t
 
size
);

435 #i‡
USE_SBRK
 || 
USE_MMAP


436 
__ölöe__
 *
gë_√w_¨ó
(
size_t
 * 
size
);

439 c⁄° 
	gèbÀ
[] = {

466 
__ölöe__
 
	$ls_bô
(
i
)

468 
a
;

469 
x
 = 
i
 & -i;

471 
a
 = 
x
 <= 0xffff ? (x <= 0xff ? 0 : 8) : (x <= 0xffffff ? 16 : 24);

472  
èbÀ
[
x
 >> 
a
] +á;

473 
	}
}

475 
__ölöe__
 
	$ms_bô
(
i
)

477 
a
;

478 
x
 = (Ë
i
;

480 
a
 = 
x
 <= 0xffff ? (x <= 0xff ? 0 : 8) : (x <= 0xffffff ? 16 : 24);

481  
èbÀ
[
x
 >> 
a
] +á;

482 
	}
}

484 
__ölöe__
 
	$ésf_£t_bô
(
ƒ
, 
u32_t
 * 
addr
)

486 
addr
[
ƒ
 >> 5] |= 1 << (nr & 0x1f);

487 
	}
}

489 
__ölöe__
 
	$ésf_˛ór_bô
(
ƒ
, 
u32_t
 * 
addr
)

491 
addr
[
ƒ
 >> 5] &= ~(1 << (nr & 0x1f));

492 
	}
}

494 
__ölöe__
 
	$MAPPING_SEARCH
(
size_t
 * 
_r
, *
_Ê
, *
_¶
)

496 
_t
;

498 i‡(*
_r
 < 
SMALL_BLOCK
) {

499 *
_Ê
 = 0;

500 *
_¶
 = *
_r
 / (
SMALL_BLOCK
 / 
MAX_SLI
);

502 
_t
 = (1 << (
	`ms_bô
(*
_r
Ë- 
MAX_LOG2_SLI
)) - 1;

503 *
_r
 = *_∏+ 
_t
;

504 *
_Ê
 = 
	`ms_bô
(*
_r
);

505 *
_¶
 = (*
_r
 >> (*
_Ê
 - 
MAX_LOG2_SLI
)Ë- 
MAX_SLI
;

506 *
_Ê
 -
FLI_OFFSET
;

510 *
_r
 &~
_t
;

512 
	}
}

514 
__ölöe__
 
	$MAPPING_INSERT
(
size_t
 
_r
, *
_Ê
, *
_¶
)

516 i‡(
_r
 < 
SMALL_BLOCK
) {

517 *
_Ê
 = 0;

518 *
_¶
 = 
_r
 / (
SMALL_BLOCK
 / 
MAX_SLI
);

520 *
_Ê
 = 
	`ms_bô
(
_r
);

521 *
_¶
 = (
_r
 >> (*
_Ê
 - 
MAX_LOG2_SLI
)Ë- 
MAX_SLI
;

522 *
_Ê
 -
FLI_OFFSET
;

524 
	}
}

527 
__ölöe__
 
bhdr_t
 *
	$FIND_SUITABLE_BLOCK
(
ésf_t
 * 
_ésf
, *
_Ê
, *
_¶
)

529 
u32_t
 
_tmp
 = 
_ésf
->
¶_bôm≠
[*
_Ê
] & (~0 << *
_¶
);

530 
bhdr_t
 *
_b
 = 
NULL
;

532 i‡(
_tmp
) {

533 *
_¶
 = 
	`ls_bô
(
_tmp
);

534 
_b
 = 
_ésf
->
m©rix
[*
_Ê
][*
_¶
];

536 *
_Ê
 = 
	`ls_bô
(
_ésf
->
Ê_bôm≠
 & (~0 << (*_fl + 1)));

537 i‡(*
_Ê
 > 0) {

538 *
_¶
 = 
	`ls_bô
(
_ésf
->
¶_bôm≠
[*
_Ê
]);

539 
_b
 = 
_ésf
->
m©rix
[*
_Ê
][*
_¶
];

542  
_b
;

543 
	}
}

546 
	#EXTRACT_BLOCK_HDR
(
_b
, 
_ésf
, 
_Ê
, 
_¶
) { \

547 
_ésf
 -> 
m©rix
 [
_Ê
] [
_¶
] = 
_b
 -> 
±r
.
‰ì_±r
.
√xt
; \

548 i‡(
_ésf
 -> 
m©rix
[
_Ê
][
_¶
]) \

549 
_ésf
 -> 
m©rix
[
_Ê
][
_¶
] -> 
±r
.
‰ì_±r
.
¥ev
 = 
NULL
; \

551 
	`ésf_˛ór_bô
 (
_¶
, &
_ésf
 -> 
¶_bôm≠
 [
_Ê
]); \

552 i‡(!
_ésf
 -> 
¶_bôm≠
 [
_Ê
]) \

553 
	`ésf_˛ór_bô
 (
_Ê
, &
_ésf
 -> 
Ê_bôm≠
); \

555 
_b
 -> 
±r
.
‰ì_±r
 = (
‰ì_±r_t
Ë{
NULL
, NULL}; \

556 }

	)

559 
	#EXTRACT_BLOCK
(
_b
, 
_ésf
, 
_Ê
, 
_¶
) { \

560 i‡(
_b
 -> 
±r
.
‰ì_±r
.
√xt
) \

561 
_b
 -> 
±r
.
‰ì_±r
.
√xt
 ->Öå.‰ì_±r.
¥ev
 = _b ->Ötr.free_ptr.prev; \

562 i‡(
_b
 -> 
±r
.
‰ì_±r
.
¥ev
) \

563 
_b
 -> 
±r
.
‰ì_±r
.
¥ev
 ->Öå.‰ì_±r.
√xt
 = _b ->Ötr.free_ptr.next; \

564 i‡(
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
] =
_b
) { \

565 
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
] = 
_b
 -> 
±r
.
‰ì_±r
.
√xt
; \

566 i‡(!
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
]) { \

567 
	`ésf_˛ór_bô
 (
_¶
, &
_ésf
 -> 
¶_bôm≠
[
_Ê
]); \

568 i‡(!
_ésf
 -> 
¶_bôm≠
 [
_Ê
]) \

569 
	`ésf_˛ór_bô
 (
_Ê
, &
_ésf
 -> 
Ê_bôm≠
); \

572 
_b
 -> 
±r
.
‰ì_±r
 = (
‰ì_±r_t
Ë{
NULL
, NULL}; \

573 }

	)

575 
	#INSERT_BLOCK
(
_b
, 
_ésf
, 
_Ê
, 
_¶
) { \

576 
_b
 -> 
±r
.
‰ì_±r
 = (
‰ì_±r_t
Ë{
NULL
, 
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
]}; \

577 i‡(
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
]) \

578 
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
] -> 
±r
.
‰ì_±r
.
¥ev
 = 
_b
; \

579 
_ésf
 -> 
m©rix
 [
_Ê
][
_¶
] = 
_b
; \

580 
	`ésf_£t_bô
 (
_¶
, &
_ésf
 -> 
¶_bôm≠
 [
_Ê
]); \

581 
	`ésf_£t_bô
 (
_Ê
, &
_ésf
 -> 
Ê_bôm≠
); \

582 }

	)

584 #i‡
USE_SBRK
 || 
USE_MMAP


585 
__ölöe__
 *
	$gë_√w_¨ó
(
size_t
 * 
size
)

587 *
¨ó
;

589 #i‡
USE_SBRK


590 
¨ó
 = 
	`sbrk
(0);

591 i‡(
	`sbrk
(*
size
) != ((*) ~0))

592  
¨ó
;

595 #i‡
USE_MMAP


596 *
size
 = 
	`ROUNDUP
(*size, 
PAGE_SIZE
);

597 i‡((
¨ó
 = 
	`mm≠
(0, *
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0)Ë!
MAP_FAILED
)

598  
¨ó
;

601 
	}
}

604 
__ölöe__
 
bhdr_t
 *
	$¥o˚ss_¨ó
(*
¨ó
, 
size_t
 
size
)

606 
bhdr_t
 *
b
, *
lb
, *
ib
;

607 
¨ó_öfo_t
 *
ai
;

609 
ib
 = (
bhdr_t
 *Ë
¨ó
;

610 
ib
->
size
 =

611 ((
¨ó_öfo_t
) <

612 
MIN_BLOCK_SIZE
Ë? MIN_BLOCK_SIZE : 
	`ROUNDUP_SIZE
((
¨ó_öfo_t
)Ë| 
USED_BLOCK
 | 
PREV_USED
;

613 
b
 = (
bhdr_t
 *Ë
	`GET_NEXT_BLOCK
(
ib
->
±r
.
buf„r
, ib->
size
 & 
BLOCK_SIZE
);

614 
b
->
size
 = 
	`ROUNDDOWN_SIZE
(sizê- 3 * 
BHDR_OVERHEAD
 - (
ib
->sizê& 
BLOCK_SIZE
)Ë| 
USED_BLOCK
 | 
PREV_USED
;

615 
b
->
±r
.
‰ì_±r
.
¥ev
 = b->±r.‰ì_±r.
√xt
 = 0;

616 
lb
 = 
	`GET_NEXT_BLOCK
(
b
->
±r
.
buf„r
, b->
size
 & 
BLOCK_SIZE
);

617 
lb
->
¥ev_hdr
 = 
b
;

618 
lb
->
size
 = 0 | 
USED_BLOCK
 | 
PREV_FREE
;

619 
ai
 = (
¨ó_öfo_t
 *Ë
ib
->
±r
.
buf„r
;

620 
ai
->
√xt
 = 0;

621 
ai
->
íd
 = 
lb
;

622  
ib
;

623 
	}
}

630 
size_t
 
	$öô_mem‹y_poﬁ
(
size_t
 
mem_poﬁ_size
, *
mem_poﬁ
)

633 *
mp
 = 
NULL
;

634 
ésf_t
 *
ésf
;

635 
bhdr_t
 *
b
, *
ib
;

637 i‡(!
mem_poﬁ
 || !
mem_poﬁ_size
 || mem_poﬁ_sizê< (
ésf_t
Ë+ 
BHDR_OVERHEAD
 * 8) {

638 
	`ERROR_MSG
("init_memory_pool (): memory_pool invalid\n");

642 i‡(((Ë
mem_poﬁ
 & 
PTR_MASK
)) {

643 
	`ERROR_MSG
("init_memory_pool (): mem_pool must beálignedÅoá word\n");

646 
ésf
 = (
ésf_t
 *Ë
mem_poﬁ
;

648 i‡(
ésf
->
ésf_sig«tuª
 =
TLSF_SIGNATURE
) {

649 
mp
 = 
mem_poﬁ
;

650 
b
 = 
	`GET_NEXT_BLOCK
(
mp
, 
	`ROUNDUP_SIZE
((
ésf_t
)));

651  
b
->
size
 & 
BLOCK_SIZE
;

654 
mp
 = 
mem_poﬁ
;

657 
	`mem£t
(
mem_poﬁ
, 0, (
ésf_t
));

659 
ésf
->
ésf_sig«tuª
 = 
TLSF_SIGNATURE
;

661 
	`TLSF_CREATE_LOCK
(&
ésf
->
lock
);

663 
ib
 = 
	`¥o˚ss_¨ó
(
GET_NEXT_BLOCK


664 (
mem_poﬁ
, 
	`ROUNDUP_SIZE
((
ésf_t
))), 
	`ROUNDDOWN_SIZE
(
mem_poﬁ_size
 - (tlsf_t)));

665 
b
 = 
	`GET_NEXT_BLOCK
(
ib
->
±r
.
buf„r
, ib->
size
 & 
BLOCK_SIZE
);

666 
	`‰ì_ex
(
b
->
±r
.
buf„r
, 
ésf
);

667 
ésf
->
¨ó_hód
 = (
¨ó_öfo_t
 *Ë
ib
->
±r
.
buf„r
;

669 #i‡
TLSF_STATISTIC


670 
ésf
->
u£d_size
 = 
mem_poﬁ_size
 - (
b
->
size
 & 
BLOCK_SIZE
);

671 
ésf
->
max_size
 =Ålsf->
u£d_size
;

674  (
b
->
size
 & 
BLOCK_SIZE
);

675 
	}
}

678 *
	$mÆloc_ex
(
size_t
 
size
, *
mem_poﬁ
)

681 
ésf_t
 *
ésf
 = (ésf_à*Ë
mem_poﬁ
;

682 
bhdr_t
 *
b
, *
b2
, *
√xt_b
;

683 
Ê
, 
¶
;

684 
size_t
 
tmp_size
;

686 
size
 = (sizê< 
MIN_BLOCK_SIZE
Ë? MIN_BLOCK_SIZE : 
	`ROUNDUP_SIZE
(size);

689 
	`MAPPING_SEARCH
(&
size
, &
Ê
, &
¶
);

693 
b
 = 
	`FIND_SUITABLE_BLOCK
(
ésf
, &
Ê
, &
¶
);

694 #i‡
USE_MMAP
 || 
USE_SBRK


695 i‡(!
b
) {

696 
size_t
 
¨ó_size
;

697 *
¨ó
;

699 
¨ó_size
 = 
size
 + 
BHDR_OVERHEAD
 * 8;

700 
¨ó_size
 = (¨ó_sizê> 
DEFAULT_AREA_SIZE
) ?área_size : DEFAULT_AREA_SIZE;

701 
¨ó
 = 
	`gë_√w_¨ó
(&
¨ó_size
);

702 i‡(
¨ó
 == ((*) ~0))

703  
NULL
;

704 
	`add_√w_¨ó
(
¨ó
, 
¨ó_size
, 
mem_poﬁ
);

706 
	`MAPPING_SEARCH
(&
size
, &
Ê
, &
¶
);

708 
b
 = 
	`FIND_SUITABLE_BLOCK
(
ésf
, &
Ê
, &
¶
);

711 i‡(!
b
)

712  
NULL
;

714 
	`EXTRACT_BLOCK_HDR
(
b
, 
ésf
, 
Ê
, 
¶
);

717 
√xt_b
 = 
	`GET_NEXT_BLOCK
(
b
->
±r
.
buf„r
, b->
size
 & 
BLOCK_SIZE
);

719 
tmp_size
 = (
b
->
size
 & 
BLOCK_SIZE
) - size;

720 i‡(
tmp_size
 >(
bhdr_t
)) {

721 
tmp_size
 -
BHDR_OVERHEAD
;

722 
b2
 = 
	`GET_NEXT_BLOCK
(
b
->
±r
.
buf„r
, 
size
);

723 
b2
->
size
 = 
tmp_size
 | 
FREE_BLOCK
 | 
PREV_USED
;

724 
√xt_b
->
¥ev_hdr
 = 
b2
;

725 
	`MAPPING_INSERT
(
tmp_size
, &
Ê
, &
¶
);

726 
	`INSERT_BLOCK
(
b2
, 
ésf
, 
Ê
, 
¶
);

728 
b
->
size
 = sizê| (b->sizê& 
PREV_STATE
);

730 
√xt_b
->
size
 &(~
PREV_FREE
);

731 
b
->
size
 &(~
FREE_BLOCK
);

734 
	`TLSF_ADD_SIZE
(
ésf
, 
b
);

736  (*Ë
b
->
±r
.
buf„r
;

737 
	}
}

740 
	$‰ì_ex
(*
±r
, *
mem_poﬁ
)

743 
ésf_t
 *
ésf
 = (ésf_à*Ë
mem_poﬁ
;

744 
bhdr_t
 *
b
, *
tmp_b
;

745 
Ê
 = 0, 
¶
 = 0;

747 i‡(!
±r
) {

750 
b
 = (
bhdr_t
 *Ë((*Ë
±r
 - 
BHDR_OVERHEAD
);

751 
b
->
size
 |
FREE_BLOCK
;

753 
	`TLSF_REMOVE_SIZE
(
ésf
, 
b
);

755 
b
->
±r
.
‰ì_±r
 = (
‰ì_±r_t
Ë{ 
NULL
, NULL};

756 
tmp_b
 = 
	`GET_NEXT_BLOCK
(
b
->
±r
.
buf„r
, b->
size
 & 
BLOCK_SIZE
);

757 i‡(
tmp_b
->
size
 & 
FREE_BLOCK
) {

758 
	`MAPPING_INSERT
(
tmp_b
->
size
 & 
BLOCK_SIZE
, &
Ê
, &
¶
);

759 
	`EXTRACT_BLOCK
(
tmp_b
, 
ésf
, 
Ê
, 
¶
);

760 
b
->
size
 +(
tmp_b
->sizê& 
BLOCK_SIZE
Ë+ 
BHDR_OVERHEAD
;

762 i‡(
b
->
size
 & 
PREV_FREE
) {

763 
tmp_b
 = 
b
->
¥ev_hdr
;

764 
	`MAPPING_INSERT
(
tmp_b
->
size
 & 
BLOCK_SIZE
, &
Ê
, &
¶
);

765 
	`EXTRACT_BLOCK
(
tmp_b
, 
ésf
, 
Ê
, 
¶
);

766 
tmp_b
->
size
 +(
b
->sizê& 
BLOCK_SIZE
Ë+ 
BHDR_OVERHEAD
;

767 
b
 = 
tmp_b
;

769 
	`MAPPING_INSERT
(
b
->
size
 & 
BLOCK_SIZE
, &
Ê
, &
¶
);

770 
	`INSERT_BLOCK
(
b
, 
ésf
, 
Ê
, 
¶
);

772 
tmp_b
 = 
	`GET_NEXT_BLOCK
(
b
->
±r
.
buf„r
, b->
size
 & 
BLOCK_SIZE
);

773 
tmp_b
->
size
 |
PREV_FREE
;

774 
tmp_b
->
¥ev_hdr
 = 
b
;

775 
	}
}

777 
	$ésf_gë_u£d_size
(
πhóp_t
 *
hóp
) {

778 #i‡
TLSF_STATISTIC


779 
li°_hód
 *
hﬁdî
;

780 
	`li°_f‹_óch
(
hﬁdî
, &
hóp
->
exã¡s
) { ; }

781  ((
ésf_t
 *)(
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
)->
memba£
))->
u£d_size
;

785 
	}
}

827 
	$öô_exã¡
 (
πhóp_t
 *
hóp
, 
πexã¡_t
 *
exã¡
)

829 
ˇddr_t
 
‰ì∑ge
;

830 
n
, 
œ°pgnum
;

832 
	`INIT_LIST_HEAD
(&
exã¡
->
lök
);

835 
exã¡
->
memba£
 = (
ˇddr_t
Îxã¡ + 
hóp
->
hdrsize
;

836 
œ°pgnum
 = 
hóp
->
≈ages
 - 1;

839 
n
 = 0, 
‰ì∑ge
 = 
exã¡
->
memba£
;Ç < 
œ°pgnum
;Ç++, fªïagê+
hóp
->
∑gesize
) {

840 *((
ˇddr_t
 *)
‰ì∑ge
Ë‰ì∑gê+ 
hóp
->
∑gesize
;

841 
exã¡
->
∑gem≠
[
n
] = 
RTHEAP_PFREE
;

843 *((
ˇddr_t
 *)
‰ì∑ge
Ë
NULL
;

844 
exã¡
->
∑gem≠
[
œ°pgnum
] = 
RTHEAP_PFREE
;

845 
exã¡
->
memlim
 = 
‰ì∑ge
 + 
hóp
->
∑gesize
;

848 
exã¡
->
‰ìli°
 =Éxã¡->
memba£
;

849 
	}
}

911 
	$πhóp_öô
 (
πhóp_t
 *
hóp
, *
hó∑ddr
, 
u_l⁄g
 
hópsize
, u_l⁄g 
∑gesize
, 
su¥t
)

913 
u_l⁄g
 
hdrsize
, 
pm≠size
, 
shi·size
, 
∑geshi·
;

914 
πexã¡_t
 *
exã¡
;

915 
n
;

928 i‡((
∑gesize
 < (1 << 
RTHEAP_MINLOG2
)) ||

929 (
∑gesize
 > (1 << 
RTHEAP_MAXLOG2
)) ||

930 (
∑gesize
 & (pagesize - 1)) != 0 ||

931 
hópsize
 <(
πexã¡_t
) ||

932 
hópsize
 > 
RTHEAP_MAXEXTSZ
 ||

933 (
hópsize
 & (
∑gesize
 - 1)) != 0) {

934  
RTHEAP_PARAM
;

942 
pm≠size
 = ((
hópsize
 - (
πexã¡_t
)Ë* (
u_ch¨
)Ë/ (
∑gesize
 + (u_char));

946 
hdrsize
 = ((
πexã¡_t
Ë+ 
pm≠size
 + 
RTHEAP_MINALIGNSZ
 - 1) & ~(RTHEAP_MINALIGNSZ - 1);

950 i‡(
hdrsize
 + 2 * 
∑gesize
 > 
hópsize
) {

951  
RTHEAP_PARAM
;

955 
∑geshi·
 = 0, 
shi·size
 = 
∑gesize
; shiftsize > 1; shiftsize >>= 1,Öageshift++);

957 
hóp
->
∑gesize
 =Öagesize;

958 
hóp
->
∑geshi·
 =Öageshift;

959 
hóp
->
hdrsize
 = hdrsize;

961 
hóp
->
exã¡size
 = 
hópsize
;

962 i‡(!
hó∑ddr
 && 
su¥t
) {

963 i‡(
hópsize
 <
KMALLOC_LIMIT
 || (
hó∑ddr
 = 
	`Æloc_exã¡
(hópsize, 
su¥t
)Ë=
NULL
) {

964 
hóp
->
exã¡size
 = 
KMALLOC_LIMIT
;

965 
hó∑ddr
 = 
NULL
;

969 
hóp
->
≈ages
 = (hóp->
exã¡size
 - 
hdrsize
Ë>> 
∑geshi·
;

970 
hóp
->
maxc⁄t
 = hóp->
≈ages
*
∑gesize
;

971 
hóp
->
Êags
 =

972 
hóp
->
ubyãs
 = 0;

973 
	`INIT_LIST_HEAD
(&
hóp
->
exã¡s
);

974 
	`•ö_lock_öô
(&
hóp
->
lock
);

976 
n
 = 0;Ç < 
RTHEAP_NBUCKETS
;Ç++) {

977 
hóp
->
buckës
[
n
] = 
NULL
;

980 i‡(
hó∑ddr
) {

981 
exã¡
 = (
πexã¡_t
 *)
hó∑ddr
;

982 
	`öô_exã¡
(
hóp
, 
exã¡
);

983 
	`li°_add_èû
(&
exã¡
->
lök
, &
hóp
->
exã¡s
);

985 
u_l⁄g
 
öô_size
 = 0;

986 
öô_size
 < 
hópsize
) {

987 i‡(!(
exã¡
 = (
πexã¡_t
 *)
	`Æloc_exã¡
(
hóp
->
exã¡size
, 
su¥t
))) {

988 
li°_hód
 *
hﬁdî
, *
nhﬁdî
;

989 
	`li°_f‹_óch_ß„
(
hﬁdî
, 
nhﬁdî
, &
hóp
->
exã¡s
) {

990 
exã¡
 = 
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
);

991 
	`‰ì_exã¡
(
exã¡
, 
hóp
->
exã¡size
, 
su¥t
);

993  
RTHEAP_NOMEM
;

995 
	`öô_exã¡
(
hóp
, 
exã¡
);

996 
	`li°_add_èû
(&
exã¡
->
lök
, &
hóp
->
exã¡s
);

997 
öô_size
 +
hóp
->
exã¡size
;

1001 
	}
}

1017 
	$πhóp_de°roy
 (
πhóp_t
 *
hóp
, 
su¥t
)

1019 
li°_hód
 *
hﬁdî
, *
nhﬁdî
;

1021 
	`li°_f‹_óch_ß„
(
hﬁdî
, 
nhﬁdî
, &
hóp
->
exã¡s
) {

1022 
	`‰ì_exã¡
(
	`li°_íåy
(
hﬁdî
, 
πexã¡_t
, 
lök
), 
hóp
->
exã¡size
, 
su¥t
);

1024 
	}
}

1033 
ˇddr_t
 
	$gë_‰ì_ønge
 (
πhóp_t
 *
hóp
,

1034 
u_l⁄g
 
bsize
,

1035 
log2size
,

1036 
mode
)

1038 
ˇddr_t
 
block
, 
eblock
, 
‰ì∑ge
, 
œ°∑ge
, 
hód∑ge
, 
‰ìhód
 = 
NULL
;

1039 
u_l⁄g
 
∑gíum
, 
∑gec⁄t
, 
‰ìc⁄t
;

1040 
li°_hód
 *
hﬁdî
;

1041 
πexã¡_t
 *
exã¡
;

1043 
	`li°_f‹_óch
(
hﬁdî
,&
hóp
->
exã¡s
) {

1045 
exã¡
 = 
	`li°_íåy
(
hﬁdî
,
πexã¡_t
,
lök
);

1046 
‰ì∑ge
 = 
exã¡
->
‰ìli°
;

1048 
‰ì∑ge
 !
NULL
)

1050 
hód∑ge
 = 
‰ì∑ge
;

1051 
‰ìc⁄t
 = 0;

1058 
œ°∑ge
 = 
‰ì∑ge
;

1059 
‰ì∑ge
 = *((
ˇddr_t
 *)freepage);

1060 
‰ìc⁄t
 +
hóp
->
∑gesize
;

1062 
‰ì∑ge
 =
œ°∑ge
 + 
hóp
->
∑gesize
 && 
‰ìc⁄t
 < 
bsize
);

1064 i‡(
‰ìc⁄t
 >
bsize
)

1069 i‡(
hód∑ge
 =
exã¡
->
‰ìli°
)

1070 
exã¡
->
‰ìli°
 = *((
ˇddr_t
 *)
œ°∑ge
);

1072 *((
ˇddr_t
 *)
‰ìhód
Ë*((ˇddr_à*)
œ°∑ge
);

1074 
•lô∑ge
;

1077 
‰ìhód
 = 
œ°∑ge
;

1085  
NULL
;

1087 
•lô∑ge
:

1093 i‡(
bsize
 < 
hóp
->
∑gesize
)

1099 
block
 = 
hód∑ge
, 
eblock
 = hód∑gê+ 
hóp
->
∑gesize
 - 
bsize
;

1100 
block
 < 
eblock
; block +
bsize
)

1101 *((
ˇddr_t
 *)
block
Ëblock + 
bsize
;

1103 *((
ˇddr_t
 *)
eblock
Ë
NULL
;

1106 *((
ˇddr_t
 *)
hód∑ge
Ë
NULL
;

1108 
∑gíum
 = (
hód∑ge
 - 
exã¡
->
memba£
Ë>> 
hóp
->
∑geshi·
;

1119 
exã¡
->
∑gem≠
[
∑gíum
] = 
log2size
 ?Üog2sizê: 
RTHEAP_PLIST
;

1121 
∑gec⁄t
 = 
bsize
 >> 
hóp
->
∑geshi·
;Öagecont > 1;Öagecont--)

1122 
exã¡
->
∑gem≠
[
∑gíum
 + 
∑gec⁄t
 - 1] = 
RTHEAP_PCONT
;

1124  
hód∑ge
;

1125 
	}
}

1164 *
	$πhóp_Æloc
 (
πhóp_t
 *
hóp
, 
u_l⁄g
 
size
, 
mode
)

1167 
u_l⁄g
 
bsize
, 
Êags
;

1168 
ˇddr_t
 
block
;

1169 
log2size
;

1171 i‡(
size
 == 0)

1172  
NULL
;

1174 i‡(
size
 <
hóp
->
∑gesize
)

1182 i‡(
size
 <
RTHEAP_MINALIGNSZ
)

1183 
size
 = (sizê+ 
RTHEAP_MINALLOCSZ
 - 1) & ~(RTHEAP_MINALLOCSZ - 1);

1185 
size
 = (sizê+ 
RTHEAP_MINALIGNSZ
 - 1) & ~(RTHEAP_MINALIGNSZ - 1);

1190 
size
 = (sizê+ 
hóp
->
∑gesize
 - 1) & ~(heap->pagesize - 1);

1197 i‡(
size
 <
hóp
->
∑gesize
 * 2)

1202 
bsize
 = (1 << 
RTHEAP_MINLOG2
), 
log2size
 = RTHEAP_MINLOG2;

1203 
bsize
 < 
size
; bsizê<<1, 
log2size
++)

1206 
Êags
 = 
	`π_•ö_lock_úqßve
(&
hóp
->
lock
);

1208 
block
 = 
hóp
->
buckës
[
log2size
 - 
RTHEAP_MINLOG2
];

1210 i‡(
block
 =
NULL
)

1212 
block
 = 
	`gë_‰ì_ønge
(
hóp
,
bsize
,
log2size
,
mode
);

1214 i‡(
block
 =
NULL
)

1215 
ªÀa£_™d_exô
;

1218 
hóp
->
buckës
[
log2size
 - 
RTHEAP_MINLOG2
] = *((
ˇddr_t
 *)
block
);

1219 
hóp
->
ubyãs
 +
bsize
;

1223 i‡(
size
 > 
hóp
->
maxc⁄t
)

1224  
NULL
;

1226 
Êags
 = 
	`π_•ö_lock_úqßve
(&
hóp
->
lock
);

1229 
block
 = 
	`gë_‰ì_ønge
(
hóp
,
size
,0,
mode
);

1231 i‡(
block
)

1232 
hóp
->
ubyãs
 +
size
;

1235 
ªÀa£_™d_exô
:

1237 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
,&
hóp
->
lock
);

1239  
block
;

1240 
	}
}

1264 
	$πhóp_‰ì
 (
πhóp_t
 *
hóp
, *
block
)

1267 
u_l⁄g
 
∑gíum
, 
∑gec⁄t
, 
boff£t
, 
bsize
, 
Êags
;

1268 
ˇddr_t
 
‰ì∑ge
, 
œ°∑ge
, 
√xçage
, 
èû∑ge
;

1269 
πexã¡_t
 *
exã¡
 = 
NULL
;

1270 
li°_hód
 *
hﬁdî
;

1271 
log2size
, 
≈ages
;

1273 
Êags
 = 
	`π_•ö_lock_úqßve
(&
hóp
->
lock
);

1279 
	`li°_f‹_óch
(
hﬁdî
,&
hóp
->
exã¡s
) {

1281 
exã¡
 = 
	`li°_íåy
(
hﬁdî
,
πexã¡_t
,
lök
);

1283 i‡((
ˇddr_t
)
block
 >
exã¡
->
memba£
 &&

1284 (
ˇddr_t
)
block
 < 
exã¡
->
memlim
)

1288 i‡(!
hﬁdî
)

1289 
u∆ock_™d_Áû
;

1292 
∑gíum
 = ((
ˇddr_t
)
block
 - 
exã¡
->
memba£
Ë>> 
hóp
->
∑geshi·
;

1293 
boff£t
 = ((
ˇddr_t
)
block
 - (
exã¡
->
memba£
 + (
∑gíum
 << 
hóp
->
∑geshi·
)));

1295 
exã¡
->
∑gem≠
[
∑gíum
])

1297 
RTHEAP_PFREE
:

1298 
RTHEAP_PCONT
:

1300 
u∆ock_™d_Áû
:

1302 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
,&
hóp
->
lock
);

1303  
RTHEAP_PARAM
;

1305 
RTHEAP_PLIST
:

1307 
≈ages
 = 1;

1309 
≈ages
 < 
hóp
->npages &&

1310 
exã¡
->
∑gem≠
[
∑gíum
 + 
≈ages
] =
RTHEAP_PCONT
)

1311 
≈ages
++;

1313 
bsize
 = 
≈ages
 * 
hóp
->
∑gesize
;

1317 
‰ì∑ge
 = (
ˇddr_t
)
block
,

1318 
èû∑ge
 = (
ˇddr_t
)
block
 + 
bsize
 - 
hóp
->
∑gesize
;

1319 
‰ì∑ge
 < 
èû∑ge
; fªïagê+
hóp
->
∑gesize
)

1320 *((
ˇddr_t
 *)
‰ì∑ge
Ë‰ì∑gê+ 
hóp
->
∑gesize
;

1324 
∑gec⁄t
 = 0;Öagec⁄à< 
≈ages
;Öagecont++)

1325 
exã¡
->
∑gem≠
[
∑gíum
 + 
∑gec⁄t
] = 
RTHEAP_PFREE
;

1330 
√xçage
 = 
exã¡
->
‰ìli°
, 
œ°∑ge
 = 
NULL
;

1331 
√xçage
 !
NULL
 &&Çexçagê< (
ˇddr_t
)
block
;

1332 
œ°∑ge
 = 
√xçage
,Çexçagê*((
ˇddr_t
 *)nextpage))

1335 *((
ˇddr_t
 *)
èû∑ge
Ë
√xçage
;

1337 i‡(
œ°∑ge
)

1338 *((
ˇddr_t
 *)
œ°∑ge
Ë(ˇddr_t)
block
;

1340 
exã¡
->
‰ìli°
 = (
ˇddr_t
)
block
;

1346 
log2size
 = 
exã¡
->
∑gem≠
[
∑gíum
];

1347 
bsize
 = (1 << 
log2size
);

1349 i‡((
boff£t
 & (
bsize
 - 1)) != 0)

1350 
u∆ock_™d_Áû
;

1354 *((
ˇddr_t
 *)
block
Ë
hóp
->
buckës
[
log2size
 - 
RTHEAP_MINLOG2
];

1355 
hóp
->
buckës
[
log2size
 - 
RTHEAP_MINLOG2
] = 
block
;

1360 
hóp
->
ubyãs
 -
bsize
;

1362 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
,&
hóp
->
lock
);

1365 
	}
}

1408 
	$__πai_hóp_öô
 ()

1410 
πai_globÆ_hóp_size
 = (πai_globÆ_hóp_sizê+ 
PAGE_SIZE
 - 1) & ~(PAGE_SIZE - 1);

1411 i‡(
	`πhóp_öô
(&
πai_globÆ_hóp
, 
NULL
, 
πai_globÆ_hóp_size
, 
PAGE_SIZE
, 0)) {

1412 
	`¥ötk
(
KERN_INFO
 "RTAI[mÆloc]: faûedÅÿöôülizêthêglobÆ hó∞(size=%d byãs).\n", 
πai_globÆ_hóp_size
);

1415 
πai_globÆ_hóp_adr
 = 
πai_globÆ_hóp
.
exã¡s
.
√xt
;

1416 
	`¥ötk
(
KERN_INFO
 "RTAI[mÆloc]: globÆ hó∞sizê%d byãs, <%s>.\n", 
πai_globÆ_hóp_size
, 
CONFIG_RTAI_USE_TLSF
 ? "TLSF" : "BSD");

1418 
	}
}

1420 
	$__πai_hóp_exô
 ()

1422 
	`πhóp_de°roy
(&
πai_globÆ_hóp
, 0);

1423 
	`¥ötk
("RTAI[malloc]: unloaded.\n");

1424 
	}
}

1426 #i‚de‡
CONFIG_RTAI_MALLOC_BUILTIN


1427 
moduÀ_öô
(
__πai_hóp_öô
);

1428 
moduÀ_exô
(
__πai_hóp_exô
);

1431 #i‚de‡
CONFIG_KBUILD


1432 
	#CONFIG_KBUILD


	)

1435 #ifde‡
CONFIG_KBUILD


1436 
EXPORT_SYMBOL
(
πhóp_öô
);

1437 
EXPORT_SYMBOL
(
πhóp_de°roy
);

1438 
EXPORT_SYMBOL
(
πhóp_Æloc
);

1439 
EXPORT_SYMBOL
(
πhóp_‰ì
);

1440 
EXPORT_SYMBOL
(
πai_globÆ_hóp
);

1441 
EXPORT_SYMBOL
(
πai_globÆ_hóp_adr
);

1442 
EXPORT_SYMBOL
(
πai_globÆ_hóp_size
);

	@/usr/src/rtai/base/math/export_glibc.h

19 #i‚de‡
_RTAI_EXPORT_GLIBC_H


20 
	#_RTAI_EXPORT_GLIBC_H


	)

22 
EXPORT_SYMBOL
(
m©hîr
);

24 
EXPORT_SYMBOL
(
acos
);

25 
EXPORT_SYMBOL
(
acosf
);

26 
EXPORT_SYMBOL
(
acosh
);

27 
EXPORT_SYMBOL
(
acoshf
);

28 
EXPORT_SYMBOL
(
asö
);

29 
EXPORT_SYMBOL
(
asöf
);

30 
EXPORT_SYMBOL
(
asöh
);

31 
EXPORT_SYMBOL
(
asöhf
);

32 
EXPORT_SYMBOL
(
©™
);

33 
EXPORT_SYMBOL
(
©™f
);

34 
EXPORT_SYMBOL
(
©™2
);

35 
EXPORT_SYMBOL
(
©™2f
);

36 
EXPORT_SYMBOL
(
©™h
);

37 
EXPORT_SYMBOL
(
©™hf
);

38 
EXPORT_SYMBOL
(
j0
);

39 
EXPORT_SYMBOL
(
j0f
);

40 
EXPORT_SYMBOL
(
j1
);

41 
EXPORT_SYMBOL
(
j1f
);

42 
EXPORT_SYMBOL
(
jn
);

43 
EXPORT_SYMBOL
(
jnf
);

44 
EXPORT_SYMBOL
(
y0
);

45 
EXPORT_SYMBOL
(
y0f
);

46 
EXPORT_SYMBOL
(
y1
);

47 
EXPORT_SYMBOL
(
y1f
);

48 
EXPORT_SYMBOL
(
yn
);

49 
EXPORT_SYMBOL
(
ynf
);

50 
EXPORT_SYMBOL
(
cbπ
);

51 
EXPORT_SYMBOL
(
cbπf
);

52 
EXPORT_SYMBOL
(
c›ysign
);

53 
EXPORT_SYMBOL
(
c›ysignf
);

54 
EXPORT_SYMBOL
(
cosh
);

55 
EXPORT_SYMBOL
(
coshf
);

56 
EXPORT_SYMBOL
(
îf
);

57 
EXPORT_SYMBOL
(
îff
);

58 
EXPORT_SYMBOL
(
îfc
);

59 
EXPORT_SYMBOL
(
îfcf
);

60 
EXPORT_SYMBOL
(
exp
);

61 
EXPORT_SYMBOL
(
expf
);

62 
EXPORT_SYMBOL
(
exp2
);

63 
EXPORT_SYMBOL
(
exp2f
);

64 
EXPORT_SYMBOL
(
expm1
);

65 
EXPORT_SYMBOL
(
expm1f
);

66 
EXPORT_SYMBOL
(
Ábs
);

67 
EXPORT_SYMBOL
(
Ábsf
);

68 
EXPORT_SYMBOL
(
fdim
);

69 
EXPORT_SYMBOL
(
fdimf
);

70 
EXPORT_SYMBOL
(
Êo‹
);

71 
EXPORT_SYMBOL
(
Êo‹f
);

72 
EXPORT_SYMBOL
(
˚û
);

73 
EXPORT_SYMBOL
(
˚ûf
);

74 
EXPORT_SYMBOL
(
fma
);

75 
EXPORT_SYMBOL
(
fmaf
);

76 
EXPORT_SYMBOL
(
fmax
);

77 
EXPORT_SYMBOL
(
fmaxf
);

78 
EXPORT_SYMBOL
(
fmod
);

79 
EXPORT_SYMBOL
(
fmodf
);

80 
EXPORT_SYMBOL
(
‰exp
);

81 
EXPORT_SYMBOL
(
‰expf
);

82 
EXPORT_SYMBOL
(
gamma
);

83 
EXPORT_SYMBOL
(
gammaf
);

84 
EXPORT_SYMBOL
(
lgamma
);

85 
EXPORT_SYMBOL
(
lgammaf
);

86 
EXPORT_SYMBOL
(
lgamma_r
);

87 
EXPORT_SYMBOL
(
lgammaf_r
);

88 
EXPORT_SYMBOL
(
tgamma
);

89 
EXPORT_SYMBOL
(
tgammaf
);

90 
EXPORT_SYMBOL
(
hypŸ
);

91 
EXPORT_SYMBOL
(
hypŸf
);

92 
EXPORT_SYMBOL
(
ûogb
);

93 
EXPORT_SYMBOL
(
ûogbf
);

94 
EXPORT_SYMBOL
(
ldexp
);

95 
EXPORT_SYMBOL
(
ldexpf
);

96 
EXPORT_SYMBOL
(
log
);

97 
EXPORT_SYMBOL
(
logf
);

98 
EXPORT_SYMBOL
(
log10
);

99 
EXPORT_SYMBOL
(
log10f
);

100 
EXPORT_SYMBOL
(
log1p
);

101 
EXPORT_SYMBOL
(
log1pf
);

102 
EXPORT_SYMBOL
(
log2
);

103 
EXPORT_SYMBOL
(
log2f
);

104 
EXPORT_SYMBOL
(
logb
);

105 
EXPORT_SYMBOL
(
logbf
);

106 
EXPORT_SYMBOL
(
Ãöt
);

107 
EXPORT_SYMBOL
(
Ãötf
);

108 
EXPORT_SYMBOL
(
Œröt
);

109 
EXPORT_SYMBOL
(
Œrötf
);

110 
EXPORT_SYMBOL
(
Ãound
);

111 
EXPORT_SYMBOL
(
Ãoundf
);

112 
EXPORT_SYMBOL
(
Œround
);

113 
EXPORT_SYMBOL
(
Œroundf
);

114 
EXPORT_SYMBOL
(
modf
);

115 
EXPORT_SYMBOL
(
modff
);

116 
EXPORT_SYMBOL
(
√¨byöt
);

117 
EXPORT_SYMBOL
(
√¨byötf
);

118 
EXPORT_SYMBOL
(
√xè·î
);

119 
EXPORT_SYMBOL
(
√xè·îf
);

120 
EXPORT_SYMBOL
(
pow
);

121 
EXPORT_SYMBOL
(
powf
);

122 
EXPORT_SYMBOL
(
ªmaödî
);

123 
EXPORT_SYMBOL
(
ªmaödîf
);

124 
EXPORT_SYMBOL
(
ªmquo
);

125 
EXPORT_SYMBOL
(
ªmquof
);

126 
EXPORT_SYMBOL
(
röt
);

127 
EXPORT_SYMBOL
(
rötf
);

128 
EXPORT_SYMBOL
(
round
);

129 
EXPORT_SYMBOL
(
roundf
);

130 
EXPORT_SYMBOL
(
sˇlbn
);

131 
EXPORT_SYMBOL
(
sˇlbnf
);

132 
EXPORT_SYMBOL
(
sˇlb 
);

133 
EXPORT_SYMBOL
(
sˇlb f
);

134 
EXPORT_SYMBOL
(
sö
);

135 
EXPORT_SYMBOL
(
söf
);

136 
EXPORT_SYMBOL
(
cos
);

137 
EXPORT_SYMBOL
(
cosf
);

138 
EXPORT_SYMBOL
(
söh
);

139 
EXPORT_SYMBOL
(
söhf
);

140 
EXPORT_SYMBOL
(
sqπ
);

141 
EXPORT_SYMBOL
(
sqπf
);

142 
EXPORT_SYMBOL
(
èn
);

143 
EXPORT_SYMBOL
(
ènf
);

144 
EXPORT_SYMBOL
(
ènh
);

145 
EXPORT_SYMBOL
(
ènhf
);

146 
EXPORT_SYMBOL
(
åunc
);

147 
EXPORT_SYMBOL
(
åuncf
);

	@/usr/src/rtai/base/math/libm.c

27 
	~<löux/kî√l.h
>

28 
	~<löux/moduÀ.h
>

29 
	~<löux/öô.h
>

31 
	~"πai_m©h.h
"

33 
MODULE_LICENSE
("GPL");

37 
	g°dîr
 = 2;

39 
	#kî∫o_adr
 (&
kî∫o
)

	)

41 *
	$__gëªít
()

43  
kî∫o_adr
;

44 
	}
}

46 *
	$_impuª_±r
()

48  
kî∫o_adr
;

49 
	}
}

51 *
	$__î∫o
()

53  
kî∫o_adr
;

54 
	}
}

56 *
	$__î∫o_loˇti⁄
()

58  
kî∫o_adr
;

59 
	}
}

61 
	$__as£π_Áû
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
)

63 
	`¥ötk
("An '__assert_fail'ássertion has been called.\n");

64 
	}
}

66 
	$Âuts
(c⁄° *
s
, *
°ªam
)

68  
	`¥ötk
("%s\n", 
s
);

69 
	}
}

71 
	#gíîic_echo
(
buf
, 
size
) \

73 
°r
[
size
 + 1]; \

74 
	`mem˝y
(
°r
, 
buf
, 
size
); \

75 
°r
[
size
] = 0; \

76  
	`¥ötk
("%s\n", 
°r
); \

77 } 0)

	)

79 
size_t
 
	$fwrôe
(c⁄° *
±r
, 
size_t
 
size
, size_à
nmemb
, *
°ªam
)

81 
	`gíîic_echo
(
±r
, 
size
*
nmemb
);

82 
	}
}

84 
ssize_t
 
	$wrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyãs
)

86 
	`gíîic_echo
(
buf
, 
nbyãs
);

87 
	}
}

91 *
	$d2°r
(
d
, 
dgt
, *
°r
)

93 c⁄° 
MAXDGT
 = 17;

94 
e
, 
i
;

95 
l
;

96 
p
;

98 i‡(
d
 < 0) {

99 
d
 = -d;

100 
°r
[0] = '-';

102 
°r
[0] = '+';

104 
°r
[1] = '0';

105 
°r
[2] = '.';

106 
i
 = 
	`Â˛assify
(
d
);

107 i‡(
i
 =
FP_ZERO
 || i =
FP_SUBNORMAL
) {

108 
	`mem£t
(&
°r
[3], '0', 
dgt
);

109 
	`°r˝y
(&
°r
[
dgt
 + 3], "e+00");

110  
°r
;

112 i‡(
i
 =
FP_NAN
) {

113 
	`°r˝y
(
°r
, "NaN");

114  
°r
;

116 i‡(
i
 =
FP_INFINITE
) {

117 
	`°r˝y
(
°r
, "Inf");

118  
°r
;

120 i‡(
dgt
 <= 0) {

121 
dgt
 = 1;

122 } i‡(
dgt
 > 
MAXDGT
) {

123 
dgt
 = 
MAXDGT
;

125 
e
 = 
	`log10
(
d
);

126 
p
 = 
	`pow
(10, 
MAXDGT
 - 
e
);

127 
l
 = 
d
*
p
 + 0.5*
	`pow
(10, 
MAXDGT
 - 
dgt
 + (d >= 1));

128 
	`•rötf
(&
°r
[3], "%Œu", 
l
);

129 
i
 = 
dgt
 + 3;

130 
°r
[
i
] = 'e';

131 i‡(
e
 < 0) {

132 
e
 = -e;

133 
°r
[
i
 + 1] = '-';

135 
°r
[
i
 + 1] = '+';

137 
i
 = i + 
	`•rötf
(&
°r
[ò+ 2], "%d", 
e
 + (
l
/
p
 >= 1));

138 
°r
[
i
 + 2] = 0;

139  
°r
;

140 
	}
}

141 
EXPORT_SYMBOL
(
d2°r
);

143 
	gsigngam
;

145 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 1

146 
	~"exp‹t_√wlib.h
"

147 
	gusög
[7] = "NEWLIB";

149 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 2

150 
	~"exp‹t_u˛ibc.h
"

151 
	gusög
[7] = "UCLIBC";

153 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 3

154 
	~"exp‹t_glibc.h
"

155 
	gusög
[7] = "GLIBC";

158 
	$__πai_m©h_öô
()

160 
	`¥ötk
(
KERN_INFO
 "RTAI[m©h]:Üﬂded, usög %s.\n", 
usög
);

162 
	}
}

164 
	$__πai_m©h_exô
()

166 
	`¥ötk
(
KERN_INFO
 "RTAI[math]: unloaded.\n");

167 
	}
}

169 
moduÀ_öô
(
__πai_m©h_öô
);

170 
moduÀ_exô
(
__πai_m©h_exô
);

172 
EXPORT_SYMBOL
(
__Â˛assify
);

173 
EXPORT_SYMBOL
(
__Â˛assifyf
);

174 
EXPORT_SYMBOL
(
__signbô
);

175 
EXPORT_SYMBOL
(
__signbôf
);

177 #i‡
deföed
(
CONFIG_RTAI_MATH_KCOMPLEX
Ë&& (deföed(
_RTAI_EXPORT_GLIBC_H
Ë|| deföed(
_RTAI_EXPORT_NEWLIB_H
))

179 *
	$cd2°r
(
com∂ex
 
cd
, 
dgt
, *
°r
)

181 
i
;

182 
	`d2°r
(
__ªÆ__
 
cd
, 
dgt
, 
°r
);

183 
i
 = 
	`°æí
(
°r
);

184 
°r
[
i
] = ' ';

186 
	`d2°r
(
__imag__
 
cd
, 
dgt
, &
°r
[
i
 + 4]);

187 
°r
[
i
 + 1] = str[i + 4];

188 
°r
[
i
 + 2] = ' ';

189 
°r
[
i
 + 3] = 'j';

190 
°r
[
i
 + 4] = '*';

192 
	`d2°r
(
__imag__
 
cd
, 
dgt
, &
°r
[
i
 + 1]);

193 
°r
[
i
 = 
	`°æí
(str)] = 'j';

194 
°r
[
i
 + 1] = 0;

196  
°r
;

197 
	}
}

198 
EXPORT_SYMBOL
(
cd2°r
);

200 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 3

203 
asmlökage
 
_Com∂ex
 
__˚xp
(_Com∂ex 
x
);

204 
asmlökage
 
_Com∂ex
 
__˛og
(_Com∂ex 
x
);

205 
asmlökage
 
_Com∂ex
 
	$˝ow
(
_Com∂ex
 
x
, _Com∂ex 
y
)

207  
	`__˚xp
(
y
*
	`__˛og
(
x
));

208 
	}
}

209 
asmlökage
 
_Com∂ex
 
__˚xpf
(_Com∂ex 
x
);

210 
asmlökage
 
_Com∂ex
 
__˛ogf
(_Com∂ex 
x
);

211 
asmlökage
 
_Com∂ex
 
	$˝owf
(
_Com∂ex
 
x
, _Com∂ex 
y
)

213  
	`__˚xpf
(
y
*
	`__˛ogf
(
x
));

214 
	}
}

217 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 1

218 
asmlökage
 
_Com∂ex
 
˛og
(_Com∂ex 
x
);

219 
asmlökage
 
_Com∂ex
 
	$˛og10
(
_Com∂ex
 
x
)

221 c⁄° 
⁄e_ovî_ of10
 = 0.4342944819032518276454794132;

222  
	`˛og
(
x
)*
⁄e_ovî_ of10
;

223 
	}
}

224 
asmlökage
 
_Com∂ex
 
˛ogf
(_Com∂ex 
x
);

225 
asmlökage
 
_Com∂ex
 
	$˛og10f
(
_Com∂ex
 
x
)

227 c⁄° 
⁄e_ovî_ of10
 = 0.4342944819032518276454794132;

228  
	`˛ogf
(
x
)*
⁄e_ovî_ of10
;

229 
	}
}

232 
	$°πod
(Ë{  0.0; 
	}
}

234 
	$°πof
(Ë{  0.0; 
	}
}

236 
EXPORT_SYMBOL
(
ˇbs
);

237 
EXPORT_SYMBOL
(
ˇbsf
);

238 
EXPORT_SYMBOL
(
ˇcos
);

239 
EXPORT_SYMBOL
(
ˇcosf
);

240 
EXPORT_SYMBOL
(
ˇcosh
);

241 
EXPORT_SYMBOL
(
ˇcoshf
);

242 
EXPORT_SYMBOL
(
ˇrg
);

243 
EXPORT_SYMBOL
(
ˇrgf
);

244 
EXPORT_SYMBOL
(
ˇsö
);

245 
EXPORT_SYMBOL
(
ˇsöf
);

246 
EXPORT_SYMBOL
(
ˇsöh
);

247 
EXPORT_SYMBOL
(
ˇsöhf
);

248 
EXPORT_SYMBOL
(
ˇèn
);

249 
EXPORT_SYMBOL
(
ˇènf
);

250 
EXPORT_SYMBOL
(
ˇènh
);

251 
EXPORT_SYMBOL
(
ˇènhf
);

252 
EXPORT_SYMBOL
(
ccos
);

253 
EXPORT_SYMBOL
(
ccosf
);

254 
EXPORT_SYMBOL
(
ccosh
);

255 
EXPORT_SYMBOL
(
ccoshf
);

256 
EXPORT_SYMBOL
(
˚xp
);

257 
EXPORT_SYMBOL
(
˚xpf
);

258 
EXPORT_SYMBOL
(
cimag
);

259 
EXPORT_SYMBOL
(
cimagf
);

260 
EXPORT_SYMBOL
(
˛og
);

261 
EXPORT_SYMBOL
(
˛ogf
);

262 
EXPORT_SYMBOL
(
˛og10
);

263 
EXPORT_SYMBOL
(
˛og10f
);

264 
EXPORT_SYMBOL
(
c⁄j
);

265 
EXPORT_SYMBOL
(
c⁄jf
);

266 
EXPORT_SYMBOL
(
˝ow
);

267 
EXPORT_SYMBOL
(
˝owf
);

268 
EXPORT_SYMBOL
(
˝roj
);

269 
EXPORT_SYMBOL
(
˝rojf
);

270 
EXPORT_SYMBOL
(
¸ól
);

271 
EXPORT_SYMBOL
(
¸ólf
);

272 
EXPORT_SYMBOL
(
csö
);

273 
EXPORT_SYMBOL
(
csöf
);

274 
EXPORT_SYMBOL
(
csöh
);

275 
EXPORT_SYMBOL
(
csöhf
);

276 
EXPORT_SYMBOL
(
csqπ
);

277 
EXPORT_SYMBOL
(
csqπf
);

278 
EXPORT_SYMBOL
(
˘™
);

279 
EXPORT_SYMBOL
(
˘™f
);

280 
EXPORT_SYMBOL
(
˘™h
);

281 
EXPORT_SYMBOL
(
˘™hf
);

285 
_Com∂ex
 
	$__muldc3
(
a
, 
b
, 
c
, 
d
)

287 
_Com∂ex
 
z
;

288 
__ªÆ__
 
z
 = 
a
*
c
 - 
b
*
d
;

289 
__imag__
 
z
 = 
a
*
d
 + 
b
*
c
;

290  
z
;

291 
	}
}

293 
_Com∂ex
 
	$__mulsc3
(
a
, 
b
, 
c
, 
d
)

295 
_Com∂ex
 
z
;

296 
__ªÆ__
 
z
 = 
a
*
c
 - 
b
*
d
;

297 
__imag__
 
z
 = 
a
*
d
 + 
b
*
c
;

298  
z
;

299 
	}
}

301 
_Com∂ex
 
	$__divdc3
(
a
, 
b
, 
c
, 
d
)

303 
_Com∂ex
 
z
;

304 
dn
 = 
c
*¯+ 
d
*d;

305 
__ªÆ__
 
z
 = (
a
*
c
 + 
b
*
d
)/
dn
;

306 
__imag__
 
z
 = (-
a
*
d
 + 
b
*
c
)/
dn
;

307  
z
;

308 
	}
}

310 
_Com∂ex
 
	$__divsc3
(
a
, 
b
, 
c
, 
d
)

312 
_Com∂ex
 
z
;

313 
dn
 = 
c
*¯+ 
d
*d;

314 
__ªÆ__
 
z
 = (
a
*
c
 + 
b
*
d
)/
dn
;

315 
__imag__
 
z
 = (-
a
*
d
 + 
b
*
c
)/
dn
;

316  
z
;

317 
	}
}

331 
_Com∂ex


332 
	$__muldc3
(
__a
, 
__b
, 
__c
, 
__d
)

334 
__ac
 = 
__a
 * 
__c
;

335 
__bd
 = 
__b
 * 
__d
;

336 
__ad
 = 
__a
 * 
__d
;

337 
__bc
 = 
__b
 * 
__c
;

338 
_Com∂ex
 
z
;

339 
__ªÆ__
 
z
 = 
__ac
 - 
__bd
;

340 
__imag__
 
z
 = 
__ad
 + 
__bc
;

341 i‡(
	`i¢™
(
__ªÆ__
 
z
Ë&& i¢™(
__imag__
 z))

343 
__ªˇlc
 = 0;

344 i‡(
	`isöf
(
__a
Ë|| isöf(
__b
))

346 
__a
 = 
	`c›ysign
(
	`isöf
(__a) ? 1 : 0, __a);

347 
__b
 = 
	`c›ysign
(
	`isöf
(__b) ? 1 : 0, __b);

348 i‡(
	`i¢™
(
__c
))

349 
__c
 = 
	`c›ysign
(0, __c);

350 i‡(
	`i¢™
(
__d
))

351 
__d
 = 
	`c›ysign
(0, __d);

352 
__ªˇlc
 = 1;

354 i‡(
	`isöf
(
__c
Ë|| isöf(
__d
))

356 
__c
 = 
	`c›ysign
(
	`isöf
(__c) ? 1 : 0, __c);

357 
__d
 = 
	`c›ysign
(
	`isöf
(__d) ? 1 : 0, __d);

358 i‡(
	`i¢™
(
__a
))

359 
__a
 = 
	`c›ysign
(0, __a);

360 i‡(
	`i¢™
(
__b
))

361 
__b
 = 
	`c›ysign
(0, __b);

362 
__ªˇlc
 = 1;

364 i‡(!
__ªˇlc
 && (
	`isöf
(
__ac
Ë|| isöf(
__bd
) ||

365 
	`isöf
(
__ad
Ë|| isöf(
__bc
)))

367 i‡(
	`i¢™
(
__a
))

368 
__a
 = 
	`c›ysign
(0, __a);

369 i‡(
	`i¢™
(
__b
))

370 
__b
 = 
	`c›ysign
(0, __b);

371 i‡(
	`i¢™
(
__c
))

372 
__c
 = 
	`c›ysign
(0, __c);

373 i‡(
	`i¢™
(
__d
))

374 
__d
 = 
	`c›ysign
(0, __d);

375 
__ªˇlc
 = 1;

377 i‡(
__ªˇlc
)

379 
__ªÆ__
 
z
 = 
INFINITY
 * (
__a
 * 
__c
 - 
__b
 * 
__d
);

380 
__imag__
 
z
 = 
INFINITY
 * (
__a
 * 
__d
 + 
__b
 * 
__c
);

383  
z
;

384 
	}
}

386 
_Com∂ex


387 
	$__mulsc3
(
__a
, 
__b
, 
__c
, 
__d
)

389 
__ac
 = 
__a
 * 
__c
;

390 
__bd
 = 
__b
 * 
__d
;

391 
__ad
 = 
__a
 * 
__d
;

392 
__bc
 = 
__b
 * 
__c
;

393 
_Com∂ex
 
z
;

394 
__ªÆ__
 
z
 = 
__ac
 - 
__bd
;

395 
__imag__
 
z
 = 
__ad
 + 
__bc
;

396 i‡(
	`i¢™
(
__ªÆ__
 
z
Ë&& i¢™(
__imag__
 z))

398 
__ªˇlc
 = 0;

399 i‡(
	`isöf
(
__a
Ë|| isöf(
__b
))

401 
__a
 = 
	`c›ysignf
(
	`isöf
(__a) ? 1 : 0, __a);

402 
__b
 = 
	`c›ysignf
(
	`isöf
(__b) ? 1 : 0, __b);

403 i‡(
	`i¢™
(
__c
))

404 
__c
 = 
	`c›ysignf
(0, __c);

405 i‡(
	`i¢™
(
__d
))

406 
__d
 = 
	`c›ysignf
(0, __d);

407 
__ªˇlc
 = 1;

409 i‡(
	`isöf
(
__c
Ë|| isöf(
__d
))

411 
__c
 = 
	`c›ysignf
(
	`isöf
(__c) ? 1 : 0, __c);

412 
__d
 = 
	`c›ysignf
(
	`isöf
(__d) ? 1 : 0, __d);

413 i‡(
	`i¢™
(
__a
))

414 
__a
 = 
	`c›ysignf
(0, __a);

415 i‡(
	`i¢™
(
__b
))

416 
__b
 = 
	`c›ysignf
(0, __b);

417 
__ªˇlc
 = 1;

419 i‡(!
__ªˇlc
 && (
	`isöf
(
__ac
Ë|| isöf(
__bd
) ||

420 
	`isöf
(
__ad
Ë|| isöf(
__bc
)))

422 i‡(
	`i¢™
(
__a
))

423 
__a
 = 
	`c›ysignf
(0, __a);

424 i‡(
	`i¢™
(
__b
))

425 
__b
 = 
	`c›ysignf
(0, __b);

426 i‡(
	`i¢™
(
__c
))

427 
__c
 = 
	`c›ysignf
(0, __c);

428 i‡(
	`i¢™
(
__d
))

429 
__d
 = 
	`c›ysignf
(0, __d);

430 
__ªˇlc
 = 1;

432 i‡(
__ªˇlc
)

434 
__ªÆ__
 
z
 = 
INFINITY
 * (
__a
 * 
__c
 - 
__b
 * 
__d
);

435 
__imag__
 
z
 = 
INFINITY
 * (
__a
 * 
__d
 + 
__b
 * 
__c
);

438  
z
;

439 
	}
}

441 
_Com∂ex


442 
	$__divdc3
(
__a
, 
__b
, 
__c
, 
__d
)

444 
__ûogbw
 = 0;

445 
__logbw
 = 
	`logb
(
	`fmax
(
	`Ábs
(
__c
), fabs(
__d
)));

446 
__díom
 = 
__c
 * __¯+ 
__d
 * __d;

447 
_Com∂ex
 
z
;

448 i‡(
	`isföôe
(
__logbw
))

450 
__ûogbw
 = ()
__logbw
;

451 
__c
 = 
	`sˇlbn
(__c, -
__ûogbw
);

452 
__d
 = 
	`sˇlbn
(__d, -
__ûogbw
);

454 
__ªÆ__
 
z
 = 
	`sˇlbn
((
__a
 * 
__c
 + 
__b
 * 
__d
Ë/ 
__díom
, -
__ûogbw
);

455 
__imag__
 
z
 = 
	`sˇlbn
((
__b
 * 
__c
 - 
__a
 * 
__d
Ë/ 
__díom
, -
__ûogbw
);

456 i‡(
	`i¢™
(
__ªÆ__
 
z
Ë&& i¢™(
__imag__
 z))

458 i‡((
__díom
 =0.0Ë&& (!
	`i¢™
(
__a
Ë|| !i¢™(
__b
)))

460 
__ªÆ__
 
z
 = 
	`c›ysign
(
INFINITY
, 
__c
Ë* 
__a
;

461 
__imag__
 
z
 = 
	`c›ysign
(
INFINITY
, 
__c
Ë* 
__b
;

463 i‡((
	`isöf
(
__a
Ë|| isöf(
__b
)Ë&& 
	`isföôe
(
__c
Ë&& isföôe(
__d
))

465 
__a
 = 
	`c›ysign
(
	`isöf
(__a) ? 1.0 : 0.0, __a);

466 
__b
 = 
	`c›ysign
(
	`isöf
(__b) ? 1.0 : 0.0, __b);

467 
__ªÆ__
 
z
 = 
INFINITY
 * (
__a
 * 
__c
 + 
__b
 * 
__d
);

468 
__imag__
 
z
 = 
INFINITY
 * (
__b
 * 
__c
 - 
__a
 * 
__d
);

470 i‡(
	`isöf
(
__logbw
Ë&& __logbw > 0.0 && 
	`isföôe
(
__a
Ë&& isföôe(
__b
))

472 
__c
 = 
	`c›ysign
(
	`isöf
(__c) ? 1.0 : 0.0, __c);

473 
__d
 = 
	`c›ysign
(
	`isöf
(__d) ? 1.0 : 0.0, __d);

474 
__ªÆ__
 
z
 = 0.0 * (
__a
 * 
__c
 + 
__b
 * 
__d
);

475 
__imag__
 
z
 = 0.0 * (
__b
 * 
__c
 - 
__a
 * 
__d
);

478  
z
;

479 
	}
}

482 
_Com∂ex


483 
	$__divsc3
(
__a
, 
__b
, 
__c
, 
__d
)

485 
__ûogbw
 = 0;

486 
__logbw
 = 
	`logbf
(
	`fmaxf
(
	`Ábsf
(
__c
), fabsf(
__d
)));

487 
__díom
 = 
__c
 * __¯+ 
__d
 * __d;

488 
_Com∂ex
 
z
;

489 i‡(
	`isföôe
(
__logbw
))

491 
__ûogbw
 = ()
__logbw
;

492 
__c
 = 
	`sˇlbnf
(__c, -
__ûogbw
);

493 
__d
 = 
	`sˇlbnf
(__d, -
__ûogbw
);

495 
__ªÆ__
 
z
 = 
	`sˇlbnf
((
__a
 * 
__c
 + 
__b
 * 
__d
Ë/ 
__díom
, -
__ûogbw
);

496 
__imag__
 
z
 = 
	`sˇlbnf
((
__b
 * 
__c
 - 
__a
 * 
__d
Ë/ 
__díom
, -
__ûogbw
);

497 i‡(
	`i¢™
(
__ªÆ__
 
z
Ë&& i¢™(
__imag__
 z))

499 i‡((
__díom
 =0Ë&& (!
	`i¢™
(
__a
Ë|| !i¢™(
__b
)))

501 
__ªÆ__
 
z
 = 
	`c›ysignf
(
INFINITY
, 
__c
Ë* 
__a
;

502 
__imag__
 
z
 = 
	`c›ysignf
(
INFINITY
, 
__c
Ë* 
__b
;

504 i‡((
	`isöf
(
__a
Ë|| isöf(
__b
)Ë&& 
	`isföôe
(
__c
Ë&& isföôe(
__d
))

506 
__a
 = 
	`c›ysignf
(
	`isöf
(__a) ? 1 : 0, __a);

507 
__b
 = 
	`c›ysignf
(
	`isöf
(__b) ? 1 : 0, __b);

508 
__ªÆ__
 
z
 = 
INFINITY
 * (
__a
 * 
__c
 + 
__b
 * 
__d
);

509 
__imag__
 
z
 = 
INFINITY
 * (
__b
 * 
__c
 - 
__a
 * 
__d
);

511 i‡(
	`isöf
(
__logbw
Ë&& __logbw > 0 && 
	`isföôe
(
__a
Ë&& isföôe(
__b
))

513 
__c
 = 
	`c›ysignf
(
	`isöf
(__c) ? 1 : 0, __c);

514 
__d
 = 
	`c›ysignf
(
	`isöf
(__d) ? 1 : 0, __d);

515 
__ªÆ__
 
z
 = 0 * (
__a
 * 
__c
 + 
__b
 * 
__d
);

516 
__imag__
 
z
 = 0 * (
__b
 * 
__c
 - 
__a
 * 
__d
);

519  
z
;

520 
	}
}

548 
	~<löux/kî√l.h
>

549 
	~<löux/moduÀ.h
>

550 
	~<löux/öô.h
>

551 
	~<πai_m©h.h
>

553 
MODULE_LICENSE
("GPL");

555 
	glibm_î∫o
;

557 
	gvîbo£
 = 1;

559 
	$__πai_m©h_öô
()

561 if(
vîbo£
){

562 
	`¥ötk
(
KERN_INFO
 "RTAI[math]:Üoaded.\n");

565 
	}
}

567 
	$__πai_m©h_exô
()

569 if(
vîbo£
){

570 
	`¥ötk
(
KERN_INFO
 "RTAI[math]: unloaded.\n");

572 
	}
}

574 #i‚de‡
CONFIG_RTAI_MATH_BUILTIN


575 
moduÀ_öô
(
__πai_m©h_öô
);

576 
moduÀ_exô
(
__πai_m©h_exô
);

579 #ifde‡
CONFIG_KBUILD


580 
EXPORT_SYMBOL
(
acos
);

581 
EXPORT_SYMBOL
(
asö
);

582 
EXPORT_SYMBOL
(
©™
);

583 
EXPORT_SYMBOL
(
©™2
);

584 
EXPORT_SYMBOL
(
˚û
);

585 
EXPORT_SYMBOL
(
c›ysign
);

586 
EXPORT_SYMBOL
(
cos
);

587 
EXPORT_SYMBOL
(
cosh
);

588 
EXPORT_SYMBOL
(
exp
);

589 
EXPORT_SYMBOL
(
expm1
);

590 
EXPORT_SYMBOL
(
Ábs
);

591 
EXPORT_SYMBOL
(
Êo‹
);

592 
EXPORT_SYMBOL
(
fmod
);

593 
EXPORT_SYMBOL
(
‰exp
);

594 
EXPORT_SYMBOL
(
log
);

595 
EXPORT_SYMBOL
(
log10
);

596 
EXPORT_SYMBOL
(
modf
);

597 
EXPORT_SYMBOL
(
pow
);

598 
EXPORT_SYMBOL
(
sˇlbn
);

599 
EXPORT_SYMBOL
(
sö
);

600 
EXPORT_SYMBOL
(
söh
);

601 
EXPORT_SYMBOL
(
sqπ
);

602 
EXPORT_SYMBOL
(
èn
);

603 
EXPORT_SYMBOL
(
ènh
);

605 #ifde‡
CONFIG_RTAI_MATH_C99


606 
EXPORT_SYMBOL
(
acosh
);

607 
EXPORT_SYMBOL
(
asöh
);

608 
EXPORT_SYMBOL
(
©™h
);

609 
EXPORT_SYMBOL
(
ˇbs
);

610 
EXPORT_SYMBOL
(
cbπ
);

611 
EXPORT_SYMBOL
(
dªm
);

612 
EXPORT_SYMBOL
(
îf
);

613 
EXPORT_SYMBOL
(
îfc
);

614 
EXPORT_SYMBOL
(
gamma
);

615 
EXPORT_SYMBOL
(
gamma_r
);

616 
EXPORT_SYMBOL
(
hypŸ
);

617 
EXPORT_SYMBOL
(
ûogb
);

618 
EXPORT_SYMBOL
(
j0
);

619 
EXPORT_SYMBOL
(
j1
);

620 
EXPORT_SYMBOL
(
jn
);

621 
EXPORT_SYMBOL
(
ldexp
);

622 
EXPORT_SYMBOL
(
lgamma
);

623 
EXPORT_SYMBOL
(
lgamma_r
);

624 
EXPORT_SYMBOL
(
log1p
);

625 
EXPORT_SYMBOL
(
logb
);

626 
EXPORT_SYMBOL
(
m©hîr
);

627 
EXPORT_SYMBOL
(
√¨byöt
);

628 
EXPORT_SYMBOL
(
√xè·î
);

629 
EXPORT_SYMBOL
(
ªmaödî
);

630 
EXPORT_SYMBOL
(
röt
);

631 
EXPORT_SYMBOL
(
röâﬁ
);

632 
EXPORT_SYMBOL
(
round
);

633 
EXPORT_SYMBOL
(
roundtﬁ
);

634 
EXPORT_SYMBOL
(
sˇlb
);

635 
EXPORT_SYMBOL
(
signgam
);

636 
EXPORT_SYMBOL
(
signifiˇnd
);

637 
EXPORT_SYMBOL
(
åunc
);

638 
EXPORT_SYMBOL
(
y0
);

639 
EXPORT_SYMBOL
(
y1
);

640 
EXPORT_SYMBOL
(
yn
);

641 
EXPORT_SYMBOL
(
libm_î∫o
);

	@/usr/src/rtai/base/sched/api.c

27 
	~<löux/moduÀ.h
>

28 
	~<asm/uac˚ss.h
>

29 
	~<asm/uni°d.h
>

31 
	~<πai_schedc‹e.h
>

32 
	~<πai_¥öhî.h
>

33 
	~<πai_ªgi°ry.h
>

39 
RTAI_SYSCALL_MODE
 
	$π_£t_sched_pﬁicy
(
RT_TASK
 *
èsk
, 
pﬁicy
, 
º_qu™tum_ns
)

41 i‡(!
èsk
) {

42 
èsk
 = 
RT_CURRENT
;

44 i‡((
èsk
->
pﬁicy
 =Öolicy ? 1 : 0)) {

45 
èsk
->
º_qu™tum
 = 
	`«no2cou¡_˝uid
(
º_qu™tum_ns
,Åask->
ru¬abÀ_⁄_˝us
);

46 i‡((
èsk
->
º_qu™tum
 & 0xF0000000) || !task->rr_quantum) {

47 #ifde‡
CONFIG_SMP


48 
èsk
->
º_qu™tum
 = 
π_smp_times
[èsk->
ru¬abÀ_⁄_˝us
].
löux_tick
;

50 
èsk
->
º_qu™tum
 = 
π_times
.
löux_tick
;

53 
èsk
->
º_ªmaöög
 =Åask->
º_qu™tum
;

54 
èsk
->
yõld_time
 = 0;

56 
	}
}

74 
	$π_gë_¥io
(
RT_TASK
 *
èsk
)

76 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

77  -
EINVAL
;

79  
èsk
->
ba£_¥i‹ôy
;

80 
	}
}

100 
	$π_gë_öhî_¥io
(
RT_TASK
 *
èsk
)

102 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

103  -
EINVAL
;

105  
èsk
->
¥i‹ôy
;

106 
	}
}

130 
RTAI_SYSCALL_MODE
 
	$π_gë_¥i‹ôõs
(
RT_TASK
 *
èsk
, *
¥i‹ôy
, *
ba£_¥i‹ôy
)

132 i‡(!
èsk
) {

133 
èsk
 = 
RT_CURRENT
;

135 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
 || !
¥i‹ôy
 || !
ba£_¥i‹ôy
) {

136  -
EINVAL
;

138 *
¥i‹ôy
 = 
èsk
->priority;

139 *
ba£_¥i‹ôy
 = 
èsk
->base_priority;

141 
	}
}

156 
RTAI_SYSCALL_MODE
 
	$π_èsk_gë_öfo
(
RT_TASK
 *
èsk
, 
RT_TASK_INFO
 *
èsk_öfo
)

158 i‡(!
èsk
) {

159 
èsk
 = 
RT_CURRENT
;

161 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
 || 
èsk_öfo
 =
NULL
) {

162  -
EINVAL
;

164 
èsk_öfo
->
≥riod
 = 
èsk
->period;

165 
èsk_öfo
->
ba£_¥i‹ôy
 = 
èsk
->base_priority;

166 
èsk_öfo
->
¥i‹ôy
 = 
èsk
->priority;

168 
	}
}

190 
RTAI_SYSCALL_MODE
 
	$π_ch™ge_¥io
(
RT_TASK
 *
èsk
, 
¥i‹ôy
)

192 
Êags
;

193 
¥io
, 
ba£_¥i‹ôy
;

194 
RT_TASK
 *
rhód
;

196 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
 || 
¥i‹ôy
 < 0) {

197  -
EINVAL
;

200 
¥io
 = 
èsk
->
ba£_¥i‹ôy
;

201 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

202 i‡(!
èsk
->
is_h¨d
 && 
¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

203 
¥i‹ôy
 +
BASE_SOFT_PRIORITY
;

205 
ba£_¥i‹ôy
 = 
èsk
->base_priority;

206 
èsk
->
ba£_¥i‹ôy
 = 
¥i‹ôy
;

207 i‡(
ba£_¥i‹ôy
 =
èsk
->
¥i‹ôy
 ||Öriority <Åask->priority) {

208 
QUEUE
 *
q
, *
blocked_⁄
;

209 
schedm≠
 = 0;

211 
èsk
->
¥i‹ôy
 =Öriority;

212 i‡(
èsk
->
°©e
 =
RT_SCHED_READY
) {

213 i‡((
èsk
->
Ωªv
)->
¥i‹ôy
 >Åask->¥i‹ôy || (èsk->
∫ext
)->priority <Åask->priority) {

214 
rhód
 = 
π_smp_löux_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
;

215 (
èsk
->
Ωªv
)->
∫ext
 =Åask->rnext;

216 (
èsk
->
∫ext
)->
Ωªv
 =Åask->rprev;

217 
	`íq_ªady_èsk
(
èsk
);

218 i‡(
rhód
 !
π_smp_löux_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
) {

219 #ifde‡
CONFIG_SMP


220 
	`__£t_bô
(
èsk
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

222 
schedm≠
 = 1;

228 } i‡(()(
blocked_⁄
 = 
èsk
->blocked_⁄Ë> 
RTE_HIGERR
 && ((—ask->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë&& ((
SEM
 *)blocked_⁄)->
ty≥
 > 0Ë|| (èsk->°©ê& (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
)))) {

229 i‡(
èsk
->
queue
.
¥ev
 !(
blocked_⁄
 =Åask->blocked_on)) {

230 
q
 = 
blocked_⁄
;

231 (
èsk
->
queue
.
¥ev
)->
√xt
 =Åask->queue.next;

232 (
èsk
->
queue
.
√xt
)->
¥ev
 =Åask->queue.prev;

233 (
q
 = q->
√xt
Ë!
blocked_⁄
 && (q->
èsk
)->
¥i‹ôy
 <=Öriority);

234 
q
->
¥ev
 = (
èsk
->
queue
.¥ev = q->¥ev)->
√xt
 = &(task->queue);

235 
èsk
->
queue
.
√xt
 = 
q
;

236 i‡(
èsk
->
queue
.
¥ev
 !
blocked_⁄
) {

240 
èsk
 = (èsk->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë? ((
SEM
 *)
blocked_⁄
)->
owndby
 : blocked_on->task;

242 } 
èsk
 &&Åask->
¥i‹ôy
 >Öriority);

243 i‡(
schedm≠
) {

244 #ifde‡
CONFIG_SMP


245 i‡(
	`ã°_™d_˛ór_bô
(
	`πai_˝uid
(), &
schedm≠
)) {

246 
	`RT_SCHEDULE_MAP_BOTH
(
schedm≠
);

248 
	`RT_SCHEDULE_MAP
(
schedm≠
);

251 
	`π_scheduÀ
();

255 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

256  
¥io
;

257 
	}
}

271 
RT_TASK
 *
	$π_whﬂmi
()

273  
	`_π_whﬂmi
();

274 
	}
}

296 
	$π_èsk_yõld
()

298 
RT_TASK
 *
π_cuºít
, *
èsk
;

299 
Êags
;

301 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

302 
π_cuºít
 = 
RT_CURRENT
;

303 i‡(
π_smp_löux_èsk
[
π_cuºít
->
ru¬abÀ_⁄_˝us
].
∫ext
 ==Ñt_current) {

304 
èsk
 = 
π_cuºít
->
∫ext
;

305 
π_cuºít
->
¥i‹ôy
 =
èsk
->priority) {

306 
èsk
 =Åask->
∫ext
;

308 i‡(
èsk
 !
π_cuºít
->
∫ext
) {

309 (
π_cuºít
->
Ωªv
)->
∫ext
 =Ñt_current->rnext;

310 (
π_cuºít
->
∫ext
)->
Ωªv
 =Ñt_current->rprev;

311 
èsk
->
Ωªv
 = (
π_cuºít
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñt_current;

312 
π_cuºít
->
∫ext
 = 
èsk
;

313 
	`π_scheduÀ
();

316 
	`π_scheduÀ
();

318 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

319 
	}
}

338 
RTAI_SYSCALL_MODE
 
	$π_èsk_su•íd
(
RT_TASK
 *
èsk
)

340 
Êags
;

342 i‡(!
èsk
) {

343 
èsk
 = 
RT_CURRENT
;

344 } i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

345  -
EINVAL
;

348 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

349 i‡(!
	`èsk_owns_£ms
(
èsk
Ë&& !èsk->
su•dïth
) {

350 
èsk
->
su•dïth
 = 1;

351 i‡(
èsk
 =
RT_CURRENT
) {

352 
èsk
->
blocked_⁄
 = (*)task;

353 
	`ªm_ªady_cuºít
(
èsk
);

354 
èsk
->
°©e
 |
RT_SCHED_SUSPENDED
;

355 
	`π_scheduÀ
();

356 i‡(
	`u∆ikñy
(
èsk
->
blocked_⁄
 !
NULL
)) {

357 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

358  
RTE_UNBLKD
;

361 
	`ªm_ªady_èsk
(
èsk
);

362 
	`ªm_timed_èsk
(
èsk
);

363 
èsk
->
°©e
 |
RT_SCHED_SUSPENDED
;

364 i‡(
èsk
->
ru¬abÀ_⁄_˝us
 !
	`πai_˝uid
()) {

365 
	`£nd_sched_ùi
(1 << 
èsk
->
ru¬abÀ_⁄_˝us
);

369 
èsk
->
su•dïth
++;

371 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

372  
èsk
->
su•dïth
;

373 
	}
}

376 
RTAI_SYSCALL_MODE
 
	$π_èsk_su•íd_if
(
RT_TASK
 *
èsk
)

378 
Êags
;

380 i‡(!
èsk
) {

381 
èsk
 = 
RT_CURRENT
;

382 } i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

383  -
EINVAL
;

386 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

387 i‡(
èsk
->
su•dïth
 < 0) {

388 
èsk
->
su•dïth
++;

390 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

391  
èsk
->
su•dïth
;

392 
	}
}

395 
RTAI_SYSCALL_MODE
 
	$π_èsk_su•íd_u¡û
(
RT_TASK
 *
èsk
, 
RTIME
 
time
)

397 
Êags
;

399 i‡(!
èsk
) {

400 
èsk
 = 
RT_CURRENT
;

401 } i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

402  -
EINVAL
;

405 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

406 i‡(!
	`èsk_owns_£ms
(
èsk
Ë&& !èsk->
su•dïth
) {

407 #ifde‡
CONFIG_SMP


408 
˝uid
 = 
	`πai_˝uid
();

410 i‡((
èsk
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

411 
èsk
->
su•dïth
 = 1;

412 i‡(
èsk
 =
RT_CURRENT
) {

413 
ªtvÆ
 = 0;

414 
èsk
->
blocked_⁄
 = (*)task;

415 
	`ªm_ªady_cuºít
(
èsk
);

416 
	`íq_timed_èsk
(
èsk
);

417 
èsk
->
°©e
 |(
RT_SCHED_SUSPENDED
 | 
RT_SCHED_DELAYED
);

418 
	`π_scheduÀ
();

419 i‡((*)
èsk
->
blocked_⁄
 > 
RTP_HIGERR
) {

420 
ªtvÆ
 = 
RTE_TIMOUT
;

421 } i‡(
	`u∆ikñy
(
èsk
->
blocked_⁄
 !
NULL
)) {

422 
ªtvÆ
 = 
RTE_UNBLKD
;

424 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

425  
ªtvÆ
 ?ÑëvÆ : 
èsk
->
su•dïth
;

427 
	`ªm_ªady_èsk
(
èsk
);

428 i‡(!(
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

429 
	`íq_timed_èsk
(
èsk
);

431 
èsk
->
°©e
 |(
RT_SCHED_SUSPENDED
 | 
RT_SCHED_DELAYED
);

432 i‡(
èsk
->
ru¬abÀ_⁄_˝us
 !
	`πai_˝uid
()) {

433 
	`£nd_sched_ùi
(1 << 
èsk
->
ru¬abÀ_⁄_˝us
);

437 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

438  
RTE_TMROVRN
;

441 
èsk
->
su•dïth
++;

443 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

444  
èsk
->
su•dïth
;

445 
	}
}

448 
RTAI_SYSCALL_MODE
 
	$π_èsk_su•íd_timed
(
RT_TASK
 *
èsk
, 
RTIME
 
dñay
)

450  
	`π_èsk_su•íd_u¡û
(
èsk
, 
	`gë_time
(Ë+ 
dñay
);

451 
	}
}

470 
RTAI_SYSCALL_MODE
 
	$π_èsk_ªsume
(
RT_TASK
 *
èsk
)

472 
Êags
;

474 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

475  -
EINVAL
;

478 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

479 i‡(!(--
èsk
->
su•dïth
)) {

480 
	`ªm_timed_èsk
(
èsk
);

481 i‡((
èsk
->
°©e
 &~(
RT_SCHED_SUSPENDED
 | 
RT_SCHED_DELAYED
)Ë=
RT_SCHED_READY
) {

482 
èsk
->
blocked_⁄
 = 
NULL
;

483 
	`íq_ªady_èsk
(
èsk
);

484 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

487 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

489 
	}
}

531 
	$π_gë_èsk_°©e
(
RT_TASK
 *
èsk
)

533  
èsk
->
°©e
;

534 
	}
}

566 
	$π_löux_u£_Âu
(
u£_Âu_Êag
)

568 
˝uid
;

569 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

570 
π_löux_èsk
.
u£s_Âu
 = 
u£_Âu_Êag
 ? 1 : 0;

572 
	}
}

600 
RTAI_SYSCALL_MODE
 
	$π_èsk_u£_Âu
(
RT_TASK
 *
èsk
, 
u£_Âu_Êag
)

602 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

603  -
EINVAL
;

605 
èsk
->
u£s_Âu
 = 
u£_Âu_Êag
 ? 1 : 0;

607 
	}
}

632 
RTAI_SYSCALL_MODE
 
π_èsk_sig«l_h™dÀr
(
RT_TASK
 *
èsk
, (*
h™dÀr
)())

634 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

635  -
EINVAL
;

637 
èsk
->
sig«l
 = 
h™dÀr
;

639 
	}
}

643 
ïoch_°ru˘
 
	gboŸ_ïoch
 = { 
__SPIN_LOCK_UNLOCKED
(
boŸ_ïoch
.
lock
), 0, };

644 
EXPORT_SYMBOL
(
boŸ_ïoch
);

646 
ölöe
 
	$_π_gë_boŸ_ïoch
(vﬁ©ûê
RTIME
 
time_‹ig
[])

648 
Êags
;

649 
timevÆ
 
tv
;

650 
RTIME
 
t
;

652 
Êags
 = 
	`π_•ö_lock_úqßve
(&
boŸ_ïoch
.
lock
);

653 
	`do_gëtimeofday
(&
tv
);

654 
t
 = 
	`πai_rdtsc
();

655 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
boŸ_ïoch
.
lock
);

657 
time_‹ig
[0] = 
tv
.
tv_£c
*(
RTIME
)
tu√d
.
˝u_‰eq
 + 
	`imuldiv
—v.
tv_u£c
,Åu√d.˝u_‰eq, 1000000Ë- 
t
;

658 
time_‹ig
[1] = 
tv
.
tv_£c
*1000000000ULL +Åv.
tv_u£c
*1000ULL - 
	`Œimd
(
t
, 1000000000, 
tu√d
.
˝u_‰eq
);

659 
	}
}

661 
	$π_gë_boŸ_ïoch
()

663 
u£
;

664 
	`_π_gë_boŸ_ïoch
(
boŸ_ïoch
.
time
[
u£
 = 1 - boŸ_ïoch.
tou£
]);

665 
boŸ_ïoch
.
tou£
 = 
u£
;

666 
	}
}

668 
	$π_gëtime‹ig
(
RTIME
 
time_‹ig
[])

670 i‡(
time_‹ig
 =
NULL
) {

671 
	`π_gë_boŸ_ïoch
();

673 
	`_π_gë_boŸ_ïoch
(
time_‹ig
);

675 
	}
}

710 
RTAI_SYSCALL_MODE
 
	$π_èsk_make_≥riodic_ªœtive_ns
(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_dñay
, RTIME 
≥riod
)

712 
Êags
;

714 i‡(!
èsk
) {

715 
èsk
 = 
RT_CURRENT
;

716 } i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

717  -
EINVAL
;

719 
°¨t_dñay
 = 
	`«no2cou¡_˝uid
(°¨t_dñay, 
èsk
->
ru¬abÀ_⁄_˝us
);

720 
≥riod
 = 
	`«no2cou¡_˝uid
’îiod, 
èsk
->
ru¬abÀ_⁄_˝us
);

721 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

722 
èsk
->
≥riodic_ªsume_time
 =Åask->
ªsume_time
 = 
	`π_gë_time_˝uid
—ask->
ru¬abÀ_⁄_˝us
Ë+ 
°¨t_dñay
;

723 
èsk
->
≥riod
 =Öeriod;

724 
èsk
->
su•dïth
 = 0;

725 i‡(!(
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

726 
	`ªm_ªady_èsk
(
èsk
);

727 
èsk
->
°©e
 = (èsk->°©ê& ~
RT_SCHED_SUSPENDED
Ë| 
RT_SCHED_DELAYED
;

728 
	`íq_timed_èsk
(
èsk
);

730 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

731 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

733 
	}
}

769 
RTAI_SYSCALL_MODE
 
	$π_èsk_make_≥riodic
(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_time
, RTIME 
≥riod
)

771 
Êags
;

773 i‡(!
èsk
) {

774 
èsk
 = 
RT_CURRENT
;

775 } i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

776  -
EINVAL
;

778 
	`REALTIME2COUNT
(
°¨t_time
);

779 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

780 
èsk
->
≥riodic_ªsume_time
 =Åask->
ªsume_time
 = 
°¨t_time
;

781 
èsk
->
≥riod
 =Öeriod;

782 
èsk
->
su•dïth
 = 0;

783 i‡(!(
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

784 
	`ªm_ªady_èsk
(
èsk
);

785 
èsk
->
°©e
 = (èsk->°©ê& ~
RT_SCHED_SUSPENDED
Ë| 
RT_SCHED_DELAYED
;

786 
	`íq_timed_èsk
(
èsk
);

788 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

789 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

791 
	}
}

813 
	$π_èsk_waô_≥riod
()

815 
DECLARE_RT_CURRENT
;

816 
Êags
;

818 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

819 
ASSIGN_RT_CURRENT
;

820 i‡(
π_cuºít
->
ªsync_‰ame
) {

821 
π_cuºít
->
ªsync_‰ame
 = 0;

822 
π_cuºít
->
≥riodic_ªsume_time
 =Ñt_cuºít->
ªsume_time
 = 
⁄eshŸ_timî
 ? 
	`πai_rdtsc
() :

823 #ifde‡
CONFIG_SMP


824 
π_smp_times
[
˝uid
].
tick_time
;

826 
π_times
.
tick_time
;

828 } i‡((
π_cuºít
->
≥riodic_ªsume_time
 +π_cuºít->
≥riod
Ë> 
π_time_h
) {

829 *
blocked_⁄
;

830 
π_cuºít
->
ªsume_time
 =Ñt_cuºít->
≥riodic_ªsume_time
;

831 
π_cuºít
->
blocked_⁄
 = 
NULL
;

832 
π_cuºít
->
°©e
 |
RT_SCHED_DELAYED
;

833 
	`ªm_ªady_cuºít
(
π_cuºít
);

834 
	`íq_timed_èsk
(
π_cuºít
);

835 
	`π_scheduÀ
();

836 
blocked_⁄
 = 
π_cuºít
->blocked_on;

837 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

838 #ifde‡
CONFIG_M68K


840 if(
blocked_⁄
 =
RTP_OBJREM
) {

841 
__asm__
 
	`__vﬁ©ûe__
 ("nop");

843  
	`likñy
(!
blocked_⁄
Ë? 0L : 
RTE_UNBLKD
;

845  
	`likñy
(!
blocked_⁄
Ë? 0 : 
RTE_UNBLKD
;

848 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

849  
RTE_TMROVRN
;

850 
	}
}

852 
RTAI_SYSCALL_MODE
 
	$π_èsk_£t_ªsume_íd_times
(
RTIME
 
ªsume
, RTIME 
íd
)

854 
RT_TASK
 *
π_cuºít
;

855 
Êags
;

857 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

858 
π_cuºít
 = 
RT_CURRENT
;

859 
π_cuºít
->
pﬁicy
 = -1;

860 
π_cuºít
->
¥i‹ôy
 = 0;

861 i‡(
ªsume
 > 0) {

862 
π_cuºít
->
ªsume_time
 = 
ªsume
;

864 
π_cuºít
->
ªsume_time
 -
ªsume
;

866 i‡(
íd
 > 0) {

867 
π_cuºít
->
≥riod
 = 
íd
;

869 
π_cuºít
->
≥riod
 =Ñt_cuºít->
ªsume_time
 - 
íd
;

871 
π_cuºít
->
°©e
 |
RT_SCHED_DELAYED
;

872 
	`ªm_ªady_cuºít
(
π_cuºít
);

873 
	`íq_timed_èsk
(
π_cuºít
);

874 
	`π_scheduÀ
();

875 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

876 
	}
}

878 
RTAI_SYSCALL_MODE
 
	$π_£t_ªsume_time
(
RT_TASK
 *
èsk
, 
RTIME
 
√w_ªsume_time
)

880 
Êags
;

882 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

883  -
EINVAL
;

886 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

887 i‡(
èsk
->
°©e
 & 
RT_SCHED_DELAYED
) {

888 i‡(((
èsk
->
ªsume_time
 = 
√w_ªsume_time
Ë- (èsk->
äext
)->resume_time) > 0) {

889 
	`ªm_timed_èsk
(
èsk
);

890 
	`íq_timed_èsk
(
èsk
);

891 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

895 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

896  -
ETIME
;

897 
	}
}

899 
RTAI_SYSCALL_MODE
 
	$π_£t_≥riod
(
RT_TASK
 *
èsk
, 
RTIME
 
√w_≥riod
)

901 
Êags
;

903 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

904  -
EINVAL
;

906 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

907 
èsk
->
≥riod
 = 
√w_≥riod
;

908 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

910 
	}
}

924 
RTIME
 
	$√xt_≥riod
()

926 
RT_TASK
 *
π_cuºít
;

927 
Êags
;

928 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

929 
π_cuºít
 = 
RT_CURRENT
;

930 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

931  
π_cuºít
->
≥riodic_ªsume_time
 +Ñt_cuºít->
≥riod
;

932 
	}
}

953 
RTAI_SYSCALL_MODE
 
	$π_busy_¶ìp
(
ns
)

955 
RTIME
 
íd_time
;

956 
íd_time
 = 
	`πai_rdtsc
(Ë+ 
	`Œimd
(
ns
, 
tu√d
.
˝u_‰eq
, 1000000000);

957 
	`πai_rdtsc
(Ë< 
íd_time
);

958 
	}
}

982 
RTAI_SYSCALL_MODE
 
	$π_¶ìp
(
RTIME
 
dñay
)

984 
DECLARE_RT_CURRENT
;

985 
Êags
;

986 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

987 
ASSIGN_RT_CURRENT
;

988 i‡((
π_cuºít
->
ªsume_time
 = 
	`gë_time
(Ë+ 
dñay
Ë> 
π_time_h
) {

989 *
blocked_⁄
;

990 
π_cuºít
->
blocked_⁄
 = 
NULL
;

991 
π_cuºít
->
°©e
 |
RT_SCHED_DELAYED
;

992 
	`ªm_ªady_cuºít
(
π_cuºít
);

993 
	`íq_timed_èsk
(
π_cuºít
);

994 
	`π_scheduÀ
();

995 
blocked_⁄
 = 
π_cuºít
->blocked_on;

996 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

997  
	`likñy
(!
blocked_⁄
Ë? 0 : 
RTE_UNBLKD
;

999 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1000  
RTE_TMROVRN
;

1001 
	}
}

1025 
RTAI_SYSCALL_MODE
 
	$π_¶ìp_u¡û
(
RTIME
 
time
)

1027 
DECLARE_RT_CURRENT
;

1028 
Êags
;

1029 
	`REALTIME2COUNT
(
time
);

1030 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1031 
ASSIGN_RT_CURRENT
;

1032 i‡((
π_cuºít
->
ªsume_time
 = 
time
Ë> 
π_time_h
) {

1033 *
blocked_⁄
;

1034 
π_cuºít
->
blocked_⁄
 = 
NULL
;

1035 
π_cuºít
->
°©e
 |
RT_SCHED_DELAYED
;

1036 
	`ªm_ªady_cuºít
(
π_cuºít
);

1037 
	`íq_timed_èsk
(
π_cuºít
);

1038 
	`π_scheduÀ
();

1039 
blocked_⁄
 = 
π_cuºít
->blocked_on;

1040 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1041  
	`likñy
(!
blocked_⁄
Ë? 0 : 
RTE_UNBLKD
;

1043 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1044  
RTE_TMROVRN
;

1045 
	}
}

1047 
RTAI_SYSCALL_MODE
 
	$π_èsk_masked_unblock
(
RT_TASK
 *
èsk
, 
mask
)

1049 
Êags
;

1051 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
) {

1052  -
EINVAL
;

1055 i‡(
èsk
->
°©e
 &&Åask->°©ê!
RT_SCHED_READY
) {

1056 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1057 i‡(
mask
 & 
RT_SCHED_DELAYED
) {

1058 
	`ªm_timed_èsk
(
èsk
);

1060 i‡(
èsk
->
°©e
 !
RT_SCHED_READY
) {

1061 i‡((
mask
 & 
èsk
->
°©e
 & 
RT_SCHED_SUSPENDED
Ë&&Åask->
su•dïth
 > 0) {

1062 
èsk
->
su•dïth
 = 0;

1064 i‡((
èsk
->
°©e
 &~
mask
Ë=
RT_SCHED_READY
) {

1065 
èsk
->
blocked_⁄
 = 
RTP_UNBLKD
;

1066 
	`íq_ªady_èsk
(
èsk
);

1067 
	`RT_SCHEDULE
(
èsk
, 
	`πai_˝uid
());

1070 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1071  
RTE_UNBLKD
;

1074 
	}
}

1076 
	$π_«no¶ìp
(
time•ec
 *
rqç
, time•e¯*
rmç
)

1078 
RTIME
 
expúe
;

1080 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

1081  -
EINVAL
;

1083 
	`π_¶ìp_u¡û
(
expúe
 = 
	`π_gë_time
(Ë+ 
	`time•ec2cou¡
(
rqç
));

1084 i‡((
expúe
 -
	`π_gë_time
()) > 0) {

1085 i‡(
rmç
) {

1086 
	`cou¡2time•ec
(
expúe
, 
rmç
);

1088  -
EINTR
;

1091 
	}
}

1095 
	$π_íq_ªady_edf_èsk
(
RT_TASK
 *
ªady_èsk
)

1097 
	`íq_ªady_edf_èsk
(
ªady_èsk
);

1098 
	}
}

1100 
	$π_íq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
)

1102 
	`íq_ªady_èsk
(
ªady_èsk
);

1103 
	}
}

1105 
	$π_ªnq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
, 
¥i‹ôy
)

1107  
	`ªnq_ªady_èsk
(
ªady_èsk
, 
¥i‹ôy
);

1108 
	}
}

1110 
	$π_ªm_ªady_èsk
(
RT_TASK
 *
èsk
)

1112 
	`ªm_ªady_èsk
(
èsk
);

1113 
	}
}

1115 
	$π_ªm_ªady_cuºít
(
RT_TASK
 *
π_cuºít
)

1117 
	`ªm_ªady_cuºít
(
π_cuºít
);

1118 
	}
}

1120 
	$π_íq_timed_èsk
(
RT_TASK
 *
timed_èsk
)

1122 
	`íq_timed_èsk
(
timed_èsk
);

1123 
	}
}

1125 
	$π_wake_up_timed_èsks
(
˝uid
)

1127 #ifde‡
CONFIG_SMP


1128 
	`wake_up_timed_èsks
(
˝uid
);

1130 
	`wake_up_timed_èsks
(0);

1132 
	}
}

1134 
	$π_ªm_timed_èsk
(
RT_TASK
 *
èsk
)

1136 
	`ªm_timed_èsk
(
èsk
);

1137 
	}
}

1139 
	$π_íqueue_blocked
(
RT_TASK
 *
èsk
, 
QUEUE
 *
queue
, 
qty≥
)

1141 
	`íqueue_blocked
(
èsk
, 
queue
, 
qty≥
);

1142 
	}
}

1144 
	$π_dequeue_blocked
(
RT_TASK
 *
èsk
)

1146 
	`dequeue_blocked
(
èsk
);

1147 
	}
}

1149 
	$π_ªnq_cuºít
(
RT_TASK
 *
π_cuºít
, 
¥i‹ôy
)

1151  
	`ªnq_ªady_èsk
(
π_cuºít
, 
¥i‹ôy
);

1152 
	}
}

1156 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_«med_èsk_öô
(c⁄° *
èsk_«me
, (*
thªad
)(), 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, (*
sig«l
)())

1158 
RT_TASK
 *
èsk
;

1159 
«me
;

1161 i‡((
èsk
 = 
	`π_gë_adr
(
«me
 = 
	`«m2num
(
èsk_«me
)))) {

1162  
èsk
;

1164 i‡((
èsk
 = 
	`π_mÆloc
((
RT_TASK
))Ë&& !
	`π_èsk_öô
—ask, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
)) {

1165 i‡(
	`π_ªgi°î
(
«me
, 
èsk
, 
IS_TASK
, 0)) {

1166  
èsk
;

1168 
	`π_èsk_dñëe
(
èsk
);

1170 
	`π_‰ì
(
èsk
);

1171  (
RT_TASK
 *)0;

1172 
	}
}

1174 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_«med_èsk_öô_˝uid
(c⁄° *
èsk_«me
, (*
thªad
)(), 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, (*
sig«l
)(), 
run_⁄_˝u
)

1176 
RT_TASK
 *
èsk
;

1177 
«me
;

1179 i‡((
èsk
 = 
	`π_gë_adr
(
«me
 = 
	`«m2num
(
èsk_«me
)))) {

1180  
èsk
;

1182 i‡((
èsk
 = 
	`π_mÆloc
((
RT_TASK
))Ë&& !
	`π_èsk_öô_˝uid
—ask, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
, 
run_⁄_˝u
)) {

1183 i‡(
	`π_ªgi°î
(
«me
, 
èsk
, 
IS_TASK
, 0)) {

1184  
èsk
;

1186 
	`π_èsk_dñëe
(
èsk
);

1188 
	`π_‰ì
(
èsk
);

1189  (
RT_TASK
 *)0;

1190 
	}
}

1192 
RTAI_SYSCALL_MODE
 
	$π_«med_èsk_dñëe
(
RT_TASK
 *
èsk
)

1194 i‡(!
	`π_èsk_dñëe
(
èsk
)) {

1195 
	`π_‰ì
(
èsk
);

1197  
	`π_drg_⁄_adr
(
èsk
);

1198 
	}
}

1202 
	#HASHED_REGISTRY


	)

1204 #ifde‡
HASHED_REGISTRY


1206 
	gmax_¶Ÿs
;

1207 
π_ªgi°ry_íåy
 *
	glxπ_li°
;

1208 
DEFINE_SPINLOCK
(
li°_lock
);

1210 
	#COLLISION_COUNT
(Ëdÿ{ 
cﬁ
++; } 0)

	)

1211 
	gcﬁ
;

1212 #i‚de‡
COLLISION_COUNT


1213 
	#COLLISION_COUNT
()

	)

1216 
	#NONAME
 (1UL)

	)

1217 
	#NOADR
 ((*)1)

	)

1219 
	#PRIMES_TAB_GRANULARITY
 100

	)

1221 
	g¥imes
[ ] = { 1, 103, 211, 307, 401, 503, 601, 701, 809, 907, 1009, 1103, 1201, 1301, 1409, 1511, 1601, 1709, 1801, 1901, 2003, 2111, 2203, 2309, 2411, 2503, 2609, 2707, 2801, 2903, 3001, 3109, 3203, 3301, 3407, 3511,

1226 
	#hash_fun
(
m
, 
n
Ë((m)%“Ë+ 1)

	)

1228 
	$hash_ös_adr
(*
adr
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
∆ök
)

1230 
i
, 
k
;

1231 
Êags
;

1233 
i
 = 
	`hash_fun
(()
adr
, 
l°Àn
);

1235 
k
 = 
i
;

1236 
li°
[
k
].
adr
 > 
NOADR
 &&Üist[k].adr !=ádr) {

1237 
	`COLLISION_COUNT
();

1238 i‡(++
k
 > 
l°Àn
) {

1239 
k
 = 1;

1241 i‡(
k
 =
i
) {

1245 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1246 i‡(
li°
[
k
].
adr
 ==ádr) {

1247 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1248  -
k
;

1249 } i‡(
li°
[
k
].
adr
 <
NOADR
) {

1250 
li°
[
k
].
adr
 =ádr;

1251 
li°
[
k
].
∆ök
 =Çlink;

1252 
li°
[
∆ök
].
Æök
 = 
k
;

1253 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1254  
k
;

1257 
	}
}

1259 
	$hash_ös_«me
(
«me
, *
adr
, 
ty≥
, 
èsk_°ru˘
 *
 xtsk
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
öc
)

1261 
i
, 
k
;

1262 
Êags
;

1264 
i
 = 
	`hash_fun
(
«me
, 
l°Àn
);

1266 
k
 = 
i
;

1267 
li°
[
k
].
«me
 > 
NONAME
 &&Üist[k].name !=Çame) {

1268 
	`COLLISION_COUNT
();

1269 i‡(++
k
 > 
l°Àn
) {

1270 
k
 = 1;

1272 i‡(
k
 =
i
) {

1276 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1277 i‡(
li°
[
k
].
«me
 ==Çame) {

1278 i‡(
öc
) {

1279 
li°
[
k
].
cou¡
++;

1281 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1282  -
k
;

1283 } i‡(
li°
[
k
].
«me
 <
NONAME
) {

1284 
li°
[
k
].
«me
 =Çame;

1285 
li°
[
k
].
ty≥
 =Åype;

1286 
li°
[
k
].
tsk
 = 
 xtsk
;

1287 
li°
[
k
].
cou¡
 = 1;

1288 
li°
[
k
].
Æök
 = 0;

1289 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1290 i‡(
	`hash_ös_adr
(
adr
, 
li°
, 
l°Àn
, 
k
) <= 0) {

1291 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1294  
k
;

1297 
	}
}

1299 *
	$hash_föd_«me
(
«me
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
öc
, *
¶Ÿ
)

1301 
i
, 
k
;

1302 
Êags
;

1304 
i
 = 
	`hash_fun
(
«me
, 
l°Àn
);

1306 
k
 = 
i
;

1307 
li°
[
k
].
«me
 &&Üist[k].name !=Çame) {

1308 
	`COLLISION_COUNT
();

1309 i‡(++
k
 > 
l°Àn
) {

1310 
k
 = 1;

1312 i‡(
k
 =
i
) {

1313  
NULL
;

1316 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1317 i‡(
li°
[
k
].
«me
 ==Çame) {

1318 i‡(
öc
) {

1319 
li°
[
k
].
cou¡
++;

1321 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1322 i‡(
¶Ÿ
) {

1323 *
¶Ÿ
 = 
k
;

1325  
li°
[li°[
k
].
Æök
].
adr
;

1326 } i‡(
li°
[
k
].
«me
 <
NONAME
) {

1327 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1328  
NULL
;

1331 
	}
}

1333 
	$hash_föd_adr
(*
adr
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
öc
)

1335 
i
, 
k
;

1336 
Êags
;

1338 
i
 = 
	`hash_fun
(()
adr
, 
l°Àn
);

1340 
k
 = 
i
;

1341 
li°
[
k
].
adr
 &&Üist[k].adr !=ádr) {

1342 
	`COLLISION_COUNT
();

1343 i‡(++
k
 > 
l°Àn
) {

1344 
k
 = 1;

1346 i‡(
k
 =
i
) {

1350 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1351 i‡(
li°
[
k
].
adr
 ==ádr) {

1352 i‡(
öc
) {

1353 
li°
[li°[
k
].
∆ök
].
cou¡
++;

1355 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1356  
li°
[li°[
k
].
∆ök
].
«me
;

1357 } i‡(
li°
[
k
].
adr
 <
NOADR
) {

1358 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1362 
	}
}

1364 
	$hash_ªm_«me
(
«me
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
dec
)

1366 
i
, 
k
;

1367 
Êags
;

1369 
k
 = 
i
 = 
	`hash_fun
(
«me
, 
l°Àn
);

1370 
li°
[
k
].
«me
 &&Üist[k].name !=Çame) {

1371 
	`COLLISION_COUNT
();

1372 i‡(++
k
 > 
l°Àn
) {

1373 
k
 = 1;

1375 i‡(
k
 =
i
) {

1379 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1380 i‡(
li°
[
k
].
«me
 ==Çame) {

1381 i‡(!
dec
 || (
li°
[
k
].
cou¡
 && !--list[k].count)) {

1382 
j
;

1383 i‡((
i
 = 
k
 + 1Ë> 
l°Àn
) {

1384 
i
 = 1;

1386 
li°
[
k
].
«me
 = !li°[
i
].«mê? 0UL : 
NONAME
;

1387 i‡((
j
 = 
li°
[
k
].
Æök
)) {

1388 i‡((
i
 = 
j
 + 1Ë> 
l°Àn
) {

1389 
i
 = 1;

1391 
li°
[
j
].
adr
 = !li°[
i
].ad∏? 
NULL
 : 
NOADR
;

1394 i‡(
dec
) {

1395 
k
 = 
li°
[k].
cou¡
;

1397 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1398  
k
;

1400 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1401  
dec
;

1402 
	}
}

1404 
	$hash_ªm_adr
(*
adr
, 
π_ªgi°ry_íåy
 *
li°
, 
l°Àn
, 
dec
)

1406 
i
, 
k
;

1407 
Êags
;

1409 
k
 = 
i
 = 
	`hash_fun
(()
adr
, 
l°Àn
);

1410 
li°
[
k
].
adr
 &&Üist[k].adr !=ádr) {

1411 
	`COLLISION_COUNT
();

1412 i‡(++
k
 > 
l°Àn
) {

1413 
k
 = 1;

1415 i‡(
k
 =
i
) {

1419 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1420 i‡(
li°
[
k
].
adr
 ==ádr) {

1421 i‡(!
dec
 || (
li°
[li°[
k
].
∆ök
].
cou¡
 && !--list[list[k].nlink].count)) {

1422 
j
;

1423 i‡((
i
 = 
k
 + 1Ë> 
l°Àn
) {

1424 
i
 = 1;

1426 
li°
[
k
].
adr
 = !li°[
i
].ad∏? 
NULL
 : 
NOADR
;

1427 
j
 = 
li°
[
k
].
∆ök
;

1428 i‡((
i
 = 
j
 + 1Ë> 
l°Àn
) {

1429 
i
 = 1;

1431 
li°
[
j
].
«me
 = !li°[
i
].«mê? 0UL : 
NONAME
;

1433 i‡(
dec
) {

1434 
k
 = 
li°
[li°[k].
∆ök
].
cou¡
;

1436 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1437  
k
;

1439 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1440  
dec
;

1441 
	}
}

1443 
ölöe
 
	$ªgi°r
(
«me
, *
adr
, 
ty≥
, 
èsk_°ru˘
 *
 xtsk
)

1445  
	`abs
(
	`hash_ös_«me
(
«me
, 
adr
, 
ty≥
, 
 xtsk
, 
lxπ_li°
, 
max_¶Ÿs
, 1));

1446 
	}
}

1448 
ölöe
 
	$drg_⁄_«me
(
«me
)

1450  
	`hash_ªm_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, 0);

1451 
	}
}

1453 
ölöe
 
	$drg_⁄_«me_˙t
(
«me
)

1455  
	`hash_ªm_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, -
EFAULT
);

1456 
	}
}

1458 
ölöe
 
	$drg_⁄_adr
(*
adr
)

1460  
	`hash_ªm_adr
(
adr
, 
lxπ_li°
, 
max_¶Ÿs
, 0);

1461 
	}
}

1463 
ölöe
 
	$drg_⁄_adr_˙t
(*
adr
)

1465  
	`hash_ªm_adr
(
adr
, 
lxπ_li°
, 
max_¶Ÿs
, -
EFAULT
);

1466 
	}
}

1468 
ölöe
 
	$gë_«me
(*
adr
)

1470 i‡(!
adr
) {

1471 
Êags
, 
«me
;

1472 
i
;

1473 
i
 = 0; i < 10; i++) {

1475 
«me£ed
 = 
MAX_NAM2NUM
;

1476 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1477 i‡((
«me
 = ++
«me£ed
) == 0xFFFFFFFFUL) {

1478 
«me
 = 
«me£ed
 = 
MAX_NAM2NUM
;

1481 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1482 
«me
 = 
MAX_NAM2NUM
 + 
	`ú™du
(0xFFFFFFFFUL - MAX_NAM2NUM - 2);

1484 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1485 i‡(!
	`hash_föd_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, 0, 
NULL
)) {

1486  
«me
;

1491  
	`hash_föd_adr
(
adr
, 
lxπ_li°
, 
max_¶Ÿs
, 0);

1494 
	}
}

1496 
ölöe
 *
	$gë_adr
(
«me
)

1498  
	`hash_föd_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, 0, 
NULL
);

1499 
	}
}

1501 
ölöe
 *
	$gë_adr_˙t
(
«me
)

1503  
	`hash_föd_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, 1, 
NULL
);

1504 
	}
}

1506 
ölöe
 
	$gë_ty≥
(
«me
)

1508 
¶Ÿ
;

1510 i‡(
	`hash_föd_«me
(
«me
, 
lxπ_li°
, 
max_¶Ÿs
, 0, &
¶Ÿ
)) {

1511  
lxπ_li°
[
¶Ÿ
].
ty≥
;

1513  -
EINVAL
;

1514 
	}
}

1516 
	$is_¥o˚ss_ªgi°îed
(
èsk_°ru˘
 *
 xtsk
)

1518 *
adr
 = 
 xtsk
->
	`πai_tskext
(
TSKEXT0
);

1519  
adr
 ? 
	`hash_föd_adr
◊dr, 
lxπ_li°
, 
max_¶Ÿs
, 0) : 0;

1520 
	}
}

1522 
	$π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, 
π_ªgi°ry_íåy
 *
íåy
)

1524 
Êags
;

1525 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1526 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 > 
NONAME
) {

1527 *
íåy
 = 
lxπ_li°
[
¶Ÿ
];

1528 
íåy
->
adr
 = 
lxπ_li°
[íåy->
Æök
].adr;

1529 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1530  
¶Ÿ
;

1532 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1534 
	}
}

1536 
	$π_ªgi°ry_Æloc
()

1538 i‡((
max_¶Ÿs
 = (
MAX_SLOTS
 + 
PRIMES_TAB_GRANULARITY
 - 1)/(PRIMES_TAB_GRANULARITY)Ë>(
¥imes
)/(primes[0])) {

1539 
	`¥ötk
("REGISTRY TABLE TOO LARGE FOR AVAILABLE PRIMES\n");

1540  -
ENOMEM
;

1542 
max_¶Ÿs
 = 
¥imes
[max_slots];

1543 i‡(!(
lxπ_li°
 = 
	`vmÆloc
((
max_¶Ÿs
 + 1)*(
π_ªgi°ry_íåy
)))) {

1544 
	`¥ötk
("NO MEMORY FOR REGISTRY TABLE\n");

1545  -
ENOMEM
;

1547 
	`mem£t
(
lxπ_li°
, 0, (
max_¶Ÿs
 + 1)*(
π_ªgi°ry_íåy
));

1549 
	}
}

1551 
	$π_ªgi°ry_‰ì
()

1553 i‡(
lxπ_li°
) {

1554 
	`v‰ì
(
lxπ_li°
);

1556 
	}
}

1558 vﬁ©ûê
	gmax_¶Ÿs
;

1559 
π_ªgi°ry_íåy
 *
	glxπ_li°
;

1560 
DEFINE_SPINLOCK
(
li°_lock
);

1562 
	$π_ªgi°ry_Æloc
()

1564 i‡(!(
lxπ_li°
 = 
	`vmÆloc
((
MAX_SLOTS
 + 1)*(
π_ªgi°ry_íåy
)))) {

1565 
	`¥ötk
("NO MEMORY FOR REGISTRY TABLE\n");

1566  -
ENOMEM
;

1568 
	`mem£t
(
lxπ_li°
, 0, (
MAX_SLOTS
 + 1)*(
π_ªgi°ry_íåy
));

1570 
	}
}

1572 
	$π_ªgi°ry_‰ì
()

1574 i‡(
lxπ_li°
) {

1575 
	`v‰ì
(
lxπ_li°
);

1577 
	}
}

1579 
ölöe
 
	$ªgi°r
(
«me
, *
adr
, 
ty≥
, 
èsk_°ru˘
 *
tsk
)

1581 
Êags
;

1582 
i
, 
¶Ÿ
;

1588 (
¶Ÿ
 = 
max_¶Ÿs
Ë< 
MAX_SLOTS
) {

1589 
i
 = 1; i <
max_¶Ÿs
; i++) {

1590 i‡(
lxπ_li°
[
i
].
«me
 ==Çame) {

1594 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1595 i‡(
¶Ÿ
 =
max_¶Ÿs
 && max_¶Ÿ†< 
MAX_SLOTS
) {

1596 
¶Ÿ
 = ++
max_¶Ÿs
;

1597 
lxπ_li°
[
¶Ÿ
].
«me
 =Çame;

1598 
lxπ_li°
[
¶Ÿ
].
adr
 =ádr;

1599 
lxπ_li°
[
¶Ÿ
].
tsk
 =Åsk;

1600 
lxπ_li°
[
¶Ÿ
].
ty≥
 =Åype;

1601 
lxπ_li°
[
¶Ÿ
].
cou¡
 = 1;

1602 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1603  
¶Ÿ
;

1605 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1608 
	}
}

1610 
ölöe
 
	$drg_⁄_«me
(
«me
)

1612 
Êags
;

1613 
¶Ÿ
;

1614 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1615 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1616 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 ==Çame) {

1617 i‡(
¶Ÿ
 < 
max_¶Ÿs
) {

1618 
lxπ_li°
[
¶Ÿ
] =Üxπ_li°[
max_¶Ÿs
];

1620 i‡(
max_¶Ÿs
 > 0) {

1621 
max_¶Ÿs
--;

1623 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1624  
¶Ÿ
;

1626 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1629 
	}
}

1631 
ölöe
 
	$drg_⁄_«me_˙t
(
«me
)

1633 
Êags
;

1634 
¶Ÿ
, 
cou¡
;

1635 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1636 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1637 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 =«mê&&Üxπ_li°[¶Ÿ].
cou¡
 > 0 && !(count = --lxrt_list[slot].count)) {

1638 i‡(
¶Ÿ
 < 
max_¶Ÿs
) {

1639 
lxπ_li°
[
¶Ÿ
] =Üxπ_li°[
max_¶Ÿs
];

1641 i‡(
max_¶Ÿs
 > 0) {

1642 
max_¶Ÿs
--;

1644 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1645  
cou¡
;

1647 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1649  -
EFAULT
;

1650 
	}
}

1652 
ölöe
 
	$drg_⁄_adr
(*
adr
)

1654 
Êags
;

1655 
¶Ÿ
;

1656 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1657 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1658 i‡(
lxπ_li°
[
¶Ÿ
].
adr
 ==ádr) {

1659 i‡(
¶Ÿ
 < 
max_¶Ÿs
) {

1660 
lxπ_li°
[
¶Ÿ
] =Üxπ_li°[
max_¶Ÿs
];

1662 i‡(
max_¶Ÿs
 > 0) {

1663 
max_¶Ÿs
--;

1665 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1666  
¶Ÿ
;

1668 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1671 
	}
}

1673 
ölöe
 
	$drg_⁄_adr_˙t
(*
adr
)

1675 
Êags
;

1676 
¶Ÿ
, 
cou¡
;

1677 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1678 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1679 i‡(
lxπ_li°
[
¶Ÿ
].
adr
 =ad∏&&Üxπ_li°[¶Ÿ].
cou¡
 > 0 && !(count = --lxrt_list[slot].count)) {

1680 i‡(
¶Ÿ
 < 
max_¶Ÿs
) {

1681 
lxπ_li°
[
¶Ÿ
] =Üxπ_li°[
max_¶Ÿs
];

1683 i‡(
max_¶Ÿs
 > 0) {

1684 
max_¶Ÿs
--;

1686 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1687  
cou¡
;

1689 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1691  -
EFAULT
;

1692 
	}
}

1694 
ölöe
 
	$gë_«me
(*
adr
)

1696 
«me£ed
 = 3518743764UL;

1697 
¶Ÿ
;

1698 i‡(!
adr
) {

1699 
Êags
;

1700 
«me
;

1701 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1702 i‡((
«me
 = ++
«me£ed
) == 0xFFFFFFFFUL) {

1703 
«me£ed
 = 3518743764UL;

1705 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1706  
«me
;

1708 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1709 i‡(
lxπ_li°
[
¶Ÿ
].
adr
 ==ádr) {

1710  
lxπ_li°
[
¶Ÿ
].
«me
;

1714 
	}
}

1716 
ölöe
 *
	$gë_adr
(
«me
)

1718 
¶Ÿ
;

1719 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1720 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 ==Çame) {

1721  
lxπ_li°
[
¶Ÿ
].
adr
;

1725 
	}
}

1727 
ölöe
 *
	$gë_adr_˙t
(
«me
)

1729 
Êags
;

1730 
¶Ÿ
;

1731 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1732 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1733 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 ==Çame) {

1734 ++
lxπ_li°
[
¶Ÿ
].
cou¡
;

1735 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1736  
lxπ_li°
[
¶Ÿ
].
adr
;

1738 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1741 
	}
}

1743 
ölöe
 
	$gë_ty≥
(
«me
)

1745 
¶Ÿ
;

1746 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1747 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 ==Çame) {

1748  
lxπ_li°
[
¶Ÿ
].
ty≥
;

1751  -
EINVAL
;

1752 
	}
}

1754 
	$is_¥o˚ss_ªgi°îed
(
èsk_°ru˘
 *
tsk
)

1756 *
adr
;

1758 i‡((
adr
 = 
tsk
->
	`πai_tskext
(
TSKEXT0
))) {

1759 
¶Ÿ
;

1760 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1761 i‡(
lxπ_li°
[
¶Ÿ
].
adr
 ==ádr) {

1762  
lxπ_li°
[
¶Ÿ
].
«me
;

1767 
	}
}

1769 
	$π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, 
π_ªgi°ry_íåy
 *
íåy
)

1771 
Êags
;

1773 if(
íåy
 == 0) {

1776 
Êags
 = 
	`π_•ö_lock_úqßve
(&
li°_lock
);

1777 i‡(
¶Ÿ
 > 0 && slŸ <
max_¶Ÿs
 ) {

1778 i‡(
lxπ_li°
[
¶Ÿ
].
«me
 != 0) {

1779 *
íåy
 = 
lxπ_li°
[
¶Ÿ
];

1780 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1781  
¶Ÿ
;

1784 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
li°_lock
);

1787 
	}
}

1799 
	$π_ªgi°î
(
«me
, *
adr
, 
ty≥
, 
èsk_°ru˘
 *
t
)

1804  
	`gë_adr
(
«me
Ë? 0 : 
	`ªgi°r
“ame, 
adr
, 
ty≥
, 
t
 );

1805 
	}
}

1816 
	$π_drg_⁄_«me
(
«me
)

1818  
	`drg_⁄_«me
(
«me
);

1819 
	}
}

1829 
	$π_drg_⁄_adr
(*
adr
)

1831  
	`drg_⁄_adr
(
adr
);

1832 
	}
}

1834 
RTAI_SYSCALL_MODE
 
	$π_gë_«me
(*
adr
)

1836  
	`gë_«me
(
adr
);

1837 
	}
}

1839 
RTAI_SYSCALL_MODE
 *
	$π_gë_adr
(
«me
)

1841  
	`gë_adr
(
«me
);

1842 
	}
}

1844 
	$π_gë_ty≥
(
«me
)

1846  
	`gë_ty≥
(
«me
);

1847 
	}
}

1849 
	$π_drg_⁄_«me_˙t
(
«me
)

1851  
	`drg_⁄_«me_˙t
(
«me
);

1852 
	}
}

1854 
	$π_drg_⁄_adr_˙t
(*
adr
)

1856  
	`drg_⁄_adr_˙t
(
adr
);

1857 
	}
}

1859 *
	$π_gë_adr_˙t
(
«me
)

1861  
	`gë_adr_˙t
(
«me
);

1862 
	}
}

1864 
	~<πai_lxπ.h
>

1866 
π_fun_íåy
 
π_fun_lxπ
[];

1868 
	$kπai_obje˘s_ªÀa£
()

1870 
¶Ÿ
;

1871 
π_ªgi°ry_íåy
 
íåy
;

1872 
«me
[8], *
ty≥
;

1874 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

1875 i‡(
	`π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, &
íåy
)) {

1876 
íåy
.
ty≥
) {

1877 
IS_TASK
:

1878 
ty≥
 = "TASK";

1879 
	`π_«med_èsk_dñëe
(
íåy
.
adr
);

1881 
IS_SEM
:

1882 
ty≥
 = "SEM ";

1883 (((*)(*))
π_fun_lxπ
[
NAMED_SEM_DELETE
].
fun
)(
íåy
.
adr
);

1885 
IS_RWL
:

1886 
ty≥
 = "RWL ";

1887 (((*)(*))
π_fun_lxπ
[
NAMED_RWL_DELETE
].
fun
)(
íåy
.
adr
);

1889 
IS_SPL
:

1890 
ty≥
 = "SPL ";

1891 (((*)(*))
π_fun_lxπ
[
NAMED_SPL_DELETE
].
fun
)(
íåy
.
adr
);

1893 
IS_MBX
:

1894 
ty≥
 = "MBX ";

1895 (((*)(*))
π_fun_lxπ
[
NAMED_MBX_DELETE
].
fun
)(
íåy
.
adr
);

1897 
IS_PRX
:

1898 
ty≥
 = "PRX ";

1899 (((*)(*))
π_fun_lxπ
[
PROXY_DETACH
].
fun
)(
íåy
.
adr
);

1900 
	`π_drg_⁄_adr
(
íåy
.
adr
);

1903 
ty≥
 = "ALIEN";

1906 
	`num2«m
(
íåy
.
«me
,Çame);

1907 
	`π_¥ötk
("SCHEDÑñó£†ªgi°îedÇamed %†%s\n", 
ty≥
, 
«me
);

1910 
	}
}

1914 #ifde‡
CONFIG_RTAI_USI


1916 
	~<πai_èskÀts.h
>

1918 
πai_ªÆtime_úq_s
 
πai_ªÆtime_úq
[];

1920 
RTAI_SYSCALL_MODE
 
	$π_úq_waô
(
úq
)

1922 
ªtvÆ
;

1923 
ªtvÆ
 = 
	`π_èsk_su•íd
(0);

1924  
πai_domaö
.
úqs
[
úq
].
h™dÀr
 ? -
ªtvÆ
 : 
RT_IRQ_TASK_ERR
;

1925 
	}
}

1927 
RTAI_SYSCALL_MODE
 
	$π_úq_waô_if
(
úq
)

1929 
ªtvÆ
;

1930 
ªtvÆ
 = 
	`π_èsk_su•íd_if
(0);

1931  
πai_domaö
.
úqs
[
úq
].
h™dÀr
 ? -
ªtvÆ
 : 
RT_IRQ_TASK_ERR
;

1932 
	}
}

1934 
RTAI_SYSCALL_MODE
 
	$π_úq_waô_u¡û
(
úq
, 
RTIME
 
time
)

1936 
ªtvÆ
;

1937 
ªtvÆ
 = 
	`π_èsk_su•íd_u¡û
(0, 
time
);

1938  
πai_domaö
.
úqs
[
úq
].
h™dÀr
 ? -
ªtvÆ
 : 
RT_IRQ_TASK_ERR
;

1939 
	}
}

1941 
RTAI_SYSCALL_MODE
 
	$π_úq_waô_timed
(
úq
, 
RTIME
 
dñay
)

1943  
	`π_úq_waô_u¡û
(
úq
, 
	`gë_time
(Ë+ 
dñay
);

1944 
	}
}

1946 
RTAI_SYSCALL_MODE
 
	$π_úq_sig«l
(
úq
)

1948 i‡(
πai_domaö
.
úqs
[
úq
].
h™dÀr
) {

1949 
	`π_èsk_ªsume
((*)
πai_domaö
.
úqs
[
úq
].
cookõ
);

1951 
	}
}

1953 
	$π_úq_èsk_h™dÀr
(
úq
, 
RT_TASK
 *
úq_èsk
)

1955 
	`π_èsk_ªsume
(
úq_èsk
);

1957 
	}
}

1959 
RTAI_SYSCALL_MODE
 
	$π_ªque°_úq_èsk
 (
úq
, *
h™dÀr
, 
ty≥
, 
afföe2èsk
)

1961 
RT_TASK
 *
èsk
;

1962 i‡(!
h™dÀr
) {

1963 
èsk
 = 
	`_π_whﬂmi
();

1965 
èsk
 = 
ty≥
 =
RT_IRQ_TASKLET
 ? ((
π_èskÀt_°ru˘
 *)
h™dÀr
)->task : handler;

1967 i‡(
afföe2èsk
) {

1968 
	`π_assign_úq_to_˝u
(
úq
, (1 << 
èsk
->
ru¬abÀ_⁄_˝us
));

1970  
	`π_ªque°_úq
(
úq
, (*)
π_úq_èsk_h™dÀr
, 
èsk
, 0);

1971 
	}
}

1973 
RTAI_SYSCALL_MODE
 
	$π_ªÀa£_úq_èsk
 (
úq
)

1975 
ªtvÆ
;

1976 
RT_TASK
 *
èsk
;

1977 
èsk
 = (*)
πai_domaö
.
úqs
[
úq
].
cookõ
;

1978 i‡(!(
ªtvÆ
 = 
	`π_ªÀa£_úq
(
úq
))) {

1979 
	`π_èsk_ªsume
(
èsk
);

1980 
	`π_ª£t_úq_to_sym_mode
(
úq
);

1982  
ªtvÆ
;

1983 
	}
}

1989 
RTAI_SYSCALL_MODE
 
π_£t_löux_sysˇŒ_mode
(
mode
, (*
cbfun
)(, ))

1991 
RT_TASK
 *
£rvî
;

1992 
löux_sysˇŒs_li°
 *
sysˇŒs
;

1993 i‡((
£rvî
 = 
RT_CURRENT
->
löux_sysˇŒ_£rvî
Ë=
NULL
 || 
mode
 !
SYNC_LINUX_SYSCALL
 || modê!
ASYNC_LINUX_SYSCALL
) {

1994  
EINVAL
;

1996 
sysˇŒs
 = 
£rvî
->
löux_sysˇŒ_£rvî
;

1997 
	`π_put_u£r
(
mode
, &
sysˇŒs
->mode);

1998 
	`π_put_u£r
(
cbfun
, &
sysˇŒs
->cbfun);

2000 
	}
}

2002 
	$π_exec_löux_sysˇŒ
(
RT_TASK
 *
π_cuºít
, 
löux_sysˇŒs_li°
 *
sysˇŒs
, 
±_ªgs
 *
ªgs
)

2004 
ö
, 
id
;

2005 
löux_sysˇŒ
 
sysˇŒ
;

2006 °ru˘ { 
ö
, 
out
, 
ƒ
, 
id
, 
mode
; (*
cbfun
)(, ); 
RT_TASK
 *
£rv
; } 
‰om
;

2008 
	`π_c›y_‰om_u£r
(&
‰om
, 
sysˇŒs
, (from));

2009 
ö
 = 
‰om
.in;

2010 i‡(++
‰om
.
ö
 >‰om.
ƒ
) {

2011 
‰om
.
ö
 = 0;

2013 i‡(
‰om
.
mode
 =
ASYNC_LINUX_SYSCALL
 && from.
ö
 =‰om.
out
) {

2014 
ªgs
->
LINUX_SYSCALL_RETREG
 = -1;

2018 #i‡
	`deföed
–
__NR_sockëˇŒ
)

2019 i‡(
ªgs
->
LINUX_SYSCALL_NR
 =
__NR_sockëˇŒ
) {

2020 
	`mem˝y
(
sysˇŒ
.
∑ˇrgs
, (*)
ªgs
->
LINUX_SYSCALL_REG2
, (syscall.pacargs));

2021 
sysˇŒ
.
¨gs
[2] = ()(&
sysˇŒs
->sysˇŒ[
ö
].
∑ˇrgs
);

2022 
id
 = 
	`off£tof
(
löux_sysˇŒ
, 
ªtvÆ
);

2026 
sysˇŒ
.
¨gs
[2] = 
ªgs
->
LINUX_SYSCALL_REG2
;

2027 
id
 = 
	`off£tof
(
löux_sysˇŒ
, 
∑ˇrgs
);

2029 
sysˇŒ
.
¨gs
[0] = 
ªgs
->
LINUX_SYSCALL_NR
;

2030 
sysˇŒ
.
¨gs
[1] = 
ªgs
->
LINUX_SYSCALL_REG1
;

2031 
sysˇŒ
.
¨gs
[3] = 
ªgs
->
LINUX_SYSCALL_REG3
;

2032 
sysˇŒ
.
¨gs
[4] = 
ªgs
->
LINUX_SYSCALL_REG4
;

2033 
sysˇŒ
.
¨gs
[5] = 
ªgs
->
LINUX_SYSCALL_REG5
;

2034 
sysˇŒ
.
¨gs
[6] = 
ªgs
->
LINUX_SYSCALL_REG6
;

2035 
sysˇŒ
.
id
 = 
‰om
.id;

2036 
sysˇŒ
.
mode
 = 
‰om
.mode;

2037 
sysˇŒ
.
cbfun
 = 
‰om
.cbfun;

2038 
	`π_c›y_to_u£r
(&
sysˇŒs
->
sysˇŒ
[
ö
].
¨gs
, &sysˇŒ, 
id
);

2039 
id
 = 
‰om
.id;

2040 i‡(++
‰om
.
id
 < 0) {

2041 
‰om
.
id
 = 0;

2043 
	`π_put_u£r
(
‰om
.
id
, &
sysˇŒs
->id);

2044 
	`π_put_u£r
(
‰om
.
ö
, &
sysˇŒs
->in);

2045 i‡(
‰om
.
£rv
->
su•dïth
 >-‰om.
ƒ
) {

2046 
‰om
.
£rv
->
¥i‹ôy
 = 
π_cuºít
->¥i‹ôy + 
BASE_SOFT_PRIORITY
;

2047 
	`π_èsk_ªsume
(
‰om
.
£rv
);

2049 i‡(
‰om
.
mode
 =
SYNC_LINUX_SYSCALL
) {

2050 
	`π_èsk_su•íd
(
π_cuºít
);

2051 
	`π_gë_u£r
(
ªgs
->
LINUX_SYSCALL_RETREG
, &
sysˇŒs
->
sysˇŒ
[
ö
].
ªtvÆ
);

2053 
ªgs
->
LINUX_SYSCALL_RETREG
 = 
id
;

2055 
	}
}

2059 #ifde‡
CONFIG_PROC_FS


2060 
	~<löux/°©.h
>

2061 
	~<löux/¥oc_fs.h
>

2062 
	~<πai_¥oc_fs.h
>

2063 
	~<πai_«m2num.h
>

2065 
¥oc_dú_íåy
 *
πai_¥oc_roŸ
;

2069 
	$PROC_READ_FUN
(
πai_ªad_lxπ
)

2071 
π_ªgi°ry_íåy
 
íåy
;

2072 *
ty≥_«me
[] = { "TASK", "SEM", "RWL", "SPL", "MBX", "PRX", "BITS", "TBX", "HPCK" };

2073 
i
 = 1;

2074 
«me
[8];

2075 
PROC_PRINT_VARS
;

2077 
	`PROC_PRINT
("\nRTAI LXRT Information.\n\n");

2078 
	`PROC_PRINT
(" MAX_SLOTS = %d\n\n", 
MAX_SLOTS
);

2082 
	`PROC_PRINT
(" Linux_Owner Parent PID\n");

2083 
	`PROC_PRINT
("Slot Name ID Type RT_Handle Pointer Tsk_PID MEM_Sz USG Cnt\n");

2084 
	`PROC_PRINT
("-------------------------------------------------------------------------------\n");

2085 
i
 = 1; i <
max_¶Ÿs
; i++) {

2086 i‡(
	`π_gë_ªgi°ry_¶Ÿ
(
i
, &
íåy
)) {

2087 
	`num2«m
(
íåy
.
«me
,Çame);

2088 
	`PROC_PRINT
("%4d %-6.6s 0x%08lx %-6.6s 0x%p 0x%p %7d %8d %7d\n",

2089 
i
,

2090 
«me
,

2091 
íåy
.
«me
,

2092 
íåy
.
ty≥
 >
PAGE_SIZE
 ? "SHMEM" :

2093 
íåy
.
ty≥
 > (
ty≥_«me
)/(*) ?

2095 
ty≥_«me
[
íåy
.
ty≥
],

2096 
íåy
.
adr
,

2097 
íåy
.
tsk
,

2098 
íåy
.
tsk
 ?É¡ry.tsk->
pid
 : 0,

2099 
íåy
.
ty≥
 =
IS_TASK
 && ((
RT_TASK
 *Î¡ry.
adr
)->
 xtsk
 ? (((RT_TASK *Î¡ry.adr)-> xtsk)->
pid
 :É¡ry.ty≥ >
PAGE_SIZE
 ?É¡ry.ty≥ : 0,É¡ry.
cou¡
);

2102 
PROC_PRINT_DONE
;

2103 
	}
}

2105 
PROC_READ_OPEN_OPS
(
πai_lxπ_f›s
, 
πai_ªad_lxπ
);

2107 
	$πai_¥oc_lxπ_ªgi°î
()

2109 
¥oc_dú_íåy
 *
¥oc_lxπ_ít
;

2111 
¥oc_lxπ_ít
 = 
	`CREATE_PROC_ENTRY
("«mes", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
, &
πai_lxπ_f›s
);

2112 i‡(!
¥oc_lxπ_ít
) {

2113 
	`¥ötk
("UnableÅo initialize /proc/rtai/lxrt\n");

2116 
	`SET_PROC_READ_ENTRY
(
¥oc_lxπ_ít
, 
πai_ªad_lxπ
);

2118 
	}
}

2121 
	$πai_¥oc_lxπ_uƒegi°î
()

2123 
	`ªmove_¥oc_íåy
("«mes", 
πai_¥oc_roŸ
);

2124 
	}
}

2129 #i‚de‡
CONFIG_KBUILD


2130 
	#CONFIG_KBUILD


	)

2133 #ifde‡
CONFIG_KBUILD


2135 
EXPORT_SYMBOL
(
π_£t_sched_pﬁicy
);

2136 
EXPORT_SYMBOL
(
π_gë_¥io
);

2137 
EXPORT_SYMBOL
(
π_gë_öhî_¥io
);

2138 
EXPORT_SYMBOL
(
π_gë_¥i‹ôõs
);

2139 
EXPORT_SYMBOL
(
π_ch™ge_¥io
);

2140 
EXPORT_SYMBOL
(
π_whﬂmi
);

2141 
EXPORT_SYMBOL
(
π_èsk_yõld
);

2142 
EXPORT_SYMBOL
(
π_èsk_su•íd
);

2143 
EXPORT_SYMBOL
(
π_èsk_su•íd_if
);

2144 
EXPORT_SYMBOL
(
π_èsk_su•íd_u¡û
);

2145 
EXPORT_SYMBOL
(
π_èsk_su•íd_timed
);

2146 
EXPORT_SYMBOL
(
π_èsk_ªsume
);

2147 
EXPORT_SYMBOL
(
π_gë_èsk_°©e
);

2148 
EXPORT_SYMBOL
(
π_löux_u£_Âu
);

2149 
EXPORT_SYMBOL
(
π_èsk_u£_Âu
);

2150 
EXPORT_SYMBOL
(
π_èsk_sig«l_h™dÀr
);

2151 
EXPORT_SYMBOL
(
π_gëtime‹ig
);

2152 
EXPORT_SYMBOL
(
π_èsk_make_≥riodic_ªœtive_ns
);

2153 
EXPORT_SYMBOL
(
π_èsk_make_≥riodic
);

2154 
EXPORT_SYMBOL
(
π_èsk_waô_≥riod
);

2155 
EXPORT_SYMBOL
(
π_èsk_£t_ªsume_íd_times
);

2156 
EXPORT_SYMBOL
(
π_£t_ªsume_time
);

2157 
EXPORT_SYMBOL
(
π_£t_≥riod
);

2158 
EXPORT_SYMBOL
(
√xt_≥riod
);

2159 
EXPORT_SYMBOL
(
π_busy_¶ìp
);

2160 
EXPORT_SYMBOL
(
π_¶ìp
);

2161 
EXPORT_SYMBOL
(
π_¶ìp_u¡û
);

2162 
EXPORT_SYMBOL
(
π_èsk_masked_unblock
);

2163 
EXPORT_SYMBOL
(
π_«no¶ìp
);

2164 
EXPORT_SYMBOL
(
π_íq_ªady_edf_èsk
);

2165 
EXPORT_SYMBOL
(
π_íq_ªady_èsk
);

2166 
EXPORT_SYMBOL
(
π_ªnq_ªady_èsk
);

2167 
EXPORT_SYMBOL
(
π_ªm_ªady_èsk
);

2168 
EXPORT_SYMBOL
(
π_ªm_ªady_cuºít
);

2169 
EXPORT_SYMBOL
(
π_íq_timed_èsk
);

2170 
EXPORT_SYMBOL
(
π_wake_up_timed_èsks
);

2171 
EXPORT_SYMBOL
(
π_ªm_timed_èsk
);

2172 
EXPORT_SYMBOL
(
π_íqueue_blocked
);

2173 
EXPORT_SYMBOL
(
π_dequeue_blocked
);

2174 
EXPORT_SYMBOL
(
π_ªnq_cuºít
);

2175 
EXPORT_SYMBOL
(
π_«med_èsk_öô
);

2176 
EXPORT_SYMBOL
(
π_«med_èsk_öô_˝uid
);

2177 
EXPORT_SYMBOL
(
π_«med_èsk_dñëe
);

2178 
EXPORT_SYMBOL
(
is_¥o˚ss_ªgi°îed
);

2179 
EXPORT_SYMBOL
(
π_ªgi°î
);

2180 
EXPORT_SYMBOL
(
π_drg_⁄_«me
);

2181 
EXPORT_SYMBOL
(
π_drg_⁄_adr
);

2182 
EXPORT_SYMBOL
(
π_gë_«me
);

2183 
EXPORT_SYMBOL
(
π_gë_adr
);

2184 
EXPORT_SYMBOL
(
π_gë_ty≥
);

2185 
EXPORT_SYMBOL
(
π_drg_⁄_«me_˙t
);

2186 
EXPORT_SYMBOL
(
π_drg_⁄_adr_˙t
);

2187 
EXPORT_SYMBOL
(
π_gë_adr_˙t
);

2188 
EXPORT_SYMBOL
(
π_gë_ªgi°ry_¶Ÿ
);

2190 
EXPORT_SYMBOL
(
π_èsk_öô
);

2191 
EXPORT_SYMBOL
(
π_èsk_öô_˝uid
);

2192 
EXPORT_SYMBOL
(
π_£t_ru¬abÀ_⁄_˝us
);

2193 
EXPORT_SYMBOL
(
π_£t_ru¬abÀ_⁄_˝uid
);

2194 
EXPORT_SYMBOL
(
π_check_cuºít_°ack
);

2195 
EXPORT_SYMBOL
(
π_scheduÀ
);

2196 
EXPORT_SYMBOL
(
π_•v_RMS
);

2197 
EXPORT_SYMBOL
(
π_sched_lock
);

2198 
EXPORT_SYMBOL
(
π_sched_u∆ock
);

2199 
EXPORT_SYMBOL
(
π_èsk_dñëe
);

2200 
EXPORT_SYMBOL
(
π_is_h¨d_timî_ru¬ög
);

2201 
EXPORT_SYMBOL
(
π_£t_≥riodic_mode
);

2202 
EXPORT_SYMBOL
(
π_£t_⁄eshŸ_mode
);

2203 
EXPORT_SYMBOL
(
π_gë_timî_˝u
);

2204 
EXPORT_SYMBOL
(
°¨t_π_timî
);

2205 
EXPORT_SYMBOL
(
°›_π_timî
);

2206 
EXPORT_SYMBOL
(
°¨t_π_≠ic_timîs
);

2207 
EXPORT_SYMBOL
(
π_h¨d_timî_tick_cou¡
);

2208 
EXPORT_SYMBOL
(
π_h¨d_timî_tick_cou¡_˝uid
);

2209 
EXPORT_SYMBOL
(
π_£t_èsk_å≠_h™dÀr
);

2210 
EXPORT_SYMBOL
(
π_gë_time
);

2211 
EXPORT_SYMBOL
(
π_gë_time_˝uid
);

2212 
EXPORT_SYMBOL
(
π_gë_time_ns
);

2213 
EXPORT_SYMBOL
(
π_gë_time_ns_˝uid
);

2214 
EXPORT_SYMBOL
(
π_gë_˝u_time_ns
);

2215 
EXPORT_SYMBOL
(
π_gë_ªÆ_time
);

2216 
EXPORT_SYMBOL
(
π_gë_ªÆ_time_ns
);

2217 
EXPORT_SYMBOL
(
π_gë_ba£_löux_èsk
);

2218 
EXPORT_SYMBOL
(
π_Æloc_dy«mic_èsk
);

2219 
EXPORT_SYMBOL
(
π_ªgi°î_w©chdog
);

2220 
EXPORT_SYMBOL
(
π_dîegi°î_w©chdog
);

2221 
EXPORT_SYMBOL
(
cou¡2«no
);

2222 
EXPORT_SYMBOL
(
«no2cou¡
);

2223 
EXPORT_SYMBOL
(
cou¡2«no_˝uid
);

2224 
EXPORT_SYMBOL
(
«no2cou¡_˝uid
);

2226 
EXPORT_SYMBOL
(
π_smp_löux_èsk
);

2227 
EXPORT_SYMBOL
(
π_smp_cuºít
);

2228 
EXPORT_SYMBOL
(
π_smp_time_h
);

2229 
EXPORT_SYMBOL
(
π_smp_⁄eshŸ_timî
);

2230 
EXPORT_SYMBOL
(
wake_up_§q
);

2231 
EXPORT_SYMBOL
(
£t_π_fun_íåõs
);

2232 
EXPORT_SYMBOL
(
ª£t_π_fun_íåõs
);

2233 
EXPORT_SYMBOL
(
£t_π_fun_ext_ödex
);

2234 
EXPORT_SYMBOL
(
ª£t_π_fun_ext_ödex
);

2235 
EXPORT_SYMBOL
(
max_¶Ÿs
);

2237 #ifde‡
CONFIG_SMP


	@/usr/src/rtai/base/sched/liblxrt/services.c

21 
	#ªad_¸4
(Ë0

	)

22 
	#wrôe_¸4
(
x
)

	)

25 
	#CONFIG_RTAI_LXRT_INLINE
 0

	)

27 
	~<πai_lxπ.h
>

28 
	~<πai_sig«l.h
>

29 
	~<πai_vîsi⁄.h
>

30 
	~<πai_sched.h
>

31 
	~<πai_mÆloc.h
>

32 
	~<πai_åa˚.h
>

33 
	~<πai_Àds.h
>

34 
	~<πai_£m.h
>

35 
	~<πai_rwl.h
>

36 
	~<πai_•l.h
>

37 
	~<πai_scb.h
>

38 
	~<πai_mbx.h
>

39 
	~<πai_msg.h
>

40 
	~<πai_tbx.h
>

41 
	~<πai_mq.h
>

42 
	~<πai_bôs.h
>

43 
	~<πai_wd.h
>

44 
	~<πai_èskÀts.h
>

45 
	~<πai_fifos.h
>

46 
	~<πai_√åpc.h
>

47 
	~<πai_shm.h
>

48 
	~<πai_usi.h
>

49 
	~<πai_posix.h
>

50 #ifde‡
CONFIG_RTAI_DRIVERS_SERIAL


51 
	~<πai_£rül.h
>

53 #ifde‡
CONFIG_RTAI_TASKLETS


54 
	~<πai_èskÀts.h
>

	@/usr/src/rtai/base/sched/liblxrt/touchall.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<sys/u£r.h
>

24 
	~<sys/mm™.h
>

25 
	~<mÆloc.h
>

27 
	#TOUCH_BUFSIZE
 256

	)

28 
	#GROW_STACK
 (64*1024)

	)

29 
	#GROW_HEAP
 (64*1024)

	)

30 
	#STR_SIZE
 16

	)

32 
	$touch_¨ó
(*
begö
, 
size_t
 
Àn
, 
wrôóbÀ
) {

33 vﬁ©ûê*
±r
 = 
begö
;

34 
i
, 
∑ge_size
;

35 vﬁ©ûê
tmp
;

37 
∑ge_size
 = 
	`gë∑gesize
();

38 
i
=0;i<
Àn
;i+=
∑ge_size
) {

39 
tmp
=
±r
[
i
];

41 if(
wrôóbÀ
) {

42 
±r
[
i
]=
tmp
;

46 
	}
}

48 
	$touch_Æl
() {

49 
FILE
 *
m≠s
;

50 
°¨t
,
íd
,
Êags
,
size
;

51 
≥rms
[
STR_SIZE
],
dev
[STR_SIZE];

52 
buf
[
TOUCH_BUFSIZE
];

54 
m≠s
=
	`f›í
("/proc/self/maps","r");

55 if(!
m≠s
) {

56 
	`≥º‹
("touch_all");

59 
	`fgës
(
buf
,
TOUCH_BUFSIZE
-1,
m≠s
)) {

60 if(
	`ssˇnf
(
buf
,"%8lx-%8lx %15†%lx %15†%lu",&
°¨t
,&
íd
,
≥rms
,&
Êags
,
dev
,&
size
)<2)

62 if(
≥rms
[1] == 'w')

63 
	`touch_¨ó
((*)
°¨t
,
íd
-start,1);

65 
	`touch_¨ó
((*)
°¨t
,
íd
-start,0);

67 
	`f˛o£
(
m≠s
);

69 
	}
}

71 
	$lock_Æl
(
°k
, 
hóp
) {

72 
	`dump_mÆloc_°©s
();

73 
îr
, 
n
, 
i
;

74 *
±
;

75 
°ack
[
°k
 ? stk : 
GROW_STACK
];

76 
°ack
[0] = ' ';

91 
n
 = 
hóp
 / 65536 + 1;

92 i‡–
n
 > ((
°ack
) / ())) {

93 
	`¥ötf
("heapÅooÜarge\n");

94 
	`exô
(-1);

97 
îr
 = 
	`mÆl›t
(
M_MMAP_THRESHOLD
, 512*1024);

98 i‡(!
îr
) {

99 
	`¥ötf
("mallopt(M_MMAP_THRESHOLD, heap) failed\n");

100 
	`exô
(-1);

103 
îr
 = 
	`mÆl›t
(
M_TOP_PAD
, 
hóp
 ? hó∞: 
GROW_HEAP
);

104 i‡(!
îr
) {

105 
	`¥ötf
("mallopt(M_TOP_PAD, heap) failed\n");

106 
	`exô
(-1);

109 if(
	`mlockÆl
(
MCL_CURRENT
|
MCL_FUTURE
)) {

110 
	`≥º‹
("mlockall");

111 
	`exô
(-1);

114 
	`touch_Æl
();

116 
±
 = (*Ë
°ack
;

117 
i
=0; i<
n
 ; i++, 
±
++Ë*± = (Ë
	`mÆloc
(65536);

118 
±
 = (*Ë
°ack
;

119 
i
=0; i<
n
 ; i++, 
±
++Ë
	`‰ì
((*) *pt);

122 
	}
}

124 
	$dump_mÆloc_°©s
()

126 
mÆlöfo
 
mi
;

127 
	`πai_¥öt_to_s¸ìn
(c⁄° *
fmt
, ...);

129 
mi
 = 
	`mÆlöfo
();

131 
	`πai_¥öt_to_s¸ìn
("\¡ŸÆ s∑˚áŒoˇãd from sy°em %d\n", 
mi
.
¨ía
);

132 
	`πai_¥öt_to_s¸ìn
("numbî o‡n⁄-öu£ chunk† %d\n", 
mi
.
‹dblks
);

133 
	`πai_¥öt_to_s¸ìn
("numbî o‡mm≠≥dÑegi⁄† %d\n", 
mi
.
hblks
);

134 
	`πai_¥öt_to_s¸ìn
("tŸÆ s∑˚ i¿mm≠≥dÑegi⁄† %d\n", 
mi
.
hblkhd
);

135 
	`πai_¥öt_to_s¸ìn
("tŸÆáŒoˇãd s∑˚ %d\n", 
mi
.
u‹dblks
);

136 
	`πai_¥öt_to_s¸ìn
("tŸÆÇ⁄-öu£ s∑˚ %d\n", 
mi
.
f‹dblks
);

137 
	`πai_¥öt_to_s¸ìn
("t›-mo°,ÑñóßbÀ s∑˚ %d\n", 
mi
.
kìpco°
);

138 
	}
}

	@/usr/src/rtai/base/sched/rtai_sched.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x9fÁ0732, 
__VMLINUX_SYMBOL_STR
(
kmÆloc_ˇches
) },

22 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

23 { 0x773eb43d, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_≠ic_timîs
) },

24 { 0x4c4„f19, 
__VMLINUX_SYMBOL_STR
(
kî√l_°ack
) },

25 { 0xØ250b80, 
__VMLINUX_SYMBOL_STR
(
π_£t_å≠_h™dÀr
) },

26 { 0xff155e3f, 
__VMLINUX_SYMBOL_STR
(
__ùùe_ªíãr_roŸ
) },

27 { 0xd6ì688f, 
__VMLINUX_SYMBOL_STR
(
vmÆloc
) },

28 { 0x5603e8bd, 
__VMLINUX_SYMBOL_STR
(
sögÀ_›í
) },

29 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

30 { 0x6781875f, 
__VMLINUX_SYMBOL_STR
(
π_schedulög
) },

31 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

32 { 0xa9475aˇ, 
__VMLINUX_SYMBOL_STR
(
sögÀ_ªÀa£
) },

33 { 0x72d0ec1b, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_≠ic_timîs
) },

34 { 0x6f7eˇ2c, 
__VMLINUX_SYMBOL_STR
(
ùùe_‰ì_vúq
) },

35 { 0x9b924323, 
__VMLINUX_SYMBOL_STR
(
commô_¸eds
) },

36 { 0x4a70f94a, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

37 { 0x24ˇfbeb, 
__VMLINUX_SYMBOL_STR
(
ªmove_¥oc_íåy
) },

38 { 0x20451948, 
__VMLINUX_SYMBOL_STR
(
πai_u§q_di•©chî
) },

39 { 0x3546dc4f, 
__VMLINUX_SYMBOL_STR
(
π_ªÀa£_úq
) },

40 { 0xf58126a0, 
__VMLINUX_SYMBOL_STR
(
πai_ˇtch_evít
) },

41 { 0x440c78f4, 
__VMLINUX_SYMBOL_STR
(
Âu_ow√r_èsk
) },

42 { 0x846f59a, 
__VMLINUX_SYMBOL_STR
(
˝u_öfo
) },

43 { 0x999e8297, 
__VMLINUX_SYMBOL_STR
(
v‰ì
) },

44 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

45 { 0xcc7141e, 
__VMLINUX_SYMBOL_STR
(
öô_Âu
) },

46 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

47 { 0xcf012e93, 
__VMLINUX_SYMBOL_STR
(
£q_ªad
) },

48 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

49 { 0xeb5f2c5e, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_úq
) },

50 { 0xfb578fc5, 
__VMLINUX_SYMBOL_STR
(
mem£t
) },

51 { 0x985fˇbb, 
__VMLINUX_SYMBOL_STR
(
¥oc_mkdú
) },

52 { 0x11089ac7, 
__VMLINUX_SYMBOL_STR
(
_˘y≥
) },

53 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

54 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

55 { 0xf99c8f28, 
__VMLINUX_SYMBOL_STR
(
ùùe_≥r˝u
) },

56 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

57 { 0x20b76Ø5, 
__VMLINUX_SYMBOL_STR
(
£t_˝us_Ælowed_±r
) },

58 { 0x5f50e4eb, 
__VMLINUX_SYMBOL_STR
(
π_‰ì_§q
) },

59 { 0x7c1bb386, 
__VMLINUX_SYMBOL_STR
(
u§_π_≥nd_löux_úq
) },

60 { 0x79d25270, 
__VMLINUX_SYMBOL_STR
(
πai_£t_löux_èsk_¥i‹ôy
) },

61 { 0xfb22bc6c, 
__VMLINUX_SYMBOL_STR
(
˝u_bô_bôm≠
) },

62 { 0x24681be7, 
__VMLINUX_SYMBOL_STR
(
π_löux_hπ_£t_mode
) },

63 { 0x4f25f20d, 
__VMLINUX_SYMBOL_STR
(
¥ï¨e_¸eds
) },

64 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

65 { 0xac1a55be, 
__VMLINUX_SYMBOL_STR
(
uƒegi°î_ªboŸ_nŸifõr
) },

66 { 0xd1eb0a66, 
__VMLINUX_SYMBOL_STR
(
c⁄ãxt_swôch
) },

67 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

68 { 0x496187d3, 
__VMLINUX_SYMBOL_STR
(
π_≥nd_löux_§q
) },

69 { 0x7647733f, 
__VMLINUX_SYMBOL_STR
(
ùùe_vútuÆize_úq
) },

70 { 0xf8482d32, 
__VMLINUX_SYMBOL_STR
(
π_smp_times
) },

71 { 0x3517383e, 
__VMLINUX_SYMBOL_STR
(
ªgi°î_ªboŸ_nŸifõr
) },

72 { 0xf1dd92a8, 
__VMLINUX_SYMBOL_STR
(
π_¥ötk
) },

73 { 0x93fˇ811, 
__VMLINUX_SYMBOL_STR
(
__gë_‰ì_∑ges
) },

74 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

75 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

76 { 0xd62c833f, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

77 { 0x1000e51, 
__VMLINUX_SYMBOL_STR
(
scheduÀ
) },

78 { 0x141719e3, 
__VMLINUX_SYMBOL_STR
(
πai_tu«bÀs
) },

79 { 0xb98cba5c, 
__VMLINUX_SYMBOL_STR
(
ùùe_ˇtch_evít
) },

80 { 0xd5560cbc, 
__VMLINUX_SYMBOL_STR
(
wake_up_¥o˚ss
) },

81 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

82 { 0x23˚179d, 
__VMLINUX_SYMBOL_STR
(
kmem_ˇche_Æloc_åa˚
) },

83 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

84 { 0x4302d0eb, 
__VMLINUX_SYMBOL_STR
(
‰ì_∑ges
) },

85 { 0xe2b2dc02, 
__VMLINUX_SYMBOL_STR
(
πai_ˇlibøã_h¨d_timî
) },

86 { 0x8c98615, 
__VMLINUX_SYMBOL_STR
(
¥oc_¸óã_d©a
) },

87 { 0x4f68e5c9, 
__VMLINUX_SYMBOL_STR
(
do_gëtimeofday
) },

88 { 0xf2cb2´0, 
__VMLINUX_SYMBOL_STR
(
£q_l£ek
) },

89 { 0x´7a3c80, 
__VMLINUX_SYMBOL_STR
(
__ùùe_do_sync_°age
) },

90 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

91 { 0xcdde3d26, 
__VMLINUX_SYMBOL_STR
(
πai_¥oc_roŸ
) },

92 { 0x69acdf38, 
__VMLINUX_SYMBOL_STR
(
mem˝y
) },

93 { 0x152e46d2, 
__VMLINUX_SYMBOL_STR
(
π_löux_hπ_√xt_shŸ
) },

94 { 0x7628f3c7, 
__VMLINUX_SYMBOL_STR
(
this_˝u_off
) },

95 { 0x74c134b9, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight32
) },

96 { 0x27d47ì9, 
__VMLINUX_SYMBOL_STR
(
πai_domaö
) },

97 { 0xd768Ø9, 
__VMLINUX_SYMBOL_STR
(
≠ic
) },

98 { 0x58a9c8de, 
__VMLINUX_SYMBOL_STR
(
vmÆloc_to_∑ge
) },

99 { 0x7d056198, 
__VMLINUX_SYMBOL_STR
(
π_ªque°_§q
) },

100 { 0x7345910d, 
__VMLINUX_SYMBOL_STR
(
πai_löux_c⁄ãxt
) },

101 { 0xec30354e, 
__VMLINUX_SYMBOL_STR
(
ùùe_Æloc_vúq
) },

102 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

105 c⁄° 
	g__moduÀ_dïíds
[]

106 
__u£d


107 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

111 
MODULE_INFO
(
§cvîsi⁄
, "15C74EE1CC9275C664D4903");

	@/usr/src/rtai/base/sched/sched.c

29 
	~<löux/moduÀ.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/vîsi⁄.h
>

32 
	~<löux/î∫o.h
>

33 
	~<löux/¶ab.h
>

34 
	~<löux/timex.h
>

35 
	~<löux/sched.h
>

36 
	~<löux/úq.h
>

37 
	~<löux/ªboŸ.h
>

38 
	~<löux/sys.h
>

40 
	~<asm/∑øm.h
>

41 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,4,0)

42 
	~<asm/sy°em.h
>

44 
	~<asm/io.h
>

45 
	~<asm/uac˚ss.h
>

46 
	~<asm/mmu_c⁄ãxt.h
>

48 
	#__KERNEL_SYSCALLS__


	)

49 
	~<löux/uni°d.h
>

51 #ifde‡
CONFIG_PROC_FS


52 
	~<löux/°©.h
>

53 
	~<löux/¥oc_fs.h
>

54 
	~<πai_¥oc_fs.h
>

55 
πai_¥oc_sched_ªgi°î
();

56 
πai_¥oc_sched_uƒegi°î
();

57 
πai_¥oc_lxπ_ªgi°î
();

58 
πai_¥oc_lxπ_uƒegi°î
();

61 
	~<πai.h
>

62 
	~<asm/πai_sched.h
>

63 
	~<πai_lxπ.h
>

64 
	~<πai_ªgi°ry.h
>

65 
	~<πai_«m2num.h
>

66 
	~<πai_schedc‹e.h
>

67 
	~<πai_¥öhî.h
>

68 
	~<πai_sig«l.h
>

70 
MODULE_LICENSE
("GPL");

74 
RT_TASK
 
	gπ_smp_löux_èsk
[
NR_RT_CPUS
];

76 
RT_TASK
 *
	gπ_smp_cuºít
[
NR_RT_CPUS
];

78 
RTIME
 
	gπ_smp_time_h
[
NR_RT_CPUS
];

80 
	gπ_smp_⁄eshŸ_timî
[
NR_RT_CPUS
];

82 vﬁ©ûê
	gπ_sched_timed
;

84 
kli°_t
 
	gwake_up_°h
[
NR_RT_CPUS
];

85 
kli°_t
 
	gwake_up_hts
[
NR_RT_CPUS
];

86 
kli°_t
 
	gwake_up_§q
[
NR_RT_CPUS
];

90 °ru˘ { vﬁ©ûê
locked
, 
rq°ed
; } 
π_schedulög
[];

92 
	gπ_smp_löux_¸0
[
NR_RT_CPUS
];

94 
RT_TASK
 *
	gπ_smp_Âu_èsk
[
NR_RT_CPUS
];

96 
	gπ_smp_hÆf_tick
[
NR_RT_CPUS
];

98 
	gπ_smp_⁄eshŸ_ru¬ög
[
NR_RT_CPUS
];

100 vﬁ©ûê
	gπ_smp_timî_shŸ_fúed
[
NR_RT_CPUS
];

102 
π_times
 *
	glöux_times
;

104 
RT_TASK
 *
	glxπ_wdog_èsk
[
NR_RT_CPUS
];

106 
RT_TASK
 *
	glxπ_¥ev_èsk
[
NR_RT_CPUS
];

108 
lxπ_nŸify_ªboŸ
(
nŸifõr_block
 *
nb
,

109 
evít
,

110 *
±r
);

112 
nŸifõr_block
 
	glxπ_ªboŸ_nŸifõr
 = {

113 .
nŸifõr_ˇŒ
 = &
lxπ_nŸify_ªboŸ
,

114 .
	g√xt
 = 
NULL
,

115 .
	g¥i‹ôy
 = 0

118 
	#Âu_èsk
 (
π_smp_Âu_èsk
[
˝uid
])

	)

120 
	#π_hÆf_tick
 (
π_smp_hÆf_tick
[
˝uid
])

	)

122 
	#⁄eshŸ_ru¬ög
 (
π_smp_⁄eshŸ_ru¬ög
[
˝uid
])

	)

124 
	#⁄eshŸ_timî_˝uid
 (
π_smp_⁄eshŸ_timî
[
	`πai_˝uid
()])

	)

126 
	#timî_shŸ_fúed
 (
π_smp_timî_shŸ_fúed
[
˝uid
])

	)

128 
	#π_times
 (
π_smp_times
[
˝uid
])

	)

130 
	#löux_¸0
 (
π_smp_löux_¸0
[
˝uid
])

	)

132 
	#MAX_FRESTK_SRQ
 (2 << 6)

	)

133 °ru˘ { 
	m§q
; vﬁ©ûê
	mö
, 
	mout
; *
	mmp
[
MAX_FRESTK_SRQ
]; } 
	g‰°k_§q
;

135 
	#KTHREAD_M_PRIO
 
MAX_LINUX_RTPRIO


	)

136 
	#KTHREAD_F_PRIO
 
MAX_LINUX_RTPRIO


	)

138 #ifde‡
CONFIG_SMP


140 
π_£t_sched_ùi_g©e
();

141 
π_ª£t_sched_ùi_g©e
();

142 
π_scheduÀ_⁄_scheduÀ_ùi
();

144 
ölöe
 
	$π_ªque°_sched_ùi
()

146 
ªtvÆ
;

147 
ªtvÆ
 = 
	`π_ªque°_úq
(
SCHED_IPI
, (*)
π_scheduÀ_⁄_scheduÀ_ùi
, 
NULL
, 0);

149  
ªtvÆ
;

150 
	}
}

152 
ölöe
 
	$π_‰ì_sched_ùi
()

154 
	`π_ªÀa£_úq
(
SCHED_IPI
);

156 
	}
}

158 
ölöe
 
	$sched_gë_globÆ_lock
(
˝uid
)

160 
	`b¨rõr
();

161 i‡(!
	`ã°_™d_£t_bô
(
˝uid
, &
πai_˝u_lock
[0])) {

162 
	`πai_•ö_glock
(&
πai_˝u_lock
[0]);

164 
	`b¨rõr
();

165 
	}
}

167 
ölöe
 
	$sched_ªÀa£_globÆ_lock
(
˝uid
)

169 
	`b¨rõr
();

170 i‡(
	`ã°_™d_˛ór_bô
(
˝uid
, &
πai_˝u_lock
[0])) {

171 
	`πai_•ö_gu∆ock
(&
πai_˝u_lock
[0]);

173 
	`b¨rõr
();

174 
	}
}

178 
	#π_ªque°_sched_ùi
(Ë0

	)

180 
	#π_‰ì_sched_ùi
()

	)

182 
	#sched_gë_globÆ_lock
(
˝uid
)

	)

184 
	#sched_ªÀa£_globÆ_lock
(
˝uid
)

	)

190 #ifde‡
CONFIG_RTAI_MALLOC


191 
	gπai_k°ack_hóp_size
 = (
CONFIG_RTAI_KSTACK_HEAPSZ
*1024);

192 
RTAI_MODULE_PARM
(
πai_k°ack_hóp_size
, );

194 
πhóp_t
 
	gπai_k°ack_hóp
;

196 
	#π_k°ack_Æloc
(
sz
Ë
	`πhóp_Æloc
(&
πai_k°ack_hóp
, sz, 0)

	)

197 
	#π_k°ack_‰ì
(
p
Ë
	`πhóp_‰ì
(&
πai_k°ack_hóp
,Ö)

	)

199 
	#π_k°ack_Æloc
(
sz
Ë
	`π_mÆloc
(sz)

	)

200 
	#π_k°ack_‰ì
(
p
Ë
	`π_‰ì
’)

	)

203 
	gèsks_≥r_˝u
[
NR_RT_CPUS
] = { 0, };

205 
	$gë_mö_èsks_˝uid
()

207 
i
, 
˝uid
, 
mö
;

208 
mö
 = 
èsks_≥r_˝u
[
˝uid
 = 0];

209 
i
 = 1; i < 
	`num_⁄löe_˝us
(); i++) {

210 i‡(
èsks_≥r_˝u
[
i
] < 
mö
) {

211 
mö
 = 
èsks_≥r_˝u
[
˝uid
 = 
i
];

214  
˝uid
;

215 
	}
}

217 
	$put_cuºít_⁄_˝u
(
˝uid
)

219 #ifde‡
CONFIG_SMP


220 
èsk_°ru˘
 *
èsk
 = 
cuºít
;

221 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

222 
èsk
->
˝us_Ælowed
 = 1 << 
˝uid
;

223 
˝uid
 !
	`πai_˝uid
()) {

224 
èsk
->
°©e
 = 
TASK_INTERRUPTIBLE
;

225 
	`scheduÀ_timeout
(2);

228 i‡(
	`£t_˝us_Ælowed_±r
(
èsk
, 
	`˝umask_of
(
˝uid
))) {

229 
	`£t_˝us_Ælowed_±r
(
cuºít
, 
	`˝umask_of
(((
RT_TASK
 *)(
èsk
->
	`πai_tskext
(
TSKEXT0
)))->
ru¬abÀ_⁄_˝us
 = 
	`πai_˝uid
()));

233 
	}
}

235 
£t_πext
(
RT_TASK
 *
èsk
, 
¥i‹ôy
, 
u£s_Âu
, (*
sig«l
)(), 
˝uid
, 
èsk_°ru˘
 *
ªlök
)

237 
Êags
;

239 i‡(
	`num_⁄löe_˝us
() <= 1) {

240 
˝uid
 = 0;

242 i‡(
èsk
->
magic
 =
RT_TASK_MAGIC
 || 
˝uid
 >
NR_RT_CPUS
 || 
¥i‹ôy
 < 0) {

243  -
EINVAL
;

245 i‡(
lxπ_wdog_èsk
[
˝uid
] &&

246 
lxπ_wdog_èsk
[
˝uid
] !
èsk
 &&

247 
¥i‹ôy
 =
RT_SCHED_HIGHEST_PRIORITY
) {

248 
	`π_¥ötk
("HighestÖriorityÑeserved for RTAI watchdog\n");

249  -
EBUSY
;

251 
èsk
->
u£s_Âu
 = uses_fpu ? 1 : 0;

252 
èsk
->
ru¬abÀ_⁄_˝us
 = 
˝uid
;

253 (
èsk
->
°ack_bŸtom
 = (*)&èsk->
Âu_ªg
)[0] = 0;

254 
èsk
->
magic
 = 
RT_TASK_MAGIC
;

255 
èsk
->
pﬁicy
 = 0;

256 
èsk
->
owndªs
 = 0;

257 
èsk
->
ru¬ög
 = 0;

258 
èsk
->
¥io_∑s£d_to
 = 0;

259 
èsk
->
≥riod
 = 0;

260 
èsk
->
ªsume_time
 = 
RT_TIME_END
;

261 
èsk
->
≥riodic_ªsume_time
 = 
RT_TIME_END
;

262 
èsk
->
queue
.
¥ev
 =Åask->queue.
√xt
 = &(task->queue);

263 
èsk
->
queue
.task =Åask;

264 
èsk
->
msg_queue
.
¥ev
 =Åask->msg_queue.
√xt
 = &(task->msg_queue);

265 
èsk
->
msg_queue
.task =Åask;

266 
èsk
->
msg
 = 0;

267 
èsk
->
ªt_queue
.
¥ev
 =Åask->ªt_queue.
√xt
 = &(task->ret_queue);

268 
èsk
->
ªt_queue
.èsk = 
NULL
;

269 
èsk
->
çªv
 =Åask->
äext
 =Åask->
Ωªv
 =Åask->
∫ext
 =Åask;

270 
èsk
->
blocked_⁄
 = 
NULL
;

271 
èsk
->
sig«l
 = signal;

272 
èsk
->
unblocked
 = 0;

273 
èsk
->
π_sig«ls
 = 
NULL
;

274 
	`mem£t
(
èsk
->
èsk_å≠_h™dÀr
, 0, 
RTAI_NR_TRAPS
*(*));

275 
èsk
->
löux_sysˇŒ_£rvî
 = 
NULL
;

276 
èsk
->
busy_time_Æign
 = 0;

277 
èsk
->
ªsync_‰ame
 = 0;

278 
èsk
->
ExôHook
 = 0;

279 
èsk
->
u•_Êags
 =Åask->
u•_Êags_mask
 =Åask->
f‹˚_so·
 = 0;

280 
èsk
->
msg_buf
[0] = 0;

281 
èsk
->
exe˘ime
[0] =Åask->exectime[1] = 0;

282 
èsk
->
sy°em_d©a_±r
 = 0;

283 
	`©omic_öc
((
©omic_t
 *)(
èsks_≥r_˝u
 + 
˝uid
));

284 i‡(0 && 
ªlök
) {

285 
èsk
->
¥i‹ôy
 =Åask->
ba£_¥i‹ôy
 =Öriority;

286 
èsk
->
su•dïth
 =Åask->
is_h¨d
 = 1;

287 
èsk
->
°©e
 = 
RT_SCHED_READY
 | 
RT_SCHED_SUSPENDED
;

288 
ªlök
->
	`πai_tskext
(
TSKEXT0
Ë
èsk
;

289 
èsk
->
 xtsk
 = 
ªlök
;

291 
èsk
->
¥i‹ôy
 =Åask->
ba£_¥i‹ôy
 = 
BASE_SOFT_PRIORITY
 +Öriority;

292 
èsk
->
su•dïth
 =Åask->
is_h¨d
 = 0;

293 
èsk
->
°©e
 = 
RT_SCHED_READY
;

294 
cuºít
->
	`πai_tskext
(
TSKEXT0
Ë
èsk
;

295 
cuºít
->
	`πai_tskext
(
TSKEXT1
Ë
èsk
->
 xtsk
 = current;

296 
	`put_cuºít_⁄_˝u
(
˝uid
);

298 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

299 
èsk
->
√xt
 = 0;

300 
π_löux_èsk
.
¥ev
->
√xt
 = 
èsk
;

301 
èsk
->
¥ev
 = 
π_löux_èsk
.prev;

302 
π_löux_èsk
.
¥ev
 = 
èsk
;

303 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

305 
èsk
->
ªsq
.
¥ev
 =Åask->ªsq.
√xt
 = &task->resq;

306 
èsk
->
ªsq
.èsk = 
NULL
;

309 
	}
}

312 
π_kthªad_öô_˝uid
(
RT_TASK
 *
èsk
, (*
π_thªad
)(), 
d©a
,

313 
°ack_size
, 
¥i‹ôy
, 
u£s_Âu
,

314 (*
sig«l
)(), 
˝uid
)

316  
	`π_èsk_öô_˝uid
(
èsk
, 
π_thªad
, 
d©a
, 
°ack_size
, 
¥i‹ôy
, 0, 
sig«l
, 
˝uid
);

317 
	}
}

318 
EXPORT_SYMBOL
(
π_kthªad_öô_˝uid
);

321 
π_kthªad_öô
(
RT_TASK
 *
èsk
, (*
π_thªad
)(), 
d©a
,

322 
°ack_size
, 
¥i‹ôy
, 
u£s_Âu
,

323 (*
sig«l
)())

325  
	`π_èsk_öô_˝uid
(
èsk
, 
π_thªad
, 
d©a
, 
°ack_size
, 
¥i‹ôy
, 
u£s_Âu
, 
sig«l
, 
	`gë_mö_èsks_˝uid
());

326 
	}
}

327 
EXPORT_SYMBOL
(
π_kthªad_öô
);

330 
asmlökage
 
π_°¨tup
((*
π_thªad
)(), 
d©a
)

332 
	`π_èsk_dñëe
(
RT_TASK
 *);

333 
RT_TASK
 *
π_cuºít
 = 
π_smp_cuºít
[
	`πai_˝uid
()];

334 
	`π_globÆ_°i
();

335 #i‡
CONFIG_RTAI_MONITOR_EXECTIME


336 
π_cuºít
->
exe˘ime
[1] = 
	`πai_rdtsc
();

338 (((*)())
π_cuºít
->
max_msg_size
[0])(rt_current->max_msg_size[1]);

339 
	`π_drg_⁄_adr
(
π_cuºít
);

340 
	`π_èsk_dñëe
(
π_smp_cuºít
[
	`πai_˝uid
()]);

341 
	`π_¥ötk
("LXRT:Åask %∞ªtu∫ed buàcouldÇŸ bêdñ©ed.\n", 
π_cuºít
);

342 
	}
}

345 
	gπ_pid
 = (
INT_MAX
 & ~(0xF));

346 
DEFINE_SPINLOCK
(
π_pid_lock
);

348 
	$π_£t_èsk_pid
(
RT_TASK
 *
èsk
)

350 
Êags
;

351 
Êags
 = 
	`π_•ö_lock_úqßve
(&
π_pid_lock
);

352 
èsk
->
tid
 = 
π_pid
 =Ñt_pid - 0x10;

353 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
π_pid_lock
);

354 
èsk
->
tid
 +èsk->
ru¬abÀ_⁄_˝us
;

355 
	}
}

356 
EXPORT_SYMBOL
(
π_£t_èsk_pid
);

358 
RT_TASK
 *
	$π_föd_èsk_by_pid
(
pid_t
 
pid
)

360 
RT_TASK
 *
èsk
 = &
π_smp_löux_èsk
[
pid
 & 0xF];

361 (
èsk
 =Åask->
√xt
)) {

362 i‡(
èsk
->
tid
 =
pid
) {

363  
èsk
;

366  
NULL
;

367 
	}
}

368 
EXPORT_SYMBOL
(
π_föd_èsk_by_pid
);

371 
π_èsk_öô_˝uid
(
RT_TASK
 *
èsk
, (*
π_thªad
)(), 
d©a
, 
°ack_size
, 
¥i‹ôy
, 
u£s_Âu
, (*
sig«l
)(), 
˝uid
)

373 *
°
, 
i
;

374 
Êags
;

376 i‡(
	`num_⁄löe_˝us
() <= 1) {

377 
˝uid
 = 0;

379 i‡(
èsk
->
magic
 =
RT_TASK_MAGIC
 || 
˝uid
 >
NR_RT_CPUS
 || 
¥i‹ôy
 < 0) {

380  -
EINVAL
;

382 i‡(!(
°
 = (*)
	`π_k°ack_Æloc
(
°ack_size
))) {

383  -
ENOMEM
;

385 i‡(
lxπ_wdog_èsk
[
˝uid
] &&Üxπ_wdog_èsk[˝uid] !
èsk


386 && 
¥i‹ôy
 =
RT_SCHED_HIGHEST_PRIORITY
) {

387 
	`π_¥ötk
("HighestÖriorityÑeserved for RTAI watchdog\n");

388  -
EBUSY
;

391 
èsk
->
b°ack
 =Åask->
°ack
 = (*)((()
°
 + 
°ack_size
 - 0x10) & ~0xF);

392 
èsk
->
°ack
[0] = 0;

393 
èsk
->
u£s_Âu
 = uses_fpu ? 1 : 0;

394 
èsk
->
ru¬abÀ_⁄_˝us
 = 
˝uid
;

395 
	`©omic_öc
((
©omic_t
 *)(
èsks_≥r_˝u
 + 
˝uid
));

396 *(
èsk
->
°ack_bŸtom
 = 
°
) = 0;

397 
èsk
->
magic
 = 
RT_TASK_MAGIC
;

398 
èsk
->
pﬁicy
 = 0;

399 
èsk
->
su•dïth
 = 1;

400 
èsk
->
°©e
 = (
RT_SCHED_SUSPENDED
 | 
RT_SCHED_READY
);

401 
èsk
->
owndªs
 = 0;

402 
èsk
->
ru¬ög
 = 0;

403 
èsk
->
is_h¨d
 = 1;

404 
èsk
->
 xtsk
 = 0;

405 
èsk
->
¥i‹ôy
 =Åask->
ba£_¥i‹ôy
 =Öriority;

406 
èsk
->
¥io_∑s£d_to
 = 0;

407 
èsk
->
≥riod
 = 0;

408 
èsk
->
ªsume_time
 = 
RT_TIME_END
;

409 
èsk
->
≥riodic_ªsume_time
 = 
RT_TIME_END
;

410 
èsk
->
queue
.
¥ev
 = &(task->queue);

411 
èsk
->
queue
.
√xt
 = &(task->queue);

412 
èsk
->
queue
.task =Åask;

413 
èsk
->
msg_queue
.
¥ev
 = &(task->msg_queue);

414 
èsk
->
msg_queue
.
√xt
 = &(task->msg_queue);

415 
èsk
->
msg_queue
.task =Åask;

416 
èsk
->
msg
 = 0;

417 
èsk
->
ªt_queue
.
¥ev
 = &(task->ret_queue);

418 
èsk
->
ªt_queue
.
√xt
 = &(task->ret_queue);

419 
èsk
->
ªt_queue
.èsk = 
NULL
;

420 
èsk
->
çªv
 =Åask->
äext
 =

421 
èsk
->
Ωªv
 =Åask->
∫ext
 =Åask;

422 
èsk
->
blocked_⁄
 = 
NULL
;

423 
èsk
->
sig«l
 = signal;

424 
èsk
->
unblocked
 = 0;

425 
èsk
->
π_sig«ls
 = 
NULL
;

426 
i
 = 0; i < 
RTAI_NR_TRAPS
; i++) {

427 
èsk
->
èsk_å≠_h™dÀr
[
i
] = 
NULL
;

429 
èsk
->
löux_sysˇŒ_£rvî
 = 
NULL
;

430 
èsk
->
busy_time_Æign
 = 0;

431 
èsk
->
ªsync_‰ame
 = 0;

432 
èsk
->
ExôHook
 = 0;

433 
èsk
->
exe˘ime
[0] =Åask->exectime[1] = 0;

434 
èsk
->
sy°em_d©a_±r
 = 0;

436 
èsk
->
max_msg_size
[0] = ()
π_thªad
;

437 
èsk
->
max_msg_size
[1] = 
d©a
;

438 
	`öô_¨ch_°ack
();

440 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

441 
èsk
->
√xt
 = 0;

442 
π_löux_èsk
.
¥ev
->
√xt
 = 
èsk
;

443 
èsk
->
¥ev
 = 
π_löux_èsk
.prev;

444 
π_löux_èsk
.
¥ev
 = 
èsk
;

445 
	`öô_èsk_Âív
(
èsk
);

446 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

448 
èsk
->
ªsq
.
¥ev
 =Åask->ªsq.
√xt
 = &task->resq;

449 
èsk
->
ªsq
.èsk = 
NULL
;

450 
	`π_£t_èsk_pid
(
èsk
);

453 
	}
}

455 
π_èsk_öô
(
RT_TASK
 *
èsk
, (*
π_thªad
)(), 
d©a
,

456 
°ack_size
, 
¥i‹ôy
, 
u£s_Âu
,

457 (*
sig«l
)())

459  
	`π_èsk_öô_˝uid
(
èsk
, 
π_thªad
, 
d©a
, 
°ack_size
, 
¥i‹ôy
,

460 
u£s_Âu
, 
sig«l
, 
	`gë_mö_èsks_˝uid
());

461 
	}
}

464 
RTAI_SYSCALL_MODE
 
	$π_£t_ru¬abÀ_⁄_˝uid
(
RT_TASK
 *
èsk
, 
˝uid
)

466 
Êags
;

467 
RT_TASK
 *
löux_èsk
;

469 i‡(
èsk
->
 xtsk
) {

473 i‡(
˝uid
 >
NR_RT_CPUS
) {

474 
˝uid
 = 
	`gë_mö_èsks_˝uid
();

476 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

477 
π_smp_⁄eshŸ_timî
[
èsk
->
ru¬abÀ_⁄_˝us
] |

478 (
π_smp_⁄eshŸ_timî
[
˝uid
] << 1)) {

480 
èsk
->
≥riod
 = 
	`Œimd
—ask->≥riod, 
TIMER_FREQ
, 
tu√d
.
˝u_‰eq
);

481 
èsk
->
ªsume_time
 = 
	`Œimd
—ask->ªsume_time, 
TIMER_FREQ
, 
tu√d
.
˝u_‰eq
);

482 
èsk
->
≥riodic_ªsume_time
 = 
	`Œimd
—ask->≥riodic_ªsume_time, 
TIMER_FREQ
, 
tu√d
.
˝u_‰eq
);

485 
èsk
->
≥riod
 = 
	`Œimd
—ask->≥riod, 
tu√d
.
˝u_‰eq
, 
TIMER_FREQ
);

486 
èsk
->
ªsume_time
 = 
	`Œimd
—ask->ªsume_time, 
tu√d
.
˝u_‰eq
, 
TIMER_FREQ
);

487 
èsk
->
≥riodic_ªsume_time
 = 
	`Œimd
—ask->≥riodic_ªsume_time, 
tu√d
.
˝u_‰eq
, 
TIMER_FREQ
);

490 i‡(!((
èsk
->
¥ev
)->
√xt
 =Åask->next)) {

491 
π_smp_löux_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
].
¥ev
 =Åask->prev;

493 (
èsk
->
√xt
)->
¥ev
 =Åask->prev;

495 i‡((
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

496 
	`ªm_timed_èsk
(
èsk
);

497 
èsk
->
ru¬abÀ_⁄_˝us
 = 
˝uid
;

498 
	`íq_timed_èsk
(
èsk
);

500 
èsk
->
ru¬abÀ_⁄_˝us
 = 
˝uid
;

502 
èsk
->
√xt
 = 0;

503 (
löux_èsk
 = 
π_smp_löux_èsk
 + 
˝uid
)->
¥ev
->
√xt
 = 
èsk
;

504 
èsk
->
¥ev
 = 
löux_èsk
->prev;

505 
löux_èsk
->
¥ev
 = 
èsk
;

506 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

507 
	}
}

510 
RTAI_SYSCALL_MODE
 
	$π_£t_ru¬abÀ_⁄_˝us
(
RT_TASK
 *
èsk
, 
run_⁄_˝us
)

512 
˝uid
;

514 i‡(
èsk
->
 xtsk
) {

518 #ifde‡
CONFIG_SMP


519 
run_⁄_˝us
 &
	`CPUMASK
(
˝u_⁄löe_m≠
);

521 
run_⁄_˝us
 = 1;

523 
˝uid
 = 
	`gë_mö_èsks_˝uid
();

524 i‡(!
	`ã°_bô
(
˝uid
, &
run_⁄_˝us
)) {

525 
˝uid
 = 
	`f‚z
(
run_⁄_˝us
);

527 
	`π_£t_ru¬abÀ_⁄_˝uid
(
èsk
, 
˝uid
);

528 
	}
}

531 
	$π_check_cuºít_°ack
()

533 
DECLARE_RT_CURRENT
;

534 *
•
;

536 
ASSIGN_RT_CURRENT
;

537 i‡(
π_cuºít
 !&
π_löux_èsk
) {

538 
•
 = 
	`gë_°ack_poöãr
();

539  (
•
 - (*)(
π_cuºít
->
°ack_bŸtom
));

541  
RT_RESEM_SUSPDEL
;

543 
	}
}

546 
	#RR_YIELD
() \

547 i‡(
CONFIG_RTAI_ALLOW_RR
 && 
π_cuºít
->
pﬁicy
 > 0) { \

548 i‡(
π_cuºít
->
yõld_time
 <
π_times
.
tick_time
) { \

549 
π_cuºít
->
º_ªmaöög
 =Ñt_cuºít->
º_qu™tum
; \

550 i‡(
π_cuºít
->
°©e
 =
RT_SCHED_READY
) { \

551 
RT_TASK
 *
èsk
; \

552 
èsk
 = 
π_cuºít
->
∫ext
; \

553 
π_cuºít
->
¥i‹ôy
 =
èsk
->priority) { \

554 
èsk
 =Åask->
∫ext
; \

556 i‡(
èsk
 !
π_cuºít
->
∫ext
) { \

557 (
π_cuºít
->
Ωªv
)->
∫ext
 =Ñt_current->rnext; \

558 (
π_cuºít
->
∫ext
)->
Ωªv
 =Ñt_current->rprev; \

559 
èsk
->
Ωªv
 = (
π_cuºít
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñt_current; \

560 
π_cuºít
->
∫ext
 = 
èsk
; \

564 
π_cuºít
->
º_ªmaöög
 =Ñt_cuºít->
yõld_time
 - 
π_times
.
tick_time
; \

566 }

	)

568 
	#TASK_TO_SCHEDULE
() \

570 
√w_èsk
 = 
π_löux_èsk
.
∫ext
; \

571 i‡(
CONFIG_RTAI_ALLOW_RR
 && 
√w_èsk
->
pﬁicy
 > 0) { \

572 
√w_èsk
->
yõld_time
 = 
π_times
.
tick_time
 +Çew_èsk->
º_ªmaöög
; \

574 
√w_èsk
->
ru¬ög
 = 1; \

575 } 0)

	)

577 
	#RR_INTR_TIME
(
fúe_shŸ
) \

579 
fúe_shŸ
 = 0; \

580 
¥io
 = 
√w_èsk
->
¥i‹ôy
; \

581 i‡(
CONFIG_RTAI_ALLOW_RR
 && 
√w_èsk
->
pﬁicy
 > 0) { \

582 i‡(
√w_èsk
->
yõld_time
 < 
π_times
.
öå_time
) { \

583 
π_times
.
öå_time
 = 
√w_èsk
->
yõld_time
; \

584 
fúe_shŸ
 = 1; \

587 } 0)

	)

589 
	#LOCK_LINUX
(
˝uid
) \

590 dÿ{ 
	`π_swôch_to_ªÆ_time
(
˝uid
); } 0)

	)

591 
	#UNLOCK_LINUX
(
˝uid
) \

592 dÿ{ 
	`π_swôch_to_löux
(
˝uid
); } 0)

	)

594 
	#SAVE_LOCK_LINUX
(
˝uid
) \

595 dÿ{ 
sÊags
 = 
	`π_ßve_swôch_to_ªÆ_time
(
˝uid
); } 0)

	)

596 
	#RESTORE_UNLOCK_LINUX
(
˝uid
) \

597 dÿ{ 
	`π_ª°‹e_swôch_to_löux
(
sÊags
, 
˝uid
); } 0)

	)

599 #ifde‡
LOCKED_LINUX_IN_IRQ_HANDLER


600 
	#SAVE_LOCK_LINUX_IN_IRQ
(
˝uid
)

	)

601 
	#RESTORE_UNLOCK_LINUX_IN_IRQ
(
˝uid
)

	)

603 
	#SAVE_LOCK_LINUX_IN_IRQ
(
˝uid
Ë
	`LOCK_LINUX
(˝uid)

	)

604 
	#RESTORE_UNLOCK_LINUX_IN_IRQ
(
˝uid
Ë
	`UNLOCK_LINUX
(˝uid)

	)

607 #i‡
deföed
(
CONFIG_RTAI_TASK_SWITCH_SIGNAL
) && CONFIG_RTAI_TASK_SWITCH_SIGNAL

609 
	#RTAI_TASK_SWITCH_SIGNAL
() \

611 (*
sig«l
)(Ë
π_cuºít
->signal; \

612 i‡(()
sig«l
 > 
MAXSIGNALS
) { \

613 (*
sig«l
)(); \

614 } i‡(
sig«l
) { \

615 
π_cuºít
->
sig«l
 = 
NULL
; \

616 
	`π_åiggî_sig«l
(()
sig«l
, 
π_cuºít
); \

617 
π_cuºít
->
sig«l
 = signal; \

619 } 0)

	)

622 
	#RTAI_TASK_SWITCH_SIGNAL
()

	)

626 #i‡
CONFIG_RTAI_MONITOR_EXECTIME


628 
RTIME
 
	gswôch_time
[
NR_RT_CPUS
];

630 
	#SET_EXEC_TIME
() \

632 
RTIME
 
now
; \

633 
now
 = 
	`πai_rdtsc
(); \

634 
π_cuºít
->
exe˘ime
[0] +(
now
 - 
swôch_time
[
˝uid
]); \

635 
swôch_time
[
˝uid
] = 
now
; \

636 } 0)

	)

638 
	#RST_EXEC_TIME
(Ëdÿ{ 
swôch_time
[
˝uid
] = 
	`πai_rdtsc
(); } 0)

	)

642 
	#SET_EXEC_TIME
()

	)

643 
	#RST_EXEC_TIME
()

	)

647 #ifde‡
CONFIG_RTAI_WD


648 
	#SAVE_PREV_TASK
() \

649 dÿ{ 
lxπ_¥ev_èsk
[
˝uid
] = 
π_cuºít
; } 0)

	)

651 
	#SAVE_PREV_TASK
(Ëdÿ{ } 0)

	)

654 
	$π_do_f‹˚_so·
(
RT_TASK
 *
π_èsk
)

656 
	`π_globÆ_˛i
();

657 i‡(
π_èsk
->
°©e
 !
RT_SCHED_READY
) {

658 
π_èsk
->
°©e
 &~
RT_SCHED_READY
;

659 
	`íq_ªady_èsk
(
π_èsk
);

660 
	`RT_SCHEDULE
(
π_èsk
, 
	`πai_˝uid
());

662 
	`π_globÆ_°i
();

663 
	}
}

665 
	#íq_so·_ªady_èsk
(
ªady_èsk
) \

667 
RT_TASK
 *
èsk
 = 
π_smp_löux_èsk
[
˝uid
].
∫ext
; \

668 i‡(
ªady_èsk
 =
èsk
) ; \

669 
èsk
->
Ωªv
 = (
ªady_èsk
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñeady_task; \

670 
ªady_èsk
->
∫ext
 = 
èsk
; \

671 } 0)

	)

674 
	#≥nd_wake_up_hts
(
 xtsk
, 
˝uid
) \

676 
wake_up_hts
[
˝uid
].
èsk
[wake_up_hts[˝uid].
ö
++ & (
MAX_WAKEUP_SRQ
 - 1)] = 
 xtsk
; \

677 
	`hÆ_≥nd_unc⁄d
(
wake_up_§q
[0].
§q
, 
˝uid
); \

678 } 0)

	)

681 
ölöe
 
	$f‹˚_cuºít_so·
(
RT_TASK
 *
π_cuºít
, 
˝uid
)

683 
èsk_°ru˘
 *
 xtsk
;

684 
	`π_scheduÀ
();

685 
π_cuºít
->
f‹˚_so·
 = 0;

686 
π_cuºít
->
°©e
 &~
RT_SCHED_READY
;;

687 
	`≥nd_wake_up_hts
(
 xtsk
 = 
π_cuºít
-> xtsk, 
˝uid
);

688 (
π_cuºít
->
Ωªv
)->
∫ext
 =Ñt_current->rnext;

689 (
π_cuºít
->
∫ext
)->
Ωªv
 =Ñt_current->rprev;

690 
	`π_scheduÀ
();

691 
π_cuºít
->
is_h¨d
 = 0;

692 i‡(
π_cuºít
->
¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

693 i‡(
π_cuºít
->
¥i‹ôy
 =π_cuºít->
ba£_¥i‹ôy
) {

694 
π_cuºít
->
¥i‹ôy
 +
BASE_SOFT_PRIORITY
;

697 i‡(
π_cuºít
->
ba£_¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

698 
π_cuºít
->
ba£_¥i‹ôy
 +
BASE_SOFT_PRIORITY
;

700 
	`π_globÆ_°i
();

701 
	`hÆ_scheduÀ_back_roŸ
(
 xtsk
);

703 
	`π_globÆ_˛i
();

704 
	`LOCK_LINUX
(
˝uid
);

705 
π_cuºít
->
°©e
 |
RT_SCHED_READY
;

706 
π_smp_cuºít
[
˝uid
] = 
π_cuºít
;

707 i‡(
π_cuºít
->
°©e
 !
RT_SCHED_READY
) {

708 
 xtsk
->
°©e
 = 
TASK_SOFTREALTIME
;

709 
	`π_scheduÀ
();

711 
	`íq_so·_ªady_èsk
(
π_cuºít
);

713 
	}
}

715 
RT_TASK
 *
	$swôch_πai_èsks
(
RT_TASK
 *
π_cuºít
, RT_TASK *
√w_èsk
, 
˝uid
)

717 i‡(
π_cuºít
->
 xtsk
) {

718 
sÊags
;

719 #ifde‡
IPIPE_NOSTACK_FLAG


720 
	`ùùe_£t_f‹eign_°ack
(&
πai_domaö
);

722 
	`SAVE_LOCK_LINUX
(
˝uid
);

723 
π_löux_èsk
.
¥evp
 = 
π_cuºít
;

724 
	`ßve_Â¸_™d_íabÀ_Âu
(
löux_¸0
);

725 i‡(
√w_èsk
->
u£s_Âu
) {

726 
	`ßve_Âív
(
π_löux_èsk
.
Âu_ªg
);

727 
Âu_èsk
 = 
√w_èsk
;

728 
	`ª°‹e_Âív
(
Âu_èsk
->
Âu_ªg
);

730 
	`RST_EXEC_TIME
();

731 
	`SAVE_PREV_TASK
();

732 
	`π_exch™ge_èsks
(
π_smp_cuºít
[
˝uid
], 
√w_èsk
);

733 
	`ª°‹e_Â¸
(
löux_¸0
);

734 
	`RESTORE_UNLOCK_LINUX
(
˝uid
);

735 #ifde‡
IPIPE_NOSTACK_FLAG


736 
	`ùùe_˛ór_f‹eign_°ack
(&
πai_domaö
);

738 i‡(
π_löux_èsk
.
√xç
 !
π_cuºít
) {

739  
π_löux_èsk
.
√xç
;

742 i‡(
√w_èsk
->
 xtsk
) {

743 
π_löux_èsk
.
√xç
 = 
√w_èsk
;

744 
√w_èsk
 = 
π_löux_èsk
.
¥evp
;

745 i‡(
Âu_èsk
 !&
π_löux_èsk
) {

746 
	`ßve_Âív
(
Âu_èsk
->
Âu_ªg
);

747 
Âu_èsk
 = &
π_löux_èsk
;

748 
	`ª°‹e_Âív
(
Âu_èsk
->
Âu_ªg
);

750 } i‡(
√w_èsk
->
u£s_Âu
 && 
Âu_èsk
 !=Çew_task) {

751 
	`ßve_Âív
(
Âu_èsk
->
Âu_ªg
);

752 
Âu_èsk
 = 
√w_èsk
;

753 
	`ª°‹e_Âív
(
Âu_èsk
->
Âu_ªg
);

755 
	`SET_EXEC_TIME
();

756 
	`SAVE_PREV_TASK
();

757 
	`π_exch™ge_èsks
(
π_smp_cuºít
[
˝uid
], 
√w_èsk
);

759 
	`RTAI_TASK_SWITCH_SIGNAL
();

760  
NULL
;

761 
	}
}

763 
	#lxπ_c⁄ãxt_swôch
(
¥ev
, 
√xt
, 
˝uid
) \

765 
	`SAVE_PREV_TASK
(); \

766 
	`_lxπ_c⁄ãxt_swôch
(
¥ev
, 
√xt
, 
˝uid
); 
	`b¨rõr
(); \

767 
	`RTAI_TASK_SWITCH_SIGNAL
(); \

768 } 0)

	)

771 #ifde‡
USE_LINUX_TIMER


773 
	#CHECK_LINUX_TIME
() \

774 i‡(
π_times
.
löux_time
 <Ñt_times.
öå_time
) { \

775 
π_times
.
öå_time
 =Ñt_times.
löux_time
; \

776 
fúe_shŸ
 = 1; \

778 }

	)

780 
	#SET_PEND_LINUX_TIMER_SHOT
() \

782 i‡(
π_times
.
tick_time
 >π_times.
löux_time
) { \

783 i‡(
π_times
.
löux_tick
 > 0) { \

784 
π_times
.
löux_time
 +π_times.
löux_tick
; \

786 
π_times
.
löux_time
 = 
RT_TIME_END
; \

788 
	`upd©e_löux_timî
(
˝uid
); \

790 } 0)

	)

794 
	#CHECK_LINUX_TIME
()

	)

796 
	#SET_PEND_LINUX_TIMER_SHOT
()

	)

801 
	#SET_NEXT_TIMER_SHOT
(
fúe_shŸ
) \

803 
fúe_shŸ
 = 0; \

804 
¥io
 = 
√w_èsk
->
¥i‹ôy
; \

805 i‡(
CONFIG_RTAI_ALLOW_RR
 && 
√w_èsk
->
pﬁicy
 > 0) { \

806 i‡(
√w_èsk
->
yõld_time
 < 
π_times
.
öå_time
) { \

807 
π_times
.
öå_time
 = 
√w_èsk
->
yõld_time
; \

808 
fúe_shŸ
 = 1; \

811 
èsk
 = &
π_löux_èsk
; \

812 (
èsk
 =Åask->
äext
Ë!&
π_löux_èsk
 &&Åask->
ªsume_time
 < 
π_times
.
öå_time
) { \

813 i‡(
èsk
->
¥i‹ôy
 <
¥io
) { \

814 
π_times
.
öå_time
 = 
èsk
->
ªsume_time
; \

815 
fúe_shŸ
 = 1; \

819 } 0)

	)

821 
	#IF_GOING_TO_LINUX_CHECK_TIMER_SHOT
(
fúe_shŸ
) \

823 i‡(
¥io
 =
RT_SCHED_LINUX_PRIORITY
) { \

824 
	`CHECK_LINUX_TIME
(); \

825 i‡(!
timî_shŸ_fúed
) {\

826 
fúe_shŸ
 = 1; \

829 } 0)

	)

831 
	g⁄eshŸ_•™
;

832 
	gßtdœy
;

834 
	#ONESHOT_DELAY
(
SHOT_FIRED
) \

836 i‡(!(
SHOT_FIRED
)) { \

837 
RTIME
 
•™
; \

838 i‡(
	`u∆ikñy
((
•™
 = 
π_times
.
öå_time
 - 
π_time_h
Ë> 
⁄eshŸ_•™
)) { \

839 
π_times
.
öå_time
 = 
π_time_h
 + 
⁄eshŸ_•™
; \

840 
dñay
 = 
ßtdœy
; \

842 
dñay
 = ()
•™
 - 
tu√d
.
œãncy
; \

845 
dñay
 = ()(
π_times
.
öå_time
 - 
π_time_h
Ë- 
tu√d
.
œãncy
; \

847 } 0)

	)

849 
π_timî_h™dÀr
();

851 
	#FIRE_NEXT_TIMER_SHOT
(
SHOT_FIRED
) \

853 i‡(
fúe_shŸ
) { \

854 
dñay
; \

855 
	`ONESHOT_DELAY
(
SHOT_FIRED
); \

856 i‡(
dñay
 > 
tu√d
.
£tup_time_TIMER_CPUNIT
) { \

857 
timî_shŸ_fúed
 = 1; \

858 
	`π_£t_timî_dñay
(
dñay
);\

860 
timî_shŸ_fúed
 = -1;\

861 
π_times
.
öå_time
 = 
π_time_h
 + 
tu√d
.
£tup_time_TIMER_CPUNIT
;\

864 } 0)

	)

866 
	#CALL_TIMER_HANDLER
() \

868 i‡(
timî_shŸ_fúed
 < 0) { \

869 
timî_shŸ_fúed
 = 1; \

870 
	`π_timî_h™dÀr
(); \

872 } 0)

	)

874 
	#REDO_TIMER_HANDLER
() \

876 i‡(
timî_shŸ_fúed
 < 0) { \

877 
timî_shŸ_fúed
 = 1; \

878 
ªdo_timî_h™dÀr
; \

880 } 0)

	)

882 
	#FIRE_IMMEDIATE_LINUX_TIMER_SHOT
() \

884 
	`LOCK_LINUX
(
˝uid
); \

885 
	`π_timî_h™dÀr
(); \

886 
	`UNLOCK_LINUX
(
˝uid
); \

887 } 0)

	)

889 #ifde‡
CONFIG_SMP


890 
	$π_scheduÀ_⁄_scheduÀ_ùi
()

892 
RT_TASK
 *
π_cuºít
, *
èsk
, *
√w_èsk
;

893 
˝uid
;

895 
π_cuºít
 = 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()];

897 
	`sched_gë_globÆ_lock
(
˝uid
);

898 
	`RR_YIELD
();

899 i‡(
⁄eshŸ_ru¬ög
) {

900 
¥io
, 
fúe_shŸ
;

902 
π_time_h
 = 
	`πai_rdtsc
(Ë+ 
π_hÆf_tick
;

903 
	`wake_up_timed_èsks
(
˝uid
);

904 
	`TASK_TO_SCHEDULE
();

906 
	`SET_NEXT_TIMER_SHOT
(
fúe_shŸ
);

907 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

908 
	`IF_GOING_TO_LINUX_CHECK_TIMER_SHOT
(
fúe_shŸ
);

909 
	`FIRE_NEXT_TIMER_SHOT
(
timî_shŸ_fúed
);

911 
	`TASK_TO_SCHEDULE
();

912 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

915 i‡(
√w_èsk
 !
π_cuºít
) {

916 i‡(
π_schedulög
[
˝uid
].
locked
) {

917 
π_schedulög
[
˝uid
].
rq°ed
 = 1;

918 
sched_exô
;

920 i‡–(!
√w_èsk
->
 xtsk
 || !
π_cuºít
->lnxtsk)) {

921 i‡(!(
√w_èsk
 = 
	`swôch_πai_èsks
(
π_cuºít
,Çew_èsk, 
˝uid
))) {

922 
sched_exô
;

925 i‡(
√w_èsk
->
is_h¨d
 > 0 || 
π_cuºít
->is_hard > 0) {

926 
èsk_°ru˘
 *
¥ev
;

927 
sÊags
;

928 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

929 
	`SAVE_LOCK_LINUX_IN_IRQ
(
˝uid
);

930 
π_löux_èsk
.
 xtsk
 = 
¥ev
 = 
cuºít
;

931 
	`RST_EXEC_TIME
();

933 
sÊags
 = 
πai_löux_c⁄ãxt
[
˝uid
].sflags;

934 
¥ev
 = 
π_cuºít
->
 xtsk
;

935 
	`SET_EXEC_TIME
();

937 
π_smp_cuºít
[
˝uid
] = 
√w_èsk
;

938 
	`lxπ_c⁄ãxt_swôch
(
¥ev
, 
√w_èsk
->
 xtsk
, 
˝uid
);

939 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

940 
	`RESTORE_UNLOCK_LINUX_IN_IRQ
(
˝uid
);

941 } i‡(
	` xtsk_u£s_Âu
(
¥ev
)) {

942 
	`ª°‹e_Âu
(
¥ev
);

946 
sched_exô
:

947 
	`CALL_TIMER_HANDLER
();

948 
	}
}

951 
	$π_scheduÀ
()

953 
RT_TASK
 *
π_cuºít
, *
èsk
, *
√w_èsk
;

954 
˝uid
;

956 
π_cuºít
 = 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()];

958 
	`RR_YIELD
();

959 i‡(
⁄eshŸ_ru¬ög
) {

960 
¥io
, 
fúe_shŸ
;

962 
π_time_h
 = 
	`πai_rdtsc
(Ë+ 
π_hÆf_tick
;

963 
	`wake_up_timed_èsks
(
˝uid
);

964 
	`TASK_TO_SCHEDULE
();

966 
	`SET_NEXT_TIMER_SHOT
(
fúe_shŸ
);

967 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

968 
	`IF_GOING_TO_LINUX_CHECK_TIMER_SHOT
(
fúe_shŸ
);

969 
	`FIRE_NEXT_TIMER_SHOT
(
timî_shŸ_fúed
);

971 
	`TASK_TO_SCHEDULE
();

972 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

975 i‡(
√w_èsk
 !
π_cuºít
) {

976 i‡(
π_schedulög
[
˝uid
].
locked
) {

977 
π_schedulög
[
˝uid
].
rq°ed
 = 1;

978 
sched_exô
;

980 i‡–(!
√w_èsk
->
 xtsk
 || !
π_cuºít
->lnxtsk)) {

981 i‡(!(
√w_èsk
 = 
	`swôch_πai_èsks
(
π_cuºít
,Çew_èsk, 
˝uid
))) {

982 #i‡
CONFIG_RTAI_BUSY_TIME_ALIGN
 && (
RTAI_KERN_BUSY_ALIGN_RET_DELAY
 > 0)

983 i‡(
π_cuºít
->
busy_time_Æign
) {

984 
RTIME
 
ªsume_time
 = 
π_cuºít
->ªsume_timê- 
tu√d
.
kîn_œãncy_busy_Æign_ªt_dñay
;

985 
π_cuºít
->
busy_time_Æign
 = 0;

986 
	`πai_rdtsc
(Ë< 
ªsume_time
);

989 
ksched_exô
;

992 
π_smp_cuºít
[
˝uid
] = 
√w_èsk
;

993 i‡(
√w_èsk
->
is_h¨d
 > 0 || 
π_cuºít
->is_hard > 0) {

994 
èsk_°ru˘
 *
¥ev
;

995 
sÊags
;

996 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

997 
	`SAVE_LOCK_LINUX
(
˝uid
);

998 
π_löux_èsk
.
 xtsk
 = 
¥ev
 = 
cuºít
;

999 
	`RST_EXEC_TIME
();

1001 
sÊags
 = 
πai_löux_c⁄ãxt
[
˝uid
].sflags;

1002 
¥ev
 = 
π_cuºít
->
 xtsk
;

1003 
	`SET_EXEC_TIME
();

1005 
	`lxπ_c⁄ãxt_swôch
(
¥ev
, 
√w_èsk
->
 xtsk
, 
˝uid
);

1006 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

1007 
	`RESTORE_UNLOCK_LINUX
(
˝uid
);

1008 i‡(
π_cuºít
->
°©e
 !
RT_SCHED_READY
) {

1009 
sched_so·
;

1012 i‡(
	` xtsk_u£s_Âu
(
¥ev
)) {

1013 
	`ª°‹e_Âu
(
¥ev
);

1015 i‡(
π_cuºít
->
f‹˚_so·
) {

1016 
	`f‹˚_cuºít_so·
(
π_cuºít
, 
˝uid
);

1020 
sched_so·
:

1021 
	`CALL_TIMER_HANDLER
();

1022 
	`UNLOCK_LINUX
(
˝uid
);

1023 
	`πai_°i
();

1025 #ifde‡
CONFIG_RTAI_ALIGN_LINUX_PRIORITY


1026 i‡(
cuºít
->
	`πai_tskext
(
TSKEXT0
Ë&& (cuºít->
pﬁicy
 =
SCHED_FIFO
 || cuºít->pﬁicy =
SCHED_RR
)) {

1027 
π_¥i‹ôy
;

1028 i‡((
π_¥i‹ôy
 = ((
RT_TASK
 *)
cuºít
->
	`πai_tskext
(
TSKEXT0
))->
¥i‹ôy
Ë>
BASE_SOFT_PRIORITY
) {

1029 
π_¥i‹ôy
 -
BASE_SOFT_PRIORITY
;

1031 i‡((
π_¥i‹ôy
 = (
MAX_LINUX_RTPRIO
 -Ñt_priority)) < 1) {

1032 
π_¥i‹ôy
 = 1;

1034 i‡(
π_¥i‹ôy
 !
cuºít
->rt_priority) {

1035 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, cuºít->
pﬁicy
, 
π_¥i‹ôy
);

1040 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
˝uid
);

1041 
	`scheduÀ
();

1042 
	`π_globÆ_˛i
();

1043 
π_cuºít
->
°©e
 = (π_cuºít->°©ê& ~
RT_SCHED_SFTRDY
Ë| 
RT_SCHED_READY
;

1044 
	`LOCK_LINUX
(
˝uid
);

1045 
	`íq_so·_ªady_èsk
(
π_cuºít
);

1046 
π_smp_cuºít
[
˝uid
] = 
π_cuºít
;

1050 
sched_exô
:

1051 #i‡
CONFIG_RTAI_BUSY_TIME_ALIGN
 && (
RTAI_USER_BUSY_ALIGN_RET_DELAY
 > 0)

1052 i‡(
π_cuºít
->
busy_time_Æign
) {

1053 
RTIME
 
ªsume_time
 = 
π_cuºít
->ªsume_timê- 
tu√d
.
u£r_œãncy_busy_Æign_ªt_dñay
;

1054 
π_cuºít
->
busy_time_Æign
 = 0;

1055 
	`πai_rdtsc
(Ë< 
ªsume_time
);

1058 
ksched_exô
:

1059 
	`CALL_TIMER_HANDLER
();

1060 
	`sched_gë_globÆ_lock
(
˝uid
);

1061 
	}
}

1063 
RTAI_SYSCALL_MODE
 
	$π_•v_RMS
(
˝uid
)

1065 
RT_TASK
 *
èsk
;

1066 
¥io
;

1067 i‡(
˝uid
 < 0 || cpuid >
	`num_⁄löe_˝us
()) {

1068 
˝uid
 = 
	`πai_˝uid
();

1070 
¥io
 = 0;

1071 
èsk
 = &
π_löux_èsk
;

1072 (
èsk
 =Åask->
√xt
)) {

1073 
RT_TASK
 *
èsk
, *
hèsk
;

1074 
RTIME
 
≥riod
;

1075 
hèsk
 = 0;

1076 
èsk
 = &
π_löux_èsk
;

1077 
≥riod
 = 
RT_TIME_END
;

1078 (
èsk
 =Åask->
√xt
)) {

1079 i‡(
èsk
->
¥i‹ôy
 >0 &&Åask->
pﬁicy
 >0 &&Åask->
≥riod
 &&Åask->period <Öeriod) {

1080 
≥riod
 = (
hèsk
 = 
èsk
)->period;

1083 i‡(
hèsk
) {

1084 
hèsk
->
¥i‹ôy
 = -1;

1085 
hèsk
->
ba£_¥i‹ôy
 = 
¥io
++;

1087 
ªt
;

1090 
ªt
: 
èsk
 = &
π_löux_èsk
;

1091 (
èsk
 =Åask->
√xt
)) {

1092 i‡(
èsk
->
¥i‹ôy
 < 0) {

1093 
èsk
->
¥i‹ôy
 =Åask->
ba£_¥i‹ôy
;

1097 
	}
}

1100 
	$π_sched_lock
()

1102 
Êags
;

1103 
˝uid
;

1105 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1106 i‡(!
π_schedulög
[
˝uid
 = 
	`πai_˝uid
()].
locked
++) {

1107 
π_schedulög
[
˝uid
].
rq°ed
 = 0;

1109 
	`πai_ª°‹e_Êags
(
Êags
);

1110 
	}
}

1112 
	#SCHED_UNLOCK_SCHEDULE
(
˝uid
) \

1114 
π_schedulög
[
˝uid
].
rq°ed
 = 0; \

1115 
	`sched_gë_globÆ_lock
(
˝uid
); \

1116 
	`π_scheduÀ
(); \

1117 
	`sched_ªÀa£_globÆ_lock
(
˝uid
); \

1118 } 0)

	)

1121 
	$π_sched_u∆ock
()

1123 
Êags
;

1124 
˝uid
;

1126 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

1127 i‡(
π_schedulög
[
˝uid
 = 
	`πai_˝uid
()].
locked
 && !(--rt_scheduling[cpuid].locked)) {

1128 i‡(
π_schedulög
[
˝uid
].
rq°ed
 > 0) {

1129 
	`SCHED_UNLOCK_SCHEDULE
(
˝uid
);

1134 
	`πai_ª°‹e_Êags
(
Êags
);

1135 
	}
}

1140 *
π_gë_lxπ_fun_íåy
(
ödex
);

1141 
ölöe
 
	$sched_£m_sig«l
(
SEM
 *
£m
)

1143 ((
RTAI_SYSCALL_MODE
 (*)(
SEM
 *, ...))
	`π_gë_lxπ_fun_íåy
(
SEM_SIGNAL
))(
£m
);

1144 
	}
}

1146 
	$˛r_πext
(
RT_TASK
 *
èsk
)

1148 
DECLARE_RT_CURRENT
;

1149 
Êags
;

1150 
QUEUE
 *
q
;

1152 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
 ||Åask->
¥i‹ôy
 =
RT_SCHED_LINUX_PRIORITY
) {

1153  -
EINVAL
;

1156 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1157 
ASSIGN_RT_CURRENT
;

1158 i‡(!
	`èsk_owns_£ms
(
èsk
Ë||Åask =
π_cuºít
 ||Ñt_cuºít->
¥i‹ôy
 =
RT_SCHED_LINUX_PRIORITY
) {

1159 
	`ˇŒ_exô_h™dÀrs
(
èsk
);

1160 
	`ªm_timed_èsk
(
èsk
);

1161 i‡(
èsk
->
blocked_⁄
) {

1162 i‡(
èsk
->
°©e
 & (
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
)) {

1163 (
èsk
->
queue
.
¥ev
)->
√xt
 =Åask->queue.next;

1164 (
èsk
->
queue
.
√xt
)->
¥ev
 =Åask->queue.prev;

1165 i‡(
èsk
->
°©e
 & 
RT_SCHED_SEMAPHORE
) {

1166 
SEM
 *
£m
 = (SEM *)(
èsk
->
blocked_⁄
);

1167 i‡(++
£m
->
cou¡
 > 1 && sem->
ty≥
) {

1168 
£m
->
cou¡
 = 1;

1171 } i‡(
èsk
->
°©e
 & 
RT_SCHED_MBXSUSP
) {

1172 
MBX
 *
mbx
 = (MBX *)
èsk
->
blocked_⁄
;

1173 
mbx
->
waôög_èsk
 = 
NULL
;

1174 
	`sched_£m_sig«l
(!
mbx
->
‰bs
 ? &mbx->
¢d£m
 : &mbx->
rcv£m
);

1177 
q
 = &(
èsk
->
msg_queue
);

1178 (
q
 = q->
√xt
Ë!&(
èsk
->
msg_queue
)) {

1179 
	`ªm_timed_èsk
(
q
->
èsk
);

1180 i‡((
q
->
èsk
)->
°©e
 !
RT_SCHED_READY
 && ((q->èsk)->°©ê&~(
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

1181 
	`íq_ªady_èsk
(
q
->
èsk
);

1183 (
q
->
èsk
)->
blocked_⁄
 = 
RTP_OBJREM
;

1185 
q
 = &(
èsk
->
ªt_queue
);

1186 (
q
 = q->
√xt
Ë!&(
èsk
->
ªt_queue
)) {

1187 
	`ªm_timed_èsk
(
q
->
èsk
);

1188 i‡((
q
->
èsk
)->
°©e
 !
RT_SCHED_READY
 && ((q->èsk)->°©ê&~(
RT_SCHED_RETURN
 | 
RT_SCHED_DELAYED
)) == RT_SCHED_READY) {

1189 
	`íq_ªady_èsk
(
q
->
èsk
);

1191 (
q
->
èsk
)->
blocked_⁄
 = 
RTP_OBJREM
;

1193 i‡(!((
èsk
->
¥ev
)->
√xt
 =Åask->next)) {

1194 
π_smp_löux_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
].
¥ev
 =Åask->prev;

1196 (
èsk
->
√xt
)->
¥ev
 =Åask->prev;

1198 i‡(
π_smp_Âu_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
] ==Åask) {

1199 
π_smp_Âu_èsk
[
èsk
->
ru¬abÀ_⁄_˝us
] = 
π_smp_löux_èsk
 +Åask->runnable_on_cpus;;

1201 i‡(!
èsk
->
 xtsk
) {

1202 
‰°k_§q
.
mp
[‰°k_§q.
ö
++ & (
MAX_FRESTK_SRQ
 - 1)] = 
èsk
->
°ack_bŸtom
;

1203 
	`π_≥nd_löux_§q
(
‰°k_§q
.
§q
);

1205 
èsk
->
magic
 = 0;

1206 
	`ªm_ªady_èsk
(
èsk
);

1207 
èsk
->
°©e
 = 0;

1208 
	`©omic_dec
((*)(
èsks_≥r_˝u
 + 
èsk
->
ru¬abÀ_⁄_˝us
));

1209 i‡(
èsk
 =
π_cuºít
) {

1210 
	`π_scheduÀ
();

1213 
èsk
->
su•dïth
 = -0x7FFFFFFF;

1215 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1217 
	}
}

1220 
	$π_èsk_dñëe
(
RT_TASK
 *
èsk
)

1222 
	`˛r_πext
(
èsk
);

1224 
	}
}

1227 
	$π_gë_timî_˝u
()

1230 
	}
}

1233 
	$π_timî_h™dÀr
()

1235 
RT_TASK
 *
π_cuºít
, *
èsk
, *
√w_èsk
;

1236 
˝uid
;

1238 
	`DO_TIMER_PROPER_OP
();

1239 
π_cuºít
 = 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()];

1241 
ªdo_timî_h™dÀr
:

1243 
π_times
.
tick_time
 = 
⁄eshŸ_timî
 ? 
	`πai_rdtsc
(Ë:Ñt_times.
öå_time
;

1244 
π_time_h
 = 
π_times
.
tick_time
 + 
π_hÆf_tick
;

1245 
	`SET_PEND_LINUX_TIMER_SHOT
();

1247 
	`sched_gë_globÆ_lock
(
˝uid
);

1248 
	`RR_YIELD
();

1249 
	`wake_up_timed_èsks
(
˝uid
);

1250 
	`TASK_TO_SCHEDULE
();

1252 i‡(
⁄eshŸ_timî
) {

1253 
¥io
, 
fúe_shŸ
;

1255 
timî_shŸ_fúed
 = 0;

1256 
π_times
.
öå_time
 = 
RT_TIME_END
;

1258 
	`SET_NEXT_TIMER_SHOT
(
fúe_shŸ
);

1259 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

1260 
	`IF_GOING_TO_LINUX_CHECK_TIMER_SHOT
(
fúe_shŸ
);

1261 
	`FIRE_NEXT_TIMER_SHOT
(0);

1263 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

1264 
π_times
.
öå_time
 +π_times.
≥riodic_tick
;

1265 
	`π_£t_timî_dñay
(0);

1268 i‡(
√w_èsk
 !
π_cuºít
) {

1269 i‡(
π_schedulög
[
˝uid
].
locked
) {

1270 
π_schedulög
[
˝uid
].
rq°ed
 = 1;

1271 
sched_exô
;

1273 i‡–(!
√w_èsk
->
 xtsk
 || !
π_cuºít
->lnxtsk)) {

1274 i‡(!(
√w_èsk
 = 
	`swôch_πai_èsks
(
π_cuºít
,Çew_èsk, 
˝uid
))) {

1275 
sched_exô
;

1278 i‡(
√w_èsk
->
is_h¨d
 > 0 || 
π_cuºít
->is_hard > 0) {

1279 
èsk_°ru˘
 *
¥ev
;

1280 
sÊags
;

1281 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

1282 
	`SAVE_LOCK_LINUX_IN_IRQ
(
˝uid
);

1283 
π_löux_èsk
.
 xtsk
 = 
¥ev
 = 
cuºít
;

1284 
	`RST_EXEC_TIME
();

1286 
sÊags
 = 
πai_löux_c⁄ãxt
[
˝uid
].sflags;

1287 
¥ev
 = 
π_cuºít
->
 xtsk
;

1288 
	`SET_EXEC_TIME
();

1290 
π_smp_cuºít
[
˝uid
] = 
√w_èsk
;

1291 
	`lxπ_c⁄ãxt_swôch
(
¥ev
, 
√w_èsk
->
 xtsk
, 
˝uid
);

1292 i‡(
π_cuºít
->
is_h¨d
 <= 0) {

1293 
	`RESTORE_UNLOCK_LINUX_IN_IRQ
(
˝uid
);

1294 } i‡(
	` xtsk_u£s_Âu
(
¥ev
)) {

1295 
	`ª°‹e_Âu
(
¥ev
);

1299 
sched_exô
:

1300 
	`REDO_TIMER_HANDLER
();

1302 
ªdo_timî_h™dÀr
;

1303 
	}
}

1306 #i‡
deföed
(
USE_LINUX_TIMER
Ë&& !deföed(
CONFIG_GENERIC_CLOCKEVENTS
)

1308 
úqªtu∫_t
 
	$ªcovî_jiffõs
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

1310 
	`π_globÆ_˛i
();

1311 i‡(
löux_times
->
tick_time
 >löux_times->
löux_time
) {

1312 
löux_times
->
löux_time
 +löux_times->
löux_tick
;

1313 
	`upd©e_löux_timî
(
	`πai_˝uid
());

1315 
	`π_globÆ_°i
();

1316  
RTAI_LINUX_IRQ_HANDLED
;

1317 
	}
}

1319 
	#REQUEST_RECOVER_JIFFIES
(Ë
	`π_ªque°_löux_úq
(
TIMER_8254_IRQ
, 
ªcovî_jiffõs
, "πai_jif_chk",Ñecovî_jiffõs)

	)

1321 
	#RELEASE_RECOVER_JIFFIES
(
timî
Ë
	`π_‰ì_löux_úq
(
TIMER_8254_IRQ
, 
ªcovî_jiffõs
)

	)

1325 
	#REQUEST_RECOVER_JIFFIES
()

	)

1327 
	#RELEASE_RECOVER_JIFFIES
()

	)

1332 
	$π_is_h¨d_timî_ru¬ög
()

1334  
π_sched_timed
;

1335 
	}
}

1338 
	$π_£t_≥riodic_mode
()

1340 
˝uid
;

1341 
	`°›_π_timî
();

1342 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1343 
⁄eshŸ_timî
 = 
⁄eshŸ_ru¬ög
 = 0;

1345 
	}
}

1348 
	$π_£t_⁄eshŸ_mode
()

1350 
˝uid
;

1351 
	`°›_π_timî
();

1352 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1353 
⁄eshŸ_timî
 = 1;

1355 
	}
}

1358 #ifde‡
CONFIG_GENERIC_CLOCKEVENTS


1360 
	~<löux/˛ockchùs.h
>

1361 
	~<löux/ùùe_tickdev.h
>

1363 *
π_löux_hπ_£t_mode
;

1364 *
π_löux_hπ_√xt_shŸ
;

1366 
	$_π_löux_hπ_£t_mode
(
˛ock_evít_mode
 
mode
, * 
hπ_dev
)

1368 
˝uid
 = 
	`πai_˝uid
();

1370 i‡(
mode
 =
CLOCK_EVT_MODE_ONESHOT
 || modê=
CLOCK_EVT_MODE_SHUTDOWN
) {

1371 
π_times
.
löux_tick
 = 0;

1372 } i‡(
mode
 =
CLOCK_EVT_MODE_PERIODIC
) {

1373 
π_times
.
löux_tick
 = 
	`«no2cou¡_˝uid
((1000000000 + 
HZ
/2)/HZ, 
˝uid
);

1375 
	}
}

1377 
	$_π_löux_hπ_√xt_shŸ
(
dñèt
, *
hπ_dev
)

1379 
˝uid
 = 
	`πai_˝uid
();

1380 
dñès
;

1381 
RTIME
 
löux_time
;

1383 
dñèt
 = 
	`«no2cou¡_˝uid
(dñèt, 
˝uid
);

1384 
dñès
 = 
dñèt
 > (
tu√d
.
£tup_time_TIMER_CPUNIT
 +Åu√d.
œãncy
) ? (deltat -Åuned.latency) : 0;

1386 
	`πai_˛i
();

1387 
π_times
.
löux_time
 =Üöux_timê
	`π_gë_time_˝uid
(
˝uid
Ë+ 
dñèt
;

1388 i‡(
⁄eshŸ_ru¬ög
) {

1389 i‡(
löux_time
 < 
π_times
.
öå_time
) {

1390 i‡(
dñès
 > 0) {

1391 
π_times
.
öå_time
 = 
löux_time
;

1392 
	`π_£t_timî_dñay
(
dñès
);

1393 
timî_shŸ_fúed
 = 1;

1395 
π_times
.
löux_time
 = 
RT_TIME_END
;

1396 
	`upd©e_löux_timî
(
˝uid
);

1400 
	`πai_°i
();

1402 
	}
}

1406 #ifde‡
CONFIG_SMP


1408 
RTAI_SYSCALL_MODE
 
	$°¨t_π_≠ic_timîs
(
≠ic_timî_£tup_d©a
 *
£tup_d©a
, 
rcvr_jiffõs_˝uid
)

1410 
Êags
, 
˝uid
;

1412 
	`π_ªque°_≠ic_timîs
(
π_timî_h™dÀr
, 
£tup_d©a
);

1413 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1414 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1415 i‡(
£tup_d©a
[
˝uid
].
mode
 > 0) {

1416 
⁄eshŸ_timî
 = 
⁄eshŸ_ru¬ög
 = 0;

1417 
tu√d
.
timîs_tﬁ
[
˝uid
] = 
π_hÆf_tick
 = (
π_times
.
≥riodic_tick
 + 1)>>1;

1419 
⁄eshŸ_timî
 = 
⁄eshŸ_ru¬ög
 = 1;

1420 
tu√d
.
timîs_tﬁ
[
˝uid
] = 
π_hÆf_tick
 = (tu√d.
œãncy
 + 1)>>1;

1422 
π_time_h
 = 
π_times
.
tick_time
 + 
π_hÆf_tick
;

1423 
timî_shŸ_fúed
 = 1;

1425 
π_sched_timed
 = 1;

1426 
löux_times
 = 
π_smp_times
 + (
rcvr_jiffõs_˝uid
 < 
NR_RT_CPUS
 ?Ñcvr_jiffies_cpuid : 0);

1427 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1428 
	}
}

1431 
RTAI_SYSCALL_MODE
 
RTIME
 
	$°¨t_π_timî
(
≥riod
)

1433 
˝uid
;

1434 
≠ic_timî_£tup_d©a
 
£tup_d©a
[
NR_RT_CPUS
];

1435 i‡(
≥riod
 <= 0) {

1436 
≥riod
 = 0;

1437 
	`π_£t_⁄eshŸ_mode
();

1439 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1440 
£tup_d©a
[
˝uid
].
mode
 = 
⁄eshŸ_timî
 ? 0 : 1;

1441 
£tup_d©a
[
˝uid
].
cou¡
 = 
	`cou¡2«no
(
≥riod
);

1443 
	`°¨t_π_≠ic_timîs
(
£tup_d©a
, 
	`πai_˝uid
());

1444 
	`π_gëtime‹ig
(
NULL
);

1445  
£tup_d©a
[0].
mode
 ? sëup_d©a[0].
cou¡
 : 
≥riod
;

1446 
	}
}

1449 
	$°›_π_timî
()

1451 i‡(
π_sched_timed
) {

1452 
˝uid
;

1453 
π_sched_timed
 = 0;

1454 
	`π_‰ì_≠ic_timîs
();

1455 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1456 
π_time_h
 = 
RT_TIME_END
;

1457 
⁄eshŸ_ru¬ög
 = 0;

1460 
	}
}

1464 #i‚de‡
TIMER_TYPE


1465 
	#TIMER_TYPE
 1

	)

1468 
RTAI_SYSCALL_MODE
 
RTIME
 
	$°¨t_π_timî
(
≥riod
)

1470 
	#˝uid
 0

	)

1471 #unde‡
π_times


1473 
Êags
;

1474 i‡(
≥riod
 <= 0) {

1475 
≥riod
 = 0;

1476 
	`π_£t_⁄eshŸ_mode
();

1478 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

1479 i‡(
⁄eshŸ_timî
) {

1480 
	`π_ªque°_timî
(
π_timî_h™dÀr
, 0, 
TIMER_TYPE
);

1481 
tu√d
.
timîs_tﬁ
[0] = 
π_hÆf_tick
 = (tu√d.
œãncy
 + 1)>>1;

1482 
⁄eshŸ_ru¬ög
 = 
timî_shŸ_fúed
 = 1;

1484 
	`π_ªque°_timî
(
π_timî_h™dÀr
, !
TIMER_TYPE
 && 
≥riod
 > 
LATCH
 ? LATCH:Öeriod, TIMER_TYPE);

1485 
tu√d
.
timîs_tﬁ
[0] = 
π_hÆf_tick
 = (
π_times
.
≥riodic_tick
 + 1)>>1;

1487 
π_sched_timed
 = 1;

1488 
π_smp_times
[
˝uid
].
löux_tick
 = 
π_times
.linux_tick;

1489 
π_smp_times
[
˝uid
].
tick_time
 = 
π_times
.tick_time;

1490 
π_smp_times
[
˝uid
].
öå_time
 = 
π_times
.intr_time;

1491 
π_smp_times
[
˝uid
].
löux_time
 = 
π_times
.linux_time;

1492 
π_smp_times
[
˝uid
].
≥riodic_tick
 = 
π_times
.periodic_tick;

1493 
π_time_h
 = 
π_times
.
tick_time
 + 
π_hÆf_tick
;

1494 
löux_times
 = 
π_smp_times
;

1495 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

1496 
	`REQUEST_RECOVER_JIFFIES
();

1497 
	`π_gëtime‹ig
(
NULL
);

1498  
≥riod
;

1500 #unde‡
˝uid


1501 
	#π_times
 (
π_smp_times
[
˝uid
])

	)

1502 
	}
}

1505 
RTAI_SYSCALL_MODE
 
	$°¨t_π_≠ic_timîs
(
≠ic_timî_£tup_d©a
 *
£tup_mode
, 
rcvr_jiffõs_˝uid
)

1507 
˝uid
, 
≥riod
;

1509 
≥riod
 = 0;

1510 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1511 
≥riod
 +
£tup_mode
[
˝uid
].
mode
;

1513 i‡(
≥riod
 =
NR_RT_CPUS
) {

1514 
≥riod
 = 2000000000;

1515 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1516 i‡(
£tup_mode
[
˝uid
].
cou¡
 < 
≥riod
) {

1517 
≥riod
 = 
£tup_mode
[
˝uid
].
cou¡
;

1520 
	`°¨t_π_timî
(
	`«no2cou¡
(
≥riod
));

1522 
	`π_£t_⁄eshŸ_mode
();

1523 
	`°¨t_π_timî
(0);

1525 
	}
}

1528 
	$°›_π_timî
()

1530 i‡(
π_sched_timed
) {

1531 
π_sched_timed
 = 0;

1532 
	`RELEASE_RECOVER_JIFFIES
();

1533 
	`π_‰ì_timî
();

1534 
π_time_h
 = 
RT_TIME_END
;

1535 
π_smp_⁄eshŸ_timî
[0] = 0;

1537 
	}
}

1542 
RTAI_SYSCALL_MODE
 
	$π_h¨d_timî_tick_cou¡
()

1544 
˝uid
 = 
	`πai_˝uid
();

1545 i‡(
π_sched_timed
) {

1546  
⁄eshŸ_timî
 ? 0 : 
π_smp_times
[
˝uid
].
≥riodic_tick
;

1549 
	}
}

1552 
RTAI_SYSCALL_MODE
 
	$π_h¨d_timî_tick_cou¡_˝uid
(
˝uid
)

1554 i‡(
π_sched_timed
) {

1555  
⁄eshŸ_timî
 ? 0 : 
π_smp_times
[
˝uid
].
≥riodic_tick
;

1558 
	}
}

1561 
RT_TRAP_HANDLER
 
	$π_£t_èsk_å≠_h™dÀr
–
RT_TASK
 *
èsk
, 
vec
, 
RT_TRAP_HANDLER
 
h™dÀr
)

1563 
RT_TRAP_HANDLER
 
ﬁd_h™dÀr
;

1565 i‡(!
èsk
 || (
vec
 >
RTAI_NR_TRAPS
)) {

1566  (
RT_TRAP_HANDLER
Ë-
EINVAL
;

1568 
ﬁd_h™dÀr
 = 
èsk
->
èsk_å≠_h™dÀr
[
vec
];

1569 
èsk
->
èsk_å≠_h™dÀr
[
vec
] = 
h™dÀr
;

1570  
ﬁd_h™dÀr
;

1571 
	}
}

1573 
	gO√ShŸ
 = 
CONFIG_RTAI_ONE_SHOT
;

1574 
RTAI_MODULE_PARM
(
O√ShŸ
, );

1576 
	gL©ícy
 = 
TIMER_LATENCY
;

1577 
RTAI_MODULE_PARM
(
L©ícy
, );

1579 
	gSëupTimeTIMER
 = 
TIMER_SETUP_TIME
;

1580 
RTAI_MODULE_PARM
(
SëupTimeTIMER
, );

1582 
kπai_obje˘s_ªÀa£
();

1584 
	$‰°k_§q_h™dÀr
()

1586 
‰°k_§q
.
out
 !‰°k_§q.
ö
) {

1587 
	`π_k°ack_‰ì
(
‰°k_§q
.
mp
[‰°k_§q.
out
++ & (
MAX_FRESTK_SRQ
 - 1)]);

1589 
	}
}

1591 
	$nihû
(Ë{ 
	}
};

1592 
π_fun_íåy
 
	gπ_fun_lxπ
[
MAX_LXRT_FUN
];

1594 
	$ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
)

1596 
íåy
->
fun
.fun) {

1597 i‡(
íåy
->
ödex
 >
MAX_LXRT_FUN
) {

1598 
	`π_¥ötk
("*** RESET ENTRY %d FOR USER SPACE CALLS EXCEEDS ALLOWD TABLE SIZE %d, NOT USED ***\n", 
íåy
->
ödex
, 
MAX_LXRT_FUN
);

1600 
π_fun_lxπ
[
íåy
->
ödex
] = (
π_fun_íåy
){ 1, 
nihû
 };

1602 
íåy
++;

1604 
	}
}

1606 
	$£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
)

1608 
îr‹
;

1609 
îr‹
 = 0;

1610 
íåy
->
fun
.fun) {

1611 i‡(
π_fun_lxπ
[
íåy
->
ödex
].
fun
 !
nihû
) {

1612 
	`π_¥ötk
("*** SUSPICIOUS ENTRY ASSIGNEMENT FOR USER SPACE CALL AT %d, DUPLICATED INDEX OR REPEATED INITIALIZATION ***\n", 
íåy
->
ödex
);

1613 
îr‹
 = -1;

1614 } i‡(
íåy
->
ödex
 >
MAX_LXRT_FUN
) {

1615 
	`π_¥ötk
("*** ASSIGNEMENT ENTRY %d FOR USER SPACE CALLS EXCEEDS ALLOWED TABLE SIZE %d, NOT USED ***\n", 
íåy
->
ödex
, 
MAX_LXRT_FUN
);

1616 
îr‹
 = -1;

1618 
π_fun_lxπ
[
íåy
->
ödex
] =É¡ry->
fun
;

1620 
íåy
++;

1622 i‡(
îr‹
) {

1623 
	`ª£t_π_fun_íåõs
(
íåy
);

1626 
	}
}

1628 *
	$π_gë_lxπ_fun_íåy
(
ödex
) {

1629  
π_fun_lxπ
[
ödex
].
fun
;

1630 
	}
}

1632 
	$lxπ_kûœŒ
 ()

1634 
˝uid
;

1636 
	`°›_π_timî
();

1637 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

1638 
π_löux_èsk
.
√xt
) {

1639 
	`π_èsk_dñëe
(
π_löux_èsk
.
√xt
);

1642 
	}
}

1644 
	$lxπ_nŸify_ªboŸ
 (
nŸifõr_block
 *
nb
, 
evít
, *
p
)

1646 
evít
) {

1647 
SYS_DOWN
:

1648 
SYS_HALT
:

1649 
SYS_POWER_OFF
:

1651 
	`¥ötk
("LXRT: REBOOT NOTIFIED -- KILLING TASKS\n");

1652 
	`lxπ_kûœŒ
();

1654  
NOTIFY_DONE
;

1655 
	}
}

1659 
RTAI_SYSCALL_MODE
 
RTIME
 
	$cou¡2«no
(
RTIME
 
cou¡s
)

1661 
sign
;

1663 i‡(
cou¡s
 >= 0) {

1664 
sign
 = 1;

1666 
sign
 = 0;

1667 
cou¡s
 = - counts;

1669 
cou¡s
 = 
⁄eshŸ_timî_˝uid
 ?

1670 
	`Œimd
(
cou¡s
, 1000000000, 
tu√d
.
˝u_‰eq
):

1671 
	`Œimd
(
cou¡s
, 1000000000, 
TIMER_FREQ
);

1672  
sign
 ? 
cou¡s
 : - counts;

1673 
	}
}

1676 
RTAI_SYSCALL_MODE
 
RTIME
 
	$«no2cou¡
(
RTIME
 
ns
)

1678 
sign
;

1680 i‡(
ns
 >= 0) {

1681 
sign
 = 1;

1683 
sign
 = 0;

1684 
ns
 = -Çs;

1686 
ns
 = 
⁄eshŸ_timî_˝uid
 ?

1687 
	`Œimd
(
ns
, 
tu√d
.
˝u_‰eq
, 1000000000) :

1688 
	`Œimd
(
ns
, 
TIMER_FREQ
, 1000000000);

1689  
sign
 ? 
ns
 : -Çs;

1690 
	}
}

1692 
RTAI_SYSCALL_MODE
 
RTIME
 
	$cou¡2«no_˝uid
(
RTIME
 
cou¡s
, 
˝uid
)

1694 
sign
;

1696 i‡(
cou¡s
 >= 0) {

1697 
sign
 = 1;

1699 
sign
 = 0;

1700 
cou¡s
 = - counts;

1702 
cou¡s
 = 
⁄eshŸ_timî
 ?

1703 
	`Œimd
(
cou¡s
, 1000000000, 
tu√d
.
˝u_‰eq
):

1704 
	`Œimd
(
cou¡s
, 1000000000, 
TIMER_FREQ
);

1705  
sign
 ? 
cou¡s
 : - counts;

1706 
	}
}

1709 
RTAI_SYSCALL_MODE
 
RTIME
 
	$«no2cou¡_˝uid
(
RTIME
 
ns
, 
˝uid
)

1711 
sign
;

1713 i‡(
ns
 >= 0) {

1714 
sign
 = 1;

1716 
sign
 = 0;

1717 
ns
 = -Çs;

1719 
ns
 = 
⁄eshŸ_timî
 ?

1720 
	`Œimd
(
ns
, 
tu√d
.
˝u_‰eq
, 1000000000) :

1721 
	`Œimd
(
ns
, 
TIMER_FREQ
, 1000000000);

1722  
sign
 ? 
ns
 : -Çs;

1723 
	}
}

1727 
RTIME
 
	$π_gë_time
()

1729 
˝uid
;

1730  
π_smp_⁄eshŸ_timî
[
˝uid
 = 
	`πai_˝uid
()] ? 
	`πai_rdtsc
(Ë: 
π_smp_times
[˝uid].
tick_time
;

1731 
	}
}

1733 
RTAI_SYSCALL_MODE
 
RTIME
 
	$π_gë_time_˝uid
(
˝uid
)

1735  
⁄eshŸ_timî
 ? 
	`πai_rdtsc
(): 
π_times
.
tick_time
;

1736 
	}
}

1738 
RTIME
 
	$π_gë_time_ns
()

1740 
˝uid
 = 
	`πai_˝uid
();

1741  
⁄eshŸ_timî
 ? 
	`Œimd
(
	`πai_rdtsc
(), 1000000000, 
tu√d
.
˝u_‰eq
) :

1742 
	`Œimd
(
π_times
.
tick_time
, 1000000000, 
TIMER_FREQ
);

1743 
	}
}

1745 
RTAI_SYSCALL_MODE
 
RTIME
 
	$π_gë_time_ns_˝uid
(
˝uid
)

1747  
⁄eshŸ_timî
 ? 
	`Œimd
(
	`πai_rdtsc
(), 1000000000, 
tu√d
.
˝u_‰eq
) :

1748 
	`Œimd
(
π_times
.
tick_time
, 1000000000, 
TIMER_FREQ
);

1749 
	}
}

1751 
RTIME
 
	$π_gë_˝u_time_ns
()

1753  
	`Œimd
(
	`πai_rdtsc
(), 1000000000, 
tu√d
.
˝u_‰eq
);

1754 
	}
}

1756 
ïoch_°ru˘
 
boŸ_ïoch
;

1758 
RTIME
 
	$π_gë_ªÆ_time
()

1760  
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][0] + 
	`πai_rdtsc
();

1761 
	}
}

1763 
RTIME
 
	$π_gë_ªÆ_time_ns
()

1765  
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][1] + 
	`Œimd
(
	`πai_rdtsc
(), 1000000000, 
tu√d
.
˝u_‰eq
);

1766 
	}
}

1770 
RT_TASK
 *
	$π_gë_ba£_löux_èsk
(
RT_TASK
 **
ba£_löux_èsks
)

1772 
˝uid
;

1773 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

1774 
ba£_löux_èsks
[
˝uid
] = 
π_smp_löux_èsk
 + cpuid;

1776  
π_smp_löux_èsk
;

1777 
	}
}

1779 
RT_TASK
 *
	$π_Æloc_dy«mic_èsk
()

1781 #ifde‡
CONFIG_RTAI_MALLOC


1782  
	`π_mÆloc
((
RT_TASK
));

1784  
NULL
;

1786 
	}
}

1790 
RT_TASK
 **
	$π_ªgi°î_w©chdog
(
RT_TASK
 *
wd
, 
˝uid
)

1792 
RT_TASK
 *
èsk
;

1794 i‡(
lxπ_wdog_èsk
[
˝uid
]Ë (
RT_TASK
**Ë-
EBUSY
;

1795 
èsk
 = &
π_löux_èsk
;

1796 (
èsk
 =Åask->
√xt
)) {

1797 i‡(
èsk
 !
wd
 &&Åask->
¥i‹ôy
 =
RT_SCHED_HIGHEST_PRIORITY
) {

1798  (
RT_TASK
**Ë-
EBUSY
;

1801 
lxπ_wdog_èsk
[
˝uid
] = 
wd
;

1802  (
RT_TASK
**) 0;

1803 
	}
}

1805 
	$π_dîegi°î_w©chdog
(
RT_TASK
 *
wd
, 
˝uid
)

1807 i‡(
lxπ_wdog_èsk
[
˝uid
] !
wd
) ;

1808 
lxπ_wdog_èsk
[
˝uid
] = 
NULL
;

1809 
	}
}

1814 #ifde‡
ECHO_SYSW


1815 
	#SYSW_DIAG_MSG
(
x
Ë
	)
x

1817 
	#SYSW_DIAG_MSG
(
x
)

	)

1820 
RT_TRAP_HANDLER
 
	glxπ_ﬁd_å≠_h™dÀr
;

1822 
ölöe
 
	$_π_scheduÀ_so·_èû
(
RT_TASK
 *
π_èsk
, 
˝uid
)

1824 
	`π_globÆ_˛i
();

1825 
π_èsk
->
°©e
 &~(
RT_SCHED_READY
 | 
RT_SCHED_SFTRDY
);

1826 (
π_èsk
->
Ωªv
)->
∫ext
 =Ñt_task->rnext;

1827 (
π_èsk
->
∫ext
)->
Ωªv
 =Ñt_task->rprev;

1828 
π_smp_cuºít
[
˝uid
] = &
π_löux_èsk
;

1829 
	`π_scheduÀ
();

1830 
	`UNLOCK_LINUX
(
˝uid
);

1831 
	`π_globÆ_°i
();

1833 #ifde‡
CONFIG_RTAI_ALIGN_LINUX_PRIORITY


1835 
π_¥i‹ôy
;

1836 
èsk_°ru˘
 *
 xtsk
;

1838 i‡((
 xtsk
 = 
π_èsk
-> xtsk)->
pﬁicy
 =
SCHED_FIFO
 ||Ünxtsk->pﬁicy =
SCHED_RR
) {

1839 i‡((
π_¥i‹ôy
 = 
π_èsk
->
¥i‹ôy
Ë>
BASE_SOFT_PRIORITY
) {

1840 
π_¥i‹ôy
 -
BASE_SOFT_PRIORITY
;

1842 i‡((
π_¥i‹ôy
 = (
MAX_LINUX_RTPRIO
 -Ñt_priority)) < 1) {

1843 
π_¥i‹ôy
 = 1;

1845 i‡(
π_¥i‹ôy
 !
 xtsk
->rt_priority) {

1846 
	`πai_£t_löux_èsk_¥i‹ôy
(
 xtsk
,Ünxtsk->
pﬁicy
, 
π_¥i‹ôy
);

1851 
	}
}

1853 
	$π_scheduÀ_so·
(
RT_TASK
 *
π_èsk
)

1855 
fun_¨gs
 *
fu«rg
;

1856 
˝uid
;

1858 
	`π_globÆ_˛i
();

1859 
π_èsk
->
°©e
 |
RT_SCHED_READY
;

1860 
π_èsk
->
°©e
 !
RT_SCHED_READY
) {

1861 
cuºít
->
°©e
 = 
TASK_SOFTREALTIME
;

1862 
	`π_globÆ_°i
();

1863 
	`scheduÀ
();

1864 
	`π_globÆ_˛i
();

1866 
˝uid
 = 
π_èsk
->
ru¬abÀ_⁄_˝us
;

1867 
	`LOCK_LINUX
(
˝uid
);

1868 
	`íq_so·_ªady_èsk
(
π_èsk
);

1869 
π_smp_cuºít
[
˝uid
] = 
π_èsk
;

1870 
	`π_globÆ_°i
();

1871 
fu«rg
 = (*)
π_èsk
->
fun_¨gs
;

1872 
π_èsk
->
ªtvÆ
 = 
fu«rg
->
	`fun
(
RTAI_FUNARGS
);

1873 
	`_π_scheduÀ_so·_èû
(
π_èsk
, 
˝uid
);

1874 
	}
}

1876 
	$π_scheduÀ_so·_èû
(
RT_TASK
 *
π_èsk
, 
˝uid
)

1878 
	`_π_scheduÀ_so·_èû
(
π_èsk
, 
˝uid
);

1879 
	}
}

1881 
ölöe
 
	$Á°_scheduÀ
(
RT_TASK
 *
√w_èsk
, 
èsk_°ru˘
 *
 xtsk
, 
˝uid
)

1883 
RT_TASK
 *
π_cuºít
;

1884 
	`π_globÆ_˛i
();

1885 
√w_èsk
->
°©e
 |
RT_SCHED_READY
;

1886 
	`íq_so·_ªady_èsk
(
√w_èsk
);

1887 
√w_èsk
->
ru¬ög
 = 1;

1888 
	`sched_ªÀa£_globÆ_lock
(
˝uid
);

1889 
	`LOCK_LINUX
(
˝uid
);

1890 (
π_cuºít
 = &
π_löux_èsk
)->
 xtsk
 =Ünxtsk;

1891 
	`SET_EXEC_TIME
();

1892 
π_smp_cuºít
[
˝uid
] = 
√w_èsk
;

1893 
	`lxπ_c⁄ãxt_swôch
(
 xtsk
, 
√w_èsk
-> xtsk, 
˝uid
);

1894 
	`CALL_TIMER_HANDLER
();

1895 
	`UNLOCK_LINUX
(
˝uid
);

1896 
	`πai_°i
();

1897 
	}
}

1903 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,24)

1905 
	$π_d´m⁄ize
()

1907 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

1908 
cuºít
->
£ssi⁄
 = 1;

1909 
cuºít
->
pgΩ
 = 1;

1910 
cuºít
->
ây
 = 
NULL
;

1911 
	`•ö_lock_úq
(&
cuºít
->
sigmask_lock
);

1912 
	`sigfûl£t
(&
cuºít
->
blocked
);

1913 
	`ªˇlc_sig≥ndög
(
cuºít
);

1914 
	`•ö_u∆ock_úq
(&
cuºít
->
sigmask_lock
);

1916 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2,6,19)

1917 (
cuºít
->
sig«l
)->
__£ssi⁄
 = 1;

1919 (
cuºít
->
sig«l
)->
£ssi⁄
 = 1;

1921 (
cuºít
->
sig«l
)->
pgΩ
 = 1;

1922 (
cuºít
->
sig«l
)->
ây
 = 
NULL
;

1924 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

1925 
	`•ö_lock_úq
(&
cuºít
->
sigmask_lock
);

1926 
	`sigfûl£t
(&
cuºít
->
blocked
);

1927 
	`ªˇlc_sig≥ndög
(
cuºít
);

1928 
	`•ö_u∆ock_úq
(&
cuºít
->
sigmask_lock
);

1930 
	`•ö_lock_úq
(&(
cuºít
->
sigh™d
)->
siglock
);

1931 
	`sigfûl£t
(&
cuºít
->
blocked
);

1932 
	`ªˇlc_sig≥ndög
();

1933 
	`•ö_u∆ock_úq
(&(
cuºít
->
sigh™d
)->
siglock
);

1935 
	}
}

1936 
EXPORT_SYMBOL
(
π_d´m⁄ize
);

1940 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(3,0,0)

1942 
	$π_d´m⁄ize
(Ë{ 
	}
}

1943 
EXPORT_SYMBOL
(
π_d´m⁄ize
);

1947 
π_d´m⁄ize
();

1953 
	$°ól_‰om_löux
(
RT_TASK
 *
π_èsk
)

1955 
kli°_t
 *
kli°p
;

1956 
èsk_°ru˘
 *
 xtsk
;

1958 i‡(
	`sig«l_≥ndög
(
π_èsk
->
 xtsk
)) {

1959 
π_èsk
->
is_h¨d
 = -1;

1962 
kli°p
 = &
wake_up_°h
[
π_èsk
->
ru¬abÀ_⁄_˝us
];

1963 
	`πai_˛i
();

1964 
kli°p
->
èsk
[kli°p->
ö
++ & (
MAX_WAKEUP_SRQ
 - 1)] = 
π_èsk
;

1965 i‡(
π_èsk
->
ba£_¥i‹ôy
 >
BASE_SOFT_PRIORITY
) {

1966 
π_èsk
->
ba£_¥i‹ôy
 -
BASE_SOFT_PRIORITY
;

1968 i‡(
π_èsk
->
¥i‹ôy
 >
BASE_SOFT_PRIORITY
) {

1969 
π_èsk
->
¥i‹ôy
 -
BASE_SOFT_PRIORITY
;

1971 
π_èsk
->
is_h¨d
 = 1;

1972 #i‡
	`deföed
(
TASK_ATOMICSWITCH
Ë&& TASK_ATOMICSWITCH && deföed(
CONFIG_PREEMPT
)

1973 
	`¥ìm±_dißbÀ
();

1974 (
 xtsk
 = 
π_èsk
-> xtsk)->
°©e
 = (
TASK_HARDREALTIME
 | 
TASK_ATOMICSWITCH
);

1975 
	`πai_°i
();

1977 (
 xtsk
 = 
π_èsk
-> xtsk)->
°©e
 = 
TASK_HARDREALTIME
;

1980 
	`scheduÀ
();

1981 } 
π_èsk
->
°©e
 !
RT_SCHED_READY
);

1982 #i‡
CONFIG_RTAI_MONITOR_EXECTIME


1983 i‡(!
π_èsk
->
exe˘ime
[1]) {

1984 
π_èsk
->
exe˘ime
[1] = 
	`πai_rdtsc
();

1987 i‡(
	` xtsk_u£s_Âu
(
 xtsk
)) {

1988 
	`πai_˛i
();

1989 
	`ª°‹e_Âu
(
 xtsk
);

1991 
	`πai_°i
();

1992 
	}
}

1994 
	$give_back_to_löux
(
RT_TASK
 *
π_èsk
, 
kì¥io
)

1996 
èsk_°ru˘
 *
 xtsk
;

1997 
π_¥i‹ôy
;

1999 
	`π_globÆ_˛i
();

2000 (
π_èsk
->
Ωªv
)->
∫ext
 =Ñt_task->rnext;

2001 (
π_èsk
->
∫ext
)->
Ωªv
 =Ñt_task->rprev;

2002 
π_èsk
->
°©e
 = 0;

2003 
	`≥nd_wake_up_hts
(
 xtsk
 = 
π_èsk
-> xtsk,Ñt_èsk->
ru¬abÀ_⁄_˝us
);

2004 #ifde‡
TASK_NOWAKEUP


2005 
	`£t_èsk_°©e
(
 xtsk
,Ünxtsk->
°©e
 & ~
TASK_NOWAKEUP
);

2007 
	`π_scheduÀ
();

2008 i‡(!(
π_èsk
->
is_h¨d
 = 
kì¥io
)) {

2009 i‡(
π_èsk
->
¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

2010 
π_¥i‹ôy
 = 
π_èsk
->
¥i‹ôy
;

2011 i‡(
π_èsk
->
¥i‹ôy
 =π_èsk->
ba£_¥i‹ôy
) {

2012 
π_èsk
->
¥i‹ôy
 +
BASE_SOFT_PRIORITY
;

2015 
π_¥i‹ôy
 = 
π_èsk
->
¥i‹ôy
 - 
BASE_SOFT_PRIORITY
;

2017 i‡(
π_èsk
->
ba£_¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

2018 
π_èsk
->
ba£_¥i‹ôy
 +
BASE_SOFT_PRIORITY
;

2021 i‡(
π_èsk
->
¥i‹ôy
 < 
BASE_SOFT_PRIORITY
) {

2022 
π_¥i‹ôy
 = 
π_èsk
->
¥i‹ôy
;

2024 
π_¥i‹ôy
 = 
π_èsk
->
¥i‹ôy
 - 
BASE_SOFT_PRIORITY
;

2027 
	`π_globÆ_°i
();

2030 
	`hÆ_scheduÀ_back_roŸ
(
 xtsk
);

2032 #ifde‡
CONFIG_RTAI_ALIGN_LINUX_PRIORITY


2033 i‡(
 xtsk
->
pﬁicy
 =
SCHED_FIFO
 ||Ünxtsk->pﬁicy =
SCHED_RR
) {

2034 i‡((
π_¥i‹ôy
 = (
MAX_LINUX_RTPRIO
 -Ñt_priority)) < 1) {

2035 
π_¥i‹ôy
 = 1;

2037 i‡(
π_¥i‹ôy
 !
 xtsk
->rt_priority) {

2038 
	`πai_£t_löux_èsk_¥i‹ôy
(
 xtsk
,Ünxtsk->
pﬁicy
, 
π_¥i‹ôy
);

2044 
	}
}

2046 
	#WAKE_UP_TASKs
(
kli°
) \

2048 
kli°_t
 *
p
 = &
kli°
[
˝uid
]; \

2049 
p
->
out
 !p->
ö
) { \

2050 
	`wake_up_¥o˚ss
(
p
->
èsk
[p->
out
++ & (
MAX_WAKEUP_SRQ
 - 1)]); \

2052 } 0)

	)

2054 
	$wake_up_§q_h™dÀr
(
§q
)

2056 
˝uid
 = 
	`πai_˝uid
();

2057 
	`WAKE_UP_TASKs
(
wake_up_hts
);

2058 
	`WAKE_UP_TASKs
(
wake_up_§q
);

2059 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(3,13,0)

2060 
	`£t_tsk_√ed_ªsched
(
cuºít
);

2062 
	`£t_√ed_ªsched
();

2064 
	}
}

2066 
	gå≠å™s
, 
	gsy°øns
;

2068 
	$lxπ_h™dÀ_å≠
(
vec
, 
signo
, 
±_ªgs
 *
ªgs
, *
dummy_d©a
)

2070 
RT_TASK
 *
π_èsk
;

2072 
π_èsk
 = 
π_smp_cuºít
[
	`πai_˝uid
()];

2073 i‡(–!
π_èsk
->
 xtsk
) ) {

2074 i‡(
π_èsk
->
èsk_å≠_h™dÀr
[
vec
]) {

2075  
π_èsk
->
èsk_å≠_h™dÀr
[
vec
](vec, 
signo
, 
ªgs
,Ñt_task);

2077 
	`π_¥ötk
("DeÁu… Tø∞H™dÀr: ve˘‹ %d: Su•íd RTÅask %p\n", 
vec
, 
π_èsk
);

2078 
	`π_èsk_su•íd
(
π_èsk
);

2082 i‡(
π_èsk
->
is_h¨d
 > 0) {

2083 i‡(!
å≠å™s
++) {

2084 
	`π_¥ötk
("\nLXRT CHANGED MODE (TRAP), PID = %d, VEC = %d, SIGNO = %d.\n", (
π_èsk
->
 xtsk
)->
pid
, 
vec
, 
signo
);

2086 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("\nFORCING IT SOFT (TRAP), PID = %d, VEC = %d, SIGNO = %d.\n", (
π_èsk
->
 xtsk
)->
pid
, 
vec
, 
signo
););

2087 
	`give_back_to_löux
(
π_èsk
, -1);

2088 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("FORCED IT SOFT (TRAP), PID = %d, VEC = %d, SIGNO = %d.\n", (
π_èsk
->
 xtsk
)->
pid
, 
vec
, 
signo
););

2092 
	}
}

2094 
ölöe
 
	$π_sig«l_wake_up
(
RT_TASK
 *
èsk
)

2096 
èsk_°ru˘
 *
 xtsk
;

2097 i‡((
 xtsk
 = 
èsk
-> xtskË&&Åask->
°©e
 &&Åask->°©ê!
RT_SCHED_READY
 &&Ünxtsk->°©ê& 
TASK_HARDREALTIME
) {

2098 
èsk
->
unblocked
 = 1;

2099 
	`π_èsk_masked_unblock
(
èsk
, ~
RT_SCHED_READY
);

2101 
èsk
->
unblocked
 = -1;

2103 
	}
}

2106 
	$lxπ_öãr˚±_scheduÀ_èû
 (
evít
, *
nŸhög
)

2108 
˝uid
 = 
	`πai_˝uid
();

2109 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

2110 i‡(
	`ö_hπ_mode
(
˝uid
)) {

2115 
kli°_t
 *
kli°p
 = &
wake_up_°h
[
˝uid
];

2116 
kli°p
->
out
 !kli°p->
ö
) {

2117 
	`Á°_scheduÀ
(
kli°p
->
èsk
[kli°p->
out
++ & (
MAX_WAKEUP_SRQ
 - 1)], 
cuºít
, 
˝uid
);

2121 
	}
}

2123 
	ssig_wakeup_t
 { 
èsk_°ru˘
 *
	mèsk
; };

2124 
	$lxπ_öãr˚±_sig_wakeup
 (
evít
, *
d©a
)

2126 
RT_TASK
 *
èsk
;

2127 i‡((
èsk
 = 
	`INTERCEPT_WAKE_UP_TASK
(
d©a
)->
	`πai_tskext
(
TSKEXT0
))) {

2128 
	`π_sig«l_wake_up
(
èsk
);

2132 
	}
}

2134 
	$lxπ_öãr˚±_exô
 (
evít
, 
èsk_°ru˘
 *
 x_èsk
)

2136 
	`löux_¥o˚ss_ãrmö©i⁄
();

2137 
RT_TASK
 *
èsk
;

2138 i‡((
èsk
 = 
 x_èsk
->
	`πai_tskext
(
TSKEXT0
))) {

2139 i‡(
èsk
->
is_h¨d
 > 0) {

2140 
	`give_back_to_löux
(
èsk
, 0);

2142 
	`löux_¥o˚ss_ãrmö©i⁄
();

2145 
	}
}

2147 
πai_lxπ_övoke
 (, *);

2148 (*
sys_ˇŒ_èbÀ
[])(
±_ªgs
);

2151 
	$lxπ_öãr˚±_sysˇŒ_¥ﬁogue
(
±_ªgs
 *
ªgs
)

2153 
RT_TASK
 *
èsk
;

2155 i‡((
èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
))) {

2156 i‡(
èsk
->
is_h¨d
 > 0) {

2157 i‡(
èsk
->
löux_sysˇŒ_£rvî
) {

2158 
	`π_exec_löux_sysˇŒ
(
èsk
, ((
RT_TASK
 *Èask->
löux_sysˇŒ_£rvî
)->löux_sysˇŒ_£rvî, 
ªgs
);

2161 i‡(!
sy°øns
++) {

2162 
	`π_¥ötk
("\nLXRT CHANGED MODE (SYSCALL), PID = %d, SYSCALL = %lu.\n", (
èsk
->
 xtsk
)->
pid
, 
ªgs
->
LINUX_SYSCALL_NR
);

2164 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("\nFORCING IT SOFT (SYSCALL), PID = %d, SYSCALL = %d.\n", (
èsk
->
 xtsk
)->
pid
, 
ªgs
->
LINUX_SYSCALL_NR
););

2165 
	`give_back_to_löux
(
èsk
, -1);

2169 
	}
}

2171 
	~<asm/πai_usi.h
>

2173 
πai_u§q_di•©chî
 (, );

2175 
	$lxπ_öãr˚±_sysˇŒ
(
evít
, 
±_ªgs
 *
ªgs
){

2176 i‡(
	`likñy
(
ªgs
->
LINUX_SYSCALL_NR
 >
RTAI_SYSCALL_NR
)) {

2177 
§q
 = 
ªgs
->
LINUX_SYSCALL_REG1
;

2178 
	`IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
ªgs
->
LINUX_SYSCALL_REG2
, (*Ïegs->
LINUX_SYSCALL_REG3
,Ñegs->
LINUX_SYSCALL_FLAGS
, 1);

2179 *((*)
ªgs
->
LINUX_SYSCALL_REG3
Ë
§q
 > 
RTAI_NR_SRQS
 ? 
	`πai_lxπ_övoke
(§q, (*Ïegs->
LINUX_SYSCALL_REG2
Ë: 
	`πai_u§q_di•©chî
(srq,Ñegs->LINUX_SYSCALL_REG2);

2180 i‡(!
	`ö_hπ_mode
(
§q
 = 
	`πai_˝uid
())) {

2181 
	`hÆ_ã°_™d_Á°_Êush_pùñöe
(
§q
);

2186  
	`lxπ_öãr˚±_sysˇŒ_¥ﬁogue
(
ªgs
);

2187 
	}
}

2189 
	$lxπ_öãr˚±_sysˇŒ_ïûogue
(
evít
, *
nŸhög
)

2191 
RT_TASK
 *
èsk
;

2192 i‡((
èsk
 = (
RT_TASK
 *)
cuºít
->
	`πai_tskext
(
TSKEXT0
))) {

2193 i‡(
èsk
->
sy°em_d©a_±r
) {

2194 
±_ªgs
 *
r
 = 
èsk
->
sy°em_d©a_±r
;

2195 
r
->
LINUX_SYSCALL_RETREG
 = -
ERESTARTSYS
;

2196 
r
->
LINUX_SYSCALL_NR
 = 
RTAI_SYSCALL_NR
;

2197 
èsk
->
sy°em_d©a_±r
 = 
NULL
;

2198 } i‡(
èsk
->
is_h¨d
 < 0) {

2199 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("GOING BACK TO HARD (SYSLXRT), PID = %d.\n", 
cuºít
->
pid
););

2200 
	`°ól_‰om_löux
(
èsk
);

2201 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("GONE BACK TO HARD (SYSLXRT), PID = %d.\n", 
cuºít
->
pid
););

2206 
	}
}

2210 #ifde‡
CONFIG_PROC_FS


2213 
πai_globÆ_hóp_size
;

2215 #ifde‡
CONFIG_RTAI_USE_TLSF


2216 
	#RTAI_USES_TLSF
 1

	)

2217 
ésf_gë_u£d_size
(
πhóp_t
 *);

2218 
	#π_gë_hóp_mem_u£d
(
hóp
Ë
	`ésf_gë_u£d_size
(hóp)

	)

2220 
	#RTAI_USES_TLSF
 0

	)

2221 
	#π_gë_hóp_mem_u£d
(
hóp
Ë
	`πhóp_u£d_mem
(hóp)

	)

2224 
	$PROC_READ_FUN
(
πai_ªad_sched
)

2226 
˝uid
, 
i
 = 1;

2227 
t
;

2228 
RT_TASK
 *
èsk
;

2229 
PROC_PRINT_VARS
;

2231 
	`PROC_PRINT
("\nRTAI LXRT Real Time Task Scheduler.\n\n");

2232 
	`PROC_PRINT
(" CÆibøãd TimêBa£ Fªquícy: %lu Hz\n", 
tu√d
.
˝u_‰eq
);

2233 
	`PROC_PRINT
(" CÆibøãd i¡îru±ÅÿscheduÀ∏œãncy: %dÇs\n", ()
	`imuldiv
(
tu√d
.
œãncy
 -Åu√d.
£tup_time_TIMER_CPUNIT
, 1000000000,Åu√d.
˝u_‰eq
));

2234 
	`PROC_PRINT
(" Calibrated oneshotÅimer setup_to_firingÅime: %dÇs\n\n",

2235 ()
	`imuldiv
(
tu√d
.
£tup_time_TIMER_CPUNIT
, 1000000000,Åu√d.
˝u_‰eq
));

2236 
	`PROC_PRINT
("Numbî o‡RT CPU†ö sy°em: %d (sized f‹ %d)\n\n", 
	`num_⁄löe_˝us
(), 
NR_RT_CPUS
);

2238 
	`PROC_PRINT
("\n\n");

2240 
	`PROC_PRINT
("GlobÆ hóp: sizê%10d, u£d = %10lu; <%s>.\n", 
πai_globÆ_hóp_size
, 
	`π_gë_hóp_mem_u£d
(&
πai_globÆ_hóp
), 
RTAI_USES_TLSF
 ? "TLSF" : "BSD");

2242 
	`PROC_PRINT
("K°ack hóp: sizê%10d, u£d = %10lu; <%s>.\n\n", 
πai_k°ack_hóp_size
, 
	`π_gë_hóp_mem_u£d
(&
πai_k°ack_hóp
), 
RTAI_USES_TLSF
 ? "TLSF" : "BSD");

2244 
	`PROC_PRINT
("Numbî o‡f‹˚d h¨d/so·/h¨dÅønsôi⁄s:Åøp†%lu, sysˇŒ†%lu\n\n", 
å≠å™s
, 
sy°øns
);

2246 
	`PROC_PRINT
("Priority Period(ns) FPU Sig State CPU Task HD/SF PID RT_TASK * TIME\n" );

2247 
	`PROC_PRINT
("------------------------------------------------------------------------------\n" );

2248 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

2249 
èsk
 = &
π_löux_èsk
;

2256 (
èsk
 =Åask->
√xt
)) {

2262 
t
 = 0;

2263 i‡((!
èsk
->
 xtsk
 ||Åask->
is_h¨d
Ë&&Åask->
exe˘ime
[1]) {

2264 
dí
 = ()
	`Œimd
(
	`πai_rdtsc
(Ë- 
èsk
->
exe˘ime
[1], 10, 
tu√d
.
˝u_‰eq
);

2265 i‡(
dí
) {

2266 
t
 = 1000UL*()
	`Œimd
(
èsk
->
exe˘ime
[0], 10, 
tu√d
.
˝u_‰eq
)/
dí
;

2269 
	`PROC_PRINT
("%-10d %-11lu %-4s %-3s 0x%-3x %1lu:%1lu %-4d %-4d %-4d %p %-lu\n",

2270 
èsk
->
¥i‹ôy
,

2271 ()
	`cou¡2«no_˝uid
(
èsk
->
≥riod
,Åask->
ru¬abÀ_⁄_˝us
),

2272 
èsk
->
u£s_Âu
 ||Åask->
 xtsk
 ? "Yes" : "No",

2273 
èsk
->
sig«l
 ? "Yes" : "No",

2274 
èsk
->
°©e
,

2275 
èsk
->
ru¬abÀ_⁄_˝us
,

2276 
èsk
->
 xtsk
 ? 
	`CPUMASK
(—ask-> xtsk)->
˝us_Ælowed
Ë: (1 <<Åask->
ru¬abÀ_⁄_˝us
),

2277 
i
,

2278 
èsk
->
is_h¨d
,

2279 
èsk
->
 xtsk
 ?Åask-> xtsk->
pid
 : 0,

2280 
èsk
, 
t
);

2281 
i
++;

2284 
	`PROC_PRINT
("TIMED\n");

2285 
èsk
 = &
π_löux_èsk
;

2286 (
èsk
 =Åask->
äext
Ë!&
π_löux_èsk
) {

2287 
	`PROC_PRINT
("> %∞", 
èsk
);

2289 
	`PROC_PRINT
("\nREADY\n");

2290 
èsk
 = &
π_löux_èsk
;

2291 (
èsk
 =Åask->
∫ext
Ë!&
π_löux_èsk
) {

2292 
	`PROC_PRINT
("> %∞", 
èsk
);

2297 
PROC_PRINT_DONE
;

2299 
	}
}

2301 
PROC_READ_OPEN_OPS
(
πai_sched_¥oc_f›s
, 
πai_ªad_sched
);

2303 
	$πai_¥oc_sched_ªgi°î
()

2305 
¥oc_dú_íåy
 *
¥oc_sched_ít
;

2308 
¥oc_sched_ít
 = 
	`CREATE_PROC_ENTRY
("scheduÀr", 
S_IFREG
|
S_IRUGO
|
S_IWUSR
, 
πai_¥oc_roŸ
, &
πai_sched_¥oc_f›s
);

2309 i‡(!
¥oc_sched_ít
) {

2310 
	`¥ötk
("UnableÅo initialize /proc/rtai/scheduler\n");

2313 
	`SET_PROC_READ_ENTRY
(
¥oc_sched_ít
, 
πai_ªad_sched
);

2315 
	}
}

2318 
	$πai_¥oc_sched_uƒegi°î
()

2320 
	`ªmove_¥oc_íåy
("scheduÀr", 
πai_¥oc_roŸ
);

2321 
	}
}

2328 
	$π_gëtid
()

2330  
cuºít
->
pid
;

2331 
	}
}

2333 
π_«tive_fun_íåy
 
	gπ_sched_íåõs
[] = {

2334 { { 0, 
π_£t_ru¬abÀ_⁄_˝us
 }, 
SET_RUNNABLE_ON_CPUS
 },

2335 { { 0, 
π_£t_ru¬abÀ_⁄_˝uid
 }, 
SET_RUNNABLE_ON_CPUID
 },

2336 { { 0, 
π_£t_sched_pﬁicy
 }, 
SET_SCHED_POLICY
 },

2337 { { 0, 
π_gë_timî_˝u
 }, 
GET_TIMER_CPU
 },

2338 { { 0, 
π_is_h¨d_timî_ru¬ög
 }, 
HARD_TIMER_RUNNING
 },

2339 { { 0, 
π_£t_≥riodic_mode
 }, 
SET_PERIODIC_MODE
 },

2340 { { 0, 
π_£t_⁄eshŸ_mode
 }, 
SET_ONESHOT_MODE
 },

2341 { { 0, 
°¨t_π_timî
 }, 
START_TIMER
 },

2342 { { 0, 
°¨t_π_≠ic_timîs
 }, 
START_RT_APIC_TIMERS
 },

2343 { { 0, 
°›_π_timî
 }, 
STOP_TIMER
 },

2344 { { 0, 
π_èsk_sig«l_h™dÀr
 }, 
SIGNAL_HANDLER
 },

2345 { { 0, 
π_èsk_u£_Âu
 }, 
TASK_USE_FPU
 },

2346 { { 0, 
π_h¨d_timî_tick_cou¡
 }, 
HARD_TIMER_COUNT
 },

2347 { { 0, 
π_h¨d_timî_tick_cou¡_˝uid
 }, 
HARD_TIMER_COUNT_CPUID
 },

2348 { { 0, 
cou¡2«no
 }, 
COUNT2NANO
 },

2349 { { 0, 
«no2cou¡
 }, 
NANO2COUNT
 },

2350 { { 0, 
cou¡2«no_˝uid
 }, 
COUNT2NANO_CPUID
 },

2351 { { 0, 
«no2cou¡_˝uid
 }, 
NANO2COUNT_CPUID
 },

2352 { { 0, 
π_gë_time
 }, 
GET_TIME
 },

2353 { { 0, 
π_gë_time_˝uid
 }, 
GET_TIME_CPUID
 },

2354 { { 0, 
π_gë_time_ns
 }, 
GET_TIME_NS
 },

2355 { { 0, 
π_gë_time_ns_˝uid
 }, 
GET_TIME_NS_CPUID
 },

2356 { { 0, 
π_gë_˝u_time_ns
 }, 
GET_CPU_TIME_NS
 },

2357 { { 0, 
π_èsk_gë_öfo
 }, 
GET_TASK_INFO
 },

2358 { { 0, 
π_•v_RMS
 }, 
SPV_RMS
 },

2359 { { 1, 
π_ch™ge_¥io
 }, 
CHANGE_TASK_PRIO
 },

2360 { { 0, 
π_sched_lock
 }, 
SCHED_LOCK
 },

2361 { { 0, 
π_sched_u∆ock
 }, 
SCHED_UNLOCK
 },

2362 { { 1, 
π_èsk_yõld
 }, 
YIELD
 },

2363 { { 1, 
π_èsk_su•íd
 }, 
SUSPEND
 },

2364 { { 1, 
π_èsk_su•íd_if
 }, 
SUSPEND_IF
 },

2365 { { 1, 
π_èsk_su•íd_u¡û
 }, 
SUSPEND_UNTIL
 },

2366 { { 1, 
π_èsk_su•íd_timed
 }, 
SUSPEND_TIMED
 },

2367 { { 1, 
π_èsk_ªsume
 }, 
RESUME
 },

2368 { { 1, 
π_£t_löux_sysˇŒ_mode
 }, 
SET_LINUX_SYSCALL_MODE
 },

2369 #ifde‡
CONFIG_RTAI_USI


2370 { { 1, 
π_úq_waô
 }, 
IRQ_WAIT
 },

2371 { { 1, 
π_úq_waô_if
 }, 
IRQ_WAIT_IF
 },

2372 { { 1, 
π_úq_waô_u¡û
 }, 
IRQ_WAIT_UNTIL
 },

2373 { { 1, 
π_úq_waô_timed
 }, 
IRQ_WAIT_TIMED
 },

2374 { { 0, 
π_úq_sig«l
 }, 
IRQ_SIGNAL
 },

2375 { { 0, 
π_ªque°_úq_èsk
 }, 
REQUEST_IRQ_TASK
 },

2376 { { 0, 
π_ªÀa£_úq_èsk
 }, 
RELEASE_IRQ_TASK
 },

2378 { { 1, 
π_èsk_make_≥riodic_ªœtive_ns
 }, 
MAKE_PERIODIC_NS
 },

2379 { { 1, 
π_èsk_make_≥riodic
 }, 
MAKE_PERIODIC
 },

2380 { { 1, 
π_èsk_£t_ªsume_íd_times
 }, 
SET_RESUME_END
 },

2381 { { 0, 
π_£t_ªsume_time
 }, 
SET_RESUME_TIME
 },

2382 { { 0, 
π_£t_≥riod
 }, 
SET_PERIOD
 },

2383 { { 1, 
π_èsk_waô_≥riod
 }, 
WAIT_PERIOD
 },

2384 { { 0, 
π_busy_¶ìp
 }, 
BUSY_SLEEP
 },

2385 { { 1, 
π_¶ìp
 }, 
SLEEP
 },

2386 { { 1, 
π_¶ìp_u¡û
 }, 
SLEEP_UNTIL
 },

2387 { { 0, 
π_èsk_masked_unblock
 }, 
WAKEUP_SLEEPING
 },

2388 { { 0, 
π_«med_èsk_öô
 }, 
NAMED_TASK_INIT
 },

2389 { { 0, 
π_«med_èsk_öô_˝uid
 }, 
NAMED_TASK_INIT_CPUID
 },

2390 { { 0, 
π_«med_èsk_dñëe
 }, 
NAMED_TASK_DELETE
 },

2391 { { 0, 
π_gë_«me
 }, 
GET_NAME
 },

2392 { { 0, 
π_gë_adr
 }, 
GET_ADR
 },

2393 { { 0, 
u§_π_≥nd_löux_úq
 }, 
PEND_LINUX_IRQ
 },

2394 { { 0, 
π_gëtid
 }, 
RT_GETTID
 },

2395 { { 0, 
π_gë_ªÆ_time
 }, 
GET_REAL_TIME
 },

2396 { { 0, 
π_gë_ªÆ_time_ns
 }, 
GET_REAL_TIME_NS
 },

2397 { { 1, 
π_sig«l_hñ≥r
 }, 
RT_SIGNAL_HELPER
 },

2398 { { 1, 
π_waô_sig«l
 }, 
RT_SIGNAL_WAITSIG
 },

2399 { { 1, 
π_ªque°_sig«l_
 }, 
RT_SIGNAL_REQUEST
 },

2400 { { 1, 
π_ªÀa£_sig«l
 }, 
RT_SIGNAL_RELEASE
 },

2401 { { 1, 
π_íabÀ_sig«l
 }, 
RT_SIGNAL_ENABLE
 },

2402 { { 1, 
π_dißbÀ_sig«l
 }, 
RT_SIGNAL_DISABLE
 },

2403 { { 1, 
π_åiggî_sig«l
 }, 
RT_SIGNAL_TRIGGER
 },

2407 *
	gßved_sysˇŒ_¥ﬁogue
;

2409 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


2410 *
πai_i§_sched
;

2412 
	$πai_i§_sched_h™dÀ
(
˝uid
)

2414 
	`SCHED_UNLOCK_SCHEDULE
(
˝uid
);

2415 
	}
}

2416 
EXPORT_SYMBOL
(
πai_i§_sched_h™dÀ
);

2418 
	$lxπ_öô
()

2420 
	`öô_fun_ext
();

2421 
˝uid
;

2423 
	`öô_fun_ext
();

2425 
	`REQUEST_RESUME_SRQs_STUFF
();

2427 
˝uid
 = 0; cpuid < 
MAX_LXRT_FUN
; cpuid++) {

2428 
π_fun_lxπ
[
˝uid
].
ty≥
 = 1;

2429 
π_fun_lxπ
[
˝uid
].
fun
 = 
nihû
;

2432 
	`£t_π_fun_íåõs
(
π_sched_íåõs
);

2434 
lxπ_ﬁd_å≠_h™dÀr
 = 
	`π_£t_πai_å≠_h™dÀr
(
lxπ_h™dÀ_å≠
);

2436 #ifde‡
CONFIG_PROC_FS


2437 
	`πai_¥oc_lxπ_ªgi°î
();

2440 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SCHEDULE_TAIL
, (*)
lxπ_öãr˚±_scheduÀ_èû
);

2441 
ßved_sysˇŒ_¥ﬁogue
 = 
	`hÆ_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, (*)
lxπ_öãr˚±_sysˇŒ
);

2442 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_EPILOGUE
, (*)
lxπ_öãr˚±_sysˇŒ_ïûogue
);

2443 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_EXIT_PROCESS
, (*)
lxπ_öãr˚±_exô
);

2444 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_KICK_PROCESS
, (*)
lxπ_öãr˚±_sig_wakeup
);

2447 
	}
}

2449 
	$lxπ_exô
()

2451 #ifde‡
CONFIG_PROC_FS


2452 
	`πai_¥oc_lxπ_uƒegi°î
();

2455 
	`π_£t_πai_å≠_h™dÀr
(
lxπ_ﬁd_å≠_h™dÀr
);

2457 
	`RELEASE_RESUME_SRQs_STUFF
();

2459 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SCHEDULE_TAIL
, 
NULL
);

2460 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_PROLOGUE
, 
ßved_sysˇŒ_¥ﬁogue
);

2461 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_SYSCALL_EPILOGUE
, 
NULL
);

2462 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_EXIT_PROCESS
, 
NULL
);

2463 
	`πai_ˇtch_evít
(
hÆ_roŸ_domaö
, 
HAL_KICK_PROCESS
, 
NULL
);

2465 
	`ª£t_π_fun_íåõs
(
π_sched_íåõs
);

2466 
	}
}

2468 #ifde‡
DECLR_8254_TSC_EMULATION


2469 
	gDECLR_8254_TSC_EMULATION
;

2471 
	$timî_fun
(
n⁄e
)

2473 
	`TICK_8254_TSC_EMULATION
();

2474 
timî
.
expúes
 = 
jiffõs
 + (
HZ
 + 
TSC_EMULATION_GUARD_FREQ
/2 - 1)/TSC_EMULATION_GUARD_FREQ;

2475 
	`add_timî
(&
timî
);

2476 
	}
}

2479 
π_ªgi°ry_Æloc
();

2480 
π_ªgi°ry_‰ì
();

2482 
	$__πai_lxπ_öô
()

2484 
˝uid
, 
ªtvÆ
;

2486 #ifde‡
IPIPE_NOSTACK_FLAG


2490 #ifde‡
CONFIG_RTAI_MALLOC


2491 
πai_k°ack_hóp_size
 = (πai_k°ack_hóp_sizê+ 
PAGE_SIZE
 - 1) & ~(PAGE_SIZE - 1);

2492 i‡(
	`πhóp_öô
(&
πai_k°ack_hóp
, 
NULL
, 
πai_k°ack_hóp_size
, 
PAGE_SIZE
, 
GFP_KERNEL
)) {

2493 
	`¥ötk
(
KERN_INFO
 "RTAI[mÆloc]: faûedÅÿöôülizêthêkî√»°ack†hó∞(size=%d byãs).\n", 
πai_k°ack_hóp_size
);

2497 
	`sched_mem_öô
();

2499 
	`π_ªgi°ry_Æloc
();

2501 
˝uid
 = 0; cpuid < 
NR_RT_CPUS
; cpuid++) {

2502 
π_löux_èsk
.
u£s_Âu
 = 1;

2503 
π_löux_èsk
.
magic
 = 0;

2504 
π_löux_èsk
.
pﬁicy
 =Ñt_löux_èsk.
is_h¨d
 = 0;

2505 
π_löux_èsk
.
ru¬abÀ_⁄_˝us
 = 
˝uid
;

2506 
π_löux_èsk
.
°©e
 = 
RT_SCHED_READY
;

2507 
π_löux_èsk
.
msg_queue
.
¥ev
 = &(rt_linux_task.msg_queue);

2508 
π_löux_èsk
.
msg_queue
.
√xt
 = &(rt_linux_task.msg_queue);

2509 
π_löux_èsk
.
msg_queue
.
èsk
 = &rt_linux_task;

2510 
π_löux_èsk
.
msg
 = 0;

2511 
π_löux_èsk
.
ªt_queue
.
¥ev
 = &(rt_linux_task.ret_queue);

2512 
π_löux_èsk
.
ªt_queue
.
√xt
 = &(rt_linux_task.ret_queue);

2513 
π_löux_èsk
.
ªt_queue
.
èsk
 = 
NULL
;

2514 
π_löux_èsk
.
¥i‹ôy
 = 
RT_SCHED_LINUX_PRIORITY
;

2515 
π_löux_èsk
.
ba£_¥i‹ôy
 = 
RT_SCHED_LINUX_PRIORITY
;

2516 
π_löux_èsk
.
sig«l
 = 0;

2517 
π_löux_èsk
.
¥ev
 = &rt_linux_task;

2518 
π_löux_èsk
.
ªsume_time
 = 
RT_TIME_END
;

2519 
π_löux_èsk
.
≥riodic_ªsume_time
 = 
RT_TIME_END
;

2520 
π_löux_èsk
.
çªv
 =Ñt_löux_èsk.
äext
 =

2521 
π_löux_èsk
.
Ωªv
 =Ñt_löux_èsk.
∫ext
 = &rt_linux_task;

2522 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


2523 
π_löux_èsk
.
rbr
.
rb_node
 = 
NULL
;

2525 
π_löux_èsk
.
√xt
 = 0;

2526 
π_löux_èsk
.
 xtsk
 = 
cuºít
;

2527 
π_smp_cuºít
[
˝uid
] = &
π_löux_èsk
;

2528 
π_smp_Âu_èsk
[
˝uid
] = &
π_löux_èsk
;

2529 
⁄eshŸ_timî
 = 
O√ShŸ
 ? 1 : 0;

2530 
⁄eshŸ_ru¬ög
 = 0;

2531 
löux_¸0
 = 0;

2532 
π_löux_èsk
.
ªsq
.
¥ev
 =Ñt_löux_èsk.ªsq.
√xt
 = &rt_linux_task.resq;

2533 
π_löux_èsk
.
ªsq
.
èsk
 = 
NULL
;

2535 
tu√d
.
œãncy
 = 
	`imuldiv
(
L©ícy
,Åu√d.
˝u_‰eq
, 1000000000);

2536 
tu√d
.
kîn_œãncy_busy_Æign_ªt_dñay
 = 
	`imuldiv
(
RTAI_KERN_BUSY_ALIGN_RET_DELAY
,Åu√d.
˝u_‰eq
, 1000000000);

2537 
tu√d
.
u£r_œãncy_busy_Æign_ªt_dñay
 = 
	`imuldiv
(
RTAI_USER_BUSY_ALIGN_RET_DELAY
,Åu√d.
˝u_‰eq
, 1000000000);

2538 
SëupTimeTIMER
 = 
	`πai_ˇlibøã_h¨d_timî
();

2539 
tu√d
.
£tup_time_TIMER_UNIT
 = 
	`imuldiv
(
SëupTimeTIMER
, 
TIMER_FREQ
, 1000000000);

2540 i‡(
tu√d
.
£tup_time_TIMER_UNIT
 < 1) {

2541 
tu√d
.
£tup_time_TIMER_UNIT
 = 1;

2542 
tu√d
.
£tup_time_TIMER_CPUNIT
 = (tu√d.
˝u_‰eq
 + 
TIMER_FREQ
/2)/TIMER_FREQ;

2544 
tu√d
.
£tup_time_TIMER_CPUNIT
 = 
	`imuldiv
(
SëupTimeTIMER
,Åu√d.
˝u_‰eq
, 1000000000);

2546 i‡(
tu√d
.
œãncy
 <Åu√d.
£tup_time_TIMER_CPUNIT
) {

2547 
tu√d
.
œãncy
 =Åu√d.
£tup_time_TIMER_CPUNIT
;

2549 
tu√d
.
timîs_tﬁ
[0] = 0;

2550 
⁄eshŸ_•™
 = 
ONESHOT_SPAN
;

2551 
ßtdœy
 = 
⁄eshŸ_•™
 - 
tu√d
.
œãncy
;

2552 #ifde‡
CONFIG_PROC_FS


2553 i‡(
	`πai_¥oc_sched_ªgi°î
()) {

2554 
ªtvÆ
 = 1;

2555 
mem_íd
;

2560 i‡((
‰°k_§q
.
§q
 = 
	`π_ªque°_§q
(0x7dd763ad, 
‰°k_§q_h™dÀr
, 0)) < 0) {

2561 
	`¥ötk
("MEM SRQ:Ço sysrqávailable.\n");

2562 
ªtvÆ
 = 
‰°k_§q
.
§q
;

2563 
¥oc_uƒegi°î
;

2566 
‰°k_§q
.
ö
 = fr°k_§q.
out
 = 0;

2567 i‡((
ªtvÆ
 = 
	`π_ªque°_sched_ùi
()) != 0)

2568 
‰ì_§q
;

2570 i‡((
ªtvÆ
 = 
	`lxπ_öô
()) != 0)

2571 
‰ì_sched_ùi
;

2573 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


2574 
πai_i§_sched
 = 
πai_i§_sched_h™dÀ
;

2577 
	`ªgi°î_ªboŸ_nŸifõr
(&
lxπ_ªboŸ_nŸifõr
);

2579 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


2580 
	`¥ötk
(", <uses LINUX SYSCALLs>");

2582 #ifde‡
CONFIG_RTAI_MALLOC


2583 
	`¥ötk
(", k°ack†poﬁ sizê%d byãs", 
πai_k°ack_hóp_size
);

2585 
	`¥ötk
(".\n");

2586 
	`¥ötk
(
KERN_INFO
 "RTAI[sched]: h¨dÅimîÅy≥/‰eq = %s/%d(Hz); deÁu…Åimög: %s; ", 
TIMER_NAME
, ()
TIMER_FREQ
, 
O√ShŸ
 ? "oneshot" : "periodic");

2587 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


2588 
	`¥ötk
("black/redÅimedÜists.\n");

2590 
	`¥ötk
("linearÅimedÜists.\n");

2592 
	`¥ötk
(
KERN_INFO
 "RTAI[sched]: LöuxÅimî fªq = %d (Hz), TimeBa£ fªq = %lu hz.\n", 
HZ
, ()
tu√d
.
˝u_‰eq
);

2593 
	`¥ötk
(
KERN_INFO
 "RTAI[sched]:Åimî sëu∞%dÇs,ÑeschedÜ©ícy = %dÇs.\n", ()
	`imuldiv
(
tu√d
.
£tup_time_TIMER_CPUNIT
, 1000000000,Åu√d.
˝u_‰eq
), ()imuldiv—u√d.
œãncy
 -Åuned.setup_time_TIMER_CPUNIT, 1000000000,Åuned.cpu_freq));

2595 #ifde‡
DECLR_8254_TSC_EMULATION


2596 
SETUP_8254_TSC_EMULATION
;

2599 
ªtvÆ
 = 
	`πai_öô_„©uªs
();

2601 
exô
:

2602 #i‡
	`deföed
(
CONFIG_GENERIC_CLOCKEVENTS
Ë&& 
CONFIG_RTAI_RTC_FREQ
 == 0

2603 
π_löux_hπ_£t_mode
 = 
_π_löux_hπ_£t_mode
;

2604 
π_löux_hπ_√xt_shŸ
 = 
_π_löux_hπ_√xt_shŸ
;

2606  
ªtvÆ
;

2607 
‰ì_sched_ùi
:

2608 
	`π_‰ì_sched_ùi
();

2609 
‰ì_§q
:

2610 
	`π_‰ì_§q
(
‰°k_§q
.
§q
);

2611 
¥oc_uƒegi°î
:

2612 #ifde‡
CONFIG_PROC_FS


2613 
	`πai_¥oc_sched_uƒegi°î
();

2615 
mem_íd
:

2616 
	`sched_mem_íd
();

2617 #ifde‡
CONFIG_RTAI_MALLOC


2618 
	`πhóp_de°roy
(&
πai_k°ack_hóp
, 
GFP_KERNEL
);

2620 
	`π_ªgi°ry_‰ì
();

2621 
exô
;

2622 
	}
}

2624 
	$__πai_lxπ_exô
()

2626 
	`uƒegi°î_ªboŸ_nŸifõr
(&
lxπ_ªboŸ_nŸifõr
);

2628 #i‡
	`deföed
(
CONFIG_GENERIC_CLOCKEVENTS
Ë&& 
CONFIG_RTAI_RTC_FREQ
 == 0

2629 
π_löux_hπ_£t_mode
 = 
NULL
;

2630 
π_löux_hπ_√xt_shŸ
 = 
NULL
;

2633 
	`lxπ_kûœŒ
();

2635 
	`kπai_obje˘s_ªÀa£
();

2637 
	`lxπ_exô
();

2639 
	`πai_˛ónup_„©uªs
();

2641 #ifde‡
CONFIG_PROC_FS


2642 
	`πai_¥oc_sched_uƒegi°î
();

2644 
‰°k_§q
.
out
 !‰°k_§q.
ö
);

2645 i‡(
	`π_‰ì_§q
(
‰°k_§q
.
§q
) < 0) {

2646 
	`¥ötk
("MEM SRQ: fr°k_§q %d iŒegÆ o∏Æªady fªe.\n", 
‰°k_§q
.
§q
);

2648 
	`π_‰ì_sched_ùi
();

2649 
	`sched_mem_íd
();

2650 #ifde‡
CONFIG_RTAI_MALLOC


2651 
	`πhóp_de°roy
(&
πai_k°ack_hóp
, 
GFP_KERNEL
);

2653 
	`π_ªgi°ry_‰ì
();

2654 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

2655 
	`scheduÀ_timeout
(
HZ
/10);

2656 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


2657 
πai_i§_sched
 = 
NULL
;

2660 #ifde‡
DECLR_8254_TSC_EMULATION


2661 
CLEAR_8254_TSC_EMULATION
;

2664 #ifde‡
IPIPE_NOSTACK_FLAG


2665 
	`ùùe_˛ór_f‹eign_°ack
(&
πai_domaö
);

2668 
	`¥ötk
(
KERN_INFO
 "RTAI[sched]: u∆ﬂded (f‹˚d h¨d/so·/h¨dÅønsôi⁄s:Åøp†%lu, sysˇŒ†%lu).\n", 
å≠å™s
, 
sy°øns
);

2669 
	}
}

2671 
moduÀ_öô
(
__πai_lxπ_öô
);

2672 
moduÀ_exô
(
__πai_lxπ_exô
);

2674 #i‚de‡
CONFIG_KBUILD


2675 
	#CONFIG_KBUILD


	)

2678 #ifde‡
CONFIG_KBUILD


2680 
MODULE_ALIAS
("rtai_up");

2681 
MODULE_ALIAS
("rtai_mup");

2682 
MODULE_ALIAS
("rtai_smp");

2683 
MODULE_ALIAS
("rtai_ksched");

2684 
MODULE_ALIAS
("rtai_lxrt");

2686 
EXPORT_SYMBOL
(
π_fun_lxπ
);

2687 
EXPORT_SYMBOL
(
˛r_πext
);

2688 
EXPORT_SYMBOL
(
£t_πext
);

2689 
EXPORT_SYMBOL
(
gë_mö_èsks_˝uid
);

2690 
EXPORT_SYMBOL
(
put_cuºít_⁄_˝u
);

2691 
EXPORT_SYMBOL
(
π_scheduÀ_so·
);

2692 
EXPORT_SYMBOL
(
π_do_f‹˚_so·
);

2693 
EXPORT_SYMBOL
(
π_scheduÀ_so·_èû
);

2694 
EXPORT_SYMBOL
(
π_sched_timed
);

2695 #i‡
CONFIG_RTAI_MONITOR_EXECTIME


2696 
EXPORT_SYMBOL
(
swôch_time
);

2698 
EXPORT_SYMBOL
(
lxπ_¥ev_èsk
);

	@/usr/src/rtai/base/sched/signal.c

20 
	~<löux/kî√l.h
>

21 
	~<löux/moduÀ.h
>

23 
	~<πai_schedc‹e.h
>

24 
	~<πai_sig«l.h
>

25 
	~<πai_mq.h
>

27 
MODULE_LICENSE
("GPL");

28 
	#MODULE_NAME
 "RTAI_SIGNALS"

	)

30 
	#RT_SIGNALS
 ((
π_sig«l_t
 *)
èsk
->
π_sig«ls
)

	)

32 
RTAI_SYSCALL_MODE
 
	$π_ªque°_sig«l_
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
, 
sig«l
)

34 
ªtvÆ
;

35 i‡(
sig«l
 >0 && 
sigèsk
 && 
èsk
) {

36 i‡(!
èsk
->
π_sig«ls
) {

37 i‡((
èsk
->
π_sig«ls
 = 
	`π_mÆloc
((
MAXSIGNALS
 + 
MAX_PQUEUES
)*(
π_sig«l_t
)))) {

38 
	`mem£t
(
èsk
->
π_sig«ls
, 0, ((
MAXSIGNALS
 + 
MAX_PQUEUES
)*(
π_sig«l_t
)));

39 
èsk
->
p°©e
 = 0;

41 
ªtvÆ
 = -
ENOMEM
;

42 
ªt
;

45 
RT_SIGNALS
[
sig«l
].
Êags
 = (1 << 
SIGNAL_ENBIT
);

46 
sigèsk
->
π_sig«ls
 = (*)1;

47 
RT_SIGNALS
[
sig«l
].
sigèsk
 = sigtask;

48 
ªtvÆ
 = 0;

50 
ªtvÆ
 = -
EINVAL
;

52 
ªt
:

53 
èsk
->
ªtvÆ
 =Ñetval;

54 
	`π_èsk_ªsume
(
èsk
);

55  
ªtvÆ
;

56 
	}
}

57 
EXPORT_SYMBOL
(
π_ªque°_sig«l_
);

59 
ölöe
 
	$π_exec_sig«l
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
)

61 
Êags
;

63 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

64 i‡(
sigèsk
->
su•dïth
 > 0 && !(--sigtask->suspdepth)) {

65 i‡(
èsk
) {

66 
sigèsk
->
¥i‹ôy
 = 
èsk
->priority;

67 i‡(!
èsk
->
p°©e
++) {

68 
	`ªm_ªady_èsk
(
èsk
);

69 
èsk
->
°©e
 |
RT_SCHED_SIGSUSP
;

72 
sigèsk
->
°©e
 &~
RT_SCHED_SIGSUSP
;

73 
sigèsk
->
ªtvÆ
 = ()
èsk
;

74 
	`íq_ªady_èsk
(
sigèsk
);

75 
	`RT_SCHEDULE
(
sigèsk
, 
	`πai_˝uid
());

77 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

78 
	}
}

95 
RTAI_SYSCALL_MODE
 
	$π_ªÀa£_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
)

97 i‡(
èsk
 =
NULL
) {

98 
èsk
 = 
RT_CURRENT
;

100 i‡(
sig«l
 >0 && 
RT_SIGNALS
 && RT_SIGNALS[sig«l].
sigèsk
) {

101 
RT_SIGNALS
[
sig«l
].
sigèsk
->
¥i‹ôy
 = 
èsk
->priority;

102 
RT_SIGNALS
[
sig«l
].
sigèsk
->
π_sig«ls
 = 
NULL
;

103 
	`π_exec_sig«l
(
RT_SIGNALS
[
sig«l
].
sigèsk
, 0);

104 
RT_SIGNALS
[
sig«l
].
sigèsk
 = 
NULL
;

107  -
EINVAL
;

108 
	}
}

109 
EXPORT_SYMBOL
(
π_ªÀa£_sig«l
);

125 
RTAI_SYSCALL_MODE
 
	$π_åiggî_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
)

127 i‡(
èsk
 =
NULL
) {

128 
èsk
 = 
RT_CURRENT
;

130 i‡(
sig«l
 >0 && 
RT_SIGNALS
 && RT_SIGNALS[sig«l].
sigèsk
) {

132 i‡(
	`ã°_™d_˛ór_bô
(
SIGNAL_ENBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
)) {

133 
	`π_exec_sig«l
(
RT_SIGNALS
[
sig«l
].
sigèsk
, 
èsk
);

134 
	`ã°_™d_£t_bô
(
SIGNAL_ENBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
);

136 
	`ã°_™d_£t_bô
(
SIGNAL_PNDBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
);

139 } 
	`ã°_™d_˛ór_bô
(
SIGNAL_PNDBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
));

141 
	}
}

142 
EXPORT_SYMBOL
(
π_åiggî_sig«l
);

156 
RTAI_SYSCALL_MODE
 
	$π_íabÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
)

158 i‡(
èsk
 =
NULL
) {

159 
èsk
 = 
RT_CURRENT
;

161 i‡(
sig«l
 >0 && 
RT_SIGNALS
) {

162 
	`£t_bô
(
SIGNAL_ENBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
);

164 
	}
}

165 
EXPORT_SYMBOL
(
π_íabÀ_sig«l
);

179 
RTAI_SYSCALL_MODE
 
	$π_dißbÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
)

181 i‡(
èsk
 =
NULL
) {

182 
èsk
 = 
RT_CURRENT
;

184 i‡(
sig«l
 >0 && 
RT_SIGNALS
) {

185 
	`˛ór_bô
(
SIGNAL_ENBIT
, &
RT_SIGNALS
[
sig«l
].
Êags
);

187 
	}
}

188 
EXPORT_SYMBOL
(
π_dißbÀ_sig«l
);

190 
RTAI_SYSCALL_MODE
 
	$π_sig«l_hñ≥r
(
RT_TASK
 *
èsk
)

192 i‡(
èsk
) {

193 
	`π_èsk_su•íd
(
èsk
);

194  
èsk
->
ªtvÆ
;

196  (
RT_CURRENT
)->
ru¬abÀ_⁄_˝us
;

197 
	}
}

199 
RTAI_SYSCALL_MODE
 
	$π_waô_sig«l
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
)

201 
Êags
;

203 i‡(
sigèsk
->
π_sig«ls
 !
NULL
) {

204 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

205 i‡(!
sigèsk
->
su•dïth
++) {

206 
sigèsk
->
°©e
 |
RT_SCHED_SIGSUSP
;

207 
	`ªm_ªady_cuºít
(
sigèsk
);

208 i‡(
èsk
->
p°©e
 > 0 && !(--èsk->p°©eË&& (èsk->
°©e
 &~
RT_SCHED_SIGSUSP
Ë=
RT_SCHED_READY
) {

209 
	`íq_ªady_èsk
(
èsk
);

211 
	`π_scheduÀ
();

213 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

214  
sigèsk
->
ªtvÆ
;

217 
	}
}

218 
EXPORT_SYMBOL
(
π_waô_sig«l
);

220 
	$sig«l_su¥t_fun
(
¨gs
)

222 
sigsu¥t_t
 
¨g
 = *((sigsu¥t_à*)
¨gs
);

224 i‡(!
	`π_ªque°_sig«l_
(
¨g
.
sigèsk
,árg.
èsk
,árg.
sig«l
)) {

225 
	`π_waô_sig«l
(
¨g
.
sigèsk
,árg.
èsk
)) {

226 
¨g
.
	`sighdl
◊rg.
sig«l
,árg.
èsk
);

229 
	`π_‰ì
(
¨g
.
sigèsk
);

230 
	}
}

251 
π_ªque°_sig«l
(
sig«l
, (*
sighdl
)(, 
RT_TASK
 *))

253 
sigsu¥t_t
 
¨g
 = { 
NULL
, 
RT_CURRENT
, 
sig«l
, 
sighdl
 };

254 i‡(
sig«l
 >0 && 
sighdl
 && (
¨g
.
sigèsk
 = 
	`π_mÆloc
((
RT_TASK
)))) {

255 i‡(!
	`π_èsk_öô_˝uid
(
¨g
.
sigèsk
, 
sig«l_su¥t_fun
, ()&¨g, 
SIGNAL_TASK_STACK_SIZE
,árg.
èsk
->
¥i‹ôy
, 0, 
NULL
,árg.èsk->
ru¬abÀ_⁄_˝us
)) {

256 
	`π_èsk_ªsume
(
¨g
.
sigèsk
);

257 
	`π_èsk_su•íd
(
¨g
.
èsk
);

258  
¨g
.
èsk
->
ªtvÆ
;

260 
	`π_‰ì
(
¨g
.
sigèsk
);

262  -
EINVAL
;

263 
	}
}

264 
EXPORT_SYMBOL
(
π_ªque°_sig«l
);

	@/usr/src/rtai/base/sched/sys.c

26 
	~<löux/moduÀ.h
>

27 
	~<löux/kî√l.h
>

28 
	~<löux/vîsi⁄.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/uni°d.h
>

32 
	~<löux/mm™.h
>

33 
	~<löux/sched.h
>

34 
	~<löux/dñay.h
>

35 
	~<asm/uac˚ss.h
>

37 
	~<πai_sched.h
>

38 
	~<πai_lxπ.h
>

39 
	~<πai_£m.h
>

40 
	~<πai_mbx.h
>

41 
	~<πai_rwl.h
>

42 
	~<πai_•l.h
>

44 
	~<asm/πai_Âu.h
>

45 
	~<πai_ªgi°ry.h
>

46 
	~<πai_¥oxõs.h
>

47 
	~<πai_msg.h
>

48 
	~<πai_schedc‹e.h
>

50 
	#MAX_FUN_EXT
 16

	)

51 
π_fun_íåy
 *
	gπ_fun_ext
[
MAX_FUN_EXT
];

52 
EXPORT_SYMBOL
(
π_fun_ext
);

57 
	#USRLAND_MAX_MSG_SIZE
 128

58 

	)

59 
gë_mö_èsks_˝uid
();

61 
£t_πext
(
RT_TASK
 *
èsk
,

62 
¥i‹ôy
,

63 
u£s_Âu
,

64 (*
sig«l
)(),

65 
˝uid
,

66 
èsk_°ru˘
 *
ªlök
);

68 
	`˛r_πext
(
RT_TASK
 *
èsk
);

70 
	`°ól_‰om_löux
(
RT_TASK
 *
èsk
);

72 
	`give_back_to_löux
(
RT_TASK
 *
èsk
, );

74 
	`π_scheduÀ_so·
(
RT_TASK
 *
èsk
);

76 *
	`π_gë_lxπ_fun_íåy
(
ödex
);

78 
ölöe
 
	$lxπ_ty≥d_£m_öô
(
SEM
 *
£m
, 
cou¡
, 
ty≥
)

80 ((
RTAI_SYSCALL_MODE
 (*)(
SEM
 *, ...))
	`π_gë_lxπ_fun_íåy
(
TYPED_SEM_INIT
))(
£m
, 
cou¡
, 
ty≥
);

81 
	}
}

83 
ölöe
 
	$lxπ_ty≥d_mbx_öô
(
MBX
 *
mbx
, 
bufsize
, 
ty≥
)

85  ((
RTAI_SYSCALL_MODE
 (*)(
MBX
 *, ...))
	`π_gë_lxπ_fun_íåy
(
TYPED_MBX_INIT
))(
mbx
, 
bufsize
, 
ty≥
);

86 
	}
}

88 
ölöe
 
	$lxπ_ty≥d_rwl_öô
(
RWL
 *
rwl
, 
ty≥
)

90  ((
RTAI_SYSCALL_MODE
 (*)(
RWL
 *, ...))
	`π_gë_lxπ_fun_íåy
(
RWL_INIT
))(
rwl
, 
ty≥
);

91 
	}
}

93 
ölöe
 
	$lxπ_•l_öô
(
SPL
 *
•l
)

95  ((
RTAI_SYSCALL_MODE
 (*)(
SPL
 *, ...))
	`π_gë_lxπ_fun_íåy
(
SPL_INIT
))(
•l
);

96 
	}
}

98 
ölöe
 
	$lxπ_Proxy_dëach
(
pid_t
 
pid
)

100  ((
RTAI_SYSCALL_MODE
 (*)(, ...))
	`π_gë_lxπ_fun_íåy
(
PROXY_DETACH
))(
pid
);

101 
	}
}

103 
ölöe
 
	$GENERIC_DELETE
(
ödex
, *
obje˘
)

105  ((
RTAI_SYSCALL_MODE
 (*)(*, ...))
	`π_gë_lxπ_fun_íåy
(
ödex
))(
obje˘
);

106 
	}
}

108 
	#lxπ_£m_dñëe
(
£m
Ë
	`GENERIC_DELETE
(
SEM_DELETE
, sem)

	)

109 
	#lxπ_«med_£m_dñëe
(
£m
Ë
	`GENERIC_DELETE
(
NAMED_SEM_DELETE
, sem)

	)

110 
	#lxπ_rwl_dñëe
(
rwl
Ë
	`GENERIC_DELETE
(
RWL_DELETE
,Ñwl)

	)

111 
	#lxπ_«med_rwl_dñëe
(
rwl
Ë
	`GENERIC_DELETE
(
NAMED_RWL_DELETE
,Ñwl)

	)

112 
	#lxπ_•l_dñëe
(
•l
Ë
	`GENERIC_DELETE
(
SPL_DELETE
, s∂)

	)

113 
	#lxπ_«med_•l_dñëe
(
•l
Ë
	`GENERIC_DELETE
(
NAMED_SPL_DELETE
, s∂)

	)

114 
	#lxπ_mbx_dñëe
(
mbx
Ë
	`GENERIC_DELETE
(
MBX_DELETE
, mbx)

	)

115 
	#lxπ_«med_mbx_dñëe
(
mbx
Ë
	`GENERIC_DELETE
(
NAMED_MBX_DELETE
, mbx)

	)

117 
π_scheduÀ_so·_èû
(
RT_TASK
 *, );

118 
ölöe
 
	$lxπ_fun_ˇŒ
(
RT_TASK
 *
èsk
, *
fun
, 
«rg
, *
¨g
)

120 i‡(
	`likñy
(
èsk
->
is_h¨d
 > 0)) {

121 
èsk
->
ªtvÆ
 = ((
RTAI_SYSCALL_MODE
 (*)(, ...))
fun
)(
RTAI_FUN_ARGS
);

122 i‡(
	`u∆ikñy
(!
èsk
->
is_h¨d
)) {

123 
	`π_scheduÀ_so·_èû
(
èsk
,Åask->
ru¬abÀ_⁄_˝us
);

126 
fun_¨gs
 *
fu«rg
;

127 
	`mem˝y
(
fu«rg
 = (*)
èsk
->
fun_¨gs
, 
¨g
, 
«rg
);

128 
fu«rg
->
fun
 = fun;

129 
	`π_scheduÀ_so·
(
èsk
);

131 
	}
}

133 
ölöe
 
	$lxπ_fun_ˇŒ_wbuf
(
RT_TASK
 *
π_èsk
, *
fun
, 
«rg
, *
¨g
, 
ty≥
)

135 
rsize
, 
r2size
, 
wsize
, 
w2size
, 
msg_size
;

136 *
wmsg_adr
, *
w2msg_adr
, *
fun_¨gs
;

138 
rsize
 = 
r2size
 = 
wsize
 = 
w2size
 = 0 ;

139 
wmsg_adr
 = 
w2msg_adr
 = 
NULL
;

140 
fun_¨gs
 = 
¨g
 - 1;

141 i‡(
	`NEED_TO_R
(
ty≥
)) {

142 
rsize
 = 
	`USP_RSZ1
(
ty≥
);

143 
rsize
 =Ñsizê? 
fun_¨gs
[rsize] : ();

144 i‡(
	`NEED_TO_R2ND
(
ty≥
)) {

145 
r2size
 = 
	`USP_RSZ2
(
ty≥
);

146 
r2size
 =Ñ2sizê? 
fun_¨gs
[r2size] : ();

149 i‡(
	`NEED_TO_W
(
ty≥
)) {

150 
wsize
 = 
	`USP_WSZ1
(
ty≥
);

151 
wsize
 = wsizê? 
fun_¨gs
[wsize] : ();

152 i‡(
	`NEED_TO_W2ND
(
ty≥
)) {

153 
w2size
 = 
	`USP_WSZ2
(
ty≥
);

154 
w2size
 = w2sizê? 
fun_¨gs
[w2size] : ();

157 i‡((
msg_size
 = 
rsize
 > 
wsize
 ?Ñsize : wsize) > 0) {

158 i‡(
msg_size
 > 
π_èsk
->
max_msg_size
[0]) {

159 
	`π_‰ì
(
π_èsk
->
msg_buf
[0]);

160 
π_èsk
->
max_msg_size
[0] = (
msg_size
 << 7)/100;

161 
π_èsk
->
msg_buf
[0] = 
	`π_mÆloc
‘t_èsk->
max_msg_size
[0]);

163 i‡(
rsize
) {

164 *
buf_¨g
 = 
fun_¨gs
 + 
	`USP_RBF1
(
ty≥
);

165 i‡(
buf_¨g
[0]) {

166 
	`π_c›y_‰om_u£r
(
π_èsk
->
msg_buf
[0], (*)
buf_¨g
[0], 
rsize
);

167 
buf_¨g
[0] = ()
π_èsk
->
msg_buf
[0];

170 i‡(
wsize
) {

171 *
buf_¨g
 = 
fun_¨gs
 + 
	`USP_WBF1
(
ty≥
);

172 
wmsg_adr
 = (*)
buf_¨g
[0];

173 
buf_¨g
[0] = ()
π_èsk
->
msg_buf
[0];

176 i‡((
msg_size
 = 
r2size
 > 
w2size
 ?Ñ2size : w2size) > 0) {

177 i‡(
msg_size
 > 
π_èsk
->
max_msg_size
[1]) {

178 
	`π_‰ì
(
π_èsk
->
msg_buf
[1]);

179 
π_èsk
->
max_msg_size
[1] = (
msg_size
 << 7)/100;

180 
π_èsk
->
msg_buf
[1] = 
	`π_mÆloc
‘t_èsk->
max_msg_size
[1]);

182 i‡(
r2size
) {

183 *
buf_¨g
 = 
fun_¨gs
 + 
	`USP_RBF2
(
ty≥
);

184 i‡(
buf_¨g
[0]) {

185 
	`π_c›y_‰om_u£r
(
π_èsk
->
msg_buf
[1], (*)
buf_¨g
[0], 
r2size
);

186 
buf_¨g
[0] = ()
π_èsk
->
msg_buf
[1];

189 i‡(
w2size
) {

190 *
buf_¨g
 = 
fun_¨gs
 + 
	`USP_WBF2
(
ty≥
);

191 
w2msg_adr
 = (*)
buf_¨g
[0];

192 
buf_¨g
[0] = ()
π_èsk
->
msg_buf
[1];

195 
	`lxπ_fun_ˇŒ
(
π_èsk
, 
fun
, 
«rg
, 
¨g
);

196 i‡(
wsize
) {

197 
	`π_c›y_to_u£r
(
wmsg_adr
, 
π_èsk
->
msg_buf
[0], 
wsize
);

198 i‡(
w2size
) {

199 
	`π_c›y_to_u£r
(
w2msg_adr
, 
π_èsk
->
msg_buf
[1], 
w2size
);

202 
	}
}

204 
put_cuºít_⁄_˝u
(
˝uid
);

205 
π_£t_èsk_pid
(
RT_TASK
 *);

207 
ölöe
 
RT_TASK
* 
	$__èsk_öô
(
«me
, 
¥io
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
)

209 *
msg_buf0
, *
msg_buf1
;

210 
RT_TASK
 *
π_èsk
;

212 i‡((
π_èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
))) {

213 i‡(
	`num_⁄löe_˝us
(Ë> 1 && 
˝us_Ælowed
) {

214 
˝us_Ælowed
 = 
	`hweight32
(˝us_ÆlowedË> 1 ? 
	`gë_mö_èsks_˝uid
(Ë: 
	`f‚z
(cpus_allowed);

216 
˝us_Ælowed
 = 
	`πai_˝uid
();

218 
	`put_cuºít_⁄_˝u
(
˝us_Ælowed
);

219  
π_èsk
;

221 i‡(
	`π_gë_adr
(
«me
)) {

224 i‡(
¥io
 > 
RT_SCHED_LOWEST_PRIORITY
) {

225 
¥io
 = 
RT_SCHED_LOWEST_PRIORITY
;

227 i‡(!
max_msg_size
) {

228 
max_msg_size
 = 
USRLAND_MAX_MSG_SIZE
;

230 i‡(!(
msg_buf0
 = 
	`π_mÆloc
(
max_msg_size
))) {

233 i‡(!(
msg_buf1
 = 
	`π_mÆloc
(
max_msg_size
))) {

234 
	`π_‰ì
(
msg_buf0
);

237 
π_èsk
 = 
	`π_mÆloc
((
RT_TASK
Ë+ 3*(
fun_¨gs
));

238 i‡(
π_èsk
) {

239 
π_èsk
->
magic
 = 0;

240 i‡(
	`num_⁄löe_˝us
(Ë> 1 && 
˝us_Ælowed
) {

241 
˝us_Ælowed
 = 
	`hweight32
(˝us_ÆlowedË> 1 ? 
	`gë_mö_èsks_˝uid
(Ë: 
	`f‚z
(cpus_allowed);

243 
˝us_Ælowed
 = 
	`πai_˝uid
();

245 i‡(!
	`£t_πext
(
π_èsk
, 
¥io
, 0, 0, 
˝us_Ælowed
, 0)) {

246 
π_èsk
->
fun_¨gs
 = (*)((fun_args *)(rt_task + 1));

247 
π_èsk
->
msg_buf
[0] = 
msg_buf0
;

248 
π_èsk
->
msg_buf
[1] = 
msg_buf1
;

249 
π_èsk
->
max_msg_size
[0] =

250 
π_èsk
->
max_msg_size
[1] = max_msg_size;

251 i‡(
	`π_ªgi°î
(
«me
, 
π_èsk
, 
IS_TASK
, 0)) {

252 
π_èsk
->
°©e
 = 0;

253 #ifde‡
__IPIPE_FEATURE_ENABLE_NOTIFIER


254 
	`ùùe_íabÀ_nŸifõr
(
cuºít
);

256 
cuºít
->
Êags
 |
PF_EVNOTIFY
;

258 #i‡(
deföed
 
VM_PINNED
Ë&& (deföed 
CONFIG_MMU
)

259 
	`ùùe_dißbÀ_⁄dem™d_m≠pögs
(
cuºít
);

261 
	`RTAI_OOM_DISABLE
();

263 
	`π_£t_èsk_pid
(
π_èsk
);

264  
π_èsk
;

266 
	`˛r_πext
(
π_èsk
);

269 
	`π_‰ì
(
π_èsk
);

271 
	`π_‰ì
(
msg_buf0
);

272 
	`π_‰ì
(
msg_buf1
);

274 
	}
}

276 
	$__èsk_dñëe
(
RT_TASK
 *
π_èsk
)

278 
èsk_°ru˘
 *
 xtsk
;

279 
RT_TASK
 *
£rvî
;

281 i‡(
cuºít
 !(
 xtsk
 = 
π_èsk
->lnxtsk)) {

282  -
EPERM
;

284 
 xtsk
->
	`πai_tskext
(
TSKEXT0
Ë xtsk->πai_tskext(
TSKEXT1
) = 0;

285 i‡(
π_èsk
->
is_h¨d
 > 0) {

286 
	`give_back_to_löux
(
π_èsk
, 0);

288 i‡((
£rvî
 = 
π_èsk
->
löux_sysˇŒ_£rvî
)) {

289 
£rvî
->
su•dïth
 = -
RTE_HIGERR
;

290 
	`π_èsk_masked_unblock
(
£rvî
, ~
RT_SCHED_READY
);

291 
 xtsk
->
°©e
 = 
TASK_INTERRUPTIBLE
;

292 
	`scheduÀ_timeout
(
HZ
/10);

294 i‡(
	`˛r_πext
(
π_èsk
)) {

295  -
EFAULT
;

297 
	`π_‰ì
(
π_èsk
->
msg_buf
[0]);

298 
	`π_‰ì
(
π_èsk
->
msg_buf
[1]);

299 
	`π_‰ì
(
π_èsk
);

300  (!
	`π_drg_⁄_adr
(
π_èsk
)Ë? -
ENODEV
 : 0;

301 
	}
}

304 #ifde‡
ECHO_SYSW


305 
	#SYSW_DIAG_MSG
(
x
Ë
	)
x

307 
	#SYSW_DIAG_MSG
(
x
)

	)

310 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,28)

312 
	~<löux/¸ed.h
>

313 
ölöe
 
	$£t_lxπ_≥rm
(
≥rm
)

315 
¸ed
 *cred;

316 i‡((
¸ed
 = 
	`¥ï¨e_¸eds
())) {

317 
	`ˇp_øi£
(
¸ed
->
ˇp_ef„˘ive
, 
≥rm
);

318 
	`commô_¸eds
(
¸ed
);

320 
	}
}

324 
ölöe
 
	$£t_lxπ_≥rm
(
≥rm
)

326 #ifde‡
cuºít_ˇp


327 
	`ˇp_øi£
(
	`cuºít_ˇp
(), 
≥rm
);

329 
	`ˇp_øi£
(
cuºít
->
ˇp_ef„˘ive
, 
≥rm
);

331 
	}
}

335 
	$π_make_h¨d_ªÆ_time
(
RT_TASK
 *
èsk
)

337 i‡(
èsk
 &&Åask->
magic
 =
RT_TASK_MAGIC
 && !èsk->
is_h¨d
) {

338 
	`°ól_‰om_löux
(
èsk
);

340 
	}
}

341 
EXPORT_SYMBOL
(
π_make_h¨d_ªÆ_time
);

343 
	$π_make_so·_ªÆ_time
(
RT_TASK
 *
èsk
)

345 i‡(
èsk
 &&Åask->
magic
 =
RT_TASK_MAGIC
 &&Åask->
is_h¨d
) {

346 i‡(
èsk
->
is_h¨d
 > 0) {

347 
	`give_back_to_löux
(
èsk
, 0);

349 
èsk
->
is_h¨d
 = 0;

352 
	}
}

353 
EXPORT_SYMBOL
(
π_make_so·_ªÆ_time
);

355 
kî√l_ˇlibøt‹_•v
(
≥riod
, 
lo›s
, 
RT_TASK
 *
èsk
);

357 
ölöe
 
	$h™dÀ_lxπ_ªque°
 (
lx§q
, *
¨g
, 
RT_TASK
 *
èsk
)

359 
	#œrg
 ((
¨g
 *Ôrg)

	)

361 uni⁄ {
«me
; 
RT_TASK
 *
π_èsk
; 
SEM
 *
£m
; 
MBX
 *
mbx
; 
RWL
 *
rwl
; 
SPL
 *
•l
; 
i
; *
p
; 
Œ
; } 
¨g0
;

362 
§q
;

364 i‡(
	`likñy
((
§q
 = 
	`SRQ
(
lx§q
)Ë< 
MAX_LXRT_FUN
)) {

365 
ty≥
;

366 
π_fun_íåy
 *
funcm
;

373 i‡(
	`u∆ikñy
(!(
funcm
 = 
π_fun_ext
[
	`INDX
(
lx§q
)]))) {

374 
	`π_¥ötk
("BAD:ÇuŒÑt_fun_ext,ÇÿmoduÀ f‹Éxãnsi⁄ %d?\n", 
	`INDX
(
lx§q
));

375  -
ENOSYS
;

377 i‡(!(
ty≥
 = 
funcm
[
§q
].type)) {

378  ((
RTAI_SYSCALL_MODE
 (*)(, ...))
funcm
[
§q
].
fun
)(
RTAI_FUN_ARGS
);

380 i‡(
	`u∆ikñy
(
	`NEED_TO_RW
(
ty≥
))) {

381 
	`lxπ_fun_ˇŒ_wbuf
(
èsk
, 
funcm
[
§q
].
fun
, 
	`LXRT_NARG
(
lx§q
), 
¨g
, 
ty≥
);

383 
	`lxπ_fun_ˇŒ
(
èsk
, 
funcm
[
§q
].
fun
, 
	`LXRT_NARG
(
lx§q
), 
¨g
);

385  
èsk
->
ªtvÆ
;

388 
¨g0
.
«me
 = 
¨g
[0];

389 
§q
) {

390 
LXRT_GET_ADR
: {

391 
¨g0
.
p
 = 
	`π_gë_adr
◊rg0.
«me
);

392  
¨g0
.
Œ
;

395 
LXRT_GET_NAME
: {

396 
¨g0
.
«me
 = 
	`π_gë_«me
◊rg0.
p
);

397  
¨g0
.
Œ
;

400 
LXRT_TASK_INIT
: {

401 
	s¨g
 { 
«me
; 
¥io
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
; };

402 
¨g0
.
π_èsk
 = 
	`__èsk_öô
◊rg0.
«me
, 
œrg
->
¥io
,Ü¨g->
°ack_size
,Ü¨g->
max_msg_size
,Ü¨g->
˝us_Ælowed
);

403  
¨g0
.
Œ
;

406 
LXRT_TASK_DELETE
: {

407 
¨g0
.
i
 = 
	`__èsk_dñëe
◊rg0.
π_èsk
 ?árg0.π_èsk : 
èsk
);

408  
¨g0
.
Œ
;

411 
LXRT_SEM_INIT
: {

412 i‡(
	`π_gë_adr
(
¨g0
.
«me
)) {

415 i‡((
¨g0
.
£m
 = 
	`π_mÆloc
((
SEM
)))) {

416 
	s¨g
 { 
«me
; 
˙t
; 
typ
; };

417 
	`lxπ_ty≥d_£m_öô
(
¨g0
.
£m
, 
œrg
->
˙t
,Ü¨g->
typ
);

418 i‡(
	`π_ªgi°î
(
œrg
->
«me
, 
¨g0
.
£m
, 
IS_SEM
, 
cuºít
)) {

419  
¨g0
.
Œ
;

421 
	`π_‰ì
(
¨g0
.
£m
);

427 
LXRT_SEM_DELETE
: {

428 i‡(
	`lxπ_£m_dñëe
(
¨g0
.
£m
)) {

429 
¨g0
.
i
 = -
EFAULT
;

430  
¨g0
.
Œ
;

432 
	`π_‰ì
(
¨g0
.
£m
);

433 
¨g0
.
i
 = 
	`π_drg_⁄_adr
◊rg0.
£m
);

434  
¨g0
.
Œ
;

437 
LXRT_MBX_INIT
: {

438 i‡(
	`π_gë_adr
(
¨g0
.
«me
)) {

441 i‡((
¨g0
.
mbx
 = 
	`π_mÆloc
((
MBX
)))) {

442 
	s¨g
 { 
«me
; 
size
; 
qty≥
; };

443 i‡(
	`lxπ_ty≥d_mbx_öô
(
¨g0
.
mbx
, 
œrg
->
size
,Ü¨g->
qty≥
) < 0) {

444 
	`π_‰ì
(
¨g0
.
mbx
);

447 i‡(
	`π_ªgi°î
(
œrg
->
«me
, 
¨g0
.
mbx
, 
IS_MBX
, 
cuºít
)) {

448  
¨g0
.
Œ
;

450 
	`π_‰ì
(
¨g0
.
mbx
);

456 
LXRT_MBX_DELETE
: {

457 i‡(
	`lxπ_mbx_dñëe
(
¨g0
.
mbx
)) {

458 
¨g0
.
i
 = -
EFAULT
;

459  
¨g0
.
Œ
;

461 
	`π_‰ì
(
¨g0
.
mbx
);

462 
¨g0
.
i
 = 
	`π_drg_⁄_adr
◊rg0.
mbx
);

463  
¨g0
.
Œ
;

466 
LXRT_RWL_INIT
: {

467 i‡(
	`π_gë_adr
(
¨g0
.
«me
)) {

470 i‡((
¨g0
.
rwl
 = 
	`π_mÆloc
((
RWL
)))) {

471 
	s¨g
 { 
«me
; 
ty≥
; };

472 
	`lxπ_ty≥d_rwl_öô
(
¨g0
.
rwl
, 
œrg
->
ty≥
);

473 i‡(
	`π_ªgi°î
(
œrg
->
«me
, 
¨g0
.
rwl
, 
IS_SEM
, 
cuºít
)) {

474  
¨g0
.
Œ
;

476 
	`π_‰ì
(
¨g0
.
rwl
);

482 
LXRT_RWL_DELETE
: {

483 i‡(
	`lxπ_rwl_dñëe
(
¨g0
.
rwl
)) {

484 
¨g0
.
i
 = -
EFAULT
;

485  
¨g0
.
Œ
;

487 
	`π_‰ì
(
¨g0
.
rwl
);

488 
¨g0
.
i
 = 
	`π_drg_⁄_adr
◊rg0.
rwl
);

489  
¨g0
.
Œ
;

492 
LXRT_SPL_INIT
: {

493 i‡(
	`π_gë_adr
(
¨g0
.
«me
)) {

496 i‡((
¨g0
.
•l
 = 
	`π_mÆloc
((
SPL
)))) {

497 
	s¨g
 { 
«me
; };

498 
	`lxπ_•l_öô
(
¨g0
.
•l
);

499 i‡(
	`π_ªgi°î
(
œrg
->
«me
, 
¨g0
.
•l
, 
IS_SEM
, 
cuºít
)) {

500  
¨g0
.
Œ
;

502 
	`π_‰ì
(
¨g0
.
•l
);

508 
LXRT_SPL_DELETE
: {

509 i‡(
	`lxπ_•l_dñëe
(
¨g0
.
•l
)) {

510 
¨g0
.
i
 = -
EFAULT
;

511  
¨g0
.
Œ
;

513 
	`π_‰ì
(
¨g0
.
•l
);

514 
¨g0
.
i
 = 
	`π_drg_⁄_adr
◊rg0.
•l
);

515  
¨g0
.
Œ
;

518 
MAKE_HARD_RT
: {

519 
	`π_make_h¨d_ªÆ_time
(
èsk
);

521 i‡(!
èsk
 ||Åask->
is_h¨d
) {

524 
	`°ól_‰om_löux
(
èsk
);

528 
MAKE_SOFT_RT
: {

529 
	`π_make_so·_ªÆ_time
(
èsk
);

531 i‡(!
èsk
 || !èsk->
is_h¨d
) {

534 i‡(
èsk
->
is_h¨d
 < 0) {

535 
èsk
->
is_h¨d
 = 0;

537 
	`give_back_to_löux
(
èsk
, 0);

541 
PRINT_TO_SCREEN
: {

542 
	s¨g
 { *
di•œy
; 
nch
; };

543 
¨g0
.
i
 = 
	`πai_¥öt_to_s¸ìn
("%s", 
œrg
->
di•œy
);

544  
¨g0
.
Œ
;

547 
PRINTK
: {

548 
	s¨g
 { *
di•œy
; 
nch
; };

549 
¨g0
.
i
 = 
	`π_¥ötk
("%s", 
œrg
->
di•œy
);

550  
¨g0
.
Œ
;

553 
NONROOT_HRT
: {

554 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

555 
cuºít
->
ˇp_ef„˘ive
 |((1 << 
CAP_IPC_LOCK
) |

556 (1 << 
CAP_SYS_RAWIO
) |

557 (1 << 
CAP_SYS_NICE
));

559 
	`£t_lxπ_≥rm
(
CAP_IPC_LOCK
);

560 
	`£t_lxπ_≥rm
(
CAP_SYS_RAWIO
);

561 
	`£t_lxπ_≥rm
(
CAP_SYS_NICE
);

566 
RT_BUDDY
: {

567 
¨g0
.
π_èsk
 = 
èsk
 && 
cuºít
->
	`πai_tskext
(
TSKEXT1
Ë=cuºíà?Åask : 
NULL
;

568  
¨g0
.
Œ
;

571 
HRT_USE_FPU
: {

572 
	s¨g
 { 
RT_TASK
 *
èsk
; 
u£_Âu
; };

573 if(!
œrg
->
u£_Âu
) {

574 
	`˛ór_ xtsk_u£s_Âu
((
œrg
->
èsk
)->
 xtsk
);

576 
	`öô_Âu
((
œrg
->
èsk
)->
 xtsk
);

581 
GET_USP_FLAGS
: {

582 
¨g0
.
«me
 =árg0.
π_èsk
->
u•_Êags
;

583  
¨g0
.
Œ
;

585 
SET_USP_FLAGS
: {

586 
	s¨g
 { 
RT_TASK
 *
èsk
; 
Êags
; };

587 
¨g0
.
π_èsk
->
u•_Êags
 = 
œrg
->
Êags
;

588 
¨g0
.
π_èsk
->
f‹˚_so·
 = (¨g0.π_èsk->
is_h¨d
 > 0Ë&& (
œrg
->
Êags
 &árg0.π_èsk->
u•_Êags_mask
 & 
FORCE_SOFT
);

592 
GET_USP_FLG_MSK
: {

593 
¨g0
.
«me
 =árg0.
π_èsk
->
u•_Êags_mask
;

594  
¨g0
.
Œ
;

597 
SET_USP_FLG_MSK
: {

598 
èsk
->
u•_Êags_mask
 = 
¨g0
.
«me
;

599 
èsk
->
f‹˚_so·
 = (èsk->
is_h¨d
 > 0Ë&& (èsk->
u•_Êags
 & 
¨g0
.
«me
 & 
FORCE_SOFT
);

603 
HARD_SOFT_TOGGLER
: {

604 i‡(
¨g0
.
π_èsk
 &&árg0.π_èsk->
 xtsk
) {

605  (
¨g0
.
π_èsk
->
 xtsk
)->
pid
;

607 #ifde‡
CONFIG_RTAI_HARD_SOFT_TOGGLER


608 i‡(
èsk
) {

609 
	`πai_˛i
();

610 i‡(
èsk
->
is_h¨d
 > 0) {

611 
	`π_make_so·_ªÆ_time
(
èsk
);

613 
	`π_make_h¨d_ªÆ_time
(
èsk
);

615 
	`πai_°i
();

621 
IS_HARD
: {

622 
¨g0
.
i
 =árg0.
π_èsk
 || (¨g0.π_èsk = 
cuºít
->
	`πai_tskext
(
TSKEXT0
)Ë?árg0.π_èsk->
is_h¨d
 : 0;

623  
¨g0
.
Œ
;

625 
GET_EXECTIME
: {

626 
	s¨g
 { 
RT_TASK
 *
èsk
; 
RTIME
 *
exe˘ime
; };

627 i‡((
œrg
->
èsk
)->
exe˘ime
[0] && (larg->task)->exectime[1]) {

628 
œrg
->
exe˘ime
[0] = (œrg->
èsk
)->exectime[0];

629 
œrg
->
exe˘ime
[1] = (œrg->
èsk
)->exectime[1];

630 
œrg
->
exe˘ime
[2] = 
	`πai_rdtsc
();

634 
GET_TIMEORIG
: {

635 
	s¨g
 { 
RTIME
 *
time_‹ig
; };

636 i‡(
œrg
->
time_‹ig
) {

637 
RTIME
 
time_‹ig
[2];

638 
	`π_gëtime‹ig
(
time_‹ig
);

639 
	`π_c›y_to_u£r
(
œrg
->
time_‹ig
,Åime_orig, (time_orig));

641 
	`π_gëtime‹ig
(
NULL
);

646 
LINUX_SERVER
: {

647 
	s¨g
 { 
löux_sysˇŒs_li°
 
sysˇŒs
; };

648 i‡(
œrg
->
sysˇŒs
.
ƒ
) {

649 i‡(
œrg
->
sysˇŒs
.
èsk
->
löux_sysˇŒ_£rvî
) {

650 
RT_TASK
 *
£rv
;

651 
	`π_gë_u£r
(
£rv
, &
œrg
->
sysˇŒs
.serv);

652 
	`π_èsk_masked_unblock
(
£rv
, ~
RT_SCHED_READY
);

654 
œrg
->
sysˇŒs
.
èsk
->
löux_sysˇŒ_£rvî
 =Ü¨g->sysˇŒs.
£rv
;

655 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, (
œrg
->
sysˇŒs
.
èsk
)->
 xtsk
->
pﬁicy
, (œrg->sysˇŒs.èsk)-> xtsk->
π_¥i‹ôy
);

656 
¨g0
.
π_èsk
 = 
	`__èsk_öô
(()
œrg
->
sysˇŒs
.
èsk
,Ü¨g->sysˇŒs.èsk->
ba£_¥i‹ôy
 >
BASE_SOFT_PRIORITY
 ?Ü¨g->sysˇŒs.èsk->ba£_¥i‹ôy - BASE_SOFT_PRIORITY :Ü¨g->sysˇŒs.èsk->ba£_¥i‹ôy, 0, 0, 1 <<Ü¨g->sysˇŒs.èsk->
ru¬abÀ_⁄_˝us
);

658 
œrg
->
sysˇŒs
.
èsk
->
löux_sysˇŒ_£rvî
 = 
¨g0
.
π_èsk
;

659 
¨g0
.
π_èsk
->
löux_sysˇŒ_£rvî
 = 
œrg
->
sysˇŒs
.
£rv
;

661  
¨g0
.
Œ
;

663 i‡(!
œrg
->
sysˇŒs
.
èsk
) {

664 
œrg
->
sysˇŒs
.
èsk
 = 
RT_CURRENT
;

666 i‡((
¨g0
.
π_èsk
 = 
œrg
->
sysˇŒs
.
èsk
->
löux_sysˇŒ_£rvî
)) {

667 
œrg
->
sysˇŒs
.
èsk
->
löux_sysˇŒ_£rvî
 = 
NULL
;

668 
¨g0
.
π_èsk
->
su•dïth
 = -
RTE_HIGERR
;

669 
	`π_èsk_masked_unblock
(
¨g0
.
π_èsk
, ~
RT_SCHED_READY
);

675 
KERNEL_CALIBRATOR
: {

676 
	s¨g
 { 
≥riod
, 
lo›s
, 
L©ícy
; };

677 #i‡!
CONFIG_RTAI_BUSY_TIME_ALIGN


678 
π_smp_hÆf_tick
[];

679 
˝u
;

680 
tu√d
.
œãncy
 = 
	`imuldiv
(
	`abs
(()
œrg
->
L©ícy
),Åu√d.
˝u_‰eq
, 1000000000);

681 i‡(
tu√d
.
œãncy
 <Åu√d.
£tup_time_TIMER_CPUNIT
) {

682 
tu√d
.
œãncy
 =Åu√d.
£tup_time_TIMER_CPUNIT
;

684 
˝u
 = 0; cpu < 
NR_RT_CPUS
; cpu++) {

685 
π_smp_hÆf_tick
[
˝u
] = 
tu√d
.
œãncy
/2;

688  
œrg
->
L©ícy
 < 0 ? 0 : 
	`kî√l_ˇlibøt‹_•v
÷¨g->
≥riod
,Ü¨g->
lo›s
, 
èsk
);

691 
GET_CPU_FREQ
: {

692 
ˇlibøti⁄_d©a
 
πai_tu«bÀs
;

693  
πai_tu«bÀs
.
˝u_‰eq
;

697 
	`π_¥ötk
("RTAI/LXRT: Unknow¿§q #%d\n", 
§q
);

698 
¨g0
.
i
 = -
ENOSYS
;

699  
¨g0
.
Œ
;

703 
	}
}

705 
ölöe
 
	$check_to_so·í_h¨dí
(
RT_TASK
 *
èsk
)

707 i‡(
	`u∆ikñy
(
èsk
->
f‹˚_so·
)) {

708 i‡(
èsk
->
is_h¨d
 > 0) {

709 
	`give_back_to_löux
(
èsk
, 0);

711 
èsk
->
is_h¨d
 = 0;

713 
èsk
->
unblocked
 =Åask->
f‹˚_so·
 = 0;

714 
èsk
->
u•_Êags
 &~
FORCE_SOFT
;

715 } i‡(
	`u∆ikñy
(
èsk
->
is_h¨d
 < 0)) {

716 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("GOING BACK TO HARD (SYSLXRT, DIRECT), PID = %d.\n", 
cuºít
->
pid
););

717 
	`°ól_‰om_löux
(
èsk
);

718 
	`SYSW_DIAG_MSG
(
	`π_¥ötk
("GONE BACK TO HARD (SYSLXRT), PID = %d.\n", 
cuºít
->
pid
););

719 } i‡(
	`u∆ikñy
(
èsk
->
unblocked
)) {

720 i‡(
èsk
->
is_h¨d
 > 0) {

721 
	`give_back_to_löux
(
èsk
, -1);

723 
èsk
->
unblocked
 = 0;

725 
	}
}

727 
	$πai_lxπ_övoke
 (
lx§q
, *
¨g
)

729 
RT_TASK
 *
èsk
;

731 i‡(
	`likñy
((
èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
)Ë!
NULL
)) {

732 
ªtvÆ
;

733 
	`check_to_so·í_h¨dí
(
èsk
);

734 
ªtvÆ
 = 
	`h™dÀ_lxπ_ªque°
(
lx§q
, 
¨g
, 
èsk
);

735 
	`check_to_so·í_h¨dí
(
èsk
);

736  
ªtvÆ
;

739  
	`h™dÀ_lxπ_ªque°
(
lx§q
, 
¨g
, 
NULL
);

740 
	}
}

742 
	$£t_π_fun_ext_ödex
(
π_fun_íåy
 *
fun
, 
idx
)

744 i‡(
idx
 > 0 && idx < 
MAX_FUN_EXT
 && !
π_fun_ext
[idx]) {

745 
π_fun_ext
[
idx
] = 
fun
;

748  -
EACCES
;

749 
	}
}

751 
	$ª£t_π_fun_ext_ödex
–
π_fun_íåy
 *
fun
, 
idx
)

753 i‡(
idx
 > 0 && idx < 
MAX_FUN_EXT
 && 
π_fun_ext
[idx] =
fun
) {

754 
π_fun_ext
[
idx
] = 0;

756 
	}
}

758 
	$löux_¥o˚ss_ãrmö©i⁄
()

761 
max_¶Ÿs
;

762 
numid
;

763 
«me
[8];

764 
RT_TASK
 *
èsk2dñëe
;

765 
π_ªgi°ry_íåy
 
íåy
;

766 
¶Ÿ
;

771 i‡(!(
numid
 = 
	`is_¥o˚ss_ªgi°îed
(
cuºít
))) {

774 
¶Ÿ
 = 1; slŸ <
max_¶Ÿs
; slot++) {

775 i‡(!
	`π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, &
íåy
Ë||É¡ry.
tsk
 !
cuºít
 || 
	`π_drg_⁄_«me_˙t
”¡ry.
«me
) <= 0) {

778 
	`num2«m
(
íåy
.
«me
,Çame);

779 
íåy
.
tsk
 = 0;

780 
íåy
.
ty≥
) {

781 
IS_SEM
:

782 
	`π_¥ötk
("LXRTÑñó£†SEM %s\n", 
«me
);

783 
	`lxπ_£m_dñëe
(
íåy
.
adr
);

784 
	`π_‰ì
(
íåy
.
adr
);

786 
IS_RWL
:

787 
	`π_¥ötk
("LXRTÑñó£†RWL %s\n", 
«me
);

788 
	`lxπ_rwl_dñëe
(
íåy
.
adr
);

789 
	`π_‰ì
(
íåy
.
adr
);

791 
IS_SPL
:

792 
	`π_¥ötk
("LXRTÑñó£†SPL %s\n", 
«me
);

793 
	`lxπ_•l_dñëe
(
íåy
.
adr
);

794 
	`π_‰ì
(
íåy
.
adr
);

796 
IS_MBX
:

797 
	`π_¥ötk
("LXRTÑñó£†MBX %s\n", 
«me
);

798 
	`lxπ_mbx_dñëe
(
íåy
.
adr
);

799 
	`π_‰ì
(
íåy
.
adr
);

801 
IS_PRX
:

802 
numid
 = 
	`πèsk2pid
(
íåy
.
adr
);

803 
	`π_¥ötk
("LXRTÑñó£†PROXY PID %lu\n", 
numid
);

804 
	`lxπ_Proxy_dëach
(
numid
);

806 
IS_TASK
:

807 
	`π_¥ötk
("LXRT dîegi°î†èsk %†%d\n", 
«me
, ((
RT_TASK
 *)
íåy
.
adr
)->
 xtsk
->
pid
);

811 i‡((
èsk2dñëe
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
))) {

812 i‡(!
	`˛r_πext
(
èsk2dñëe
)) {

813 
	`π_drg_⁄_adr
(
èsk2dñëe
);

814 
	`π_¥ötk
("LXRTÑñó£†PID %d (ID: %s).\n", 
cuºít
->
pid
, cuºít->
comm
);

815 
	`π_‰ì
(
èsk2dñëe
->
msg_buf
[0]);

816 
	`π_‰ì
(
èsk2dñëe
->
msg_buf
[1]);

817 
	`π_‰ì
(
èsk2dñëe
);

818 
cuºít
->
	`πai_tskext
(
TSKEXT0
Ëcuºít->πai_tskext(
TSKEXT1
) = 0;

821 
	}
}

823 
	$öô_fun_ext
 ()

825 
π_fun_ext
[0] = 
π_fun_lxπ
;

826 
	}
}

830 
	skîn_ˇl_¨g
 { 
	m≥riod
, 
	mlo›s
; 
RT_TASK
 *
	mèsk
; };

832 
	$kî√l_ˇlibøt‹
(
kîn_ˇl_¨g
 *
ˇÕ¨
)

834 
RTIME
 
ex≥˘ed
;

835 
avîage
 = 0;

836 
s
 = 0;

838 
ex≥˘ed
 = 
	`π_gë_time
(Ë+ 10*
ˇÕ¨
->
≥riod
;

839 
	`π_èsk_make_≥riodic
(
NULL
, 
ex≥˘ed
, 
ˇÕ¨
->
≥riod
);

840 
ˇÕ¨
->
lo›s
--) {

841 
ex≥˘ed
 +
ˇÕ¨
->
≥riod
;

842 
	`π_èsk_waô_≥riod
();

843 
avîage
 +
	`π_gë_time
(Ë- 
ex≥˘ed
;

844 
s
 += 3.14;

846 
ˇÕ¨
->
≥riod
 = 
avîage
;

847 
	`π_èsk_ªsume
(
ˇÕ¨
->
èsk
);

848 
	}
}

850 
	sˇlsup
 { 
kîn_ˇl_¨g
 
	mˇÕ¨
; 
RT_TASK
 
	mπask
; };

852 
	$kî√l_ˇlibøt‹_•v
(
≥riod
, 
lo›s
, 
RT_TASK
 *
èsk
)

854 
ˇlsup
 *calsup;

855 
ˇlsup
 = 
	`kmÆloc
((ˇlsup), 
GFP_KERNEL
);

856 
ˇlsup
->
ˇÕ¨
 = (
kîn_ˇl_¨g
Ë{ 
≥riod
, 
lo›s
, 
èsk
 };

857 
	`π_èsk_öô_˝uid
(&
ˇlsup
->
πask
, (*)
kî√l_ˇlibøt‹
, ()&ˇlsup->
ˇÕ¨
, 4096, 0, 1, 0, 
	`πai_˝uid
());

858 
	`π_èsk_ªsume
(&
ˇlsup
->
πask
);

859 
èsk
->
fun_¨gs
[0] = ()task;

860 ((
fun_¨gs
 *)
èsk
->fun_¨gs)->
fun
 = (*)
π_èsk_su•íd
;

861 
	`π_scheduÀ_so·
(
èsk
);

862 
≥riod
 = 
ˇlsup
->
ˇÕ¨
.period;

863 
	`k‰ì
(
ˇlsup
);

864  
≥riod
;

865 
	}
}

868 
π_d´m⁄ize
();

870 
	sthªad_¨gs
 { *
	mfun
; 
	md©a
; 
	m¥i‹ôy
; 
	mpﬁicy
; 
	m˝us_Ælowed
; 
RT_TASK
 *
	mèsk
; 
£m≠h‹e
 *
	m£m
; };

872 
	$kthªad_fun
(
thªad_¨gs
 *
¨gs
)

874 
löux_π_¥i‹ôy
;

876 
	`π_d´m⁄ize
();

877 i‡(
¨gs
->
pﬁicy
 =
SCHED_NORMAL
) {

878 
löux_π_¥i‹ôy
 = 0;

879 } i‡((
löux_π_¥i‹ôy
 = 
MAX_RT_PRIO
 - 1 - 
¨gs
->
¥i‹ôy
) < 1) {

880 
löux_π_¥i‹ôy
 = 1;

882 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, 
¨gs
->
pﬁicy
, 
löux_π_¥i‹ôy
);

884 i‡((
¨gs
->
èsk
 = 
	`__èsk_öô
(
	`π_gë_«me
(
NULL
),árgs->
¥i‹ôy
, 0, 0,árgs->
˝us_Ælowed
))) {

885 
RT_TASK
 *
èsk
 = 
¨gs
->task;

886 (*
fun
)(Ë
¨gs
->fun;

887 
d©a
 = 
¨gs
->data;

888 
	`up
(
¨gs
->
£m
);

889 
	`π_make_h¨d_ªÆ_time
(
èsk
);

890 
	`fun
(
d©a
);

891 
	`π_thªad_dñëe
(
èsk
);

894 
	}
}

896 
RT_TASK
 *
	$π_kthªad_¸óã
(*
fun
, 
d©a
, 
¥i‹ôy
, 
löux_pﬁicy
, 
˝us_Ælowed
)

898 
£m≠h‹e
 
£m
;

899 
thªad_¨gs
 
¨gs
 = { 
fun
, 
d©a
, 
¥i‹ôy
, 
löux_pﬁicy
, 
˝us_Ælowed
, 
NULL
, &
£m
 };

900 
	`öô_MUTEX_LOCKED
(&
£m
);

901 
	`kî√l_thªad
((*)
kthªad_fun
, &
¨gs
, 0);

902 
	`down
(&
£m
);

903 
	`m¶ìp
(100);

904  
¨gs
.
èsk
;

905 
	}
}

907 
	~<löux/kthªad.h
>

908 
	$π_thªad_¸óã
(*
fun
, *
¨gs
, 
°ack_size
)

910 
ªtvÆ
;

911 
RT_TASK
 *
èsk
;

912 i‡((
èsk
 = 
cuºít
->
	`πai_tskext
(
TSKEXT0
)Ë&&Åask->
is_h¨d
 > 0) {

913 
	`π_make_so·_ªÆ_time
(
èsk
);

916 
ªtvÆ
 = ()
	`kthªad_run
(
fun
, 
¨gs
, "RTAI");

917 i‡(
èsk
 && !èsk->
is_h¨d
) {

918 
	`π_make_h¨d_ªÆ_time
(
èsk
);

920  
ªtvÆ
;

921 
	}
}

922 
EXPORT_SYMBOL
(
π_thªad_¸óã
);

924 
RT_TASK
 *
	$π_thªad_öô
(
«me
, 
¥i‹ôy
, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
)

926 
löux_π_¥i‹ôy
;

927 
RT_TASK
 *
èsk
;

928 i‡(
pﬁicy
 =
SCHED_NORMAL
) {

929 
löux_π_¥i‹ôy
 = 0;

930 } i‡((
löux_π_¥i‹ôy
 = 
MAX_RT_PRIO
 - 1 - 
¥i‹ôy
) < 1) {

931 
löux_π_¥i‹ôy
 = 1;

933 
	`πai_£t_löux_èsk_¥i‹ôy
(
cuºít
, 
pﬁicy
, 
löux_π_¥i‹ôy
);

935 i‡((
èsk
 = 
	`__èsk_öô
(
«me
 ?Çamê: 
	`π_gë_«me
(
NULL
), 
¥i‹ôy
, 0, 
max_msg_size
, 
˝us_Ælowed
))) {

936 
	`π_make_h¨d_ªÆ_time
(
èsk
);

938  
èsk
;

939 
	}
}

940 
EXPORT_SYMBOL
(
π_thªad_öô
);

942 
	$π_thªad_dñëe
(
RT_TASK
 *
π_èsk
)

944  
	`__èsk_dñëe
(
π_èsk
);

945 
	}
}

946 
EXPORT_SYMBOL
(
π_thªad_dñëe
);

	@/usr/src/rtai/base/tasklets/rtai_tasklets.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xd2b09˚5, 
__VMLINUX_SYMBOL_STR
(
__kmÆloc
) },

22 { 0x541a4996, 
__VMLINUX_SYMBOL_STR
(
π_scheduÀ
) },

23 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

24 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

25 { 0xa3536b55, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô_˝uid
) },

26 { 0xb22c9294, 
__VMLINUX_SYMBOL_STR
(
π_èsk_ªsume
) },

27 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

28 { 0x26948d96, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_íh™˚d_Á°_°rög
) },

29 { 0xa9cd4681, 
__VMLINUX_SYMBOL_STR
(
ùùe_roŸ
) },

30 { 0xb9bd6a10, 
__VMLINUX_SYMBOL_STR
(
boŸ_ïoch
) },

31 { 0xac8209da, 
__VMLINUX_SYMBOL_STR
(
πai_globÆ_hóp
) },

32 { 0xedd7ffc, 
__VMLINUX_SYMBOL_STR
(
cuºít_èsk
) },

33 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

34 { 0xafb8c6ff, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_°rög
) },

35 { 0x25455d5c, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_ext_ödex
) },

36 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

37 { 0x72a98fdb, 
__VMLINUX_SYMBOL_STR
(
c›y_u£r_gíîic_uƒﬁÀd
) },

38 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

39 { 0xfc845240, 
__VMLINUX_SYMBOL_STR
(
πai_˝u_lock
) },

40 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

41 { 0xd62c833f, 
__VMLINUX_SYMBOL_STR
(
scheduÀ_timeout
) },

42 { 0x141719e3, 
__VMLINUX_SYMBOL_STR
(
πai_tu«bÀs
) },

43 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

44 { 0x33f73fdc, 
__VMLINUX_SYMBOL_STR
(
π_¶ìp_u¡û
) },

45 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

46 { 0x3152c030, 
__VMLINUX_SYMBOL_STR
(
πhóp_‰ì
) },

47 { 0x37a0cba, 
__VMLINUX_SYMBOL_STR
(
k‰ì
) },

48 { 0x5Á0b4cf, 
__VMLINUX_SYMBOL_STR
(
πhóp_Æloc
) },

49 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

50 { 0x95d326c1, 
__VMLINUX_SYMBOL_STR
(
wake_up_§q
) },

51 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

52 { 0x909a72e2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_ext_ödex
) },

53 { 0x57d5Áb7, 
__VMLINUX_SYMBOL_STR
(
__ùùe_£t_úq_≥ndög
) },

56 c⁄° 
	g__moduÀ_dïíds
[]

57 
__u£d


58 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

62 
MODULE_INFO
(
§cvîsi⁄
, "F12CB245D873860CEBC6ABE");

	@/usr/src/rtai/base/tasklets/tasklets.c

77 
	~<löux/moduÀ.h
>

78 
	~<löux/vîsi⁄.h
>

79 
	~<löux/¥oc_fs.h
>

80 
	~<löux/sched.h
>

81 
	~<löux/¶ab.h
>

82 
	~<löux/öãºu±.h
>

83 
	~<asm/uac˚ss.h
>

84 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,4,0)

85 
	~<asm/sy°em.h
>

87 
	~<asm/πai_sched.h
>

88 
	~<πai_èskÀts.h
>

89 
	~<πai_lxπ.h
>

90 
	~<πai_mÆloc.h
>

91 
	~<πai_schedc‹e.h
>

93 
MODULE_LICENSE
("GPL");

95 
ïoch_°ru˘
 
boŸ_ïoch
;

97 
	gDEFINE_LINUX_CR0


99 #ifde‡
CONFIG_SMP


100 
	#NUM_CPUS
 
RTAI_NR_CPUS


	)

101 
	#TIMED_TIMER_CPUID
 (
timed_timî
->
˝uid
)

	)

102 
	#TIMER_CPUID
 (
timî
->
˝uid
)

	)

103 
	#LIST_CPUID
 (
˝uid
)

	)

105 
	#NUM_CPUS
 1

	)

106 
	#TIMED_TIMER_CPUID
 (0)

	)

107 
	#TIMER_CPUID
 (0)

	)

108 
	#LIST_CPUID
 (0)

	)

112 
π_èskÀt_°ru˘
 
	gtimîs_li°
[
NUM_CPUS
] =

113 { { &
timîs_li°
[0], &timîs_li°[0], 
RT_SCHED_LOWEST_PRIORITY
, 0, 0, 
RT_TIME_END
, 0LL, 
NULL
, 0UL, 0UL, 0, NULL, NULL, 0,

114 #ifde‡ 
CONFIG_RTAI_LONG_TIMED_LIST


115 { 
NULL
 }

119 
π_èskÀt_°ru˘
 
	gèskÀts_li°
 =

120 { &
èskÀts_li°
, &tasklets_list, };

123 
•ölock_t
 
	gtimîs_lock
[
NUM_CPUS
] = { 
__SPIN_LOCK_UNLOCKED
(
timîs_lock
[0]), };

124 
DEFINE_SPINLOCK
(
èskÀts_lock
);

126 
π_fun_íåy
 
	gπ_èskÀt_fun
[] 
__©åibuã__
 ((
__unu£d__
));

128 
π_fun_íåy
 
	gπ_èskÀt_fun
[] = {

129 { 0, 
π_öô_èskÀt
 },

130 { 0, 
π_dñëe_èskÀt
 },

131 { 0, 
π_ö£π_èskÀt
 },

132 { 0, 
π_ªmove_èskÀt
 },

133 { 0, 
π_èskÀt_u£_Âu
 },

134 { 0, 
π_ö£π_timî
 },

135 { 0, 
π_ªmove_timî
 },

136 { 0, 
π_£t_timî_¥i‹ôy
 },

137 { 0, 
π_£t_timî_fúög_time
 },

138 { 0, 
π_£t_timî_≥riod
 },

139 { 0, 
π_£t_èskÀt_h™dÀr
 },

140 { 0, 
π_£t_èskÀt_d©a
 },

141 { 0, 
π_exec_èskÀt
 },

142 { 0, 
π_waô_èskÀt_is_h¨d
 },

143 { 0, 
π_£t_èskÀt_¥i‹ôy
 },

144 { 0, 
π_ªgi°î_èsk
 },

145 { 0, 
π_gë_timî_times
 },

146 { 0, 
π_gë_timî_ovîrun
 },

150 { 0, 
π_±imî_¸óã
 },

151 { 0, 
π_±imî_£âime
 },

152 { 0, 
π_±imî_ovîrun
 },

153 { 0, 
π_±imî_gëtime
 },

154 { 0, 
π_±imî_dñëe
 }

160 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


163 
ölöe
 
	$íq_timî
(
π_èskÀt_°ru˘
 *
timed_timî
)

165 
π_èskÀt_°ru˘
 *
timîh
, *
tm∫xt
, *
timî
;

166 
rb_node_t
 **
rbä
, *
rbçn
 = 
NULL
;

167 
timî
 = 
timîh
 = &
timîs_li°
[
TIMED_TIMER_CPUID
];

168 
rbä
 = &
timîh
->
rbr
.
rb_node
;

170 *
rbä
) {

171 
rbçn
 = *
rbä
;

172 
tm∫xt
 = 
	`rb_íåy
(
rbçn
, 
π_èskÀt_°ru˘
, 
rbn
);

173 i‡(
timî
->
fúög_time
 > 
tm∫xt
->firing_time) {

174 
rbä
 = &(
rbçn
)->
rb_right
;

176 
rbä
 = &(
rbçn
)->
rb_À·
;

177 
timî
 = 
tm∫xt
;

180 
	`rb_lök_node
(&
timed_timî
->
rbn
, 
rbçn
, 
rbä
);

181 
	`rb_ö£π_cﬁ‹
(&
timed_timî
->
rbn
, &
timîh
->
rbr
);

182 
timî
->
¥ev
 = (
timed_timî
->¥ev =Åimî->¥ev)->
√xt
 =Åimed_timer;

183 
timed_timî
->
√xt
 = 
timî
;

184 
	}
}

186 
	#rb_îa£_timî
(
timî
) \

187 
	`rb_îa£
(&(
timî
)->
rbn
, &
timîs_li°
[
NUM_CPUS
 > 1 ? (timî)->
˝uid
 : 0].
rbr
)

	)

192 
ölöe
 
	$íq_timî
(
π_èskÀt_°ru˘
 *
timed_timî
)

194 
π_èskÀt_°ru˘
 *
timî
;

195 
timî
 = &
timîs_li°
[
TIMED_TIMER_CPUID
];

196 
timed_timî
->
fúög_time
 > (
timî
 =Åimî->
√xt
)->firing_time);

197 
timî
->
¥ev
 = (
timed_timî
->¥ev =Åimî->¥ev)->
√xt
 =Åimed_timer;

198 
timed_timî
->
√xt
 = 
timî
;

199 
	}
}

201 
	#rb_îa£_timî
(
timî
)

	)

205 
ölöe
 
	$ªm_timî
(
π_èskÀt_°ru˘
 *
timî
)

207 (
timî
->
√xt
)->
¥ev
 =Åimer->prev;

208 (
timî
->
¥ev
)->
√xt
 =Åimer->next;

209 
timî
->
√xt
 =Åimî->
¥ev
 =Åimer;

210 
	`rb_îa£_timî
(
timî
);

211 
	}
}

244 
RTAI_SYSCALL_MODE
 
π_ö£π_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
, (*
h™dÀr
)(), 
d©a
, 
id
, 
pid
)

246 
Êags
;

249 i‡(!
h™dÀr
 || !
id
) {

250  -
EINVAL
;

252 
èskÀt
->
u£s_Âu
 = 0;

253 
èskÀt
->
¥i‹ôy
 =Öriority;

254 
èskÀt
->
h™dÀr
 = handler;

255 
èskÀt
->
d©a
 = data;

256 
èskÀt
->
id
 = id;

257 i‡(!
pid
) {

258 
èskÀt
->
èsk
 = 0;

260 (
èskÀt
->
èsk
)->
¥i‹ôy
 =Öriority;

261 
	`π_c›y_to_u£r
(
èskÀt
->
u•èskÀt
,ÅaskÀt, (
π_u•_èskÀt_°ru˘
));

264 
Êags
 = 
	`π_•ö_lock_úqßve
(&
èskÀts_lock
);

265 
èskÀt
->
√xt
 = &
èskÀts_li°
;

266 
èskÀt
->
¥ev
 = 
èskÀts_li°
.prev;

267 (
èskÀts_li°
.
¥ev
)->
√xt
 = 
èskÀt
;

268 
èskÀts_li°
.
¥ev
 = 
èskÀt
;

269 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
èskÀts_lock
);

271 
	}
}

283 
RTAI_SYSCALL_MODE
 
	$π_ªmove_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
)

285 i‡(
èskÀt
->
√xt
 &&ÅaskÀt->
¥ev
 &&Åasklet->next !=Åasklet &&Åasklet->prev !=Åasklet) {

286 
Êags
;

287 
Êags
 = 
	`π_•ö_lock_úqßve
(&
èskÀts_lock
);

288 (
èskÀt
->
√xt
)->
¥ev
 =Åasklet->prev;

289 (
èskÀt
->
¥ev
)->
√xt
 =Åasklet->next;

290 
èskÀt
->
√xt
 =ÅaskÀt->
¥ev
 =Åasklet;

291 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
èskÀts_lock
);

293 
	}
}

309 
π_èskÀt_°ru˘
 *
	$π_föd_èskÀt_by_id
(
id
)

311 
π_èskÀt_°ru˘
 *
èskÀt
;

313 
èskÀt
 = &
èskÀts_li°
;

314 (
èskÀt
 =ÅaskÀt->
√xt
Ë!&
èskÀts_li°
) {

315 i‡(
id
 =
èskÀt
->id) {

316  
èskÀt
;

320 
	}
}

342 
RTAI_SYSCALL_MODE
 
	$π_exec_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
)

344 i‡(
èskÀt
 &&ÅaskÀt->
√xt
 !èskÀà&&ÅaskÀt->
¥ev
 !=Åasklet) {

345 i‡(!
èskÀt
->
èsk
) {

346 
èskÀt
->
	`h™dÀr
—askÀt->
d©a
);

348 
	`π_èsk_ªsume
(
èskÀt
->
èsk
);

352  -
EINVAL
;

353 
	}
}

355 
RTAI_SYSCALL_MODE
 
	$π_£t_èskÀt_¥i‹ôy
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
)

357 
èskÀt
->
¥i‹ôy
 =Öriority;

358 i‡(
èskÀt
->
èsk
) {

359 (
èskÀt
->
èsk
)->
¥i‹ôy
 =Öriority;

361 
	}
}

363 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_h™dÀr
(
π_èskÀt_°ru˘
 *
èskÀt
, (*
h™dÀr
)())

365 i‡(!
h™dÀr
) {

366  -
EINVAL
;

368 
èskÀt
->
h™dÀr
 = handler;

369 i‡(
èskÀt
->
èsk
) {

370 
	`π_c›y_to_u£r
(
èskÀt
->
u•èskÀt
,ÅaskÀt, (
π_u•_èskÀt_°ru˘
));

373 
	}
}

375 
RTAI_SYSCALL_MODE
 
	$π_£t_èskÀt_d©a
(
π_èskÀt_°ru˘
 *
èskÀt
, 
d©a
)

377 
èskÀt
->
d©a
 = data;

378 i‡(
èskÀt
->
èsk
) {

379 
	`π_c›y_to_u£r
(
èskÀt
->
u•èskÀt
,ÅaskÀt, (
π_u•_èskÀt_°ru˘
));

381 
	}
}

383 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
	$π_èskÀt_u£_Âu
(
π_èskÀt_°ru˘
 *
èskÀt
, 
u£_Âu
)

385 
èskÀt
->
u£s_Âu
 = 
u£_Âu
 ? 1 : 0;

386  
èskÀt
->
èsk
;

387 
	}
}

389 
RT_TASK
 
	gtimîs_m™agî
[
NUM_CPUS
];

391 
ölöe
 
	$asgn_mö_¥io
(
˝uid
)

394 
RT_TASK
 *
timî_m™agî
;

395 
π_èskÀt_°ru˘
 *
timî
, *
timîl
;

396 
•ölock_t
 *
lock
;

397 
Êags
;

398 
¥i‹ôy
;

400 
¥i‹ôy
 = (
timî
 = (
timîl
 = &
timîs_li°
[
LIST_CPUID
])->
√xt
)->priority;

401 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
 = &
timîs_lock
[
LIST_CPUID
]);

402 (
timî
 =Åimî->
√xt
Ë!
timîl
) {

403 i‡(
timî
->
¥i‹ôy
 <Öriority) {

404 
¥i‹ôy
 = 
timî
->priority;

406 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

407 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
);

409 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

410 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

411 i‡((
timî_m™agî
 = &
timîs_m™agî
[
LIST_CPUID
])->
¥i‹ôy
 >Öriority) {

412 
timî_m™agî
->
¥i‹ôy
 =Öriority;

413 i‡(
timî_m™agî
->
°©e
 =
RT_SCHED_READY
) {

414 
	`ªm_ªady_èsk
(
timî_m™agî
);

415 
	`íq_ªady_èsk
(
timî_m™agî
);

418 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

419 
	}
}

421 
ölöe
 
	$£t_timî_fúög_time
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
)

423 i‡(
timî
->
√xt
 !timî &&Åimî->
¥ev
 !=Åimer) {

424 
•ölock_t
 *
lock
;

425 
Êags
;

427 
timî
->
fúög_time
 = firing_time;

428 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
 = &
timîs_lock
[
TIMER_CPUID
]);

429 
	`ªm_timî
(
timî
);

430 
	`íq_timî
(
timî
);

431 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

433 
	}
}

472 
RTAI_SYSCALL_MODE
 
π_ö£π_timî
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
, 
RTIME
 
fúög_time
, RTIME 
≥riod
, (*
h™dÀr
)(), 
d©a
, 
pid
)

474 
•ölock_t
 *
lock
;

475 
Êags
, 
˝uid
;

476 
RT_TASK
 *
timî_m™agî
;

479 
timî
->
u£s_Âu
 = 0;

481 i‡(
pid
 >= 0) {

482 i‡(!
h™dÀr
) {

483  -
EINVAL
;

485 
timî
->
h™dÀr
 = handler;

486 
timî
->
d©a
 = data;

488 i‡(
timî
->
h™dÀr
 !
NULL
 ||Åimer->handler == (*)1) {

489 
timî
->
h™dÀr
 = (*)1;

490 
timî
->
d©a
 = data;

494 
timî
->
¥i‹ôy
 =Öriority;

495 
	`REALTIME2COUNT
(
fúög_time
)

496 
timî
->
fúög_time
 = firing_time;

497 
timî
->
≥riod
 =Öeriod;

499 i‡(!
pid
) {

500 
timî
->
èsk
 = 0;

501 
timî
->
˝uid
 = cpuid = 
NUM_CPUS
 > 1 ? 
	`πai_˝uid
() : 0;

503 
timî
->
˝uid
 = cpuid = 
NUM_CPUS
 > 1 ? (timî->
èsk
)->
ru¬abÀ_⁄_˝us
 : 0;

504 (
timî
->
èsk
)->
¥i‹ôy
 =Öriority;

505 
	`π_c›y_to_u£r
(
timî
->
u•èskÀt
,Åimî, (
π_u•_èskÀt_°ru˘
));

508 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
 = &
timîs_lock
[
LIST_CPUID
]);

509 
	`íq_timî
(
timî
);

510 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

512 i‡(
timî
->
¥i‹ôy
 < (
timî_m™agî
 = &
timîs_m™agî
[
LIST_CPUID
])->priority) {

513 
timî_m™agî
->
¥i‹ôy
 = 
timî
->priority;

516 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

517 i‡(
timîs_li°
[
LIST_CPUID
].
√xt
 =
timî
 && (
timî_m™agî
->
°©e
 & 
RT_SCHED_DELAYED
Ë&& 
fúög_time
 <Åimî_m™agî->
ªsume_time
) {

518 
timî_m™agî
->
ªsume_time
 = 
fúög_time
;

519 
	`ªm_timed_èsk
(
timî_m™agî
);

520 
	`íq_timed_èsk
(
timî_m™agî
);

521 
	`π_scheduÀ
();

523 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

525 
	}
}

537 
RTAI_SYSCALL_MODE
 
	$π_ªmove_timî
(
π_èskÀt_°ru˘
 *
timî
)

539 i‡(
timî
->
√xt
 &&Åimî->
¥ev
 &&Åimer->next !=Åimer &&Åimer->prev !=Åimer) {

540 
•ölock_t
 *
lock
;

541 
Êags
;

542 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
 = &
timîs_lock
[
TIMER_CPUID
]);

543 
	`ªm_timî
(
timî
);

544 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

545 
	`asgn_mö_¥io
(
TIMER_CPUID
);

547 
	}
}

565 
RTAI_SYSCALL_MODE
 
	$π_£t_timî_¥i‹ôy
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
)

567 
timî
->
¥i‹ôy
 =Öriority;

568 i‡(
timî
->
èsk
) {

569 (
timî
->
èsk
)->
¥i‹ôy
 =Öriority;

571 
	`asgn_mö_¥io
(
TIMER_CPUID
);

572 
	}
}

594 
RTAI_SYSCALL_MODE
 
	$π_£t_timî_fúög_time
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
)

596 
Êags
;

597 
RT_TASK
 *
timî_m™agî
;

599 
	`£t_timî_fúög_time
(
timî
, 
fúög_time
);

600 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

601 i‡(
timîs_li°
[
TIMER_CPUID
].
√xt
 =
timî
 && ((
timî_m™agî
 = &
timîs_m™agî
[TIMER_CPUID])->
°©e
 & 
RT_SCHED_DELAYED
Ë&& 
fúög_time
 <Åimî_m™agî->
ªsume_time
) {

602 
timî_m™agî
->
ªsume_time
 = 
fúög_time
;

603 
	`ªm_timed_èsk
(
timî_m™agî
);

604 
	`íq_timed_èsk
(
timî_m™agî
);

605 
	`π_scheduÀ
();

607 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

608 
	}
}

634 
RTAI_SYSCALL_MODE
 
	$π_£t_timî_≥riod
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
≥riod
)

636 
•ölock_t
 *
lock
;

637 
Êags
;

638 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
 = &
timîs_lock
[
TIMER_CPUID
]);

639 
timî
->
≥riod
 =Öeriod;

640 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

641 
	}
}

643 
RTAI_SYSCALL_MODE
 
	$π_gë_timî_times
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
timî_times
[])

645 
RTIME
 
fúög
;

647 
fúög
 = -
	`π_gë_time
();

648 
fúög
 +
timî
->
fúög_time
;

650 
timî_times
[0] = 
fúög
 > 0 ? firing : -1;

651 
timî_times
[1] = 
timî
->
≥riod
;

652 
	}
}

654 
RTAI_SYSCALL_MODE
 
RTIME
 
	$π_gë_timî_ovîrun
(
π_èskÀt_°ru˘
 *
timî
)

656  
timî
->
ovîrun
;

657 
	}
}

659 
	gTimîsM™agîPrio
 = 0;

660 
RTAI_MODULE_PARM
(
TimîsM™agîPrio
, );

664 
	$π_timîs_m™agî
(
˝uid
)

666 
RTIME
 
now
;

667 
RT_TASK
 *
timî_m™agî
;

668 
π_èskÀt_°ru˘
 *
tmr
, *
timî
, *
timîl
;

669 
•ölock_t
 *
lock
;

670 
Êags
, 
timî_tﬁ
;

671 
¥i‹ôy
, 
u£d_Âu
;

673 
timî_m™agî
 = &
timîs_m™agî
[
LIST_CPUID
];

674 
timîl
 = &
timîs_li°
[
LIST_CPUID
];

675 
lock
 = &
timîs_lock
[
LIST_CPUID
];

676 
timî_tﬁ
 = 
tu√d
.
timîs_tﬁ
[
LIST_CPUID
];

679 
ªtvÆ
;

680 
ªtvÆ
 = 
	`π_¶ìp_u¡û
((
timîl
->
√xt
)->
fúög_time
);

682 
now
 = 
	`π_gë_time
(Ë+ 
timî_tﬁ
;

685 
u£d_Âu
 = 0;

686 
tmr
 = 
timî
 = 
timîl
;

687 
¥i‹ôy
 = 
RT_SCHED_LOWEST_PRIORITY
;

688 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
);

689 (
tmr
 =Åmr->
√xt
)->
fúög_time
 <
now
) {

690 i‡(
tmr
->
¥i‹ôy
 <Öriority) {

691 
¥i‹ôy
 = (
timî
 = 
tmr
)->priority;

694 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

695 i‡(
timî
 =
timîl
) {

696 i‡(
timî_m™agî
->
¥i‹ôy
 > 
TimîsM™agîPrio
) {

697 
timî_m™agî
->
¥i‹ôy
 = 
TimîsM™agîPrio
;

701 
timî_m™agî
->
¥i‹ôy
 =Öriority;

703 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
);

704 
	`ªm_timî
(
timî
);

705 i‡(
timî
->
≥riod
) {

706 
timî
->
fúög_time
 +timî->
≥riod
;

707 
	`íq_timî
(
timî
);

709 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

711 i‡(!
timî
->
≥riod
) {

712 
Êags
 = 
	`π_•ö_lock_úqßve
(
lock
);

713 
	`ªm_timî
(
timî
);

714 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

716 
	`£t_timî_fúög_time
(
timî
,Åimî->
fúög_time
 +Åimî->
≥riod
);

720 
tmr
->
ovîrun
 = 0;

721 i‡(!
timî
->
èsk
) {

722 i‡(!
u£d_Âu
 && 
timî
->
u£s_Âu
) {

723 
u£d_Âu
 = 1;

724 
	`ßve_Â¸_™d_íabÀ_Âu
(
löux_¸0
);

725 
	`ßve_Âív
(
timî_m™agî
->
Âu_ªg
);

727 
timî
->
	`h™dÀr
—imî->
d©a
);

729 
	`π_èsk_ªsume
(
timî
->
èsk
);

735 i‡(
u£d_Âu
) {

736 
	`ª°‹e_Âív
(
timî_m™agî
->
Âu_ªg
);

737 
	`ª°‹e_Â¸
(
löux_¸0
);

740 
	`asgn_mö_¥io
(
LIST_CPUID
);

743 
	}
}

758 
π_èskÀt_°ru˘
 *
	$π_öô_èskÀt
()

760 
π_èskÀt_°ru˘
 *
èskÀt
;

761 i‡((
èskÀt
 = 
	`π_mÆloc
((
π_èskÀt_°ru˘
)))) {

762 
	`mem£t
(
èskÀt
, 0, (
π_èskÀt_°ru˘
));

764  
èskÀt
;

765 
	}
}

767 
RTAI_SYSCALL_MODE
 
	$π_ªgi°î_èsk
(
π_èskÀt_°ru˘
 *
èskÀt
, π_èskÀt_°ru˘ *
u•èskÀt
, 
RT_TASK
 *
èsk
)

769 
èskÀt
->
èsk
 =Åask;

770 
èskÀt
->
u•èskÀt
 = usptasklet;

771 
	`π_c›y_to_u£r
(
u•èskÀt
, 
èskÀt
, (
π_u•_èskÀt_°ru˘
));

772 
	}
}

774 
RTAI_SYSCALL_MODE
 
	$π_waô_èskÀt_is_h¨d
(
π_èskÀt_°ru˘
 *
èskÀt
, 
thªad
)

776 
	#POLLS_PER_SEC
 100

	)

777 
i
;

778 
èskÀt
->
thªad
 =Åhread;

779 
i
 = 0; i < 
POLLS_PER_SEC
/5; i++) {

780 i‡(!
èskÀt
->
èsk
 || !(—askÀt->èsk)->
°©e
 & 
RT_SCHED_SUSPENDED
)) {

781 
cuºít
->
°©e
 = 
TASK_INTERRUPTIBLE
;

782 
	`scheduÀ_timeout
(
HZ
/
POLLS_PER_SEC
);

788 #unde‡
POLLS_PER_SEC


789 
	}
}

806 
RTAI_SYSCALL_MODE
 
	$π_dñëe_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
)

808 
thªad
;

810 
	`π_ªmove_èskÀt
(
èskÀt
);

811 
èskÀt
->
h™dÀr
 = 0;

812 
	`π_c›y_to_u£r
(
èskÀt
->
u•èskÀt
,ÅaskÀt, (
π_u•_èskÀt_°ru˘
));

813 
	`π_èsk_ªsume
(
èskÀt
->
èsk
);

814 
thªad
 = 
èskÀt
->thread;

815 
	`π_‰ì
(
èskÀt
);

816  
thªad
;

817 
	}
}

824 
	gPosixTimîs
 = 
POSIX_TIMERS
;

825 
RTAI_MODULE_PARM
(
PosixTimîs
, );

827 
DEFINE_SPINLOCK
(
±imî_lock
);

828 vﬁ©ûê
	g±imî_ödex
;

829 
	s±imî_li°
 { 
	mt_ödx
, 
	mp_idx
; 
±imî_li°
 *
	mp_±r
; 
π_èskÀt_°ru˘
 *
	mtimî
;} *
	gposix_timî
;

831 
	$öô_±imîs
()

833 
i
;

835 i‡(!(
posix_timî
 = (
±imî_li°
 *)
	`kmÆloc
((
PosixTimîs
)*(±imî_li°), 
GFP_KERNEL
))) {

836 
	`¥ötk
("Init MODULEÇo memory for Posix Timer'sÜist.\n");

837  -
ENOMEM
;

839 
i
 = 0; i < 
PosixTimîs
; i++) {

840 
posix_timî
[
i
].
t_ödx
 =Öosix_timî[i].
p_idx
 = i;

841 
posix_timî
[
i
].
p_±r
 =Öosix_timer + i;

845 
	}
}

847 
	$˛ónup_±imîs
()

849 
	`k‰ì
(
posix_timî
);

850 
	}
}

852 
ölöe
 
	$gë_±imî_ödx
(
π_èskÀt_°ru˘
 *
timî
)

854 
Êags
;

856 
Êags
 = 
	`π_•ö_lock_úqßve
(&
±imî_lock
);

857 i‡(
±imî_ödex
 < 
PosixTimîs
) {

858 
±imî_li°
 *
p
;

859 
p
 = 
posix_timî
[
±imî_ödex
++].
p_±r
;

860 
p
->
timî
 =Åimer;

861 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
±imî_lock
);

862  
p
->
t_ödx
;

864 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
±imî_lock
);

866 
	}
}

868 
ölöe
 
	$gvb_±imî_ödx
(
ôimî
)

870 
Êags
;

872 
Êags
 = 
	`π_•ö_lock_úqßve
(&
±imî_lock
);

873 i‡(
ôimî
 < 
PosixTimîs
) {

874 
±imî_li°
 *
tmp_p
;

875 
tmp_∂a˚
;

876 
tmp_p
 = 
posix_timî
[--
±imî_ödex
].
p_±r
;

877 
tmp_∂a˚
 = 
posix_timî
[
ôimî
].
p_idx
;

878 
posix_timî
[
ôimî
].
p_idx
 = 
±imî_ödex
;

879 
posix_timî
[
±imî_ödex
].
p_±r
 = &posix_timî[
ôimî
];

880 
tmp_p
->
p_idx
 = 
tmp_∂a˚
;

881 
posix_timî
[
tmp_∂a˚
].
p_±r
 = 
tmp_p
;

882 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
±imî_lock
);

885 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, &
±imî_lock
);

886  -
EINVAL
;

887 
	}
}

889 
RTAI_SYSCALL_MODE
 
timî_t
 
π_±imî_¸óã
(
π_èskÀt_°ru˘
 *
timî
, (*
h™dÀr
)(), 
d©a
, 
pid
, 
thªad
)

891 i‡(
thªad
) {

892 
	`π_waô_èskÀt_is_h¨d
(
timî
, 
thªad
);

894 
timî
->
√xt
 =Åimer;

895 
timî
->
¥ev
 =Åimer;

896 
timî
->
d©a
 = data;

897 
timî
->
h™dÀr
 = handler;

898  
	`gë_±imî_ödx
(
timî
);

899 
	}
}

900 
EXPORT_SYMBOL
(
π_±imî_¸óã
);

902 
RTAI_SYSCALL_MODE
 
	$π_±imî_£âime
(
timî_t
 
timî
, c⁄° 
ôimî•ec
 *
vÆue
, 
d©a
, 
Êags
)

904 
π_èskÀt_°ru˘
 *
èskÀt
;

905 
RTIME
 
now
;

907 
èskÀt
 = 
posix_timî
[
timî
].timer;

908 
	`π_ªmove_timî
(
èskÀt
);

909 
now
 = 
	`π_gë_time
();

910 i‡(
Êags
 =
TIMER_ABSTIME
) {

911 i‡(
	`time•ec2cou¡
(&(
vÆue
->
ô_vÆue
)Ë< 
now
) {

912 
now
 -
	`time•ec2cou¡
 (&(
vÆue
->
ô_vÆue
));

914 
now
 = 0;

917 i‡(
	`time•ec2cou¡
 ( &(
vÆue
->
ô_vÆue
)) > 0) {

918 i‡(
d©a
) {

919 
	`π_ö£π_timî
(
èskÀt
, 0, 
now
 + 
	`time•ec2cou¡
 ( &(
vÆue
->
ô_vÆue
Ë),Åime•ec2cou¡ ( &(vÆue->
ô_öãrvÆ
Ë), 
NULL
, 
d©a
, -1);

921 
	`π_ö£π_timî
(
èskÀt
, 0, 
now
 + 
	`time•ec2cou¡
 ( &(
vÆue
->
ô_vÆue
Ë),Åime•ec2cou¡ ( &(vÆue->
ô_öãrvÆ
Ë),ÅaskÀt->
h™dÀr
,ÅaskÀt->
d©a
, 0);

924 
	}
}

925 
EXPORT_SYMBOL
(
π_±imî_£âime
);

927 
RTAI_SYSCALL_MODE
 
	$π_±imî_ovîrun
(
timî_t
 
timî
)

929  
	`π_gë_timî_ovîrun
(
posix_timî
[
timî
].timer);

930 
	}
}

931 
EXPORT_SYMBOL
(
π_±imî_ovîrun
);

933 
RTAI_SYSCALL_MODE
 
	$π_±imî_gëtime
(
timî_t
 
timî
, 
RTIME
 
timî_times
[])

935 
	`π_gë_timî_times
(
posix_timî
[
timî
].timî, 
timî_times
);

936 
	}
}

937 
EXPORT_SYMBOL
(
π_±imî_gëtime
);

939 
RTAI_SYSCALL_MODE
 
	$π_±imî_dñëe
(
timî_t
 
timî
, 
•a˚
)

941 
π_èskÀt_°ru˘
 *
èskÀt
;

942 
πn
 = 0;

944 
èskÀt
 = 
posix_timî
[
timî
].timer;

945 
	`gvb_±imî_ödx
(
timî
);

946 
	`π_ªmove_èskÀt
(
èskÀt
);

947 i‡(
•a˚
) {

948 
èskÀt
->
h™dÀr
 = 0;

949 
	`π_c›y_to_u£r
(
èskÀt
->
u•èskÀt
,ÅaskÀt, (
π_u•_èskÀt_°ru˘
));

950 
	`π_èsk_ªsume
(
èskÀt
->
èsk
);

951 
πn
 = 
èskÀt
->
thªad
;

953 
	`π_‰ì
(
èskÀt
);

954  
πn
;

955 
	}
}

956 
EXPORT_SYMBOL
(
π_±imî_dñëe
);

962 
	gTaskÀtsSècksize
 = 
TASKLET_STACK_SIZE
;

963 
RTAI_MODULE_PARM
(
TaskÀtsSècksize
, );

965 
	$__πai_èskÀts_öô
()

967 
˝uid
;

969 if(
	`£t_π_fun_ext_ödex
(
π_èskÀt_fun
, 
TASKLETS_IDX
)) {

970 
	`¥ötk
("Recompile your module withá different index\n");

971  -
EACCES
;

973 i‡(
	`öô_±imîs
()) {

974  -
ENOMEM
;

976 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

977 
timîs_lock
[
˝uid
] =Åimers_lock[0];

978 
timîs_li°
[
˝uid
] =Åimers_list[0];

979 
timîs_li°
[
˝uid
].cpuid = cpuid;

980 
timîs_li°
[
˝uid
].
√xt
 =Åimîs_li°[˝uid].
¥ev
 = &timers_list[cpuid];

981 
	`π_èsk_öô_˝uid
(&
timîs_m™agî
[
˝uid
], 
π_timîs_m™agî
, cpuid, 
TaskÀtsSècksize
, 
TimîsM™agîPrio
, 0, 0, cpuid);

982 
	`π_èsk_ªsume
(&
timîs_m™agî
[
˝uid
]);

984 
	`¥ötk
(
KERN_INFO
 "RTAI[tasklets]:Üoaded.\n");

986 
	}
}

988 
	$__πai_èskÀts_exô
()

990 
˝uid
;

991 
	`ª£t_π_fun_ext_ödex
(
π_èskÀt_fun
, 
TASKLETS_IDX
);

992 
	`˛ónup_±imîs
();

993 
˝uid
 = 0; cpuid < 
	`num_⁄löe_˝us
(); cpuid++) {

994 
	`π_èsk_dñëe
(&
timîs_m™agî
[
˝uid
]);

996 
	`¥ötk
(
KERN_INFO
 "RTAI[tasklets]: unloaded.\n");

997 
	}
}

1001 #i‚de‡
CONFIG_RTAI_TASKLETS_BUILTIN


1002 
moduÀ_öô
(
__πai_èskÀts_öô
);

1003 
moduÀ_exô
(
__πai_èskÀts_exô
);

1006 #ifde‡
CONFIG_KBUILD


1007 
EXPORT_SYMBOL
(
π_ö£π_èskÀt
);

1008 
EXPORT_SYMBOL
(
π_ªmove_èskÀt
);

1009 
EXPORT_SYMBOL
(
π_föd_èskÀt_by_id
);

1010 
EXPORT_SYMBOL
(
π_exec_èskÀt
);

1011 
EXPORT_SYMBOL
(
π_£t_èskÀt_¥i‹ôy
);

1012 
EXPORT_SYMBOL
(
π_£t_èskÀt_h™dÀr
);

1013 
EXPORT_SYMBOL
(
π_£t_èskÀt_d©a
);

1014 
EXPORT_SYMBOL
(
π_èskÀt_u£_Âu
);

1015 
EXPORT_SYMBOL
(
π_ö£π_timî
);

1016 
EXPORT_SYMBOL
(
π_ªmove_timî
);

1017 
EXPORT_SYMBOL
(
π_£t_timî_¥i‹ôy
);

1018 
EXPORT_SYMBOL
(
π_£t_timî_fúög_time
);

1019 
EXPORT_SYMBOL
(
π_£t_timî_≥riod
);

1020 
EXPORT_SYMBOL
(
π_öô_èskÀt
);

1021 
EXPORT_SYMBOL
(
π_ªgi°î_èsk
);

1022 
EXPORT_SYMBOL
(
π_waô_èskÀt_is_h¨d
);

1023 
EXPORT_SYMBOL
(
π_dñëe_èskÀt
);

1024 
EXPORT_SYMBOL
(
π_gë_timî_times
);

1025 
EXPORT_SYMBOL
(
π_gë_timî_ovîrun
);

	@/usr/src/rtai/base/trace/trace.c

30 
	~<löux/moduÀ.h
>

31 
	~<löux/kî√l.h
>

32 
	~<löux/î∫o.h
>

33 
	~<πai_åa˚.h
>

35 
MODULE_LICENSE
("GPL");

38 
	gπ_åa˚r_ªgi°îed
 = 0;

39 
åa˚r_ˇŒ
 
	gπ_åa˚r
 = 
NULL
;

49 
	$π_ªgi°î_åa˚r
(
åa˚r_ˇŒ
 
pmTø˚Fun˘i⁄
)

52 if(
π_åa˚r_ªgi°îed
 == 1)

56 
π_åa˚r
 = 
pmTø˚Fun˘i⁄
;

59 
π_åa˚r_ªgi°îed
 = 1;

63 
	}
}

74 
	$π_uƒegi°î_åa˚r
(
åa˚r_ˇŒ
 
pmTø˚Fun˘i⁄
)

77 if(
π_åa˚r_ªgi°îed
 == 0)

79  -
ENOMEDIUM
;

82 if(
π_åa˚r
 =
pmTø˚Fun˘i⁄
)

84 
π_åa˚r_ªgi°îed
 = 0;

86  -
ENXIO
;

89 
π_åa˚r
 = 
NULL
;

92 
π_åa˚r_ªgi°îed
 = 0;

96 
	}
}

110 
	$π_åa˚_evít
(
uöt8_t
 
pmEvítID
,

111 * 
pmEvítSåu˘
)

114 if(
π_åa˚r_ªgi°îed
 != 1)

115  -
ENOMEDIUM
;

118  (
	`π_åa˚r
(
pmEvítID
, 
pmEvítSåu˘
));

119 
	}
}

130 
	$__πai_åa˚_öô
()

133 
	}
}

144 
	$__πai_åa˚_exô
()

146 
	}
}

148 
moduÀ_öô
(
__πai_åa˚_öô
);

149 
moduÀ_exô
(
__πai_åa˚_exô
);

	@/usr/src/rtai/base/usi/usi.c

19 
	~<löux/kî√l.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/sched.h
>

23 
	~<löux/¶ab.h
>

25 
MODULE_LICENSE
("GPL");

29 
	~<πai.h
>

30 
	~<πai_sched.h
>

31 
	~<πai_mÆloc.h
>

32 
	~<πai_lxπ.h
>

33 
	~<πai_èskÀts.h
>

34 
	~<πai_usi.h
>

35 
	~<πai_£m.h
>

37 
	#MODULE_NAME
 "RTAI_USI"

	)

39 *
	$π_•ö_lock_öô
()

41 
•ölock_t
 *
lock
;

43 i‡((
lock
 = 
	`π_mÆloc
((
•ölock_t
)))) {

44 
	`•ö_lock_öô
(
lock
);

45  
lock
;

48 
	}
}

50 
ölöe
 
	$π_•ö_lock_dñëe
(*
lock
)

52 
	`π_‰ì
(
lock
);

54 
	}
}

56 
	$usi_•ö_lock
(
•ölock_t
 *
lock
)

58 
	`π_•ö_lock
(
lock
);

59 
	}
}

61 
	$usi_•ö_u∆ock
(
•ölock_t
 *
lock
)

63 
	`π_•ö_u∆ock
(
lock
);

64 
	}
}

66 
	$usi_•ö_lock_úq
(
•ölock_t
 *
lock
)

68 
	`π_•ö_lock_úq
(
lock
);

69 
	}
}

71 
	$usi_•ö_u∆ock_úq
(
•ölock_t
 *
lock
)

73 
	`π_•ö_u∆ock_úq
(
lock
);

74 
	}
}

76 
	$usi_•ö_lock_úqßve
(
•ölock_t
 *
lock
)

78  
	`π_•ö_lock_úqßve
(
lock
);

79 
	}
}

81 
	$usi_•ö_u∆ock_úqª°‹e
(
Êags
, 
•ölock_t
 *
lock
)

83 
	`π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
);

84 
	}
}

86 
	$usi_globÆ_˛i
()

88 
	`π_globÆ_˛i
();

89 
	}
}

91 
	$usi_globÆ_°i
()

93 
	`π_globÆ_°i
();

94 
	}
}

96 
	$usi_globÆ_ßve_Êags_™d_˛i
()

98  
	`π_globÆ_ßve_Êags_™d_˛i
();

99 
	}
}

101 
	$usi_globÆ_ßve_Êags
()

103 
Êags
;

104 
	`π_globÆ_ßve_Êags
(&
Êags
);

105  
Êags
;

106 
	}
}

108 
	$usi_globÆ_ª°‹e_Êags
(
Êags
)

110 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

111 
	}
}

113 
	$usi_˛i
()

115 
	`πai_˛i
();

116 
	}
}

118 
	$usi_°i
()

120 
	`πai_°i
();

121 
	}
}

123 
	$usi_ßve_Êags_™d_˛i
()

125 
Êags
;

126 
	`πai_ßve_Êags_™d_˛i
(
Êags
);

127  
Êags
;

128 
	}
}

130 
	$usi_ßve_Êags
()

132 
Êags
;

133 
	`πai_ßve_Êags
(
Êags
);

134  
Êags
;

135 
	}
}

137 
	$usi_ª°‹e_Êags
(
Êags
)

139 
	`πai_ª°‹e_Êags
(
Êags
);

140 
	}
}

142 
π_fun_íåy
 
	gπai_usi_fun
[] = {

143 [
_STARTUP_IRQ
] = { 0, 
π_°¨tup_úq
 },

144 [
_SHUTDOWN_IRQ
] = { 0, 
π_shutdown_úq
 },

145 [
_ENABLE_IRQ
] = { 0, 
π_íabÀ_úq
 },

146 [
_DISABLE_IRQ
] = { 0, 
π_dißbÀ_úq
 },

147 [
_MASK_AND_ACK_IRQ
] = { 0, 
π_mask_™d_ack_úq
 },

148 [
_ACK_IRQ
] = { 0, 
π_ack_úq
 },

149 [
_UNMASK_IRQ
 ] = { 0, 
π_unmask_úq
 },

150 [
_INIT_SPIN_LOCK
] = { 0, 
π_•ö_lock_öô
 },

151 [
_SPIN_LOCK
] = { 0, 
usi_•ö_lock
 },

152 [
_SPIN_UNLOCK
] = { 0, 
usi_•ö_u∆ock
 },

153 [
_SPIN_LOCK_IRQ
] = { 0, 
usi_•ö_lock_úq
 },

154 [
_SPIN_UNLOCK_IRQ
] = { 0, 
usi_•ö_u∆ock_úq
 },

155 [
_SPIN_LOCK_IRQSV
] = { 0, 
usi_•ö_lock_úqßve
 },

156 [
_SPIN_UNLOCK_IRQRST
] = { 0, 
usi_•ö_u∆ock_úqª°‹e
 },

157 [
_GLB_CLI
] = { 0, 
usi_globÆ_˛i
 },

158 [
_GLB_STI
] = { 0, 
usi_globÆ_°i
},

159 [
_GLB_SVFLAGS_CLI
] = { 0, 
usi_globÆ_ßve_Êags_™d_˛i
 },

160 [
_GLB_SVFLAGS
] = { 0, 
usi_globÆ_ßve_Êags
 },

161 [
_GLB_RSTFLAGS
] = { 0, 
usi_globÆ_ª°‹e_Êags
 },

162 [
_CLI
] = { 0, 
usi_˛i
 },

163 [
_STI
] = { 0, 
usi_°i
},

164 [
_SVFLAGS_CLI
] = { 0, 
usi_ßve_Êags_™d_˛i
 },

165 [
_SVFLAGS
] = { 0, 
usi_ßve_Êags
 },

166 [
_RSTFLAGS
] = { 0, 
usi_ª°‹e_Êags
 }

169 
	$ªgi°î_lxπ_usi_suµ‹t
()

171 if(
	`£t_π_fun_ext_ödex
(
πai_usi_fun
, 
FUN_USI_LXRT_INDX
)) {

172 
	`¥ötk
("LXRT EXTENSION SLOT FOR USI (%dËALREADY USED\n", 
FUN_USI_LXRT_INDX
);

173  -
EACCES
;

176 
	}
}

178 
	$uƒegi°î_lxπ_usi_suµ‹t
()

180 
	`ª£t_π_fun_ext_ödex
(
πai_usi_fun
, 
FUN_USI_LXRT_INDX
);

181 
	}
}

183 
	$__πai_usi_öô
()

185 i‡(!
	`ªgi°î_lxπ_usi_suµ‹t
()) {

186 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]:Üoaded.\n");

189  -
EACCES
;

190 
	}
}

192 
	$__πai_usi_exô
()

194 
	`uƒegi°î_lxπ_usi_suµ‹t
();

195 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]: unloaded.\n");

196 
	}
}

200 
	$__πai_usi_öô
()

202 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]:Üoaded.\n");

204 
	}
}

206 
	$__πai_usi_exô
()

208 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]: unloaded.\n");

209 
	}
}

211 #i‚de‡
CONFIG_RTAI_USI_BUILTIN


212 
moduÀ_öô
(
__πai_usi_öô
);

213 
moduÀ_exô
(
__πai_usi_exô
);

	@/usr/src/rtai/base/wd/rtai_wd.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0xa6e8109e, 
__VMLINUX_SYMBOL_STR
(
π_èsk_waô_≥riod
) },

22 { 0x349cba85, 
__VMLINUX_SYMBOL_STR
(
°rchr
) },

23 { 0x5603e8bd, 
__VMLINUX_SYMBOL_STR
(
sögÀ_›í
) },

24 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

25 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

26 { 0xa3536b55, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô_˝uid
) },

27 { 0xa9475aˇ, 
__VMLINUX_SYMBOL_STR
(
sögÀ_ªÀa£
) },

28 { 0xe00b12ˇ, 
__VMLINUX_SYMBOL_STR
(
π_£t_≥riodic_mode
) },

29 { 0xb22c9294, 
__VMLINUX_SYMBOL_STR
(
π_èsk_ªsume
) },

30 { 0xc02681e4, 
__VMLINUX_SYMBOL_STR
(
π_gë_ba£_löux_èsk
) },

31 { 0x4a70f94a, 
__VMLINUX_SYMBOL_STR
(
£q_¥ötf
) },

32 { 0x24ˇfbeb, 
__VMLINUX_SYMBOL_STR
(
ªmove_¥oc_íåy
) },

33 { 0x54efb5d6, 
__VMLINUX_SYMBOL_STR
(
˝u_numbî
) },

34 { 0x91715312, 
__VMLINUX_SYMBOL_STR
(
•rötf
) },

35 { 0xcf012e93, 
__VMLINUX_SYMBOL_STR
(
£q_ªad
) },

36 { 0x516f7693, 
__VMLINUX_SYMBOL_STR
(
π_gë_time_˝uid
) },

37 { 0x985fˇbb, 
__VMLINUX_SYMBOL_STR
(
¥oc_mkdú
) },

38 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

39 { 0xf46a8afb, 
__VMLINUX_SYMBOL_STR
(
°›_π_timî
) },

40 { 0xcf977d5f, 
__VMLINUX_SYMBOL_STR
(
lxπ_¥ev_èsk
) },

41 { 0x25455d5c, 
__VMLINUX_SYMBOL_STR
(
£t_π_fun_ext_ödex
) },

42 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

43 { 0xa7a2f3b4, 
__VMLINUX_SYMBOL_STR
(
cou¡2«no_˝uid
) },

44 { 0xb1bde420, 
__VMLINUX_SYMBOL_STR
(
π_whﬂmi
) },

45 { 0x12c0d4b7, 
__VMLINUX_SYMBOL_STR
(
π_èsk_su•íd
) },

46 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

47 { 0xf1dd92a8, 
__VMLINUX_SYMBOL_STR
(
π_¥ötk
) },

48 { 0x4e057c77, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡_˝uid
) },

49 { 0xf0fdf6cb, 
__VMLINUX_SYMBOL_STR
(
__°ack_chk_Áû
) },

50 { 0xdc2f79b2, 
__VMLINUX_SYMBOL_STR
(
π_smp_löux_èsk
) },

51 { 0x33e581ab, 
__VMLINUX_SYMBOL_STR
(
°¨t_π_timî
) },

52 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

53 { 0x67f7403e, 
__VMLINUX_SYMBOL_STR
(
_øw_•ö_lock
) },

54 { 0x8c98615, 
__VMLINUX_SYMBOL_STR
(
¥oc_¸óã_d©a
) },

55 { 0x1846a841, 
__VMLINUX_SYMBOL_STR
(
π_èsk_make_≥riodic
) },

56 { 0xf2cb2´0, 
__VMLINUX_SYMBOL_STR
(
£q_l£ek
) },

57 { 0xcdde3d26, 
__VMLINUX_SYMBOL_STR
(
πai_¥oc_roŸ
) },

58 { 0x329b03fd, 
__VMLINUX_SYMBOL_STR
(
π_busy_¶ìp
) },

59 { 0x6dìbc92, 
__VMLINUX_SYMBOL_STR
(
π_ªgi°î_w©chdog
) },

60 { 0x8b750b05, 
__VMLINUX_SYMBOL_STR
(
π_dîegi°î_w©chdog
) },

61 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

62 { 0x909a72e2, 
__VMLINUX_SYMBOL_STR
(
ª£t_π_fun_ext_ödex
) },

63 { 0xe914e41e, 
__VMLINUX_SYMBOL_STR
(
°r˝y
) },

66 c⁄° 
	g__moduÀ_dïíds
[]

67 
__u£d


68 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

72 
MODULE_INFO
(
§cvîsi⁄
, "A6308FA196B1DE15C0CF3DC");

	@/usr/src/rtai/base/wd/wd.c

99 
	~<löux/moduÀ.h
>

100 
	~<löux/öô.h
>

101 
	~<löux/vîsi⁄.h
>

102 
	~<asm/io.h
>

104 
MODULE_LICENSE
("GPL");

106 #ifde‡
CONFIG_PROC_FS


107 
	~<löux/°©.h
>

108 
	~<löux/¥oc_fs.h
>

109 
	~<πai_¥oc_fs.h
>

110 
¥oc_dú_íåy
 *
	gwd_¥oc
;

111 
PROC_READ_FUN
(
wdog_ªad_¥oc
);

114 
	~<πai_sched.h
>

115 
	~<πai_wd.h
>

119 #ifde‡
WDBUG


120 
	#LPT_PORT
 0x378

	)

121 
	#DBUG
 
WDLOG


	)

123 
	#DBUG
(
x
...)

	)

127 
	#MY_ALLOC


	)

128 #i‚de‡
MY_ALLOC


129 #ifde‡
CONFIG_RTAI_MALLOC


130 
	~<πai_mÆloc.h
>

132 
	#MY_ALLOC


135 #ifde‡
MY_ALLOC


	)

136 
	#BAD_TASK_MAX
 100

137 

	)

138 
DEFINE_SPINLOCK
(
Æloc_lock
);

139 
BAD_RT_TASK
 
	gbad_èsk_poﬁ
[
BAD_TASK_MAX
];

143 
	gvîsi⁄
[] = "$Revision: 1.16 $";

144 
	gvî
[10];

147 *
	gpﬁicy_«me
[] =

151 
	gnum_wdogs
;

152 
RT_TASK
 
	gwdog
[
NR_RT_CPUS
];

153 
RT_TASK
 *
	géi°s
[
NR_RT_CPUS
];

154 
BAD_RT_TASK
 *
	gbad_é
[
NR_RT_CPUS
];

158 
	gTickPîiod
 = 10000000;

159 
RTAI_MODULE_PARM
(
TickPîiod
, );

161 
	gwd_O√ShŸ
 = 1;

162 
RTAI_MODULE_PARM
(
wd_O√ShŸ
, );

164 
	gGø˚
 = 3;

165 
RTAI_MODULE_PARM
(
Gø˚
, );

167 
	gGø˚Div
 = 1;

168 
RTAI_MODULE_PARM
(
Gø˚Div
, );

170 
	gSa„ty
 = 100;

171 
RTAI_MODULE_PARM
(
Sa„ty
, );

173 
	gPﬁicy
 = 
WD_SUSPEND
;

174 
RTAI_MODULE_PARM
(
Pﬁicy
, );

176 
	gSåëch
 = 10;

177 
RTAI_MODULE_PARM
(
Såëch
, );

179 
	gSlù
 = 10;

180 
RTAI_MODULE_PARM
(
Slù
, );

182 
	gLimô
 = 100;

183 
RTAI_MODULE_PARM
(
Limô
, );

185 
	gLo›îTimeLimô
 = 100;

186 
RTAI_MODULE_PARM
(
Lo›îTimeLimô
, );

187 
	gLo›îLimô
;

190 
RTAI_SYSCALL_MODE
 
	$π_wd£t_gø˚
(
√w
)

192 
ﬁd
 = 
Gø˚
;

194 i‡(
Pﬁicy
 <
WD_STRETCH
 && 
√w
 !1Ë -
EINVAL
;

195 i‡(
√w
 < 1Ë -
EINVAL
;

196 
Gø˚
 = 
√w
;

197  
ﬁd
;

198 
	}
}

200 
RTAI_SYSCALL_MODE
 
	$π_wd£t_gø˚div
(
√w
)

202 
ﬁd
 = 
Gø˚Div
;

204 i‡(
Pﬁicy
 <
WD_STRETCH
 && 
√w
 !1Ë -
EINVAL
;

205 i‡(
√w
 < 1Ë -
EINVAL
;

206 
Gø˚Div
 = 
√w
;

207  
ﬁd
;

208 
	}
}

210 
RTAI_SYSCALL_MODE
 
	$π_wd£t_ß„ty
(
√w
)

212 
ﬁd
 = 
Sa„ty
;

214 i‡(
√w
 >0 &&Çew < 
Gø˚
Ë -
EINVAL
;

215 
Sa„ty
 = 
√w
;

216  
ﬁd
;

217 
	}
}

219 
RTAI_SYSCALL_MODE
 
wd_pﬁicy
 
	$π_wd£t_pﬁicy
(
wd_pﬁicy
 
√w
)

221 
wd_pﬁicy
 
ﬁd
 = 
Pﬁicy
;

223 i‡(
√w
 < 
WD_NOTHING
 ||Çew > 
WD_KILL
Ë -
EINVAL
;

224 i‡(
√w
 <
WD_STRETCH
Ë
Gø˚
 = 
Gø˚Div
 = 1;

225 i‡(
√w
 =
WD_DEBUG
Ë
Sa„ty
 = 
Limô
 = -1;

226 
Pﬁicy
 = 
√w
;

227  
ﬁd
;

228 
	}
}

230 
RTAI_SYSCALL_MODE
 
	$π_wd£t_¶ù
(
√w
)

232 
ﬁd
 = 
Slù
;

234 i‡(
√w
 < 0Ë -
EINVAL
;

235 
Slù
 = 
√w
;

236  
ﬁd
;

237 
	}
}

239 
RTAI_SYSCALL_MODE
 
	$π_wd£t_°ªtch
(
√w
)

241 
ﬁd
 = 
Såëch
;

243 i‡(
√w
 < 0Ë -
EINVAL
;

244 
Såëch
 = 
√w
;

245  
ﬁd
;

246 
	}
}

248 
RTAI_SYSCALL_MODE
 
	$π_wd£t_limô
(
√w
)

250 
ﬁd
 = 
Limô
;

252 
Limô
 = 
√w
;

253  
ﬁd
;

254 
	}
}

257 
BAD_RT_TASK
 *
	$√w_bad_èsk
()

259 #ifde‡
MY_ALLOC


260 
bt
;

262 
	`•ö_lock
(&
Æloc_lock
);

263 
bt
 = 0; bà< 
BAD_TASK_MAX
; bt++) {

264 i‡(!(
bad_èsk_poﬁ
[
bt
].
ö_u£
)) {

265 
bad_èsk_poﬁ
[
bt
].
ö_u£
 = 1;

266 
	`•ö_u∆ock
(&
Æloc_lock
);

267  &
bad_èsk_poﬁ
[
bt
];

270 
	`•ö_u∆ock
(&
Æloc_lock
);

271  
NULL
;

273  
	`π_mÆloc
((
BAD_RT_TASK
));

275 
	}
}

277 
	$‰ì_bad_èsk
(
BAD_RT_TASK
 *
bt
)

279 #ifde‡
MY_ALLOC


280 
bt
->
ö_u£
 = 0;

282 
	`π_‰ì
(
bt
);

284 
	}
}

287 
	$≠≥nd_bad_èsk
(
BAD_RT_TASK
 **
li°
, BAD_RT_TASK *
√w
)

289 
BAD_RT_TASK
 *
íd
 = *
li°
;

291 i‡(!
íd
) {

292 *
li°
 = 
√w
;

294 
íd
->
√xt
)Énd =Énd->next;

295 
íd
->
√xt
 = 
√w
;

297 
	}
}

299 
BAD_RT_TASK
 *
	$dñëe_bad_èsk
(
BAD_RT_TASK
 **
li°
, BAD_RT_TASK *
dñ
)

301 
BAD_RT_TASK
 *
πn
, *
bt
 = *
li°
;

303 i‡(
bt
 =
dñ
) {

304 
πn
 = *
li°
 = 
NULL
;

306 
bt
->
√xt
 !
dñ
) bt = bt->next;

307 
πn
 = 
bt
->
√xt
 = 
dñ
->next;

309 
	`‰ì_bad_èsk
(
dñ
);

310  
πn
;

311 
	}
}

313 
BAD_RT_TASK
 *
	$föd_bad_èsk
(
BAD_RT_TASK
 *
li°
, 
RT_TASK
 *
t
)

315 
BAD_RT_TASK
 *
bt
 = 
li°
;

317 
bt
) {

318 i‡(
bt
->
èsk
 =
t
) ;

319 
bt
 = bt->
√xt
;

321  
bt
;

322 
	}
}

325 
ölöe
 
	$which_˝u
(
RT_TASK
 *
t
)

327  
t
->
ru¬abÀ_⁄_˝us
;

328 
	}
}

331 
	$smµroof_èsk_su•íd
(
RT_TASK
 *
t
)

333 
˝uid
;

335 
	`π_èsk_su•íd
(
t
);

336 i‡((
˝uid
 = 
	`which_˝u
(
t
)Ë!
	`πai_˝uid
()) {

337 
	`DBUG
("Resumög dummy w©chdog %d\n", 
˝uid
);

338 
	`π_èsk_ªsume
(&
wdog
[
˝uid
]);

340 
	}
}

342 
	$smµroof_èsk_dñëe
(
RT_TASK
 *
t
)

344 
˝uid
;

346 
	`π_èsk_dñëe
(
t
);

347 i‡((
˝uid
 = 
	`which_˝u
(
t
)Ë!
	`πai_˝uid
()) {

348 
	`DBUG
("Resumög dummy w©chdog %d\n", 
˝uid
);

349 
	`π_èsk_ªsume
(&
wdog
[
˝uid
]);

351 
	}
}

354 
	$°ªtch_badèsk
(
RT_TASK
 *
t
, 
BAD_RT_TASK
 *
bt
, 
˝uid
)

357 
t
->
≥riod
 +
	`Œimd
(
bt
->
‹ig_≥riod
, 
Såëch
, 100);

358 
t
->
ªsync_‰ame
 = 1;

359 
	`DBUG
( "...by %d%%Åo %uns\n",

360 
Såëch
, ()
	`cou¡2«no_˝uid
(
t
->
≥riod
, 
˝uid
));

361 
	}
}

363 
	$°¨t_¶ùpög_badèsk
(
RT_TASK
 *
t
, 
BAD_RT_TASK
 *
bt
, 
˝uid
)

366 
bt
->
¶ùpög
 = 1;

367 
bt
->
cou¡down
 = 
	`Œimd
–Œimd(
	`cou¡2«no_˝uid
(
t
->
≥riod
, 
˝uid
), 
Slù
, 100),

369 
TickPîiod
);

370 
	`DBUG
( "SuspendingÅask 0x%X for %dÅicks (slip %d)\n",

371 
t
, 
bt
->
cou¡down
, bt->
cou¡
);

374 
	`smµroof_èsk_su•íd
(
t
);

375 
	}
}

377 
	$check_¶ùpög_badèsk
(
BAD_RT_TASK
 *
bt
)

380 i‡(--(
bt
->
cou¡down
) <= 0) {

381 
bt
->
¶ùpög
 = 0;

382 
	`π_èsk_ªsume
(
bt
->
èsk
);

383 
	`DBUG
("Föished slù %d o‡èsk 0x%X,Ñesumög\n", 
bt
->
cou¡
, bt->
èsk
);

385 
	}
}

388 
	$h™dÀ_badèsk
(
wd
, 
RT_TASK
 *
t
, 
BAD_RT_TASK
 *
bt
, 
RTIME
 
ovîrun
)

391 i‡(!
bt
) {

392 
bt
 = 
	`√w_bad_èsk
();

393 i‡(!
bt
) ;

394 
bt
->
èsk
 = 
t
;

395 
bt
->
√xt
 = 
NULL
;

396 
bt
->
¶ùpög
 = 0;

397 
bt
->
cou¡
 = 0;

398 
bt
->
cou¡down
 = 0;

399 
bt
->
vÆid
 = 1;

400 
bt
->
f‹˚d
 = 0;

401 
bt
->
‹ig_≥riod
 = 
t
->
≥riod
;

402 
	`≠≥nd_bad_èsk
(&
bad_é
[
wd
], 
bt
);

406 (
bt
->
cou¡
)++;

407 
bt
->
pﬁicy
 = 
Pﬁicy
;

410 i‡(!
ovîrun
) {

411 
bt
->
cou¡
 = - 
Lo›îTimeLimô
;

412 
bt
->
f‹˚d
 = 1;

413 
bt
->
pﬁicy
 = 
WD_SUSPEND
;

414 
bt
->
‹ig_≥riod
 = 0;

415 
	`WDLOG
("Su•ídögÅask %p\n", 
t
);

416 
	`smµroof_èsk_su•íd
(
t
);

421 i‡((
ovîrun
 >(
Sa„ty
 * 
bt
->
‹ig_≥riod
)) && (Safety >= 0)) {

422 
	`WDLOG
("F‹cög su•ísi⁄ o‡£vîñy ovîru¿èsk %p\n", 
t
);

423 
bt
->
f‹˚d
 = 1;

424 
	`smµroof_èsk_su•íd
(
t
);

429 i‡((
bt
->
cou¡
 >
Limô
) && (Limit >= 0)) {

430 
	`WDLOG
("Task %∞ªached of„n˚Üimô, su•ídög\n", 
t
);

431 
bt
->
f‹˚d
 = 1;

432 
	`smµroof_èsk_su•íd
(
t
);

437 
Pﬁicy
) {

439 
WD_NOTHING
:

442 
WD_RESYNC
:

443 
WD_DEBUG
:

444 
	`WDLOG
("Resynchr⁄isögÅask %p\n", 
t
);

445 
t
->
ªsync_‰ame
 = 1;

448 
WD_STRETCH
:

449 
	`WDLOG
("SåëchögÖîiod o‡èsk %p\n", 
t
);

450 
	`°ªtch_badèsk
(
t
, 
bt
, 
wd
);

453 
WD_SLIP
:

454 
	`WDLOG
("SlùpögÅask %p\n", 
t
);

455 
	`°¨t_¶ùpög_badèsk
(
t
, 
bt
, 
wd
);

458 
WD_SUSPEND
:

459 
	`WDLOG
("Su•ídögÅask %p\n", 
t
);

460 
	`smµroof_èsk_su•íd
(
t
);

463 
WD_KILL
:

464 
	`WDLOG
("KûlögÅask %p\n", 
t
);

465 
	`smµroof_èsk_dñëe
(
t
);

469 
	`WDLOG
("InvÆidÖﬁicy (%d)\n", 
Pﬁicy
);

472 
	}
}

474 
	$w©ch_lo›î
(
˝uid
, *
£lf
, 
BAD_RT_TASK
 *
bt
)

476 
RT_TASK
 
π_smp_löux_èsk
[];

477 
RT_TASK
 *
lxπ_¥ev_èsk
[];

478 
RT_TASK
 *
¥ev_èsk
[
NR_RT_CPUS
];

479 
¥ev_èsk_˙t
[
NR_RT_CPUS
];

480 
RT_TASK
 *
¥ev
 = 
lxπ_¥ev_èsk
[
˝uid
];

481 i‡(
¥ev
 =
¥ev_èsk
[
˝uid
] &&Öªv !&
π_smp_löux_èsk
[˝uid] &&Öªv !
£lf
 && !¥ev->
ªsync_‰ame
 && !¥ev->
≥riod
) {

482 i‡(++
¥ev_èsk_˙t
[
˝uid
] =
Lo›îLimô
) {

483 
	`WDLOG
("FoundÜo›îÅask %∞÷i° %d)\n", 
¥ev
, 
˝uid
);

484 
	`h™dÀ_badèsk
(
˝uid
, 
¥ev
, 
bt
, 0);

487 
¥ev_èsk
[
˝uid
] = 
¥ev
;

488 
¥ev_èsk_˙t
[
˝uid
] = 0;

490 
	}
}

493 
	$w©chdog
(
wd
)

495 #ifde‡
WDBUG


496 
Àd
 = 0;

497 
ouçut
 = 0x0000;

499 
RT_TASK
 *
èsk
, *
£lf
 = 
	`π_whﬂmi
();

500 
BAD_RT_TASK
 *
bt
;

501 
RTIME
 
now
, 
ovîrun
;

502 
™Ÿhî
, 
dog
;

505 #ifde‡
WDBUG


507 
Àd
 = !led;

508 i‡(
Àd
Ë
ouçut
 |(1 << 
wd
);

509 
ouçut
 &~(1 << 
wd
);

510 
	`outb
(
ouçut
, 
LPT_PORT
);

513 
now
 = 
	`π_gë_time_˝uid
(
wd
);

514 i‡(
now
 - 
£lf
->
ªsume_time
 >£lf->
≥riod
) {

515 
£lf
->
ªsync_‰ame
 = 1;

516 
	`π_èsk_waô_≥riod
();

517 
	`DBUG
("Resynchr⁄i£d w©chdog %d\n", 
wd
);

522 
bt
 = 
bad_é
[
wd
]; bt; bt->
vÆid
 = 0, bàbt->
√xt
);

525 
èsk
 = 
éi°s
[
wd
];

526 (
èsk
 =Åask->
√xt
)) {

529 i‡(
èsk
 =
£lf
) ;

530 
™Ÿhî
 = 
dog
 = 0; dog < 
num_wdogs
; dog++) {

531 i‡(
èsk
 =&
wdog
[
dog
]) {

532 
™Ÿhî
 = 1 + 
dog
;

538 i‡((
bt
 = 
	`föd_bad_èsk
(
bad_é
[
wd
], 
èsk
))) {

539 
bt
->
vÆid
 = 1;

540 i‡(
bt
->
¶ùpög
) {

541 
	`check_¶ùpög_badèsk
(
bt
);

547 i‡(!
èsk
->
≥riod
 ||Åask->
ªsync_‰ame
 ||Åask->
°©e
 &

548 (
RT_SCHED_SUSPENDED
|
RT_SCHED_DELAYED
|
RT_SCHED_SEMAPHORE
|
RT_SCHED_SEND
|
RT_SCHED_RECEIVE
|
RT_SCHED_RPC
|
RT_SCHED_RETURN
)) {

553 
ovîrun
 = 
now
 - 
èsk
->
ªsume_time
;

554 i‡(
ovîrun
 >
	`Œimd
(
èsk
->
≥riod
, 
Gø˚
, 
Gø˚Div
)) {

555 i‡(
™Ÿhî
--) {

556 
	`WDLOG
("WARNING: W©chdog %d i†ovîru¬ög\n", 
™Ÿhî
);

558 
	`WDLOG
("Found ovîru¬ögÅask %∞÷i° %d)\n", 
èsk
, 
wd
);

559 
	`h™dÀ_badèsk
(
wd
, 
èsk
, 
bt
, 
ovîrun
);

564 
	`w©ch_lo›î
(
wd
, 
£lf
, 
bt
);

567 
bt
 = 
bad_é
[
wd
]; bt;) {

568 i‡(!(
bt
->
vÆid
)) {

569 
bt
 = 
	`dñëe_bad_èsk
(&
bad_é
[
wd
], bt);

571 
bt
 = bt->
√xt
;

576 
	`π_èsk_waô_≥riod
();

578 
	}
}

581 
	$dummy
(
wd
)

585 
	`π_èsk_su•íd
(&
wdog
[
wd
]);

587 
	}
}

590 #ifde‡
CONFIG_PROC_FS


591 
	$PROC_READ_FUN
(
wdog_ªad_¥oc
)

593 
RT_TASK
 *
èsk
;

594 
BAD_RT_TASK
 *
bt
;

595 
⁄£c
, 
o£c
;

596 
™£c
, 
a£c
;

597 
˝uid
, 
é
, 
id
 = 1;

598 
a˘i⁄
[10];

599 
PROC_PRINT_VARS
;

602 
	`PROC_PRINT
("\nRTAI Watchdog Status\n");

603 
	`PROC_PRINT
( "--------------------\n");

604 
	`PROC_PRINT
("%d WatchdogÅask%sÑunning @ %dHz in %s mode\n",

605 
num_wdogs
,Çum_wdogs > 1 ? "s" : "",

606 ()
	`imuldiv
(
NSECS_PER_SEC
, 1, 
TickPîiod
),

607 
wd_O√ShŸ
 ? "oneshot" : "periodic");

608 #ifde‡
MY_ALLOC


609 
	`PROC_PRINT
("Usög sèti¯mem‹y m™agemíà(%dÉ¡rõs)\n", 
BAD_TASK_MAX
);

611 
	`PROC_PRINT
("Using dynamic memory management\n");

613 
	`PROC_PRINT
("Pﬁicy : '%s'\n", 
pﬁicy_«me
[
Pﬁicy
]);

614 
	`PROC_PRINT
("Gø˚Öîiod† : %d%s\n", 
Gø˚
,

615 (
Pﬁicy
 <
WD_STRETCH
) ? " (forced)" : "");

616 
	`PROC_PRINT
("Gø˚ divis‹ : %d%s\n", 
Gø˚Div
,

617 (
Pﬁicy
 <
WD_STRETCH
) ? " (forced)" : "");

618 
	`PROC_PRINT
("SafetyÜimit : ");

619 i‡(
Sa„ty
 < 0) {

620 
	`PROC_PRINT
("(disabled)\n");

622 
	`PROC_PRINT
("%dÖîiod%s\n", 
Sa„ty
, Safety > 1 ? "s" : "");

624 
	`PROC_PRINT
("Slù fa˘‹ : %d%%\n", 
Slù
);

625 
	`PROC_PRINT
("Såëch fa˘‹ : %d%%\n", 
Såëch
);

626 
	`PROC_PRINT
("OffenseÜimit : ");

627 i‡(
Limô
 < 0) {

628 
	`PROC_PRINT
("(disabled)\n");

630 
	`PROC_PRINT
("%d\n", 
Limô
);

632 
	`PROC_PRINT
("Lo›î†limô : %d ms\n", 
Lo›îTimeLimô
);

635 
	`PROC_PRINT
("\nBadÅasks...\n\n");

636 
	`PROC_PRINT
("RT Task ID "

642 
	`PROC_PRINT
("---------- -- "

648 
é
 = 0;Å»< 
num_wdogs
;Ål++) {

649 
èsk
 = 
éi°s
[
é
];

650 (
èsk
 =Åask->
√xt
)) {

651 i‡((
bt
 = 
	`föd_bad_èsk
(
bad_é
[
é
], 
èsk
))) {

652 i‡(
bt
->
f‹˚d
) {

653 
	`•rötf
(
a˘i⁄
, "%†*", 
pﬁicy_«me
[
WD_SUSPEND
]);

655 
	`°r˝y
(
a˘i⁄
, 
pﬁicy_«me
[
bt
->
pﬁicy
]);

657 
˝uid
 = 
èsk
->
ru¬abÀ_⁄_˝us
;

658 
o£c
 = 
	`uŒdiv
–
	`cou¡2«no_˝uid
(
bt
->
‹ig_≥riod
, 
˝uid
),

659 
NSECS_PER_SEC
,

660 &
⁄£c
);

661 
a£c
 = 
	`uŒdiv
–
	`cou¡2«no_˝uid
(
èsk
->
≥riod
, 
˝uid
),

662 
NSECS_PER_SEC
,

663 &
™£c
);

664 
	`PROC_PRINT
( "0x%08lx %-2d "

669 ()
èsk
, 
id
,

671 ()
èsk
->
ru¬abÀ_⁄_˝us
,

673 
èsk
->
¥i‹ôy
,Åask->
°©e
, 
bt
->
cou¡
,

674 ()
o£c
, ()
⁄£c
, ()
a£c
, ()
™£c
,

675 
a˘i⁄
);

677 
id
++;

680 
PROC_PRINT_DONE
;

681 
	}
}

686 
	~<πai_lxπ.h
>

688 
π_fun_íåy
 
	gπ_w©chdog_fun
[] 
__©åibuã__
 ((
__unu£d__
));

690 
π_fun_íåy
 
	gπ_w©chdog_fun
[] = {

691 [
WD_SET_GRACE
] = { 0, 
π_wd£t_gø˚
 },

692 [
WD_SET_GRACEDIV
] = { 0, 
π_wd£t_gø˚div
 },

693 [
WD_SET_SAFETY
] = { 0, 
π_wd£t_ß„ty
 },

694 [
WD_SET_POLICY
] = { 0, 
π_wd£t_pﬁicy
 },

695 [
WD_SET_SLIP
] = { 0, 
π_wd£t_¶ù
 },

696 [
WD_SET_STRETCH
] = { 0, 
π_wd£t_°ªtch
 },

697 [
WD_SET_LIMIT
] = { 0, 
π_wd£t_limô
 }

700 
PROC_READ_OPEN_OPS
(
πai_wdog_f›s
, 
wdog_ªad_¥oc
);

703 
	$__πai_wd_öô
()

705 
RTIME
 
≥riod
;

706 
dog
;

707 
RT_TASK
 *
 x0
;

708 *
c
;

710 if(
	`£t_π_fun_ext_ödex
(
π_w©chdog_fun
, 
WD_INDX
)) {

711 
	`¥ötk
("Recompile your module withá different index\n");

712  -
EACCES
;

715 i‡(
Pﬁicy
 <
WD_STRETCH
Ë
Gø˚
 = 
Gø˚Div
 = 1;

716 i‡(
Pﬁicy
 =
WD_DEBUG
Ë
Sa„ty
 = 
Limô
 = -1;

717 
Lo›îLimô
 = 
	`Œimd
(
Lo›îTimeLimô
, 1000000, 
TickPîiod
);

720 
num_wdogs
 = 
	`num_⁄löe_˝us
();

723 
 x0
 = 
	`π_gë_ba£_löux_èsk
(
éi°s
);

726 
dog
 = 0; dog < 
	`num_⁄löe_˝us
(); dog++) {

727 i‡(
	`π_ªgi°î_w©chdog
(&
wdog
[
dog
], dog) < 0) {

728 
	`WDLOG
("FaûedÅÿªgi°î w©chdog %d wôh RTAI scheduÀr\n", 
dog
);

729 
dog
--; dog >0; dog--Ë
	`π_dîegi°î_w©chdog
(&
wdog
[dog], dog);

730  -
EBUSY
;

735 i‡(
wd_O√ShŸ
) {

736 
	`°¨t_π_timî
(0);

738 
	`π_£t_≥riodic_mode
();

739 
	`°¨t_π_timî
(()
	`«no2cou¡
(
TickPîiod
));

744 
dog
 = 0; dog < 
	`num_⁄löe_˝us
(); dog++) {

745 
	`π_èsk_öô_˝uid
(&
wdog
[
dog
],

746 (
dog
 < 
num_wdogs
Ë? 
w©chdog
 : 
dummy
,

747 
dog
, 2000, 
RT_SCHED_HIGHEST_PRIORITY
, 0, 0, dog);

749 
dog
 = 0; dog < 
num_wdogs
; dog++) {

750 
≥riod
 = 
	`«no2cou¡_˝uid
(
TickPîiod
, 
dog
);

751 
	`π_èsk_make_≥riodic
(&
wdog
[
dog
],

752 
	`π_gë_time_˝uid
(
dog
Ë+ 
≥riod
,

753 
≥riod
);

757 i‡((
c
 = 
	`°rchr
(
vîsi⁄
, ' '))) {

758 *(
	`°rchr
(
c
, '$')) = '\0';

759 
	`°r˝y
(
vî
, 
c
 + 1);

761 
	`°r˝y
(
vî
, "? ");

765 
	`WDLOG
( "loaded.\n");

766 
	`WDLOG
( "%d WatchdogÅask%sÑunning @ %dHz in %s mode\n",

767 
num_wdogs
,Çum_wdogs > 1 ? "s" : "",

768 
	`imuldiv
(
NSECS_PER_SEC
, 1, 
TickPîiod
),

769 
wd_O√ShŸ
 ? "oneshot" : "periodic");

770 #ifde‡
MY_ALLOC


771 
	`WDLOG
–"Usög sèti¯mem‹y m™agemíà(%dÉ¡rõs)\n", 
BAD_TASK_MAX
);

773 
	`WDLOG
( "Using dynamic memory management\n");

775 
	`WDLOG
–"Pﬁicy : '%s'\n", 
pﬁicy_«me
[
Pﬁicy
]);

776 
	`WDLOG
–"Gø˚Öîiod† : %d%s\n", 
Gø˚
,

777 (
Pﬁicy
 <
WD_STRETCH
) ? " (forced)" : "");

778 
	`WDLOG
–"Gø˚ divis‹ : %d%s\n", 
Gø˚Div
,

779 (
Pﬁicy
 <
WD_STRETCH
) ? " (forced)" : "");

780 
	`WDLOG
( "SafetyÜimit : ");

781 i‡(
Sa„ty
 < 0) {

782 
	`π_¥ötk
("(disabled)\n");

784 
	`π_¥ötk
("%dÖîiod%s\n", 
Sa„ty
, Safety > 1 ? "s" : " ");

786 
	`WDLOG
–"Slù fa˘‹ : %d%%\n", 
Slù
);

787 
	`WDLOG
–"Såëch fa˘‹ : %d%%\n", 
Såëch
);

788 
	`WDLOG
( "OffenseÜimit : ");

789 i‡(
Limô
 < 0) {

790 
	`π_¥ötk
("(disabled)\n");

792 
	`π_¥ötk
("%d\n", 
Limô
);

794 
	`WDLOG
–"Lo›î†limô : %d ms\n", 
Lo›îTimeLimô
);

796 #ifde‡
CONFIG_PROC_FS


798 
wd_¥oc
 = 
	`CREATE_PROC_ENTRY
("w©chdog", 0, 
πai_¥oc_roŸ
, &
πai_wdog_f›s
);

799 
	`SET_PROC_READ_ENTRY
(
wd_¥oc
, 
wdog_ªad_¥oc
);

802 
	}
}

804 
	$__πai_wd_exô
()

806 
BAD_RT_TASK
 *
bt
;

807 
dog
;

809 #ifde‡
CONFIG_PROC_FS


811 
	`ªmove_¥oc_íåy
("w©chdog", 
πai_¥oc_roŸ
);

814 
dog
 = 0; dog < 
	`num_⁄löe_˝us
(); dog++) {

815 
	`π_dîegi°î_w©chdog
(&
wdog
[
dog
], dog);

817 
	`°›_π_timî
();

818 
	`π_busy_¶ìp
(
TickPîiod
);

821 
dog
 = 0; dog < 
	`num_⁄löe_˝us
(); dog++) {

822 
	`π_èsk_dñëe
(&
wdog
[
dog
]);

823 i‡(
dog
 < 
num_wdogs
) {

824 
bt
 = 
bad_é
[
dog
]; bt;) {

825 
bt
 = 
	`dñëe_bad_èsk
(&
bad_é
[
dog
], bt);

830 
	`ª£t_π_fun_ext_ödex
(
π_w©chdog_fun
, 
WD_INDX
);

833 
	`WDLOG
("unloaded.\n");

834 
	}
}

836 
moduÀ_öô
(
__πai_wd_öô
);

837 
moduÀ_exô
(
__πai_wd_exô
);

839 
EXPORT_SYMBOL
(
π_wd£t_gø˚
);

840 
EXPORT_SYMBOL
(
π_wd£t_gø˚div
);

841 
EXPORT_SYMBOL
(
π_wd£t_ß„ty
);

842 
EXPORT_SYMBOL
(
π_wd£t_pﬁicy
);

843 
EXPORT_SYMBOL
(
π_wd£t_¶ù
);

844 
EXPORT_SYMBOL
(
π_wd£t_°ªtch
);

845 
EXPORT_SYMBOL
(
π_wd£t_limô
);

	@periodic_task.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/moduÀ.h
>

3 
	~<löux/vîsi⁄.h
>

5 
	~"πai.h
"

6 
	~"πai_sched.h
"

10 #i‡! 
deföed
(
RT_LOWEST_PRIORITY
)

11 #i‡
deföed
(
RT_SCHED_LOWEST_PRIORITY
)

12 
	#RT_LOWEST_PRIORITY
 
RT_SCHED_LOWEST_PRIORITY


	)

14 #îr‹ 
RT_SCHED_LOWEST_PRIORITY
 
nŸ
 
deföed


18 
	~<löux/î∫o.h
>

20 
MODULE_LICENSE
("GPL");

22 
	#TIMER_TO_CPU
 3

23 
	#RUNNABLE_ON_CPUS
 3

24 
	#RUN_ON_CPUS
 (
	`num_⁄löe_˝us
(Ë> 1 ? 
RUNNABLE_ON_CPUS
 : 1)

	)

26 
	gtimî_mode
 = 1;

27 
RTAI_MODULE_PARM
(
timî_mode
, );

28 
MODULE_PARM_DESC
(
timî_mode
, "timerÑunning mode: 0-oneshot, 1-periodic");

30 
RT_TASK
 
	gèsk
;

31 
RTIME
 
	g≥riod_ns
 = 100000000;

32 
RTIME
 
	g≥riod_cou¡
;

33 
RTIME
 
	gtimî_≥riod_cou¡
;

34 
RTIME
 
	gex≥˘ed
;

36 
	gcou¡î
 = 0;

37 
	g°¨t_timî
 = 0;

39 
	$thªad_func
(
¨g
)

41 
diff
 = 0;

42 
RTIME
 
t
, 
svt
;

43 
svt
 = 
	`π_gë_˝u_time_ns
();

46 
ex≥˘ed
 +
timî_≥riod_cou¡
;

47 if(!
	`π_èsk_waô_≥riod
()) {

48 if(!
timî_mode
) {

49 
diff
 = (Ë
	`cou¡2«no
(
	`π_gë_time
(Ë- 
ex≥˘ed
);

51 
diff
 = (Ë((
t
 = 
	`π_gë_˝u_time_ns
()Ë- 
svt
 - 
≥riod_ns
);

52 
svt
 = 
t
;

54 
	`¥ötk
("dif‡%dÇs\n", 
diff
);

56 
	`¥ötk
("rt_task_wait_period() != 0 \n");

62 
	}
}

64 
	$öô_moduÀ
()

66 
ªtvÆ
;

68 
	`¥ötk
("timî_nodêi†%s\n", 
timî_mode
 ? "periodic" : "oneshot");

70 
ªtvÆ
 =

71 
	`π_èsk_öô
(&
èsk
,

72 
thªad_func
,

75 
RT_LOWEST_PRIORITY
,

78 i‡(0 !
ªtvÆ
) {

79 
	`¥ötk
("rt_task_initÉrror\n");

80  
ªtvÆ
;

83 
	`π_£t_ru¬abÀ_⁄_˝us
(&
èsk
, 
RUN_ON_CPUS
);

84 i‡(
timî_mode
) {

85 
	`π_£t_≥riodic_mode
();

87 
	`π_£t_⁄eshŸ_mode
();

89 
	`π_assign_úq_to_˝u
(
TIMER_8254_IRQ
, 
TIMER_TO_CPU
);

90 
≥riod_cou¡
 = 
	`«no2cou¡
(
≥riod_ns
);

91 
timî_≥riod_cou¡
 = 
	`°¨t_π_timî
(
≥riod_cou¡
);

93 
ex≥˘ed
 = 
	`π_gë_time
(Ë+ 
≥riod_cou¡
;

94 
ªtvÆ
 =

95 
	`π_èsk_make_≥riodic
(&
èsk
,

97 
ex≥˘ed
,

98 
timî_≥riod_cou¡
);

99 i‡(0 !
ªtvÆ
) {

100 
	`¥ötk
("rt_task_make_periodicÉrror\n");

101  
ªtvÆ
;

105 
	}
}

107 
	$˛ónup_moduÀ
()

109 
ªtvÆ
;

111 i‡(
°¨t_timî
) {

112 
	`π_ª£t_úq_to_sym_mode
(
TIMER_8254_IRQ
);

113 
	`°›_π_timî
();

116 
ªtvÆ
 = 
	`π_èsk_dñëe
(&
èsk
);

118 i‡(0 !
ªtvÆ
) {

119 
	`¥ötk
("periodicÅask:Érror stoppingÅask\n");

122 
	`¥ötk
("cou¡î = %d\n", 
cou¡î
);

124 
	}
}

	@periodic_task.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
("__versions"))) = {

20 { 0x6c54a727, 
__VMLINUX_SYMBOL_STR
(
moduÀ_œyout
) },

21 { 0x15692c87, 
__VMLINUX_SYMBOL_STR
(
∑øm_›s_öt
) },

22 { 0xf46a8afb, 
__VMLINUX_SYMBOL_STR
(
°›_π_timî
) },

23 { 0xe57a5e63, 
__VMLINUX_SYMBOL_STR
(
π_ª£t_úq_to_sym_mode
) },

24 { 0x25c757e3, 
__VMLINUX_SYMBOL_STR
(
π_èsk_dñëe
) },

25 { 0xe00b12ˇ, 
__VMLINUX_SYMBOL_STR
(
π_£t_≥riodic_mode
) },

26 { 0x1846a841, 
__VMLINUX_SYMBOL_STR
(
π_èsk_make_≥riodic
) },

27 { 0x33e581ab, 
__VMLINUX_SYMBOL_STR
(
°¨t_π_timî
) },

28 { 0xe2e67707, 
__VMLINUX_SYMBOL_STR
(
«no2cou¡
) },

29 { 0xa05a4b6b, 
__VMLINUX_SYMBOL_STR
(
π_assign_úq_to_˝u
) },

30 { 0xeb73855b, 
__VMLINUX_SYMBOL_STR
(
π_£t_⁄eshŸ_mode
) },

31 { 0xdb1b8daf, 
__VMLINUX_SYMBOL_STR
(
π_£t_ru¬abÀ_⁄_˝us
) },

32 { 0x9f46˚d8, 
__VMLINUX_SYMBOL_STR
(
__sw_hweight64
) },

33 { 0x2d37342e, 
__VMLINUX_SYMBOL_STR
(
˝u_⁄löe_mask
) },

34 { 0x53cb81f1, 
__VMLINUX_SYMBOL_STR
(
π_èsk_öô
) },

35 { 0x27e1a049, 
__VMLINUX_SYMBOL_STR
(
¥ötk
) },

36 { 0x22040e90, 
__VMLINUX_SYMBOL_STR
(
cou¡2«no
) },

37 { 0x287˚940, 
__VMLINUX_SYMBOL_STR
(
π_gë_time
) },

38 { 0xa6e8109e, 
__VMLINUX_SYMBOL_STR
(
π_èsk_waô_≥riod
) },

39 { 0x9713066a, 
__VMLINUX_SYMBOL_STR
(
π_gë_˝u_time_ns
) },

40 { 0xbdfb6dbb, 
__VMLINUX_SYMBOL_STR
(
__„¡ry__
) },

43 c⁄° 
	g__moduÀ_dïíds
[]

44 
__u£d


45 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

49 
MODULE_INFO
(
§cvîsi⁄
, "27642A0762D78173F59F4B8");

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_ASM_X86_PTRACE_H


2 
	#_ASM_X86_PTRACE_H


	)

5 
	~<asm/±ø˚-abi.h
>

6 
	~<asm/¥o˚ss‹-Êags.h
>

9 #i‚de‡
__ASSEMBLY__


11 #ifde‡
__i386__


16 
	s±_ªgs
 {

17 
	mebx
;

18 
	mecx
;

19 
	medx
;

20 
	mesi
;

21 
	medi
;

22 
	mebp
;

23 
	móx
;

24 
	mxds
;

25 
	mxes
;

26 
	mxfs
;

27 
	mxgs
;

28 
	m‹ig_óx
;

29 
	meù
;

30 
	mxcs
;

31 
	meÊags
;

32 
	me•
;

33 
	mxss
;

40 
	s±_ªgs
 {

41 
	mr15
;

42 
	mr14
;

43 
	mr13
;

44 
	mr12
;

45 
	mrbp
;

46 
	mrbx
;

48 
	mr11
;

49 
	mr10
;

50 
	mr9
;

51 
	mr8
;

52 
	møx
;

53 
	mrcx
;

54 
	mrdx
;

55 
	mrsi
;

56 
	mrdi
;

57 
	m‹ig_øx
;

60 
	mrù
;

61 
	mcs
;

62 
	meÊags
;

63 
	mr•
;

64 
	mss
;

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/fcntl.h

1 #i‚de‡
_LINUX_FCNTL_H


2 
	#_LINUX_FCNTL_H


	)

4 
	~<asm/f˙é.h
>

6 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 0)

	)

7 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 1)

	)

13 
	#F_CANCELLK
 (
F_LINUX_SPECIFIC_BASE
 + 5)

	)

16 
	#F_DUPFD_CLOEXEC
 (
F_LINUX_SPECIFIC_BASE
 + 6)

	)

22 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

27 
	#F_SETPIPE_SZ
 (
F_LINUX_SPECIFIC_BASE
 + 7)

	)

28 
	#F_GETPIPE_SZ
 (
F_LINUX_SPECIFIC_BASE
 + 8)

	)

33 
	#DN_ACCESS
 0x00000001

	)

34 
	#DN_MODIFY
 0x00000002

	)

35 
	#DN_CREATE
 0x00000004

	)

36 
	#DN_DELETE
 0x00000008

	)

37 
	#DN_RENAME
 0x00000010

	)

38 
	#DN_ATTRIB
 0x00000020

	)

39 
	#DN_MULTISHOT
 0x80000000

	)

41 
	#AT_FDCWD
 -100

	)

44 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

45 
	#AT_REMOVEDIR
 0x200

	)

47 
	#AT_SYMLINK_FOLLOW
 0x400

	)

48 
	#AT_NO_AUTOMOUNT
 0x800

	)

49 
	#AT_EMPTY_PATH
 0x1000

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	sf°rim_ønge
 {

39 
__u64
 
	m°¨t
;

40 
__u64
 
	mÀn
;

41 
__u64
 
	mmöÀn
;

45 
	sfûes_°©_°ru˘
 {

46 
	mƒ_fûes
;

47 
	mƒ_‰ì_fûes
;

48 
	mmax_fûes
;

51 
	söodes_°©_t
 {

52 
	mƒ_öodes
;

53 
	mƒ_unu£d
;

54 
	mdummy
[5];

58 
	#NR_FILE
 8192

	)

64 
	#MS_RDONLY
 1

	)

65 
	#MS_NOSUID
 2

	)

66 
	#MS_NODEV
 4

	)

67 
	#MS_NOEXEC
 8

	)

68 
	#MS_SYNCHRONOUS
 16

	)

69 
	#MS_REMOUNT
 32

	)

70 
	#MS_MANDLOCK
 64

	)

71 
	#MS_DIRSYNC
 128

	)

72 
	#MS_NOATIME
 1024

	)

73 
	#MS_NODIRATIME
 2048

	)

74 
	#MS_BIND
 4096

	)

75 
	#MS_MOVE
 8192

	)

76 
	#MS_REC
 16384

	)

77 
	#MS_VERBOSE
 32768

	)

79 
	#MS_SILENT
 32768

	)

80 
	#MS_POSIXACL
 (1<<16Ë

	)

81 
	#MS_UNBINDABLE
 (1<<17Ë

	)

82 
	#MS_PRIVATE
 (1<<18Ë

	)

83 
	#MS_SLAVE
 (1<<19Ë

	)

84 
	#MS_SHARED
 (1<<20Ë

	)

85 
	#MS_RELATIME
 (1<<21Ë

	)

86 
	#MS_KERNMOUNT
 (1<<22Ë

	)

87 
	#MS_I_VERSION
 (1<<23Ë

	)

88 
	#MS_STRICTATIME
 (1<<24Ë

	)

91 
	#MS_NOSEC
 (1<<28)

	)

92 
	#MS_BORN
 (1<<29)

	)

93 
	#MS_ACTIVE
 (1<<30)

	)

94 
	#MS_NOUSER
 (1<<31)

	)

99 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

104 
	#MS_MGC_VAL
 0xC0ED0000

	)

105 
	#MS_MGC_MSK
 0xffff0000

	)

110 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

111 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

112 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

113 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

114 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

115 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

116 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

117 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

118 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

119 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

120 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

121 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

123 
	#BLKPG
 
	`_IO
(0x12,105)

	)

127 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

128 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

133 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

134 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

135 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

136 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

137 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

138 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

139 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

140 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

141 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

142 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

143 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

144 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

145 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

146 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

147 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

148 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

150 
	#BMAP_IOCTL
 1

	)

151 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

152 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

153 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

154 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

155 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

157 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

158 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

159 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

160 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

161 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

162 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

163 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

164 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

165 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

170 
	#FS_SECRM_FL
 0x00000001

	)

171 
	#FS_UNRM_FL
 0x00000002

	)

172 
	#FS_COMPR_FL
 0x00000004

	)

173 
	#FS_SYNC_FL
 0x00000008

	)

174 
	#FS_IMMUTABLE_FL
 0x00000010

	)

175 
	#FS_APPEND_FL
 0x00000020

	)

176 
	#FS_NODUMP_FL
 0x00000040

	)

177 
	#FS_NOATIME_FL
 0x00000080

	)

179 
	#FS_DIRTY_FL
 0x00000100

	)

180 
	#FS_COMPRBLK_FL
 0x00000200

	)

181 
	#FS_NOCOMP_FL
 0x00000400

	)

182 
	#FS_ECOMPR_FL
 0x00000800

	)

184 
	#FS_BTREE_FL
 0x00001000

	)

185 
	#FS_INDEX_FL
 0x00001000

	)

186 
	#FS_IMAGIC_FL
 0x00002000

	)

187 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

188 
	#FS_NOTAIL_FL
 0x00008000

	)

189 
	#FS_DIRSYNC_FL
 0x00010000

	)

190 
	#FS_TOPDIR_FL
 0x00020000

	)

191 
	#FS_EXTENT_FL
 0x00080000

	)

192 
	#FS_DIRECTIO_FL
 0x00100000

	)

193 
	#FS_NOCOW_FL
 0x00800000

	)

194 
	#FS_RESERVED_FL
 0x80000000

	)

196 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

197 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

200 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

201 
	#SYNC_FILE_RANGE_WRITE
 2

	)

202 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/mman.h

1 #i‚de‡
_LINUX_MMAN_H


2 
	#_LINUX_MMAN_H


	)

4 
	~<asm/mm™.h
>

6 
	#MREMAP_MAYMOVE
 1

	)

7 
	#MREMAP_FIXED
 2

	)

9 
	#OVERCOMMIT_GUESS
 0

	)

10 
	#OVERCOMMIT_ALWAYS
 1

	)

11 
	#OVERCOMMIT_NEVER
 2

	)

	@/usr/include/linux/net.h

18 #i‚de‡
_LINUX_NET_H


19 
	#_LINUX_NET_H


	)

21 
	~<löux/sockë.h
>

22 
	~<asm/sockë.h
>

24 
	#NPROTO
 
AF_MAX


	)

26 
	#SYS_SOCKET
 1

	)

27 
	#SYS_BIND
 2

	)

28 
	#SYS_CONNECT
 3

	)

29 
	#SYS_LISTEN
 4

	)

30 
	#SYS_ACCEPT
 5

	)

31 
	#SYS_GETSOCKNAME
 6

	)

32 
	#SYS_GETPEERNAME
 7

	)

33 
	#SYS_SOCKETPAIR
 8

	)

34 
	#SYS_SEND
 9

	)

35 
	#SYS_RECV
 10

	)

36 
	#SYS_SENDTO
 11

	)

37 
	#SYS_RECVFROM
 12

	)

38 
	#SYS_SHUTDOWN
 13

	)

39 
	#SYS_SETSOCKOPT
 14

	)

40 
	#SYS_GETSOCKOPT
 15

	)

41 
	#SYS_SENDMSG
 16

	)

42 
	#SYS_RECVMSG
 17

	)

43 
	#SYS_ACCEPT4
 18

	)

44 
	#SYS_RECVMMSG
 19

	)

45 
	#SYS_SENDMMSG
 20

	)

48 
	mSS_FREE
 = 0,

49 
	mSS_UNCONNECTED
,

50 
	mSS_CONNECTING
,

51 
	mSS_CONNECTED
,

52 
	mSS_DISCONNECTING


53 } 
	tsockë_°©e
;

55 
	#__SO_ACCEPTCON
 (1 << 16Ë

	)

	@/usr/include/linux/oom.h

1 #i‚de‡
__INCLUDE_LINUX_OOM_H


2 
	#__INCLUDE_LINUX_OOM_H


	)

8 
	#OOM_SCORE_ADJ_MIN
 (-1000)

	)

9 
	#OOM_SCORE_ADJ_MAX
 1000

	)

15 
	#OOM_DISABLE
 (-17)

	)

17 
	#OOM_ADJUST_MIN
 (-16)

	)

18 
	#OOM_ADJUST_MAX
 15

	)

	@/usr/include/linux/pci.h

17 #i‚de‡
LINUX_PCI_H


18 
	#LINUX_PCI_H


	)

20 
	~<löux/pci_ªgs.h
>

30 
	#PCI_DEVFN
(
¶Ÿ
, 
func
Ë((((¶ŸË& 0x1fË<< 3Ë| ((funcË& 0x07))

	)

31 
	#PCI_SLOT
(
dev‚
Ë(((dev‚Ë>> 3Ë& 0x1f)

	)

32 
	#PCI_FUNC
(
dev‚
Ë((dev‚Ë& 0x07)

	)

35 
	#PCIIOC_BASE
 ('P' << 24 | 'C' << 16 | 'I' << 8)

	)

36 
	#PCIIOC_CONTROLLER
 (
PCIIOC_BASE
 | 0x00Ë

	)

37 
	#PCIIOC_MMAP_IS_IO
 (
PCIIOC_BASE
 | 0x01Ë

	)

38 
	#PCIIOC_MMAP_IS_MEM
 (
PCIIOC_BASE
 | 0x02Ë

	)

39 
	#PCIIOC_WRITE_COMBINE
 (
PCIIOC_BASE
 | 0x03Ë

	)

	@/usr/include/linux/poll.h

1 
	~<asm/pﬁl.h
>

	@/usr/include/linux/reboot.h

1 #i‚de‡
_LINUX_REBOOT_H


2 
	#_LINUX_REBOOT_H


	)

8 
	#LINUX_REBOOT_MAGIC1
 0x„e1dód

	)

9 
	#LINUX_REBOOT_MAGIC2
 672274793

	)

10 
	#LINUX_REBOOT_MAGIC2A
 85072278

	)

11 
	#LINUX_REBOOT_MAGIC2B
 369367448

	)

12 
	#LINUX_REBOOT_MAGIC2C
 537993216

	)

28 
	#LINUX_REBOOT_CMD_RESTART
 0x01234567

	)

29 
	#LINUX_REBOOT_CMD_HALT
 0xCDEF0123

	)

30 
	#LINUX_REBOOT_CMD_CAD_ON
 0x89ABCDEF

	)

31 
	#LINUX_REBOOT_CMD_CAD_OFF
 0x00000000

	)

32 
	#LINUX_REBOOT_CMD_POWER_OFF
 0x4321FEDC

	)

33 
	#LINUX_REBOOT_CMD_RESTART2
 0xA1B2C3D4

	)

34 
	#LINUX_REBOOT_CMD_SW_SUSPEND
 0xD000FCE2

	)

35 
	#LINUX_REBOOT_CMD_KEXEC
 0x45584543

	)

	@/usr/include/linux/rtc.h

11 #i‚de‡
_LINUX_RTC_H_


12 
	#_LINUX_RTC_H_


	)

20 
	sπc_time
 {

21 
	mtm_£c
;

22 
	mtm_mö
;

23 
	mtm_hour
;

24 
	mtm_mday
;

25 
	mtm_m⁄
;

26 
	mtm_yór
;

27 
	mtm_wday
;

28 
	mtm_yday
;

29 
	mtm_isd°
;

36 
	sπc_wkÆrm
 {

37 
	míabÀd
;

38 
	m≥ndög
;

39 
πc_time
 
	mtime
;

55 
	sπc_∂l_öfo
 {

56 
	m∂l_˘æ
;

57 
	m∂l_vÆue
;

58 
	m∂l_max
;

59 
	m∂l_mö
;

60 
	m∂l_posmu…
;

61 
	m∂l_√gmu…
;

62 
	m∂l_˛ock
;

70 
	#RTC_AIE_ON
 
	`_IO
('p', 0x01Ë

	)

71 
	#RTC_AIE_OFF
 
	`_IO
('p', 0x02Ë

	)

72 
	#RTC_UIE_ON
 
	`_IO
('p', 0x03Ë

	)

73 
	#RTC_UIE_OFF
 
	`_IO
('p', 0x04Ë

	)

74 
	#RTC_PIE_ON
 
	`_IO
('p', 0x05Ë

	)

75 
	#RTC_PIE_OFF
 
	`_IO
('p', 0x06Ë

	)

76 
	#RTC_WIE_ON
 
	`_IO
('p', 0x0fË

	)

77 
	#RTC_WIE_OFF
 
	`_IO
('p', 0x10Ë

	)

79 
	#RTC_ALM_SET
 
	`_IOW
('p', 0x07, 
πc_time
Ë

	)

80 
	#RTC_ALM_READ
 
	`_IOR
('p', 0x08, 
πc_time
Ë

	)

81 
	#RTC_RD_TIME
 
	`_IOR
('p', 0x09, 
πc_time
Ë

	)

82 
	#RTC_SET_TIME
 
	`_IOW
('p', 0x0a, 
πc_time
Ë

	)

83 
	#RTC_IRQP_READ
 
	`_IOR
('p', 0x0b, Ë

	)

84 
	#RTC_IRQP_SET
 
	`_IOW
('p', 0x0c, Ë

	)

85 
	#RTC_EPOCH_READ
 
	`_IOR
('p', 0x0d, Ë

	)

86 
	#RTC_EPOCH_SET
 
	`_IOW
('p', 0x0e, Ë

	)

88 
	#RTC_WKALM_SET
 
	`_IOW
('p', 0x0f, 
πc_wkÆrm
)

	)

89 
	#RTC_WKALM_RD
 
	`_IOR
('p', 0x10, 
πc_wkÆrm
)

	)

91 
	#RTC_PLL_GET
 
	`_IOR
('p', 0x11, 
πc_∂l_öfo
Ë

	)

92 
	#RTC_PLL_SET
 
	`_IOW
('p', 0x12, 
πc_∂l_öfo
Ë

	)

94 
	#RTC_VL_READ
 
	`_IOR
('p', 0x13, Ë

	)

95 
	#RTC_VL_CLR
 
	`_IO
('p', 0x14Ë

	)

98 
	#RTC_IRQF
 0x80

	)

99 
	#RTC_PF
 0x40

	)

100 
	#RTC_AF
 0x20

	)

101 
	#RTC_UF
 0x10

	)

104 
	#RTC_MAX_FREQ
 8192

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

43 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

5 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

7 
	#S_IFMT
 00170000

	)

8 
	#S_IFSOCK
 0140000

	)

9 
	#S_IFLNK
 0120000

	)

10 
	#S_IFREG
 0100000

	)

11 
	#S_IFBLK
 0060000

	)

12 
	#S_IFDIR
 0040000

	)

13 
	#S_IFCHR
 0020000

	)

14 
	#S_IFIFO
 0010000

	)

15 
	#S_ISUID
 0004000

	)

16 
	#S_ISGID
 0002000

	)

17 
	#S_ISVTX
 0001000

	)

19 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

20 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

21 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

22 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

23 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

24 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

25 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

27 
	#S_IRWXU
 00700

	)

28 
	#S_IRUSR
 00400

	)

29 
	#S_IWUSR
 00200

	)

30 
	#S_IXUSR
 00100

	)

32 
	#S_IRWXG
 00070

	)

33 
	#S_IRGRP
 00040

	)

34 
	#S_IWGRP
 00020

	)

35 
	#S_IXGRP
 00010

	)

37 
	#S_IRWXO
 00007

	)

38 
	#S_IROTH
 00004

	)

39 
	#S_IWOTH
 00002

	)

40 
	#S_IXOTH
 00001

	)

	@/usr/include/linux/stddef.h

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/linux/termios.h

1 #i‚de‡
_LINUX_TERMIOS_H


2 
	#_LINUX_TERMIOS_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/ãrmios.h
>

7 
	#NFF
 5

	)

9 
	sãrmiox


11 
__u16
 
	mx_hÊag
;

12 
__u16
 
	mx_cÊag
;

13 
__u16
 
	mx_rÊag
[
NFF
];

14 
__u16
 
	mx_sÊag
;

17 
	#RTSXOFF
 0x0001

	)

18 
	#CTSXON
 0x0002

	)

19 
	#DTRXOFF
 0x0004

	)

20 
	#DSRXON
 0x0008

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/timex.h

53 #i‚de‡
_LINUX_TIMEX_H


54 
	#_LINUX_TIMEX_H


	)

56 
	~<löux/time.h
>

58 
	#NTP_API
 4

	)

64 
	stimex
 {

65 
	mmodes
;

66 
	moff£t
;

67 
	m‰eq
;

68 
	mmaxîr‹
;

69 
	me°îr‹
;

70 
	m°©us
;

71 
	mc⁄°™t
;

72 
	m¥ecisi⁄
;

73 
	mtﬁî™˚
;

76 
timevÆ
 
	mtime
;

77 
	mtick
;

79 
	mµs‰eq
;

80 
	mjôãr
;

81 
	mshi·
;

82 
	m°abû
;

83 
	mjô˙t
;

84 
	mˇl˙t
;

85 
	mîr˙t
;

86 
	m°b˙t
;

88 
	mèi
;

98 
	#ADJ_OFFSET
 0x0001

	)

99 
	#ADJ_FREQUENCY
 0x0002

	)

100 
	#ADJ_MAXERROR
 0x0004

	)

101 
	#ADJ_ESTERROR
 0x0008

	)

102 
	#ADJ_STATUS
 0x0010

	)

103 
	#ADJ_TIMECONST
 0x0020

	)

104 
	#ADJ_TAI
 0x0080

	)

105 
	#ADJ_SETOFFSET
 0x0100

	)

106 
	#ADJ_MICRO
 0x1000

	)

107 
	#ADJ_NANO
 0x2000

	)

108 
	#ADJ_TICK
 0x4000

	)

110 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

111 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

114 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

115 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

116 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

117 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

118 
	#MOD_STATUS
 
ADJ_STATUS


	)

119 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

120 
	#MOD_TAI
 
ADJ_TAI


	)

121 
	#MOD_MICRO
 
ADJ_MICRO


	)

122 
	#MOD_NANO
 
ADJ_NANO


	)

128 
	#STA_PLL
 0x0001

	)

129 
	#STA_PPSFREQ
 0x0002

	)

130 
	#STA_PPSTIME
 0x0004

	)

131 
	#STA_FLL
 0x0008

	)

133 
	#STA_INS
 0x0010

	)

134 
	#STA_DEL
 0x0020

	)

135 
	#STA_UNSYNC
 0x0040

	)

136 
	#STA_FREQHOLD
 0x0080

	)

138 
	#STA_PPSSIGNAL
 0x0100

	)

139 
	#STA_PPSJITTER
 0x0200

	)

140 
	#STA_PPSWANDER
 0x0400

	)

141 
	#STA_PPSERROR
 0x0800

	)

143 
	#STA_CLOCKERR
 0x1000

	)

144 
	#STA_NANO
 0x2000

	)

145 
	#STA_MODE
 0x4000

	)

146 
	#STA_CLK
 0x8000

	)

149 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

150 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

155 
	#TIME_OK
 0

	)

156 
	#TIME_INS
 1

	)

157 
	#TIME_DEL
 2

	)

158 
	#TIME_OOP
 3

	)

159 
	#TIME_WAIT
 4

	)

160 
	#TIME_ERROR
 5

	)

161 
	#TIME_BAD
 
TIME_ERROR


	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 199947

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/io.h

18 #i‚def 
_SYS_IO_H


19 
	#_SYS_IO_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


32 
	$i›îm
 (
__‰om
, 
__num
,

33 
__tu∫_⁄
Ë
__THROW
;

38 
	$i›l
 (
__Àvñ
Ë
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

42 
__ölöe
 

43 
	$öb
 (
__p‹t
)

45 
_v
;

47 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

48  
_v
;

49 
	}
}

51 
__ölöe
 

52 
	$öb_p
 (
__p‹t
)

54 
_v
;

56 
__asm__
 
	`__vﬁ©ûe__
 ("öb %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

57  
_v
;

58 
	}
}

60 
__ölöe
 

61 
	$öw
 (
__p‹t
)

63 
_v
;

65 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

66  
_v
;

67 
	}
}

69 
__ölöe
 

70 
	$öw_p
 (
__p‹t
)

72 
_v
;

74 
__asm__
 
	`__vﬁ©ûe__
 ("öw %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

75  
_v
;

76 
	}
}

78 
__ölöe
 

79 
	$öl
 (
__p‹t
)

81 
_v
;

83 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

84  
_v
;

85 
	}
}

87 
__ölöe
 

88 
	$öl_p
 (
__p‹t
)

90 
_v
;

91 
__asm__
 
	`__vﬁ©ûe__
 ("ö»%w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

92  
_v
;

93 
	}
}

95 
__ölöe
 

96 
	$outb
 (
__vÆue
, 
__p‹t
)

98 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

99 
	}
}

101 
__ölöe
 

102 
	$outb_p
 (
__vÆue
, 
__p‹t
)

104 
__asm__
 
	`__vﬁ©ûe__
 ("outb %b0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

105 "Nd" (
__p‹t
));

106 
	}
}

108 
__ölöe
 

109 
	$outw
 (
__vÆue
, 
__p‹t
)

111 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

113 
	}
}

115 
__ölöe
 

116 
	$outw_p
 (
__vÆue
, 
__p‹t
)

118 
__asm__
 
	`__vﬁ©ûe__
 ("outw %w0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

119 "Nd" (
__p‹t
));

120 
	}
}

122 
__ölöe
 

123 
	$oué
 (
__vÆue
, 
__p‹t
)

125 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

126 
	}
}

128 
__ölöe
 

129 
	$oué_p
 (
__vÆue
, 
__p‹t
)

131 
__asm__
 
	`__vﬁ©ûe__
 ("oué %0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

132 "Nd" (
__p‹t
));

133 
	}
}

135 
__ölöe
 

136 
	$ösb
 (
__p‹t
, *
__addr
, 
__cou¡
)

138 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insb":"=D" (
__addr
), "=c" (
__cou¡
)

139 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

140 
	}
}

142 
__ölöe
 

143 
	$ösw
 (
__p‹t
, *
__addr
, 
__cou¡
)

145 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; insw":"=D" (
__addr
), "=c" (
__cou¡
)

146 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

147 
	}
}

149 
__ölöe
 

150 
	$ö¶
 (
__p‹t
, *
__addr
, 
__cou¡
)

152 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; in¶":"=D" (
__addr
), "=c" (
__cou¡
)

153 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

154 
	}
}

156 
__ölöe
 

157 
	$outsb
 (
__p‹t
, c⁄° *
__addr
,

158 
__cou¡
)

160 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsb":"=S" (
__addr
), "=c" (
__cou¡
)

161 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

162 
	}
}

164 
__ölöe
 

165 
	$outsw
 (
__p‹t
, c⁄° *
__addr
,

166 
__cou¡
)

168 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsw":"=S" (
__addr
), "=c" (
__cou¡
)

169 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

170 
	}
}

172 
__ölöe
 

173 
	$out¶
 (
__p‹t
, c⁄° *
__addr
,

174 
__cou¡
)

176 
__asm__
 
	`__vﬁ©ûe__
 ("˛d ;Ñï ; out¶":"=S" (
__addr
), "=c" (
__cou¡
)

177 :"d" (
__p‹t
), "0" (
__addr
), "1" (
__cou¡
));

178 
	}
}

182 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/user.h

18 #i‚de‡
_SYS_USER_H


19 
	#_SYS_USER_H
 1

	)

25 
	~<uni°d.h
>

27 #ifde‡
__x86_64__


29 
	su£r_Âªgs_°ru˘


31 
	mcwd
;

32 
	mswd
;

33 
	m·w
;

34 
	mf›
;

35 
__exãnsi⁄__
 
	mrù
;

36 
__exãnsi⁄__
 
	mrdp
;

37 
	mmxc§
;

38 
	mmx¸_mask
;

39 
	m°_•a˚
[32];

40 
	mxmm_•a˚
[64];

41 
	m∑ddög
[24];

44 
	su£r_ªgs_°ru˘


46 
__exãnsi⁄__
 
	mr15
;

47 
__exãnsi⁄__
 
	mr14
;

48 
__exãnsi⁄__
 
	mr13
;

49 
__exãnsi⁄__
 
	mr12
;

50 
__exãnsi⁄__
 
	mrbp
;

51 
__exãnsi⁄__
 
	mrbx
;

52 
__exãnsi⁄__
 
	mr11
;

53 
__exãnsi⁄__
 
	mr10
;

54 
__exãnsi⁄__
 
	mr9
;

55 
__exãnsi⁄__
 
	mr8
;

56 
__exãnsi⁄__
 
	møx
;

57 
__exãnsi⁄__
 
	mrcx
;

58 
__exãnsi⁄__
 
	mrdx
;

59 
__exãnsi⁄__
 
	mrsi
;

60 
__exãnsi⁄__
 
	mrdi
;

61 
__exãnsi⁄__
 
	m‹ig_øx
;

62 
__exãnsi⁄__
 
	mrù
;

63 
__exãnsi⁄__
 
	mcs
;

64 
__exãnsi⁄__
 
	meÊags
;

65 
__exãnsi⁄__
 
	mr•
;

66 
__exãnsi⁄__
 
	mss
;

67 
__exãnsi⁄__
 
	mfs_ba£
;

68 
__exãnsi⁄__
 
	mgs_ba£
;

69 
__exãnsi⁄__
 
	mds
;

70 
__exãnsi⁄__
 
	mes
;

71 
__exãnsi⁄__
 
	mfs
;

72 
__exãnsi⁄__
 
	mgs
;

75 
	su£r


77 
u£r_ªgs_°ru˘
 
	mªgs
;

78 
	mu_ÂvÆid
;

79 
u£r_Âªgs_°ru˘
 
	mi387
;

80 
__exãnsi⁄__
 
	mu_tsize
;

81 
__exãnsi⁄__
 
	mu_dsize
;

82 
__exãnsi⁄__
 
	mu_ssize
;

83 
__exãnsi⁄__
 
	m°¨t_code
;

84 
__exãnsi⁄__
 
	m°¨t_°ack
;

85 
__exãnsi⁄__
 
	msig«l
;

86 
	mª£rved
;

87 
__exãnsi⁄__
 union

89 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

90 
__exãnsi⁄__
 
	m__u_¨0_w‹d
;

92 
__exãnsi⁄__
 union

94 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

95 
__exãnsi⁄__
 
	m__u_Â°©e_w‹d
;

97 
__exãnsi⁄__
 
	mmagic
;

98 
	mu_comm
 [32];

99 
__exãnsi⁄__
 
	mu_debugªg
 [8];

104 
	su£r_Âªgs_°ru˘


106 
	mcwd
;

107 
	mswd
;

108 
	mtwd
;

109 
	mfù
;

110 
	mfcs
;

111 
	mfoo
;

112 
	mfos
;

113 
	m°_•a˚
 [20];

116 
	su£r_Âxªgs_°ru˘


118 
	mcwd
;

119 
	mswd
;

120 
	mtwd
;

121 
	mf›
;

122 
	mfù
;

123 
	mfcs
;

124 
	mfoo
;

125 
	mfos
;

126 
	mmxc§
;

127 
	mª£rved
;

128 
	m°_•a˚
[32];

129 
	mxmm_•a˚
[32];

130 
	m∑ddög
[56];

133 
	su£r_ªgs_°ru˘


135 
	mebx
;

136 
	mecx
;

137 
	medx
;

138 
	mesi
;

139 
	medi
;

140 
	mebp
;

141 
	móx
;

142 
	mxds
;

143 
	mxes
;

144 
	mxfs
;

145 
	mxgs
;

146 
	m‹ig_óx
;

147 
	meù
;

148 
	mxcs
;

149 
	meÊags
;

150 
	me•
;

151 
	mxss
;

154 
	su£r


156 
u£r_ªgs_°ru˘
 
	mªgs
;

157 
	mu_ÂvÆid
;

158 
u£r_Âªgs_°ru˘
 
	mi387
;

159 
	mu_tsize
;

160 
	mu_dsize
;

161 
	mu_ssize
;

162 
	m°¨t_code
;

163 
	m°¨t_°ack
;

164 
	msig«l
;

165 
	mª£rved
;

166 
u£r_ªgs_°ru˘
* 
	mu_¨0
;

167 
u£r_Âªgs_°ru˘
* 
	mu_Â°©e
;

168 
	mmagic
;

169 
	mu_comm
 [32];

170 
	mu_debugªg
 [8];

174 
	#PAGE_SHIFT
 12

	)

175 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

176 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

177 
	#NBPG
 
PAGE_SIZE


	)

178 
	#UPAGES
 1

	)

179 
	#HOST_TEXT_START_ADDR
 (
u
.
°¨t_code
)

	)

180 
	#HOST_STACK_END_ADDR
 (
u
.
°¨t_°ack
 + u.
u_ssize
 * 
NBPG
)

	)

	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_SVID


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_BSD


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_BSD


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

102 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

104 #ifdef 
__USE_BSD


106 
	#WAIT_ANY
 (-1Ë

	)

107 
	#WAIT_MYPGRP
 0

	)

125 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

127 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 #i‚de‡
__id_t_deföed


129 
	~<bôs/ty≥s.h
>

130 
__id_t
 
	tid_t
;

131 
	#__id_t_deföed


	)

134 
	#__√ed_sigöfo_t


	)

135 
	~<bôs/sigöfo.h
>

148 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

149 
__›ti⁄s
);

152 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


155 
	grußge
;

162 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

163 
rußge
 * 
__ußge
Ë
__THROWNL
;

166 #ifde‡
__USE_BSD


168 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 *
__ußge
Ë
__THROWNL
;

173 
__END_DECLS


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/realtime/include/asm/rtai.h

19 
	~<πai_c⁄fig.h
>

20 
	~<asm/πai_hÆ.h
>

	@/usr/realtime/include/asm/rtai_atomic.h

23 #i‚de‡
_RTAI_ASM_X86_ATOMIC_H


24 
	#_RTAI_ASM_X86_ATOMIC_H


	)

26 #ifde‡
__i386__


27 
	~"πai_©omic_32.h
"

29 
	~"πai_©omic_64.h
"

	@/usr/realtime/include/asm/rtai_emulate_tsc.h

23 #i‚de‡
_RTAI_ASM_EMULATE_TSC_H


24 
	#_RTAI_ASM_EMULATE_TSC_H


	)

26 #i‡
deföed
(
EMULATE_TSC
Ë|| !deföed(
CONFIG_X86_TSC
)

28 #unde‡
RTAI_CPU_FREQ


29 #unde‡
RTAI_CALIBRATED_CPU_FREQ


30 #unde‡
rdtsc


31 #unde‡
πai_rdtsc


32 #unde‡
DECLR_8254_TSC_EMULATION


33 #unde‡
TICK_8254_TSC_EMULATION


34 #unde‡
SETUP_8254_TSC_EMULATION


35 #unde‡
CLEAR_8254_TSC_EMULATION


37 
	#RTAI_CPU_FREQ
 
RTAI_FREQ_8254


	)

38 
	#RTAI_CALIBRATED_CPU_FREQ
 
RTAI_FREQ_8254


	)

39 
	#πai_rdtsc
(Ë
	`rd_8254_ts
()

	)

40 
	#rdtsc
(Ë
	`rd_8254_ts
()

	)

42 
	#TICK_8254_TSC_EMULATION
(Ë
	`rd_8254_ts
()

	)

44 
	~<löux/vîsi⁄.h
>

45 #i‡
deföed
(
CONFIG_VT
Ë&& 
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

47 
	#DECLR_8254_TSC_EMULATION
 \

48 *
kd_mksound
; \

49 *
löux_mksound
; \

50 
	`πai_mksound
() { } \

51 c⁄° 
TSC_EMULATION_GUARD_FREQ
 = 20; \

52 
timî_li°
 
timî
;

	)

54 
	#SETUP_8254_TSC_EMULATION
 \

56 
löux_mksound
 = 
kd_mksound
; \

57 
kd_mksound
 = 
πai_mksound
; \

58 
	`π_£tup_8254_tsc
(); \

59 
	`öô_timî
(&
timî
); \

60 
timî
.
fun˘i⁄
 = 
timî_fun
; \

61 
	`timî_fun
(0); \

62 } 0)

	)

64 
	#CLEAR_8254_TSC_EMULATION
 \

66 
	`dñ_timî
(&
timî
); \

67 i‡(
löux_mksound
) { \

68 
kd_mksound
 = 
löux_mksound
; \

70 } 0)

	)

74 
	#DECLR_8254_TSC_EMULATION
 \

75 c⁄° 
TSC_EMULATION_GUARD_FREQ
 = 20; \

76 
timî_li°
 
timî
;

	)

78 
	#SETUP_8254_TSC_EMULATION
 \

80 
	`π_£tup_8254_tsc
(); \

81 
	`öô_timî
(&
timî
); \

82 
timî
.
fun˘i⁄
 = 
timî_fun
; \

83 
	`timî_fun
(0); \

84 } 0)

	)

86 
	#CLEAR_8254_TSC_EMULATION
 
	`dñ_timî
(&
timî
)

	)

	@/usr/realtime/include/asm/rtai_fpu.h

23 #i‚de‡
_RTAI_ASM_X86_FPU_H


24 
	#_RTAI_ASM_X86_FPU_H


	)

26 #ifde‡
__i386__


27 
	~"πai_Âu_32.h
"

29 
	~"πai_Âu_64.h
"

	@/usr/realtime/include/asm/rtai_hal.h

23 #i‚de‡
_RTAI_ASM_X86_HAL_H


24 
	#_RTAI_ASM_X86_HAL_H


	)

26 
	#RTAI_KERN_BUSY_ALIGN_RET_DELAY
 
CONFIG_RTAI_KERN_BUSY_ALIGN_RET_DELAY


	)

27 
	#RTAI_USER_BUSY_ALIGN_RET_DELAY
 
CONFIG_RTAI_USER_BUSY_ALIGN_RET_DELAY


	)

29 
	~<πai_ty≥s.h
>

31 #ifde‡
CONFIG_SMP


32 
	#RTAI_NR_CPUS
 
CONFIG_RTAI_CPUS


	)

34 
	#RTAI_NR_CPUS
 1

	)

37 
	sˇlibøti⁄_d©a
 {

38 
	m˝u_‰eq
;

39 
	m≠ic_‰eq
;

40 
	mœãncy
;

41 
	mkîn_œãncy_busy_Æign_ªt_dñay
;

42 
	mu£r_œãncy_busy_Æign_ªt_dñay
;

43 
	m£tup_time_TIMER_CPUNIT
;

44 
	m£tup_time_TIMER_UNIT
;

45 
	mtimîs_tﬁ
[
RTAI_NR_CPUS
];

48 
πai_ˇlibøã_h¨d_timî
();

50 #ifde‡
__i386__


51 
	~"πai_hÆ_32.h
"

53 
	~"πai_hÆ_64.h
"

56 #ifde‡
CONFIG_RTAI_TSC


57 
ölöe
 
RTIME
 
	$π_gë_ts˙t
()

59 #ifde‡
__i386__


60 
t
;

61 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "=A" (
t
));

62  
t
;

64 uni⁄ { 
__ad
[2]; 
RTIME
 
t
; }Å;

65 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
t
.
__ad
[0]), "=d" (t.__ad[1]));

66  
t
.t;

68 
	}
}

70 
	#π_gë_ts˙t
 
π_gë_time


	)

	@/usr/realtime/include/asm/rtai_leds.h

21 #i‚de‡
_RTAI_ASM_I386_LEDS_H


22 
	#_RTAI_ASM_I386_LEDS_H


	)

24 
	~<asm/io.h
>

26 
ölöe
 
	$Àds_∑Ω‹t_func
(
p‹t
, 
Àds
) {

27 
	`outb
(~
Àds
,
p‹t
);

28 
	}
}

30 
	#LEDS_DEFAULT_FUNC
 
Àds_∑Ω‹t_func


	)

31 
	#LEDS_DEFAULT_PORT
 0x378

	)

	@/usr/realtime/include/asm/rtai_lxrt.h

21 #i‚de‡
_RTAI_ASM_X86_LXRT_H


22 
	#_RTAI_ASM_X86_LXRT_H


	)

24 #ifde‡
__i386__


25 
	~"πai_lxπ_32.h
"

27 
	~"πai_lxπ_64.h
"

	@/usr/realtime/include/asm/rtai_oldnames.h

32 #i‚de‡
_RTAI_ASM_X86_OLDNAMES_H


33 
	#_RTAI_ASM_X86_OLDNAMES_H


	)

35 #ifde‡
__KERNEL__


37 
	#IFLAG
 
RTAI_IFLAG


	)

38 
	#h¨d_˛i
(Ë
	`πai_˛i
()

	)

39 
	#h¨d_°i
(Ë
	`πai_°i
()

	)

40 
	#h¨d_ßve_Êags_™d_˛i
(
x
Ë
	`πai_ßve_Êags_™d_˛i
(x)

	)

41 
	#h¨d_ª°‹e_Êags
(
x
Ë
	`πai_ª°‹e_Êags
(x)

	)

42 
	#h¨d_ßve_Êags
(
x
Ë
	`πai_ßve_Êags
(x)

	)

43 
	#h¨d_˝u_id
 
hÆ_¥o˚ss‹_id


	)

47 #i‚de‡
__RTAI_HAL__


49 
	#tu√d
 
πai_tu«bÀs


	)

50 
	#NR_RT_CPUS
 
RTAI_NR_CPUS


	)

51 
	#RT_TIME_END
 
RTAI_TIME_LIMIT


	)

53 
	#CPU_FREQ
 
RTAI_CPU_FREQ


	)

54 
	#TIMER_8254_IRQ
 
RTAI_TIMER_8254_IRQ


	)

55 
	#FREQ_8254
 
RTAI_FREQ_8254


	)

56 
	#LATENCY_8254
 
RTAI_LATENCY_8254


	)

57 
	#SETUP_TIME_8254
 
RTAI_SETUP_TIME_8254


	)

59 
	#FREQ_APIC
 
RTAI_FREQ_APIC


	)

60 
	#LATENCY_APIC
 
RTAI_LATENCY_APIC


	)

61 
	#SETUP_TIME_APIC
 
RTAI_SETUP_TIME_APIC


	)

63 
	#CALIBRATED_APIC_FREQ
 
RTAI_CALIBRATED_APIC_FREQ


	)

64 
	#CALIBRATED_CPU_FREQ
 
RTAI_CALIBRATED_CPU_FREQ


	)

66 #ifde‡
__KERNEL__


68 #unde‡
rdtsc


69 
	#rdtsc
(Ë
	`πai_rdtsc
()

	)

70 
	#rd_CPU_ts
(Ë
	`πai_rdtsc
()

	)

72 
	#π_£t_πai_å≠_h™dÀr
 
π_£t_å≠_h™dÀr


	)

73 
	#π_mou¡_πai
 
π_mou¡


	)

74 
	#π_umou¡_πai
 
π_umou¡


	)

75 
	#ˇlibøã_8254
 
πai_ˇlibøã_8254


	)

77 
	#uŒdiv
(
a
,
b
,
c
Ë
	`πai_uŒdiv
◊,b,c)

	)

78 
	#imuldiv
(
a
,
b
,
c
Ë
	`πai_imuldiv
◊,b,c)

	)

79 
	#Œimd
(
a
,
b
,
c
Ë
	`πai_Œimd
◊,b,c)

	)

80 
	#u64div32
(
a
,
b
,
c
Ë
	`πai_u64div32c
◊,b,c)

	)

82 #i‚de‡
__˝lu•lus


84 
	~<löux/úq.h
>

86 
ölöe
 
π_ªque°_˝u_own_úq
 (
úq
, (*
h™dÀr
)()) {

88  
	`π_ªque°_úq
(
úq
, (
π_úq_h™dÀr_t
)
h™dÀr
, 
NULL
, 0);

89 
	}
}

91 
ölöe
 
	$π_‰ì_˝u_own_úq
 (
úq
) {

93  
	`π_ªÀa£_úq
(
úq
);

94 
	}
}

96 
ölöe
 
	$gë_¸2
 () {

97 
addªss
;

98 
	`__asm__
("movq %%¸2,%0":"Ù" (
addªss
));

99  
addªss
;

100 
	}
}

	@/usr/realtime/include/asm/rtai_sched.h

23 #i‚de‡
_RTAI_ASM_X86_SCHED_H


24 
	#_RTAI_ASM_X86_SCHED_H


	)

26 #ifde‡
__i386__


27 
	~"πai_sched_32.h
"

29 
	~"πai_sched_64.h
"

32 
	#öô_¨ch_°ack
() \

34 *--(
èsk
->
°ack
Ë
d©a
; \

35 *--(
èsk
->
°ack
Ë(Ë
π_thªad
; \

36 *--(
èsk
->
°ack
) = 0; \

37 *--(
èsk
->
°ack
Ë(Ë
π_°¨tup
; \

38 } 0)

	)

40 
	#DEFINE_LINUX_CR0
 
löux_¸0
;

	)

42 
	#DEFINE_LINUX_SMP_CR0
 
löux_smp_¸0
[
NR_RT_CPUS
];

	)

44 
	#öô_èsk_Âív
(
èsk
Ëdÿ{ 
	`öô_Âív
(—ask)->
Âu_ªg
); } 0)

	)

46 
	#RT_SET_RTAI_TRAP_HANDLER
(
x
Ë
	`π_£t_πai_å≠_h™dÀr
(x)

	)

48 
	#DO_TIMER_PROPER_OP
()

	)

	@/usr/realtime/include/asm/rtai_srq.h

20 #i‚de‡
_RTAI_ASM_X86_SRQ_H


21 
	#_RTAI_ASM_X86_SRQ_H


	)

23 #i‚de‡
__KERNEL__


25 
	~<sys/sysˇŒ.h
>

26 
	~<uni°d.h
>

28 
	~<asm/πai_ve˘‹s.h
>

30 #ifde‡
CONFIG_RTAI_LXRT_USE_LINUX_SYSCALL


31 
	#USE_LINUX_SYSCALL


	)

33 #unde‡
USE_LINUX_SYSCALL


36 
	#RTAI_SRQ_SYSCALL_NR
 0x70000001

	)

38 
ölöe
 
	$πai_§q
(
§q
, 
¨gs
)

40 
ªtvÆ
;

41 
	`sysˇŒ
(
RTAI_SRQ_SYSCALL_NR
, 
§q
, 
¨gs
, &
ªtvÆ
);

42  
ªtvÆ
;

43 
	}
}

45 
ölöe
 
	$πai_›í_§q
(
œbñ
)

47  ()
	`πai_§q
(0, 
œbñ
);

48 
	}
}

	@/usr/realtime/include/asm/rtai_usi.h

19 #i‚de‡
_RTAI_ASM_X86_USI_H


20 
	#_RTAI_ASM_X86_USI_H


	)

22 
	#USI_SRQ_MASK
 0xFFFFFFF0

	)

24 
	#_STARTUP_IRQ
 1

	)

25 
	#_SHUTDOWN_IRQ
 2

	)

26 
	#_ENABLE_IRQ
 3

	)

27 
	#_DISABLE_IRQ
 4

	)

28 
	#_MASK_AND_ACK_IRQ
 5

	)

29 
	#_ACK_IRQ
 6

	)

30 
	#_UNMASK_IRQ
 7

	)

31 
	#_DISINT
 8

	)

32 
	#_ENINT
 9

	)

33 
	#_SAVE_FLAGS_CLI
 10

	)

34 
	#_RESTORE_FLAGS
 11

	)

36 #ifde‡
__KERNEL__


38 #ifde‡
CONFIG_RTAI_USI


40 
	$usi_˛i
(
¨g
, *
eÊags
)

42 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

43 
	}
}

45 
	$usi_°i
(
¨g
, *
eÊags
)

47 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

48 
	}
}

50 
	$usi_ßve_Êags_™d_˛i
(
¨g
, *
eÊags
)

52 
Êags
 = *
eÊags
;

53 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

54  
Êags
;

55 
	}
}

57 
	$usi_ª°‹e_Êags
(
Êags
, *
eÊags
)

59 i‡(
	`ã°_bô
(
RTAI_IFLAG
, &
Êags
)) {

60 
	`£t_bô
(
RTAI_IFLAG
, 
eÊags
);

62 
	`˛ór_bô
(
RTAI_IFLAG
, 
eÊags
);

64 
	}
}

66 (*
usi_fun_íåy
[ ])(, *) = {

67 [
_STARTUP_IRQ
] = (*)
π_°¨tup_úq
,

68 [
_SHUTDOWN_IRQ
] = (*)
π_shutdown_úq
,

69 [
_ENABLE_IRQ
] = (*)
π_íabÀ_úq
,

70 [
_DISABLE_IRQ
] = (*)
π_dißbÀ_úq
,

71 [
_MASK_AND_ACK_IRQ
] = (*)
π_mask_™d_ack_úq
,

72 [
_ACK_IRQ
] = (*)
π_ack_úq
,

73 [
_UNMASK_IRQ
] = (*)
π_unmask_úq
,

74 [
_DISINT
] = (*)
usi_˛i
,

75 [
_ENINT
] = (*)
usi_°i
,

76 [
_SAVE_FLAGS_CLI
] = (*)
usi_ßve_Êags_™d_˛i
,

77 [
_RESTORE_FLAGS
] = (*)
usi_ª°‹e_Êags


78 
	}
};

80 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
) \

81 i‡(
§q
 > 
USI_SRQ_MASK
) { \

82 *
ªtvÆ
 = 
usi_fun_íåy
[
§q
 & ~
USI_SRQ_MASK
](
¨gs
, &(
p§
)); \

83  
ªç©h
; \

84 }

	)

87 
	#IF_IS_A_USI_SRQ_CALL_IT
(
§q
, 
¨gs
, 
ªtvÆ
, 
p§
, 
ªç©h
)

	)

	@/usr/realtime/include/asm/rtai_vectors.h

30 #i‚de‡
_RTAI_ASM_X86_VECTORS_H


31 
	#_RTAI_ASM_X86_VECTORS_H


	)

33 #ifde‡
__KERNEL__


35 
	~<πai_hÆ_«mes.h
>

36 
	~<πai_c⁄fig.h
>

38 #ifde‡
CONFIG_X86_LOCAL_APIC


39 
	#RTAI_APIC_HIGH_VECTOR
 
HAL_APIC_HIGH_VECTOR


	)

40 
	#RTAI_APIC_LOW_VECTOR
 
HAL_APIC_LOW_VECTOR


	)

42 
	#RTAI_APIC_HIGH_VECTOR
 0xff

	)

43 
	#RTAI_APIC_LOW_VECTOR
 0xff

	)

46 #ifde‡
ùùe_≠ic_ve˘‹_úq


47 
	#RTAI_APIC_HIGH_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
RTAI_APIC_HIGH_VECTOR
)

	)

48 
	#RTAI_APIC_LOW_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
RTAI_APIC_LOW_VECTOR
)

	)

49 
	#LOCAL_TIMER_IPI
 
	`ùùe_≠ic_ve˘‹_úq
(
LOCAL_TIMER_VECTOR
)

	)

51 
	#RTAI_APIC_HIGH_IPI
 (
RTAI_APIC_HIGH_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

52 
	#RTAI_APIC_LOW_IPI
 (
RTAI_APIC_LOW_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

53 
	#LOCAL_TIMER_IPI
 (
LOCAL_TIMER_VECTOR
 - 
FIRST_EXTERNAL_VECTOR
)

	)

58 
	#__πai_°rögize0
(
_s_
Ë#_s_

	)

59 
	#__πai_°rögize
(
_s_
Ë
	`__πai_°rögize0
(_s_)

	)

60 
	#__πai_å≠_ˇŒ
(
_t_
Ë
	)
_t_

61 
	#__πai_do_å≠0
(
_t_
Ë
	`__πai_°rögize
(
$
 _t_)

	)

62 
	#__πai_do_å≠
(
_t_
Ë
	`__πai_do_å≠0
(
	`__πai_å≠_ˇŒ
(_t_))

	)

64 
	#RTAI_DO_TRAP
(
v
, 
r
, 
a1
, 
a2
Ëdÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ( 
	`__πai_do_å≠
(v): : "a" (a1), "c" (a2), "d" (&r): "mem‹y"); } 0)

	)

	@/usr/realtime/include/rtai.h

19 #i‚de‡
_RTAI_RTAI_H


20 
	#_RTAI_RTAI_H


	)

22 #ifde‡
__KERNEL__


23 
	~<löux/vîsi⁄.h
>

26 
	~<πai_ßnôy.h
>

27 
	~<asm/πai.h
>

31 
	#TWOPWR31M1
 2147483647

32 

	)

33 
ölöe
 
	$√xt_ønd
(
ønd
)

35 c⁄° 
a
 = 16807;

36 c⁄° 
m
 = 
TWOPWR31M1
;

37 c⁄° 
q
 = 127773;

38 c⁄° 
r
 = 2836;

40 
lo
, 
hi
;

42 
hi
 = 
ønd
/
q
;

43 
lo
 = 
ønd
 - 
hi
*
q
;

44 
ønd
 = 
a
*
lo
 - 
r
*
hi
;

45 i‡(
ønd
 <= 0) {

46 
ønd
 +
m
;

48  
ønd
;

49 
	}
}

51 
ölöe
 
	$ú™du
(
ønge
)

53 
£ed
 = 783637;

54 c⁄° 
m
 = 
TWOPWR31M1
;

56 
£ed
 = 
	`√xt_ønd
(seed);

57  
	`πai_imuldiv
(
£ed
, 
ønge
, 
m
);

58 
	}
}

	@/usr/realtime/include/rtai_bits.h

19 #i‚de‡
_RTAI_BITS_H


20 
	#_RTAI_BITS_H


	)

22 
	~<πai_ty≥s.h
>

24 
	#RT_BITS_MAGIC
 0x9ac24448

25 

	)

26 
	#ALL_SET
 0

	)

27 
	#ANY_SET
 1

	)

28 
	#ALL_CLR
 2

	)

29 
	#ANY_CLR
 3

	)

31 
	#ALL_SET_AND_ANY_SET
 4

	)

32 
	#ALL_SET_AND_ALL_CLR
 5

	)

33 
	#ALL_SET_AND_ANY_CLR
 6

	)

34 
	#ANY_SET_AND_ALL_CLR
 7

	)

35 
	#ANY_SET_AND_ANY_CLR
 8

	)

36 
	#ALL_CLR_AND_ANY_CLR
 9

	)

38 
	#ALL_SET_OR_ANY_SET
 10

	)

39 
	#ALL_SET_OR_ALL_CLR
 11

	)

40 
	#ALL_SET_OR_ANY_CLR
 12

	)

41 
	#ANY_SET_OR_ALL_CLR
 13

	)

42 
	#ANY_SET_OR_ANY_CLR
 14

	)

43 
	#ALL_CLR_OR_ANY_CLR
 15

	)

45 
	#SET_BITS
 0

	)

46 
	#CLR_BITS
 1

	)

47 
	#SET_CLR_BITS
 2

	)

48 
	#NOP_BITS
 3

	)

50 
	#BITS_ERR
 (
RTE_OBJINV
)

51 
	#BITS_TIMOUT
 (
RTE_TIMOUT
)

52 

	)

53 
	gπ_bôs_°ru˘
;

55 #ifde‡
__KERNEL__


57 #i‚de‡
__˝lu•lus


59 
	sπ_bôs_°ru˘
 {

61 
π_queue
 
	mqueue
;

62 
	mmagic
;

63 
	mty≥
;

64 
	mmask
;

66 } 
	tBITS
;

72 
__πai_bôs_öô
();

74 
__πai_bôs_exô
();

76 
π_bôs_öô
(
π_bôs_°ru˘
 *
bôs
, 
mask
);

78 
π_bôs_dñëe
(
π_bôs_°ru˘
 *
bôs
);

80 
RTAI_SYSCALL_MODE
 
π_gë_bôs
(
π_bôs_°ru˘
 *
bôs
);

82 
RTAI_SYSCALL_MODE
 
π_bôs_ª£t
(
π_bôs_°ru˘
 *
bôs
, 
mask
);

84 
RTAI_SYSCALL_MODE
 
π_bôs_sig«l
(
π_bôs_°ru˘
 *
bôs
, 
£tfun
, 
masks
);

86 
RTAI_SYSCALL_MODE
 
_π_bôs_waô
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
);

87 
ölöe
 
π_bôs_waô
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
)

89  
_π_bôs_waô
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
ªsu…ög_mask
, 1);

92 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_if
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
, 
•a˚
);

93 
ölöe
 
π_bôs_waô_if
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
)

95  
_π_bôs_waô_if
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
ªsu…ög_mask
, 1);

98 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_u¡û
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
, 
•a˚
);

99 
ölöe
 
π_bôs_waô_u¡û
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
)

101  
_π_bôs_waô_u¡û
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
time
, 
ªsu…ög_mask
, 1);

104 
RTAI_SYSCALL_MODE
 
_π_bôs_waô_timed
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
, 
•a˚
);

105 
ölöe
 
π_bôs_waô_timed
(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
)

107  
_π_bôs_waô_timed
(
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
dñay
, 
ªsu…ög_mask
, 1);

110 #ifde‡
__˝lu•lus


116 
	~<πai_lxπ.h
>

118 
	#BITSIDX
 0

	)

120 #ifde‡
__˝lu•lus


124 
RTAI_PROTO
(
π_bôs_°ru˘
 *,
π_bôs_öô
,(
«me
, 
mask
))

126 °ru˘ { 
«me
, 
mask
; } 
¨g
 = {Çame, mask };

127  (
π_bôs_°ru˘
 *)
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_INIT
, &
¨g
).
v
[
LOW
];

130 
RTAI_PROTO
(, 
π_bôs_dñëe
,(
π_bôs_°ru˘
 *
bôs
))

132 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; } 
¨g
 = { bits };

133  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_DELETE
, &
¨g
).
i
[
LOW
];

136 
RTAI_PROTO
(, 
π_gë_bôs
,(
π_bôs_°ru˘
 *
bôs
))

138 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; } 
¨g
 = { bits };

139  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_GET
, &
¨g
).
i
[
LOW
];

142 
RTAI_PROTO
(, 
π_bôs_ª£t
,(
π_bôs_°ru˘
 *
bôs
, 
mask
))

144 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
mask
; } 
¨g
 = { bits, mask };

145  ()
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_RESET
, &
¨g
).
i
[
LOW
];

148 
RTAI_PROTO
(, 
π_bôs_sig«l
,(
π_bôs_°ru˘
 *
bôs
, 
£tfun
, 
masks
))

150 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
£tfun
; 
masks
; } 
¨g
 = { bits, setfun, masks };

151  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_SIGNAL
, &
¨g
).
i
[
LOW
];

154 
RTAI_PROTO
(, 
π_bôs_waô
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
))

156 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Ñesulting_mask, 0 };

157  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT
, &
¨g
).
i
[
LOW
];

160 
RTAI_PROTO
(, 
π_bôs_waô_if
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, *
ªsu…ög_mask
))

162 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Ñesulting_mask, 0 };

163  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_IF
, &
¨g
).
i
[
LOW
];

166 
RTAI_PROTO
(, 
π_bôs_waô_u¡û
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
time
, *
ªsu…ög_mask
))

168 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; 
RTIME
 
time
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks,Åime,Ñesulting_mask, 0 };

169  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

172 
RTAI_PROTO
(, 
π_bôs_waô_timed
,(
π_bôs_°ru˘
 *
bôs
, 
ã°fun
, 
ã°masks
, 
exôfun
, 
exômasks
, 
RTIME
 
dñay
, *
ªsu…ög_mask
))

174 °ru˘ { 
π_bôs_°ru˘
 *
bôs
; 
ã°fun
; 
ã°masks
; 
exôfun
; 
exômasks
; 
RTIME
 
dñay
; *
ªsu…ög_mask
; 
•a˚
; } 
¨g
 = { bits,Åestfun,Åestmasks,Éxitfun,Éxitmasks, delay,Ñesulting_mask, 0 };

175  
πai_lxπ
(
BITSIDX
, 
SIZARG
, 
BITS_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

178 #ifde‡
__˝lu•lus


184 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

186 
	sπ_bôs_°ru˘
 {

187 
›aque
;

188 } 
	tBITS
;

	@/usr/realtime/include/rtai_config.h

5 
	#CONFIG_KBUILD
 1

	)

8 
	#CONFIG_RTAI
 1

	)

26 
	#CONFIG_RTAI_ALLOW_RR
 1

	)

29 
	#CONFIG_RTAI_BITS
 1

	)

35 
	#CONFIG_RTAI_BUILD_STRING
 "x86_64-unknown-löux-gnu"

	)

38 
	#CONFIG_RTAI_BUSY_TIME_ALIGN
 0

	)

41 
	#CONFIG_RTAI_CAL_FREQS_FACT
 0

	)

44 
	#CONFIG_RTAI_CLOCK_REALTIME
 1

	)

47 
	#CONFIG_RTAI_COMPILER
 "gc¯vîsi⁄ 4.8.4 (Ubu¡u 4.8.4-2ubu¡u1~14.04.3Ë"

	)

50 
	#CONFIG_RTAI_CPUS
 8

	)

59 
	#CONFIG_RTAI_DONT_DISPATCH_CORE_IRQS
 0

	)

65 
	#CONFIG_RTAI_DRIVERS_SERIAL
 1

	)

68 
	#CONFIG_RTAI_FIFOS
 1

	)

74 
	#CONFIG_RTAI_FIFOS_TEMPLATE
 "/dev/πf%d"

	)

77 
	#CONFIG_RTAI_FPU_SUPPORT
 1

	)

89 
	#CONFIG_RTAI_HOST_STRING
 "x86_64-unknown-löux-gnu"

	)

92 
	#CONFIG_RTAI_IMMEDIATE_LINUX_SYSCALL
 0

	)

98 
	#CONFIG_RTAI_INTERNAL_LXRT_INLINE
 3

	)

101 
	#CONFIG_RTAI_INTERNAL_LXRT_SUPPORT
 1

	)

104 
	#CONFIG_RTAI_IPIPE
 1

	)

107 
	#CONFIG_RTAI_KERN_BUSY_ALIGN_RET_DELAY
 0

	)

110 
	#CONFIG_RTAI_KSTACK_HEAPSZ
 512

	)

122 #i‚de‡
CONFIG_RTAI_LXRT_INLINE


123 
	#CONFIG_RTAI_LXRT_INLINE
 
CONFIG_RTAI_INTERNAL_LXRT_INLINE


	)

125 
	#__hidefun
(
«me
Ë«mê## 
_hiddí_ölöe


	)

126 #i‡
CONFIG_RTAI_LXRT_INLINE
 == 1

127 
	#RTAI_PROTO
(
ty≥
,
«me
,
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

128 #ñi‡
CONFIG_RTAI_LXRT_INLINE
 == 2

129 
	#RTAI_PROTO
(
ty≥
,
«me
,
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

130 #ñi‡
CONFIG_RTAI_LXRT_INLINE
 == 3

131 
	#RTAI_PROTO
(
ty≥
,
«me
,
¨gli°
Ëty≥Çamê¨gli°; 
ölöe
Åy≥ 
	`__hidefun
“ameË
	)
arglist

133 
	#RTAI_PROTO
(
ty≥
,
«me
,
¨gli°
Ëty≥Çamê
	)
arglist

135 
	#RTAI_PROTO_ALWAYS_INLINE
(
ty≥
,
«me
,
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

136 
	#RTAI_PROTO_NEVER_INLINE
(
ty≥
,
«me
,
¨gli°
Ëty≥Çamê¨gli°; 
ölöe
Åy≥ 
	`__hidefun
“ameË
	)
arglist

152 
	#CONFIG_RTAI_MALLOC
 1

	)

155 
	#CONFIG_RTAI_MALLOC_BUILTIN
 1

	)

158 
	#CONFIG_RTAI_MALLOC_HEAPSZ
 2048

	)

161 
	#CONFIG_RTAI_MALLOC_VMALLOC
 1

	)

179 
	#CONFIG_RTAI_MATH_LIBM_TO_USE


	)

182 
	#CONFIG_RTAI_MBX
 1

	)

188 
	#CONFIG_RTAI_MONITOR_EXECTIME
 1

	)

191 
	#CONFIG_RTAI_MOUNT_ON_LOAD
 1

	)

194 
	#CONFIG_RTAI_MQ
 1

	)

200 
	#CONFIG_RTAI_MSG
 1

	)

206 
	#CONFIG_RTAI_NETRPC
 1

	)

215 
	#CONFIG_RTAI_ONE_SHOT
 0

	)

218 
	#CONFIG_RTAI_REVISION_LEVEL
 0

	)

221 
	#CONFIG_RTAI_RTC_FREQ
 0

	)

227 
	#CONFIG_RTAI_RTDM_FD_MAX
 128

	)

242 
	#CONFIG_RTAI_SCHED_8254_LATENCY
 4700

	)

245 
	#CONFIG_RTAI_SCHED_APIC_LATENCY
 3944

	)

251 
	#CONFIG_RTAI_SCHED_LXRT_NUMSLOTS
 150

	)

254 
	#CONFIG_RTAI_SEM
 1

	)

260 
	#CONFIG_RTAI_SHM
 1

	)

266 
	#CONFIG_RTAI_TASKLETS
 1

	)

275 
	#CONFIG_RTAI_TBX
 1

	)

284 
	#CONFIG_RTAI_TSC
 1

	)

290 
	#CONFIG_RTAI_USER_BUSY_ALIGN_RET_DELAY
 0

	)

299 
	#CONFIG_RTAI_USE_NEWERR
 0

	)

311 
	#CONFIG_RTAI_VERSION_MAJOR
 4

	)

314 
	#CONFIG_RTAI_VERSION_MINOR
 1

	)

317 
	#CONFIG_RTAI_WD
 1

	)

319 #ifde‡
__IN_RTAI__


322 
	#HAVE_DLFCN_H
 1

	)

325 
	#HAVE_INTTYPES_H
 1

	)

328 
	#HAVE_MEMORY_H
 1

	)

331 
	#HAVE_STDINT_H
 1

	)

334 
	#HAVE_STDLIB_H
 1

	)

337 
	#HAVE_STRINGS_H
 1

	)

340 
	#HAVE_STRING_H
 1

	)

343 
	#HAVE_SYS_STAT_H
 1

	)

346 
	#HAVE_SYS_TYPES_H
 1

	)

349 
	#HAVE_UNISTD_H
 1

	)

353 
	#LT_OBJDIR
 ".libs/"

	)

356 
	#PACKAGE
 "πai"

	)

359 
	#PACKAGE_BUGREPORT
 "πai@πai.‹g"

	)

362 
	#PACKAGE_NAME
 "πai"

	)

365 
	#PACKAGE_STRING
 "πaò4.1"

	)

368 
	#PACKAGE_TARNAME
 "πai"

	)

371 
	#PACKAGE_URL
 ""

	)

374 
	#PACKAGE_VERSION
 "4.1"

	)

377 
	#STDC_HEADERS
 1

	)

380 
	#VERSION
 "4.1"

	)

	@/usr/realtime/include/rtai_fifos.h

26 #i‚de‡
_RTAI_FIFOS_H


27 
	#_RTAI_FIFOS_H


	)

29 
	~<πai_ty≥s.h
>

31 
	#MAX_FIFOS
 64

	)

33 
	#RTAI_FIFOS_MAJOR
 150

	)

35 
	#RESET
 1

	)

36 
	#RESIZE
 2

	)

37 
	#RTF_SUSPEND_TIMED
 3

	)

38 
	#OPEN_SIZED
 4

	)

39 
	#READ_ALL_AT_ONCE
 5

	)

40 
	#READ_TIMED
 6

	)

41 
	#WRITE_TIMED
 7

	)

42 
	#RTF_SEM_INIT
 8

	)

43 
	#RTF_SEM_WAIT
 9

	)

44 
	#RTF_SEM_TRYWAIT
 10

	)

45 
	#RTF_SEM_TIMED_WAIT
 11

	)

46 
	#RTF_SEM_POST
 12

	)

47 
	#RTF_SEM_DESTROY
 13

	)

48 
	#SET_ASYNC_SIG
 14

	)

49 
	#EAVESDROP
 19

	)

50 
	#OVRWRITE
 20

	)

51 
	#READ_IF
 21

	)

52 
	#WRITE_IF
 22

	)

53 
	#RTF_NAMED_CREATE
 23

	)

55 
	#RTF_GET_N_FIFOS
 15

	)

56 
	#RTF_GET_FIFO_INFO
 16

	)

57 
	#RTF_CREATE_NAMED
 17

	)

58 
	#RTF_NAME_LOOKUP
 18

	)

60 
	#RTF_NAMELEN
 15

	)

62 
	sπ_fifo_öfo_°ru˘
{

63 
	mfifo_numbî
;

64 
	msize
;

65 
	m›n˙t
;

66 
	mavbs
, 
	m‰bs
;

67 
	m«me
[
RTF_NAMELEN
+1];

70 
	sπ_fifo_gë_öfo_°ru˘
{

71 
	mfifo
;

72 
	mn
;

73 
π_fifo_öfo_°ru˘
 *
	m±r
;

76 
	#FUN_FIFOS_LXRT_INDX
 10

	)

78 
	#_CREATE
 0

	)

79 
	#_DESTROY
 1

	)

80 
	#_PUT
 2

	)

81 
	#_GET
 3

	)

82 
	#_RESET
 4

	)

83 
	#_RESIZE
 5

	)

84 
	#_SEM_INIT
 6

	)

85 
	#_SEM_DESTRY
 7

	)

86 
	#_SEM_POST
 8

	)

87 
	#_SEM_TRY
 9

	)

88 
	#_CREATE_NAMED
 10

	)

89 
	#_GETBY_NAME
 11

	)

90 
	#_OVERWRITE
 12

	)

91 
	#_PUT_IF
 13

	)

92 
	#_GET_IF
 14

	)

93 
	#_NAMED_CREATE
 15

	)

94 
	#_AVBS
 16

	)

95 
	#_FRBS
 17

	)

97 #ifde‡
__KERNEL__


99 
	~<πai.h
>

101 #ifde‡
__˝lu•lus


105 
__πai_fifos_öô
();

107 
__πai_fifos_exô
();

109 
πf_öô
();

111 (*
πf_h™dÀr_t
)(
	tfifo
, 
	trw
);

120 
πf_¸óã_h™dÀr
(
fifo
,

121 *
h™dÀr
 );

136 
	#X_FIFO_HANDLER
(
h™dÀr
Ë(((*)(, 
rw
))(h™dÀr))

	)

143 #unde‡
πf_¸óã


144 
RTAI_SYSCALL_MODE
 
πf_¸óã
(
fifo
, 
size
);

154 
πf_«med_¸óã
(c⁄° *
«me
, 
size
);

164 
RTAI_SYSCALL_MODE
 
πf_¸óã_«med
(c⁄° *
«me
);

173 
RTAI_SYSCALL_MODE
 
πf_gëfifoby«me
(c⁄° *
«me
);

182 
RTAI_SYSCALL_MODE
 
πf_ª£t
(
fifo
);

189 
RTAI_SYSCALL_MODE
 
πf_de°roy
(
fifo
);

198 
RTAI_SYSCALL_MODE
 
πf_ªsize
(
mö‹
, 
size
);

206 
RTAI_SYSCALL_MODE
 
πf_put
(
fifo
,

207 * 
buf
,

208 
cou¡
 );

217 
RTAI_SYSCALL_MODE
 
πf_ovrwr_put
(
fifo
,

218 * 
buf
,

219 
cou¡
 );

229 
RTAI_SYSCALL_MODE
 
πf_put_if
 (
fifo
,

230 * 
buf
,

231 
cou¡
 );

238 
RTAI_SYSCALL_MODE
 
πf_gë
(
fifo
,

239 * 
buf
,

240 
cou¡
 );

248 
RTAI_SYSCALL_MODE
 
πf_gë_if
(
fifo
,

249 * 
buf
,

250 
cou¡
 );

257 
πf_evdΩ
(
fifo
,

258 * 
buf
,

259 
cou¡
 );

265 
RTAI_SYSCALL_MODE
 
πf_£m_öô
(
fifo
,

266 
vÆue
 );

273 
RTAI_SYSCALL_MODE
 
πf_£m_po°
(
fifo
 );

280 
RTAI_SYSCALL_MODE
 
πf_£m_åywaô
(
fifo
 );

287 
RTAI_SYSCALL_MODE
 
πf_£m_de°roy
(
fifo
 );

289 
	#πf_£m_dñëe
 
πf_£m_de°roy


	)

296 
RTAI_SYSCALL_MODE
 
πf_gë_‰bs
(
fifo
 );

301 
	#πf_¸óã_usög_bh
(
fifo
, 
size
, 
bh_li°
Ë
	`πf_¸óã
(fifo, size)

	)

302 
	#πf_¸óã_usög_bh_™d_u§_buf
(
fifo
, 
buf
, 
size
, 
bh_li°
Ë
	`πf_¸óã
(fifo, size)

	)

303 
	#πf_de°roy_usög_u§_buf
(
fifo
Ë
	`πf_de°roy
(fifo)

	)

305 #ifde‡
__˝lu•lus


311 
	~<sys/ty≥s.h
>

312 
	~<sys/°©.h
>

313 
	~<sys/io˘l.h
>

314 
	~<f˙é.h
>

315 
	~<uni°d.h
>

316 
	~<°dio.h
>

317 
	~<°rög.h
>

318 
	~<πai_lxπ.h
>

320 #ifde‡
__˝lu•lus


324 
RTAI_PROTO
(, 
πf_¸óã
,(
fifo
, 
size
))

326 °ru˘ { 
fifo
, 
size
; } 
¨g
 = { fifo, size };

327  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_CREATE
, &
¨g
).
i
[
LOW
];

330 
RTAI_PROTO
(, 
πf_de°roy
,(
fifo
))

332 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

333  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_DESTROY
, &
¨g
).
i
[
LOW
];

336 
RTAI_PROTO
(, 
πf_put
,(
fifo
, c⁄° *
buf
, 
cou¡
))

338 
lbuf
[
cou¡
];

339 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

340 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

341  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_PUT
, &
¨g
).
i
[
LOW
];

344 
RTAI_PROTO
(, 
πf_put_if
,(
fifo
, c⁄° *
buf
, 
cou¡
))

346 
lbuf
[
cou¡
];

347 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

348 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

349  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_PUT_IF
, &
¨g
).
i
[
LOW
];

352 
RTAI_PROTO
(, 
πf_gë
,(
fifo
, *
buf
, 
cou¡
))

354 
ªtvÆ
;

355 
lbuf
[
cou¡
];

356 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

357 
ªtvÆ
 = 
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GET
, &
¨g
).
i
[
LOW
];

358 i‡(
ªtvÆ
 > 0) {

359 
mem˝y
(
buf
, 
lbuf
, 
ªtvÆ
);

361  
ªtvÆ
;

364 
RTAI_PROTO
(, 
πf_gë_if
,(
fifo
, *
buf
, 
cou¡
))

366 
ªtvÆ
;

367 
lbuf
[
cou¡
];

368 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

369 
ªtvÆ
 = 
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GET_IF
, &
¨g
).
i
[
LOW
];

370 i‡(
ªtvÆ
 > 0) {

371 
mem˝y
(
buf
, 
lbuf
, 
ªtvÆ
);

373  
ªtvÆ
;

376 
RTAI_PROTO
(, 
πf_gë_avbs
, (
fifo
))

378 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

379  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_AVBS
, &
¨g
).
i
[
LOW
];

382 
RTAI_PROTO
(, 
πf_gë_‰bs
, (
fifo
))

384 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

385  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_FRBS
, &
¨g
).
i
[
LOW
];

388 
RTAI_PROTO
(, 
πf_ª£t_lxπ
,(
fifo
))

390 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

391  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_RESET
, &
¨g
).
i
[
LOW
];

394 
RTAI_PROTO
(, 
πf_ªsize_lxπ
,(
fifo
, 
size
))

396 °ru˘ { 
fifo
, 
size
; } 
¨g
 = { fifo, size };

397  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_RESIZE
, &
¨g
).
i
[
LOW
];

400 
RTAI_PROTO
(, 
πf_£m_öô_lxπ
,(
fifo
, 
vÆue
))

402 °ru˘ { 
fifo
, 
vÆue
; } 
¨g
 = { fifo, value };

403  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_INIT
, &
¨g
).
i
[
LOW
];

406 
RTAI_PROTO
(, 
πf_£m_po°_lxπ
,(
fifo
))

408 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

409  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_POST
, &
¨g
).
i
[
LOW
];

412 
RTAI_PROTO
(, 
πf_£m_åywaô_lxπ
,(
fifo
))

414 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

415  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_TRY
, &
¨g
).
i
[
LOW
];

418 
RTAI_PROTO
(, 
πf_£m_de°roy_lxπ
,(
fifo
))

420 °ru˘ { 
fifo
; } 
¨g
 = { fifo };

421  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_SEM_DESTRY
, &
¨g
).
i
[
LOW
];

424 
RTAI_PROTO
(, 
πf_«med_¸óã_lxπ
,(c⁄° *
«me
, 
size
))

426 
Àn
;

427 
 ame
[
Àn
 = 
°æí
(
«me
)];

428 °ru˘ { * 
«me
; 
size
; } 
¨g
 = { 
 ame
, size };

429 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

430  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_NAMED_CREATE
, &
¨g
).
i
[
LOW
];

433 
RTAI_PROTO
(, 
πf_¸óã_«med_lxπ
,(c⁄° *
«me
))

435 
Àn
;

436 
 ame
[
Àn
 = 
°æí
(
«me
)];

437 °ru˘ { * 
«me
; } 
¨g
 = { 
 ame
 };

438 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

439  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_CREATE_NAMED
, &
¨g
).
i
[
LOW
];

442 
RTAI_PROTO
(, 
πf_gëfifoby«me_lxπ
,(c⁄° *
«me
))

444 
Àn
;

445 
 ame
[
Àn
 = 
°æí
(
«me
)];

446 °ru˘ { * 
«me
; } 
¨g
 = { 
 ame
 };

447 
°∫˝y
(
 ame
, 
«me
, 
Àn
);

448  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_GETBY_NAME
, &
¨g
).
i
[
LOW
];

451 
RTAI_PROTO
(, 
πf_ovrwr_put
,(
fifo
, c⁄° *
buf
, 
cou¡
))

453 
lbuf
[
cou¡
];

454 °ru˘ { 
fifo
; *
buf
; 
cou¡
; } 
¨g
 = { fifo, 
lbuf
, count };

455 
mem˝y
(
lbuf
, 
buf
, 
cou¡
);

456  
πai_lxπ
(
FUN_FIFOS_LXRT_INDX
, 
SIZARG
, 
_OVERWRITE
, &
¨g
).
i
[
LOW
];

459 
RTAI_PROTO
(, 
πf_ª£t
,(
fd
))

461 
ªt
 = 
io˘l
(
fd
, 
RESET
);

462  
ªt
 < 0 ? -
î∫o
 :Ñet;

465 
RTAI_PROTO
(, 
πf_ªsize
,(
fd
, 
size
))

467 
ªt
 = 
io˘l
(
fd
, 
RESIZE
, 
size
);

468  
ªt
 < 0 ? -
î∫o
 :Ñet;

485 
RTAI_PROTO
(, 
πf_su•íd_timed
,(
fd
, 
ms_dñay
))

487 
ªt
 = 
io˘l
(
fd
, 
RTF_SUSPEND_TIMED
, 
ms_dñay
);

488  
ªt
 < 0 ? -
î∫o
 :Ñet;

525 
RTAI_PROTO
(, 
πf_›í_sized
,(c⁄° *
dev
, 
≥rm
, 
size
))

527 
fd
;

529 i‡((
fd
 = 
›í
(
dev
, 
≥rm
)) < 0) {

530  -
î∫o
;

532 i‡(
io˘l
(
fd
, 
RESIZE
, 
size
) < 0) {

533 
˛o£
(
fd
);

534  -
î∫o
;

536  
fd
;

539 
RTAI_PROTO
(, 
πf_evdΩ
,(
fd
, *
buf
, 
cou¡
))

541 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

542 
ªt
 = 
io˘l
(
fd
, 
EAVESDROP
, &
¨gs
);

543  
ªt
 < 0 ? -
î∫o
 :Ñet;

562 
RTAI_PROTO
(, 
πf_ªad_Æl_©_⁄˚
,(
fd
, *
buf
, 
cou¡
))

564 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

565 
ªt
 = 
io˘l
(
fd
, 
READ_ALL_AT_ONCE
, &
¨gs
);

566  
ªt
 < 0 ? -
î∫o
 :Ñet;

590 
RTAI_PROTO
(, 
πf_ªad_timed
,(
fd
, *
buf
, 
cou¡
, 
ms_dñay
))

592 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
 = { buf, cou¡, 
ms_dñay
 };

593 
ªt
 = 
io˘l
(
fd
, 
READ_TIMED
, &
¨gs
);

594  
ªt
 < 0 ? -
î∫o
 :Ñet;

597 
RTAI_PROTO
(, 
πf_ªad_if
,(
fd
, *
buf
, 
cou¡
))

599 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

600 
ªt
 = 
io˘l
(
fd
, 
READ_IF
, &
¨gs
);

601  
ªt
 < 0 ? -
î∫o
 :Ñet;

625 
RTAI_PROTO
(, 
πf_wrôe_timed
,(
fd
, *
buf
, 
cou¡
, 
ms_dñay
))

627 °ru˘ { *
buf
; 
cou¡
, 
dñay
; } 
¨gs
 = { buf, cou¡, 
ms_dñay
 };

628 
ªt
 = 
io˘l
(
fd
, 
WRITE_TIMED
, &
¨gs
);

629  
ªt
 < 0 ? -
î∫o
 :Ñet;

632 
RTAI_PROTO
(, 
πf_ovîwrôe
,(
fd
, *
buf
, 
cou¡
))

634 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

635 
ªt
 = 
io˘l
(
fd
, 
OVRWRITE
, &
¨gs
);

636  
ªt
 < 0 ? -
î∫o
 :Ñet;

639 
RTAI_PROTO
(, 
πf_wrôe_if
,(
fd
, *
buf
, 
cou¡
))

641 °ru˘ { *
buf
; 
cou¡
; } 
¨gs
 = { buf, count };

642 
ªt
 = 
io˘l
(
fd
, 
WRITE_IF
, &
¨gs
);

643  
ªt
 < 0 ? -
î∫o
 :Ñet;

646 
RTAI_PROTO
(, 
πf_£m_öô
,(
fd
, 
vÆue
))

648 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_INIT
, 
vÆue
);

649  
ªt
 < 0 ? -
î∫o
 :Ñet;

674 
RTAI_PROTO
(, 
πf_£m_waô
,(
fd
))

676 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_WAIT
);

677  
ªt
 < 0 ? -
î∫o
 :Ñet;

680 
RTAI_PROTO
(, 
πf_£m_åywaô
,(
fd
))

682 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_TRYWAIT
);

683  
ªt
 < 0 ? -
î∫o
 :Ñet;

712 
RTAI_PROTO
(, 
πf_£m_timed_waô
,(
fd
, 
ms_dñay
))

714 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_TIMED_WAIT
, 
ms_dñay
);

715  
ªt
 < 0 ? -
î∫o
 :Ñet;

718 
RTAI_PROTO
(, 
πf_£m_po°
,(
fd
))

720 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_POST
);

721  
ªt
 < 0 ? -
î∫o
 :Ñet;

724 
RTAI_PROTO
(, 
πf_£m_de°roy
,(
fd
))

726 
ªt
 = 
io˘l
(
fd
, 
RTF_SEM_DESTROY
);

727  
ªt
 < 0 ? -
î∫o
 :Ñet;

741 
RTAI_PROTO
(, 
πf_£t_async_sig
,(
fd
, 
signum
))

743 
ªt
 = 
io˘l
(
fd
, 
SET_ASYNC_SIG
, 
signum
);

744  
ªt
 < 0 ? -
î∫o
 :Ñet;

752 
RTAI_PROTO_ALWAYS_INLINE
(*, 
πf_gëfifobymö‹
,(
mö‹
, *
buf
, 
Àn
))

754 
¢¥ötf
(
buf
,
Àn
,
CONFIG_RTAI_FIFOS_TEMPLATE
,
mö‹
);

755  
buf
;

758 
RTAI_PROTO
(, 
πf_gëfifoby«me
,(c⁄° *
«me
))

760 
fd
, 
mö‹
;

761 
nm
[
RTF_NAMELEN
+1];

763 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

766 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

767  -
î∫o
;

769 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

770 
mö‹
 = 
io˘l
(
fd
, 
RTF_NAME_LOOKUP
, 
nm
);

771 
˛o£
(
fd
);

772  
mö‹
 < 0 ? -
î∫o
 : minor;

775 
RTAI_PROTO
(, 
πf_«med_¸óã
,(c⁄° *
«me
, 
size
))

777 
fd
, 
mö‹
;

778 
nm
[
RTF_NAMELEN
+1];

780 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

783 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

784  -
î∫o
;

786 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

787 
mö‹
 = 
io˘l
(
fd
, 
RTF_NAMED_CREATE
, 
nm
, 
size
);

788 
˛o£
(
fd
);

789  
mö‹
 < 0 ? -
î∫o
 : minor;

792 
RTAI_PROTO
(, 
πf_¸óã_«med
,(c⁄° *
«me
))

794 
fd
, 
mö‹
;

795 
nm
[
RTF_NAMELEN
+1];

797 i‡(
°æí
(
«me
Ë> 
RTF_NAMELEN
) {

800 i‡((
fd
 = 
›í
(
πf_gëfifobymö‹
(0,
nm
,“m)), 
O_RDONLY
)) < 0) {

801  -
î∫o
;

803 
°∫˝y
(
nm
, 
«me
, 
RTF_NAMELEN
+1);

804 
mö‹
 = 
io˘l
(
fd
, 
RTF_CREATE_NAMED
, 
nm
);

805 
˛o£
(
fd
);

806  
mö‹
 < 0 ? -
î∫o
 : minor;

809 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_hal_names.h

20 #i‚de‡
_RTAI_HAL_NAMES_H


21 
	#_RTAI_HAL_NAMES_H


	)

23 
	~<löux/vîsi⁄.h
>

25 
	#TSKEXT0
 (
HAL_ROOT_NPTDKEYS
 - 4)

	)

26 
	#TSKEXT1
 (
HAL_ROOT_NPTDKEYS
 - 3)

	)

27 
	#TSKEXT2
 (
HAL_ROOT_NPTDKEYS
 - 2)

	)

28 
	#TSKEXT3
 (
HAL_ROOT_NPTDKEYS
 - 1)

	)

30 
	#HAL_VERSION_STRING
 
IPIPE_VERSION_STRING


	)

32 
	#HAL_NR_CPUS
 
IPIPE_NR_CPUS


	)

33 
	#HAL_NR_FAULTS
 
IPIPE_NR_FAULTS


	)

34 
	#HAL_NR_EVENTS
 
IPIPE_NR_EVENTS


	)

35 
	#HAL_ROOT_NPTDKEYS
 
IPIPE_ROOT_NPTDKEYS


	)

37 
	#HAL_APIC_HIGH_VECTOR
 
IPIPE_HRTIMER_VECTOR


38 
	#HAL_APIC_LOW_VECTOR
 
IPIPE_RESCHEDULE_VECTOR


39 

	)

40 
	#HAL_SCHEDULE_HEAD
 
IPIPE_EVENT_SCHEDULE


	)

41 
	#HAL_SCHEDULE_TAIL
 (
IPIPE_FIRST_EVENT
 - 2)

42 
	#HAL_SYSCALL_PROLOGUE
 
IPIPE_EVENT_SYSCALL


	)

43 
	#HAL_SYSCALL_EPILOGUE
 1000000

44 
	#HAL_EXIT_PROCESS
 
IPIPE_EVENT_EXIT


	)

45 
	#HAL_KICK_PROCESS
 
IPIPE_EVENT_SIGWAKE


	)

47 
	#hÆ_pùñöe
 
__ùùe_pùñöe


	)

48 
	#hÆ_domaö_°ru˘
 
ùùe_domaö


	)

49 
	#hÆ_roŸ_domaö
 
ùùe_roŸ_domaö


	)

52 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,17Ë|| (
deföed
(
CONFIG_PPC
) && LINUX_VERSION_CODE > KERNEL_VERSION(2,6,13))

53 
	#hÆ_cuºít_domaö
(
˝uid
Ë
	`≥r_˝u
(
ùùe_≥r˝u_domaö
, cpuid)

	)

55 
	#hÆ_cuºít_domaö
(
˝uid
Ë(
ùùe_≥r˝u_domaö
[˝uid])

	)

58 
	#hÆ_¥›ag©e_úq
 
ùùe_¥›ag©e_úq


	)

59 
	#hÆ_scheduÀ_úq
 
ùùe_scheduÀ_úq


	)

61 
	#hÆ_¸ôiˇl_íãr
 
ùùe_¸ôiˇl_íãr


	)

62 
	#hÆ_¸ôiˇl_exô
 
ùùe_¸ôiˇl_exô


	)

64 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,22)

65 
	#hÆ_˛ór_úq
 
__ùùe_˛ór_úq


	)

67 
	#hÆ_˛ór_úq
(
a
, 
b
)

	)

70 
	#hÆ_lock_úq
 
__ùùe_lock_úq


	)

71 
	#hÆ_u∆ock_úq
 
__ùùe_u∆ock_úq


	)

73 
	#hÆ_°d_úq_dty≥
 
__ùùe_°d_úq_dty≥


	)

74 
	#hÆ_ùùe_°d_úq_dty≥
 
__adeos_°d_úq_dty≥


	)

76 
	#hÆ_tick_ªgs
 
__ùùe_tick_ªgs


	)

77 
	#hÆ_tick_úq
 
__ùùe_tick_úq


	)

79 
	#hÆ_sync_°age
 
__ùùe_sync_°age


	)

81 
	#hÆ_£t_úq_afföôy
 
ùùe_£t_úq_afföôy


	)

83 
	#hÆ_¥›ag©e_evít
 
ùùe_¥›ag©e_evít


	)

85 
	#hÆ_gë_sysöfo
 
ùùe_gë_sysöfo


	)

87 
	#HAL_TYPE
 "IPIPE-NOTHREADS"

	)

89 
	#INTERCEPT_WAKE_UP_TASK
(
d©a
Ë((
èsk_°ru˘
 *)d©a)

	)

91 
	#FIRST_LINE_OF_RTAI_DOMAIN_ENTRY
 
	`πai_domaö_íåy
(Ë{ i‡(1)

	)

92 
	#LAST_LINE_OF_RTAI_DOMAIN_ENTRY
 }

	)

94 
	#hÆ_su•íd_domaö
(Ë

	)

96 
	#hÆ_Æloc_úq
 
ùùe_Æloc_vúq


	)

97 
	#hÆ_‰ì_úq
 
ùùe_‰ì_vúq


	)

99 #i‡!
deföed
(
CONFIG_PPC
Ë&& (
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,32) || (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0) && LINUX_VERSION_CODE < KERNEL_VERSION(2,6,14)))

100 
	#hÆ_vútuÆize_úq
 
ùùe_vútuÆize_úq


	)

101 
	#hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
) \

103 
domaö
->
˝ud©a
[
˝uid
].
úq_hôs
[
úq
]++; \

104 } 0)

	)

106 
	#hÆ_vútuÆize_úq
(
d
, 
n
, 
h
, 
a
, 
m
) \

107 
	`ùùe_vútuÆize_úq
(
d
, 
n
, (*)
h
, 
NULL
, 
a
, 
m
)

	)

108 
	#hÆ_úq_hôs_µ
(
úq
, 
domaö
, 
˝uid
) \

111 
domaö
->
˝ud©a
[
˝uid
].
úq_cou¡îs
[
úq
].
≥ndög_hôs
++; \

112 } 0)

	)

115 
	#hÆ_sysöfo_°ru˘
 
ùùe_sysöfo


	)

116 
	#hÆ_©å_°ru˘
 
ùùe_domaö_©å


	)

117 
	#hÆ_öô_©å
 
ùùe_öô_©å


	)

118 
	#hÆ_ªgi°î_domaö
 
ùùe_ªgi°î_domaö


	)

119 
	#hÆ_uƒegi°î_domaö
 
ùùe_uƒegi°î_domaö


	)

120 
	#hÆ_ˇtch_evít
 
ùùe_ˇtch_evít


	)

121 
	#hÆ_evít_h™dÀr
 
ùùe_evít_h™dÀr


	)

122 
	#hÆ_evít_h™dÀr_fun
(
e
Ë
Àgacy
.
h™dÀrs
[e]

123 

	)

124 
	#hÆ_£t_¥ötk_sync
 
ùùe_£t_¥ötk_sync


	)

125 
	#hÆ_£t_¥ötk_async
 
ùùe_£t_¥ötk_async


	)

127 
	#hÆ_scheduÀ_back_roŸ
(
¥ev
) \

129 i‡((
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1)) { \

130 
	`ùùe_ªíãr_roŸ
((
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1), (¥ev)->
pﬁicy
, (¥ev)->
π_¥i‹ôy
); \

131 (
¥ev
)->
	`πai_tskext
(
HAL_ROOT_NPTDKEYS
 - 1Ë
NULL
; \

133 
	`ùùe_ªíãr_roŸ
(
¥ev
, (¥ev)->
pﬁicy
, (¥ev)->
π_¥i‹ôy
); \

135 } 0)

	)

137 
	#hÆ_¥o˚ss‹_id
 
ùùe_¥o˚ss‹_id


	)

139 
	#hÆ_hw_˛i
 
loˇl_úq_dißbÀ_hw


	)

140 
	#hÆ_hw_°i
 
loˇl_úq_íabÀ_hw


	)

141 
	#hÆ_hw_loˇl_úq_ßve
 
loˇl_úq_ßve_hw


	)

142 
	#hÆ_hw_loˇl_úq_ª°‹e
 
loˇl_úq_ª°‹e_hw


	)

143 
	#hÆ_hw_loˇl_úq_Êags
 
loˇl_ßve_Êags_hw


	)

145 
	#hÆ_£t_timî
(
ns
Ë
	`ùùe_tu√_timî
“s, 0)

	)

146 
	#hÆ_ª£t_timî
(Ë
	`ùùe_tu√_timî
(0, 
IPIPE_RESET_TIMER
)

	)

148 
	#hÆ_un°Æl_pùñöe_‰om
 
ùùe_un°Æl_pùñöe_‰om


	)

150 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

151 
	#hÆ_ack_sy°em_úq
 
__ùùe_ack_sy°em_úq


	)

153 
	#hÆ_ack_sy°em_úq
 
__ùùe_ack_≠ic


	)

156 
	#hÆ_úq_h™dÀr
 
πai_úq_h™dÀr


	)

158 
	#hÆ_tskext
 
±d


	)

160 
	#hÆ_£t_löux_èsk_¥i‹ôy
 
ùùe_£tscheduÀr_roŸ


	)

162 #i‡
deföed
(
IPIPE_ROOT_NPTDKEYS
Ë&& 
TSKEXT0
 < 0

163 #îr‹ *** 
TSKEXTs
 
WILL
 
CAUSE
 
MEMORY
 
LEAKS
, 
CHECK
 
BOUNDS
 
IN
 
HAL
 
PATCHES
 ***

	@/usr/realtime/include/rtai_leds.h

21 #i‚de‡
_RTAI_LEDS_H


22 
	#_RTAI_LEDS_H


	)

24 
	~<πai_ty≥s.h
>

26 #i‡
deföed
(
CONFIG_RTAI_INTERNAL_LEDS_SUPPORT
Ë&& deföed(
CONFIG_RTAI_LEDS
)

28 
	~<asm/πai_Àds.h
>

30 #ifde‡
__˝lu•lus


34 
__πai_Àds_öô
();

36 
__πai_Àds_exô
();

38 
π_Àds_£t_mask
(
mask
,

39 
vÆue
);

41 
π_toggÀ_Àds
(
l
);

43 
π_ª£t_Àds
(
l
);

45 
π_£t_Àds
(
l
);

47 
π_˛ór_Àds
();

49 
π_gë_Àds
();

51 
π_£t_Àds_p‹t
(
p
);

53 
π_c⁄fig_Àds
(
ty≥
,

54 (*
func
)(
p
, 
l
),

55 
p
);

57 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_lxrt.h

66 #i‚de‡
_RTAI_LXRT_H


67 
	#_RTAI_LXRT_H


	)

69 
	~<πai_sched.h
>

70 
	~<πai_«m2num.h
>

73 
	#YIELD
 0

	)

74 
	#SUSPEND
 1

	)

75 
	#RESUME
 2

	)

76 
	#MAKE_PERIODIC
 3

	)

77 
	#WAIT_PERIOD
 4

	)

78 
	#SLEEP
 5

	)

79 
	#SLEEP_UNTIL
 6

	)

80 
	#START_TIMER
 7

	)

81 
	#STOP_TIMER
 8

	)

82 
	#GET_TIME
 9

	)

83 
	#COUNT2NANO
 10

	)

84 
	#NANO2COUNT
 11

	)

85 
	#BUSY_SLEEP
 12

	)

86 
	#SET_PERIODIC_MODE
 13

	)

87 
	#SET_ONESHOT_MODE
 14

	)

88 
	#SIGNAL_HANDLER
 15

	)

89 
	#TASK_USE_FPU
 16

	)

90 
	#GET_TASK_INFO
 17

91 
	#HARD_TIMER_COUNT
 18

	)

92 
	#GET_TIME_NS
 19

	)

93 
	#GET_CPU_TIME_NS
 20

	)

94 
	#SET_RUNNABLE_ON_CPUS
 21

	)

95 
	#SET_RUNNABLE_ON_CPUID
 22

	)

96 
	#GET_TIMER_CPU
 23

	)

97 
	#START_RT_APIC_TIMERS
 24

	)

98 
	#HARD_TIMER_COUNT_CPUID
 25

	)

99 
	#COUNT2NANO_CPUID
 26

	)

100 
	#NANO2COUNT_CPUID
 27

	)

101 
	#GET_TIME_CPUID
 28

	)

102 
	#GET_TIME_NS_CPUID
 29

	)

103 
	#MAKE_PERIODIC_NS
 30

	)

104 
	#SET_SCHED_POLICY
 31

	)

105 
	#SET_RESUME_END
 32

	)

106 
	#SPV_RMS
 33

	)

107 
	#WAKEUP_SLEEPING
 34

	)

108 
	#CHANGE_TASK_PRIO
 35

	)

109 
	#SET_RESUME_TIME
 36

	)

110 
	#SET_PERIOD
 37

	)

111 
	#HARD_TIMER_RUNNING
 38

	)

114 
	#TYPED_SEM_INIT
 39

	)

115 
	#SEM_DELETE
 40

	)

116 
	#NAMED_SEM_INIT
 41

	)

117 
	#NAMED_SEM_DELETE
 42

	)

118 
	#SEM_SIGNAL
 43

	)

119 
	#SEM_WAIT
 44

	)

120 
	#SEM_WAIT_IF
 45

	)

121 
	#SEM_WAIT_UNTIL
 46

	)

122 
	#SEM_WAIT_TIMED
 47

	)

123 
	#SEM_BROADCAST
 48

	)

124 
	#SEM_WAIT_BARRIER
 49

	)

125 
	#SEM_COUNT
 50

	)

126 
	#COND_WAIT
 51

	)

127 
	#COND_WAIT_UNTIL
 52

	)

128 
	#COND_WAIT_TIMED
 53

	)

129 
	#RWL_INIT
 54

	)

130 
	#RWL_DELETE
 55

	)

131 
	#NAMED_RWL_INIT
 56

	)

132 
	#NAMED_RWL_DELETE
 57

	)

133 
	#RWL_RDLOCK
 58

	)

134 
	#RWL_RDLOCK_IF
 59

	)

135 
	#RWL_RDLOCK_UNTIL
 60

	)

136 
	#RWL_RDLOCK_TIMED
 61

	)

137 
	#RWL_WRLOCK
 62

	)

138 
	#RWL_WRLOCK_IF
 63

	)

139 
	#RWL_WRLOCK_UNTIL
 64

	)

140 
	#RWL_WRLOCK_TIMED
 65

	)

141 
	#RWL_UNLOCK
 66

	)

142 
	#SPL_INIT
 67

	)

143 
	#SPL_DELETE
 68

	)

144 
	#NAMED_SPL_INIT
 69

	)

145 
	#NAMED_SPL_DELETE
 70

	)

146 
	#SPL_LOCK
 71

	)

147 
	#SPL_LOCK_IF
 72

	)

148 
	#SPL_LOCK_TIMED
 73

	)

149 
	#SPL_UNLOCK
 74

	)

152 
	#TYPED_MBX_INIT
 75

	)

153 
	#MBX_DELETE
 76

	)

154 
	#NAMED_MBX_INIT
 77

	)

155 
	#NAMED_MBX_DELETE
 78

	)

156 
	#MBX_SEND
 79

	)

157 
	#MBX_SEND_WP
 80

	)

158 
	#MBX_SEND_IF
 81

	)

159 
	#MBX_SEND_UNTIL
 82

	)

160 
	#MBX_SEND_TIMED
 83

	)

161 
	#MBX_RECEIVE
 84

	)

162 
	#MBX_RECEIVE_WP
 85

	)

163 
	#MBX_RECEIVE_IF
 86

	)

164 
	#MBX_RECEIVE_UNTIL
 87

	)

165 
	#MBX_RECEIVE_TIMED
 88

	)

166 
	#MBX_EVDRP
 89

	)

167 
	#MBX_OVRWR_SEND
 90

	)

170 
	#SENDMSG
 91

	)

171 
	#SEND_IF
 92

	)

172 
	#SEND_UNTIL
 93

	)

173 
	#SEND_TIMED
 94

	)

174 
	#RECEIVEMSG
 95

	)

175 
	#RECEIVE_IF
 96

	)

176 
	#RECEIVE_UNTIL
 97

	)

177 
	#RECEIVE_TIMED
 98

	)

178 
	#RPCMSG
 99

	)

179 
	#RPC_IF
 100

	)

180 
	#RPC_UNTIL
 101

	)

181 
	#RPC_TIMED
 102

	)

182 
	#EVDRP
 103

	)

183 
	#ISRPC
 104

	)

184 
	#RETURNMSG
 105

	)

187 
	#RPCX
 106

	)

188 
	#RPCX_IF
 107

	)

189 
	#RPCX_UNTIL
 108

	)

190 
	#RPCX_TIMED
 109

	)

191 
	#SENDX
 110

	)

192 
	#SENDX_IF
 111

	)

193 
	#SENDX_UNTIL
 112

	)

194 
	#SENDX_TIMED
 113

	)

195 
	#RETURNX
 114

	)

196 
	#RECEIVEX
 115

	)

197 
	#RECEIVEX_IF
 116

	)

198 
	#RECEIVEX_UNTIL
 117

	)

199 
	#RECEIVEX_TIMED
 118

	)

200 
	#EVDRPX
 119

	)

203 
	#PROXY_ATTACH
 120

	)

204 
	#PROXY_DETACH
 121

	)

205 
	#PROXY_TRIGGER
 122

	)

209 
	#RT_SEND
 123

	)

210 
	#RT_RECEIVE
 124

	)

211 
	#RT_CRECEIVE
 125

	)

212 
	#RT_REPLY
 126

	)

213 
	#RT_PROXY_ATTACH
 127

	)

214 
	#RT_PROXY_DETACH
 128

	)

215 
	#RT_TRIGGER
 129

	)

216 
	#RT_NAME_ATTACH
 130

	)

217 
	#RT_NAME_DETACH
 131

	)

218 
	#RT_NAME_LOCATE
 132

	)

221 
	#BITS_INIT
 133

	)

222 
	#BITS_DELETE
 134

	)

223 
	#NAMED_BITS_INIT
 135

	)

224 
	#NAMED_BITS_DELETE
 136

	)

225 
	#BITS_GET
 137

	)

226 
	#BITS_RESET
 138

	)

227 
	#BITS_SIGNAL
 139

	)

228 
	#BITS_WAIT
 140

	)

229 
	#BITS_WAIT_IF
 141

	)

230 
	#BITS_WAIT_UNTIL
 142

	)

231 
	#BITS_WAIT_TIMED
 143

	)

234 
	#TBX_INIT
 144

	)

235 
	#TBX_DELETE
 145

	)

236 
	#NAMED_TBX_INIT
 146

	)

237 
	#NAMED_TBX_DELETE
 147

	)

238 
	#TBX_SEND
 148

	)

239 
	#TBX_SEND_IF
 149

	)

240 
	#TBX_SEND_UNTIL
 150

	)

241 
	#TBX_SEND_TIMED
 151

	)

242 
	#TBX_RECEIVE
 152

	)

243 
	#TBX_RECEIVE_IF
 153

	)

244 
	#TBX_RECEIVE_UNTIL
 154

	)

245 
	#TBX_RECEIVE_TIMED
 155

	)

246 
	#TBX_BROADCAST
 156

	)

247 
	#TBX_BROADCAST_IF
 157

	)

248 
	#TBX_BROADCAST_UNTIL
 158

	)

249 
	#TBX_BROADCAST_TIMED
 159

	)

250 
	#TBX_URGENT
 160

	)

251 
	#TBX_URGENT_IF
 161

	)

252 
	#TBX_URGENT_UNTIL
 162

	)

253 
	#TBX_URGENT_TIMED
 163

	)

256 
	#MQ_OPEN
 164

	)

257 
	#MQ_RECEIVE
 165

	)

258 
	#MQ_SEND
 166

	)

259 
	#MQ_CLOSE
 167

	)

260 
	#MQ_GETATTR
 168

	)

261 
	#MQ_SETATTR
 169

	)

262 
	#MQ_NOTIFY
 170

	)

263 
	#MQ_UNLINK
 171

	)

264 
	#MQ_TIMEDRECEIVE
 172

	)

265 
	#MQ_TIMEDSEND
 173

	)

268 
	#NAMED_TASK_INIT
 174

	)

269 
	#NAMED_TASK_INIT_CPUID
 175

	)

270 
	#NAMED_TASK_DELETE
 176

	)

273 
	#GET_ADR
 177

	)

274 
	#GET_NAME
 178

	)

277 
	#NETRPC
 179

	)

278 
	#SEND_REQ_REL_PORT
 180

	)

279 
	#DDN2NL
 181

	)

280 
	#SET_THIS_NODE
 182

	)

281 
	#FIND_ASGN_STUB
 183

	)

282 
	#REL_STUB
 184

	)

283 
	#WAITING_RETURN
 185

	)

286 
	#COND_SIGNAL
 186

	)

289 
	#SHM_ALLOC
 187

	)

290 
	#SHM_FREE
 188

	)

291 
	#SHM_SIZE
 189

	)

292 
	#HEAP_SET
 190

	)

293 
	#HEAP_ALLOC
 191

	)

294 
	#HEAP_FREE
 192

	)

295 
	#HEAP_NAMED_ALLOC
 193

	)

296 
	#HEAP_NAMED_FREE
 194

	)

297 
	#MALLOC
 195

	)

298 
	#FREE
 196

	)

299 
	#NAMED_MALLOC
 197

	)

300 
	#NAMED_FREE
 198

	)

302 
	#SUSPEND_IF
 199

	)

303 
	#SUSPEND_UNTIL
 200

	)

304 
	#SUSPEND_TIMED
 201

	)

305 
	#IRQ_WAIT
 202

	)

306 
	#IRQ_WAIT_IF
 203

	)

307 
	#IRQ_WAIT_UNTIL
 204

	)

308 
	#IRQ_WAIT_TIMED
 205

	)

309 
	#IRQ_SIGNAL
 206

	)

310 
	#REQUEST_IRQ_TASK
 207

	)

311 
	#RELEASE_IRQ_TASK
 208

	)

312 
	#SCHED_LOCK
 209

	)

313 
	#SCHED_UNLOCK
 210

	)

314 
	#PEND_LINUX_IRQ
 211

	)

315 
	#SET_LINUX_SYSCALL_MODE
 212

	)

317 
	#REQUEST_RTC
 214

	)

318 
	#RELEASE_RTC
 215

	)

319 
	#RT_GETTID
 216

	)

320 
	#SET_NETRPC_TIMEOUT
 217

	)

321 
	#GET_REAL_TIME
 218

	)

322 
	#GET_REAL_TIME_NS
 219

	)

324 
	#MQ_REG_USP_NOTIFIER
 220

	)

326 
	#RT_SIGNAL_HELPER
 221

	)

327 
	#RT_SIGNAL_WAITSIG
 222

	)

328 
	#RT_SIGNAL_REQUEST
 223

	)

329 
	#RT_SIGNAL_RELEASE
 224

	)

330 
	#RT_SIGNAL_ENABLE
 225

	)

331 
	#RT_SIGNAL_DISABLE
 226

	)

332 
	#RT_SIGNAL_TRIGGER
 227

	)

334 
	#SEM_RT_POLL
 228

	)

335 
	#RT_POLL_NETRPC
 229

	)

337 
	#RT_USRQ_DISPATCHER
 230

	)

339 
	#MAX_LXRT_FUN
 231

	)

343 
	#RT_INITTICKQUEUE
 69

	)

344 
	#RT_RELEASETICKQUEUE
 70

	)

345 
	#RT_QDYNALLOC
 71

	)

346 
	#RT_QDYNFREE
 72

	)

347 
	#RT_QDYNINIT
 73

	)

348 
	#RT_QBLKWAIT
 74

	)

349 
	#RT_QBLKREPEAT
 75

	)

350 
	#RT_QBLKSOON
 76

	)

351 
	#RT_QBLKDEQUEUE
 77

	)

352 
	#RT_QBLKCANCEL
 78

	)

353 
	#RT_QSYNC
 79

	)

354 
	#RT_QRECEIVE
 80

	)

355 
	#RT_QLOOP
 81

	)

356 
	#RT_QSTEP
 82

	)

357 
	#RT_QBLKBEFORE
 83

	)

358 
	#RT_QBLKAFTER
 84

	)

359 
	#RT_QBLKUNHOOK
 85

	)

360 
	#RT_QBLKRELEASE
 86

	)

361 
	#RT_QBLKCOMPLETE
 87

	)

362 
	#RT_QHOOKFLUSH
 88

	)

363 
	#RT_QBLKATHEAD
 89

	)

364 
	#RT_QBLKATTAIL
 90

	)

365 
	#RT_QHOOKINIT
 91

	)

366 
	#RT_QHOOKRELEASE
 92

	)

367 
	#RT_QBLKSCHEDULE
 93

	)

368 
	#RT_GETTICKQUEUEHOOK
 94

	)

370 
	#RT_BOOM
 95

	)

371 
	#RTAI_MALLOC
 96

	)

372 
	#RT_FREE
 97

	)

373 
	#RT_MMGR_STATS
 98

	)

374 
	#RT_STOMP
 99

	)

376 
	#RT_VC_ATTACH
 100

	)

377 
	#RT_VC_RELEASE
 101

	)

378 
	#RT_VC_RESERVE
 102

	)

380 
	#RT_GET_LINUX_SIGNAL
 103

	)

381 
	#RT_GET_ERRNO
 104

	)

382 
	#RT_SET_LINUX_SIGNAL_HANDLER
 105

	)

385 
	#LXRT_GET_ADR
 1000

	)

386 
	#LXRT_GET_NAME
 1001

	)

387 
	#LXRT_TASK_INIT
 1002

	)

388 
	#LXRT_TASK_DELETE
 1003

	)

389 
	#LXRT_SEM_INIT
 1004

	)

390 
	#LXRT_SEM_DELETE
 1005

	)

391 
	#LXRT_MBX_INIT
 1006

	)

392 
	#LXRT_MBX_DELETE
 1007

	)

393 
	#MAKE_SOFT_RT
 1008

	)

394 
	#MAKE_HARD_RT
 1009

	)

395 
	#PRINT_TO_SCREEN
 1010

	)

396 
	#NONROOT_HRT
 1011

	)

397 
	#RT_BUDDY
 1012

	)

398 
	#HRT_USE_FPU
 1013

	)

399 
	#USP_SIGHDL
 1014

	)

400 
	#GET_USP_FLAGS
 1015

	)

401 
	#SET_USP_FLAGS
 1016

	)

402 
	#GET_USP_FLG_MSK
 1017

	)

403 
	#SET_USP_FLG_MSK
 1018

	)

404 
	#IS_HARD
 1019

	)

405 
	#LINUX_SERVER
 1020

	)

406 
	#ALLOC_REGISTER
 1021

	)

407 
	#DELETE_DEREGISTER
 1022

	)

408 
	#HARD_SOFT_TOGGLER
 1023

	)

409 
	#PRINTK
 1024

	)

410 
	#GET_EXECTIME
 1025

	)

411 
	#GET_TIMEORIG
 1026

	)

412 
	#LXRT_RWL_INIT
 1027

	)

413 
	#LXRT_RWL_DELETE
 1028

	)

414 
	#LXRT_SPL_INIT
 1029

	)

415 
	#LXRT_SPL_DELETE
 1030

	)

416 
	#KERNEL_CALIBRATOR
 1031

	)

417 
	#GET_CPU_FREQ
 1032

	)

419 
	#FORCE_SOFT
 0x80000000

	)

423 
	#GT_NR_SYSCALLS
 (1 << 11)

	)

424 
	#ENCODE_LXRT_REQ
(
dynx
, 
§q
, 
lsize
Ë(((dynxË<< 24Ë| ((§qË<< 12Ë| 
GT_NR_SYSCALLS
 | (lsize))

	)

426 
	#SRQ
(
x
Ë(((xË>> 12Ë& 0xFFF)

	)

427 
	#LXRT_NARG
(
x
Ë((xË& (
GT_NR_SYSCALLS
 - 1))

	)

428 
	#INDX
(
x
Ë(((xË>> 24Ë& 0xF)

	)

430 
	#LINUX_SYSCALL_GET_MODE
 0

	)

431 
	#SYNC_LINUX_SYSCALL
 1

	)

432 
	#ASYNC_LINUX_SYSCALL
 2

	)

433 
	#LINUX_SYSCALL_CANCELED
 3

	)

434 
	#LINUX_SYSCALL_GET_CALLBACK
 ((*)4)

	)

436 
	#NSYSCALL_ARGS
 7

	)

437 
	#NSYSCALL_PACARGS
 6

	)

439 
	slöux_sysˇŒ
 { 
	m¨gs
[
NSYSCALL_ARGS
], 
	mmode
; (*
	mcbfun
)(, ); 
	mid
; 
	m∑ˇrgs
[
NSYSCALL_PACARGS
]; 
	mªtvÆ
; };

440 
	slöux_sysˇŒs_li°
 { 
	mö
, 
	mout
, 
	mƒ
, 
	mid
, 
	mmode
; (*
	mcbfun
)(, ); *
	m£rv
; 
löux_sysˇŒ
 *
	msysˇŒ
; 
RT_TASK
 *
	mèsk
; };

442 #ifde‡
__KERNEL__


444 
	~<asm/πai_lxπ.h
>

479 
	#UW1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 19Ë| (((szË& 0x7Ë<< 22))

	)

480 
	#UW2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 25Ë| (((szË& 0x7Ë<< 28))

	)

483 
	#UR1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 3Ë| (((szË& 0x7Ë<< 6))

	)

484 
	#UR2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 9Ë| (((szË& 0x7Ë<< 12))

	)

486 
	#NEED_TO_RW
(
x
Ë((xË& 0xFFFFFFFE)

	)

488 
	#NEED_TO_W
(
x
Ë((xË& (0x3F << 19))

	)

489 
	#NEED_TO_W2ND
(
x
Ë((xË& (0x3F << 25))

	)

491 
	#NEED_TO_R
(
x
Ë((xË& (0x3F << 3))

	)

492 
	#NEED_TO_R2ND
(
x
Ë((xË& (0x3F << 9))

	)

494 
	#USP_WBF1
(
x
Ë(((xË>> 19Ë& 0x7)

	)

495 
	#USP_WSZ1
(
x
Ë(((xË>> 22Ë& 0x7)

	)

496 
	#USP_WBF2
(
x
Ë(((xË>> 25Ë& 0x7)

	)

497 
	#USP_WSZ2
(
x
Ë(((xË>> 28Ë& 0x7)

	)

499 
	#USP_RBF1
(
x
Ë(((xË>> 3Ë& 0x7)

	)

500 
	#USP_RSZ1
(
x
Ë(((xË>> 6Ë& 0x7)

	)

501 
	#USP_RBF2
(
x
Ë(((xË>> 9Ë& 0x7)

	)

502 
	#USP_RSZ2
(
x
Ë(((xË>> 12Ë& 0x7)

	)

504 
	sπ_fun_íåy
 {

505 
	mty≥
;

506 *
	mfun
;

509 
	sπ_«tive_fun_íåy
 {

510 
π_fun_íåy
 
	mfun
;

511 
	mödex
;

514 
π_fun_íåy
 
π_fun_lxπ
[];

516 
ª£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

518 
£t_π_fun_íåõs
(
π_«tive_fun_íåy
 *
íåy
);

520 #ifde‡
__˝lu•lus


526 
	~<löux/ty≥s.h
>

527 
RT_TASK
 *
π_föd_èsk_by_pid
(
pid_t
);

529 
ölöe
 
π_èsk_°ru˘
 *
pid2πèsk
(
pid_t
 
pid
)

531  
π_föd_èsk_by_pid
(
pid
);

534 
ölöe
 
πèsk2pid
(
π_èsk_°ru˘
 *
èsk
)

536  
èsk
->
tid
;

541 
£t_πai_ˇŒback
((*
fun
)());

543 
ªmove_πai_ˇŒback
((*
fun
)());

545 
RT_TASK
 *
π_lxπ_whﬂmi
();

547 
exec_func
((*
func
)(*
d©a
, 
evn
),

548 *
d©a
,

549 
evn
);

551 
£t_π_fun_ext_ödex
(
π_fun_íåy
 *
fun
,

552 
idx
);

554 
ª£t_π_fun_ext_ödex
(
π_fun_íåy
 *
fun
,

555 
idx
);

557 #ifde‡
__˝lu•lus


563 
	~<sys/ty≥s.h
>

564 
	~<sys/mm™.h
>

565 
	~<sched.h
>

566 
	~<°d¨g.h
>

567 
	~<°dio.h
>

568 
	~<°dlib.h
>

569 
	~<°rög.h
>

570 
	~<asm/πai_lxπ.h
>

572 
≠ic_timî_£tup_d©a
;

574 #ifde‡
CONFIG_MMU


576 
	#π_grow_™d_lock_°ack
(
ö¸
) \

578 
buf
[
ö¸
]; \

579 
	`mem£t
(
buf
, 0, 
ö¸
); \

580 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
); \

581 } 0)

	)

585 
	#π_grow_™d_lock_°ack
(
ö¸
Ëdÿ{ } 0)

	)

589 
	#BIDX
 0

590 
	#SIZARG
 (
¨g
)

	)

592 #ifde‡
__˝lu•lus


603 
RTAI_PROTO
(*, 
π_gë_adr
, (
«me
))

605 °ru˘ { 
«me
; } 
¨g
 = {Çame };

606  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_GET_ADR
, &
¨g
).
v
[
LOW
];

617 
RTAI_PROTO
(, 
π_gë_«me
, (*
adr
))

619 °ru˘ { *
adr
; } 
¨g
 = {ádr };

620  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_GET_NAME
, &
¨g
).
i
[
LOW
];

623 
	~<sig«l.h
>

625 #ifde‡
CONFIG_RTAI_HARD_SOFT_TOGGLER


626 #i‚de‡
__SUPPORT_HARD_SOFT_TOGGLER__


627 
	#__SUPPORT_HARD_SOFT_TOGGLER__


	)

629 
h¨d_so·_toggÀr
(
sig
)

631 i‡(
sig
 =
SIGUSR1
) {

632 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
NULL
 };

633 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_SOFT_TOGGLER
, &
¨g
);

639 
	#SET_SIGNAL_TOGGLER
(Ëdÿ{ 
	`sig«l
(
SIGUSR1
, 
h¨d_so·_toggÀr
); } 0)

	)

643 
	#SET_SIGNAL_TOGGLER
(Ëdÿ{ } 0)

	)

647 
RTAI_PROTO
(
RT_TASK
 *, 
π_èsk_öô_schmod
, (
«me
, 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
))

649 
sched_∑øm
 
mysched
;

650 °ru˘ { 
«me
; 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
; } 
¨g
 = {Çamê?Çamê: 
π_gë_«me
(
NULL
),Öriority, stack_size, max_msg_size, cpus_allowed };

652 
SET_SIGNAL_TOGGLER
();

653 i‡(
pﬁicy
 =
SCHED_OTHER
) {

654 
mysched
.
sched_¥i‹ôy
 = 0;

655 } i‡((
mysched
.
sched_¥i‹ôy
 = 
sched_gë_¥i‹ôy_max
(
pﬁicy
Ë- 
¥i‹ôy
) < 1) {

656 
mysched
.
sched_¥i‹ôy
 = 1;

658 i‡(
sched_£tscheduÀr
(0, 
pﬁicy
, &
mysched
) < 0) {

661 
πai_i›l
();

662 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

664  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_INIT
, &
¨g
).
v
[
LOW
];

667 
	#RT_THREAD_STACK_MIN
 16*1024

	)

669 
	~<±hªad.h
>

671 
RTAI_PROTO
(, 
π_thªad_¸óã
, (*
fun
, *
¨gs
, 
°ack_size
))

673 
thªad
;

674 
±hªad_©å_t
 
©å
;

676 
±hªad_©å_öô
(&
©å
);

677 i‡(!
±hªad_©å_£t°acksize
(&
©å
, 
°ack_size
 > 
RT_THREAD_STACK_MIN
 ? stack_size : RT_THREAD_STACK_MIN)) {

678 °ru˘ { 
hs
; } 
¨g
 = { 0 };

679 i‡((
¨g
.
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &¨g).
i
[
LOW
])) {

680 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

682 i‡(
±hªad_¸óã
((
±hªad_t
 *)&
thªad
, &
©å
, (*(*)(*))
fun
, 
¨gs
)) {

683 
thªad
 = 0;

685 i‡(
¨g
.
hs
) {

686 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

689 
thªad
 = 0;

691  
thªad
;

694 
RTAI_PROTO
(, 
π_thªad_joö
, (
thªad
))

696  
±hªad_joö
((
±hªad_t
)
thªad
, 
NULL
);

699 #i‚de‡
__SUPPORT_LINUX_SERVER__


700 
	#__SUPPORT_LINUX_SERVER__


	)

702 
	~<uni°d.h
>

703 
	~<sys/mm™.h
>

705 
löux_sysˇŒ_£rvî_fun
(
löux_sysˇŒs_li°
 *
li°
)

707 
löux_sysˇŒs_li°
 
sysˇŒs
;

709 
sysˇŒs
 = *
li°
;

710 
sysˇŒs
.
£rv
 = &syscalls;

711 i‡((
sysˇŒs
.
£rv
 = 
πai_lxπ
(
BIDX
, (
löux_sysˇŒs_li°
), 
LINUX_SERVER
, &sysˇŒs).
v
[
LOW
])) {

712 *
¨gs
;

713 
löux_sysˇŒ
 *
todo
;

714 
löux_sysˇŒ
 
ˇŒd©a
[
sysˇŒs
.
ƒ
];

715 
sysˇŒs
.
sysˇŒ
 = 
ˇŒd©a
;

716 
mem£t
(
ˇŒd©a
, 0, (calldata));

717 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

718 
li°
->
£rv
 = &
sysˇŒs
;

719 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
RESUME
, &
sysˇŒs
.
èsk
);

720 
abs
(
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
SUSPEND
, &
sysˇŒs
.
£rv
).
i
[
LOW
]Ë< 
RTE_LOWERR
) {

721 i‡(
sysˇŒs
.
sysˇŒ
[sysˇŒs.
out
].
mode
 !
LINUX_SYSCALL_CANCELED
) {

722 
todo
 = &
sysˇŒs
.
sysˇŒ
[sysˇŒs.
out
];

723 
¨gs
 = 
todo
->args;

724 
todo
->
ªtvÆ
 = 
sysˇŒ
(
¨gs
[0],árgs[1],árgs[2],árgs[3],árgs[4],árgs[5],árgs[6]);

725 
todo
->
id
 = -todo->id;

726 i‡(
todo
->
mode
 =
SYNC_LINUX_SYSCALL
) {

727 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
RESUME
, &
sysˇŒs
.
èsk
);

728 } i‡(
sysˇŒs
.
cbfun
) {

729 
todo
->
cbfun
(
¨gs
[0],Åodo->
ªtvÆ
);

732 i‡(++
sysˇŒs
.
out
 >sysˇŒs.
ƒ
) {

733 
sysˇŒs
.
out
 = 0;

737 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
LXRT_TASK_DELETE
, &
sysˇŒs
.
£rv
);

742 
RTAI_PROTO
(, 
π_£t_löux_sysˇŒ_mode
, (
mode
, (*
cbfun
)(, )))

744 °ru˘ { 
mode
; (*
cbfun
)(, ); } 
¨g
 = { mode, cbfun };

745  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_LINUX_SYSCALL_MODE
, &
¨g
).
i
[
LOW
];

748 
RTAI_PROTO
(, 
π_löux_sysˇŒ_mode
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
mode
))

750 
ªtvÆ
;

751 i‡(
sysˇŒs
 =
NULL
) {

752  
EINVAL
;

754 
ªtvÆ
 = 
sysˇŒs
->
mode
;

755 i‡(
mode
 =
SYNC_LINUX_SYSCALL
 || modê=
ASYNC_LINUX_SYSCALL
) {

756 
sysˇŒs
->
mode
 = mode;

758  
ªtvÆ
;

761 
RTAI_PROTO
(*, 
π_löux_sysˇŒ_cbfun
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, (*
cbfun
)(, )))

763 *
ªtvÆ
;

764 i‡(
sysˇŒs
 =
NULL
) {

765  (*)
EINVAL
;

767 
ªtvÆ
 = (*)(()
sysˇŒs
->
cbfun
);

768 i‡(()
cbfun
 > ()
LINUX_SYSCALL_GET_CALLBACK
) {

769 
sysˇŒs
->
cbfun
 = cbfun;

771  
ªtvÆ
;

774 
RTAI_PROTO
(, 
π_löux_sysˇŒ_°©us
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
id
, *
ªtvÆ
))

776 
¶Ÿ
, 
¶Ÿid
;

777 i‡(
sysˇŒs
 =
NULL
 || 
id
 < 0) {

778  
EINVAL
;

780 i‡(
id
 !
abs
(
¶Ÿid
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
 = id%sysˇŒs->
ƒ
].id)) {

781  
ENOENT
;

783 i‡(
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].
mode
 =
LINUX_SYSCALL_CANCELED
) {

784  
ECANCELED
;

786 i‡(
¶Ÿid
 > 0) {

787  
EINPROGRESS
;

789 i‡(
ªtvÆ
) {

790 *
ªtvÆ
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].retval;

795 
RTAI_PROTO
(, 
π_löux_sysˇŒ_ˇn˚l
, (
löux_sysˇŒs_li°
 *
sysˇŒs
, 
id
))

797 
¶Ÿ
, 
¶Ÿid
;

798 i‡(
sysˇŒs
 =
NULL
 || 
id
 < 0) {

799  
EINVAL
;

801 i‡(
id
 !
abs
(
¶Ÿid
 = 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
 = id%sysˇŒs->
ƒ
].id)) {

802  
ENOENT
;

804 i‡(
¶Ÿid
 < 0) {

805  
¶Ÿid
;

807 
sysˇŒs
->
sysˇŒ
[
¶Ÿ
].
mode
 = 
LINUX_SYSCALL_CANCELED
;

811 
RTAI_PROTO
(*, 
π_¸óã_löux_sysˇŒ_£rvî
, (
RT_TASK
 *
èsk
, 
mode
, (*
cbfun
)(, ), 
ƒ_bufd_async_ˇŒs
))

813 i‡((
èsk
 || (èsk = (
RT_TASK
 *)
πai_lxπ
(
BIDX
, (RT_TASK *), 
RT_BUDDY
, &èsk).
v
[
LOW
])Ë&& 
ƒ_bufd_async_ˇŒs
 > 0) {

814 
löux_sysˇŒs_li°
 
sysˇŒs
;

815 
mem£t
(&
sysˇŒs
, 0, (syscalls));

816 
sysˇŒs
.
èsk
 =Åask;

817 
sysˇŒs
.
cbfun
 = cbfun;

818 
sysˇŒs
.
ƒ
 = 
ƒ_bufd_async_ˇŒs
 + 1;

819 
sysˇŒs
.
mode
 = mode;

820 
sysˇŒs
.
£rv
 = 
NULL
;

821 i‡(
π_thªad_¸óã
((*)
löux_sysˇŒ_£rvî_fun
, &
sysˇŒs
, 
RT_THREAD_STACK_MIN
 + sysˇŒs.
ƒ
*(
löux_sysˇŒ
))) {

822 
πai_lxπ
(
BIDX
, (
RT_TASK
 *), 
SUSPEND
, &
èsk
);

823  
sysˇŒs
.
£rv
;

826  
NULL
;

829 
	#π_sync_async_löux_sysˇŒ_£rvî_¸óã
(
èsk
, 
mode
, 
cbfun
, 
ƒ_ˇŒs
Ë
	`π_¸óã_löux_sysˇŒ_£rvî
—ask, mode, cbfun,Çr_ˇŒs)

	)

831 
	#π_löux_sysˇŒ_£rvî_¸óã
(
èsk
Ë
	`π_sync_async_löux_sysˇŒ_£rvî_¸óã
—ask, 
SYNC_LINUX_SYSCALL
, 
NULL
, 1);

	)

833 
RTAI_PROTO
(, 
π_de°roy_löux_sysˇŒ_£rvî
, (
RT_TASK
 *
èsk
))

835 
löux_sysˇŒs_li°
 
s
;

836 
s
.
ƒ
 = 0;

837 
s
.
èsk
 =Åask;

838 
πai_lxπ
(
BIDX
, (
löux_sysˇŒs_li°
), 
LINUX_SERVER
, &
s
);

841 
RTAI_PROTO
(
RT_TASK
 *, 
π_thªad_öô
, (
«me
, 
¥i‹ôy
, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
))

843  
π_èsk_öô_schmod
(
«me
, 
¥i‹ôy
, 0, 
max_msg_size
, 
pﬁicy
, 
˝us_Ælowed
);

890 
RTAI_PROTO
(
RT_TASK
 *,
π_èsk_öô
,(
«me
, 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
))

892  
π_èsk_öô_schmod
(
«me
, 
¥i‹ôy
, 0, 
max_msg_size
, 
SCHED_FIFO
, 0xFF);

895 
RTAI_PROTO
(,
π_£t_sched_pﬁicy
,(
RT_TASK
 *
èsk
, 
pﬁicy
, 
º_qu™tum_ns
))

897 °ru˘ { 
RT_TASK
 *
èsk
; 
pﬁicy
; 
º_qu™tum_ns
; } 
¨g
 = {Åask,Öolicy,Ñr_quantum_ns };

898 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_SCHED_POLICY
, &
¨g
);

901 
RTAI_PROTO
(,
π_ch™ge_¥io
,(
RT_TASK
 *
èsk
, 
¥i‹ôy
))

903 °ru˘ { 
RT_TASK
 *
èsk
; 
¥i‹ôy
; } 
¨g
 = {Åask,Öriority };

904  
πai_lxπ
(
BIDX
, 
SIZARG
, 
CHANGE_TASK_PRIO
, &
¨g
).
i
[
LOW
];

919 
RTAI_PROTO
(, 
π_make_so·_ªÆ_time
, ())

921 °ru˘ { 
dummy
; } 
¨g
;

922 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

925 
RTAI_PROTO
(, 
π_thªad_dñëe
,(
RT_TASK
 *
èsk
))

927 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

928 
π_make_so·_ªÆ_time
();

929  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_DELETE
, &
¨g
).
i
[
LOW
];

932 
	#π_èsk_dñëe
(
èsk
Ë
	`π_thªad_dñëe
—ask)

	)

934 
RTAI_PROTO
(,
π_èsk_yõld
,())

936 °ru˘ { 
dummy
; } 
¨g
;

937  
πai_lxπ
(
BIDX
, 
SIZARG
, 
YIELD
, &
¨g
).
i
[
LOW
];

940 
RTAI_PROTO
(,
π_èsk_su•íd
,(
RT_TASK
 *
èsk
))

942 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

943  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND
, &
¨g
).
i
[
LOW
];

946 
RTAI_PROTO
(,
π_èsk_su•íd_if
,(
RT_TASK
 *
èsk
))

948 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

949  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_IF
, &
¨g
).
i
[
LOW
];

952 
RTAI_PROTO
(,
π_èsk_su•íd_u¡û
,(
RT_TASK
 *
èsk
, 
RTIME
 
time
))

954 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
time
; } 
¨g
 = {Åask,Åime };

955  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_UNTIL
, &
¨g
).
i
[
LOW
];

958 
RTAI_PROTO
(,
π_èsk_su•íd_timed
,(
RT_TASK
 *
èsk
, 
RTIME
 
dñay
))

960 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, delay };

961  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SUSPEND_TIMED
, &
¨g
).
i
[
LOW
];

964 
RTAI_PROTO
(,
π_èsk_ªsume
,(
RT_TASK
 *
èsk
))

966 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

967  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RESUME
, &
¨g
).
i
[
LOW
];

970 
RTAI_PROTO
(, 
π_sched_lock
, ())

972 °ru˘ { 
dummy
; } 
¨g
;

973 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SCHED_LOCK
, &
¨g
);

976 
RTAI_PROTO
(, 
π_sched_u∆ock
, ())

978 °ru˘ { 
dummy
; } 
¨g
;

979 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SCHED_UNLOCK
, &
¨g
);

982 
RTAI_PROTO
(, 
π_≥nd_löux_úq
, (
úq
))

984 °ru˘ { 
úq
; } 
¨g
 = { irq };

985 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PEND_LINUX_IRQ
, &
¨g
);

988 
RTAI_PROTO
(, 
π_úq_waô
, (
úq
))

990 °ru˘ { 
úq
; } 
¨g
 = { irq };

991  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT
, &
¨g
).
i
[
LOW
];

994 
RTAI_PROTO
(, 
π_úq_waô_if
, (
úq
))

996 °ru˘ { 
úq
; } 
¨g
 = { irq };

997  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_IF
, &
¨g
).
i
[
LOW
];

1000 
RTAI_PROTO
(, 
π_úq_waô_u¡û
, (
úq
, 
RTIME
 
time
))

1002 °ru˘ { 
úq
; 
RTIME
 
time
; } 
¨g
 = { irq,Åime };

1003  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

1006 
RTAI_PROTO
(, 
π_úq_waô_timed
, (
úq
, 
RTIME
 
dñay
))

1008 °ru˘ { 
úq
; 
RTIME
 
dñay
; } 
¨g
 = { irq, delay };

1009  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

1012 
RTAI_PROTO
(, 
π_úq_sig«l
, (
úq
))

1014 °ru˘ { 
úq
; } 
¨g
 = { irq };

1015  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IRQ_SIGNAL
, &
¨g
).
i
[
LOW
];

1018 
RTAI_PROTO
(, 
π_ªque°_úq_èsk
, (
úq
, *
h™dÀr
, 
ty≥
, 
afföe2èsk
))

1020 °ru˘ { 
úq
; *
h™dÀr
; 
ty≥
, 
afföe2èsk
; } 
¨g
 = { irq, handler,Åype,áffine2task };

1021  
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_IRQ_TASK
, &
¨g
).
i
[
LOW
];

1025 
RTAI_PROTO
(, 
π_ªÀa£_úq_èsk
, (
úq
))

1027 °ru˘ { 
úq
; } 
¨g
 = { irq };

1028  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_IRQ_TASK
, &
¨g
).
i
[
LOW
];

1031 
RTAI_PROTO
(, 
π_èsk_make_≥riodic
,(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_time
, RTIME 
≥riod
))

1033 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = {Åask, start_time,Öeriod };

1034  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC
, &
¨g
).
i
[
LOW
];

1037 
RTAI_PROTO
(,
π_èsk_make_≥riodic_ªœtive_ns
,(
RT_TASK
 *
èsk
, 
RTIME
 
°¨t_dñay
, RTIME 
≥riod
))

1039 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = {Åask, 
°¨t_dñay
,Öeriod };

1040  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC_NS
, &
¨g
).
i
[
LOW
];

1043 
RTAI_PROTO
(,
π_èsk_waô_≥riod
,())

1045 °ru˘ { 
dummy
; } 
¨g
;

1046  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAIT_PERIOD
, &
¨g
).
i
[
LOW
];

1049 
RTAI_PROTO
(,
π_¶ìp
,(
RTIME
 
dñay
))

1051 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

1052  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SLEEP
, &
¨g
).
i
[
LOW
];

1055 
RTAI_PROTO
(,
π_¶ìp_u¡û
,(
RTIME
 
time
))

1057 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

1058  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SLEEP_UNTIL
, &
¨g
).
i
[
LOW
];

1061 
RTAI_PROTO
(,
π_is_h¨d_timî_ru¬ög
,())

1063 °ru˘ { 
dummy
; } 
¨g
;

1064  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_RUNNING
, &
¨g
).
i
[
LOW
];

1067 
RTAI_PROTO
(
RTIME
, 
°¨t_π_timî
, (
≥riod
))

1069 
hs
;

1070 
RTIME
 
ªtvÆ
;

1071 °ru˘ { 
≥riod
; } 
¨g
 = { 0 };

1072 i‡((
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &
¨g
).
i
[
LOW
])) {

1073 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

1075 
¨g
.
≥riod
 =Öeriod;

1076 
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
START_TIMER
, &
¨g
).
π
;

1077 i‡(
hs
) {

1078 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1080  
ªtvÆ
;

1083 
RTAI_PROTO
(, 
°›_π_timî
, ())

1085 °ru˘ { 
hs
; } 
¨g
 = { 0 };

1086 i‡((
¨g
.
hs
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &¨g).
i
[
LOW
])) {

1087 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_SOFT_RT
, &
¨g
);

1089 
πai_lxπ
(
BIDX
, 
SIZARG
, 
STOP_TIMER
, &
¨g
);

1090 i‡(
¨g
.
hs
) {

1091 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1095 
RTAI_PROTO
(, 
π_ªque°_πc
, (
πc_‰eq
, *
h™dÀr
))

1097 °ru˘ { 
πc_‰eq
; *
h™dÀr
; } 
¨g
 = {Ñtc_freq, handler };

1098 
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_RTC
, &
¨g
);

1101 
RTAI_PROTO
(, 
π_ªÀa£_πc
, ())

1103 °ru˘ { 
dummy
; } 
¨g
;

1104 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_RTC
, &
¨g
);

1107 
RTAI_PROTO
(
RTIME
, 
π_gë_time
, ())

1109 °ru˘ { 
dummy
; } 
¨g
;

1110  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME
, &
¨g
).
π
;

1113 
RTAI_PROTO
(
RTIME
, 
π_gë_ªÆ_time
, ())

1115 °ru˘ { 
dummy
; } 
¨g
;

1116  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_REAL_TIME
, &
¨g
).
π
;

1119 
RTAI_PROTO
(
RTIME
, 
π_gë_ªÆ_time_ns
, ())

1121 °ru˘ { 
dummy
; } 
¨g
;

1122  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_REAL_TIME_NS
, &
¨g
).
π
;

1125 
RTAI_PROTO
(
RTIME
, 
cou¡2«no
, (RTIME 
cou¡
))

1127 °ru˘ { 
RTIME
 
cou¡
; } 
¨g
 = { count };

1128  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COUNT2NANO
, &
¨g
).
π
;

1131 
RTAI_PROTO
(
RTIME
, 
«no2cou¡
, (RTIME 
«nos
))

1133 °ru˘ { 
RTIME
 
«nos
; } 
¨g
 = {Çanos };

1134  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NANO2COUNT
, &
¨g
).
π
;

1137 
RTAI_PROTO
(, 
π_busy_¶ìp
, (
ns
))

1139 °ru˘ { 
ns
; } 
¨g
 = {Çs };

1140 
πai_lxπ
(
BIDX
, 
SIZARG
, 
BUSY_SLEEP
, &
¨g
);

1143 
RTAI_PROTO
(, 
π_£t_≥riodic_mode
, ())

1145 °ru˘ { 
dummy
; } 
¨g
;

1146 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_PERIODIC_MODE
, &
¨g
);

1149 
RTAI_PROTO
(, 
π_£t_⁄eshŸ_mode
, ())

1151 °ru˘ { 
dummy
; } 
¨g
;

1152 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_ONESHOT_MODE
, &
¨g
);

1155 
RTAI_PROTO
(, 
π_èsk_sig«l_h™dÀr
, (
RT_TASK
 *
èsk
, (*
h™dÀr
)()))

1157 °ru˘ { 
RT_TASK
 *
èsk
; (*
h™dÀr
)(); } 
¨g
 = {Åask, handler };

1158  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SIGNAL_HANDLER
, &
¨g
).
i
[
LOW
];

1161 
RTAI_PROTO
(,
π_èsk_u£_Âu
,(
RT_TASK
 *
èsk
, 
u£_Âu_Êag
))

1163 °ru˘ { 
RT_TASK
 *
èsk
; 
u£_Âu_Êag
; } 
¨g
 = {Åask, use_fpu_flag };

1164 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BUDDY
, &
¨g
).
v
[
LOW
] !
èsk
) {

1165  
πai_lxπ
(
BIDX
, 
SIZARG
, 
TASK_USE_FPU
, &
¨g
).
i
[
LOW
];

1170 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HRT_USE_FPU
, &
¨g
);

1175 
RTAI_PROTO
(,
π_buddy_èsk_u£_Âu
,(
RT_TASK
 *
èsk
, 
u£_Âu_Êag
))

1177 °ru˘ { 
RT_TASK
 *
èsk
; 
u£_Âu_Êag
; } 
¨g
 = {Åask, use_fpu_flag };

1178  
πai_lxπ
(
BIDX
, 
SIZARG
, 
TASK_USE_FPU
, &
¨g
).
i
[
LOW
];

1189 
RTAI_PROTO
(, 
π_èsk_gë_öfo
, (
RT_TASK
 *
èsk
, 
RT_TASK_INFO
 *
èsk_öfo
))

1191 
RT_TASK_INFO
 
…ask_öfo
;

1192 °ru˘ { 
RT_TASK
 *
èsk
; 
RT_TASK_INFO
 *
èsköfo
; } 
¨g
 = {Åask, &
…ask_öfo
 };

1193 i‡(
èsk_öfo
 && !
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TASK_INFO
, &
¨g
).
i
[
LOW
]) {

1194 *
èsk_öfo
 = 
…ask_öfo
;

1197  -
EINVAL
;

1200 
RTAI_PROTO
(, 
π_gë_¥i‹ôõs
, (
RT_TASK
 *
èsk
, *
¥i‹ôy
, *
ba£_¥i‹ôy
))

1202 
RT_TASK_INFO
 
èsk_öfo
;

1203 i‡(
¥i‹ôy
 && 
ba£_¥i‹ôy
 && !
π_èsk_gë_öfo
(
èsk
, &
èsk_öfo
)) {

1204 *
¥i‹ôy
 = 
èsk_öfo
.priority;

1205 *
ba£_¥i‹ôy
 = 
èsk_öfo
.base_priority;

1208  -
EINVAL
;

1211 
RTAI_PROTO
(, 
π_h¨d_timî_tick
, ())

1213 °ru˘ { 
dummy
; } 
¨g
;

1214  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_COUNT
, &
¨g
).
i
[
LOW
];

1217 
RTAI_PROTO
(
RTIME
,
π_gë_time_ns
,())

1219 °ru˘ { 
dummy
; } 
¨g
;

1220  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_NS
, &
¨g
).
π
;

1223 
RTAI_PROTO
(
RTIME
,
π_gë_˝u_time_ns
,())

1225 °ru˘ { 
dummy
; } 
¨g
;

1226  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_CPU_TIME_NS
, &
¨g
).
π
;

1229 
	#π_«med_èsk_öô
(
èsk_«me
, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
) \

1230 
	`π_èsk_öô
(
	`«m2num
(
èsk_«me
), 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
)

	)

1232 
	#π_«med_èsk_öô_˝uid
(
èsk_«me
, 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
, 
run_⁄_˝u
) \

1233 
	`π_èsk_öô_˝uid
(
	`«m2num
(
èsk_«me
), 
thªad
, 
d©a
, 
°ack_size
, 
¥io
, 
u£s_Âu
, 
sig«l
, 
run_⁄_˝u
)

	)

1235 
RTAI_PROTO
(,
π_£t_ru¬abÀ_⁄_˝us
,(
RT_TASK
 *
èsk
, 
˝u_mask
))

1237 °ru˘ { 
RT_TASK
 *
èsk
; 
˝u_mask
; } 
¨g
 = {Åask, cpu_mask };

1238 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RUNNABLE_ON_CPUS
, &
¨g
);

1241 
RTAI_PROTO
(,
π_£t_ru¬abÀ_⁄_˝uid
,(
RT_TASK
 *
èsk
, 
˝uid
))

1243 °ru˘ { 
RT_TASK
 *
èsk
; 
˝uid
; } 
¨g
 = {Åask, cpuid };

1244 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RUNNABLE_ON_CPUID
, &
¨g
);

1247 
RTAI_PROTO
(,
π_gë_timî_˝u
,())

1249 °ru˘ { 
dummy
; } 
¨g
;

1250  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIMER_CPU
, &
¨g
).
i
[
LOW
];

1253 
RTAI_PROTO
(,
°¨t_π_≠ic_timîs
,(
≠ic_timî_£tup_d©a
 *
£tup_mode
, 
rcvr_jiffõs_˝uid
))

1255 °ru˘ { 
≠ic_timî_£tup_d©a
 *
£tup_mode
; 
rcvr_jiffõs_˝uid
; } 
¨g
 = { setup_mode,Ñcvr_jiffies_cpuid };

1256 
πai_lxπ
(
BIDX
, 
SIZARG
, 
START_RT_APIC_TIMERS
, &
¨g
);

1259 
RTAI_PROTO
(, 
π_h¨d_timî_tick_˝uid
, (
˝uid
))

1261 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1262  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_TIMER_COUNT_CPUID
, &
¨g
).
i
[
LOW
];

1265 
RTAI_PROTO
(
RTIME
,
cou¡2«no_˝uid
,(RTIME 
cou¡
, 
˝uid
))

1267 °ru˘ { 
RTIME
 
cou¡
; 
˝uid
; } 
¨g
 = { count, cpuid };

1268  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COUNT2NANO_CPUID
, &
¨g
).
π
;

1271 
RTAI_PROTO
(
RTIME
,
«no2cou¡_˝uid
,(RTIME 
«nos
, 
˝uid
))

1273 °ru˘ { 
RTIME
 
«nos
; 
˝uid
; } 
¨g
 = {Çanos, cpuid };

1274  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NANO2COUNT_CPUID
, &
¨g
).
π
;

1277 
RTAI_PROTO
(
RTIME
,
π_gë_time_˝uid
,(
˝uid
))

1279 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1280  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_CPUID
, &
¨g
).
π
;

1283 
RTAI_PROTO
(
RTIME
,
π_gë_time_ns_˝uid
,(
˝uid
))

1285 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1286  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIME_NS_CPUID
, &
¨g
).
π
;

1289 
RTAI_PROTO
(,
π_boom
,())

1291 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1292 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BOOM
, &
¨g
);

1295 
RTAI_PROTO
(,
π_mmgr_°©s
,())

1297 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1298 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_MMGR_STATS
, &
¨g
);

1301 
RTAI_PROTO
(,
π_°omp
,() )

1303 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

1304 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_STOMP
, &
¨g
);

1307 
RTAI_PROTO
(,
π_gë_löux_sig«l
,(
RT_TASK
 *
èsk
))

1309 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1310  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GET_LINUX_SIGNAL
, &
¨g
).
i
[
LOW
];

1313 
RTAI_PROTO
(,
π_gë_î∫o
,(
RT_TASK
 *
èsk
))

1315 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1316  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GET_ERRNO
, &
¨g
).
i
[
LOW
];

1319 
RTAI_PROTO
(,
π_£t_löux_sig«l_h™dÀr
,(
RT_TASK
 *
èsk
, (*
h™dÀr
)(
sig
)))

1321 °ru˘ { 
RT_TASK
 *
èsk
; (*
h™dÀr
)(
sig
); } 
¨g
 = {Åask, handler };

1322  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_SET_LINUX_SIGNAL_HANDLER
, &
¨g
).
i
[
LOW
];

1325 
	#VSNPRINTF_BUF_SIZE
 256

	)

1326 
RTAI_PROTO
(,
π_¥ötk
,(c⁄° *
f‹m©
, ...))

1328 
di•œy
[
VSNPRINTF_BUF_SIZE
];

1329 °ru˘ { c⁄° *
di•œy
; 
nch
; } 
¨g
 = { display, 0 };

1330 
va_li°
 
¨gs
;

1332 
va_°¨t
(
¨gs
, 
f‹m©
);

1333 
¨g
.
nch
 = 
v¢¥ötf
(
di•œy
, 
VSNPRINTF_BUF_SIZE
, 
f‹m©
, 
¨gs
);

1334 
va_íd
(
¨gs
);

1335 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PRINTK
, &
¨g
);

1336  
¨g
.
nch
;

1339 
RTAI_PROTO
(,
πai_¥öt_to_s¸ìn
,(c⁄° *
f‹m©
, ...))

1341 
di•œy
[
VSNPRINTF_BUF_SIZE
];

1342 °ru˘ { c⁄° *
di•œy
; 
nch
; } 
¨g
 = { display, 0 };

1343 
va_li°
 
¨gs
;

1345 
va_°¨t
(
¨gs
, 
f‹m©
);

1346 
¨g
.
nch
 = 
v¢¥ötf
(
di•œy
, 
VSNPRINTF_BUF_SIZE
, 
f‹m©
, 
¨gs
);

1347 
va_íd
(
¨gs
);

1348 
πai_lxπ
(
BIDX
, 
SIZARG
, 
PRINTK
, &
¨g
);

1349  
¨g
.
nch
;

1352 
RTAI_PROTO
(,
π_u•_sig«l_h™dÀr
,((*
h™dÀr
)()))

1354 °ru˘ { (*
h™dÀr
)(); } 
¨g
 = { handler };

1355  
πai_lxπ
(
BIDX
, 
SIZARG
, 
USP_SIGHDL
, &
¨g
).
i
[0];

1358 
RTAI_PROTO
(,
π_gë_u•_Êags
,(
RT_TASK
 *
π_èsk
))

1360 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1361  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_USP_FLAGS
, &
¨g
).
i
[
LOW
];

1364 
RTAI_PROTO
(,
π_gë_u•_Êags_mask
,(
RT_TASK
 *
π_èsk
))

1366 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1367  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_USP_FLG_MSK
, &
¨g
).
i
[
LOW
];

1370 
RTAI_PROTO
(,
π_£t_u•_Êags
,(
RT_TASK
 *
π_èsk
, 
Êags
))

1372 °ru˘ { 
RT_TASK
 *
èsk
; 
Êags
; } 
¨g
 = { 
π_èsk
, flags };

1373 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_USP_FLAGS
, &
¨g
);

1376 
RTAI_PROTO
(,
π_£t_u•_Êags_mask
,(
Êags_mask
))

1378 °ru˘ { 
Êags_mask
; } 
¨g
 = { flags_mask };

1379 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_USP_FLG_MSK
, &
¨g
);

1382 
RTAI_PROTO
(
pid_t
, 
π_gë_löux_tid
, (
RT_TASK
 *
èsk
))

1384 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1385  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HARD_SOFT_TOGGLER
, &
¨g
).
i
[
LOW
];

1388 
RTAI_PROTO
(
RT_TASK
 *,
π_agít
,())

1390 °ru˘ { 
dummy
; } 
¨g
;

1391  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_BUDDY
, &
¨g
).
v
[
LOW
];

1394 
	#π_buddy
(Ë
	`π_agít
()

	)

1396 
RTAI_PROTO
(, 
π_gëtid
, ())

1398 °ru˘ { 
dummy
; } 
¨g
;

1399  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

1424 
RTAI_PROTO
(,
π_make_h¨d_ªÆ_time
,())

1426 °ru˘ { 
dummy
; } 
¨g
;

1427 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_HARD_RT
, &
¨g
);

1438 
RTAI_PROTO
(,
π_Ælow_n⁄roŸ_hπ
,())

1440 °ru˘ { 
dummy
; } 
¨g
;

1441 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NONROOT_HRT
, &
¨g
);

1444 
RTAI_PROTO
(,
π_is_h¨d_ªÆ_time
,(
RT_TASK
 *
π_èsk
))

1446 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = { 
π_èsk
 };

1447  
πai_lxπ
(
BIDX
, 
SIZARG
, 
IS_HARD
, &
¨g
).
i
[
LOW
];

1450 
	#π_is_so·_ªÆ_time
(
π_èsk
Ë(!
	`π_is_h¨d_ªÆ_time
(‘t_èsk)))

	)

1452 
RTAI_PROTO
(,
π_èsk_£t_ªsume_íd_times
,(
RTIME
 
ªsume
, RTIME 
íd
))

1454 °ru˘ { 
RTIME
 
ªsume
, 
íd
; } 
¨g
 = {Ñesume,Énd };

1455 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RESUME_END
, &
¨g
);

1458 
RTAI_PROTO
(,
π_£t_ªsume_time
,(
RT_TASK
 *
π_èsk
, 
RTIME
 
√w_ªsume_time
))

1460 °ru˘ { 
RT_TASK
 *
π_èsk
; 
RTIME
 
√w_ªsume_time
; } 
¨g
 = {Ñt_task,Çew_resume_time };

1461  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_RESUME_TIME
, &
¨g
).
i
[
LOW
];

1464 
RTAI_PROTO
(, 
π_£t_≥riod
, (
RT_TASK
 *
π_èsk
, 
RTIME
 
√w_≥riod
))

1466 °ru˘ { 
RT_TASK
 *
π_èsk
; 
RTIME
 
√w_≥riod
; } 
¨g
 = {Ñt_task,Çew_period };

1467  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SET_PERIOD
, &
¨g
).
i
[
LOW
];

1470 
RTAI_PROTO
(, 
π_•v_RMS
, (
˝uid
))

1472 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

1473 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPV_RMS
, &
¨g
);

1476 
RTAI_PROTO
(, 
π_èsk_masked_unblock
, (
RT_TASK
 *
èsk
, 
mask
))

1478 °ru˘ { 
RT_TASK
 *
èsk
; 
mask
; } 
¨g
 = {Åask, mask };

1479  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAKEUP_SLEEPING
, &
¨g
).
i
[
LOW
];

1482 
	#π_èsk_wakeup_¶ìpög
(
èsk
Ë
	`π_èsk_masked_unblock
—ask, 
RT_SCHED_DELAYED
)

	)

1484 
RTAI_PROTO
(, 
π_gë_exe˘ime
, (
RT_TASK
 *
èsk
, 
RTIME
 *
exe˘ime
))

1486 
RTIME
 
Àxe˘ime
[] = { 0LL, 0LL, 0LL };

1487 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 *
Àxe˘ime
; } 
¨g
 = {Åask,Üexectime };

1488 
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_EXECTIME
, &
¨g
);

1489 
mem˝y
(
exe˘ime
, 
Àxe˘ime
, (lexectime));

1492 
RTAI_PROTO
(, 
π_gëtime‹ig
, (
RTIME
 
time_‹ig
[]))

1494 °ru˘ { 
RTIME
 *
time_‹ig
; } 
¨g
 = {Åime_orig };

1495 
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_TIMEORIG
, &
¨g
);

1498 
RTAI_PROTO
(
RT_TASK
 *,
·ask_öô
,(
«me
, 
¥i‹ôy
))

1500 °ru˘ { 
«me
; 
¥i‹ôy
, 
°ack_size
, 
max_msg_size
, 
˝us_Ælowed
; } 
¨g
 = {Çame,Öriority, 0, 0, 0 };

1501  (
RT_TASK
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_TASK_INIT
, &
¨g
).
v
[
LOW
];

1504 
RTAI_PROTO
(
RTIME
, 
°¨t_·imî
,(
≥riod
, 
·ick_‰eq
))

1506 °ru˘ { 
·ick_‰eq
; *
h™dÀr
; } 
¨g
 = { ftick_‰eq, 
NULL
 };

1507 i‡(!
≥riod
) {

1508 
πai_lxπ
(
BIDX
, (), 
SET_ONESHOT_MODE
, &
≥riod
);

1510 
πai_lxπ
(
BIDX
, (), 
SET_PERIODIC_MODE
, &
≥riod
);

1512 
πai_lxπ
(
BIDX
, 
SIZARG
, 
REQUEST_RTC
, &
¨g
);

1513  
πai_lxπ
(
BIDX
, (), 
START_TIMER
, &
≥riod
).
π
;

1516 
RTAI_PROTO
(
RTIME
, 
°›_·imî
,())

1518 °ru˘ { 
dummy
; } 
¨g
;

1519 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RELEASE_RTC
, &
¨g
);

1520  
πai_lxπ
(
BIDX
, 
SIZARG
, 
STOP_TIMER
, &
¨g
).
π
;

1523 
RTAI_PROTO
(, 
kî√l_ˇlibøt‹
, (
≥riod
, 
lo›s
, 
L©ícy
))

1525 °ru˘ { 
≥riod
, 
lo›s
, 
L©ícy
; } 
¨g
 = {Öeriod,Üoops, Latency };

1526  
πai_lxπ
(
BIDX
, 
SIZARG
, 
KERNEL_CALIBRATOR
, &
¨g
).
i
[0];

1529 
RTAI_PROTO
(, 
π_gë_˝u_‰eq
, ())

1531 °ru˘ { 
dummy
; } 
¨g
;

1532  
πai_lxπ
(
BIDX
, 
SIZARG
, 
GET_CPU_FREQ
, &
¨g
).
i
[0];

1535 #i‚de‡
CONFIG_RTAI_TSC


1536 
	#π_gë_ts˙t
 
π_gë_time


	)

1539 
ölöe
 
RTIME
 
«nos2ts˙ts
(RTIME 
«nos
, 
˝u_‰eq
)

1541  (
RTIME
)(()
«nos
*(()
˝u_‰eq
/()1000000000));

1544 
ölöe
 
RTIME
 
ts˙ts2«nos
(RTIME 
ts˙ts
, 
˝u_‰eq
)

1546  (
RTIME
)(()
ts˙ts
*(()1000000000/()
˝u_‰eq
));

1549 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_malloc.h

24 #i‚de‡
_RTAI_MALLOC_H


25 
	#_RTAI_MALLOC_H


	)

27 
	~<πai_ty≥s.h
>

29 #ifde‡
__KERNEL__


31 #i‚de‡
__˝lu•lus


33 
	~<löux/kî√l.h
>

34 
	~<löux/li°.h
>

35 
	~<löux/•ölock.h
>

57 
	#RTHEAP_MINLOG2
 4

	)

58 
	#RTHEAP_MAXLOG2
 22

	)

59 
	#RTHEAP_MINALLOCSZ
 (1 << 
RTHEAP_MINLOG2
)

	)

60 
	#RTHEAP_MINALIGNSZ
 
RTHEAP_MINALLOCSZ


	)

61 
	#RTHEAP_NBUCKETS
 (
RTHEAP_MAXLOG2
 - 
RTHEAP_MINLOG2
 + 2)

	)

62 
	#RTHEAP_MAXEXTSZ
 0x7FFFFFFF

	)

63 
	#RTHEAP_GLOBALSZ
 (
CONFIG_RTAI_MALLOC_HEAPSZ
 * 1024)

	)

65 
	#RTHEAP_PFREE
 0

	)

66 
	#RTHEAP_PCONT
 1

	)

67 
	#RTHEAP_PLIST
 2

	)

69 
	#KMALLOC_LIMIT
 (128 * 1024)

	)

71 
	#RTHEAP_NOMEM
 (-1)

	)

72 
	#RTHEAP_PARAM
 (-2)

	)

74 
	sπexã¡
 {

76 
li°_hód
 
	mlök
;

78 
ˇddr_t
 
	mmemba£
,

79 
	mmemlim
,

80 
	m‰ìli°
;

82 
u_ch¨
 
	m∑gem≠
[1];

84 } 
	tπexã¡_t
;

87 
	#RTHEAP_EXTENDABLE
 0x1

	)

90 
	#RTHEAP_EXTEND
 0x1

	)

92 
	sπhóp
 {

94 
•ölock_t
 
	mlock
;

96 
	mÊags
;

98 
u_l⁄g
 
	mexã¡size
,

99 
	m∑gesize
,

100 
	m∑geshi·
,

101 
	mhdrsize
,

102 
	m≈ages
,

103 
	mubyãs
,

104 
	mmaxc⁄t
;

106 
li°_hód
 
	mexã¡s
;

108 
ˇddr_t
 
	mbuckës
[
RTHEAP_NBUCKETS
];

110 } 
	tπhóp_t
;

114 
	gπhóp
;

116 
πhóp
 
	tπhóp_t
;

120 
πhóp_t
 
πai_globÆ_hóp
;

122 
	#πhóp_∑ge_size
(
hóp
Ë((hóp)->
∑gesize
)

	)

123 
	#πhóp_∑ge_cou¡
(
hóp
Ë((hóp)->
≈ages
)

	)

124 
	#πhóp_u£d_mem
(
hóp
Ë((hóp)->
ubyãs
)

	)

126 #ifde‡
CONFIG_RTAI_MALLOC


127 
	#π_mÆloc
(
sz
Ë
	`πhóp_Æloc
(&
πai_globÆ_hóp
, sz, 0)

	)

128 
	#π_‰ì
(
p
Ë
	`πhóp_‰ì
(&
πai_globÆ_hóp
,Ö)

	)

130 
	#π_mÆloc
(
sz
Ë
	`kmÆloc
(sz, 
GFP_KERNEL
)

	)

131 
	#π_‰ì
(
p
Ë
	`k‰ì
’)

	)

134 #ifde‡
__˝lu•lus


138 
__πai_hóp_öô
();

140 
__πai_hóp_exô
();

142 
πhóp_öô
(
πhóp_t
 *
hóp
, *
hó∑ddr
, 
u_l⁄g
 
hópsize
, u_l⁄g 
∑gesize
, 
su¥t
);

144 
πhóp_de°roy
(
πhóp_t
 *
hóp
, 
su¥t
);

146 *
πhóp_Æloc
(
πhóp_t
 *
hóp
, 
u_l⁄g
 
size
, 
Êags
);

148 
πhóp_‰ì
(
πhóp_t
 *
hóp
, *
block
);

150 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_math.h

20 #i‚de‡
_RTAI_MATH_H


21 
	#_RTAI_MATH_H


	)

29 #ifde‡
__KERNEL__


31 
	~<πai_schedc‹e.h
>

33 
	#kî∫o
 (
	`_π_whﬂmi
()->
kî∫o
)

	)

35 *
d2°r
(
d
, 
dgt
, *
°r
);

41 #i‚de‡
HUGE_VAL


42 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

45 #i‚de‡
HUGE_VALF


46 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

49 #i‚de‡
HUGE_VALL


50 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

53 #i‚de‡
INFINITY


54 
	#INFINITY
 (
	`__buûtö_öff
())

	)

57 #i‚de‡
NAN


58 
	#NAN
 (
	`__buûtö_«nf
(""))

	)

61 
	#FP_NAN
 0

	)

62 
	#FP_INFINITE
 1

	)

63 
	#FP_ZERO
 2

	)

64 
	#FP_SUBNORMAL
 3

	)

65 
	#FP_NORMAL
 4

	)

67 
__Â˛assify
(
x
);

68 
__Â˛assifyf
(
x
);

69 
__signbô
(
x
);

70 
__signbôf
(
x
);

72 #i‡
CONFIG_RTAI_MATH_LIBM_TO_USE
 == 1

73 
__Â˛assifyd
(
x
);

74 
	#__Â˛assify
 
__Â˛assifyd


	)

75 
__signbôd
(
x
);

76 
	#__signbô
 
__signbôd


	)

79 
	#Â˛assify
(
__x
) \

80 (((
__x
Ë=()Ë? 
	`__Â˛assifyf
(__x) : \

81 
	`__Â˛assify
(
__x
))

	)

83 #i‚de‡
isföôe


84 
	#isföôe
(
__y
) \

85 (
	`__exãnsi⁄__
 ({
__cy
 = 
	`Â˛assify
(
__y
); \

86 
__cy
 !
FP_INFINITE
 && __cy !
FP_NAN
;}))

	)

89 #i‚de‡
isöf


90 
	#isöf
(
y
Ë(
	`Â˛assify
(yË=
FP_INFINITE
)

	)

93 #i‚de‡
i¢™


94 
	#i¢™
(
y
Ë(
	`Â˛assify
(yË=
FP_NAN
)

	)

97 
	#i¢‹mÆ
(
y
Ë(
	`Â˛assify
(yË=
FP_NORMAL
)

	)

98 
	#signbô
(
__x
) \

99 (((
__x
Ë=()Ë? 
	`__signbôf
(__x) : \

100 
	`__signbô
(
__x
))

	)

102 
	#isun‹dîed
(
a
, 
b
) \

103 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
a
Ë
__a
 = (a); __ty≥of__(
b
Ë
__b
 = (b); \

104 
	`Â˛assify
(
__a
Ë=
FP_NAN
 || fp˛assify(
__b
Ë=FP_NAN;}))

	)

106 
	#isgª©î
(
x
, 
y
) \

107 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

108 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x > __y);}))

	)

110 
	#isgª©îequÆ
(
x
, 
y
) \

111 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

112 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x >__y);}))

	)

114 
	#i¶ess
(
x
, 
y
) \

115 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

116 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x < __y);}))

	)

118 
	#i¶es£quÆ
(
x
, 
y
) \

119 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

120 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x <__y);}))

	)

122 
	#i¶essgª©î
(
x
, 
y
) \

123 (
	`__exãnsi⁄__
 ({
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

124 !
	`isun‹dîed
(
__x
,
__y
Ë&& (__x < __y || __x > __y);}))

	)

128 
	#Âkîr
(
x
Ë(
	`i¢™
(xË|| 
	`isöf
(x))

	)

130 
m©hîr
();

132 
acos
(
x
);

133 
acosf
(
x
);

134 
acosh
(
x
);

135 
acoshf
(
x
);

136 
asö
(
x
);

137 
asöf
(
x
);

138 
asöh
(
x
);

139 
asöhf
(
x
);

140 
©™
(
x
);

141 
©™f
(
x
);

142 
©™2
(
y
, 
x
);

143 
©™2f
(
y
, 
x
);

144 
©™h
(
x
);

145 
©™hf
(
x
);

146 
j0
(
x
);

147 
j0f
(
x
);

148 
j1
(
x
);

149 
j1f
(
x
);

150 
jn
(
n
, 
x
);

151 
jnf
(
n
, 
x
);

152 
y0
(
x
);

153 
y0f
(
x
);

154 
y1
(
x
);

155 
y1f
(
x
);

156 
yn
(
n
, 
x
);

157 
ynf
(
n
, 
x
);

158 
cbπ
(
x
);

159 
cbπf
(
x
);

160 
c›ysign
 (
x
, 
y
);

161 
c›ysignf
 (
x
, 
y
);

162 
cosh
(
x
);

163 
coshf
(
x
);

164 
îf
(
x
);

165 
îff
(
x
);

166 
îfc
(
x
);

167 
îfcf
(
x
);

168 
exp
(
x
);

169 
expf
(
x
);

170 
exp2
(
x
);

171 
exp2f
(
x
);

172 
expm1
(
x
);

173 
expm1f
(
x
);

174 
Ábs
(
x
);

175 
Ábsf
(
x
);

176 
fdim
(
x
, 
y
);

177 
fdimf
(
x
, 
y
);

178 
Êo‹
(
x
);

179 
Êo‹f
(
x
);

180 
˚û
(
x
);

181 
˚ûf
(
x
);

182 
fma
(
x
, 
y
, 
z
);

183 
fmaf
(
x
, 
y
, 
z
);

184 
fmax
(
x
, 
y
);

185 
fmaxf
(
x
, 
y
);

186 
fmod
(
x
, 
y
);

187 
fmodf
(
x
, 
y
);

188 
‰exp
(
vÆ
, *
exp
);

189 
‰expf
(
vÆ
, *
exp
);

190 
gamma
(
x
);

191 
gammaf
(
x
);

192 
lgamma
(
x
);

193 
lgammaf
(
x
);

194 
gamma_r
(
x
, *
signgamp
);

195 
gammaf_r
(
x
, *
signgamp
);

196 
lgamma_r
(
x
, *
signgamp
);

197 
lgammaf_r
(
x
, *
signgamp
);

198 
tgamma
(
x
);

199 
tgammaf
(
x
);

200 
hypŸ
(
x
, 
y
);

201 
hypŸf
(
x
, 
y
);

202 
ûogb
(
vÆ
);

203 
ûogbf
(
vÆ
);

204 
öföôy
();

205 
öföôyf
();

206 
ldexp
(
vÆ
, 
exp
);

207 
ldexpf
(
vÆ
, 
exp
);

208 
log
(
x
);

209 
logf
(
x
);

210 
log10
(
x
);

211 
log10f
(
x
);

212 
log1p
(
x
);

213 
log1pf
(
x
);

214 
log2
(
x
);

215 
log2f
(
x
);

216 
logb
(
x
);

217 
logbf
(
x
);

218 
Ãöt
(
x
);

219 
Ãötf
(
x
);

220 
Œröt
(
x
);

221 
Œrötf
(
x
);

222 
Ãound
(
x
);

223 
Ãoundf
(
x
);

224 
Œround
(
x
);

225 
Œroundf
(
x
);

226 
modf
(
vÆ
, *
ù¨t
);

227 
modff
(
vÆ
, *
ù¨t
);

228 
«n
(const *);

229 
«nf
(const *);

230 
√¨byöt
(
x
);

231 
√¨byötf
(
x
);

232 
√xè·î
(
vÆ
, 
dú
);

233 
√xè·îf
(
vÆ
, 
dú
);

234 
pow
(
x
, 
y
);

235 
powf
(
x
, 
y
);

236 
ªmaödî
(
x
, 
y
);

237 
ªmaödîf
(
x
, 
y
);

238 
ªmquo
(
x
, 
y
, *
quo
);

239 
ªmquof
(
x
, 
y
, *
quo
);

240 
röt
(
x
);

241 
rötf
(
x
);

242 
round
(
x
);

243 
roundf
(
x
);

244 
sˇlbn
(
x
, 
n
);

245 
sˇlbnf
(
x
, 
n
);

246 
sˇlb 
(
x
, 
n
);

247 
sˇlb f
(
x
, 
n
);

248 
sö
(
x
);

249 
söf
(
x
);

250 
cos
(
x
);

251 
cosf
(
x
);

252 
söh
(
x
);

253 
söhf
(
x
);

254 
sqπ
(
x
);

255 
sqπf
(
x
);

256 
èn
(
x
);

257 
ènf
(
x
);

258 
ènh
(
x
);

259 
ènhf
(
x
);

260 
åunc
(
x
);

261 
åuncf
(
x
);

263 #ifde‡
CONFIG_RTAI_MATH_KCOMPLEX


265 
	#com∂ex
 
_Com∂ex


	)

266 
	#_Com∂ex_I
 (
__exãnsi⁄__
 1.0
iF
)

	)

267 #unde‡
I


268 
	#I
 
_Com∂ex_I


	)

270 *
cd2°r
(
com∂ex
 
d
, 
dgt
, *
°r
);

272 
	#cÂkîr
(
x
Ë(
	`Âkîr
(
__ªÆ__
 xË|| fpkîr(
__imag__
 x))

	)

274 
ˇbs
(
_Com∂ex
 
z
);

275 
ˇbsf
(
_Com∂ex
 
z
);

276 
asmlökage
 
_Com∂ex
 
ˇcos
(_Com∂ex 
z
);

277 
asmlökage
 
_Com∂ex
 
ˇcosf
(_Com∂ex 
z
);

278 
asmlökage
 
_Com∂ex
 
ˇcosh
(_Com∂ex 
z
);

279 
asmlökage
 
_Com∂ex
 
ˇcoshf
(_Com∂ex 
z
);

280 
ˇrg
(
_Com∂ex
 
z
);

281 
ˇrgf
(
_Com∂ex
 
z
);

282 
asmlökage
 
_Com∂ex
 
ˇsö
(_Com∂ex 
z
);

283 
asmlökage
 
_Com∂ex
 
ˇsöf
(_Com∂ex 
z
);

284 
asmlökage
 
_Com∂ex
 
ˇsöh
(_Com∂ex 
z
);

285 
asmlökage
 
_Com∂ex
 
ˇsöhf
(_Com∂ex 
z
);

286 
asmlökage
 
_Com∂ex
 
ˇèn
(_Com∂ex 
z
);

287 
asmlökage
 
_Com∂ex
 
ˇènf
(_Com∂ex 
z
);

288 
asmlökage
 
_Com∂ex
 
ˇènh
(_Com∂ex 
z
);

289 
asmlökage
 
_Com∂ex
 
ˇènhf
(_Com∂ex 
z
);

290 
asmlökage
 
_Com∂ex
 
ccos
(_Com∂ex 
z
);

291 
asmlökage
 
_Com∂ex
 
ccosf
(_Com∂ex 
z
);

292 
asmlökage
 
_Com∂ex
 
ccosh
(_Com∂ex 
z
);

293 
asmlökage
 
_Com∂ex
 
ccoshf
(_Com∂ex 
z
);

294 
asmlökage
 
_Com∂ex
 
˚xp
(_Com∂ex 
z
);

295 
asmlökage
 
_Com∂ex
 
˚xpf
(_Com∂ex 
z
);

296 
cimag
(
_Com∂ex
 
z
);

297 
cimagf
(
_Com∂ex
 
z
);

298 
asmlökage
 
_Com∂ex
 
˛og
(_Com∂ex 
z
);

299 
asmlökage
 
_Com∂ex
 
˛ogf
(_Com∂ex 
z
);

300 
asmlökage
 
_Com∂ex
 
˛og10
(_Com∂ex 
z
);

301 
asmlökage
 
_Com∂ex
 
˛og10f
(_Com∂ex 
z
);

302 
asmlökage
 
_Com∂ex
 
c⁄j
(_Com∂ex 
z
);

303 
asmlökage
 
_Com∂ex
 
c⁄jf
(_Com∂ex 
z
);

304 
asmlökage
 
_Com∂ex
 
˝ow
(_Com∂ex 
x
, _Com∂ex 
y
);

305 
asmlökage
 
_Com∂ex
 
˝owf
(_Com∂ex 
x
, _Com∂ex 
y
);

306 
asmlökage
 
_Com∂ex
 
˝roj
(_Com∂ex 
z
);

307 
asmlökage
 
_Com∂ex
 
˝rojf
(_Com∂ex 
z
);

308 
¸ól
(
_Com∂ex
 
z
);

309 
¸ólf
(
_Com∂ex
 
z
);

310 
asmlökage
 
_Com∂ex
 
csö
(_Com∂ex 
z
);

311 
asmlökage
 
_Com∂ex
 
csöf
(_Com∂ex 
z
);

312 
asmlökage
 
_Com∂ex
 
csöh
(_Com∂ex 
z
);

313 
asmlökage
 
_Com∂ex
 
csöhf
(_Com∂ex 
z
);

314 
asmlökage
 
_Com∂ex
 
csqπ
(_Com∂ex 
z
);

315 
asmlökage
 
_Com∂ex
 
csqπf
(_Com∂ex 
z
);

316 
asmlökage
 
_Com∂ex
 
˘™
(_Com∂ex 
z
);

317 
asmlökage
 
_Com∂ex
 
˘™f
(_Com∂ex 
z
);

318 
asmlökage
 
_Com∂ex
 
˘™h
(_Com∂ex 
z
);

319 
asmlökage
 
_Com∂ex
 
˘™hf
(_Com∂ex 
z
);

	@/usr/realtime/include/rtai_mbx.h

24 #i‚de‡
_RTAI_MBX_H


25 
	#_RTAI_MBX_H


	)

27 
	~<πai_£m.h
>

29 
	#RT_MBX_MAGIC
 0x3f81aab

30 

	)

31 
	gπ_èsk_°ru˘
;

32 
	gπ_maûbox
;

34 #ifde‡
__KERNEL__


36 #i‚de‡
__˝lu•lus


38 
	sπ_maûbox
 {

39 
	mmagic
;

40 
SEM
 
	m¢d£m
, 
	mrcv£m
;

41 
π_èsk_°ru˘
 *
	mwaôög_èsk
, *
	mowndby
;

42 *
	mbuÁdr
;

43 
	msize
, 
	mfbyã
, 
	mlbyã
, 
	mavbs
, 
	m‰bs
;

44 
•ölock_t
 
	mlock
;

45 #ifde‡
CONFIG_RTAI_RT_POLL


46 
π_pﬁl_ql
 
	mpﬁl_ªcv
;

47 
π_pﬁl_ql
 
	mpﬁl_£nd
;

49 } 
	tMBX
;

55 
__πai_mbx_öô
();

57 
__πai_mbx_exô
();

59 
RTAI_SYSCALL_MODE
 
π_ty≥d_mbx_öô
(
π_maûbox
 *
mbx
, 
size
, 
qty≥
);

61 
π_mbx_öô
(
π_maûbox
 *
mbx
, 
size
);

63 
RTAI_SYSCALL_MODE
 
π_mbx_dñëe
(
π_maûbox
 *
mbx
);

65 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

66 
ölöe
 
π_mbx_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

68  
_π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
, 1);

71 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

72 
ölöe
 
π_mbx_£nd_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

74  
_π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
, 1);

77 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

78 
ölöe
 
π_mbx_£nd_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

80  
_π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
, 1);

83 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
timei
, 
•a˚
);

84 
ölöe
 
π_mbx_£nd_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

86  
_π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
time
, 1);

89 
RTAI_SYSCALL_MODE
 
_π_mbx_£nd_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
);

90 
ölöe
 
π_mbx_£nd_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

92  
_π_mbx_£nd_timed
(
mbx
, 
msg
, 
msg_size
, 
dñay
, 1);

95 
RTAI_SYSCALL_MODE
 
_π_mbx_ovrwr_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

96 
ölöe
 
π_mbx_ovrwr_£nd
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

98  
_π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
, 1);

101 
RTAI_SYSCALL_MODE
 
_π_mbx_evdΩ
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

102 
ölöe
 
π_mbx_evdΩ
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

104  
_π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
, 1);

107 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

108 
ölöe
 
π_mbx_ª˚ive
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

110  
_π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
, 1);

113 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

114 
ölöe
 
π_mbx_ª˚ive_wp
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

116  
_π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
, 1);

119 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
•a˚
);

120 
ölöe
 
π_mbx_ª˚ive_if
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
)

122  
_π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
, 1);

125 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
, 
•a˚
);

126 
ölöe
 
π_mbx_ª˚ive_u¡û
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

128  
_π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
time
, 1);

131 
RTAI_SYSCALL_MODE
 
_π_mbx_ª˚ive_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
, 
•a˚
);

132 
ölöe
 
π_mbx_ª˚ive_timed
(
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

134  
_π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
dñay
, 1);

137 
RTAI_SYSCALL_MODE
 
π_maûbox
 *
_π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

138 
ölöe
 
π_maûbox
 *
π_ty≥d_«med_mbx_öô
(c⁄° *
mbx_«me
, 
size
, 
qty≥
)

140  
_π_ty≥d_«med_mbx_öô
(
«m2num
(
mbx_«me
), 
size
, 
qty≥
);

143 
RTAI_SYSCALL_MODE
 
π_«med_mbx_dñëe
(
π_maûbox
 *
mbx
);

145 
	#π_«med_mbx_öô
(
mbx_«me
, 
size
Ë
	`π_ty≥d_«med_mbx_öô
(mbx_«me, size, 
FIFO_Q
)

	)

147 #ifde‡
__˝lu•lus


153 
	~<πai_lxπ.h
>

155 #ifde‡
__˝lu•lus


159 
RTAI_PROTO
(
π_maûbox
 *, 
π_ty≥d_mbx_öô
, (
«me
, 
size
, 
qty≥
))

161 °ru˘ { 
«me
; 
size
; 
qty≥
; } 
¨g
 = {Çame, size, qtype };

162  (
π_maûbox
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_MBX_INIT
, &
¨g
).
v
[
LOW
];

179 
	#π_mbx_öô
(
«me
, 
size
Ë
	`π_ty≥d_mbx_öô
“ame, size, 
FIFO_Q
)

	)

181 
RTAI_PROTO
(, 
π_mbx_dñëe
, (
π_maûbox
 *
mbx
))

183 *
¨g
 = 
mbx
;

184  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_MBX_DELETE
, &
¨g
).
i
[
LOW
];

187 
RTAI_PROTO
(
π_maûbox
 *, 
π_ty≥d_«med_mbx_öô
, (c⁄° *
«me
, 
size
, 
ty≥
))

189 °ru˘ { 
«me
; 
size
, 
ty≥
; } 
¨g
 = { 
«m2num
(name), size,Åype };

190  (
π_maûbox
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MBX_INIT
, &
¨g
).
v
[
LOW
];

193 
RTAI_PROTO
(, 
π_«med_mbx_dñëe
, (
π_maûbox
 *
mbx
))

195 °ru˘ { 
π_maûbox
 *
mbx
; } 
¨g
 = { mbx };

196  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MBX_DELETE
, &
¨g
).
i
[
LOW
];

199 
	#π_«med_mbx_öô
(
mbx_«me
, 
size
) \

200 
	`π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
FIFO_Q
)

	)

202 
RTAI_PROTO
(, 
π_mbx_£nd
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

204 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

205  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND
, &
¨g
).
i
[
LOW
];

208 
RTAI_PROTO
(, 
π_mbx_£nd_wp
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

210 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

211  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_WP
, &
¨g
).
i
[
LOW
];

214 
RTAI_PROTO
(, 
π_mbx_£nd_if
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

216 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

217  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_IF
, &
¨g
).
i
[
LOW
];

220 
RTAI_PROTO
(, 
π_mbx_£nd_u¡û
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
))

222 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size,Åime, 0 };

223  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_UNTIL
, &
¨g
).
i
[
LOW
];

226 
RTAI_PROTO
(, 
π_mbx_£nd_timed
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

228 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, delay, 0 };

229  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_SEND_TIMED
, &
¨g
).
i
[
LOW
];

232 
RTAI_PROTO
(, 
π_mbx_ovrwr_£nd
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

234 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

235  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_OVRWR_SEND
, &
¨g
).
i
[
LOW
];

238 
RTAI_PROTO
(, 
π_mbx_evdΩ
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

240 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

241  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_EVDRP
, &
¨g
).
i
[
LOW
];

244 
RTAI_PROTO
(, 
π_mbx_ª˚ive
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

246 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

247  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE
, &
¨g
).
i
[
LOW
];

250 
RTAI_PROTO
(, 
π_mbx_ª˚ive_wp
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

252 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

253  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_WP
, &
¨g
).
i
[
LOW
];

256 
RTAI_PROTO
(, 
π_mbx_ª˚ive_if
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
))

258 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, 0 };

259  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_IF
, &
¨g
).
i
[
LOW
];

262 
RTAI_PROTO
(, 
π_mbx_ª˚ive_u¡û
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
))

264 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size,Åime, 0 };

265  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_UNTIL
, &
¨g
).
i
[
LOW
];

268 
RTAI_PROTO
(, 
π_mbx_ª˚ive_timed
, (
π_maûbox
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

270 °ru˘ { 
π_maûbox
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, (*)msg, msg_size, delay, 0 };

271  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
MBX_RECEIVE_TIMED
, &
¨g
).
i
[
LOW
];

274 #ifde‡
__˝lu•lus


280 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

282 
	sπ_maûbox
 {

283 
›aque
;

284 } 
	tMBX
;

	@/usr/realtime/include/rtai_mq.h

28 #i‚de‡
_RTAI_MQ_H


29 
	#_RTAI_MQ_H


	)

31 
	~<löux/vîsi⁄.h
>

32 
	~<πai_£m.h
>

33 
	~<πai_schedc‹e.h
>

35 
	#MQ_OPEN_MAX
 8

	)

36 #i‚def 
MQ_PRIO_MAX


37 
	#MQ_PRIO_MAX
 32

	)

39 
	#MQ_BLOCK
 0

	)

40 
	#MQ_NONBLOCK
 1

	)

41 
	#MQ_NAME_MAX
 80

	)

43 
	#MQ_MIN_MSG_PRIORITY
 0

	)

44 
	#MQ_MAX_MSG_PRIORITY
 
MQ_PRIO_MAX


	)

46 
	#MAX_PQUEUES
 4

	)

48 
	#MAX_MSGSIZE
 50

	)

49 
	#MAX_MSGS
 10

	)

51 
	#O_NOTIFY_NP
 0x1000

	)

53 
	smq_©å
 {

54 
	mmq_maxmsg
;

55 
	mmq_msgsize
;

56 
	mmq_Êags
;

57 
	mmq_curmsgs
;

58 } 
	tMQ_ATTR
;

60 
	#INVALID_PQUEUE
 0

	)

62 #ifde‡
__KERNEL__


64 
	~<löux/ty≥s.h
>

66 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,6)

67 
	tmqd_t
;

70 #i‚de‡
__˝lu•lus


72 
	tmq_boﬁ_t
;

74 #i‚de‡
TRUE


75 
	#TRUE
 1

	)

76 
	#FALSE
 0

	)

79 
	smsg_hdr
 {

80 
size_t
 
	msize
;

81 
uöt
 
	m¥i‹ôy
;

82 *
	m√xt
;

83 } 
	tMSG_HDR
;

85 
	#MSG_HDR_SIZE
 ((
MSG_HDR
))

	)

87 
	squeue_c⁄åﬁ
 {

88 
	mnodöd
;

89 **
	mnodes
;

90 *
	mba£
;

91 *
	mhód
;

92 *
	mèû
;

93 
MQ_ATTR
 
	m©ås
;

94 } 
	tQ_CTRL
;

96 
	smsg
 {

97 
MSG_HDR
 
	mhdr
;

98 
	md©a
;

99 } 
	tMQMSG
;

101 
	snŸify
 {

102 
RT_TASK
 *
	mèsk
;

103 
sigevít
 
	md©a
;

106 
	s_pqueue_des¸_°ru˘
 {

107 
RT_TASK
 *
	mow√r
;

108 
	m›í_cou¡
;

110 
	mq_«me
[
MQ_NAME_MAX
];

111 
uöt
 
	mq_id
;

112 
mq_boﬁ_t
 
	mm¨ked_f‹_dñëi⁄
;

114 
Q_CTRL
 
	md©a
;

115 
mode_t
 
	m≥rmissi⁄s
;

116 
nŸify
 
	mnŸify
;

117 
SEM
 
	memp_c⁄d
;

118 
SEM
 
	mfuŒ_c⁄d
;

119 
SEM
 
	mmuãx
;

120 } 
	tMSG_QUEUE
;

122 
	s_pqueue_ac˚ss_d©a
 {

123 
	mq_id
;

124 
	moÊags
;

125 
sigevít
 *
	mu•_nŸifõr
;

128 
	s_pqueue_ac˚ss_°ru˘
 {

129 
RT_TASK
 *
	mthis_èsk
;

130 
	mn_›í_pqueues
;

131 
_pqueue_ac˚ss_d©a
 
	mq_ac˚ss
[
MQ_OPEN_MAX
];

132 } *
	tQUEUE_CTRL
;

135 
	mFOR_READ
,

136 
	mFOR_WRITE


137 } 
	tQ_ACCESS
;

143 
__πai_mq_öô
();

145 
__πai_mq_exô
();

147 
RTAI_SYSCALL_MODE
 
mqd_t
 
_mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_©å, 
•a˚
);

148 
ölöe
 
mqd_t
 
mq_›í
(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr)

150  
_mq_›í
(
mq_«me
, 
oÊags
, 
≥rmissi⁄s
, 
mq_©å
, 1);

153 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, 
•a˚
);

154 
ölöe
 
size_t
 
mq_ª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
)

156  
_mq_ª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 1);

159 
RTAI_SYSCALL_MODE
 
_mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, 
•a˚
);

160 
ölöe
 
mq_£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
)

162  
_mq_£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 1);

165 
RTAI_SYSCALL_MODE
 
mq_˛o£
(
mqd_t
 
mq
);

167 
RTAI_SYSCALL_MODE
 
mq_gë©å
(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
);

169 
RTAI_SYSCALL_MODE
 
mq_£èâr
(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
);

171 
RTAI_SYSCALL_MODE
 
_mq_nŸify
(
mqd_t
 
mq
, 
RT_TASK
 *
èsk
, 
•a˚
, 
ªm
, c⁄° 
sigevít
 *
nŸifiˇti⁄
);

172 
ölöe
 
mq_nŸify
(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

174  
_mq_nŸify
(
mq
, 
π_whﬂmi
(), 1, (
nŸifiˇti⁄
 ? 0 : 1),Çotification );

177 
RTAI_SYSCALL_MODE
 
mq_u∆ök
(*
mq_«me
);

179 
RTAI_SYSCALL_MODE
 
size_t
 
_mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

180 
ölöe
 
size_t
 
mq_timedª˚ive
(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

182  
_mq_timedª˚ive
(
mq
, 
msg_buf„r
, 
buÊí
, 
msg¥io
, 
ab°ime
, 1);

185 
RTAI_SYSCALL_MODE
 
_mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
, 
•a˚
);

186 
ölöe
 
mq_timed£nd
(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
)

188  
_mq_timed£nd
(
mq
, 
msg
, 
msgÀn
, 
msg¥io
, 
ab°ime
, 1);

191 #ifde‡
__˝lu•lus


197 
	~<sig«l.h
>

198 
	~<πai_lxπ.h
>

199 
	~<πai_sig«l.h
>

201 
	#MQIDX
 0

	)

203 
	tmqd_t
;

205 #ifde‡
__˝lu•lus


209 
	ssu¥t_fun_¨g
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
˝uid
; 
±hªad_t
 
£lf
; };

211 #i‚de‡
__SIGNAL_SUPPORT_FUN_MQ__


212 
	#__SIGNAL_SUPPORT_FUN_MQ__


	)

214 
sig«l_su¥t_fun_mq
(
su¥t_fun_¨g
 *
fun_¨g
)

216 
	ssigtsk_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; };

217 
su¥t_fun_¨g
 
¨g
 = *
fun_¨g
;

218 
	ssigªq_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
sig«l
;} 
sigªq
 = {
NULL
, 
¨g
.èsk, (¨g.
mq
 + 
MAXSIGNALS
)};

219 
sigevít
 
nŸifiˇti⁄
;

221 i‡((
sigªq
.
sigèsk
 = 
π_thªad_öô
(
π_gë_«me
(0), 
SIGNAL_TASK_INIPRIO
, 0, 
SCHED_FIFO
, 1 << 
¨g
.
˝uid
))) {

222 i‡(!
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigªq_t
), 
RT_SIGNAL_REQUEST
, &
sigªq
).
i
[
LOW
]) {

223 
	s¨g_ªg
 { 
mqd_t
 
mq
; 
RT_TASK
 *
èsk
; 
sigevít
 *
u•_nŸifiˇti⁄
;} 
¨g_ªg
 = {
¨g
.mq,árg.èsk, &
nŸifiˇti⁄
};

224 
πai_lxπ
(
MQIDX
, (
¨g_ªg
), 
MQ_REG_USP_NOTIFIER
, &arg_reg);

225 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

226 
π_make_h¨d_ªÆ_time
();

227 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigtsk_t
), 
RT_SIGNAL_WAITSIG
, &
sigªq
).
i
[
LOW
]) {

228 i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_THREAD
) {

229 
nŸifiˇti⁄
.
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄
((
sigvÆ_t
ÍŸifiˇti⁄.
sigev_vÆue
.
sivÆ_öt
);

230 } i‡(
nŸifiˇti⁄
.
sigev_nŸify
 =
SIGEV_SIGNAL
) {

231 
±hªad_kûl
((
±hªad_t
)
¨g
.
£lf
, 
nŸifiˇti⁄
.
sigev_signo
);

234 
π_make_so·_ªÆ_time
();

236 
π_èsk_dñëe
(
sigªq
.
sigèsk
);

242 
RTAI_PROTO
(, 
π_ªque°_sig«l_mq
, (
mqd_t
 
mq
))

244 
su¥t_fun_¨g
 
¨g
 = { 
mq
, 
NULL
, 0, 
±hªad_£lf
() };

245 
¨g
.
˝uid
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (*), 
RT_SIGNAL_HELPER
, (*)&¨g.
èsk
).
i
[
LOW
];

246 
¨g
.
èsk
 = 
π_buddy
();

247 i‡(
π_thªad_¸óã
(
sig«l_su¥t_fun_mq
, &
¨g
, 
SIGNAL_TASK_STACK_SIZE
)) {

248 
ªt
;

249 
ªt
 = 
πai_lxπ
(
RTAI_SIGNALS_IDX
, (
RT_TASK
 *), 
RT_SIGNAL_HELPER
, &
¨g
.
èsk
).
i
[
LOW
];

250  
ªt
;

256 
RTAI_PROTO
(
mqd_t
, 
mq_›í
,(*
mq_«me
, 
oÊags
, 
mode_t
 
≥rmissi⁄s
, 
mq_©å
 *mq_attr))

258 
mqd_t
 
ªt
;

259 °ru˘ {*
mq_«me
; 
oÊags
; 
≥rmissi⁄s
; 
mq_©å
 *mq_©å; 
«mesize
, 
©åsize
; 
•a˚
; } 
¨g
 = { mq_«me, oÊags,Öîmissi⁄s, mq_©å, 
°æí
(mq_name) + 1, (mq_attr), 0 };

260 i‡((
ªt
 = (
mqd_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_OPEN
, &
¨g
).
i
[
LOW
]) >= 0) {

262 i‡(
oÊags
 & 
O_NOTIFY_NP
) {

263 
π_ªque°_sig«l_mq
 (
ªt
);

266  
ªt
;

269 
RTAI_PROTO
(
size_t
, 
mq_ª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
))

271 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio, 0 };

272  (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_RECEIVE
, &
¨g
).
i
[
LOW
];

275 
RTAI_PROTO
(, 
mq_£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
))

277 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio, 0 };

278  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SEND
, &
¨g
).
i
[
LOW
];

281 
RTAI_PROTO
(, 
mq_˛o£
,(
mqd_t
 
mq
))

283 °ru˘ { 
mq
; } 
¨g
 = { mq };

284  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_CLOSE
, &
¨g
).
i
[
LOW
];

287 
RTAI_PROTO
(, 
mq_gë©å
,(
mqd_t
 
mq
, 
mq_©å
 *
©åbuf
))

289 °ru˘ { 
mq
; 
mq_©å
 *
©åbuf
; 
©åsize
; } 
¨g
 = { mq,áttrbuf, (mq_attr) };

290  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_GETATTR
, &
¨g
).
i
[
LOW
];

293 
RTAI_PROTO
(, 
mq_£èâr
,(
mqd_t
 
mq
, c⁄° 
mq_©å
 *
√w_©ås
, mq_©å *
ﬁd_©ås
))

295 °ru˘ { 
mq
; c⁄° 
mq_©å
 *
√w_©ås
; mq_©å *
ﬁd_©ås
; 
©åsize
; } 
¨g
 = { mq,Çew_attrs, old_attrs, (mq_attr) };

296  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_SETATTR
, &
¨g
).
i
[
LOW
];

299 
RTAI_PROTO
(, 
mq_nŸify
,(
mqd_t
 
mq
, c⁄° 
sigevít
 *
nŸifiˇti⁄
))

301 
ªt
;

302 °ru˘ { 
mq
; 
RT_TASK
* 
èsk
; 
•a˚
; 
ªm
; c⁄° 
sigevít
 *
nŸifiˇti⁄
; 
size
;} 
¨g
 = { mq, 
π_buddy
(), 0, (notification ? 0 : 1),Çotification, (sigevent) };

303 i‡((
ªt
 = 
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_NOTIFY
, &
¨g
).
i
[
LOW
]) >= 0) {

304 i‡(
ªt
 =
O_NOTIFY_NP
) {

305 
π_ªque°_sig«l_mq
 (
mq
);

306 
ªt
 = 0;

309  
ªt
;

312 
RTAI_PROTO
(, 
mq_u∆ök
,(*
mq_«me
))

314 °ru˘ { *
mq_«me
; 
size
; } 
¨g
 = { mq_«me, 
°æí
(mq_name) + 1};

315  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_UNLINK
, &
¨g
).
i
[
LOW
];

318 
RTAI_PROTO
(
size_t
, 
mq_timedª˚ive
,(
mqd_t
 
mq
, *
msg_buf„r
, size_à
buÊí
, *
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

320 °ru˘ { 
mq
; *
msg_buf„r
; 
buÊí
; *
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg_buffer, buflen, msgprio,ábstime, 0 };

321  (
size_t
)
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDRECEIVE
, &
¨g
).
i
[
LOW
];

324 
RTAI_PROTO
(, 
mq_timed£nd
,(
mqd_t
 
mq
, c⁄° *
msg
, 
size_t
 
msgÀn
, 
msg¥io
, c⁄° 
time•ec
 *
ab°ime
))

326 °ru˘ { 
mq
; c⁄° *
msg
; 
msgÀn
; 
msg¥io
; c⁄° 
time•ec
 *
ab°ime
; 
•a˚
; } 
¨g
 = { mq, msg, msglen, msgprio,ábstime, 0 };

327  
πai_lxπ
(
MQIDX
, 
SIZARG
, 
MQ_TIMEDSEND
, &
¨g
).
i
[
LOW
];

330 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_msg.h

20 #i‚de‡
_RTAI_MSG_H


21 
	#_RTAI_MSG_H


	)

23 
	~<πai_ty≥s.h
>

25 
	#MSG_ERR
 ((
RT_TASK
 *)
RTE_OBJINV
)

	)

27 
	gπ_èsk_°ru˘
;

28 
	gQueueBlock
;

29 
	gQueueHook
;

31 #ifde‡
__KERNEL__


33 
	st_msgcb
 {

34 
	mcmd
;

35 *
	msbuf
;

36 
size_t
 
	msbyãs
;

37 *
	mrbuf
;

38 
size_t
 
	mrbyãs
;

39 } 
	tMSGCB
;

41 
	#PROXY_MIN_STACK_SIZE
 2048

	)

43 
	s¥oxy_t
 {

44 
π_èsk_°ru˘
 *
	mª˚ivî
;

45 
	mnmsgs
, 
	mnbyãs
;

46 *
	mmsg
;

49 
	#SYNCMSG
 0

	)

50 
	#PROXY
 -1

	)

52 #ifde‡
__˝lu•lus


56 
__πai_msg_öô
();

58 
__πai_msg_exô
();

60 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd
(π_èsk_°ru˘ *
èsk
,

61 
msg
);

63 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_if
(π_èsk_°ru˘ *
èsk
,

64 
msg
);

66 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_u¡û
(π_èsk_°ru˘ *
èsk
,

67 
msg
,

68 
RTIME
 
time
);

70 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£nd_timed
(π_èsk_°ru˘ *
èsk
,

71 
msg
,

72 
RTIME
 
dñay
);

74 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_evdΩ
(π_èsk_°ru˘ *
èsk
,

75 *
msg
);

77 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive
(π_èsk_°ru˘ *
èsk
,

78 *
msg
);

80 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_if
(π_èsk_°ru˘ *
èsk
,

81 *
msg
);

83 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_u¡û
(π_èsk_°ru˘ *
èsk
,

84 *
msg
,

85 
RTIME
 
time
);

87 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ive_timed
(π_èsk_°ru˘ *
èsk
,

88 *
msg
,

89 
RTIME
 
dñay
);

91 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc
(π_èsk_°ru˘ *
èsk
,

92 
to_do
,

93 *
ªsu…
);

95 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_if
(π_èsk_°ru˘ *
èsk
,

96 
to_do
,

97 *
ªsu…
);

99 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_u¡û
(π_èsk_°ru˘ *
èsk
,

100 
to_do
,

101 *
ªsu…
,

102 
RTIME
 
time
);

104 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωc_timed
(π_èsk_°ru˘ *
èsk
,

105 
to_do
,

106 *
ªsu…
,

107 
RTIME
 
dñay
);

109 
RTAI_SYSCALL_MODE
 
π_i§pc
(
π_èsk_°ru˘
 *
èsk
);

111 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ªtu∫
(π_èsk_°ru˘ *
èsk
,

112 
ªsu…
);

114 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx
(π_èsk_°ru˘ *
èsk
,

115 *
smsg
,

116 *
rmsg
,

117 
ssize
,

118 
rsize
);

120 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_if
(π_èsk_°ru˘ *
èsk
,

121 *
smsg
,

122 *
rmsg
,

123 
ssize
,

124 
rsize
);

126 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_u¡û
(π_èsk_°ru˘ *
èsk
,

127 *
smsg
,

128 *
rmsg
,

129 
ssize
,

130 
rsize
,

131 
RTIME
 
time
);

133 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_Ωcx_timed
(π_èsk_°ru˘ *
èsk
,

134 *
smsg
,

135 *
rmsg
,

136 
ssize
,

137 
rsize
,

138 
RTIME
 
dñay
);

140 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx
(π_èsk_°ru˘ *
èsk
,

141 *
msg
,

142 
size
);

144 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_if
(π_èsk_°ru˘ *
èsk
,

145 *
msg
,

146 
size
);

148 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_u¡û
(π_èsk_°ru˘ *
èsk
,

149 *
msg
,

150 
size
,

151 
RTIME
 
time
);

153 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_£ndx_timed
(π_èsk_°ru˘ *
èsk
,

154 *
msg
,

155 
size
,

156 
RTIME
 
dñay
);

158 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ªtu∫x
(π_èsk_°ru˘ *
èsk
,

159 *
msg
,

160 
size
);

162 
	#π_i§pcx
(
èsk
Ë
	`π_i§pc
—ask)

	)

164 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_evdΩx
(π_èsk_°ru˘ *
èsk
,

165 *
msg
,

166 
size
,

167 *
Àn
);

169 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex
(π_èsk_°ru˘ *
èsk
,

170 *
msg
,

171 
size
,

172 *
Àn
);

174 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_if
(π_èsk_°ru˘ *
èsk
,

175 *
msg
,

176 
size
,

177 *
Àn
);

179 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_u¡û
(π_èsk_°ru˘ *
èsk
,

180 *
msg
,

181 
size
,

182 *
Àn
,

183 
RTIME
 
time
);

185 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_ª˚ivex_timed
(π_èsk_°ru˘ *
èsk
,

186 *
msg
,

187 
size
,

188 *
Àn
,

189 
RTIME
 
dñay
);

191 
π_èsk_°ru˘
 *
__π_¥oxy_©èch
((*
func
)(),

192 
π_èsk_°ru˘
 *
èsk
,

193 *
msg
,

194 
nbyãs
,

195 
¥i‹ôy
);

197 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_¥oxy_©èch
(π_èsk_°ru˘ *
èsk
,

198 *
msg
,

199 
nbyãs
,

200 
¥i‹ôy
);

202 
RTAI_SYSCALL_MODE
 
π_¥oxy_dëach
(
π_èsk_°ru˘
 *
¥oxy
);

204 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_åiggî
(π_èsk_°ru˘ *
¥oxy
);

206 
	#exi°
(
«me
Ë
	`π_gë_adr
(
	`«m2num
“ame))

	)

208 
RTAI_SYSCALL_MODE
 
π_Síd
(
pid_t
 
pid
,

209 *
smsg
,

210 *
rmsg
,

211 
size_t
 
ssize
,

212 
size_t
 
rsize
);

214 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Re˚ive
’id_à
pid
,

215 *
msg
,

216 
size_t
 
maxsize
,

217 
size_t
 *
msgÀn
);

219 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Cª˚ive
’id_à
pid
,

220 *
msg
,

221 
size_t
 
maxsize
,

222 
size_t
 *
msgÀn
,

223 
RTIME
 
dñay
);

225 
RTAI_SYSCALL_MODE
 
π_Rïly
(
pid_t
 
pid
,

226 *
msg
,

227 
size_t
 
size
);

229 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Proxy_©èch
’id_à
pid
,

230 *
msg
,

231 
nbyãs
,

232 
¥i‹ôy
);

234 
RTAI_SYSCALL_MODE
 
π_Proxy_dëach
(
pid_t
 
pid
);

236 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Triggî
’id_à
pid
);

238 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Name_©èch
(c⁄° *
«me
);

240 
RTAI_SYSCALL_MODE
 
pid_t
 
π_Name_loˇã
(c⁄° *
ho°
,

241 c⁄° *
«me
);

243 
RTAI_SYSCALL_MODE
 
π_Name_dëach
(
pid_t
 
pid
);

245 #ifde‡
__˝lu•lus


251 
	~<πai_lxπ.h
>

253 #ifde‡
__˝lu•lus


257 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd
,(π_èsk_°ru˘ *
èsk
, 
msg
))

259 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

260  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDMSG
, &
¨g
).
v
[
LOW
];

263 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_if
,(π_èsk_°ru˘ *
èsk
, 
msg
))

265 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

266  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_IF
, &
¨g
).
v
[
LOW
];

269 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_u¡û
,(π_èsk_°ru˘ *
èsk
, 
msg
, 
RTIME
 
time
))

271 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

272  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_UNTIL
, &
¨g
).
v
[
LOW
];

275 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£nd_timed
,(π_èsk_°ru˘ *
èsk
, 
msg
, 
RTIME
 
dñay
))

277 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

278  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEND_TIMED
, &
¨g
).
v
[
LOW
];

281 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_evdΩ
,(π_èsk_°ru˘ *
èsk
, *
msg
))

283 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

284  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
EVDRP
, &
¨g
).
v
[
LOW
];

287 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive
,(π_èsk_°ru˘ *
èsk
, *
msg
))

289 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

290  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEMSG
, &
¨g
).
v
[
LOW
];

293 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_if
,(π_èsk_°ru˘ *
èsk
, *
msg
))

295 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; } 
¨g
 = {Åask, msg };

296  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_IF
, &
¨g
).
v
[
LOW
];

299 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
RTIME
 
time
))

301 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

302  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_UNTIL
, &
¨g
).
v
[
LOW
];

305 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ive_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
RTIME
 
dñay
))

307 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

308  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVE_TIMED
, &
¨g
).
v
[
LOW
];

311 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
))

313 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; } 
¨g
 = {Åask,Åo_do,Ñesult };

314  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCMSG
, &
¨g
).
v
[
LOW
];

317 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_if
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
))

319 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; } 
¨g
 = {Åask,Åo_do,Ñesult };

320  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_IF
, &
¨g
).
v
[
LOW
];

323 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_u¡û
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
time
))

325 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; 
RTIME
 
time
; } 
¨g
 = {Åask,Åo_do,Ñesult,Åime };

326  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_UNTIL
, &
¨g
).
v
[
LOW
];

329 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωc_timed
,(π_èsk_°ru˘ *
èsk
, 
to_do
, *
ªsu…
, 
RTIME
 
dñay
))

331 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
to_do
; *
ªsu…
; 
RTIME
 
dñay
; } 
¨g
 = {Åask,Åo_do,Ñesult, delay };

332  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPC_TIMED
, &
¨g
).
v
[
LOW
];

335 
RTAI_PROTO
(, 
π_i§pc
,(
π_èsk_°ru˘
 *
èsk
))

337 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; } 
¨g
 = {Åask };

338  ()
πai_lxπ
(
BIDX
, 
SIZARG
, 
ISRPC
, &
¨g
).
i
[
LOW
];

341 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ªtu∫
,(π_èsk_°ru˘ *
èsk
, 
ªsu…
))

343 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; 
ªsu…
; } 
¨g
 = {Åask,Ñesult };

344  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RETURNMSG
, &
¨g
).
v
[
LOW
];

347 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
))

349 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

350  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX
, &
¨g
).
v
[
LOW
];

353 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_if
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
))

355 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

356  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_IF
, &
¨g
).
v
[
LOW
];

359 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_u¡û
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
))

361 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

362  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_UNTIL
, &
¨g
).
v
[
LOW
];

365 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_Ωcx_timed
,(π_èsk_°ru˘ *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
))

367 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

368  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RPCX_TIMED
, &
¨g
).
v
[
LOW
];

371 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

373 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

374  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX
, &
¨g
).
v
[
LOW
];

377 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_if
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

379 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

380  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_IF
, &
¨g
).
v
[
LOW
];

383 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, 
RTIME
 
time
))

385 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

386  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_UNTIL
, &
¨g
).
v
[
LOW
];

389 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_£ndx_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
))

391 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

392  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
SENDX_TIMED
, &
¨g
).
v
[
LOW
];

395 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ªtu∫x
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
))

397 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

398  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RETURNX
, &
¨g
).
v
[
LOW
];

401 
	#π_i§pcx
(
èsk
Ë
	`π_i§pc
—ask)

	)

403 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_evdΩx
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

405 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

406  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
EVDRPX
, &
¨g
).
v
[
LOW
];

409 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

411 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

412  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX
, &
¨g
).
v
[
LOW
];

415 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_if
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
))

417 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; } 
¨g
 = {Åask, msg, size,Üen };

418  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_IF
, &
¨g
).
v
[
LOW
];

421 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_u¡û
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
))

423 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Üen,Åime };

424  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_UNTIL
, &
¨g
).
v
[
LOW
];

427 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_ª˚ivex_timed
,(π_èsk_°ru˘ *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
))

429 °ru˘ { 
π_èsk_°ru˘
 *
èsk
; *
msg
; 
size
; *
Àn
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size,Üen, delay };

430  (
π_èsk_°ru˘
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
RECEIVEX_TIMED
, &
¨g
).
v
[
LOW
];

433 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_¥oxy_©èch
,(π_èsk_°ru˘ *
¥oxy
, *
msg
, 
nbyãs
, 
¥i‹ôy
))

435 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; *
msg
; 
nbyãs
, 
¥i‹ôy
;} 
¨g
 = {Öroxy, msg,Çbytes,Öriority };

436  (
π_èsk_°ru˘
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_ATTACH
, &
¨g
).
v
[
LOW
];

439 
RTAI_PROTO
(, 
π_¥oxy_dëach
,(
π_èsk_°ru˘
 *
¥oxy
))

441 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; } 
¨g
 = {Öroxy };

442  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_DETACH
, &
¨g
).
i
[
LOW
];

445 
RTAI_PROTO
(
π_èsk_°ru˘
 *,
π_åiggî
,(π_èsk_°ru˘ *
¥oxy
))

447 °ru˘ { 
π_èsk_°ru˘
 *
¥oxy
; } 
¨g
 = {Öroxy };

448  (
π_èsk_°ru˘
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
PROXY_TRIGGER
, &
¨g
).
v
[
LOW
];

451 
RTAI_PROTO
(, 
π_Síd
,(
pid_t
 
pid
, *
smsg
, *
rmsg
, 
size_t
 
ssize
, size_à
rsize
 ))

453 °ru˘ { 
pid
; *
smsg
; *
rmsg
; 
ssize
, 
rsize
;} 
¨g
 = {Öid, smsg,Ñmsg, ssize,Ñsize };

454  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_SEND
, &
¨g
).
i
[
LOW
];

457 
RTAI_PROTO
(
pid_t
, 
π_Re˚ive
,’id_à
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
))

459 °ru˘ { 
pid
; *
msg
; 
maxsize
; 
size_t
 *
msgÀn
; } 
¨g
 = {Öid, msg, maxsize, msglen };

460  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_RECEIVE
, &
¨g
).
i
[
LOW
];

463 
RTAI_PROTO
(
pid_t
, 
π_Cª˚ive
,’id_à
pid
, *
msg
, 
size_t
 
maxsize
, size_à*
msgÀn
, 
RTIME
 
dñay
))

465 °ru˘ { 
pid
; *
msg
; 
maxsize
; 
size_t
 *
msgÀn
; 
RTIME
 
dñay
;} 
¨g
 = {Öid, msg, maxsize, msglen, delay };

466  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_CRECEIVE
, &
¨g
).
i
[
LOW
];

469 
RTAI_PROTO
(
pid_t
, 
π_Rïly
,’id_à
pid
, *
msg
, 
size_t
 
size
))

471 °ru˘ { 
pid
; *
msg
; 
size
;} 
¨g
 = {Öid, msg, size };

472  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_REPLY
, &
¨g
).
i
[
LOW
];

475 
RTAI_PROTO
(
pid_t
, 
π_Proxy_©èch
,’id_à
pid
, *
msg
, 
nbyãs
, 
¥i‹ôy
))

477 °ru˘ { 
pid
; *
msg
; 
nbyãs
, 
¥i‹ôy
;} 
¨g
 = {Öid, msg,Çbytes,Öriority };

478  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_PROXY_ATTACH
, &
¨g
).
i
[
LOW
];

481 
RTAI_PROTO
(
pid_t
, 
π_Proxy_dëach
,’id_à
pid
))

483 °ru˘ { 
pid
; } 
¨g
 = {Öid };

484  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_PROXY_DETACH
, &
¨g
).
i
[
LOW
];

487 
RTAI_PROTO
(
pid_t
, 
π_Triggî
,’id_à
pid
))

489 °ru˘ { 
pid
; } 
¨g
 = {Öid };

490  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_TRIGGER
, &
¨g
).
i
[
LOW
];

493 
RTAI_PROTO
(
pid_t
, 
π_Alüs_©èch
,(c⁄° *
«me
))

495 °ru˘ { c⁄° *
«me
; } 
¨g
 = {Çame};

496  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_ATTACH
, &
¨g
).
i
[
LOW
];

499 
RTAI_PROTO
(
pid_t
, 
π_Name_loˇã
,(c⁄° *
ho°
, c⁄° *
«me
))

501 °ru˘ { c⁄° *
ho°
, *
«me
; } 
¨g
 = { host,Çame };

502  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_LOCATE
, &
¨g
).
i
[
LOW
];

505 
RTAI_PROTO
(, 
π_Name_dëach
,(
pid_t
 
pid
))

507 °ru˘ { 
pid
; } 
¨g
 = {Öid };

508  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_NAME_DETACH
, &
¨g
).
i
[
LOW
];

511 
RTAI_PROTO
(, 
π_InôTickQueue
,())

513 °ru˘ { 
dummy
; } 
¨g
;

514  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_INITTICKQUEUE
, &
¨g
).
i
[
LOW
];

517 
RTAI_PROTO
(, 
π_Rñó£TickQueue
,())

519 °ru˘ { 
dummy
; } 
¨g
;

520 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_RELEASETICKQUEUE
, &
¨g
);

523 
RTAI_PROTO
(, 
π_qDynAŒoc
,(
n
))

525 °ru˘ { 
n
; } 
¨g
 = {Ç };

526  (Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNALLOC
, &
¨g
).
i
[
LOW
];

529 
RTAI_PROTO
(, 
π_qDynFªe
,(
n
))

531 °ru˘ { 
n
; } 
¨g
 = {Ç };

532  (Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNFREE
, &
¨g
).
i
[
LOW
];

535 
RTAI_PROTO
(
QueueBlock
 *,
π_qDynInô
,(QueueBlock **
q
, (*
fun
)(*, ), *
d©a
, 
evn
 ))

537 
QueueBlock
 *
r
;

539 °ru˘ { 
QueueBlock
 **
q
; (*
fun
)(*, ), *
d©a
; 
evn
; } 
¨g
 = { 0, fun, data,Évn };

540 
r
 = (
QueueBlock
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QDYNINIT
, &
¨g
).
v
[
LOW
];

541 i‡(
q
Ë*q = 
r
;

542  
r
;

545 
RTAI_PROTO
(, 
π_qBlkWaô
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

547 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

548 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKWAIT
, &
¨g
);

551 
RTAI_PROTO
(, 
π_qBlkRïót
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

553 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

554 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKREPEAT
, &
¨g
);

557 
RTAI_PROTO
(, 
π_qBlkSo⁄
,(
QueueBlock
 *
q
))

559 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

560 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKSOON
, &
¨g
);

563 
RTAI_PROTO
(, 
π_qBlkDequeue
,(
QueueBlock
 *
q
))

565 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

566 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKDEQUEUE
, &
¨g
);

569 
RTAI_PROTO
(, 
π_qBlkC™˚l
,(
QueueBlock
 *
q
))

571 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

572 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKCANCEL
, &
¨g
);

575 
RTAI_PROTO
(, 
π_qBlkBef‹e
,(
QueueBlock
 *
cur
, QueueBlock *
nxt
))

577 °ru˘ { 
QueueBlock
 *
cur
, *
nxt
; } 
¨g
 = { cur,Çxt };

578 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKBEFORE
, &
¨g
);

581 
RTAI_PROTO
(, 
π_qBlkA·î
,(
QueueBlock
 *
cur
, QueueBlock *
¥v
))

583 °ru˘ { 
QueueBlock
 *
cur
, *
¥v
; } 
¨g
 = { cur,Örv };

584 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKAFTER
, &
¨g
);

587 
RTAI_PROTO
(
QueueBlock
 *,
π_qBlkUnhook
,(QueueBlock *
q
))

589 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

590  (
QueueBlock
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKUNHOOK
, &
¨g
).
v
[
LOW
];

593 
RTAI_PROTO
(, 
π_qBlkRñó£
,(
QueueBlock
 *
q
))

595 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

596 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKRELEASE
, &
¨g
);

599 
RTAI_PROTO
(, 
π_qBlkCom∂ëe
,(
QueueBlock
 *
q
))

601 °ru˘ { 
QueueBlock
 *
q
; } 
¨g
 = { q };

602 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKCOMPLETE
, &
¨g
);

605 
RTAI_PROTO
(, 
π_qSync
,())

607 °ru˘ { 
dummy
; } 
¨g
;

608  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QSYNC
, &
¨g
).
i
[
LOW
];

611 
RTAI_PROTO
(
pid_t
, 
π_qRe˚ive
,’id_à
èrgë
, *
buf
, 
size_t
 
maxÀn
, size_à*
msgÀn
))

613 °ru˘ { 
èrgë
; *
buf
; 
maxÀn
; 
size_t
 *
msgÀn
; } 
¨g
 = {Åarget, buf, maxlen, msglen };

614  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QRECEIVE
, &
¨g
).
i
[
LOW
];

617 
RTAI_PROTO
(, 
π_qLo›
,())

619 °ru˘ { 
dummy
; } 
¨g
;

620 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QLOOP
, &
¨g
);

623 
RTAI_PROTO
(
RTIME
, 
π_qSãp
,())

625 °ru˘ { 
dummy
; } 
¨g
;

626  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QSTEP
, &
¨g
).
π
;

629 
RTAI_PROTO
(, 
π_qHookFlush
,(
QueueHook
 *
h
))

631 °ru˘ { 
QueueHook
 *
h
; } 
¨g
 = { h };

632 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKFLUSH
, &
¨g
);

635 
RTAI_PROTO
(, 
π_qBlkAtHód
,(
QueueBlock
 *
q
, 
QueueHook
 *
h
))

637 °ru˘ { 
QueueBlock
 *
q
; 
QueueHook
 *
h
; } 
¨g
 = { q, h };

638 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKATHEAD
, &
¨g
);

641 
RTAI_PROTO
(, 
π_qBlkAtTaû
,(
QueueBlock
 *
q
, 
QueueHook
 *
h
))

643 °ru˘ { 
QueueBlock
 *
q
; 
QueueHook
 *
h
; } 
¨g
 = { q, h };

644 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKATTAIL
, &
¨g
);

647 
RTAI_PROTO
(
QueueHook
 *,
π_qHookInô
,(QueueHook **
h
, (*
c
)(*, 
QueueBlock
 *), *
a
))

649 
QueueHook
 *
r
;

650 °ru˘ { 
QueueHook
 **
h
; (*
c
)(*, 
QueueBlock
 *), *
a
;} 
¨g
 = { 0, c,á };

651 
r
 = (
QueueHook
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKINIT
, &
¨g
).
v
[
LOW
];

652 i‡(
h
Ë*h = 
r
;

653  
r
;

656 
RTAI_PROTO
(, 
π_qHookRñó£
,(
QueueHook
 *
h
))

658 °ru˘ { 
QueueHook
 *
h
; } 
¨g
 = { h };

659 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QHOOKRELEASE
, &
¨g
);

662 
RTAI_PROTO
(, 
π_qBlkScheduÀ
,(
QueueBlock
 *
q
, 
RTIME
 
t
))

664 °ru˘ { 
QueueBlock
 *
q
; 
RTIME
 
t
; } 
¨g
 = { q,Å } ;

665 
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_QBLKSCHEDULE
, &
¨g
);

668 
RTAI_PROTO
(
QueueHook
 *,
π_GëTickQueueHook
,())

670 °ru˘ { 
dummy
; } 
¨g
;

671  (
QueueHook
 *Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTICKQUEUEHOOK
, &
¨g
).
v
[
LOW
];

674 
RTAI_PROTO
(
pid_t
, 
π_vc_ª£rve
,( ))

676 °ru˘ { 
dummy
; } 
¨g
;

677  (
pid_t
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_RESERVE
, &
¨g
).
i
[
LOW
];

680 
RTAI_PROTO
(, 
π_vc_©èch
,(
pid_t
 
pid
))

682 °ru˘ { 
pid
; } 
¨g
 = {Öid };

683  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_ATTACH
, &
¨g
).
i
[
LOW
];

686 
RTAI_PROTO
(, 
π_vc_ªÀa£
,(
pid_t
 
pid
))

688 °ru˘ { 
pid
; } 
¨g
 = {Öid };

689  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_VC_RELEASE
, &
¨g
).
i
[
LOW
];

692 #ifde‡
__˝lu•lus


698 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

700 
	st_msgcb
 {

701 
›aque
;

702 } 
	tMSGCB
;

	@/usr/realtime/include/rtai_nam2num.h

32 #i‚de‡
_RTAI_NAM2NUM_H


33 
	#_RTAI_NAM2NUM_H


	)

35 
	~<πai_ty≥s.h
>

37 #ifde‡
__KERNEL__


39 
	~<löux/˘y≥.h
>

40 
	~<löux/°rög.h
>

41 
	#NAM2NUM_PROTO
(
ty≥
, 
«me
, 
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

45 
	~<˘y≥.h
>

46 
	~<°rög.h
>

47 
	#NAM2NUM_PROTO
 
RTAI_PROTO


	)

51 
	#MAX_NAM2NUM
 4096000003UL

52 

	)

70 
NAM2NUM_PROTO
(, 
«m2num
, (c⁄° *
«me
))

72 
	gªtvÆ
 = 0;

73 
	gc
, 
	gi
;

75 
	gi
 = 0; i < 6; i++) {

76 i‡(!(
	gc
 = 
«me
[
i
])) {

79 i‡(
i¶owî
(
c
)) {

80 
	gc
 += (10 - 'a');

81 } i‡(
isuµî
(
c
)) {

82 
	gc
 += (10 - 'A');

83 } i‡(
isdigô
(
c
)) {

84 
	gc
 -= '0';

86 
	gc
 = 
c
 == '_' ? 36 : c == '@' ? 37 : c == '.' ? 38 : 39;

88 
	gªtvÆ
 = 
ªtvÆ
*40 + 
c
;

90  
	gi
 > 0 ? 
	gªtvÆ
 + 2 : 0xFFFFFFFF;

103 
NAM2NUM_PROTO
(, 
num2«m
, (
num
, *
«me
))

105 
	gc
, 
	gi
, 
	gk
, 
	gq
;

106 i‡(
	gnum
 >
MAX_NAM2NUM
) {

107 
°∫˝y
(
«me
, "|null|", 7);

110 
	gi
 = 5;

111 
	gnum
 -= 2;

112 
	gnum
 && 
	gi
 >= 0) {

113 
q
 = 
num
/40;

114 
	gc
 = 
num
 - 
q
*40;

115 
	gnum
 = 
q
;

116 i‡(
	gc
 < 36) {

117 
	g«me
[
i
--] = 
c
 > 9 ? c + 'A' - 10 : c + '0';

119 
	g«me
[
i
--] = 
c
 == 36 ? '_' : c == 37 ? '@' : c == 38 ? '.' : '$';

122 
	gk
 = 0; 
	gi
 < 5; k++) {

123 
	g«me
[
k
] = 
«me
[++
i
];

125 
	g«me
[
k
] = 0;

	@/usr/realtime/include/rtai_netrpc.h

19 #i‚de‡
_RTAI_NETRPC_H


20 
	#_RTAI_NETRPC_H


	)

22 
	~<πai_c⁄fig.h
>

24 
	~<πai_ªgi°ry.h
>

25 
	~<πai_lxπ.h
>

26 
	~<πai_£m.h
>

27 
	~<πai_mbx.h
>

28 
	~<πai_msg.h
>

30 
	#MAX_STUBS
 20

	)

31 
	#MAX_SOCKS
 20

	)

32 
	#MAX_MSG_SIZE
 1500

	)

34 
	#NET_RPC_EXT
 0

	)

36 
	#NETRPC_BASEPORT
 5000

	)

38 
	#PORT_SHF
 1

	)

39 
	#PORT_INC
 1

	)

40 
	#PORT_MSK
 ((1 << 
PORT_SHF
Ë- 1)

	)

42 
	#MACH_SIZE
(
p‹t
Ë((’‹tË& 
PORT_MSK
Ë? 64 : 32)

	)

47 
	#UW1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 19Ë| (((szË& 0x7Ë<< 22))

	)

48 
	#UW2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 25Ë| (((szË& 0x7Ë<< 28))

	)

51 
	#UR1
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 3Ë| (((szË& 0x7Ë<< 6))

	)

52 
	#UR2
(
bf
, 
sz
Ë((((bfË& 0x7Ë<< 9Ë| (((szË& 0x7Ë<< 12))

	)

54 
	#SIZARG
 (
¨g
)

	)

56 
	#PACKPORT
(
p‹t
, 
ext
, 
fun
, 
timed
Ë((’‹tË<< 18Ë| (—imedË<< 13Ë| (”xtË<< 8Ë| (fun))

	)

58 
	#PORT
(
i
Ë((iË>> 18)

	)

59 
	#FUN
(
i
Ë((iË& 0xFF)

	)

60 
	#EXT
(
i
Ë(((iË>> 8Ë& 0x1F)

	)

61 
	#TIMED
(
i
Ë(((iË>> 13Ë& 0x1F)

	)

67 
	#SYNC_NET_RPC
 0xFF

68 

	)

69 
	#PRT_REQ
 1

	)

70 
	#PRT_SRV
 2

	)

71 
	#PRT_RTR
 3

	)

72 
	#PRT_RCV
 4

	)

73 
	#RPC_REQ
 5

	)

74 
	#RPC_SRV
 6

	)

75 
	#RPC_RTR
 7

	)

76 
	#RPC_RCV
 8

	)

78 
	#ADR_CNV_MSK
 (0xFFFFFFFCUL)

	)

80 
	#OWNER
(
node
, 
èsk
) \

81 –((()(
node
)) << 32) | \

82 ((()(
èsk
)Ë& 
ADR_CNV_MSK
Ë)

	)

84 
	#TSK_FRM_WNR
(
i
Ë((iË& 0xFFFFFFFF);

	)

86 
	#WDW
 3

	)

87 
	#WDWMSK
 ((1 << 
WDW
Ë- 1)

	)

89 
	#SINT
 1

	)

90 
	#UINT
 2

	)

91 
	#VADR
 3

	)

92 
	#RTIM
 4

	)

94 
	#PARTYPES1
(
a
Ë◊)

	)

95 
	#PARTYPES2
(
a
, 
b
Ë(((bË<< 
WDW
Ë| (a))

	)

96 
	#PARTYPES3
(
a
, 
b
, 
c
Ë(((cË<< 2*
WDW
Ë| ((bË<< WDWË| (a))

	)

97 
	#PARTYPES4
(
a
, 
b
, 
c
, 
d
Ë(((dË<< 3*
WDW
Ë| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

98 
	#PARTYPES5
(
a
, 
b
, 
c
, 
d
, 
e
Ë((”Ë<< 4*
WDW
Ë| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

99 
	#PARTYPES6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ë(((fË<< 5*
WDW
Ë| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

100 
	#PARTYPES7
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
Ë(((gË<< 6*
WDW
Ë| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

101 
	#PARTYPES8
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
Ë(((hË<< 7*
WDW
Ë| ((gË<< 6*WDWË| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

102 
	#PARTYPES9
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
Ë(((iË<< 8*
WDW
Ë| ((hË<< 7*WDWË| ((gË<< 6*WDWË| ((fË<< 5*WDWË| (”Ë<< 4*WDWË| ((dË<< 3*WDWË| ((cË<< 2*WDWË| ((bË<< WDWË| (a))

	)

105 #i‚de‡
KERNEL_64_ADDRESS_OFFSET


106 
	#KERNEL_64_ADDRESS_OFFSET


	)

107 
	gkadr_of°
[] =

109 
ölöe
 
	$ª£t_kadr
(
vÆ
)

111  (
vÆ
 & 
ADR_CNV_MSK
Ë| 
kadr_of°
[val & 0x3];

112 
	}
}

115 
ölöe
 *
	$RTAI_LXRT
(
p‹t
, 
πai_lxπ_t
 
ªtvÆ
)

117 i‡((Ë=4 && (
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

118 
i
;

119 
i
 = 0; i < 3; i++) {

120 i‡((
ªtvÆ
.
π
 & 0xFF0000000000ULLË=(
kadr_of°
[
i
] & 0xFF0000000000ULL)) {

121 
ªtvÆ
.
π
 |
i
;

122  
ªtvÆ
.
v
[
LOW
];

125  (*)
RTE_OBJINV
;

127  
ªtvÆ
.
v
[
LOW
];

128 
	}
}

130 
	#RT_NET_RPC
(
p‹t
, 
ªtvÆ
Ë
	`RTAI_LXRT
’‹t, (
πai_lxπ_t
ÏëvÆ)

	)

132 
	#RT_NET_ADR
(
p‹t
, 
adr
) \

133 
	`RTAI_LXRT
(
p‹t
, (
πai_lxπ_t
)(()(
adr
)))

	)

135 #ifde‡
__KERNEL__


137 
	~<πai_sched.h
>

139 #ifde‡
__˝lu•lus


143 
__πai_√åpc_öô
();

145 
__πai_√åpc_exô
();

147 
RTAI_SYSCALL_MODE
 
_π_√t_Ωc
(
fun_ext_timed
,

148 
ty≥
,

149 *
¨gs
,

150 
¨gsize
,

151 
•a˚
,

152 
∑πy≥s
);

154 
	#π_√t_Ωc
(
fun_ext_timed
, 
ty≥
, 
¨gs
, 
¨gsize
, 
•a˚
, 
∑πy≥s
) \

155 ({ 
πai_lxπ_t
 
ªtvÆ
;ÑëvÆ.
π
 = 
	`_π_√t_Ωc
(
fun_ext_timed
, 
ty≥
, 
¨gs
, 
¨gsize
, 
•a˚
, 
∑πy≥s
);ÑëvÆ; })

	)

158 
RTAI_SYSCALL_MODE
 
π_£t_√åpc_timeout
–
p‹t
, 
RTIME
 
timeout
);

160 
RTAI_SYSCALL_MODE
 
π_£nd_ªq_ªl_p‹t
(
node
,

161 
p‹t
,

162 
id
,

163 
MBX
 *
mbx
,

164 
h¨d
);

166 
RTAI_SYSCALL_MODE
 
ddn2∆
(c⁄° *
ddn
);

168 
RTAI_SYSCALL_MODE
 
π_£t_this_node
(c⁄° *
ddn
,

169 
node
,

170 
h¨d
);

172 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_föd_asgn_°ub
(
ow√r
,

173 
asgn
);

175 
RTAI_SYSCALL_MODE
 
π_ªl_°ub
(
ow√r
);

177 
RTAI_SYSCALL_MODE
 
π_waôög_ªtu∫
(
node
,

178 
p‹t
);

180 
π_gë_√t_Ωc_ªt
(
MBX
 *
mbx
,

181 *
ªtvÆ
,

182 *
msg1
,

183 *
msgÀn1
,

184 *
msg2
,

185 *
msgÀn2
,

186 
RTIME
 
timeout
,

187 
ty≥
);

189 
ölöe
 
π_sync_√t_Ωc
(
node
, 
p‹t
)

191 i‡(
node
) {

192 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

193  
π_√t_Ωc
(
PACKPORT
(
abs
(
p‹t
), 
NET_RPC_EXT
, 
SYNC_NET_RPC
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
i
[
LOW
];

198 
ölöe
 *
RT_gë_adr
(
node
, 
p‹t
, c⁄° *
¢ame
)

200 i‡(
node
) {

201 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(
¢ame
) };

202  
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
GET_ADR
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)));

204  
π_gë_adr
(
«m2num
(
¢ame
));

207 
ölöe
 
RTIME
 
RT_gë_time_ns
(
node
, 
p‹t
)

209 i‡(
node
) {

210 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

211  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

213  
π_gë_time_ns
();

216 
ölöe
 
RTIME
 
RT_gë_time_ns_˝uid
(
node
, 
p‹t
, 
˝uid
)

218 i‡(
node
) {

219 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

220  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS_CPUID
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

222  
π_gë_time_ns_˝uid
(
˝uid
);

225 
ölöe
 
RTIME
 
RT_gë_˝u_time_ns
(
node
, 
p‹t
)

227 i‡(
node
) {

228 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

229  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_CPU_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
UINT
)).
π
;

231  
π_gë_˝u_time_ns
();

234 
ölöe
 
RT_èsk_su•íd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

236 i‡(
node
) {

237 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

238  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SUSPEND
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

240  
π_èsk_su•íd
(
èsk
);

243 
ölöe
 
RT_èsk_ªsume
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

245 i‡(
node
) {

246 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

247  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RESUME
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

249  
π_èsk_ªsume
(
èsk
);

252 
ölöe
 
RT_¶ìp
(
node
, 
p‹t
, 
RTIME
 
dñay
)

254 i‡(
node
) {

255 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

256 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP
, 1), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
RTIM
));

259 
π_¶ìp
(
«no2cou¡
(
dñay
));

262 
ölöe
 
RT_¶ìp_u¡û
(
node
, 
p‹t
, 
RTIME
 
time
)

264 i‡(
node
) {

265 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

266 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP_UNTIL
, 1), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
RTIM
));

269 
π_¶ìp_u¡û
(
«no2cou¡
(
time
));

272 #i‡
CONFIG_RTAI_SEM


274 
ölöe
 
SEM
 *
RT_ty≥d_«med_£m_öô
(
node
, 
p‹t
, c⁄° *
£m_«me
, 
vÆue
, 
ty≥
)

276 i‡(
node
) {

277 °ru˘ { 
£m_«me
; 
vÆue
; 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
(£m_«me), vÆue,Åy≥, 
NULL
 };

278  (
SEM
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
NAMED_SEM_INIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
SINT
, SINT)));

280  
π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
ty≥
);

283 
ölöe
 
RT_«med_£m_dñëe
(
node
, 
p‹t
, 
SEM
 *
£m
)

285 i‡(
node
) {

286 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

287  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

289  
π_«med_£m_dñëe
(
£m
);

292 
ölöe
 
RT_£m_sig«l
(
node
, 
p‹t
, 
SEM
 *
£m
)

294 i‡(
node
) {

295 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

296  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_SIGNAL
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

298  
π_£m_sig«l
(
£m
);

301 
ölöe
 
RT_£m_brﬂdˇ°
(
node
, 
p‹t
, 
SEM
 *
£m
)

303 i‡(
node
) {

304 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

305  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_BROADCAST
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

307  
π_£m_brﬂdˇ°
(
£m
);

310 
ölöe
 
RT_£m_waô
(
node
, 
p‹t
, 
SEM
 *
£m
)

312 i‡(
node
) {

313 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

314  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

316  
π_£m_waô
(
£m
);

319 
ölöe
 
RT_£m_waô_if
(
node
, 
p‹t
, 
SEM
 *
£m
)

321 i‡(
node
) {

322 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

323  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_IF
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

325  
π_£m_waô_if
(
£m
);

328 
ölöe
 
RT_£m_waô_u¡û
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
time
)

330 i‡(
node
) {

331 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

332  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_UNTIL
, 2), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
RTIM
)).
i
[
LOW
];

334  
π_£m_waô_u¡û
(
£m
, 
«no2cou¡
(
time
));

337 
ölöe
 
RT_£m_waô_timed
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
dñay
)

339 i‡(
node
) {

340 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

341  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_TIMED
, 2), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
RTIM
)).
i
[
LOW
];

343  
π_£m_waô_timed
(
£m
, 
«no2cou¡
(
dñay
));

346 #ifde‡
CONFIG_RTAI_RT_POLL


348 
ölöe
 
RT_pﬁl_4to8
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

350 
i
;

351 
ªtvÆ
;

352 
	sπ_pﬁl_Œs
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

353 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_Œs
),Åimeout };

354 
i
 = 0; i < 
ƒ
; i++) {

355 
pdß
[
i
].
wh©
 = ()
pdßö
[i].what;

356 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

358 
ªtvÆ
 = 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

359 
i
 = 0; i < 
ƒ
; i++) {

360 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

361 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

363  
ªtvÆ
;

366 
ölöe
 
RT_pﬁl_8to4
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

368 
i
;

369 
ªtvÆ
;

370 
	sπ_pﬁl_is
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

371 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_is
),Åimeout };

372 
i
 = 0; i < 
ƒ
; i++) {

373 
pdß
[
i
].
wh©
 = ()()
pdßö
[i].what;

374 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

376 
ªtvÆ
 = 
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

377 
i
 = 0; i < 
ƒ
; i++) {

378 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

379 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

381  
ªtvÆ
;

384 
ölöe
 
RT_pﬁl
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

386 i‡(
node
) {

387 i‡((Ë=4 && (
abs
(
p‹t
Ë& 
PORT_MSK
)) {

388  
RT_pﬁl_4to8
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

389 } i‡((Ë=8 && !(
abs
(
p‹t
Ë& 
PORT_MSK
)) {

390  
RT_pﬁl_8to4
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

392 °ru˘ { 
π_pﬁl_s
 *
pdß1
; π_pﬁl_†*
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(rt_poll_s),Åimeout };

393  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
UR1
(1, 3Ë| 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
)).
i
[
LOW
];

396  
π_pﬁl
(
pdß
, 
ƒ
, 
«no2cou¡
(
timeout
));

403 #i‡
CONFIG_RTAI_MSG


405 
ölöe
 
RT_TASK
 *
RT_£nd
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
)

407 i‡(
node
) {

408 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

409  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDMSG
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
UINT
)));

411  
π_£nd
(
èsk
, 
msg
);

414 
ölöe
 
RT_TASK
 *
RT_£nd_if
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
)

416 i‡(
node
) {

417 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

418  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_IF
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES2
(
VADR
, 
UINT
)));

420  
π_£nd_if
(
èsk
, 
msg
);

423 
ölöe
 
RT_TASK
 *
RT_£nd_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, 
RTIME
 
time
)

425 i‡(
node
) {

426 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

427  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_UNTIL
, 3), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, 
RTIM
)));

429  
π_£nd_u¡û
(
èsk
, 
msg
, 
«no2cou¡
(
time
));

432 
ölöe
 
RT_TASK
 *
RT_£nd_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, 
RTIME
 
dñay
)

434 i‡(
node
) {

435 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

436  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SEND_TIMED
, 3), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, 
RTIM
)));

438  
π_£nd_timed
(
èsk
, 
msg
, 
«no2cou¡
(
dñay
));

441 
ölöe
 
RT_TASK
 *
RT_ª˚ive
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

443 i‡(!
èsk
 || !
node
) {

444  
π_ª˚ive
(
èsk
, 
msg
);

446  
π_ª˚ive
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

449 
ölöe
 
RT_TASK
 *
RT_ª˚ive_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

451 i‡(!
èsk
 || !
node
) {

452  
π_ª˚ive_if
(
èsk
, 
msg
);

454  
π_ª˚ive_if
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

457 
ölöe
 
RT_TASK
 *
RT_ª˚ive_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
RTIME
 
time
)

459 i‡(!
èsk
 || !
node
) {

460  
π_ª˚ive_u¡û
(
èsk
, 
msg
, 
«no2cou¡
(
time
));

462  
π_ª˚ive_u¡û
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
«no2cou¡
(
time
)) ?Åask : 0;

465 
ölöe
 
RT_TASK
 *
RT_ª˚ive_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
RTIME
 
dñay
)

467 i‡(!
èsk
 || !
node
) {

468  
π_ª˚ive_timed
(
èsk
, 
msg
, 
«no2cou¡
(
dñay
));

470  
π_ª˚ive_timed
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
«no2cou¡
(
dñay
)) ?Åask : 0;

473 
ölöe
 
RT_TASK
 *
RT_Ωc
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
)

475 i‡(
node
) {

476 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

477  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCMSG
, 0), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

479  
π_Ωc
(
èsk
, 
msg
, 
ªt
);

482 
ölöe
 
RT_TASK
 *
RT_Ωc_if
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
)

484 i‡(
node
) {

485 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg };

486  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_IF
, 0), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

488  
π_Ωc_if
(
èsk
, 
msg
, 
ªt
);

491 
ölöe
 
RT_TASK
 *
RT_Ωc_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
, 
RTIME
 
time
)

493 i‡(
node
) {

494 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Ñet,Åime };

495  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_UNTIL
, 4), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

497  
π_Ωc_u¡û
(
èsk
, 
msg
, 
ªt
, 
«no2cou¡
(
time
));

500 
ölöe
 
RT_TASK
 *
RT_Ωc_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, 
msg
, *
ªt
, 
RTIME
 
dñay
)

502 i‡(
node
) {

503 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg,Ñet, delay };

504  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPC_TIMED
, 4), 
UW1
(3, 0), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

506  
π_Ωc_timed
(
èsk
, 
msg
, 
ªt
, 
«no2cou¡
(
dñay
));

509 
ölöe
 
RT_i§pc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

511 i‡(
node
) {

512 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

513  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
ISRPC
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

515  
π_i§pc
(
èsk
);

518 
ölöe
 
RT_TASK
 *
RT_ªtu∫
(
node
, 
p‹t
, RT_TASK *
èsk
, 
ªsu…
)

520 i‡(!
èsk
 || !
node
) {

521  
π_ªtu∫
(
èsk
, 
ªsu…
);

523  
π_ªtu∫
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
ªsu…
) ?Åask : 0;

526 
ölöe
 
RT_TASK
 *
RT_evdΩ
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
)

528 i‡(!
èsk
 || !
node
) {

529  
π_evdΩ
(
èsk
, 
msg
);

531  
π_evdΩ
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

534 
ölöe
 
RT_TASK
 *
RT_Ωcx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

536 i‡(
node
) {

537 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

538  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX
, 0), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT)));

540  
π_Ωcx
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

543 
ölöe
 
RT_TASK
 *
RT_Ωcx_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

545 i‡(
node
) {

546 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

547  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_IF
, 0), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT)));

549  
π_Ωcx_if
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

552 
ölöe
 
RT_TASK
 *
RT_Ωcx_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
)

554 i‡(
node
) {

555 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

556  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_UNTIL
, 6), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
)));

558  
π_Ωcx_u¡û
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
«no2cou¡
(
time
));

561 
ölöe
 
RT_TASK
 *
RT_Ωcx_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
)

563 i‡(
node
) {

564 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
; *
rmsg
; 
ssize
; 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

565  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
RPCX_TIMED
, 6), 
UR1
(2, 4Ë| 
UW1
(3, 5), &
¨g
, 
SIZARG
, 1, 
PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
)));

567  
π_Ωcx_timed
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
«no2cou¡
(
dñay
));

570 
ölöe
 
RT_TASK
 *
RT_£ndx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

572 i‡(
node
) {

573 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

574  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

576  
π_£ndx
(
èsk
, 
msg
, 
size
);

579 
ölöe
 
RT_TASK
 *
RT_£ndx_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

581 i‡(
node
) {

582 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

583  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_IF
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
VADR
, 
UINT
, UINT)));

585  
π_£ndx_if
(
èsk
, 
msg
, 
size
);

588 
ölöe
 
RT_TASK
 *
RT_£ndx_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, 
RTIME
 
time
)

590 i‡(
node
) {

591 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

592  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_UNTIL
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

594  
π_£ndx_u¡û
(
èsk
, 
msg
, 
size
, 
«no2cou¡
(
time
));

597 
ölöe
 
RT_TASK
 *
RT_£ndx_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
)

599 i‡(
node
) {

600 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

601  (
RT_TASK
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
SENDX_TIMED
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
)));

603  
π_£ndx_timed
(
èsk
, 
msg
, 
size
, 
«no2cou¡
(
dñay
));

606 
ölöe
 
RT_TASK
 *
RT_ªtu∫x
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
)

608 i‡(!
èsk
 || !
node
) {

609  
π_ªtu∫x
(
èsk
, 
msg
, 
size
);

611  
π_ªtu∫x
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
) ?Åask : 0;

614 
ölöe
 
RT_TASK
 *
RT_evdΩx
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

616 i‡(!
èsk
 || !
node
) {

617  
π_evdΩx
(
èsk
, 
msg
, 
size
, 
Àn
);

619  
π_evdΩx
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

622 
ölöe
 
RT_TASK
 *
RT_ª˚ivex
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

624 i‡(!
èsk
 || !
node
) {

625  
π_ª˚ivex
(
èsk
, 
msg
, 
size
, 
Àn
);

627  
π_ª˚ivex
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

630 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_if
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
)

632 i‡(!
èsk
 || !
node
) {

633  
π_ª˚ivex_if
(
èsk
, 
msg
, 
size
, 
Àn
);

635  
π_ª˚ivex_if
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

638 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_u¡û
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
)

640 i‡(!
èsk
 || !
node
) {

641  
π_ª˚ivex_u¡û
(
èsk
, 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
time
));

643  
π_ª˚ivex_u¡û
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
time
)) ?Åask : 0;

646 
ölöe
 
RT_TASK
 *
RT_ª˚ivex_timed
(
node
, 
p‹t
, RT_TASK *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
)

648 i‡(!
èsk
 || !
node
) {

649  
π_ª˚ivex_timed
(
èsk
, 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
dñay
));

651  
π_ª˚ivex_timed
(
π_föd_asgn_°ub
(
OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
«no2cou¡
(
dñay
)) ?Åask : 0;

656 #i‡
CONFIG_RTAI_MBX


658 
ölöe
 
MBX
 *
RT_ty≥d_«med_mbx_öô
(
node
, 
p‹t
, c⁄° *
mbx_«me
, 
size
, 
qty≥
)

660 i‡(
node
) {

661 °ru˘ { 
mbx_«me
; 
size
; 
qy≥
; } 
¨g
 = { 
«m2num
(mbx_«me), size, 
qty≥
 };

662  (
MBX
 *)
RT_NET_RPC
(
p‹t
, 
π_√t_Ωc
(
PACKPORT
’‹t, 
NET_RPC_EXT
, 
NAMED_MBX_INIT
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES3
(
UINT
, UINT, UINT)));

664  
π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

667 
ölöe
 
RT_«med_mbx_dñëe
(
node
, 
p‹t
, 
MBX
 *
mbx
)

669 i‡(
node
) {

670 °ru˘ { 
MBX
 *
mbx
; } 
¨g
 = { mbx };

671  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 1, 
PARTYPES1
(
VADR
)).
i
[
LOW
];

673  
π_«med_mbx_dñëe
(
mbx
);

676 
ölöe
 
RT_mbx_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

678 i‡(
node
) {

679 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

680  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

682  
π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
);

685 
ölöe
 
RT_mbx_£nd_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

687 i‡(
node
) {

688 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

689  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_WP
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

691  
π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
);

694 
ölöe
 
RT_mbx_£nd_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

696 i‡(
node
) {

697 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

698  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_IF
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

700  
π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
);

703 
ölöe
 
RT_mbx_ovrwr_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

705 i‡(
node
) {

706 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

707  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_OVRWR_SEND
, 0), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

709  
π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
);

712 
ölöe
 
RT_mbx_£nd_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

714 i‡(
node
) {

715 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

716  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_UNTIL
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

718  
π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
time
));

721 
ölöe
 
RT_mbx_£nd_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

723 i‡(
node
) {

724 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

725  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_TIMED
, 4), 
UR1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

727  
π_mbx_£nd_timed
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
dñay
));

730 
ölöe
 
RT_mbx_evdΩ
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

732 i‡(
node
) {

733 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

734  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_EVDRP
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

736  
π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
);

739 
ölöe
 
RT_mbx_ª˚ive
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

741 i‡(
node
) {

742 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

743  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

745  
π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
);

748 
ölöe
 
RT_mbx_ª˚ive_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

750 i‡(
node
) {

751 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

752  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_WP
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

754  
π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
);

757 
ölöe
 
RT_mbx_ª˚ive_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

759 i‡(
node
) {

760 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

761  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_IF
, 0), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES4
(
VADR
, 
UINT
, UINT, UINT)).
i
[
LOW
];

763  
π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
);

766 
ölöe
 
RT_mbx_ª˚ive_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

768 i‡(
node
) {

769 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

770  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_UNTIL
, 4), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

772  
π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
time
));

775 
ölöe
 
RT_mbx_ª˚ive_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

777 i‡(
node
) {

778 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

779  
π_√t_Ωc
(
PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_TIMED
, 4), 
UW1
(2, 3), &
¨g
, 
SIZARG
, 1, 
PARTYPES5
(
VADR
, 
UINT
, UINT, 
RTIM
, UINT)).
i
[
LOW
];

781  
π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
«no2cou¡
(
dñay
));

786 #ifde‡
__˝lu•lus


792 
	~<°dlib.h
>

794 
	#NET_RPC_IDX
 0

	)

796 
	#SIZARGS
 (
¨gs
)

	)

798 
ölöe
 
	$π_£nd_ªq_ªl_p‹t
(
node
, 
p‹t
, 
id
, 
MBX
 *
mbx
, 
h¨d
)

800 °ru˘ { 
node
, 
p‹t
; 
id
; 
MBX
 *
mbx
; 
h¨d
; } 
¨gs
 = {Çode,Öort, id, mbx, hard };

801  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SEND_REQ_REL_PORT
, &
¨gs
).
i
[
LOW
];

802 
	}
}

804 
ölöe
 
	$π_£t_√åpc_timeout
(
p‹t
, 
RTIME
 
timeout
)

806 °ru˘ { 
p‹t
; 
RTIME
 
timeout
; } 
¨gs
 = {Öort,Åimeout };

807  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SET_NETRPC_TIMEOUT
, &
¨gs
).
i
[
LOW
];

808 
	}
}

810 
ölöe
 
	$ddn2∆
(c⁄° *
ddn
)

812 °ru˘ { c⁄° *
ddn
; } 
¨gs
 = { ddn };

813  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
DDN2NL
, &
¨gs
).
i
[
LOW
];

814 
	}
}

816 
ölöe
 
	$π_£t_this_node
(c⁄° *
ddn
, 
node
, 
h¨d
)

818 °ru˘ { c⁄° *
ddn
; 
node
; 
h¨d
; } 
¨gs
 = { ddn,Çode, hard };

819  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
SET_THIS_NODE
, &
¨gs
).
i
[
LOW
];

820 
	}
}

822 
ölöe
 
RT_TASK
 *
	$π_föd_asgn_°ub
(
ow√r
, 
asgn
)

824 °ru˘ { 
ow√r
; 
asgn
; } 
¨gs
 = { owner,ásgn };

825  (
RT_TASK
 *)
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
FIND_ASGN_STUB
, &
¨gs
).
v
[
LOW
];

826 
	}
}

828 
ölöe
 
	$π_ªl_°ub
(
ow√r
)

830 °ru˘ { 
ow√r
; } 
¨gs
 = { owner };

831  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
REL_STUB
, &
¨gs
).
i
[
LOW
];

832 
	}
}

834 
ölöe
 
	$π_waôög_ªtu∫
(
node
, 
p‹t
)

836 °ru˘ { 
node
; 
p‹t
; } 
¨gs
 = {Çode,Öort };

837  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
WAITING_RETURN
, &
¨gs
).
i
[
LOW
];

838 
	}
}

840 
ölöe
 
	$π_sync_√t_Ωc
(
node
, 
p‹t
)

842 i‡(
node
) {

843 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

844 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
	`abs
(
p‹t
), 
NET_RPC_EXT
, 
SYNC_NET_RPC
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

845  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

848 
	}
}

850 
ölöe
 *
	$RT_gë_adr
(
node
, 
p‹t
, c⁄° *
¢ame
)

852 i‡(
node
) {

853 °ru˘ { 
«me
; } 
¨g
 = { 
	`«m2num
(
¢ame
) };

854 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_ADR
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

856  
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

858  
	`π_gë_adr
(
	`«m2num
(
¢ame
));

859 
	}
}

861 
ölöe
 
RTIME
 
	$RT_gë_time_ns
(
node
, 
p‹t
)

863 i‡(
node
) {

864 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

865 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

866  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

868  
	`π_gë_time_ns
();

869 
	}
}

871 
ölöe
 
RTIME
 
	$RT_gë_time_ns_˝uid
(
node
, 
p‹t
, 
˝uid
)

873 i‡(
node
) {

874 °ru˘ { 
˝uid
; } 
¨g
 = { cpuid };

875 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_TIME_NS_CPUID
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

876  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

878  
	`π_gë_time_ns_˝uid
(
˝uid
);

879 
	}
}

881 
ölöe
 
RTIME
 
	$RT_gë_˝u_time_ns
(
node
, 
p‹t
)

883 i‡(
node
) {

884 °ru˘ { 
dummy
; } 
¨g
 = { 0 };

885 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
GET_CPU_TIME_NS
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
UINT
) };

886  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
π
;

888  
	`π_gë_˝u_time_ns
();

889 
	}
}

891 
ölöe
 
	$RT_èsk_su•íd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

893 i‡(
node
) {

894 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

895 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SUSPEND
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

896 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

899 
	`π_èsk_su•íd
(
èsk
);

900 
	}
}

902 
ölöe
 
	$RT_èsk_ªsume
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

904 i‡(
node
) {

905 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

906 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RESUME
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

907 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

910 
	`π_èsk_ªsume
(
èsk
);

911 
	}
}

913 
ölöe
 
	$RT_¶ìp
(
node
, 
p‹t
, 
RTIME
 
dñay
)

915 i‡(
node
) {

916 °ru˘ { 
RTIME
 
dñay
; } 
¨g
 = { delay };

917 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP
, 1), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
RTIM
) };

918 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

921 
	`π_¶ìp
(
	`«no2cou¡
(
dñay
));

922 
	}
}

924 
ölöe
 
	$RT_¶ìp_u¡û
(
node
, 
p‹t
, 
RTIME
 
time
)

926 i‡(
node
) {

927 °ru˘ { 
RTIME
 
time
; } 
¨g
 = {Åime };

928 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SLEEP_UNTIL
, 1), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
RTIM
) };

929 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
);

932 
	`π_¶ìp
(
	`«no2cou¡
(
time
));

933 
	}
}

935 #i‡
CONFIG_RTAI_SEM


937 
ölöe
 
SEM
 *
	$RT_ty≥d_«med_£m_öô
(
node
, 
p‹t
, c⁄° *
£m_«me
, 
vÆue
, 
ty≥
)

939 i‡(
node
) {

940 °ru˘ { 
£m_«me
; 
vÆue
; 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
	`«m2num
(£m_«me), vÆue,Åy≥, 
NULL
 };

941 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_INIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
SINT
, SINT) };

942  (
SEM
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

944  
	`π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
ty≥
);

945 
	}
}

947 
ölöe
 
	$RT_«med_£m_dñëe
(
node
, 
p‹t
, 
SEM
 *
£m
)

949 i‡(
node
) {

950 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

951 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_SEM_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

952  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

954  
	`π_«med_£m_dñëe
(
£m
);

955 
	}
}

957 
ölöe
 
	$RT_£m_sig«l
(
node
, 
p‹t
, 
SEM
 *
£m
)

959 i‡(
node
) {

960 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

961 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_SIGNAL
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

962  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

964  
	`π_£m_sig«l
(
£m
);

965 
	}
}

967 
ölöe
 
	$RT_£m_brﬂdˇ°
(
node
, 
p‹t
, 
SEM
 *
£m
)

969 i‡(
node
) {

970 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

971 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_BROADCAST
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

972  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

974  
	`π_£m_brﬂdˇ°
(
£m
);

975 
	}
}

977 
ölöe
 
	$RT_£m_waô
(
node
, 
p‹t
, 
SEM
 *
£m
)

979 i‡(
node
) {

980 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

981 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

982  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

984  
	`π_£m_waô
(
£m
);

985 
	}
}

987 
ölöe
 
	$RT_£m_waô_if
(
node
, 
p‹t
, 
SEM
 *
£m
)

989 i‡(
node
) {

990 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

991 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_IF
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

992  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

994  
	`π_£m_waô_if
(
£m
);

995 
	}
}

997 
ölöe
 
	$RT_£m_waô_u¡û
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
time
)

999 i‡(
node
) {

1000 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

1001 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_UNTIL
, 2), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
RTIM
) };

1002  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1004  
	`π_£m_waô_u¡û
(
£m
, 
	`«no2cou¡
(
time
));

1005 
	}
}

1007 
ölöe
 
	$RT_£m_waô_timed
(
node
, 
p‹t
, 
SEM
 *
£m
, 
RTIME
 
dñay
)

1009 i‡(
node
) {

1010 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

1011 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEM_WAIT_TIMED
, 2), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
RTIM
) };

1012  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1014  
	`π_£m_waô_timed
(
£m
, 
	`«no2cou¡
(
dñay
));

1015 
	}
}

1017 #ifde‡
CONFIG_RTAI_RT_POLL


1019 
ölöe
 
	$RT_pﬁl_4to8
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

1021 
i
;

1022 
ªtvÆ
;

1023 
	sπ_pﬁl_Œs
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

1024 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_Œs
),Åimeout };

1025 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
UINT
, UINT, UINT, 
RTIM
) };

1026 
i
 = 0; i < 
ƒ
; i++) {

1027 
pdß
[
i
].
wh©
 = ()
pdßö
[i].what;

1028 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

1030 
ªtvÆ
 = 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1031 
i
 = 0; i < 
ƒ
; i++) {

1032 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

1033 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

1035  
ªtvÆ
;

1036 
	}
}

1038 
ölöe
 
	$RT_pﬁl_8to4
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdßö
, 
ƒ
, 
RTIME
 
timeout
)

1040 
i
;

1041 
ªtvÆ
;

1042 
	sπ_pﬁl_is
 { 
wh©
, 
f‹wh©
; } 
pdß
[
ƒ
];

1043 °ru˘ { *
pdß1
; *
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(
π_pﬁl_is
),Åimeout };

1044 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1045 
i
 = 0; i < 
ƒ
; i++) {

1046 
pdß
[
i
].
wh©
 = ()()
pdßö
[i].what;

1047 
pdß
[
i
].
f‹wh©
 = 
pdßö
[i].forwhat;

1049 
ªtvÆ
 = 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1050 
i
 = 0; i < 
ƒ
; i++) {

1051 
pdßö
[
i
].
wh©
 = (*)()
pdß
[i].what;

1052 
pdßö
[
i
].
f‹wh©
 = 
pdß
[i].forwhat;

1054  
ªtvÆ
;

1055 
	}
}

1057 
ölöe
 
	$RT_pﬁl
(
node
, 
p‹t
, 
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

1059 i‡(
node
) {

1060 i‡((Ë=4 && (
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

1061  
	`RT_pﬁl_4to8
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

1062 } i‡((Ë=8 && !(
	`abs
(
p‹t
Ë& 
PORT_MSK
)) {

1063  
	`RT_pﬁl_8to4
(
node
, 
p‹t
, 
pdß
, 
ƒ
, 
timeout
);

1065 °ru˘ { 
π_pﬁl_s
 *
pdß1
; π_pﬁl_†*
pdß2
; 
pdß_size
; 
RTIME
 
timeout
; } 
¨g
 = { 
pdß
,Ödß, 
ƒ
*(rt_poll_s),Åimeout };

1066 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RT_POLL_NETRPC
, 4), 
	`UR1
(1, 3Ë| 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, VADR, 
UINT
, 
RTIM
) };

1067  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1070  
	`π_pﬁl
(
pdß
, 
ƒ
, 
	`«no2cou¡
(
timeout
));

1071 
	}
}

1077 #i‡
CONFIG_RTAI_MSG


1079 
ölöe
 
RT_TASK
 *
	$RT_£nd
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
)

1081 i‡(
node
) {

1082 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

1083 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDMSG
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
UINT
) };

1084  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1086  
	`π_£nd
(
èsk
, 
msg
);

1087 
	}
}

1089 
ölöe
 
RT_TASK
 *
	$RT_£nd_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
)

1091 i‡(
node
) {

1092 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; } 
¨g
 = {Åask, msg };

1093 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_IF
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES2
(
VADR
, 
UINT
) };

1094  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1096  
	`π_£nd_if
(
èsk
, 
msg
);

1097 
	}
}

1099 
ölöe
 
RT_TASK
 *
	$RT_£nd_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
time
)

1101 i‡(
node
) {

1102 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Åime };

1103 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_UNTIL
, 3), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, 
RTIM
) };

1104  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1106  
	`π_£nd_u¡û
(
èsk
, 
msg
, 
	`«no2cou¡
(
time
));

1107 
	}
}

1109 
ölöe
 
RT_TASK
 *
	$RT_£nd_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, 
RTIME
 
dñay
)

1111 i‡(
node
) {

1112 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, delay };

1113 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SEND_TIMED
, 3), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, 
RTIM
) };

1114  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1116  
	`π_£nd_timed
(
èsk
, 
msg
, 
	`«no2cou¡
(
dñay
));

1117 
	}
}

1119 
ölöe
 
RT_TASK
 *
	$RT_evdΩ
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1121 i‡(!
èsk
 || !
node
) {

1122  
	`π_evdΩ
(
èsk
, 
msg
);

1124  
	`π_evdΩ
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1125 
	}
}

1127 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1129 i‡(!
èsk
 || !
node
) {

1130  
	`π_ª˚ive
(
èsk
, 
msg
);

1132  
	`π_ª˚ive
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1133 
	}
}

1135 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
)

1137 i‡(!
èsk
 || !
node
) {

1138  
	`π_ª˚ive_if
(
èsk
, 
msg
);

1140  
	`π_ª˚ive_if
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
) ?Åask : 0;

1141 
	}
}

1143 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
time
)

1145 i‡(!
èsk
 || !
node
) {

1146  
	`π_ª˚ive_u¡û
(
èsk
, 
msg
, 
	`«no2cou¡
(
time
));

1148  
	`π_ª˚ive_u¡û
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
	`«no2cou¡
(
time
)) ?Åask : 0;

1149 
	}
}

1151 
ölöe
 
RT_TASK
 *
	$RT_ª˚ive_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
RTIME
 
dñay
)

1153 i‡(!
èsk
 || !
node
) {

1154  
	`π_ª˚ive_timed
(
èsk
, 
msg
, 
	`«no2cou¡
(
dñay
));

1156  
	`π_ª˚ive_timed
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
	`«no2cou¡
(
dñay
)) ?Åask : 0;

1157 
	}
}

1159 
ölöe
 
RT_TASK
 *
	$RT_Ωc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
)

1161 i‡(
node
) {

1162 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

1163 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCMSG
, 0), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1164  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1166  
	`π_Ωc
(
èsk
, 
msg
, 
ªt
);

1167 
	}
}

1169 
ölöe
 
RT_TASK
 *
	$RT_Ωc_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
)

1171 i‡(
node
) {

1172 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; } 
¨g
 = {Åask, msg,Ñet };

1173 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_IF
, 0), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1174  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1176  
	`π_Ωc_if
(
èsk
, 
msg
, 
ªt
);

1177 
	}
}

1179 
ölöe
 
RT_TASK
 *
	$RT_Ωc_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
, 
RTIME
 
time
)

1181 i‡(
node
) {

1182 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg,Ñet,Åime };

1183 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_UNTIL
, 4), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1184  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1186  
	`π_Ωc_u¡û
(
èsk
, 
msg
, 
ªt
, 
	`«no2cou¡
(
time
));

1187 
	}
}

1189 
ölöe
 
RT_TASK
 *
	$RT_Ωc_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
msg
, *
ªt
, 
RTIME
 
dñay
)

1191 i‡(
node
) {

1192 °ru˘ { 
RT_TASK
 *
èsk
; 
msg
; *
ªt
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg,Ñet, delay };

1193 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPC_TIMED
, 4), 
	`UW1
(3, 0), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1194  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1196  
	`π_Ωc_timed
(
èsk
, 
msg
, 
ªt
, 
	`«no2cou¡
(
dñay
));

1197 
	}
}

1199 
ölöe
 
	$RT_i§pc
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
)

1201 i‡(
node
) {

1202 °ru˘ { 
RT_TASK
 *
èsk
; } 
¨g
 = {Åask };

1203 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
ISRPC
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

1204  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1206  
	`π_i§pc
(
èsk
);

1207 
	}
}

1209 
ölöe
 
RT_TASK
 *
	$RT_ªtu∫
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, 
ªsu…
)

1212 i‡(!
èsk
 || !
node
) {

1213  
	`π_ªtu∫
(
èsk
, 
ªsu…
);

1215  
	`π_ªtu∫
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
ªsu…
) ?Åask : 0;

1216 
	}
}

1218 
ölöe
 
RT_TASK
 *
	$RT_Ωcx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1220 i‡(
node
) {

1221 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

1222 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX
, 0), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT) };

1223  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1225  
	`π_Ωcx
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

1226 
	}
}

1228 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
)

1230 i‡(
node
) {

1231 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize };

1232 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_IF
, 0), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, UINT, UINT, UINT) };

1233  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1235  
	`π_Ωcx_if
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
);

1236 
	}
}

1238 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
time
)

1240 i‡(
node
) {

1241 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; 
RTIME
 
time
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize,Åime };

1242 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_UNTIL
, 6), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
) };

1243  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1245  
	`π_Ωcx_u¡û
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
	`«no2cou¡
(
time
));

1246 
	}
}

1248 
ölöe
 
RT_TASK
 *
	$RT_Ωcx_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
smsg
, *
rmsg
, 
ssize
, 
rsize
, 
RTIME
 
dñay
)

1250 i‡(
node
) {

1251 °ru˘ { 
RT_TASK
 *
èsk
; *
smsg
, *
rmsg
; 
ssize
, 
rsize
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, smsg,Ñmsg, ssize,Ñsize, delay };

1252 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
RPCX_TIMED
, 6), 
	`UR1
(2, 4Ë| 
	`UW1
(3, 5), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES6
(
VADR
, 
UINT
, UINT, UINT, UINT, 
RTIM
) };

1253  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1255  
	`π_Ωcx_timed
(
èsk
, 
smsg
, 
rmsg
, 
ssize
, 
rsize
, 
	`«no2cou¡
(
dñay
));

1256 
	}
}

1258 
ölöe
 
RT_TASK
 *
	$RT_£ndx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1260 i‡(
node
) {

1261 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

1262 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1263  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1265  
	`π_£ndx
(
èsk
, 
msg
, 
size
);

1266 
	}
}

1268 
ölöe
 
RT_TASK
 *
	$RT_£ndx_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1270 i‡(
node
) {

1271 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; } 
¨g
 = {Åask, msg, size };

1272 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_IF
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
VADR
, 
UINT
, UINT) };

1274  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1276  
	`π_£ndx_if
(
èsk
, 
msg
, 
size
);

1277 
	}
}

1279 
ölöe
 
RT_TASK
 *
	$RT_£ndx_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
time
)

1281 i‡(
node
) {

1282 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
time
; } 
¨g
 = {Åask, msg, size,Åime };

1283 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_UNTIL
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1284  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1286  
	`π_£ndx_u¡û
(
èsk
, 
msg
, 
size
, 
	`«no2cou¡
(
time
));

1287 
	}
}

1289 
ölöe
 
RT_TASK
 *
	$RT_£ndx_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, 
RTIME
 
dñay
)

1291 i‡(
node
) {

1292 °ru˘ { 
RT_TASK
 *
èsk
; *
msg
; 
size
; 
RTIME
 
dñay
; } 
¨g
 = {Åask, msg, size, delay };

1293 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
SENDX_TIMED
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, UINT, 
RTIM
) };

1294  (
RT_TASK
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1296  
	`π_£ndx_timed
(
èsk
, 
msg
, 
size
, 
	`«no2cou¡
(
dñay
));

1297 
	}
}

1299 
ölöe
 
RT_TASK
 *
	$RT_ªtu∫x
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
)

1302 i‡(!
èsk
 || !
node
) {

1303  
	`π_ªtu∫x
(
èsk
, 
msg
, 
size
);

1305  
	`π_ªtu∫x
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
) ?Åask : 0;

1306 
	}
}

1308 
ölöe
 
RT_TASK
 *
	$RT_evdΩx
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1310 i‡(!
èsk
 || !
node
) {

1311  
	`π_evdΩx
(
èsk
, 
msg
, 
size
, 
Àn
);

1313  
	`π_evdΩx
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1314 
	}
}

1316 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1318 i‡(!
èsk
 || !
node
) {

1319  
	`π_ª˚ivex
(
èsk
, 
msg
, 
size
, 
Àn
);

1321  
	`π_ª˚ivex
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1322 
	}
}

1324 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_if
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
)

1326 i‡(!
èsk
 || !
node
) {

1327  
	`π_ª˚ivex_if
(
èsk
, 
msg
, 
size
, 
Àn
);

1329  
	`π_ª˚ivex_if
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
) ?Åask : 0;

1330 
	}
}

1332 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_u¡û
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
time
)

1334 i‡(!
èsk
 || !
node
) {

1335  
	`π_ª˚ivex_u¡û
(
èsk
, 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
time
));

1337  
	`π_ª˚ivex_u¡û
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
time
)) ?Åask : 0;

1338 
	}
}

1340 
ölöe
 
RT_TASK
 *
	$RT_ª˚ivex_timed
(
node
, 
p‹t
, 
RT_TASK
 *
èsk
, *
msg
, 
size
, *
Àn
, 
RTIME
 
dñay
)

1342 i‡(!
èsk
 || !
node
) {

1343  
	`π_ª˚ivex_timed
(
èsk
, 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
dñay
));

1345  
	`π_ª˚ivex_timed
(
	`π_föd_asgn_°ub
(
	`OWNER
(
node
, 
èsk
), 1), 
msg
, 
size
, 
Àn
, 
	`«no2cou¡
(
dñay
)) ?Åask : 0;

1346 
	}
}

1350 #i‡
CONFIG_RTAI_MBX


1352 
ölöe
 
MBX
 *
	$RT_ty≥d_«med_mbx_öô
(
node
, 
p‹t
, c⁄° *
mbx_«me
, 
size
, 
qty≥
)

1354 i‡(
node
) {

1355 °ru˘ { 
mbx_«me
; 
size
; 
qy≥
; } 
¨g
 = { 
	`«m2num
(mbx_«me), size, 
qty≥
 };

1356 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_INIT
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES3
(
UINT
, UINT, UINT) };

1357  (
MBX
 *)
	`RTAI_LXRT
(
p‹t
, 
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
));

1359  (
MBX
 *)
	`π_ty≥d_«med_mbx_öô
(
mbx_«me
, 
size
, 
qty≥
);

1360 
	}
}

1362 
ölöe
 
	$RT_«med_mbx_dñëe
(
node
, 
p‹t
, 
MBX
 *
mbx
)

1364 i‡(
node
) {

1365 °ru˘ { 
MBX
 *
mbx
; } 
¨g
 = { mbx };

1366 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
NAMED_MBX_DELETE
, 0), 0, &
¨g
, 
SIZARG
, 0, 
	`PARTYPES1
(
VADR
) };

1367  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1369  
	`π_«med_mbx_dñëe
(
mbx
);

1370 
	}
}

1372 
ölöe
 
	$RT_mbx_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1374 i‡(
node
) {

1375 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1376 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1377  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1379  
	`π_mbx_£nd
(
mbx
, 
msg
, 
msg_size
);

1380 
	}
}

1382 
ölöe
 
	$RT_mbx_£nd_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1384 i‡(
node
) {

1385 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1386 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_WP
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1387  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1389  
	`π_mbx_£nd_wp
(
mbx
, 
msg
, 
msg_size
);

1390 
	}
}

1392 
ölöe
 
	$RT_mbx_£nd_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1394 i‡(
node
) {

1395 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1396 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_IF
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1397  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1399  
	`π_mbx_£nd_if
(
mbx
, 
msg
, 
msg_size
);

1400 
	}
}

1402 
ölöe
 
	$RT_mbx_ovrwr_£nd
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1404 i‡(
node
) {

1405 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1406 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_OVRWR_SEND
, 0), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1407  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1409  
	`π_mbx_ovrwr_£nd
(
mbx
, 
msg
, 
msg_size
);

1410 
	}
}

1412 
ölöe
 
	$RT_mbx_£nd_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

1414 i‡(
node
) {

1415 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

1416 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_UNTIL
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1417  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1419  
	`π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
time
));

1420 
	}
}

1422 
ölöe
 
	$RT_mbx_£nd_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

1424 i‡(
node
) {

1425 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

1426 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_SEND_TIMED
, 4), 
	`UR1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1427  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1429  
	`π_mbx_£nd_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
dñay
));

1430 
	}
}

1432 
ölöe
 
	$RT_mbx_evdΩ
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1434 i‡(
node
) {

1435 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1436 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_EVDRP
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1437  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1439  
	`π_mbx_evdΩ
(
mbx
, 
msg
, 
msg_size
);

1440 
	}
}

1442 
ölöe
 
	$RT_mbx_ª˚ive
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1444 i‡(
node
) {

1445 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1446 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1447  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1449  
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
msg_size
);

1450 
	}
}

1452 
ölöe
 
	$RT_mbx_ª˚ive_wp
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1454 i‡(
node
) {

1455 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1456 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_WP
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1457  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1459  
	`π_mbx_ª˚ive_wp
(
mbx
, 
msg
, 
msg_size
);

1460 
	}
}

1462 
ölöe
 
	$RT_mbx_ª˚ive_if
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
)

1464 i‡(
node
) {

1465 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, 1 };

1466 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_IF
, 0), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES4
(
VADR
, 
UINT
, 
SINT
, SINT) };

1467  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1469  
	`π_mbx_ª˚ive_if
(
mbx
, 
msg
, 
msg_size
);

1470 
	}
}

1472 
ölöe
 
	$RT_mbx_ª˚ive_u¡û
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
time
)

1474 i‡(
node
) {

1475 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
time
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size,Åime, 1 };

1476 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_UNTIL
, 4), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1477  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1479  
	`π_mbx_ª˚ive_u¡û
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
time
));

1480 
	}
}

1482 
ölöe
 
	$RT_mbx_ª˚ive_timed
(
node
, 
p‹t
, 
MBX
 *
mbx
, *
msg
, 
msg_size
, 
RTIME
 
dñay
)

1484 i‡(
node
) {

1485 °ru˘ { 
MBX
 *
mbx
; *
msg
; 
msg_size
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { mbx, msg, msg_size, delay, 1 };

1486 °ru˘ { 
fun
; 
ty≥
; *
¨gs
; 
¨gsize
; 
•a˚
; 
∑πy≥s
; }árg†{ 
	`PACKPORT
(
p‹t
, 
NET_RPC_EXT
, 
MBX_RECEIVE_TIMED
, 4), 
	`UW1
(2, 3), &
¨g
, 
SIZARG
, 0, 
	`PARTYPES5
(
VADR
, 
UINT
, 
SINT
, 
RTIM
, SINT) };

1487  
	`πai_lxπ
(
NET_RPC_IDX
, 
SIZARGS
, 
NETRPC
, &
¨gs
).
i
[
LOW
];

1489  
	`π_mbx_ª˚ive_timed
(
mbx
, 
msg
, 
msg_size
, 
	`«no2cou¡
(
dñay
));

1490 
	}
}

1492 
	~<°ddef.h
>

1494 
ölöe
 
	$π_gë_√t_Ωc_ªt
(
MBX
 *
mbx
, *
ªtvÆ
, *
msg1
, *
msgÀn1
, *
msg2
, *
msgÀn2
, 
RTIME
 
timeout
, 
ty≥
)

1496 
	sª∂y_t
 { 
wsize
, 
w2size
, 
myp‹t
; 
ªtvÆ
; 
msg
[1], 
msg1
[1]; };

1497 
ª∂y_t
 
ª∂y
;

1498 
ªt
;

1500 
ty≥
) {

1501 
MBX_RECEIVE
:

1502 
ªt
 = 
	`π_mbx_ª˚ive
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1504 
MBX_RECEIVE_WP
:

1505 
ªt
 = 
	`π_mbx_ª˚ive_wp
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1507 
MBX_RECEIVE_IF
:

1508 
ªt
 = 
	`π_mbx_ª˚ive_if
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
));

1510 
MBX_RECEIVE_UNTIL
:

1511 
ªt
 = 
	`π_mbx_ª˚ive_u¡û
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
), 
timeout
);

1513 
MBX_RECEIVE_TIMED
:

1514 
ªt
 = 
	`π_mbx_ª˚ive_timed
(
mbx
, &
ª∂y
, 
	`off£tof
(
ª∂y_t
, 
msg
), 
timeout
);

1516 
ªt
 = -1;

1518 i‡(!
ªt
) {

1519 *
ªtvÆ
 = ()
ª∂y
.retval;

1520 i‡(
ª∂y
.
wsize
) {

1521 
msg
[
ª∂y
.
wsize
];

1522 
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
ª∂y
.
wsize
);

1523 i‡(*
msgÀn1
 > 
ª∂y
.
wsize
) {

1524 *
msgÀn1
 = 
ª∂y
.
wsize
;

1526 
	`mem˝y
(
msg1
, 
msg
, *
msgÀn1
);

1528 *
msgÀn1
 = 0;

1530 i‡(
ª∂y
.
w2size
) {

1531 
msg
[
ª∂y
.
w2size
];

1532 
	`π_mbx_ª˚ive
(
mbx
, 
msg
, 
ª∂y
.
w2size
);

1533 i‡(*
msgÀn2
 > 
ª∂y
.
w2size
) {

1534 *
msgÀn2
 = 
ª∂y
.
w2size
;

1536 
	`mem˝y
(
msg2
, 
msg
, *
msgÀn2
);

1538 *
msgÀn2
 = 0;

1542  
ªt
;

1543 
	}
}

1554 
	#RT_i§pcx
(
èsk
Ë
	`RT_i§pc
—ask)

	)

1556 
	#RT_waôög_ªtu∫
 
π_waôög_ªtu∫


	)

1558 
	#RT_sync_√t_Ωc
 
π_sync_√t_Ωc


	)

1560 
	#RT_ªque°_p‹t
 
π_ªque°_p‹t


	)

1562 
	#RT_ªque°_p‹t_id
 
π_ªque°_p‹t_id


	)

1564 
	#RT_ªque°_p‹t_mbx
 
π_ªque°_p‹t_mbx


	)

1566 
	#RT_ªque°_p‹t_id_mbx
 
π_ªque°_p‹t_id_mbx


	)

1568 
	#RT_ªque°_so·_p‹t
 
π_ªque°_so·_p‹t


	)

1570 
	#RT_ªque°_so·_p‹t_id
 
π_ªque°_so·_p‹t_id


	)

1572 
	#RT_ªque°_so·_p‹t_mbx
 
π_ªque°_so·_p‹t_mbx


	)

1574 
	#RT_ªque°_so·_p‹t_id_mbx
 
π_ªque°_so·_p‹t_id_mbx


	)

1576 
	#RT_ªque°_h¨d_p‹t
 
π_ªque°_h¨d_p‹t


	)

1578 
	#RT_ªque°_h¨d_p‹t_id
 
π_ªque°_h¨d_p‹t_id


	)

1580 
	#RT_ªque°_h¨d_p‹t_mbx
 
π_ªque°_h¨d_p‹t_mbx


	)

1582 
	#RT_ªque°_h¨d_p‹t_id_mbx
 
π_ªque°_h¨d_p‹t_id_mbx


	)

1584 
	#RT_ªÀa£_p‹t
 
π_ªÀa£_p‹t


	)

1586 
	#π_ªque°_p‹t
 
π_ªque°_so·_p‹t


	)

1588 
	#π_ªque°_p‹t_id
 
π_ªque°_so·_p‹t_id


	)

1590 
	#π_ªque°_p‹t_mbx
 
π_ªque°_so·_p‹t_mbx


	)

1592 
	#π_ªque°_p‹t_id_mbx
 
π_ªque°_so·_p‹t_id_mbx


	)

1598 
	#π_ªque°_so·_p‹t
(
node
) \

1599 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 0, 0)

	)

1601 
	#π_ªque°_so·_p‹t_id
(
node
, 
id
) \

1602 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 0, 0)

	)

1604 
	#π_ªque°_so·_p‹t_mbx
(
node
, 
mbx
) \

1605 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 
mbx
, 0)

	)

1607 
	#π_ªque°_so·_p‹t_id_mbx
(
node
, 
id
, 
mbx
) \

1608 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 
mbx
, 0)

	)

1610 
	#π_ªque°_h¨d_p‹t
(
node
) \

1611 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 0, 1)

	)

1613 
	#π_ªque°_h¨d_p‹t_id
(
node
, 
id
) \

1614 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 0, 1)

	)

1616 
	#π_ªque°_h¨d_p‹t_mbx
(
node
, 
mbx
) \

1617 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 0, 
mbx
, 1)

	)

1619 
	#π_ªque°_h¨d_p‹t_id_mbx
(
node
, 
id
, 
mbx
) \

1620 
	`π_£nd_ªq_ªl_p‹t
(
node
, 0, 
id
, 
mbx
, 1)

	)

1622 
	#π_ªÀa£_p‹t
(
node
, 
p‹t
) \

1623 
	`π_£nd_ªq_ªl_p‹t
(
node
, 
p‹t
, 0, 0, 0)

	)

	@/usr/realtime/include/rtai_posix.h

20 #i‚de‡
_RTAI_POSIX_H_


21 
	#_RTAI_POSIX_H_


	)

23 
	#£m_›í_π
 
£m_›í


	)

24 
	#£m_˛o£_π
 
£m_˛o£


	)

25 
	#£m_öô_π
 
£m_öô


	)

26 
	#£m_de°roy_π
 
£m_de°roy


	)

27 
	#£m_waô_π
 
£m_waô


	)

28 
	#£m_åywaô_π
 
£m_åywaô


	)

29 
	#£m_timedwaô_π
 
£m_timedwaô


	)

30 
	#£m_po°_π
 
£m_po°


	)

31 
	#£m_gëvÆue_π
 
£m_gëvÆue


	)

33 
	#±hªad_muãx_›í_π
 
±hªad_muãx_›í


	)

34 
	#±hªad_muãx_˛o£_π
 
±hªad_muãx_˛o£


	)

35 
	#±hªad_muãx_öô_π
 
±hªad_muãx_öô


	)

36 
	#±hªad_muãx_de°roy_π
 
±hªad_muãx_de°roy


	)

37 
	#±hªad_muãx_lock_π
 
±hªad_muãx_lock


	)

38 
	#±hªad_muãx_timedlock_π
 
±hªad_muãx_timedlock


	)

39 
	#±hªad_muãx_åylock_π
 
±hªad_muãx_åylock


	)

40 
	#±hªad_muãx_u∆ock_π
 
±hªad_muãx_u∆ock


	)

42 
	#±hªad_c⁄d_›í_π
 
±hªad_c⁄d_›í


	)

43 
	#±hªad_c⁄d_˛o£_π
 
±hªad_c⁄d_˛o£


	)

44 
	#±hªad_c⁄d_öô_π
 
±hªad_c⁄d_öô


	)

45 
	#±hªad_c⁄d_de°roy_π
 
±hªad_c⁄d_de°roy


	)

46 
	#±hªad_c⁄d_sig«l_π
 
±hªad_c⁄d_sig«l


	)

47 
	#±hªad_c⁄d_brﬂdˇ°_π
 
±hªad_c⁄d_brﬂdˇ°


	)

48 
	#±hªad_c⁄d_waô_π
 
±hªad_c⁄d_waô


	)

49 
	#±hªad_c⁄d_timedwaô_π
 
±hªad_c⁄d_timedwaô


	)

51 
	#±hªad_b¨rõr_›í_π
 
±hªad_b¨rõr_›í


	)

52 
	#±hªad_b¨rõr_˛o£_π
 
±hªad_b¨rõr_˛o£


	)

53 
	#±hªad_b¨rõr_öô_π
 
±hªad_b¨rõr_öô


	)

54 
	#±hªad_b¨rõr_de°roy_π
 
±hªad_b¨rõr_de°roy


	)

55 
	#±hªad_b¨rõr_waô_π
 
±hªad_b¨rõr_waô


	)

57 
	#±hªad_rwlock_›í_π
 
±hªad_rwlock_›í


	)

58 
	#±hªad_rwlock_˛o£_π
 
±hªad_rwlock_˛o£


	)

59 
	#±hªad_rwlock_öô_π
 
±hªad_rwlock_öô


	)

60 
	#±hªad_rwlock_de°roy_π
 
±hªad_rwlock_de°roy


	)

61 
	#±hªad_rwlock_rdlock_π
 
±hªad_rwlock_rdlock


	)

62 
	#±hªad_rwlock_åyrdlock_π
 
±hªad_rwlock_åyrdlock


	)

63 
	#±hªad_rwlock_timedrdlock_π
 
±hªad_rwlock_timedrdlock


	)

64 
	#±hªad_rwlock_wæock_π
 
±hªad_rwlock_wæock


	)

65 
	#±hªad_rwlock_åywæock_π
 
±hªad_rwlock_åywæock


	)

66 
	#±hªad_rwlock_timedwæock_π
 
±hªad_rwlock_timedwæock


	)

67 
	#±hªad_rwlock_u∆ock_π
 
±hªad_rwlock_u∆ock


	)

69 
	#±hªad_•ö_öô_π
 
±hªad_•ö_öô


	)

70 
	#±hªad_•ö_de°roy_π
 
±hªad_•ö_de°roy


	)

71 
	#±hªad_•ö_lock_π
 
±hªad_•ö_lock


	)

72 
	#±hªad_•ö_åylock_π
 
±hªad_•ö_åylock


	)

73 
	#±hªad_•ö_u∆ock_π
 
±hªad_•ö_u∆ock


	)

75 
	#sched_gë_max_¥i‹ôy_π
 
sched_gë_max_¥i‹ôy


	)

76 
	#sched_gë_mö_¥i‹ôy_π
 
sched_gë_mö_¥i‹ôy


	)

78 
	#±hªad_¸óã_π
 
±hªad_¸óã


	)

79 
	#±hªad_yõld_π
 
±hªad_yõld


	)

80 
	#±hªad_exô_π
 
±hªad_exô


	)

81 
	#±hªad_joö_π
 
±hªad_joö


	)

82 
	#±hªad_ˇn˚l_π
 
±hªad_ˇn˚l


	)

83 
	#±hªad_equÆ_π
 
±hªad_equÆ


	)

84 
	#±hªad_£lf_π
 
±hªad_£lf


	)

85 
	#±hªad_©å_öô_π
 
±hªad_©å_öô


	)

86 
	#±hªad_©å_de°roy_π
 
±hªad_©å_de°roy


	)

87 
	#±hªad_©å_£tsched∑øm_π
 
±hªad_©å_£tsched∑øm


	)

88 
	#±hªad_©å_gësched∑øm_π
 
±hªad_©å_gësched∑øm


	)

89 
	#±hªad_©å_£tschedpﬁicy_π
 
±hªad_©å_£tschedpﬁicy


	)

90 
	#±hªad_©å_gëschedpﬁicy_π
 
±hªad_©å_gëschedpﬁicy


	)

91 
	#±hªad_©å_£tschedº_π
 
±hªad_©å_£tschedº


	)

92 
	#±hªad_©å_gëschedº_π
 
±hªad_©å_gëschedº


	)

93 
	#±hªad_©å_£t°acksize_π
 
±hªad_©å_£t°acksize


	)

94 
	#±hªad_©å_gë°acksize_π
 
±hªad_©å_gë°acksize


	)

95 
	#±hªad_©å_£t°ack_π
 
±hªad_©å_£t°ack


	)

96 
	#±hªad_©å_gë°ack_π
 
±hªad_©å_gë°ack


	)

97 
	#±hªad_ã°ˇn˚l_π
 
±hªad_ã°ˇn˚l


	)

99 
	#˛ock_gëtime_π
 
˛ock_gëtime


	)

100 
	#«no¶ìp_π
 
«no¶ìp


	)

102 
	#±hªad_˛ónup_push_π
 
±hªad_˛ónup_push


	)

103 
	#±hªad_˛ónup_p›_π
 
±hªad_˛ónup_p›


	)

109 
	#±hªad_©å_£tdëach°©e_π
(
©å
, 
dëach°©e
)

	)

110 
	#±hªad_dëach_π
(
thªad
)

	)

111 
	#±hªad_£tc⁄cuºícy_π
(
Àvñ
)

	)

113 #ifde‡
__KERNEL__


119 
	#±hªad_£tˇn˚…y≥_π
(
ty≥
, 
ﬁdty≥
)

	)

120 
	#±hªad_£tˇn˚l°©e_π
(
°©e
, 
ﬁd°©e
)

	)

121 
	#±hªad_©å_gë°ackaddr_π
(
©å
, 
°ackaddr
)

	)

122 
	#±hªad_©å_£t°ackaddr_π
(
©å
, 
°ackaddr
)

	)

123 
	#±hªad_©å_£tgu¨dsize_π
(
©å
, 
gu¨dsize
)

	)

124 
	#±hªad_©å_gëgu¨dsize_π
(
©å
, 
gu¨dsize
)

	)

125 
	#±hªad_©å_£tsc›e_π
(
©å
, 
sc›e
)

	)

126 
	#±hªad_©å_gësc›e_π
(
©å
, 
sc›e
)

	)

127 
	#±hªad_©å_gëdëach°©e_π
(
©å
, 
dëach°©e
)

	)

128 
	#±hªad_©å_gëdëach°©e
(
©å
, 
dëach°©e
)

	)

129 
	#±hªad_©å_£töhîôsched_π
(
©å
, 
öhîô
)

	)

130 
	#±hªad_©å_gëöhîôsched_π
(
©å
, 
öhîô
)

	)

131 
	#±hªad_©å_£töhîôsched
(
©å
, 
öhîô
)

	)

132 
	#±hªad_©å_gëöhîôsched
(
©å
, 
öhîô
)

	)

134 
	~<löux/f˙é.h
>

135 
	~<löux/dñay.h
>

137 
	~<πai_mÆloc.h
>

138 
	~<πai_rwl.h
>

139 
	~<πai_•l.h
>

140 
	~<πai_£m.h
>

141 
	~<πai_sched.h
>

142 
	~<πai_schedc‹e.h
>

145 
	#SET_ADR
(
s
Ë(((**)s)[0])

	)

147 
	#RTAI_PNAME_MAXSZ
 6

	)

148 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

151 #i‚de‡
MAX_PRIO


152 
	#MAX_PRIO
 99

	)

154 #i‚de‡
MIN_PRIO


155 
	#MIN_PRIO
 1

	)

158 #i‚de‡
CLOCK_REALTIME


159 
	#CLOCK_REALTIME
 0

	)

162 #i‚de‡
CLOCK_MONOTONIC


163 
	#CLOCK_MONOTONIC
 1

	)

166 
	#STACK_SIZE
 8192

	)

167 
	#RR_QUANTUM_NS
 1000000

	)

169 °ru˘ { 
SEM
 
	m£m
; } 
	t£m_t
;

171 °ru˘ { 
SEM
 
	mmuãx
; } 
	t±hªad_muãx_t
;

173 
	t±hªad_muãx©å_t
;

175 °ru˘ { 
SEM
 
	mc⁄d
; } 
	t±hªad_c⁄d_t
;

177 
	t±hªad_c⁄d©å_t
;

179 °ru˘ { 
SEM
 
	mb¨rõr
; } 
	t±hªad_b¨rõr_t
;

181 
	t±hªad_b¨rõøâr_t
;

183 °ru˘ { 
RWL
 
	mrwlock
; } 
	t±hªad_rwlock_t
;

185 
	t±hªad_rwlock©å_t
;

187 
	t±hªad_•ölock_t
;

189 
π_èsk_°ru˘
 *
	t±hªad_t
;

191 
	s±hªad_©å
 {

192 
	m°acksize
;

193 
	mpﬁicy
;

194 
	mº_qu™tum_ns
;

195 
	m¥i‹ôy
;

196 } 
	t±hªad_©å_t
;

198 
	s±hªad_cookõ
 {

199 
RT_TASK
 
	mèsk
;

200 
SEM
 
	m£m
;

201 (*
	mèsk_fun
)();

202 
	m¨g
;

203 *
	mcookõ
;

204 } 
	t±hªad_cookõ_t
;

206 #ifde‡
__˝lu•lus


214 
ölöe
 
£m_t
 *
£m_›í
(c⁄° *
«meö
, 
oÊags
, 
vÆue
, 
ty≥
)

216 
«mëmp
[
RTAI_PNAME_MAXSZ
 + 1];

217 
i
;

218 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

219  (
£m_t
 *)-
ENAMETOOLONG
;

222 
i
 = 0; i < 
°æí
(
«meö
); i++) {

223 i‡((
«mëmp
[
i
] = 
«meö
 [i]) >= 'a' &&Çametmp[i] <= 'z')Çametmp[i] += 'A' - 'a';

225 
«mëmp
[
i
]='\0';

226 i‡(!
oÊags
 || 
vÆue
 <
SEM_TIMOUT
) {

227 
SEM
 *
t£m
;

228 
h™dÀ
 = 0UL;

229 i‡((
t£m
 = 
_π_ty≥d_«med_£m_öô
(
«m2num
(
«mëmp
), 
vÆue
, 
ty≥
, &
h™dÀ
))) {

230 i‡((
h™dÀ
Ë&& (
oÊags
 =(
O_CREAT
 | 
O_EXCL
))) {

231  (
£m_t
 *)-
EEXIST
;

233  (
£m_t
 *)
t£m
;

235  (
£m_t
 *)-
ENOSPC
;

237  (
£m_t
 *)-
EINVAL
;

240 
ölöe
 
£m_˛o£
(
£m_t
 *
£m
)

242 i‡(
π_£m_waô_if
(&
£m
->sem)< 0) {

243  -
EBUSY
;

245 
π_«med_£m_dñëe
(&
£m
->sem);

247 
π_‰ì
(
£m
);

252 
ölöe
 
£m_u∆ök
(c⁄° *
«meö
)

254 
«mëmp
[
RTAI_PNAME_MAXSZ
 + 1];

255 
i
;

256 
SEM
 *
£m
;

257 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

258  -
ENAMETOOLONG
;

261 
i
 = 0; i < 
°æí
(
«meö
); i++) {

262 i‡((
«mëmp
[
i
] = 
«meö
 [i]) >= 'a' &&Çametmp[i] <= 'z')Çametmp[i] += 'A' - 'a';

264 
«mëmp
[
i
]='\0';

265 
£m
 = 
π_gë_adr_˙t
(
«m2num
(
«mëmp
));

266 i‡(
£m
) {

267 i‡(
π_£m_waô_if
(
£m
) >= 0) {

268 
π_£m_sig«l
(
£m
);

269 
π_«med_£m_dñëe
(
£m
);

272  -
EBUSY
;

274  -
ENOENT
;

278 
ölöe
 
£m_öô
(
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
)

280 i‡(
vÆue
 < 
SEM_TIMOUT
) {

281 
π_ty≥d_£m_öô
(&
£m
->£m, 
vÆue
, 
CNT_SEM
 | 
PRIO_Q
);

284  -
EINVAL
;

287 
ölöe
 
£m_de°roy
(
£m_t
 *
£m
)

289 i‡(
π_£m_waô_if
(&
£m
->sem) >= 0) {

290 
π_£m_sig«l
(&
£m
->sem);

291 
π_£m_dñëe
(&
£m
->sem);

294  -
EBUSY
;

297 
ölöe
 
£m_waô
(
£m_t
 *
£m
)

299  
π_£m_waô
(&
£m
->£mË< 
SEM_TIMOUT
 ? 0 : -1;

302 
ölöe
 
£m_åywaô
(
£m_t
 *
£m
)

304  
π_£m_waô_if
(&
£m
->£mË> 0 ? 0 : -
EAGAIN
;

307 
ölöe
 
£m_timedwaô
(
£m_t
 *
£m
, c⁄° 
time•ec
 *
ab°ime
)

309  
π_£m_waô_u¡û
(&
£m
->£m, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -
ETIMEDOUT
;

312 
ölöe
 
£m_po°
(
£m_t
 *
£m
)

314  
π_£m_sig«l
(&
£m
->£mË< 
SEM_TIMOUT
 ? 0 : -
ERANGE
;

317 
ölöe
 
£m_gëvÆue
(
£m_t
 *
£m
, *
svÆ
)

319 *
svÆ
 = 
π_£m_cou¡
(&
£m
->sem);

328 
PTHREAD_PROCESS_PRIVATE
,

329 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

330 
PTHREAD_PROCESS_SHARED


331 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

336 
PTHREAD_MUTEX_TIMED_NP
,

337 
PTHREAD_MUTEX_RECURSIVE_NP
,

338 
PTHREAD_MUTEX_ERRORCHECK_NP
,

339 
PTHREAD_MUTEX_ADAPTIVE_NP
,

340 
PTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

341 
PTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

342 
PTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

343 
PTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL
,

344 
PTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


347 
	#RTAI_MUTEX_DEFAULT
 (1 << 0)

	)

348 
	#RTAI_MUTEX_ERRCHECK
 (1 << 1)

	)

349 
	#RTAI_MUTEX_RECURSIVE
 (1 << 2)

	)

350 
	#RTAI_MUTEX_PSHARED
 (1 << 3)

	)

352 
ölöe
 
±hªad_muãx_öô
(
±hªad_muãx_t
 *
muãx
, c⁄° 
±hªad_muãx©å_t
 *
muãx©å
)

354 
π_ty≥d_£m_öô
(&
muãx
->muãx, !
muãx©å
 || (((*)muãx©å)[0] & 
RTAI_MUTEX_DEFAULT
Ë? 
RESEM_BINSEM
 : (((*)muãx©å)[0] & 
RTAI_MUTEX_ERRCHECK
Ë? 
RESEM_CHEKWT
 : 
RESEM_RECURS
, 
RES_SEM
);

358 
ölöe
 
±hªad_muãx_de°roy
(
±hªad_muãx_t
 *
muãx
)

360 i‡(
π_£m_waô_if
(&
muãx
->mutex) >= 0) {

361 
π_£m_sig«l
(&
muãx
->mutex);

362 
π_£m_dñëe
(&
muãx
->mutex);

365  -
EBUSY
;

368 
ölöe
 
±hªad_muãx_lock
(
±hªad_muãx_t
 *
muãx
)

370  
π_£m_waô
(&
muãx
->muãxË< 
SEM_TIMOUT
 ? 0 : -
EINVAL
;

373 
ölöe
 
±hªad_muãx_timedlock
(
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
)

375  
π_£m_waô_u¡û
(&
muãx
->muãx, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

378 
ölöe
 
±hªad_muãx_åylock
(
±hªad_muãx_t
 *
muãx
)

380  
π_£m_waô_if
(&
muãx
->muãxË> 0 ? 0 : -
EBUSY
;

383 
ölöe
 
±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *
muãx
)

385  
π_£m_sig«l
(&
muãx
->muãxË>0 ? 0 : -
EINVAL
;

388 
ölöe
 
±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *
©å
)

390 ((*)
©å
)[0] = 
RTAI_MUTEX_DEFAULT
;

394 
ölöe
 
±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *
©å
)

399 
ölöe
 
±hªad_muãx©å_gëpsh¨ed
(c⁄° 
±hªad_muãx©å_t
 *
©å
, *
psh¨ed
)

401 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

405 
ölöe
 
±hªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *
©å
, 
psh¨ed
)

407 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

408 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

409 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

411 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

415  -
EINVAL
;

418 
ölöe
 
±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *
©å
, 
köd
)

420 
köd
) {

421 
PTHREAD_MUTEX_DEFAULT
:

422 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_DEFAULT
;

424 
PTHREAD_MUTEX_ERRORCHECK
:

425 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_DEFAULT
)Ë| 
RTAI_MUTEX_ERRCHECK
;

427 
PTHREAD_MUTEX_RECURSIVE
:

428 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_RECURSIVE
;

431  -
EINVAL
;

436 
ölöe
 
±hªad_muãx©å_gëty≥
(c⁄° 
±hªad_muãx©å_t
 *
©å
, *
köd
)

438 ((*)
©å
)[0] & (
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
 | 
RTAI_MUTEX_RECURSIVE
)) {

439 
RTAI_MUTEX_DEFAULT
:

440 *
köd
 = 
PTHREAD_MUTEX_DEFAULT
;

442 
RTAI_MUTEX_ERRCHECK
:

443 *
köd
 = 
PTHREAD_MUTEX_ERRORCHECK
;

445 
RTAI_MUTEX_RECURSIVE
:

446 *
köd
 = 
PTHREAD_MUTEX_RECURSIVE
;

456 
ölöe
 
±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
c⁄d
, c⁄° 
±hªad_c⁄d©å_t
 *
c⁄d_©å
)

458 
π_ty≥d_£m_öô
(&
c⁄d
->c⁄d, 0, 
BIN_SEM
 | 
PRIO_Q
);

462 
ölöe
 
±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *
c⁄d
)

464 i‡(
π_£m_waô_if
(&
c⁄d
->cond) < 0) {

465  -
EBUSY
;

467 
π_£m_dñëe
(&
c⁄d
->cond);

471 
ölöe
 
±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
c⁄d
)

473  
π_£m_sig«l
(&
c⁄d
->cond);

476 
ölöe
 
±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
c⁄d
)

478  
π_£m_brﬂdˇ°
(&
c⁄d
->cond);

481 
ölöe
 
±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
)

483  
π_c⁄d_waô
(&
c⁄d
->c⁄d, &
muãx
->mutex);

486 
ölöe
 
±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
)

488  
π_c⁄d_waô_u¡û
(&
c⁄d
->c⁄d, &
muãx
->muãx, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -
ETIMEDOUT
;

491 
ölöe
 
±hªad_c⁄d©å_öô
(*
©å
)

493 ((*)
©å
)[0] = 0;

497 
ölöe
 
±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *
©å
)

502 
ölöe
 
±hªad_c⁄d©å_gëpsh¨ed
(c⁄° 
±hªad_c⁄d©å_t
 *
©å
, *
psh¨ed
)

504 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

508 
ölöe
 
±hªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *
©å
, 
psh¨ed
)

510 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

511 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

512 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

514 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

518  -
EINVAL
;

521 
ölöe
 
±hªad_c⁄d©å_£t˛ock
(
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 
˛ockid
)

523 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

524 ((*)
c⁄d©å
)[0] = 
˛ockid
;

527  -
EINVAL
;

530 
ölöe
 
±hªad_c⁄d©å_gë˛ock
(
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 *
˛ockid
)

532 i‡(
˛ockid
) {

533 *
˛ockid
 = ((*)
c⁄d©å
)[0];

536  -
EINVAL
;

543 
ölöe
 
±hªad_b¨rõr_öô
(
±hªad_b¨rõr_t
 *
b¨rõr
, c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, 
cou¡
)

545 i‡(
cou¡
 > 0) {

546 
π_ty≥d_£m_öô
(&
b¨rõr
->b¨rõr, 
cou¡
, 
CNT_SEM
 | 
PRIO_Q
);

549  -
EINVAL
;

552 
ölöe
 
±hªad_b¨rõr_de°roy
(
±hªad_b¨rõr_t
 *
b¨rõr
)

554 i‡(
π_£m_waô_if
(&
b¨rõr
->barrier) < 0) {

555  -
EBUSY
;

557  
π_£m_dñëe
(&
b¨rõr
->b¨rõrË=
RT_OBJINV
 ? -
EINVAL
 : 0;

560 
ölöe
 
±hªad_b¨rõr_waô
(
±hªad_b¨rõr_t
 *
b¨rõr
)

562  
π_£m_waô_b¨rõr
(&
b¨rõr
->barrier);

565 
ölöe
 
wøp_±hªad_b¨rõøâr_öô
(
±hªad_b¨rõøâr_t
 *
©å
)

567 ((*)
©å
)[0] = 
PTHREAD_PROCESS_PRIVATE
;

571 
ölöe
 
±hªad_b¨rõøâr_de°roy
(
±hªad_b¨rõøâr_t
 *
©å
)

576 
ölöe
 
±hªad_b¨rõøâr_£çsh¨ed
(
±hªad_b¨rõøâr_t
 *
©å
, 
psh¨ed
)

578 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

579 ((*)
©å
)[0] = 
psh¨ed
;

582  -
EINVAL
;

585 
ölöe
 
wøp_±hªad_b¨rõøâr_gëpsh¨ed
(c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, *
psh¨ed
)

587 *
psh¨ed
 = ((*)
©å
)[0];

595 
ölöe
 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
rwlock
, c⁄° 
±hªad_rwlock©å_t
 *
©å
)

597  
π_rwl_öô
(&
rwlock
->rwlock);

600 
ölöe
 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rwlock
)

602  
π_rwl_dñëe
(&
rwlock
->rwlock);

605 
ölöe
 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rwlock
)

607 i‡(
π_rwl_rdlock
(&
rwlock
->rwlock)) {

608  -
EDEADLK
;

613 
ölöe
 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rwlock
)

615 i‡(
π_rwl_rdlock_if
(&
rwlock
->rwlock)) {

616  -
EBUSY
;

621 
ölöe
 
±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
)

623  
π_rwl_rdlock_u¡û
(&
rwlock
->rwlock, 
time•ec2cou¡
(
ab°ime
));

626 
ölöe
 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rwlock
)

628  
π_rwl_wæock
(&
rwlock
->rwlock);

631 
ölöe
 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rwlock
)

633 i‡(
π_rwl_wæock_if
(&
rwlock
->rwlock)) {

634  -
EBUSY
;

639 
ölöe
 
±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
)

641  
π_rwl_wæock_u¡û
(&
rwlock
->rwlock, 
time•ec2cou¡
(
ab°ime
));

644 
ölöe
 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rwlock
)

646  
π_rwl_u∆ock
(&
rwlock
->rwlock);

649 
ölöe
 
±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *
©å
)

651 ((*)
©å
)[0] = 0;

655 
ölöe
 
±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *
©å
)

660 
ölöe
 
±hªad_rwlock©å_gëpsh¨ed
(c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
psh¨ed
)

662 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

668 
ölöe
 
±hªad_rwlock©å_£çsh¨ed
(
±hªad_rwlock©å_t
 *
©å
, 
psh¨ed
)

670 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

671 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

672 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

674 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

678  -
EINVAL
;

681 
ölöe
 
±hªad_rwlock©å_gëköd_≈
(c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
¥ef
)

686 
ölöe
 
±hªad_rwlock©å_£tköd_≈
(
±hªad_rwlock©å_t
 *
©å
, 
¥ef
)

695 
ölöe
 
gë_max_¥i‹ôy
(
pﬁicy
)

697  
MAX_PRIO
;

700 
ölöe
 
gë_mö_¥i‹ôy
(
pﬁicy
)

702  
MIN_PRIO
;

705 
posix_wøµî_fun
(
±hªad_cookõ_t
 *
cookõ
)

707 
cookõ
->
èsk_fun
(cookõ->
¨g
);

708 
π_£m_brﬂdˇ°
(&
cookõ
->
£m
);

709 
π_£m_dñëe
(&
cookõ
->
£m
);

713 
ölöe
 
±hªad_¸óã
(
±hªad_t
 *
thªad
, c⁄° 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
)

715 *
cookõ_mem
;

717 
cookõ_mem
 = (*)
π_mÆloc
((
±hªad_cookõ_t
Ë+ 
L1_CACHE_BYTES
);

718 i‡(
cookõ_mem
) {

719 
±hªad_cookõ_t
 *
cookõ
;

720 
îr
;

722 
cookõ
 = (
±hªad_cookõ_t
 *)–((()
cookõ_mem
Ë+ (()
L1_CACHE_BYTES
)) & ~((()L1_CACHE_BYTES) - 1UL) );

723 
cookõ
->cookõ = 
cookõ_mem
;

724 (
cookõ
->
èsk
).
magic
 = 0;

725 
cookõ
->
èsk_fun
 = (*)
°¨t_routöe
;

726 
cookõ
->
¨g
 = ()arg;

727 i‡(!(
îr
 = 
π_èsk_öô
(&
cookõ
->
èsk
, (*)
posix_wøµî_fun
, ()cookõ, (
©å
Ë?áâr->
°acksize
 : 
STACK_SIZE
, (©åË?áâr->
¥i‹ôy
 : 
RT_SCHED_LOWEST_PRIORITY
, 1, 
NULL
))) {

728 
π_ty≥d_£m_öô
(&
cookõ
->
£m
, 0, 
BIN_SEM
 | 
FIFO_Q
);

729 
π_èsk_ªsume
(&
cookõ
->
èsk
);

730 *
thªad
 = &
cookõ
->
èsk
;

733 
π_‰ì
(
cookõ
->cookie);

734  
îr
;

737  -
ENOMEM
;

740 
ölöe
 
±hªad_yõld
()

742 
π_èsk_yõld
();

746 
ölöe
 
±hªad_exô
(*
ªtvÆ
)

748 
RT_TASK
 *
π_èsk
;

749 
SEM
 *
£m
;

750 
π_èsk
 = 
π_whﬂmi
();

751 
£m
 = &((
±hªad_cookõ_t
 *)
π_èsk
)->sem;

752 
π_£m_brﬂdˇ°
(
£m
);

753 
π_£m_dñëe
(
£m
);

754 
π_èsk
->
ªtvÆ
 = ()retval;

755 
π_èsk_su•íd
(
π_èsk
);

758 
ölöe
 
±hªad_joö
(
±hªad_t
 
thªad
, **
thªad_ªtu∫
)

760 
ªtvÆ1
, 
ªtvÆ2
;

761 
ªtvÆ_thªad
;

762 
SEM
 *
£m
;

763 
£m
 = &((
±hªad_cookõ_t
 *)
thªad
)->sem;

764 i‡(
π_whﬂmi
()->
¥i‹ôy
 !
RT_SCHED_LINUX_PRIORITY
){

765 
ªtvÆ1
 = 
π_£m_waô
(
£m
);

767 (
ªtvÆ1
 = 
π_£m_waô_if
(
£m
)) <= 0) {

768 
m¶ìp
(10);

772 
ªtvÆ_thªad
 = ((
RT_TASK
 *)
thªad
)->
ªtvÆ
;

773 i‡(
thªad_ªtu∫
) {

774 *
thªad_ªtu∫
 = (*)
ªtvÆ_thªad
;

776 
ªtvÆ2
 = 
π_èsk_dñëe
(
thªad
);

777 
π_‰ì
(((
±hªad_cookõ_t
 *)
thªad
)->
cookõ
);

778  (
ªtvÆ1
Ë?ÑëvÆ1 : 
ªtvÆ2
;

781 
ölöe
 
±hªad_ˇn˚l
(
±hªad_t
 
thªad
)

783 
ªtvÆ
;

784 i‡(!
thªad
) {

785 
thªad
 = 
π_whﬂmi
();

787 
ªtvÆ
 = 
π_èsk_dñëe
(
thªad
);

788 
π_‰ì
(((
±hªad_cookõ_t
 *)
thªad
)->
cookõ
);

789  
ªtvÆ
;

792 
ölöe
 
±hªad_equÆ
(
±hªad_t
 
thªad1
,±hªad_à
thªad2
)

794  
thªad1
 =
thªad2
;

797 
ölöe
 
±hªad_t
 
±hªad_£lf
()

799  
π_whﬂmi
();

802 
ölöe
 
±hªad_©å_öô
(
±hªad_©å_t
 *
©å
)

804 
©å
->
°acksize
 = 
STACK_SIZE
;

805 
©å
->
pﬁicy
 = 
SCHED_FIFO
;

806 
©å
->
º_qu™tum_ns
 = 
RR_QUANTUM_NS
;

807 
©å
->
¥i‹ôy
 = 1;

811 
ölöe
 
±hªad_©å_de°roy
(
±hªad_©å_t
 *
©å
)

816 
ölöe
 
±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 *
©å
, c⁄° 
sched_∑øm
 *
∑øm
)

818 if(
∑øm
->
sched_¥i‹ôy
 < 
MIN_PRIO
 ||Ö¨am->sched_¥i‹ôy > 
MAX_PRIO
) {

819 (-
EINVAL
);

821 
©å
->
¥i‹ôy
 = 
MAX_PRIO
 - 
∑øm
->
sched_¥i‹ôy
;

825 
ölöe
 
±hªad_©å_gësched∑øm
(c⁄° 
±hªad_©å_t
 *
©å
, 
sched_∑øm
 *
∑øm
)

827 
∑øm
->
sched_¥i‹ôy
 = 
MAX_PRIO
 - 
©å
->
¥i‹ôy
;

831 
ölöe
 
±hªad_©å_£tschedpﬁicy
(
±hªad_©å_t
 *
©å
, 
pﬁicy
)

833 if(
pﬁicy
 !
SCHED_FIFO
 &&Öﬁicy !
SCHED_RR
) {

834  -
EINVAL
;

836 i‡((
©å
->
pﬁicy
 =ÖﬁicyË=
SCHED_RR
) {

837 
π_£t_sched_pﬁicy
(
π_whﬂmi
(), 
SCHED_RR
, 
©å
->
º_qu™tum_ns
);

843 
ölöe
 
±hªad_©å_gëschedpﬁicy
(c⁄° 
±hªad_©å_t
 *
©å
, *
pﬁicy
)

845 *
pﬁicy
 = 
©å
->policy;

849 
ölöe
 
±hªad_©å_£tschedº
(
±hªad_©å_t
 *
©å
, 
º_qu™tum_ns
)

851 
©å
->
º_qu™tum_ns
 =Ñr_quantum_ns;

856 
ölöe
 
±hªad_©å_gëschedº
(c⁄° 
±hªad_©å_t
 *
©å
, *
º_qu™tum_ns
)

858 *
º_qu™tum_ns
 = 
©å
->rr_quantum_ns;

862 
ölöe
 
±hªad_©å_£t°acksize
(
±hªad_©å_t
 *
©å
, 
°acksize
)

864 
©å
->
°acksize
 = stacksize;

868 
ölöe
 
±hªad_©å_gë°acksize
(c⁄° 
±hªad_©å_t
 *
©å
, *
°acksize
)

870 *
°acksize
 = 
©å
->stacksize;

874 
ölöe
 
±hªad_©å_£t°ack
(
±hªad_©å_t
 *
©å
, *
°ackaddr
, 
°acksize
)

876 
©å
->
°acksize
 = stacksize;

880 
ölöe
 
±hªad_©å_gë°ack
(c⁄° 
±hªad_©å_t
 *
©å
, **
°ackaddr
, *
°acksize
)

882 *
°acksize
 = 
©å
->stacksize;

886 
ölöe
 
±hªad_ã°ˇn˚l
()

888 
π_èsk_dñëe
(
π_whﬂmi
());

889 
±hªad_exô
(
NULL
);

896 
ölöe
 
±hªad_•ö_öô
(
±hªad_•ölock_t
 *
lock
, 
psh¨ed
)

898 i‡(
lock
) {

899 *
lock
 = 0UL;

902  -
EINVAL
;

905 
ölöe
 
±hªad_•ö_de°roy
(
±hªad_•ölock_t
 *
lock
)

907 i‡(
lock
) {

908 i‡(*
lock
) {

909  -
EBUSY
;

911 *
lock
 = 0UL;

914  -
EINVAL
;

917 
ölöe
 
±hªad_•ö_lock
(
±hªad_•ölock_t
 *
lock
)

919 i‡(
lock
) {

920 
tid
;

921 i‡(((*)
lock
)[0] =(
tid
 = ()(
±hªad_£lf
()))) {

922  -
EDEADLOCK
;

924 
©omic_cmpxchg
((
©omic_t
 *)
lock
, 0, 
tid
));

927  -
EINVAL
;

930 
ölöe
 
±hªad_•ö_åylock
(
±hªad_•ölock_t
 *
lock
)

932 i‡(
lock
) {

933 
tid
;

934 
tid
 = ()(
±hªad_£lf
());

935  
©omic_cmpxchg
((
©omic_t
 *)
lock
, 0, 
tid
Ë? -
EBUSY
 : 0;

937  -
EINVAL
;

940 
ölöe
 
±hªad_•ö_u∆ock
(
±hªad_•ölock_t
 *
lock
)

942 i‡(
lock
) {

944 *
lock
 = 0UL;

947 i‡(*
lock
 !()
±hªad_£lf
()) {

948  -
EPERM
;

950 *
lock
 = 0UL;

954  -
EINVAL
;

957 
ölöe
 
˛ock_gëªs
(
˛ockid
, 
time•ec
 *
ªs
)

959 
ªs
->
tv_£c
 = 0;

960 i‡(!(
ªs
->
tv_n£c
 = 
cou¡2«no
(1))) {

961 
ªs
->
tv_n£c
 = 1;

966 
ölöe
 
˛ock_gëtime
(
˛ockid
, 
time•ec
 *
ç
)

968 
cou¡2time•ec
(
π_gë_time
(), 
ç
);

972 
ölöe
 
˛ock_£âime
(
˛ockid
, c⁄° 
time•ec
 *
ç
)

977 
ölöe
 
˛ock_«no¶ìp
(
˛ockid
, 
Êags
, c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

979 
RTIME
 
expúe
;

980 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

981  -
EINVAL
;

983 
π_¶ìp_u¡û
(
expúe
 = 
Êags
 ? 
time•ec2cou¡
(
rqç
Ë: 
π_gë_time
() +Åimespec2count(rqtp));

984 i‡((
expúe
 -
π_gë_time
()) > 0) {

985 i‡(
rmç
) {

986 
cou¡2time•ec
(
expúe
, 
rmç
);

988  -
EINTR
;

993 
ölöe
 
«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

995 
RTIME
 
expúe
;

996 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 <

998  -
EINVAL
;

1000 
π_¶ìp_u¡û
(
expúe
 = 
π_gë_time
(Ë+ 
time•ec2cou¡
(
rqç
));

1001 i‡((
expúe
 -
π_gë_time
()) > 0) {

1002 i‡(
rmç
) {

1003 
cou¡2time•ec
(
expúe
, 
rmç
);

1005  -
EINTR
;

1014 
	sπ_h™dÀr_suµ‹t
 {

1015 (*
_fun˘i⁄
)(
sigvÆ_t
);

1016 
sigvÆ_t
 
fu«rg
;

1019 #i‚de‡
RTAI_POSIX_HANDLER_WRPR


1020 
	#RTAI_POSIX_HANDLER_WRPR


	)

1022 
h™dÀr_wΩr
(
sup_d©a
)

1024 ((
π_h™dÀr_suµ‹t
 *)
sup_d©a
)->
_fun˘i⁄
(((π_h™dÀr_suµ‹à*)sup_d©a)->
fu«rg
);

1029 
ölöe
 
timî_¸óã
(
˛ockid_t
 
˛ockid
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

1031 
π_èskÀt_°ru˘
 *
timî
;

1032 
π_h™dÀr_suµ‹t
 *
h™dÀr_d©a
;

1034 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

1035  -
EINTR
;

1037 i‡(
evp
 =
NULL
) {

1038  -
EINTR
;

1040 i‡(
evp
->
sigev_nŸify
 =
SIGEV_SIGNAL
) {

1041  -
EINTR
;

1042 } i‡(
evp
->
sigev_nŸify
 =
SIGEV_THREAD
) {

1043 
timî
 = 
π_mÆloc
((
π_èskÀt_°ru˘
));

1044 
h™dÀr_d©a
 = 
π_mÆloc
((
π_h™dÀr_suµ‹t
));

1045 
h™dÀr_d©a
->
fu«rg
 = 
evp
->
sigev_vÆue
;

1046 
h™dÀr_d©a
->
_fun˘i⁄
 = 
evp
->
_sigev_un
.
_sigev_thªad
._function;

1047 *
timîid
 = 
π_±imî_¸óã
(
timî
, 
h™dÀr_wΩr
, ()
h™dÀr_d©a
, 1, 0);

1049  -
EINTR
;

1056 
ölöe
 
timî_gëovîrun
(
timî_t
 
timîid
)

1058  
π_±imî_ovîrun
(
timîid
);

1061 
ölöe
 
timî_gëtime
(
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
)

1063 
RTIME
 
timî_times
[2];

1065 
π_±imî_gëtime
(
timîid
, 
timî_times
);

1066 
cou¡2time•ec
–
timî_times
[0], &(
vÆue
->
ô_vÆue
) );

1067 
cou¡2time•ec
–
timî_times
[1], &(
vÆue
->
ô_öãrvÆ
) );

1072 
ölöe
 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
, ôimî•e¯*
ovÆue
)

1074 i‡(
ovÆue
 !
NULL
) {

1075 
timî_gëtime
(
timîid
, 
ovÆue
);

1077 
π_±imî_£âime
(
timîid
, 
vÆue
, 0, 
Êags
);

1082 
ölöe
 
timî_dñëe
(
timî_t
 
timîid
)

1084 
π_±imî_dñëe
(
timîid
, 0);

1088 #ifde‡
__˝lu•lus


1094 
	~<î∫o.h
>

1095 
	~<f˙é.h
>

1096 
	~<uni°d.h
>

1097 
	~<sig«l.h
>

1098 
	~<sys/ty≥s.h
>

1099 
	~<sys/°©.h
>

1100 
	~<sys/mm™.h
>

1101 
	~<°dlib.h
>

1102 
	~<˘y≥.h
>

1104 
	~<£m≠h‹e.h
>

1105 
	~<limôs.h
>

1106 
	~<±hªad.h
>

1108 
èsk_°ru˘
;

1110 #unde‡
SEM_VALUE_MAX


1111 
	#SEM_VALUE_MAX
 (
SEM_TIMOUT
 - 1)

	)

1112 
	#SEM_BINARY
 (0x7FFFFFFF)

	)

1114 
	#RTAI_PNAME_MAXSZ
 6

	)

1115 
	#SET_ADR
(
s
Ë(((**)s)[0])

	)

1116 
	#SET_VAL
(
s
Ë(((**)s)[1])

	)

1117 
	#INC_VAL
(
s
Ë
	`©omic_öc
((
©omic_t
 *)&(((**)s)[1]))

	)

1118 
	#DEC_VAL
(
s
Ë
	`©omic_dec_™d_ã°
((
©omic_t
 *)&(((**)s)[1]))

	)

1119 
	#TST_VAL
(
s
Ë(((**)s)[1])

	)

1121 
	#LINUX_SIGNAL
 32

	)

1122 
	#LINUX_RT_SIGNAL
 32

	)

1124 
	~<asm/πai_©omic.h
>

1125 
	~<πai_£m.h
>

1126 
	~<πai_sig«l.h
>

1127 
	~<πai_èskÀts.h
>

1129 #ifde‡
__˝lu•lus


1137 
ölöe
 
MAKE_SOFT
()

1139 i‡(
π_is_h¨d_ªÆ_time
(
π_buddy
())) {

1140 
π_make_so·_ªÆ_time
();

1146 
	#MAKE_HARD
(
hs
Ëdÿ{ i‡(hsË
	`π_make_h¨d_ªÆ_time
(); } 0)

	)

1148 
RTAI_PROTO
(, 
cou¡2time•ec
, (
RTIME
 
π
, 
time•ec
 *
t
))

1150 
t
->
tv_£c
 = (
π
 = 
cou¡2«no
(rt))/1000000000;

1151 
t
->
tv_n£c
 = 
π
 -Å->
tv_£c
*1000000000LL;

1154 
RTAI_PROTO
(, 
«nos2time•ec
, (
RTIME
 
π
, 
time•ec
 *
t
))

1156 
t
->
tv_£c
 = 
π
/1000000000;

1157 
t
->
tv_n£c
 = 
π
 -Å->
tv_£c
*1000000000LL;

1160 
RTAI_PROTO
(
RTIME
, 
time•ec2cou¡
, (c⁄° 
time•ec
 *
t
))

1162  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
);

1165 
RTAI_PROTO
(
RTIME
, 
time•ec2«nos
,(c⁄° 
time•ec
 *
t
))

1167  
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
;

1170 
RTAI_PROTO
(, 
±hªad_gë_«me_≈
, (*
adr
, *
«meid
))

1172  (*
«meid
 = 
π_gë_«me
(
SET_ADR
(
adr
))Ë? 0 : 
EINVAL
;

1175 
RTAI_PROTO
(, 
±hªad_gë_adr_≈
, (
«meid
, *
adr
))

1177  (
SET_ADR
(
adr
Ë
π_gë_adr
(
«meid
)Ë? 0 : 
EINVAL
;

1184 
	#°r2u¥
(
si
, 
so
) \

1185 dÿ{ 
i
; ò0; i <
RTAI_PNAME_MAXSZ
; i++Ë
so
[i] = 
	`touµî
(
si
[i]); } 0)

	)

1187 
RTAI_PROTO
(
£m_t
 *, 
__wøp_£m_›í
, (c⁄° *
«meö
, 
oÊags
, 
vÆue
, 
ty≥
))

1189 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1190 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

1191 
î∫o
 = 
ENAMETOOLONG
;

1192  
SEM_FAILED
;

1194 
°r2u¥
(
«meö
, 
«me
);

1195 i‡(!
oÊags
 || 
vÆue
 <
SEM_VALUE_MAX
) {

1196 *
t£m
;

1197 
h™dÀ
 = 0UL;

1198 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
(name), value,Åype, &handle };

1199 i‡((
t£m
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1200 
fd
;

1201 *
p£m
;

1202 i‡(
h™dÀ
 =()
t£m
) {

1203 i‡(
oÊags
 =(
O_CREAT
 | 
O_EXCL
)) {

1204 
î∫o
 = 
EEXIST
;

1205  
SEM_FAILED
;

1207 (
fd
 = 
›í
(
«me
, 
O_RDONLY
)Ë<0 || 
ªad
(fd, &
p£m
, (psem)) != (psem));

1208 
˛o£
(
fd
);

1210 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
);

1211 
p£m
 = 
mÆloc
((*));

1212 ((**)
p£m
)[0] = 
t£m
;

1213 
fd
 = 
›í
(
«me
, 
O_CREAT
 | 
O_WRONLY
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

1214 
wrôe
(
fd
, &
p£m
, (psem));

1215 
˛o£
(
fd
);

1217  (
£m_t
 *)
p£m
;

1219 
î∫o
 = 
ENOSPC
;

1220  
SEM_FAILED
;

1222 
î∫o
 = 
EINVAL
;

1223  
SEM_FAILED
;

1226 
RTAI_PROTO
(, 
__wøp_£m_˛o£
, (
£m_t
 *
£m
))

1228 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1229 i‡(
¨g
.
£m
) {

1230 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1231 
num2«m
(
π_gë_«me
(
SET_ADR
(
£m
)), 
«me
);

1232 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1233 
î∫o
 = 
EBUSY
;

1236 i‡(!
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]) {

1237 !
u∆ök
(
«me
));

1238 
‰ì
(
£m
);

1242 
î∫o
 = 
EINVAL
;

1246 
RTAI_PROTO
(, 
__wøp_£m_u∆ök
, (c⁄° *
«meö
))

1248 
«me
[
RTAI_PNAME_MAXSZ
 + 1];

1249 
fd
;

1250 *
p£m
;

1251 i‡(
°æí
(
«meö
Ë> 
RTAI_PNAME_MAXSZ
) {

1252 
î∫o
 = 
ENAMETOOLONG
;

1255 
°r2u¥
(
«meö
, 
«me
);

1256 i‡((
fd
 = 
›í
(
«me
, 
O_RDONLY
)Ë> 0 && 
ªad
(fd, &
p£m
, (psem)) == (psem)) {

1257  
__wøp_£m_˛o£
((
£m_t
 *)
p£m
);

1259 
î∫o
 = 
ENOENT
;

1263 
RTAI_PROTO
(, 
__wøp_£m_öô
, (
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
))

1265 i‡(
vÆue
 <
SEM_VALUE_MAX
) {

1266 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), vÆue, 
CNT_SEM
 | 
PRIO_Q
, 
NULL
 };

1267 i‡(!(
SET_ADR
(
£m
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1268 
î∫o
 = 
ENOSPC
;

1273 
î∫o
 = 
EINVAL
;

1277 
RTAI_PROTO
(, 
__wøp_£m_de°roy
, (
£m_t
 *
£m
))

1279 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1280 i‡(
¨g
.
£m
) {

1281 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1282 
î∫o
 = 
EBUSY
;

1285 
SET_ADR
(
£m
Ë
NULL
;

1286 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1289 
î∫o
 = 
EINVAL
;

1293 
RTAI_PROTO
(, 
__wøp_£m_waô
, (
£m_t
 *
£m
))

1295 
ﬁdty≥
, 
ªtvÆ
 = -1;

1296 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1297 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1298 
±hªad_ã°ˇn˚l
();

1299 i‡(
¨g
.
£m
) {

1300 i‡(
abs
(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
]Ë>
RTE_BASE
) {

1301 
î∫o
 = 
EINTR
;

1303 
ªtvÆ
 = 0;

1306 
î∫o
 = 
EINVAL
;

1308 
±hªad_ã°ˇn˚l
();

1309 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1310  
ªtvÆ
;

1313 
RTAI_PROTO
(, 
__wøp_£m_åywaô
, (
£m_t
 *
£m
))

1315 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1316 i‡(
¨g
.
£m
) {

1317 
ªtvÆ
;

1318 i‡(
abs
(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
]Ë>
RTE_BASE
) {

1319 
î∫o
 = 
EINTR
;

1322 i‡(
ªtvÆ
 <= 0) {

1323 
î∫o
 = 
EAGAIN
;

1328 
î∫o
 = 
EINVAL
;

1332 
RTAI_PROTO
(, 
__wøp_£m_timedwaô
, (
£m_t
 *
£m
, c⁄° 
time•ec
 *
ab°ime
))

1334 
ﬁdty≥
, 
ªtvÆ
 = -1;

1335 °ru˘ { *
£m
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(£m), 
time•ec2cou¡
(
ab°ime
) };

1336 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1337 
±hªad_ã°ˇn˚l
();

1338 i‡(
¨g
.
£m
) {

1339 
ªt
;

1340 i‡(
abs
(
ªt
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_TIMOUT
) {

1341 
î∫o
 = 
ETIMEDOUT
;

1342 } i‡(
ªt
 >
RTE_BASE
) {

1343 
î∫o
 = 
EINTR
;

1345 
ªtvÆ
 = 0;

1348 
î∫o
 = 
EINVAL
;

1350 
±hªad_ã°ˇn˚l
();

1351 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1352  
ªtvÆ
;

1355 
RTAI_PROTO
(, 
__wøp_£m_po°
, (
£m_t
 *
£m
))

1357 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1358 i‡(
¨g
.
£m
) {

1359 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
);

1362 
î∫o
 = 
EINVAL
;

1366 
RTAI_PROTO
(, 
__wøp_£m_gëvÆue
, (
£m_t
 *
£m
, *
svÆ
))

1368 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(sem) };

1369 i‡(
¨g
.
£m
) {

1370 *
svÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_COUNT
, &
¨g
).
i
[
LOW
];

1373 
î∫o
 = 
EINVAL
;

1381 
	#RTAI_MUTEX_DEFAULT
 (1 << 0)

	)

1382 
	#RTAI_MUTEX_ERRCHECK
 (1 << 1)

	)

1383 
	#RTAI_MUTEX_RECURSIVE
 (1 << 2)

	)

1384 
	#RTAI_MUTEX_PSHARED
 (1 << 3)

	)

1386 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_öô
, (
±hªad_muãx_t
 *
muãx
, c⁄° 
±hªad_muãx©å_t
 *
muãx©å
))

1388 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), !
muãx©å
 || (((*)muãx©å)[0] & 
RTAI_MUTEX_DEFAULT
Ë? 
RESEM_BINSEM
 : (((*)muãx©å)[0] & 
RTAI_MUTEX_ERRCHECK
Ë? 
RESEM_CHEKWT
 : 
RESEM_RECURS
, 
RES_SEM
, 
NULL
 };

1389 
SET_VAL
(
muãx
) = 0;

1390 i‡(!(
SET_ADR
(
muãx
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1391  
ENOMEM
;

1396 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_de°roy
, (
±hªad_muãx_t
 *
muãx
))

1398 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1399 i‡(
¨g
.
muãx
) {

1400 
cou¡
;

1401 i‡(
TST_VAL
(
muãx
)) {

1402  
EBUSY
;

1404 i‡((
cou¡
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
]) <= 0 || count > 1) {

1405 i‡(
cou¡
 > 1 && cou¡ !
RTE_DEADLOK
) {

1406 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
);

1408  
EBUSY
;

1410 
SET_ADR
(
muãx
Ë
NULL
;

1411 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1414  
EINVAL
;

1417 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_lock
, (
±hªad_muãx_t
 *
muãx
))

1419 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1420 i‡(
¨g
.
muãx
) {

1421 
ªtvÆ
;

1422 (
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
]Ë=
RTE_UNBLKD
);

1423  
abs
(
ªtvÆ
Ë< 
RTE_BASE
 ? 0 : 
EDEADLOCK
;

1425  
EINVAL
;

1428 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_åylock
, (
±hªad_muãx_t
 *
muãx
))

1430 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1431 i‡(
¨g
.
muãx
) {

1432 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] <= 0) {

1433  
EBUSY
;

1437  
EINVAL
;

1440 #ifde‡
__USE_XOPEN2K


1441 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_timedlock
, (
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
))

1443 °ru˘ { *
muãx
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(muãx), 
time•ec2cou¡
(
ab°ime
) };

1444 i‡(
¨g
.
muãx
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1445 
ªtvÆ
;

1446 (
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_UNBLKD
);

1447 i‡(
abs
(
ªtvÆ
Ë< 
RTE_BASE
) {

1450 i‡(
ªtvÆ
 =
RTE_TIMOUT
) {

1451  
ETIMEDOUT
;

1454  
EINVAL
;

1458 
RTAI_PROTO
(, 
__wøp_±hªad_muãx_u∆ock
, (
±hªad_muãx_t
 *
muãx
))

1460 °ru˘ { *
muãx
; } 
¨g
 = { 
SET_ADR
(mutex) };

1461 i‡(
¨g
.
muãx
) {

1462  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
).
i
[
LOW
] =
RTE_PERM
 ? 
EPERM
 : 0;

1464  
EINVAL
;

1467 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_öô
, (
±hªad_muãx©å_t
 *
©å
))

1469 ((*)
©å
)[0] = 
RTAI_MUTEX_DEFAULT
;

1473 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_de°roy
, (
±hªad_muãx©å_t
 *
©å
))

1478 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_gëpsh¨ed
, (c⁄° 
±hªad_muãx©å_t
 *
©å
, *
psh¨ed
))

1480 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1484 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_£çsh¨ed
, (
±hªad_muãx©å_t
 *
©å
, 
psh¨ed
))

1486 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1487 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1488 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1490 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1494  
EINVAL
;

1497 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_£ây≥
, (
±hªad_muãx©å_t
 *
©å
, 
köd
))

1499 
köd
) {

1500 
PTHREAD_MUTEX_DEFAULT
:

1501 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_DEFAULT
;

1503 
PTHREAD_MUTEX_ERRORCHECK
:

1504 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_RECURSIVE
 | 
RTAI_MUTEX_DEFAULT
)Ë| 
RTAI_MUTEX_ERRCHECK
;

1506 
PTHREAD_MUTEX_RECURSIVE
:

1507 ((*)
©å
)[0] = (((*Ôâr)[0] & ~(
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
)Ë| 
RTAI_MUTEX_RECURSIVE
;

1510  
EINVAL
;

1515 
RTAI_PROTO
(, 
__wøp_±hªad_muãx©å_gëty≥
, (c⁄° 
±hªad_muãx©å_t
 *
©å
, *
köd
))

1517 ((*)
©å
)[0] & (
RTAI_MUTEX_DEFAULT
 | 
RTAI_MUTEX_ERRCHECK
 | 
RTAI_MUTEX_RECURSIVE
)) {

1518 
RTAI_MUTEX_DEFAULT
:

1519 *
köd
 = 
PTHREAD_MUTEX_DEFAULT
;

1521 
RTAI_MUTEX_ERRCHECK
:

1522 *
köd
 = 
PTHREAD_MUTEX_ERRORCHECK
;

1524 
RTAI_MUTEX_RECURSIVE
:

1525 *
köd
 = 
PTHREAD_MUTEX_RECURSIVE
;

1531 
RTAI_PROTO
(, 
±hªad_make_≥riodic_≈
, (
±hªad_t
 
thªad
, 
time•ec
 *
°¨t_dñay
, time•e¯*
≥riod
))

1533 °ru˘ { 
RT_TASK
 *
èsk
; 
RTIME
 
°¨t_time
, 
≥riod
; } 
¨g
 = { 
NULL
, 
°¨t_dñay
->
tv_£c
*1000000000LL + sèπ_dñay->
tv_n£c
,Öeriod->tv_sec*1000000000LL +Öeriod->tv_nsec };

1534 
ªtvÆ
;

1535  !(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
MAKE_PERIODIC_NS
, &
¨g
).
i
[
LOW
]Ë? 0 :ÑëvÆ =
RTE_UNBLKD
 ? 
EINTR
 : 
ETIMEDOUT
;

1538 
RTAI_PROTO
(, 
±hªad_waô_≥riod_≈
, ())

1540 °ru˘ { 
dummy
; } 
¨g
;

1541  
πai_lxπ
(
BIDX
, 
SIZARG
, 
WAIT_PERIOD
, &
¨g
).
i
[
LOW
];

1548 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_öô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d_©å
))

1550 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), 0, 
BIN_SEM
 | 
PRIO_Q
, 
NULL
 };

1551 i‡(!(
SET_ADR
(
c⁄d
Ë
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
])) {

1552  
ENOMEM
;

1557 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_de°roy
, (
±hªad_c⁄d_t
 *
c⁄d
))

1559 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1560 i‡(
¨g
.
c⁄d
) {

1561 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1562  
EBUSY
;

1564 
SET_ADR
(
c⁄d
Ë
NULL
;

1565 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
]);

1570 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_sig«l
, (
±hªad_c⁄d_t
 *
c⁄d
))

1572 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1573 i‡(
¨g
.
c⁄d
) {

1574 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_SIGNAL
, &
¨g
);

1577  
EINVAL
;

1580 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_brﬂdˇ°
, (
±hªad_c⁄d_t
 *
c⁄d
))

1582 °ru˘ { *
c⁄d
; } 
¨g
 = { 
SET_ADR
(cond) };

1583 i‡(
¨g
.
c⁄d
) {

1584 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_BROADCAST
, &
¨g
);

1587  
EINVAL
;

1590 
öã∫Æ_c⁄d_˛ónup
(*
muãx
Ë{ 
DEC_VAL
(mutex); }

1592 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_waô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
))

1594 
ﬁdty≥
, 
ªtvÆ
;

1595 °ru˘ { *
c⁄d
; *
muãx
; } 
¨g
 = { 
SET_ADR
(cond), SET_ADR(mutex) };

1596 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1597 
±hªad_ã°ˇn˚l
();

1598 i‡(
¨g
.
c⁄d
 &&árg.
muãx
) {

1599 
±hªad_˛ónup_push
(
öã∫Æ_c⁄d_˛ónup
, 
muãx
);

1600 
INC_VAL
(
muãx
);

1601 
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT
, &
¨g
).
i
[
LOW
];

1602 
ªtvÆ
 = !ªtvÆ ||ÑëvÆ =
RTE_UNBLKD
 ? 0 : 
EPERM
;

1603 
DEC_VAL
(
muãx
);

1604 
±hªad_˛ónup_p›
(0);

1606 
ªtvÆ
 = 
EINVAL
;

1608 
±hªad_ã°ˇn˚l
();

1609 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1610  
ªtvÆ
;

1613 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d_timedwaô
, (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
, c⁄° 
time•ec
 *
ab°ime
))

1615 
ﬁdty≥
, 
ªtvÆ
;

1616 °ru˘ { *
c⁄d
; *
muãx
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
(c⁄d), SET_ADR(muãx), 
time•ec2cou¡
(
ab°ime
) };

1617 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ﬁdty≥
);

1618 
±hªad_ã°ˇn˚l
();

1619 i‡(
¨g
.
c⁄d
 &&árg.
muãx
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1620 
±hªad_˛ónup_push
(
öã∫Æ_c⁄d_˛ónup
, 
muãx
);

1621 
INC_VAL
(
muãx
);

1622 i‡(
abs
(
ªtvÆ
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_UNTIL
, &
¨g
).
i
[
LOW
]Ë=
RTE_TIMOUT
) {

1623 
ªtvÆ
 = 
ETIMEDOUT
;

1625 
ªtvÆ
 = !ªtvÆ ? 0 : 
EPERM
;

1627 
DEC_VAL
(
muãx
);

1628 
±hªad_˛ónup_p›
(0);

1630 
ªtvÆ
 = 
EINVAL
;

1632 
±hªad_ã°ˇn˚l
();

1633 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, 
NULL
);

1634  
ªtvÆ
;

1637 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_öô
, (
±hªad_c⁄d©å_t
 *
©å
))

1639 ((*)
©å
)[0] = 0;

1643 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_de°roy
, (
±hªad_c⁄d©å_t
 *
©å
))

1648 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_gëpsh¨ed
, (c⁄° 
±hªad_c⁄d©å_t
 *
©å
, *
psh¨ed
))

1650 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1654 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_£çsh¨ed
, (
±hªad_c⁄d©å_t
 *
©å
, 
psh¨ed
))

1656 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1657 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1658 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1660 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1664  
EINVAL
;

1667 #i‚de‡
CLOCK_MONOTONIC


1668 
	#CLOCK_MONOTONIC
 1

	)

1671 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_£t˛ock
, (
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 
˛ockid
))

1673 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

1674 ((*)
c⁄d©å
)[0] = 
˛ockid
;

1677  
EINVAL
;

1680 
RTAI_PROTO
(, 
__wøp_±hªad_c⁄d©å_gë˛ock
, (
±hªad_c⁄d©å_t
 *
c⁄d©å
, 
˛ockid_t
 *
˛ockid
))

1682 i‡(
˛ockid
) {

1683 *
˛ockid
 = ((*)
c⁄d©å
)[0];

1686  
EINVAL
;

1693 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_öô
, (
±hªad_rwlock_t
 *
rwlock
, 
±hªad_rwlock©å_t
 *
©å
))

1695 °ru˘ { 
«me
; 
ty≥
; } 
¨g
 = { 
π_gë_«me
(0), 
RESEM_CHEKWT
 };

1696 ((
±hªad_rwlock_t
 **)
rwlock
)[0] = (±hªad_rwlock_à*)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_INIT
, &
¨g
).
v
[
LOW
];

1700 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_de°roy
, (
±hªad_rwlock_t
 *
rwlock
))

1702 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1703 i‡(
¨g
.
rwlock
) {

1704  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_DELETE
, &
¨g
).
i
[
LOW
] > 0 ? 0 : 
EINVAL
;

1706  
EINVAL
;

1709 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_rdlock
, (
±hªad_rwlock_t
 *
rwlock
))

1711 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1712 i‡(
¨g
.
rwlock
) {

1713  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK
, &
¨g
).
i
[
LOW
] ? 
EDEADLOCK
 : 0;

1715  
EINVAL
;

1718 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_åyrdlock
, (
±hªad_rwlock_t
 *
rwlock
))

1720 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1721 i‡(
¨g
.
rwlock
) {

1722  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_IF
, &
¨g
).
i
[
LOW
] ? 
EBUSY
 : 0;

1724  
EINVAL
;

1727 #ifde‡
__USE_XOPEN2K


1728 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_timedrdlock
, (
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
))

1730 °ru˘ { *
rwlock
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
‘wlock), 
time•ec2cou¡
(
ab°ime
) };

1731 i‡(
¨g
.
rwlock
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1732  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_UNTIL
, &
¨g
).
i
[
LOW
] ? 
ETIMEDOUT
 : 0;

1734  
EINVAL
;

1738 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_wæock
, (
±hªad_rwlock_t
 *
rwlock
))

1740 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1741 i‡(
¨g
.
rwlock
) {

1742  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK
, &
¨g
).
i
[
LOW
] ? 
EDEADLOCK
 : 0;

1744  
EINVAL
;

1747 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_åywæock
, (
±hªad_rwlock_t
 *
rwlock
))

1749 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1750 i‡(
¨g
.
rwlock
) {

1751  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_IF
, &
¨g
).
i
[
LOW
] ? 
EBUSY
 : 0;

1753  
EINVAL
;

1756 #ifde‡
__USE_XOPEN2K


1757 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_timedwæock
, (
±hªad_rwlock_t
 *
rwlock
, 
time•ec
 *
ab°ime
))

1759 °ru˘ { *
rwlock
; 
RTIME
 
time
; } 
¨g
 = { 
SET_ADR
‘wlock), 
time•ec2cou¡
(
ab°ime
) };

1760 i‡(
¨g
.
rwlock
 && 
ab°ime
->
tv_n£c
 >= 0 &&ábstime->tv_nsec < 1000000000) {

1761  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_UNTIL
, &
¨g
).
i
[
LOW
] ? 
ETIMEDOUT
 : 0;

1763  
EINVAL
;

1767 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock_u∆ock
, (
±hªad_rwlock_t
 *
rwlock
))

1769 °ru˘ { *
rwlock
; } 
¨g
 = { 
SET_ADR
(rwlock) };

1770 i‡(
¨g
.
rwlock
) {

1771  !
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_UNLOCK
, &
¨g
).
i
[
LOW
] ? 0 : 
EPERM
;

1773  
EINVAL
;

1776 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_öô
, (
±hªad_rwlock©å_t
 *
©å
))

1778 ((*)
©å
)[0] = 0;

1782 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_de°roy
, (
±hªad_rwlock©å_t
 *
©å
))

1787 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_gëpsh¨ed
, (c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
psh¨ed
))

1789 *
psh¨ed
 = (((*)
©å
)[0] & 
RTAI_MUTEX_PSHARED
Ë!0 ? 
PTHREAD_PROCESS_SHARED
 : 
PTHREAD_PROCESS_PRIVATE
;

1795 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_£çsh¨ed
, (
±hªad_rwlock©å_t
 *
©å
, 
psh¨ed
))

1797 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1798 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
) {

1799 ((*)
©å
)[0] &~
RTAI_MUTEX_PSHARED
;

1801 ((*)
©å
)[0] |
RTAI_MUTEX_PSHARED
;

1805  
EINVAL
;

1808 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_gëköd_≈
, (c⁄° 
±hªad_rwlock©å_t
 *
©å
, *
¥ef
))

1813 
RTAI_PROTO
(, 
__wøp_±hªad_rwlock©å_£tköd_≈
, (
±hªad_rwlock©å_t
 *
©å
, 
¥ef
))

1822 #ifde‡
__USE_XOPEN2K


1824 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_öô
,(
±hªad_b¨rõr_t
 *
b¨rõr
, c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, 
cou¡
))

1826 i‡(
cou¡
 > 0) {

1827 °ru˘ { 
«me
; 
cou¡
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
π_gë_«me
(0), cou¡, 
CNT_SEM
 | 
PRIO_Q
, 
NULL
 };

1828  (((
±hªad_b¨rõr_t
 **)
b¨rõr
)[0] = (±hªad_b¨rõr_à*)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
]Ë? 0 : 
ENOMEM
;

1830  
EINVAL
;

1833 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_de°roy
,(
±hªad_b¨rõr_t
 *
b¨rõr
))

1835 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(
b¨rõr
) };

1836 
SET_ADR
(
b¨rõr
Ë
NULL
;

1837 i‡(
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
] < 0) {

1838  
EBUSY
;

1840  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
] =
RT_OBJINV
 ? 
EINVAL
 : 0;

1843 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõr_waô
,(
±hªad_b¨rõr_t
 *
b¨rõr
))

1845 °ru˘ { *
£m
; } 
¨g
 = { 
SET_ADR
(
b¨rõr
) };

1846 i‡(
¨g
.
£m
) {

1847  !
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_BARRIER
, &
¨g
).
i
[
LOW
] ? 
PTHREAD_BARRIER_SERIAL_THREAD
 : 0;

1849  
EINVAL
;

1852 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_öô
, (
±hªad_b¨rõøâr_t
 *
©å
))

1854 ((*)
©å
)[0] = 
PTHREAD_PROCESS_PRIVATE
;

1858 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_de°roy
, (
±hªad_b¨rõøâr_t
 *
©å
))

1863 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_£çsh¨ed
, (
±hªad_b¨rõøâr_t
 *
©å
, 
psh¨ed
))

1865 i‡(
psh¨ed
 =
PTHREAD_PROCESS_PRIVATE
 ||Ösh¨ed =
PTHREAD_PROCESS_SHARED
) {

1866 ((*)
©å
)[0] = 
psh¨ed
;

1869  
EINVAL
;

1872 
RTAI_PROTO
(, 
__wøp_±hªad_b¨rõøâr_gëpsh¨ed
, (c⁄° 
±hªad_b¨rõøâr_t
 *
©å
, *
psh¨ed
))

1874 *
psh¨ed
 = ((*)
©å
)[0];

1884 
	#PTHREAD_SOFT_REAL_TIME_NP
 1

	)

1885 
	#PTHREAD_HARD_REAL_TIME_NP
 2

	)

1887 
RTAI_PROTO
(, 
±hªad_£tsched∑øm_≈
, (
¥i‹ôy
, 
pﬁicy
, 
º_qu™tum_ns
, 
˝us_Ælowed
, 
mode
))

1889 
RT_TASK
 *
èsk
;

1890 i‡((
èsk
 = 
π_buddy
())) {

1891 
hs
;

1892 i‡(
˝us_Ælowed
) {

1893 
hs
 = 
MAKE_SOFT
();

1894 
π_èsk_öô_schmod
(0, 0, 0, 0, 0, 
˝us_Ælowed
);

1895 i‡(!
mode
) {

1896 
MAKE_HARD
(
hs
);

1899 i‡(
¥i‹ôy
 >= 0) {

1900 
π_ch™ge_¥io
(
èsk
, 
¥i‹ôy
);

1902 } i‡(
pﬁicy
 =
SCHED_FIFO
 ||Öﬁicy =
SCHED_RR
 || 
¥i‹ôy
 >0 || 
˝us_Ælowed
) {

1903 
π_èsk_öô_schmod
(
π_gë_«me
(
NULL
), 
¥i‹ôy
, 0, 0, 
pﬁicy
, 
˝us_Ælowed
);

1904 
π_grow_™d_lock_°ack
(
PTHREAD_STACK_MIN
);

1906  
EINVAL
;

1908 i‡(
pﬁicy
 =
SCHED_FIFO
 ||Öﬁicy =
SCHED_RR
) {

1909 
π_£t_sched_pﬁicy
(
èsk
, 
pﬁicy
 = 
SCHED_FIFO
 ? 0 : 1, 
º_qu™tum_ns
);

1911 i‡(
mode
) {

1912 i‡(
mode
 =
PTHREAD_HARD_REAL_TIME_NP
) {

1913 
π_make_h¨d_ªÆ_time
();

1915 
π_make_so·_ªÆ_time
();

1921 
RTAI_PROTO
(, 
±hªad_h¨d_ªÆ_time_≈
, ())

1923 
π_make_h¨d_ªÆ_time
();

1926 
RTAI_PROTO
(, 
±hªad_so·_ªÆ_time_≈
, ())

1928 
π_make_so·_ªÆ_time
();

1931 
RTAI_PROTO
(, 
±hªad_gëtid_≈
, ())

1933 °ru˘ { 
dummy
; } 
¨g
;

1934  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

1937 
	#PTHREAD_SOFT_REAL_TIME
 
PTHREAD_SOFT_REAL_TIME_NP


	)

1938 
	#PTHREAD_HARD_REAL_TIME
 
PTHREAD_HARD_REAL_TIME_NP


	)

1939 
	#±hªad_öô_ªÆ_time_≈
(
a
, 
b
, 
c
, 
d
, 
e
) \

1940 
	`±hªad_£tsched∑øm_≈
 (
b
, 
c
, 0, 
d
, 
e
)

	)

1941 
	#±hªad_make_h¨d_ªÆ_time_≈
() \

1942 
	`±hªad_h¨d_ªÆ_time_≈
()

	)

1943 
	#±hªad_make_so·_ªÆ_time_≈
() \

1944 
	`±hªad_so·_ªÆ_time_≈
()

	)

1948 
__ªÆ_±hªad_¸óã
(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
);

1949 
RTAI_PROTO
(, 
__wøp_±hªad_¸óã
,(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
))

1951 
	~<sys/pﬁl.h
>

1953 
hs
, 
ªt
;

1954 
hs
 = 
MAKE_SOFT
();

1955 
ªt
 = 
__ªÆ_±hªad_¸óã
(
thªad
, 
©å
, 
°¨t_routöe
, 
¨g
);

1956 
MAKE_HARD
(
hs
);

1957  
ªt
;

1960 
	~<sys/mm™.h
>

1962 
	sloˇl_±hªad_¨gs_°ru˘
 { *(*
°¨t_routöe
)(*); *
¨g
; 
pùe
[3]; };

1964 #i‚de‡
__SUPPORT_THREAD_FUN_


1965 
	#__SUPPORT_THREAD_FUN_


	)

1967 *
suµ‹t_thªad_fun
(
loˇl_±hªad_¨gs_°ru˘
 *
¨gs
)

1969 
RT_TASK
 *
èsk
;

1970 *(*
°¨t_routöe
)(*Ë
¨gs
->start_routine;

1971 *
¨g
 = 
¨gs
->arg;

1972 
±hªad_t
 
thªad
;

1973 
pﬁicy
;

1974 
sched_∑øm
 
∑øm
;

1976 
±hªad_gësched∑øm
(
thªad
 = 
±hªad_£lf
(), &
pﬁicy
, &
∑øm
);

1977 i‡(
pﬁicy
 =
SCHED_OTHER
) {

1978 
pﬁicy
 = 
SCHED_RR
;

1979 
∑øm
.
sched_¥i‹ôy
 = 
sched_gë_¥i‹ôy_mö
(
SCHED_RR
);

1981 
±hªad_£tsched∑øm
(
±hªad_£lf
(), 
pﬁicy
, &
∑øm
);

1982 
èsk
 = 
π_èsk_öô_schmod
(
π_gë_«me
(0), 
sched_gë_¥i‹ôy_max
(
pﬁicy
Ë- 
∑øm
.
sched_¥i‹ôy
, 0, 0,Öolicy, 0xF);

1983 
˛o£
(
¨gs
->
pùe
[1]);

1984 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

1985 
π_make_h¨d_ªÆ_time
();

1986 
°¨t_routöe
(
¨g
);

1987 
π_make_so·_ªÆ_time
();

1988  
NULL
;

1993 
RTAI_PROTO
(, 
__wøp_±hªad_¸óã
,(
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
, *(*
°¨t_routöe
)(*), *
¨g
))

1995 
hs
, 
ªt
;

1996 
loˇl_±hªad_¨gs_°ru˘
 
¨gs
 = { 
°¨t_routöe
, 
¨g
 };

1997 
hs
 = 
MAKE_SOFT
();

1998 
pùe
(
¨gs
.pipe);

1999 
ªt
 = 
±hªad_¸óã
(
thªad
, 
©å
, (*)
suµ‹t_thªad_fun
, (*)&
¨gs
);

2000 
ªad
(
¨gs
.
pùe
[0], &args.pipe[2], 1);

2001 
˛o£
(
¨gs
.
pùe
[0]);

2002 
MAKE_HARD
(
hs
);

2003  
ªt
;

2007 
__ªÆ_±hªad_ˇn˚l
(
±hªad_t
 
thªad
);

2008 
RTAI_PROTO
(, 
__wøp_±hªad_ˇn˚l
,(
±hªad_t
 
thªad
))

2010 
hs
, 
ªt
;

2011 
hs
 = 
MAKE_SOFT
();

2012 
ªt
 = 
__ªÆ_±hªad_ˇn˚l
(
thªad
);

2013 
MAKE_HARD
(
hs
);

2014  
ªt
;

2017 
__ªÆ_±hªad_sigmask
(
how
, c⁄° 
sig£t_t
 *
√wmask
, sig£t_à*
ﬁdmask
);

2018 
RTAI_PROTO
(, 
__wøp_±hªad_sigmask
,(
how
, c⁄° 
sig£t_t
 *
√wmask
, sig£t_à*
ﬁdmask
))

2020  
__ªÆ_±hªad_sigmask
(
how
, 
√wmask
, 
ﬁdmask
);

2021 
hs
, 
ªt
;

2022 
hs
 = 
MAKE_SOFT
();

2023 
ªt
 = 
__ªÆ_±hªad_sigmask
(
how
, 
√wmask
, 
ﬁdmask
);

2024 
MAKE_HARD
(
hs
);

2025  
ªt
;

2028 
__ªÆ_±hªad_kûl
(
±hªad_t
 
thªad
, 
signo
);

2029 
RTAI_PROTO
(, 
__wøp_±hªad_kûl
,(
±hªad_t
 
thªad
, 
signo
))

2031 
hs
, 
ªt
;

2032 
hs
 = 
MAKE_SOFT
();

2033 
ªt
 = 
__ªÆ_±hªad_kûl
(
thªad
, 
signo
);

2034 
MAKE_HARD
(
hs
);

2035  
ªt
;

2039 
__ªÆ_sigwaô
(c⁄° 
sig£t_t
 *
£t
, *
sig
);

2040 
RTAI_PROTO
(, 
__wøp_sigwaô
,(c⁄° 
sig£t_t
 *
£t
, *
sig
))

2042 
hs
, 
ªt
;

2043 
hs
 = 
MAKE_SOFT
();

2044 
ªt
 = 
__ªÆ_sigwaô
(
£t
, 
sig
);

2045 
MAKE_HARD
(
hs
);

2046  
ªt
;

2049 
__ªÆ_±hªad_ã°ˇn˚l
();

2050 
RTAI_PROTO
(, 
__wøp_±hªad_ã°ˇn˚l
,())

2052 
__ªÆ_±hªad_ã°ˇn˚l
();

2054 
ﬁdty≥
, 
ﬁd°©e
;

2055 
±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, &
ﬁd°©e
);

2056 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_DEFERRED
, &
ﬁdty≥
);

2057 i‡(
ﬁd°©e
 !
PTHREAD_CANCEL_DISABLE
 && 
ﬁdty≥
 !
PTHREAD_CANCEL_DEFERRED
) {

2058 
MAKE_SOFT
();

2059 
π_èsk_dñëe
(
π_buddy
());

2060 
±hªad_exô
(
NULL
);

2062 
±hªad_£tˇn˚…y≥
(
ﬁdty≥
, &oldtype);

2063 
±hªad_£tˇn˚l°©e
(
ﬁd°©e
, &oldstate);

2066 
__ªÆ_±hªad_yõld
();

2067 
RTAI_PROTO
(, 
__wøp_±hªad_yõld
,())

2069 i‡(
π_is_h¨d_ªÆ_time
(
π_buddy
())) {

2070 °ru˘ { 
dummy
; } 
¨g
;

2071 
πai_lxπ
(
BIDX
, 
SIZARG
, 
YIELD
, &
¨g
);

2074  
__ªÆ_±hªad_yõld
();

2077 
__ªÆ_±hªad_exô
(*
ªtvÆ
);

2078 
RTAI_PROTO
(, 
__wøp_±hªad_exô
,(*
ªtvÆ
))

2080 
MAKE_SOFT
();

2081 
π_èsk_dñëe
(
NULL
);

2082 
__ªÆ_±hªad_exô
(
ªtvÆ
);

2085 
__ªÆ_±hªad_joö
(
±hªad_t
 
thªad
, **
thªad_ªtu∫
);

2086 
RTAI_PROTO
(, 
__wøp_±hªad_joö
,(
±hªad_t
 
thªad
, **
thªad_ªtu∫
))

2088 
hs
, 
ªt
;

2089 
hs
 = 
MAKE_SOFT
();

2090 
ªt
 = 
__ªÆ_±hªad_joö
(
thªad
, 
thªad_ªtu∫
);

2091 
MAKE_HARD
(
hs
);

2092  
ªt
;

2100 #ifde‡
__USE_XOPEN2K


2103 
	#ORIGINAL_TEST


	)

2104 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_öô
, (
±hªad_•ölock_t
 *
lock
, 
psh¨ed
))

2106  
lock
 ? (((
pid_t
 *Óock)[0] = 0Ë: 
EINVAL
;

2109 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_de°roy
, (
±hªad_•ölock_t
 *
lock
))

2111 i‡(
lock
) {

2112  ((
pid_t
 *)
lock
)[0] ? 
EBUSY
 : (((pid_t *)lock)[0] = 0);

2114  
EINVAL
;

2117 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_lock
,(
±hªad_•ölock_t
 *
lock
))

2119 i‡(
lock
) {

2120 
©omic_cmpxchg
(
lock
, 0, 1));

2123  
EINVAL
;

2126 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_åylock
,(
±hªad_•ölock_t
 *
lock
))

2128 i‡(
lock
) {

2129  
©omic_cmpxchg
(
lock
, 0, 1Ë? 
EBUSY
 : 0;

2131  
EINVAL
;

2134 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_u∆ock
,(
±hªad_•ölock_t
 *
lock
))

2136 i‡(
lock
) {

2137  ((
pid_t
 *)
lock
)[0] = 0;

2139  
EINVAL
;

2142 
ölöe
 
_±hªad_gëtid_≈
()

2144 °ru˘ { 
dummy
; } 
¨g
;

2145  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RT_GETTID
, &
¨g
).
i
[
LOW
];

2148 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_öô
, (
±hªad_•ölock_t
 *
lock
, 
psh¨ed
))

2150  
lock
 ? (((
pid_t
 *Óock)[0] = 0Ë: 
EINVAL
;

2153 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_de°roy
, (
±hªad_•ölock_t
 *
lock
))

2155 i‡(
lock
) {

2156  ((
pid_t
 *)
lock
)[0] ? 
EBUSY
 : (((pid_t *)lock)[0] = 0);

2158  
EINVAL
;

2161 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_lock
,(
±hªad_•ölock_t
 *
lock
))

2163 i‡(
lock
) {

2164 
pid_t
 
tid
;

2165 i‡(((
pid_t
 *)
lock
)[0] =(
tid
 = 
_±hªad_gëtid_≈
())) {

2166  
EDEADLOCK
;

2168 
©omic_cmpxchg
((*)
lock
, 0, 
tid
));

2171  
EINVAL
;

2174 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_åylock
,(
±hªad_•ölock_t
 *
lock
))

2176 i‡(
lock
) {

2177  
©omic_cmpxchg
((*)
lock
, 0, 
_±hªad_gëtid_≈
()Ë? 
EBUSY
 : 0;

2179  
EINVAL
;

2182 
RTAI_PROTO
(, 
__wøp_±hªad_•ö_u∆ock
,(
±hªad_•ölock_t
 *
lock
))

2184 i‡(
lock
) {

2186  ((
pid_t
 *)
lock
)[0] = 0;

2188  ((
pid_t
 *)
lock
)[0] !
_±hªad_gëtid_≈
(Ë? 
EPERM
 : (((pid_t *)lock)[0] = 0);

2191  
EINVAL
;

2201 
RTAI_PROTO
(, 
__wøp_˛ock_gëªs
, (
˛ockid_t
 
˛ockid
, 
time•ec
 *
ªs
))

2203 i‡(
˛ockid
 =
CLOCK_MONOTONIC
 || clockid =
CLOCK_REALTIME
) {

2204 
ªs
->
tv_£c
 = 0;

2205 i‡(!(
ªs
->
tv_n£c
 = 
cou¡2«no
(1))) {

2206 
ªs
->
tv_n£c
 = 1;

2210 
î∫o
 = -
EINVAL
;

2214 
RTAI_PROTO
(, 
__wøp_˛ock_gëtime
, (
˛ockid_t
 
˛ockid
, 
time•ec
 *
ç
))

2216 i‡(
˛ockid
 =
CLOCK_MONOTONIC
) {

2217 
cou¡2time•ec
(
π_gë_ts˙t
(), 
ç
);

2219 } i‡(
˛ockid
 =
CLOCK_REALTIME
) {

2220 
cou¡2time•ec
(
π_gë_ªÆ_time
(), 
ç
);

2223 
î∫o
 = -
EINVAL
;

2227 
RTAI_PROTO
(, 
__wøp_˛ock_£âime
, (
˛ockid_t
 
˛ockid
, c⁄° 
time•ec
 *
ç
))

2229 i‡(
˛ockid
 =
CLOCK_REALTIME
) {

2230 
hs
;

2231 
hs
 = 
MAKE_SOFT
();

2232 
π_gëtime‹ig
(
NULL
);

2233 
MAKE_HARD
(
hs
);

2236 
î∫o
 = -
ENOTSUP
;

2240 
RTAI_PROTO
(, 
__wøp_˛ock_«no¶ìp
,(
˛ockid_t
 
˛ockid
, 
Êags
, c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
))

2242 
ˇnc_ty≥
, 
ªt
;

2243 
RTIME
 
expúe
;

2245 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

2246  
ENOTSUP
;

2249 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

2250  
EINVAL
;

2253 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ˇnc_ty≥
);

2255 
expúe
 = 
time•ec2cou¡
(
rqç
);

2256 i‡(
˛ockid
 =
CLOCK_MONOTONIC
) {

2257 i‡(
Êags
 !
TIMER_ABSTIME
) {

2258 
expúe
 +
π_gë_ts˙t
();

2260 
ªt
 = 
π_¶ìp_u¡û
(
expúe
);

2261 
expúe
 -
π_gë_ts˙t
();

2263 i‡(
Êags
 !
TIMER_ABSTIME
) {

2264 
expúe
 +
π_gë_ªÆ_time
();

2266 
ªt
 = 
π_¶ìp_u¡û
(
expúe
);

2267 
expúe
 -
π_gë_ªÆ_time
();

2269 i‡(
expúe
 > 0) {

2270 i‡(
rmç
) {

2271 
cou¡2time•ec
(
expúe
, 
rmç
);

2273  
ªt
 =
RTE_UNBLKD
 ? 
EINTR
 : 0;

2276 
±hªad_£tˇn˚…y≥
(
ˇnc_ty≥
, 
NULL
);

2281 
RTAI_PROTO
(, 
__wøp_«no¶ìp
,(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
))

2283 
ˇnc_ty≥
, 
ªt
;

2284 
RTIME
 
expúe
;

2285 i‡(
rqç
->
tv_n£c
 >1000000000L ||Ñqç->tv_n£¯< 0 ||Ñqç->
tv_£c
 < 0) {

2286  -
EINVAL
;

2289 
±hªad_£tˇn˚…y≥
(
PTHREAD_CANCEL_ASYNCHRONOUS
, &
ˇnc_ty≥
);

2291 
ªt
 = 
π_¶ìp_u¡û
(
expúe
 = 
π_gë_ts˙t
(Ë+ 
time•ec2cou¡
(
rqç
));

2292 i‡((
expúe
 -
π_gë_ts˙t
()) > 0) {

2293 i‡(
rmç
) {

2294 
cou¡2time•ec
(
expúe
, 
rmç
);

2296 
î∫o
 = -
EINTR
;

2297  
ªt
 =
RTE_UNBLKD
 ? -1 : 0;

2300 
±hªad_£tˇn˚…y≥
(
ˇnc_ty≥
, 
NULL
);

2309 
suµ‹t_posix_timî
(*
d©a
)

2311 
RT_TASK
 *
èsk
;

2312 
π_èskÀt_°ru˘
 
u•èskÀt
;

2313 
	sd©a_°ru
 { 
π_èskÀt_°ru˘
 *
èskÀt
; 
signum
; } 
d©a_°ru˘
;

2315 
d©a_°ru˘
 = *(
d©a_°ru
 *)
d©a
;

2317 i‡(!(
èsk
 = 
π_thªad_öô
(()
d©a_°ru˘
.
èskÀt
, 98, 0, 
SCHED_FIFO
, 0xF))) {

2318 
¥ötf
("CANNOT INIT POSIX TIMER SUPPORT TASKLET\n");

2321 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
, *
u•èskÀt
; 
RT_TASK
 *
èsk
; } 
ªg
 = { 
d©a_°ru˘
.tasklet, &usptasklet,Åask };

2322 
πai_lxπ
(
TASKLETS_IDX
, (
ªg
), 
REG_TASK
, &reg);

2325 
mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

2326 
π_make_h¨d_ªÆ_time
();

2328 i‡(
d©a_°ru˘
.
signum
) {

2330 
π_èsk_su•íd
(
èsk
);

2331 i‡(
u•èskÀt
.
h™dÀr
) {

2332 
±hªad_kûl
((
±hªad_t
)
u•èskÀt
.
d©a
, 
d©a_°ru˘
.
signum
);

2339 
π_èsk_su•íd
(
èsk
);

2340 i‡(
u•èskÀt
.
h™dÀr
) {

2341 
u•èskÀt
.
h™dÀr
(u•èskÀt.
d©a
);

2348 
πai_°i
();

2349 
π_make_so·_ªÆ_time
();

2350 
π_èsk_dñëe
(
èsk
);

2355 
RTAI_PROTO
 (, 
__wøp_timî_¸óã
, (
˛ockid_t
 
˛ockid
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
))

2357 (*
h™dÀr
)() = (((*)())1);

2358 
pid
 = -1;

2359 
d©a
 = 0;

2360 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
signum
; } 
d©a_supfun
;

2362 i‡(
˛ockid
 !
CLOCK_MONOTONIC
 && clockid !
CLOCK_REALTIME
) {

2363 
î∫o
 = 
ENOTSUP
;

2367 i‡(
evp
 =
NULL
) {

2368 
d©a_supfun
.
signum
 = 
SIGALRM
;

2370 i‡(
evp
->
sigev_nŸify
 =
SIGEV_SIGNAL
) {

2371 
d©a_supfun
.
signum
 = 
evp
->
sigev_signo
;

2372 
d©a
 = ()
evp
->
sigev_vÆue
.
sivÆ_±r
;

2373 } i‡(
evp
->
sigev_nŸify
 =
SIGEV_THREAD
) {

2374 
d©a_supfun
.
signum
 = 0;

2375 
d©a
 = ()
evp
->
sigev_vÆue
.
sivÆ_öt
;

2376 
h™dÀr
 = ((*)()Ë
evp
->
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄
;

2377 
pid
 = 1;

2381 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; (*
h™dÀr
)(); 
d©a
; 
pid
; 
thªad
; } 
¨g
 = { 
NULL
, handler, data,Öid, 0 };

2382 
¨g
.
timî
 = (
π_èskÀt_°ru˘
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
INIT
, &¨g).
v
[
LOW
];

2383 
d©a_supfun
.
èskÀt
 = 
¨g
.
timî
;

2384 
¨g
.
thªad
 = 
π_thªad_¸óã
((*)
suµ‹t_posix_timî
, &
d©a_supfun
, 
TASKLET_STACK_SIZE
);

2385 *
timîid
 = (
timî_t
)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_CREATE
, &
¨g
).
i
[
LOW
];

2390 
RTAI_PROTO
 (, 
__wøp_timî_gëtime
, (
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
))

2392 
RTIME
 
timî_times
[2];

2394 °ru˘ { 
timî_t
 
timî
; 
RTIME
 *
timî_times
; } 
¨g
 = { 
timîid
,Åimer_times };

2395 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_GETTIME
, &
¨g
);

2397 
cou¡2time•ec
–
timî_times
[0], &(
vÆue
->
ô_vÆue
) );

2398 
cou¡2time•ec
–
timî_times
[1], &(
vÆue
->
ô_öãrvÆ
) );

2403 
RTAI_PROTO
 (, 
__wøp_timî_£âime
, (
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
, ôimî•e¯*
ovÆue
))

2405 i‡(
ovÆue
 !
NULL
) {

2406 
__wøp_timî_gëtime
(
timîid
, 
ovÆue
);

2408 °ru˘ { 
timî_t
 
timî
; c⁄° 
ôimî•ec
 *
vÆue
; 
d©a
; 
Êags
; } 
¨g
 = { 
timîid
, vÆue, 
±hªad_£lf
(), flags};

2409 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_SETTIME
, &
¨g
);

2414 
RTAI_PROTO
 (, 
__wøp_timî_gëovîrun
, (
timî_t
 
timîid
))

2416 °ru˘ { 
timî_t
 
timî
; } 
¨g
 = { 
timîid
 };

2417  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
PTIMER_OVERRUN
, &
¨g
).
π
;

2420 
RTAI_PROTO
 (, 
__wøp_timî_dñëe
, (
timî_t
 
timîid
))

2422 
thªad
;

2424 °ru˘ { 
timî_t
 
timî
; 
•a˚
;} 
¨g_dñ
 = { 
timîid
, 1 };

2425 i‡((
thªad
 = 
πai_lxπ
(
TASKLETS_IDX
, (
¨g_dñ
), 
PTIMER_DELETE
, &¨g_dñ).
i
[
LOW
])) {

2426 
π_thªad_joö
(
thªad
);

2439 
	#±hªad_£lf_π
 
±hªad_£lf


	)

2440 
	#±hªad_equÆ_π
 
±hªad_equÆ


	)

2441 
	#±hªad_©å_öô_π
 
±hªad_©å_öô


	)

2442 
	#±hªad_©å_de°roy_π
 
±hªad_©å_de°roy


	)

2443 
	#±hªad_©å_gëdëach°©e_π
 
±hªad_©å_gëdëach°©e


	)

2444 
	#±hªad_©å_£tschedpﬁicy_π
 
±hªad_©å_£tschedpﬁicy


	)

2445 
	#±hªad_©å_gëschedpﬁicy_π
 
±hªad_©å_gëschedpﬁicy


	)

2446 
	#±hªad_©å_£tsched∑øm_π
 
±hªad_©å_£tsched∑øm


	)

2447 
	#±hªad_©å_gësched∑øm_π
 
±hªad_©å_gësched∑øm


	)

2448 
	#±hªad_©å_£töhîôsched_π
 
±hªad_©å_£töhîôsched


	)

2449 
	#±hªad_©å_gëöhîôsched_π
 
±hªad_©å_gëöhîôsched


	)

2450 
	#±hªad_©å_£tsc›e_π
 
±hªad_©å_£tsc›e


	)

2451 
	#±hªad_©å_gësc›e_π
 
±hªad_©å_gësc›e


	)

2452 #ifde‡
__USE_UNIX98


2453 
	#±hªad_©å_£tgu¨dsize_π
 
±hªad_©å_£tgu¨dsize


	)

2454 
	#±hªad_©å_gëgu¨dsize_π
 
±hªad_©å_gëgu¨dsize


	)

2456 
	#±hªad_©å_£t°ackaddr_π
 
±hªad_©å_£t°ackaddr


	)

2457 
	#±hªad_©å_gë°ackaddr_π
 
±hªad_©å_gë°ackaddr


	)

2458 #ifde‡
__USE_XOPEN2K


2459 
	#±hªad_©å_£t°ack_π
 
±hªad_©å_£t°ack


	)

2460 
	#±hªad_©å_gë°ack_π
 
±hªad_©å_gë°ack


	)

2462 
	#±hªad_©å_£t°acksize_π
 
±hªad_©å_£t°acksize


	)

2463 
	#±hªad_©å_gë°acksize_π
 
±hªad_©å_gë°acksize


	)

2469 
	#±hªad_£tˇn˚l°©e_π
 
±hªad_£tˇn˚l°©e


	)

2470 
	#±hªad_£tˇn˚…y≥_π
 
±hªad_£tˇn˚…y≥


	)

2472 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_prinher.h

20 #i‚de‡
_RTAI_PRINHER_H


21 
	#_RTAI_PRINHER_H


	)

23 
	~<πai_schedc‹e.h
>

25 #ifde‡
__KERNEL__


27 #ifde‡
CONFIG_RTAI_FULL_PRINHER


29 
	#èsk_owns_£ms
(
èsk
Ë(—ask)->
ªsq
.
√xt
 !&—ask)->ªsq)

	)

31 
ölöe
 
	$íqueue_ªsqñ
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

33 
QUEUE
 *
ªsq
;

34 
ªsqñ
->
√xt
 = 
ªsq
 = &
ªsowƒ
->resq;

35 (
ªsqñ
->
¥ev
 = 
ªsq
->¥ev)->
√xt
 =Ñesqel;

36 
ªsq
->
¥ev
 = 
ªsqñ
;

37 
	}
}

39 
	#íqueue_ªsqtsk
(
ªsowƒ
)

	)

41 
	#RESQEL_TASK
 ((((
QUEUE
 *)
ªsqñ
->
èsk
)->
√xt
)->èsk)

	)

43 
ölöe
 
	$_£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

45 
h¥io
;

46 
RT_TASK
 *
èsk
;

47 
QUEUE
 *
ªsq
, *
ªsqñ
;

48 
h¥io
 = 
ªsowƒ
->
ba£_¥i‹ôy
;

49 
ªsqñ
 = 
ªsq
 = &
ªsowƒ
->resq;

50 (
ªsqñ
 =Ñesqñ->
√xt
Ë!
ªsq
 && (
èsk
 = 
RESQEL_TASK
Ë&&Åask->
¥i‹ôy
 < 
h¥io
) {

51 
h¥io
 = 
èsk
->
¥i‹ôy
;

53  
h¥io
;

54 
	}
}

56 
ölöe
 
	$dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

58 
h¥io
, 
¥io
;

59 
QUEUE
 *
q
;

60 (
ªsqñ
->
¥ev
)->
√xt
 =Ñesqel->next;

61 (
ªsqñ
->
√xt
)->
¥ev
 =Ñesqel->prev;

62 
h¥io
 = 
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

63  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë< 
h¥io
) ?Örio : hprio);

64 
	}
}

66 
ölöe
 
	$£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

68 
h¥io
, 
¥io
;

69 
QUEUE
 *
q
;

70 
h¥io
 = 
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

71  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë< 
h¥io
) ?Örio : hprio);

72 
	}
}

76 
	#èsk_owns_£ms
(
èsk
Ë(—ask)->
owndªs
)

	)

78 
	#íqueue_ªsqñ
(
ªsqñ
, 
èsk
) \

79 dÿ{ (
èsk
)->
owndªs
++; } 0)

	)

81 
	#íqueue_ªsqtsk
(
èsk
)

	)

84 
ölöe
 
	$_£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

86 
QUEUE
 *
q
;

87 
¥io
;

88  
	`ªnq_ªady_èsk
(
ªsowƒ
, ((
q
 =Ñesowƒ->
msg_queue
.
√xt
Ë!&ªsowƒ->msg_queuê&& (
¥io
 = (q->
èsk
)->
¥i‹ôy
Ë<Ñesowƒ->
ba£_¥i‹ôy
) ?Örio :Ñesownr->base_priority);

89 
	}
}

91 
ölöe
 
	$dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
QUEUE
 *
ªsqñ
, 
RT_TASK
 *
ªsowƒ
)

93 i‡(--
ªsowƒ
->
owndªs
 <= 0) {

94 
ªsowƒ
->
owndªs
 = 0;

95  
	`_£t_èsk_¥io_‰om_ªsq
(
ªsowƒ
);

98 
	}
}

100 
ölöe
 
	$£t_èsk_¥io_‰om_ªsq
(
RT_TASK
 *
ªsowƒ
)

102  !
ªsowƒ
->
owndªs
 ? 
	`_£t_èsk_¥io_‰om_ªsq
(resownr) : 0;

103 
	}
}

107 
	#dequeue_ªsqñ_ª£t_cuºít_¥i‹ôy
(
ªsqñ
, 
π_cuºít
) \

108 
	`dequeue_ªsqñ_ª£t_èsk_¥i‹ôy
(
ªsqñ
, 
π_cuºít
)

	)

110 
	#£t_cuºít_¥io_‰om_ªsq
(
π_cuºít
) \

111 
	`£t_èsk_¥io_‰om_ªsq
(
π_cuºít
)

	)

113 
	#èsk_owns_msgs
(
èsk
Ë(—ask)->
msg_queue
.
√xt
 !&—ask)->msg_queue)

	)

114 
	#èsk_owns_ªs
(
èsk
Ë(
	`èsk_owns_£ms
—askË|| 
	`èsk_owns_msgs
—ask))

	)

	@/usr/realtime/include/rtai_proc_fs.h

19 #i‚de‡
_RTAI_PROC_FS_H


20 
	#_RTAI_PROC_FS_H


	)

22 
¥oc_dú_íåy
 *
πai_¥oc_roŸ
;

24 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,9,0)

26 
	~<löux/£q_fûe.h
>

28 
	#PROC_READ_FUN
(
ªad_fun_«me
) \

29 
	`ªad_fun_«me
(
£q_fûe
 *
pf
, *
v
)

	)

31 
	#PROC_READ_OPEN_OPS
(
πai_¥oc_f›s
, 
ªad_fun_«me
) \

33 
	`πai_¥oc_›í
(
öode
 *öode, 
fûe
 *file) { \

34  
	`sögÀ_›í
(
fûe
, 
ªad_fun_«me
, 
NULL
); \

37 c⁄° 
fûe_›î©i⁄s
 
πai_¥oc_f›s
 = { \

38 .
ow√r
 = 
THIS_MODULE
, \

39 .
›í
 = 
πai_¥oc_›í
, \

40 .
ªad
 = 
£q_ªad
, \

41 .
Œ£ek
 = 
£q_l£ek
, \

42 .
ªÀa£
 = 
sögÀ_ªÀa£
 \

43 };

	)

45 
ölöe
 *
	$CREATE_PROC_ENTRY
(c⁄° *
«me
, 
umode_t
 
mode
, *
∑ª¡
, c⁄° 
fûe_›î©i⁄s
 *
¥oc_f›s
)

47  !
∑ª¡
 ? 
	`¥oc_mkdú
(
«me
, 
NULL
Ë: 
	`¥oc_¸óã
“ame, 
mode
,Ö¨ít, 
¥oc_f›s
);

48 
	}
}

50 
	#SET_PROC_READ_ENTRY
(
íåy
, 
ªad_fun
Ëdÿ{ } 0)

	)

52 
	#PROC_PRINT_VARS


	)

54 
	#PROC_PRINT
(
fmt
, 
¨gs
...) \

55 dÿ{ 
	`£q_¥ötf
(
pf
, 
fmt
, ##
¨gs
); } 0)

	)

57 
	#PROC_PRINT_RETURN
 dÿ{ 
d⁄e
; } 0)

	)

59 
	#PROC_PRINT_DONE
 dÿ{  0; } 0)

	)

63 
	#PROC_READ_FUN
 \

64 
	`πai_ªad_¥oc
 (*
∑ge
, **
°¨t
, 
off_t
 
off
, 
cou¡
, *
eof
, *
d©a
)

	)

66 
ölöe
 *
	$CREATE_PROC_ENTRY
(c⁄° *
«me
, 
umode_t
 
mode
, *
∑ª¡
, c⁄° 
fûe_›î©i⁄s
 *
¥oc_f›s
)

68  
	`¸óã_¥oc_íåy
(
«me
, 
mode
, 
∑ª¡
);

69 
	}
}

71 
	#SET_PROC_READ_ENTRY
(
íåy
, 
ªad_fun
) \

72 dÿ{ 
íåy
->
ªad_¥oc
 = 
ªad_fun
; } 0)

	)

74 
	#LIMIT
 (
PAGE_SIZE
 - 80)

	)

83 
	#PROC_PRINT_VARS
 \

84 
off_t
 
pos
 = 0; \

85 
off_t
 
begö
 = 0; \

86 
Àn
 = 0

	)

94 
	#PROC_PRINT
(
fmt
,
¨gs
...) \

96 
Àn
 +
	`•rötf
(
∑ge
 +Üí , 
fmt
, ##
¨gs
); \

97 
pos
 +
Àn
; \

98 if(
pos
 < 
off
) { \

99 
Àn
 = 0; \

100 
begö
 = 
pos
; \

102 if(
pos
 > 
off
 + 
cou¡
) \

103 
d⁄e
; \

104 } 0)

	)

108 
	#PROC_PRINT_RETURN
 \

110 *
eof
 = 1; \

111 
d⁄e
; \

112 } 0)

	)

117 
	#PROC_PRINT_DONE
 \

119 *
eof
 = 1; \

120 
d⁄e
: \

121 *
°¨t
 = 
∑ge
 + (
off
 - 
begö
); \

122 
Àn
 -(
off
 - 
begö
); \

123 if(
Àn
 > 
cou¡
) \

124 
Àn
 = 
cou¡
; \

125 if(
Àn
 < 0) \

126 
Àn
 = 0; \

127  
Àn
; \

128 } 0)

	)

	@/usr/realtime/include/rtai_proxies.h

20 #i‚de‡
_RTAI_PROXIES_H


21 
	#_RTAI_PROXIES_H


	)

23 
	~<πai_sched.h
>

25 #ifde‡
__˝lu•lus


30 
RT_TASK
 *
__π_¥oxy_©èch
((*
func
)(),

31 
RT_TASK
 *
èsk
,

32 *
msg
,

33 
nbyãs
,

34 
¥i‹ôy
);

37 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_¥oxy_©èch
(RT_TASK *
èsk
,

38 *
msg
,

39 
nbyãs
,

40 
¥i‹ôy
);

43 
RTAI_SYSCALL_MODE
 
π_¥oxy_dëach
(
RT_TASK
 *
¥oxy
);

46 
RTAI_SYSCALL_MODE
 
RT_TASK
 *
π_åiggî
(RT_TASK *
¥oxy
);

48 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_registry.h

27 #i‚de‡
_RTAI_REGISTRY_H


28 
	#_RTAI_REGISTRY_H


	)

30 
	~<πai_«m2num.h
>

32 
	gèsk_°ru˘
;

34 
	sπ_ªgi°ry_íåy
 {

35 
	m«me
;

36 *
	madr
;

37 
èsk_°ru˘
 *
	mtsk
;

38 
	mty≥
;

39 
	mcou¡
;

40 
	mÆök
;

41 
	m∆ök
;

44 
	#MAX_SLOTS
 
CONFIG_RTAI_SCHED_LXRT_NUMSLOTS


45 

	)

46 
	#IS_TASK
 0

47 
	#IS_SEM
 1

	)

48 
	#IS_RWL
 2

	)

49 
	#IS_SPL
 3

	)

50 
	#IS_MBX
 4

	)

51 
	#IS_PRX
 5

	)

52 
	#IS_BIT
 6

	)

53 
	#IS_TBX
 7

	)

54 
	#IS_HPCK
 8

	)

56 #ifde‡
__KERNEL__


58 
	~<πai.h
>

60 #ifde‡
__˝lu•lus


64 
is_¥o˚ss_ªgi°îed
(
èsk_°ru˘
 *
tsk
);

66 
π_ªgi°î
(
«m
,

67 *
adr
,

68 
typ
,

69 
èsk_°ru˘
 *
tsk
);

71 
π_drg_⁄_«me
(
«me
);

73 
π_drg_⁄_«me_˙t
(
«me
);

75 
π_drg_⁄_adr
(*
adr
);

77 
π_drg_⁄_adr_˙t
(*
adr
);

79 
RTAI_SYSCALL_MODE
 
π_gë_«me
(*
adr
);

81 
RTAI_SYSCALL_MODE
 *
π_gë_adr
(
«me
);

83 *
π_gë_adr_˙t
(
«me
);

85 
π_gë_ty≥
(
«me
);

87 #ifde‡
CONFIG_PROC_FS


88 
π_gë_ªgi°ry_¶Ÿ
(
¶Ÿ
, 
π_ªgi°ry_íåy
 *
íåy
);

91 #ifde‡
__˝lu•lus


97 
	#exi°
(
«me
Ë
	`π_gë_adr
(
	`«m2num
“ame))

	)

	@/usr/realtime/include/rtai_rwl.h

19 #i‚de‡
_RTAI_RWL_H


20 
	#_RTAI_RWL_H


	)

22 
	~<πai_£m.h
>

24 
	gπai_rwlock
;

26 #ifde‡
__KERNEL__


28 #i‚de‡
__˝lu•lus


30 
	sπai_rwlock
 {

31 
SEM
 
	mwrmtx
,

32 
	mwr£m
,

33 
	mrd£m
;

34 } 
	tRWL
;

40 
RTAI_SYSCALL_MODE
 
π_ty≥d_rwl_öô
(
RWL
 *
rwl
, 
ty≥
);

42 
	#π_rwl_öô
(
rwl
Ë
	`π_ty≥d_rwl_öô
‘wl, 
RESEM_RECURS
)

	)

44 
RTAI_SYSCALL_MODE
 
π_rwl_dñëe
(
πai_rwlock
 *
rwl
);

46 
RTAI_SYSCALL_MODE
 
RWL
 *
_π_«med_rwl_öô
(
rwl_«me
);

48 
RTAI_SYSCALL_MODE
 
π_«med_rwl_dñëe
(
RWL
 *
rwl
);

50 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock
(
πai_rwlock
 *
rwl
);

52 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_if
(
πai_rwlock
 *
rwl
);

54 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_u¡û
(
πai_rwlock
 *
rwl
, 
RTIME
 
time
);

56 
RTAI_SYSCALL_MODE
 
π_rwl_rdlock_timed
(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
);

58 
RTAI_SYSCALL_MODE
 
π_rwl_wæock
(
πai_rwlock
 *
rwl
);

60 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_if
(
πai_rwlock
 *
rwl
);

62 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_u¡û
(
πai_rwlock
 *
rwl
, 
RTIME
 
time
);

64 
RTAI_SYSCALL_MODE
 
π_rwl_wæock_timed
(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
);

66 
RTAI_SYSCALL_MODE
 
π_rwl_u∆ock
(
πai_rwlock
 *
rwl
);

68 #ifde‡
__˝lu•lus


74 #ifde‡
__˝lu•lus


78 
	#π_rwl_öô
(
rwl
Ë
	`π_ty≥d_rwl_öô
‘wl, 
RESEM_RECURS
)

	)

80 
RTAI_PROTO
(
πai_rwlock
 *, 
π_ty≥d_rwl_öô
,(
«me
, 
ty≥
))

82 °ru˘ { 
«me
; 
ty≥
; } 
¨g
 = {Çame,Åype };

83  (
πai_rwlock
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_INIT
, &
¨g
).
v
[
LOW
];

86 
RTAI_PROTO
(, 
π_rwl_dñëe
,(
πai_rwlock
 *
rwl
))

88 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

89  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_RWL_DELETE
, &
¨g
).
i
[
LOW
];

92 
RTAI_PROTO
(
πai_rwlock
 *, 
π_«med_rwl_öô
,(c⁄° *
«me
))

94 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(name) };

95  (
πai_rwlock
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_RWL_INIT
, &
¨g
).
v
[
LOW
];

98 
RTAI_PROTO
(, 
π_«med_rwl_dñëe
,(
πai_rwlock
 *
rwl
))

100 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

101  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_RWL_DELETE
, &
¨g
).
i
[
LOW
];

104 
RTAI_PROTO
(, 
π_rwl_rdlock
,(
πai_rwlock
 *
rwl
))

106 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

107  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK
, &
¨g
).
i
[
LOW
];

110 
RTAI_PROTO
(, 
π_rwl_rdlock_if
,(
πai_rwlock
 *
rwl
))

112 °ru˘ { *
rwl
; } 
¨g
 = {Ñwl };

113  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_IF
, &
¨g
).
i
[
LOW
];

116 
RTAI_PROTO
(, 
π_rwl_rdlock_u¡û
,(
πai_rwlock
 *
rwl
, 
RTIME
 
time
))

118 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
time
; } 
¨g
 = {Ñwl,Åime };

119  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_UNTIL
, &
¨g
).
i
[
LOW
];

122 
RTAI_PROTO
(, 
π_rwl_rdlock_timed
,(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
))

124 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
dñay
; } 
¨g
 = {Ñwl, delay };

125  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_RDLOCK_TIMED
, &
¨g
).
i
[
LOW
];

128 
RTAI_PROTO
(, 
π_rwl_wæock
,(
πai_rwlock
 *
rwl
))

130 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

131  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK
, &
¨g
).
i
[
LOW
];

134 
RTAI_PROTO
(, 
π_rwl_wæock_if
,(
πai_rwlock
 *
rwl
))

136 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

137  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_IF
, &
¨g
).
i
[
LOW
];

140 
RTAI_PROTO
(, 
π_rwl_wæock_u¡û
,(
πai_rwlock
 *
rwl
, 
RTIME
 
time
))

142 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
time
; } 
¨g
 = {Ñwl,Åime };

143  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_UNTIL
, &
¨g
).
i
[
LOW
];

146 
RTAI_PROTO
(, 
π_rwl_wæock_timed
,(
πai_rwlock
 *
rwl
, 
RTIME
 
dñay
))

148 °ru˘ { 
πai_rwlock
 *
rwl
; 
RTIME
 
dñay
; } 
¨g
 = {Ñwl, delay };

149  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_WRLOCK_TIMED
, &
¨g
).
i
[
LOW
];

152 
RTAI_PROTO
(, 
π_rwl_u∆ock
,(
πai_rwlock
 *
rwl
))

154 °ru˘ { 
πai_rwlock
 *
rwl
; } 
¨g
 = {Ñwl };

155  
πai_lxπ
(
BIDX
, 
SIZARG
, 
RWL_UNLOCK
, &
¨g
).
i
[
LOW
];

158 #ifde‡
__˝lu•lus


164 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

166 
	sπai_rwlock
 {

167 
›aque
;

168 } 
	tRWL
;

	@/usr/realtime/include/rtai_sanity.h

19 #i‚de‡
_RTAI_SANITY_H


20 
	#_RTAI_SANITY_H


	)

22 #i‡!–
__GNUC__
 =2 && 
__GNUC_MINOR__
 > 8 && __GNUC_MINOR__ < 96 ) && \

23 
	g__GNUC__
 > 4

24 #w¨nög: 
You
 
¨e
 
likñy
 
usög
 
™
 
unsuµ‹ãd
 
GCC
 
vîsi⁄
! \

25 
PÀa£
 
ªad
 
	gGCC
-
WARNINGS
 
	gˇªfuŒy
.

	@/usr/realtime/include/rtai_scb.h

40 #i‚de‡
_RTAI_SCB_H


41 
	#_RTAI_SCB_H


	)

43 
	~<πai_shm.h
>

44 
	~<asm/πai_©omic.h
>

46 
	#SCB
 ((*)(
scb
))

	)

47 
	#SIZE
 ((vﬁ©ûê*)
scb
)[-3]

	)

48 
	#FBYTE
 ((vﬁ©ûê*)
scb
)[-2]

	)

49 
	#LBYTE
 ((vﬁ©ûê*)
scb
)[-1]

	)

50 
	#HDRSIZ
 (3*())

	)

52 
	gèsk_°ru˘
;

54 #ifde‡
__KERNEL__


56 
	#RTAI_SCB_PROTO
(
ty≥
, 
«me
, 
¨gli°
Ë
ölöe
Åy≥Çamê
	)
arglist

60 
	#RTAI_SCB_PROTO
 
RTAI_PROTO


	)

105 
RTAI_SCB_PROTO
(*, 
π_scb_öô
, (
«me
, 
size
, 
su¥t
))

107 *
	gscb
;

108 i‡(
	gsu¥t
 > 1000) {

109 
	gsize
 -
HDRSIZ
 + 1;

110 
	gscb
 = (*)
su¥t
;

112 
	gscb
 = 
π_shm_Æloc
(
«me
, 
size
 + 
HDRSIZ
 + 1, 
su¥t
);

114 i‡(
	gscb
 && !
©omic_cmpxchg
((
©omic_t
 *)
scb
, 0, 
«me
)) {

115 ((*)
	gscb
)[1] = ((*)
scb
)[2] = 0;

116 ((*)
	gscb
)[0] = 
size
 + 1;

118 !((*)
	gscb
)[0]);

120  
	gscb
 ? scb + 
	gHDRSIZ
 : 0;

134 
RTAI_SCB_PROTO
(, 
π_scb_ª£t
, (*
scb
))

136 
	gLBYTE
 = 
FBYTE
 = 0;

162 
RTAI_SCB_PROTO
(, 
π_scb_dñëe
, (
«me
))

164  
π_shm_‰ì
(
«me
);

181 
RTAI_SCB_PROTO
 (, 
π_scb_avbs
, (*
scb
))

183 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

184  (
	glbyã
 >
fbyã
 ? 
lbyã
 - fbyã : 
size
 +Übyte - fbyte);

201 
RTAI_SCB_PROTO
 (, 
π_scb_byãs
, (*
scb
))

203  
π_scb_avbs
(
scb
);

220 
RTAI_SCB_PROTO
 (, 
π_scb_‰bs
, (*
scb
))

222 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

223  (
	gfbyã
 <
lbyã
 ? 
size
 + 
fbyã
 -Übyte : size -Übyte);

238 
RTAI_SCB_PROTO
(, 
π_scb_gë
, (*
scb
, *
msg
, 
msg_size
))

240 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

241 i‡(
	gmsg_size
 > 0 && ((
	glbyã
 -
fbyã
Ë>0 ? 
lbyã
 : 
size
 +ÜbyãË>
msg_size
) {

242 
to˝y
;

243 i‡((
	gto˝y
 = 
size
 - 
fbyã
Ë> 
msg_size
) {

244 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
msg_size
);

245 
	gFBYTE
 = 
fbyã
 + 
msg_size
;

247 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
to˝y
);

248 
mem˝y
(
msg
 + 
to˝y
, 
SCB
, 
msg_size
 -=Åocpy);

249 
	gFBYTE
 = 
msg_size
;

253  
	gmsg_size
;

268 
RTAI_SCB_PROTO
(, 
π_scb_evdΩ
, (*
scb
, *
msg
, 
msg_size
))

270 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

271 i‡(
	gmsg_size
 > 0 && ((
	glbyã
 -
fbyã
Ë>0 ? 
lbyã
 : 
size
 +ÜbyãË>
msg_size
) {

272 
to˝y
;

273 i‡((
	gto˝y
 = 
size
 - 
fbyã
Ë> 
msg_size
) {

274 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
msg_size
);

276 
mem˝y
(
msg
, 
SCB
 + 
fbyã
, 
to˝y
);

277 
mem˝y
(
msg
 + 
to˝y
, 
SCB
, 
msg_size
 -Åocpy);

281  
	gmsg_size
;

296 
RTAI_SCB_PROTO
(, 
π_scb_put
, (*
scb
, *
msg
, 
msg_size
))

298 
	gsize
 = 
SIZE
, 
	gfbyã
 = 
FBYTE
, 
	glbyã
 = 
LBYTE
;

299 i‡(
	gmsg_size
 > 0 && ((
	gfbyã
 -
lbyã
Ë<0 ? 
size
 + 
fbyã
 : fbyãË> 
msg_size
) {

300 
to˝y
;

301 i‡((
	gto˝y
 = 
size
 - 
lbyã
Ë> 
msg_size
) {

302 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
msg_size
);

303 
	gLBYTE
 = 
lbyã
 + 
msg_size
;

305 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
to˝y
);

306 
mem˝y
(
SCB
, 
msg
 + 
to˝y
, 
msg_size
 -=Åocpy);

307 
	gLBYTE
 = 
msg_size
;

311  
	gmsg_size
;

314 
RTAI_SCB_PROTO
(, 
π_scb_ovrwr
, (*
scb
, *
msg
, 
msg_size
))

316 
	gsize
 = 
SIZE
, 
	glbyã
 = 
LBYTE
;

317 i‡(
	gmsg_size
 > 0 && msg_sizê< 
	gsize
) {

318 
	gto˝y
;

319 i‡((
	gto˝y
 = 
size
 - 
lbyã
Ë> 
msg_size
) {

320 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
msg_size
);

321 
	gLBYTE
 = 
lbyã
 + 
msg_size
;

323 
mem˝y
(
SCB
 + 
lbyã
, 
msg
, 
to˝y
);

324 
mem˝y
(
SCB
, 
msg
 + 
to˝y
, 
msg_size
 -=Åocpy);

325 
	gLBYTE
 = 
msg_size
;

329  
	gmsg_size
;

	@/usr/realtime/include/rtai_sched.h

19 #i‚de‡
_RTAI_SCHED_H


20 
	#_RTAI_SCHED_H


	)

22 
	~<πai.h
>

23 #i‚de‡
__KERNEL__


24 
	~<sys/time.h
>

25 
	~<time.h
>

26 
	~<î∫o.h
>

27 
	~<πai_ty≥s.h
>

30 
	#RT_SCHED_UP
 1

	)

31 
	#RT_SCHED_SMP
 2

	)

32 
	#RT_SCHED_MUP
 3

	)

34 
	#RT_SCHED_HIGHEST_PRIORITY
 0

	)

35 
	#RT_SCHED_LOWEST_PRIORITY
 0x3fffFfff

	)

36 
	#RT_SCHED_LINUX_PRIORITY
 0x7fffFfff

	)

38 
	#RT_RESEM_SUSPDEL
 (-0x7fffFfff)

	)

40 
	#RT_SCHED_READY
 1

	)

41 
	#RT_SCHED_SUSPENDED
 2

	)

42 
	#RT_SCHED_DELAYED
 4

	)

43 
	#RT_SCHED_SEMAPHORE
 8

	)

44 
	#RT_SCHED_SEND
 16

	)

45 
	#RT_SCHED_RECEIVE
 32

	)

46 
	#RT_SCHED_RPC
 64

	)

47 
	#RT_SCHED_RETURN
 128

	)

48 
	#RT_SCHED_MBXSUSP
 256

	)

49 
	#RT_SCHED_SFTRDY
 512

	)

50 
	#RT_SCHED_POLL
 1024

	)

51 
	#RT_SCHED_SIGSUSP
 (1 << 15)

	)

53 
	#RT_RWLINV
 (11)

54 
	#RT_CHGPORTERR
 (10)

	)

55 
	#RT_CHGPORTOK
 (9)

	)

56 
	#RT_NETIMOUT
 (8)

	)

57 
	#RT_DEADLOK
 (7)

	)

58 
	#RT_PERM
 (6)

	)

59 
	#RT_OBJINV
 (5)

	)

60 
	#RT_OBJREM
 (4)

	)

61 
	#RT_TIMOUT
 (3)

	)

62 
	#RT_UNBLKD
 (2)

	)

63 
	#RT_TMROVRN
 (1)

64 
	#RTP_RWLINV
 ((*)
RT_RWLINV
)

	)

65 
	#RTP_CHGPORTERR
 ((*)
RT_CHGPORTERR
)

	)

66 
	#RTP_CHGPORTOK
 ((*)
RT_CHGPORTOK
)

	)

67 
	#RTP_NETIMOUT
 ((*)
RT_NETIMOUT
)

	)

68 
	#RTP_DEADLOK
 ((*)
RT_DEADLOK
)

	)

69 
	#RTP_PERM
 ((*)
RT_PERM
)

	)

70 
	#RTP_OBJINV
 ((*)
RT_OBJINV
)

	)

71 
	#RTP_OBJREM
 ((*)
RT_OBJREM
)

	)

72 
	#RTP_TIMOUT
 ((*)
RT_TIMOUT
)

	)

73 
	#RTP_UNBLKD
 ((*)
RT_UNBLKD
)

	)

74 
	#RTP_TMROVRN
 ((*)
RT_TMROVRN
)

	)

75 
	#RTP_HIGERR
 (
RTP_RWLINV
)

	)

76 
	#RTP_LOWERR
 (
RTP_TMROVRN
)

	)

77 #i‡
CONFIG_RTAI_USE_NEWERR


78 
	#RTE_BASE
 (0x3FFFFF00)

	)

79 
	#RTE_RWLINV
 (
RTE_BASE
 + 
RT_RWLINV
)

	)

80 
	#RTE_CHGPORTERR
 (
RTE_BASE
 + 
RT_CHGPORTERR
)

	)

81 
	#RTE_CHGPORTOK
 (
RTE_BASE
 + 
RT_CHGPORTOK
)

	)

82 
	#RTE_NETIMOUT
 (
RTE_BASE
 + 
RT_NETIMOUT
)

	)

83 
	#RTE_DEADLOK
 (
RTE_BASE
 + 
RT_DEADLOK
)

	)

84 
	#RTE_PERM
 (
RTE_BASE
 + 
RT_PERM
)

	)

85 
	#RTE_OBJINV
 (
RTE_BASE
 + 
RT_OBJINV
)

	)

86 
	#RTE_OBJREM
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

87 
	#RTE_TIMOUT
 (
RTE_BASE
 + 
RT_TIMOUT
)

	)

88 
	#RTE_UNBLKD
 (
RTE_BASE
 + 
RT_UNBLKD
)

	)

89 
	#RTE_TMROVRN
 (
RTE_BASE
 + 
RT_TMROVRN
)

	)

90 
	#RTE_HIGERR
 (
RTE_RWLINV
)

	)

91 
	#RTE_LOWERR
 (
RTE_TMROVRN
)

	)

93 
	#RTE_BASE
 (0xFFFB)

	)

94 
	#RTE_RWLINV
 (
RTE_BASE
 + 
RT_RWLINV
)

	)

95 
	#RTE_CHGPORTERR
 (
RTE_BASE
 + 
RT_CHGPORTERR
)

	)

96 
	#RTE_CHGPORTOK
 (
RTE_BASE
 + 
RT_CHGPORTOK
)

	)

97 
	#RTE_NETIMOUT
 (
RTE_BASE
 + 
RT_NETIMOUT
)

	)

98 
	#RTE_DEADLOK
 (
RTE_BASE
 + 
RT_DEADLOK
)

	)

99 
	#RTE_PERM
 (
RTE_BASE
 + 
RT_PERM
)

	)

100 
	#RTE_OBJINV
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

101 
	#RTE_OBJREM
 (
RTE_BASE
 + 
RT_OBJREM
)

	)

102 
	#RTE_TIMOUT
 (
RTE_BASE
 + 
RT_TIMOUT
)

	)

103 
	#RTE_UNBLKD
 (
RTE_BASE
 + 
RT_UNBLKD
)

	)

104 
	#RTE_TMROVRN
 (
RTE_BASE
 + 
RT_TMROVRN
)

	)

105 
	#RTE_HIGERR
 (
RTE_RWLINV
)

	)

106 
	#RTE_LOWERR
 (
RTE_TMROVRN
)

	)

109 
	#RT_EINTR
 (
RTE_UNBLKD
)

	)

111 
	#π_is_ªãº
(
i
Ë(ò>
RTE_LOWERR
)

	)

113 
	#RT_IRQ_TASK
 0

	)

114 
	#RT_IRQ_TASKLET
 1

	)

115 
	#RT_IRQ_TASK_ERR
 0x7FFFFFFF

	)

117 
	gπ_èsk_°ru˘
;

119 
	sπ_èsk_öfo
 {

120 
RTIME
 
	m≥riod
; 
	mba£_¥i‹ôy
, 
	m¥i‹ôy
;

121 } 
	tRT_TASK_INFO
;

123 #ifde‡
__KERNEL__


125 
	~<löux/time.h
>

126 
	~<löux/î∫o.h
>

128 #i‡
deföed
(
CONFIG_RTAI_LONG_TIMED_LIST
Ë&& 
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,0)

129 
	~<löux/rbåì.h
>

130 
rb_node
 
	trb_node_t
;

131 
rb_roŸ
 
	trb_roŸ_t
;

134 
	#RT_TASK_MAGIC
 0x9ad25f6f

135 

	)

136 #i‚de‡
__˝lu•lus


138 
	~<löux/sched.h
>

140 
	sπ_queue
 {

141 
π_queue
 *
	m¥ev
;

142 
π_queue
 *
	m√xt
;

143 
π_èsk_°ru˘
 *
	mèsk
;

144 } 
	tQUEUE
;

146 
	smcb_t
 {

147 *
	msbuf
;

148 
	msbyãs
;

149 *
	mrbuf
;

150 
	mrbyãs
;

154 
	sπ_ExôH™dÀr
 {

155 
π_ExôH™dÀr
 *
	mnxt
;

156 (*
	mfun
Ë(*
	m¨g1
, 
	m¨g2
);

157 *
	m¨g1
;

158 
	m¨g2
;

159 } 
	tXHDL
;

161 
	sπ_hóp_t
 { *
	mhóp
, *
	mkadr
, *
	muadr
; };

163 
	#RTAI_MAX_NAME_LENGTH
 32

	)

165 
	sπ_èsk_°ru˘
 {

166 *
°ack
 
__©åibuã__
 ((
__Æig√d__
 (
L1_CACHE_BYTES
)));

167 
	mu£s_Âu
;

168 
	mmagic
;

169 vﬁ©ûê
	m°©e
, 
	mru¬ög
;

170 
	mru¬abÀ_⁄_˝us
;

171 *
	m°ack_bŸtom
;

172 vﬁ©ûê
	m¥i‹ôy
;

173 
	mba£_¥i‹ôy
;

174 
	mpﬁicy
;

175 
	msched_lock_¥i‹ôy
;

176 
π_èsk_°ru˘
 *
	m¥io_∑s£d_to
;

177 
RTIME
 
	m≥riod
;

178 
RTIME
 
	mªsume_time
;

179 
RTIME
 
	m≥riodic_ªsume_time
;

180 
RTIME
 
	myõld_time
;

181 
	mº_qu™tum
, 
	mº_ªmaöög
;

182 
	msu•dïth
;

183 
π_queue
 
	mqueue
;

184 
	mowndªs
;

185 
π_queue
 *
	mblocked_⁄
;

186 
π_queue
 
	mmsg_queue
;

187 
	mtid
;

188 
	mmsg
;

189 
π_queue
 
	mªt_queue
;

190 (*
	msig«l
)();

191 
FPU_ENV
 
Âu_ªg
 
__©åibuã__
 ((
__Æig√d__
 (
L1_CACHE_BYTES
)));

192 
π_èsk_°ru˘
 *
	m¥ev
, *
	m√xt
;

193 
π_èsk_°ru˘
 *
	mçªv
, *
	mäext
;

194 
π_èsk_°ru˘
 *
	mΩªv
, *
	m∫ext
;

197 *
	mfun_¨gs
;

198 *
	mb°ack
;

199 
èsk_°ru˘
 *
	m xtsk
;

200 
	mªtvÆ
;

201 *
	mmsg_buf
[2];

202 
	mmax_msg_size
[2];

203 
	mèsk_«me
[
RTAI_MAX_NAME_LENGTH
];

204 *
	msy°em_d©a_±r
;

205 
π_èsk_°ru˘
 *
	m√xç
, *
	m¥evp
;

207 
RT_TRAP_HANDLER
 
	mèsk_å≠_h™dÀr
[
HAL_NR_FAULTS
];

209 
	munblocked
;

210 *
	mπ_sig«ls
;

211 vﬁ©ûê
	mp°©e
;

212 
	mu•_Êags
;

213 
	mu•_Êags_mask
;

214 
	mf‹˚_so·
;

215 vﬁ©ûê
	mis_h¨d
;

216 
	mkî∫o
;

218 
	mbusy_time_Æign
;

219 *
	mlöux_sysˇŒ_£rvî
;

222 
	mªsync_‰ame
;

225 
XHDL
 *
	mExôHook
;

227 
RTIME
 
	mexe˘ime
[2];

228 
mcb_t
 
	mmcb
;

231 
π_hóp_t
 
	mhóp
[2];

233 vﬁ©ûê
	mscheduÀr
;

235 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


236 
rb_roŸ_t
 
	mrbr
;

237 
rb_node_t
 
	mrbn
;

239 
π_queue
 
	mªsq
;

240 
	mªsumsg
;

241 } 
	tRT_TASK
 
	t__©åibuã__
 ((
	t__Æig√d__
 (
	tL1_CACHE_BYTES
)));

247 
π_èsk_öô
(
π_èsk_°ru˘
 *
èsk
,

248 (*
π_thªad
)(),

249 
d©a
,

250 
°ack_size
,

251 
¥i‹ôy
,

252 
u£s_Âu
,

253 (*
sig«l
)());

255 
π_èsk_öô_˝uid
(
π_èsk_°ru˘
 *
èsk
,

256 (*
π_thªad
)(),

257 
d©a
,

258 
°ack_size
,

259 
¥i‹ôy
,

260 
u£s_Âu
,

261 (*
sig«l
)(),

262 
run_⁄_˝u
);

264 
π_kthªad_öô
(
π_èsk_°ru˘
 *
èsk
,

265 (*
π_thªad
)(),

266 
d©a
,

267 
°ack_size
,

268 
¥i‹ôy
,

269 
u£s_Âu
,

270 (*
sig«l
)());

272 
π_kthªad_öô_˝uid
(
π_èsk_°ru˘
 *
èsk
,

273 (*
π_thªad
)(),

274 
d©a
,

275 
°ack_size
,

276 
¥i‹ôy
,

277 
u£s_Âu
,

278 (*
sig«l
)(),

279 
run_⁄_˝u
);

281 
RTAI_SYSCALL_MODE
 
π_£t_ru¬abÀ_⁄_˝us
(
π_èsk_°ru˘
 *
èsk
,

282 
˝u_mask
);

284 
RTAI_SYSCALL_MODE
 
π_£t_ru¬abÀ_⁄_˝uid
(
π_èsk_°ru˘
 *
èsk
,

285 
˝uid
);

287 
RTAI_SYSCALL_MODE
 
π_£t_sched_pﬁicy
(
π_èsk_°ru˘
 *
èsk
,

288 
pﬁicy
,

289 
º_qu™tum_ns
);

291 
π_èsk_dñëe
(
π_èsk_°ru˘
 *
èsk
);

293 
π_gë_èsk_°©e
(
π_èsk_°ru˘
 *
èsk
);

295 
π_gëtime‹ig
(
RTIME
 
time_‹ig
[]);

297 
π_gë_timî_˝u
();

299 
π_is_h¨d_timî_ru¬ög
();

301 
π_£t_≥riodic_mode
();

303 
π_£t_⁄eshŸ_mode
();

305 
RTAI_SYSCALL_MODE
 
RTIME
 
°¨t_π_timî
(
≥riod
);

307 
	#°¨t_π_timî_ns
(
≥riod
Ë
	`°¨t_π_timî
(
	`«no2cou¡
(’îiod)))

	)

309 
RTAI_SYSCALL_MODE
 
°¨t_π_≠ic_timîs
(
≠ic_timî_£tup_d©a
 *
£tup_mode
,

310 
rcvr_jiffõs_˝uid
);

312 
°›_π_timî
();

314 
π_èsk_°ru˘
 *
π_whﬂmi
();

316 
π_sched_ty≥
();

318 
RTAI_SYSCALL_MODE
 
π_èsk_sig«l_h™dÀr
(
π_èsk_°ru˘
 *
èsk
,

319 (*
h™dÀr
)());

321 
RTAI_SYSCALL_MODE
 
π_èsk_u£_Âu
(
π_èsk_°ru˘
 *
èsk
,

322 
u£_Âu_Êag
);

324 
π_löux_u£_Âu
(
u£_Âu_Êag
);

326 
RTAI_SYSCALL_MODE
 
π_h¨d_timî_tick_cou¡
();

328 
RTAI_SYSCALL_MODE
 
π_h¨d_timî_tick_cou¡_˝uid
(
˝uid
);

330 
RTAI_SYSCALL_MODE
 
RTIME
 
cou¡2«no
(RTIME 
timîcou¡s
);

332 
RTAI_SYSCALL_MODE
 
RTIME
 
«no2cou¡
(RTIME 
«no£cs
);

334 
RTAI_SYSCALL_MODE
 
RTIME
 
cou¡2«no_˝uid
(RTIME 
timîcou¡s
, 
˝uid
);

336 
RTAI_SYSCALL_MODE
 
RTIME
 
«no2cou¡_˝uid
(RTIME 
«no£cs
, 
˝uid
);

338 
RTIME
 
π_gë_time
();

340 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_time_˝uid
(
˝uid
);

342 
RTIME
 
π_gë_time_ns
();

344 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_time_ns_˝uid
(
˝uid
);

346 
RTIME
 
π_gë_˝u_time_ns
();

348 
RTIME
 
π_gë_ªÆ_time
();

350 
RTIME
 
π_gë_ªÆ_time_ns
();

352 
π_gë_¥io
(
π_èsk_°ru˘
 *
èsk
);

354 
π_gë_öhî_¥io
(
π_èsk_°ru˘
 *
èsk
);

356 
RTAI_SYSCALL_MODE
 
π_èsk_gë_öfo
(
RT_TASK
 *
èsk
, 
RT_TASK_INFO
 *
èsk_öfo
);

358 
RTAI_SYSCALL_MODE
 
π_gë_¥i‹ôõs
(
π_èsk_°ru˘
 *
èsk
, *
¥i‹ôy
, *
ba£_¥i‹ôy
);

360 
RTAI_SYSCALL_MODE
 
π_•v_RMS
(
˝uid
);

362 
RTAI_SYSCALL_MODE
 
π_ch™ge_¥io
(
π_èsk_°ru˘
 *
èsk
,

363 
¥i‹ôy
);

365 
π_sched_lock
();

367 
π_sched_u∆ock
();

369 
π_èsk_yõld
();

371 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd
(
π_èsk_°ru˘
 *
èsk
);

373 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_if
(
π_èsk_°ru˘
 *
èsk
);

375 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_u¡û
(
π_èsk_°ru˘
 *
èsk
, 
RTIME
 
u¡û
);

377 
RTAI_SYSCALL_MODE
 
π_èsk_su•íd_timed
(
π_èsk_°ru˘
 *
èsk
, 
RTIME
 
dñay
);

379 
RTAI_SYSCALL_MODE
 
π_èsk_ªsume
(
π_èsk_°ru˘
 *
èsk
);

381 
RTAI_SYSCALL_MODE
 
π_£t_löux_sysˇŒ_mode
(
sync_async
, (*
ˇŒback_fun
)(, ));

383 
löux_sysˇŒs_li°
;

384 
π_exec_löux_sysˇŒ
(
RT_TASK
 *
π_cuºít
, 
löux_sysˇŒs_li°
 *
sysˇŒs
, 
±_ªgs
 *
ªgs
);

386 
RTAI_SYSCALL_MODE
 
π_ªtu∫_löux_sysˇŒ
(
RT_TASK
 *
èsk
, 
ªtvÆ
);

388 
RTAI_SYSCALL_MODE
 
π_úq_waô
(
úq
);

390 
RTAI_SYSCALL_MODE
 
π_úq_waô_if
(
úq
);

392 
RTAI_SYSCALL_MODE
 
π_úq_waô_u¡û
(
úq
, 
RTIME
 
u¡û
);

394 
RTAI_SYSCALL_MODE
 
π_úq_waô_timed
(
úq
, 
RTIME
 
dñay
);

396 
RTAI_SYSCALL_MODE
 
π_úq_sig«l
(
úq
);

398 
RTAI_SYSCALL_MODE
 
π_ªque°_úq_èsk
 (
úq
, *
h™dÀr
, 
ty≥
, 
afföe2èsk
);

400 
RTAI_SYSCALL_MODE
 
π_ªÀa£_úq_èsk
 (
úq
);

402 
RTAI_SYSCALL_MODE
 
π_èsk_make_≥riodic_ªœtive_ns
(
π_èsk_°ru˘
 *
èsk
,

403 
RTIME
 
°¨t_dñay
,

404 
RTIME
 
≥riod
);

406 
RTAI_SYSCALL_MODE
 
π_èsk_make_≥riodic
(
π_èsk_°ru˘
 *
èsk
,

407 
RTIME
 
°¨t_time
,

408 
RTIME
 
≥riod
);

410 
RTAI_SYSCALL_MODE
 
π_èsk_£t_ªsume_íd_times
(
RTIME
 
ªsume
,

411 
RTIME
 
íd
);

413 
RTAI_SYSCALL_MODE
 
π_£t_ªsume_time
(
π_èsk_°ru˘
 *
èsk
,

414 
RTIME
 
√w_ªsume_time
);

416 
RTAI_SYSCALL_MODE
 
π_£t_≥riod
(
π_èsk_°ru˘
 *
èsk
,

417 
RTIME
 
√w_≥riod
);

419 
π_èsk_waô_≥riod
();

421 
π_scheduÀ
();

423 
RTIME
 
√xt_≥riod
();

425 
RTAI_SYSCALL_MODE
 
π_busy_¶ìp
(
«no£cs
);

427 
RTAI_SYSCALL_MODE
 
π_¶ìp
(
RTIME
 
dñay
);

429 
RTAI_SYSCALL_MODE
 
π_¶ìp_u¡û
(
RTIME
 
time
);

431 
RTAI_SYSCALL_MODE
 
π_èsk_masked_unblock
(
π_èsk_°ru˘
 *
èsk
, 
mask
);

433 
	#π_èsk_wakeup_¶ìpög
(
t
Ë
	`π_èsk_masked_unblock
—, 
RT_SCHED_DELAYED
)

	)

435 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_«med_èsk_öô
(c⁄° *
èsk_«me
,

436 (*
thªad
)(),

437 
d©a
,

438 
°ack_size
,

439 
¥io
,

440 
u£s_Âu
,

441 (*
sig«l
)());

443 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_«med_èsk_öô_˝uid
(c⁄° *
èsk_«me
,

444 (*
thªad
)(),

445 
d©a
,

446 
°ack_size
,

447 
¥io
,

448 
u£s_Âu
,

449 (*
sig«l
)(),

450 
run_⁄_˝u
);

452 
RTAI_SYSCALL_MODE
 
π_«med_èsk_dñëe
(
π_èsk_°ru˘
 *
èsk
);

454 
RT_TRAP_HANDLER
 
π_£t_èsk_å≠_h™dÀr
(
π_èsk_°ru˘
 *
èsk
,

455 
vec
,

456 
RT_TRAP_HANDLER
 
h™dÀr
);

458 
ölöe
 
RTIME
 
timevÆ2cou¡
(
timevÆ
 *
t
)

460  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_u£c
*1000);

463 
ölöe
 
cou¡2timevÆ
(
RTIME
 
π
, 
timevÆ
 *
t
)

465 
t
->
tv_£c
 = 
πai_uŒdiv
(
cou¡2«no
(
π
), 1000000000, (*)&t->
tv_u£c
);

466 
t
->
tv_u£c
 /= 1000;

469 
ölöe
 
RTIME
 
time•ec2cou¡
(c⁄° 
time•ec
 *
t
)

471  
«no2cou¡
(
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
);

474 
ölöe
 
cou¡2time•ec
(
RTIME
 
π
, 
time•ec
 *
t
)

476 
t
->
tv_£c
 = 
πai_uŒdiv
(
cou¡2«no
(
π
), 1000000000, (*)&t->
tv_n£c
);

479 
ölöe
 
RTIME
 
time•ec2«nos
(c⁄° 
time•ec
 *
t
)

481  
t
->
tv_£c
*1000000000LL +Å->
tv_n£c
;

484 
ölöe
 
«nos2time•ec
(
RTIME
 
π
, 
time•ec
 *
t
)

486 
t
->
tv_£c
 = 
πai_uŒdiv
(
π
, 1000000000, (*)&t->
tv_n£c
);

489 
π_make_h¨d_ªÆ_time
(
RT_TASK
 *
èsk
);

491 
π_make_so·_ªÆ_time
(
RT_TASK
 *
èsk
);

493 #ifde‡
__˝lu•lus


499 
RT_TASK
 *
π_gë_ba£_löux_èsk
(RT_TASK **
ba£_löux_èsk
);

501 
RT_TASK
 *
π_Æloc_dy«mic_èsk
();

503 
π_íq_ªady_edf_èsk
(
RT_TASK
 *
ªady_èsk
);

505 
π_íq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
);

507 
π_ªnq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
,

508 
¥i‹ôy
);

510 
π_ªm_ªady_èsk
(
RT_TASK
 *
èsk
);

512 
π_ªm_ªady_cuºít
(
RT_TASK
 *
π_cuºít
);

514 
π_íq_timed_èsk
(
RT_TASK
 *
timed_èsk
);

516 
π_ªm_timed_èsk
(
RT_TASK
 *
èsk
);

518 
π_dequeue_blocked
(
RT_TASK
 *
èsk
);

520 
RT_TASK
 **
π_ªgi°î_w©chdog
(RT_TASK *
wdog
,

521 
˝uid
);

523 
π_dîegi°î_w©chdog
(
RT_TASK
 *
wdog
,

524 
˝uid
);

530 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

532 
	sπ_èsk_°ru˘
 {

533 
›aque
;

534 } 
	tRT_TASK
;

536 
	sQueueBlock
 {

537 
›aque
;

538 } 
	tQBLK
;

540 
	sQueueHook
 {

541 
›aque
;

542 } 
	tQHOOK
;

	@/usr/realtime/include/rtai_schedcore.h

20 #i‚de‡
_RTAI_SCHEDCORE_H


21 
	#_RTAI_SCHEDCORE_H


	)

23 #ifde‡
__KERNEL__


25 
	~<löux/moduÀ.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/kî√l.h
>

28 
	~<löux/vîsi⁄.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/timex.h
>

32 
	~<löux/sched.h
>

33 
	~<asm/∑øm.h
>

34 
	~<asm/io.h
>

35 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,18)

36 
	~<löux/oom.h
>

39 
	~<πai_vîsi⁄.h
>

40 
	~<πai_lxπ.h
>

41 
	~<πai_sched.h
>

42 
	~<πai_mÆloc.h
>

43 
	~<πai_åa˚.h
>

44 
	~<πai_Àds.h
>

45 
	~<πai_£m.h
>

46 
	~<πai_rwl.h
>

47 
	~<πai_•l.h
>

48 
	~<πai_scb.h
>

49 
	~<πai_mbx.h
>

50 
	~<πai_msg.h
>

51 
	~<πai_tbx.h
>

52 
	~<πai_mq.h
>

53 
	~<πai_bôs.h
>

54 
	~<πai_wd.h
>

55 
	~<πai_èskÀts.h
>

56 
	~<πai_fifos.h
>

57 
	~<πai_√åpc.h
>

58 
	~<πai_shm.h
>

59 
	~<πai_usi.h
>

62 #ifde‡
OOM_DISABLE


63 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,32)

64 
	#RTAI_OOM_DISABLE
() \

65 dÿ{ 
cuºít
->
oomkûœdj
 = 
OOM_DISABLE
; } 0)

	)

67 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,8,0)

68 
	#RTAI_OOM_DISABLE
() \

69 dÿ{ 
cuºít
->
sig«l
->
oom_adj
 = 
OOM_DISABLE
; } 0)

	)

71 
	#RTAI_OOM_DISABLE
() \

72 dÿ{ 
cuºít
->
sig«l
->
oom_sc‹e_adj
 = 
OOM_DISABLE
; } 0)

	)

76 
	#RTAI_OOM_DISABLE
()

	)

79 
	#NON_RTAI_TASK_SUSPEND
(
èsk
) \

80 dÿ{ (
èsk
->
 xtsk
)->
°©e
 = 
TASK_SOFTREALTIME
; } 0)

	)

82 
	#NON_RTAI_TASK_RESUME
(
ªady_èsk
) \

83 dÿ{ 
	`≥nd_wake_up_§q
(
ªady_èsk
->
 xtsk
, 
	`πai_˝uid
()); } 0)

	)

85 
	#REQUEST_RESUME_SRQs_STUFF
() \

87 i‡(!(
wake_up_§q
[0].
§q
 = 
	`hÆ_Æloc_úq
())) { \

88 
	`¥ötk
("*** ABORT, NO VIRQ AVAILABLE FOR THE WAKING UP SRQ. ***\n"); \

91 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
wake_up_§q
[0].
§q
, 
wake_up_§q_h™dÀr
, 
NULL
, 
IPIPE_HANDLE_FLAG
); \

92 } 0)

	)

94 
	#RELEASE_RESUME_SRQs_STUFF
() \

96 
	`hÆ_vútuÆize_úq
(
hÆ_roŸ_domaö
, 
wake_up_§q
[0].
§q
, 
NULL
, NULL, 0); \

97 
	`hÆ_‰ì_úq
(
wake_up_§q
[0].
§q
); \

98 } 0)

	)

100 
RT_TASK
 
π_smp_löux_èsk
[];

102 
RT_TASK
 *
π_smp_cuºít
[];

104 
RTIME
 
π_smp_time_h
[];

106 
π_smp_⁄eshŸ_timî
[];

108 vﬁ©ûê
π_sched_timed
;

110 #ifde‡
CONFIG_RTAI_MALLOC


111 #ifde‡
CONFIG_RTAI_MALLOC_BUILTIN


112 
	#sched_mem_öô
() \

113 { if(
	`__πai_hóp_öô
() != 0) { \

114 (-
ENOMEM
); \

115 } }

	)

116 
	#sched_mem_íd
(Ë
	`__πai_hóp_exô
()

	)

118 
	#sched_mem_öô
()

	)

119 
	#sched_mem_íd
()

	)

121 
	#ˇŒ_exô_h™dÀrs
(
èsk
Ë
	`__ˇŒ_exô_h™dÀrs
—ask)

	)

122 
	#£t_exô_h™dÀr
(
èsk
, 
fun
, 
¨g1
, 
¨g2
Ë
	`__£t_exô_h™dÀr
—ask, fun,árg1,árg2)

	)

124 
	#sched_mem_öô
()

	)

125 
	#sched_mem_íd
()

	)

126 
	#ˇŒ_exô_h™dÀrs
(
èsk
)

	)

127 
	#£t_exô_h™dÀr
(
èsk
, 
fun
, 
¨g1
, 
¨g2
)

	)

130 
	#SEMHLF
 0x0000FFFF

	)

131 
	#RPCHLF
 0xFFFF0000

	)

132 
	#RPCINC
 0x00010000

	)

134 
	#DECLARE_RT_CURRENT
 
˝uid
; 
RT_TASK
 *
π_cuºít


	)

135 
	#ASSIGN_RT_CURRENT
 
π_cuºít
 = 
π_smp_cuºít
[
˝uid
 = 
	`πai_˝uid
()]

	)

136 
	#RT_CURRENT
 
π_smp_cuºít
[
	`πai_˝uid
()]

	)

138 
	#MAX_LINUX_RTPRIO
 99

	)

139 
	#MIN_LINUX_RTPRIO
 1

	)

141 #ifde‡
CONFIG_RTAI_SCHED_ISR_LOCK


142 
πai_h™dÀ_isched_lock
(
√°ög
);

145 #ifde‡
CONFIG_SMP


146 
	#π_time_h
 (
π_smp_time_h
[
˝uid
])

	)

147 
	#⁄eshŸ_timî
 (
π_smp_⁄eshŸ_timî
[
˝uid
])

	)

148 
	#π_löux_èsk
 (
π_smp_löux_èsk
[
˝uid
])

	)

150 
	#π_time_h
 (
π_smp_time_h
[0])

	)

151 
	#⁄eshŸ_timî
 (
π_smp_⁄eshŸ_timî
[0])

	)

152 
	#π_löux_èsk
 (
π_smp_löux_èsk
[0])

	)

160 
	#RTAI_MAX_FUN_ARGS
 9

	)

161 
	sfun_¨gs
 { 
	ma
[
RTAI_MAX_FUN_ARGS
]; 
RTAI_SYSCALL_MODE
 (*
	mfun
)(, ...); };

163 
	#RTAI_FUN_ARGS
 
¨g
[0],¨g[1],¨g[2],¨g[3],¨g[4],¨g[5],¨g[6],¨g[7],¨g[
RTAI_MAX_FUN_ARGS
 - 1]

	)

165 
	#RTAI_FUNARGS
 
fu«rg
->
a
[0],fu«rg->a[1],fu«rg->a[2],fu«rg->a[3],fu«rg->a[4],fu«rg->a[5],fu«rg->a[6],fu«rg->a[7],fu«rg->a[
RTAI_MAX_FUN_ARGS
 - 1]

	)

167 
	#RTAI_FUN_A
 
a
[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[
RTAI_MAX_FUN_ARGS
 - 1]

	)

169 #ifde‡
CONFIG_SMP


171 
ölöe
 
	$£nd_sched_ùi
(
de°
)

173 
	`_£nd_sched_ùi
(
de°
);

174 
	}
}

176 
	#RT_SCHEDULE_MAP
(
schedm≠
) \

177 dÿ{ i‡(
schedm≠
Ë
	`£nd_sched_ùi
(schedm≠); } 0)

	)

179 
	#RT_SCHEDULE_MAP_BOTH
(
schedm≠
) \

180 dÿ{ i‡(
schedm≠
Ë
	`£nd_sched_ùi
(schedm≠); 
	`π_scheduÀ
(); } 0)

	)

182 
	#RT_SCHEDULE
(
èsk
, 
˝uid
) \

184 i‡((
èsk
)->
ru¬abÀ_⁄_˝us
 !(
˝uid
)) { \

185 
	`£nd_sched_ùi
(1 << (
èsk
)->
ru¬abÀ_⁄_˝us
); \

187 
	`π_scheduÀ
(); \

189 } 0)

	)

191 
	#RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
) \

193 i‡((
èsk
)->
ru¬abÀ_⁄_˝us
 !(
˝uid
)) { \

194 
	`£nd_sched_ùi
(1 << (
èsk
)->
ru¬abÀ_⁄_˝us
); \

196 
	`π_scheduÀ
(); \

197 }

	)

201 
	#£nd_sched_ùi
(
de°
)

	)

203 
	#RT_SCHEDULE_MAP_BOTH
(
schedm≠
Ë
	`π_scheduÀ
()

	)

205 
	#RT_SCHEDULE_MAP
(
schedm≠
Ë
	`π_scheduÀ
()

	)

207 
	#RT_SCHEDULE
(
èsk
, 
˝uid
Ë
	`π_scheduÀ
()

	)

209 
	#RT_SCHEDULE_BOTH
(
èsk
, 
˝uid
Ë
	`π_scheduÀ
()

	)

213 
	#BASE_SOFT_PRIORITY
 1000000000

	)

215 #i‚de‡
TASK_NOWAKEUP


216 
	#TASK_NOWAKEUP
 
TASK_UNINTERRUPTIBLE


	)

219 
	#TASK_HARDREALTIME
 (
TASK_INTERRUPTIBLE
 | 
TASK_NOWAKEUP
)

	)

220 
	#TASK_RTAISRVSLEEP
 (
TASK_INTERRUPTIBLE
 | 
TASK_NOWAKEUP
)

	)

221 
	#TASK_SOFTREALTIME
 
TASK_INTERRUPTIBLE


	)

223 
ölöe
 
	$íq_ªady_edf_èsk
(
RT_TASK
 *
ªady_èsk
)

225 
RT_TASK
 *
èsk
;

226 #ifde‡
CONFIG_SMP


227 
èsk
 = 
π_smp_löux_èsk
[
ªady_èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
;

229 
èsk
 = 
π_smp_löux_èsk
[0].
∫ext
;

231 
èsk
->
pﬁicy
 < 0 && 
ªady_èsk
->
≥riod
 >=Åask->period) {

232 
èsk
 =Åask->
∫ext
;

234 
èsk
->
Ωªv
 = (
ªady_èsk
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñeady_task;

235 
ªady_èsk
->
∫ext
 = 
èsk
;

236 
	}
}

238 
	sïoch_°ru˘
 { 
•ölock_t
 
	mlock
; vﬁ©ûê
	mtou£
; vﬁ©ûê
RTIME
 
	mtime
[2][2]; };

240 #ifde‡
CONFIG_RTAI_CLOCK_REALTIME


241 
	#REALTIME2COUNT
(
πime
) \

242 i‡(
πime
 > 
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][0]) { \

243 
πime
 -
boŸ_ïoch
.
time
[boŸ_ïoch.
tou£
][0]; \

244 }

	)

246 
	#REALTIME2COUNT
(
πime
)

	)

249 
	#MAX_WAKEUP_SRQ
 (1 << 6)

	)

251 
	skli°_t
 { 
	m§q
; vﬁ©ûê
	mö
, 
	mout
; *
	mèsk
[
MAX_WAKEUP_SRQ
]; };

252 
kli°_t
 
wake_up_§q
[];

254 
	#≥nd_wake_up_§q
(
 xtsk
, 
˝uid
) \

256 
wake_up_§q
[
˝uid
].
èsk
[wake_up_§q[˝uid].
ö
++ & (
MAX_WAKEUP_SRQ
 - 1)] = 
 xtsk
; \

257 
	`hÆ_≥nd_unc⁄d
(
wake_up_§q
[0].
§q
, 
˝uid
); \

258 } 0)

	)

260 
ölöe
 
	$íq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
)

262 
RT_TASK
 *
èsk
;

263 i‡(
ªady_èsk
->
is_h¨d
) {

264 #ifde‡
CONFIG_SMP


265 
èsk
 = 
π_smp_löux_èsk
[
ªady_èsk
->
ru¬abÀ_⁄_˝us
].
∫ext
;

267 
èsk
 = 
π_smp_löux_èsk
[0].
∫ext
;

269 
ªady_èsk
->
¥i‹ôy
 >
èsk
->priority) {

270 i‡((
èsk
 =Åask->
∫ext
)->
¥i‹ôy
 < 0) ;

272 
èsk
->
Ωªv
 = (
ªady_èsk
->Ωªv =Åask->Ωªv)->
∫ext
 =Ñeady_task;

273 
ªady_èsk
->
∫ext
 = 
èsk
;

275 
ªady_èsk
->
°©e
 |
RT_SCHED_SFTRDY
;

276 
	`NON_RTAI_TASK_RESUME
(
ªady_èsk
);

278 
	}
}

280 
ölöe
 
	$ªnq_ªady_èsk
(
RT_TASK
 *
ªady_èsk
, 
¥i‹ôy
)

282 
ªtvÆ
;

283 i‡((
ªtvÆ
 = 
ªady_èsk
->
¥i‹ôy
 !=Öriority)) {

284 
ªady_èsk
->
¥i‹ôy
 =Öriority;

285 i‡(
ªady_èsk
->
°©e
 =
RT_SCHED_READY
) {

286 (
ªady_èsk
->
Ωªv
)->
∫ext
 =Ñeady_task->rnext;

287 (
ªady_èsk
->
∫ext
)->
Ωªv
 =Ñeady_task->rprev;

288 
	`íq_ªady_èsk
(
ªady_èsk
);

291  
ªtvÆ
;

292 
	}
}

294 
ölöe
 
	$ªm_ªady_èsk
(
RT_TASK
 *
èsk
)

296 i‡(
èsk
->
°©e
 =
RT_SCHED_READY
) {

297 i‡(!
èsk
->
is_h¨d
) {

298 
	`NON_RTAI_TASK_SUSPEND
(
èsk
);

301 (
èsk
->
Ωªv
)->
∫ext
 =Åask->rnext;

302 (
èsk
->
∫ext
)->
Ωªv
 =Åask->rprev;

304 
	}
}

306 
ölöe
 
	$ªm_ªady_cuºít
(
RT_TASK
 *
π_cuºít
)

308 i‡(!
π_cuºít
->
is_h¨d
) {

309 
	`NON_RTAI_TASK_SUSPEND
(
π_cuºít
);

312 (
π_cuºít
->
Ωªv
)->
∫ext
 =Ñt_current->rnext;

313 (
π_cuºít
->
∫ext
)->
Ωªv
 =Ñt_current->rprev;

314 
	}
}

316 #ifde‡
CONFIG_RTAI_LONG_TIMED_LIST


319 
ölöe
 
	$íq_timed_èsk
(
RT_TASK
 *
timed_èsk
)

321 
RT_TASK
 *
èskh
, *
tsknxt
, *
èsk
;

322 
rb_node_t
 **
rbä
, *
rbçn
 = 
NULL
;

323 #ifde‡
CONFIG_SMP


324 
èsk
 = 
èskh
 = &
π_smp_löux_èsk
[
timed_èsk
->
ru¬abÀ_⁄_˝us
];

326 
èsk
 = 
èskh
 = &
π_smp_löux_èsk
[0];

328 
rbä
 = &
èskh
->
rbr
.
rb_node
;

330 *
rbä
) {

331 
rbçn
 = *
rbä
;

332 
tsknxt
 = 
	`rb_íåy
(
rbçn
, 
RT_TASK
, 
rbn
);

333 i‡(
timed_èsk
->
ªsume_time
 > 
tsknxt
->resume_time) {

334 
rbä
 = &(
rbçn
)->
rb_right
;

336 
rbä
 = &(
rbçn
)->
rb_À·
;

337 
èsk
 = 
tsknxt
;

340 
	`rb_lök_node
(&
timed_èsk
->
rbn
, 
rbçn
, 
rbä
);

341 
	`rb_ö£π_cﬁ‹
(&
timed_èsk
->
rbn
, &
èskh
->
rbr
);

342 
èsk
->
çªv
 = (
timed_èsk
->çªv =Åask->çªv)->
äext
 =Åimed_task;

343 
timed_èsk
->
äext
 = 
èsk
;

344 
	}
}

346 
	#rb_îa£_èsk
(
èsk
, 
˝uid
) \

347 
	`rb_îa£
(&(
èsk
)->
rbn
, &
π_smp_löux_èsk
[
˝uid
].
rbr
);

	)

352 
ölöe
 
	$íq_timed_èsk
(
RT_TASK
 *
timed_èsk
)

354 
RT_TASK
 *
èsk
;

355 #ifde‡
CONFIG_SMP


356 
èsk
 = 
π_smp_löux_èsk
[
timed_èsk
->
ru¬abÀ_⁄_˝us
].
äext
;

358 
èsk
 = 
π_smp_löux_èsk
[0].
äext
;

360 
timed_èsk
->
ªsume_time
 > 
èsk
->resume_time) {

361 
èsk
 =Åask->
äext
;

363 
èsk
->
çªv
 = (
timed_èsk
->çªv =Åask->çªv)->
äext
 =Åimed_task;

364 
timed_èsk
->
äext
 = 
èsk
;

365 
	}
}

367 
	#rb_îa£_èsk
(
èsk
, 
˝uid
)

	)

371 
ölöe
 
	$ªm_timed_èsk
(
RT_TASK
 *
èsk
)

373 i‡((
èsk
->
°©e
 & 
RT_SCHED_DELAYED
)) {

374 (
èsk
->
çªv
)->
äext
 =Åask->tnext;

375 (
èsk
->
äext
)->
çªv
 =Åask->tprev;

376 #ifde‡
CONFIG_SMP


377 
	`rb_îa£_èsk
(
èsk
,Åask->
ru¬abÀ_⁄_˝us
);

379 
	`rb_îa£_èsk
(
èsk
, 0);

382 
	}
}

384 
ölöe
 
	$wake_up_timed_èsks
(
˝uid
)

386 
RT_TASK
 *
èskh
, *
èsk
;

387 #ifde‡
CONFIG_SMP


388 
èsk
 = (
èskh
 = &
π_smp_löux_èsk
[
˝uid
])->
äext
;

390 
èsk
 = (
èskh
 = &
π_smp_löux_èsk
[0])->
äext
;

392 i‡(
èsk
->
ªsume_time
 <
π_time_h
) {

394 i‡((
èsk
->
°©e
 & 
RT_SCHED_SUSPENDED
Ë&&Åask->
su•dïth
 > 0) {

395 
èsk
->
su•dïth
 = 0;

397 i‡((
èsk
->
°©e
 &~(
RT_SCHED_DELAYED
 | 
RT_SCHED_SUSPENDED
 | 
RT_SCHED_SEMAPHORE
 | 
RT_SCHED_RECEIVE
 | 
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
 | 
RT_SCHED_MBXSUSP
 | 
RT_SCHED_POLL
)Ë=
RT_SCHED_READY
) {

398 i‡(
èsk
->
pﬁicy
 < 0) {

399 
	`íq_ªady_edf_èsk
(
èsk
);

401 
	`íq_ªady_èsk
(
èsk
);

403 #i‡
	`deföed
(
CONFIG_RTAI_BUSY_TIME_ALIGN
) && CONFIG_RTAI_BUSY_TIME_ALIGN

404 
èsk
->
busy_time_Æign
 = 
⁄eshŸ_timî
;

407 
	`rb_îa£_èsk
(
èsk
, 
˝uid
);

408 
èsk
 =Åask->
äext
;

409 } 
èsk
->
ªsume_time
 <
π_time_h
);

410 #ifde‡
CONFIG_SMP


411 
π_smp_löux_èsk
[
˝uid
].
äext
 = 
èsk
;

412 
èsk
->
çªv
 = &
π_smp_löux_èsk
[
˝uid
];

414 
π_smp_löux_èsk
[0].
äext
 = 
èsk
;

415 
èsk
->
çªv
 = &
π_smp_löux_èsk
[0];

418 
	}
}

420 
	#gë_time
(Ë
	`π_gë_time
()

	)

422 
ölöe
 
RTIME
 
	$gë_time
()

424 #ifde‡
CONFIG_SMP


425 
˝uid
;

426  
π_smp_⁄eshŸ_timî
[
˝uid
 = 
	`πai_˝uid
()] ? 
	`rdtsc
(Ë: 
π_smp_times
[˝uid].
tick_time
;

428  
π_smp_⁄eshŸ_timî
[0] ? 
	`rdtsc
(Ë: 
π_smp_times
[0].
tick_time
;

430 
	}
}

433 
ölöe
 
	$íqueue_blocked
(
RT_TASK
 *
èsk
, 
QUEUE
 *
queue
, 
qty≥
)

435 
QUEUE
 *
q
;

436 
èsk
->
blocked_⁄
 = (
q
 = 
queue
);

437 i‡(!
qty≥
) {

438 (
q
 = q->
√xt
Ë!
queue
 && (q->
èsk
)->
¥i‹ôy
 <=Åask->priority);

440 
q
->
¥ev
 = (
èsk
->
queue
.¥ev = q->¥ev)->
√xt
 = &(task->queue);

441 
èsk
->
queue
.
√xt
 = 
q
;

442 
	}
}

445 
ölöe
 
	$dequeue_blocked
(
RT_TASK
 *
èsk
)

447 
èsk
->
¥io_∑s£d_to
 = 
NULL
;

448 (
èsk
->
queue
.
¥ev
)->
√xt
 =Åask->queue.next;

449 (
èsk
->
queue
.
√xt
)->
¥ev
 =Åask->queue.prev;

450 
èsk
->
blocked_⁄
 = 
NULL
;

451 
	}
}

453 
ölöe
 
	$∑ss_¥io
(
RT_TASK
 *
to
, RT_TASK *
‰om
)

455 
QUEUE
 *
q
, *
blocked_⁄
;

456 #ifde‡
CONFIG_SMP


457 
RT_TASK
 *
rhód
;

458 
schedm≠
;

459 
schedm≠
 = 0;

462 
to
 &&Åo->
¥i‹ôy
 > 
‰om
->priority) {

463 
to
->
¥i‹ôy
 = 
‰om
->priority;

464 i‡(
to
->
°©e
 =
RT_SCHED_READY
) {

465 i‡((
to
->
Ωªv
)->
¥i‹ôy
 >Åo->¥i‹ôy || (to->
∫ext
)->priority <Åo->priority) {

466 #ifde‡
CONFIG_SMP


467 
rhód
 = 
π_smp_löux_èsk
[
to
->
ru¬abÀ_⁄_˝us
].
∫ext
;

469 (
to
->
Ωªv
)->
∫ext
 =Åo->rnext;

470 (
to
->
∫ext
)->
Ωªv
 =Åo->rprev;

471 
	`íq_ªady_èsk
(
to
);

472 #ifde‡
CONFIG_SMP


473 i‡(
rhód
 !
π_smp_löux_èsk
[
to
->
ru¬abÀ_⁄_˝us
].
∫ext
) {

474 
	`__£t_bô
(
to
->
ru¬abÀ_⁄_˝us
 & 0x1F, &
schedm≠
);

480 } i‡(()(
blocked_⁄
 = 
to
->blocked_⁄Ë> 
RTE_HIGERR
 && ((—o->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë&& ((
SEM
 *)blocked_⁄)->
ty≥
 > 0Ë|| (to->°©ê& (
RT_SCHED_SEND
 | 
RT_SCHED_RPC
 | 
RT_SCHED_RETURN
)))) {

481 i‡(
to
->
queue
.
¥ev
 !
blocked_⁄
) {

482 
q
 = 
blocked_⁄
;

483 (
to
->
queue
.
¥ev
)->
√xt
 =Åo->queue.next;

484 (
to
->
queue
.
√xt
)->
¥ev
 =Åo->queue.prev;

485 (
q
 = q->
√xt
Ë!
blocked_⁄
 && (q->
èsk
)->
¥i‹ôy
 <
to
->priority);

486 
q
->
¥ev
 = (
to
->
queue
.¥ev = q->¥ev)->
√xt
 = &(to->queue);

487 
to
->
queue
.
√xt
 = 
q
;

488 i‡(
to
->
queue
.
¥ev
 !
blocked_⁄
) {

492 
to
 = (to->
°©e
 & 
RT_SCHED_SEMAPHORE
Ë? ((
SEM
 *)
blocked_⁄
)->
owndby
 : blocked_⁄->
èsk
;

496 #ifde‡
CONFIG_SMP


497  
schedm≠
;

501 
	}
}

503 
ölöe
 
RT_TASK
 *
	$_π_whﬂmi
()

505 #ifde‡
CONFIG_SMP


506 
RT_TASK
 *
π_cuºít
;

507 
Êags
;

508 
Êags
 = 
	`π_globÆ_ßve_Êags_™d_˛i
();

509 
π_cuºít
 = 
RT_CURRENT
;

510 
	`π_globÆ_ª°‹e_Êags
(
Êags
);

511  
π_cuºít
;

513  
π_smp_cuºít
[0];

515 
	}
}

517 
ölöe
 
	$__ˇŒ_exô_h™dÀrs
(
RT_TASK
 *
èsk
)

519 
XHDL
 *
±
, *
tmp
;

521 
±
 = 
èsk
->
ExôHook
;

522  
±
 ) {

523 (*
±
->
fun
Ë’t->
¨g1
,Öt->
¨g2
);

524 
tmp
 = 
±
;

525 
±
 =Öt->
nxt
;

526 
	`π_‰ì
(
tmp
);

528 
èsk
->
ExôHook
 = 0;

529 
	}
}

531 
ölöe
 
XHDL
 *
__£t_exô_h™dÀr
(
RT_TASK
 *
èsk
, (*
fun
Ë(*, ), *
¨g1
, 
¨g2
)

533 
XHDL
 *
p
;

537 i‡(
èsk
->
magic
 !
RT_TASK_MAGIC
)  0;

538 i‡(!(
p
 = (
XHDL
 *Ë
	`π_mÆloc
 ((XHDL))))  0;

539 
p
->
fun
 = fun;

540 
p
->
¨g1
 =árg1;

541 
p
->
¨g2
 =árg2;

542 
p
->
nxt
 = 
èsk
->
ExôHook
;

543  (
èsk
->
ExôHook
 = 
p
);

544 
	}
}

546 
ölöe
 
	$πai_öô_„©uªs
 ()

549 #ifde‡
CONFIG_RTAI_LEDS_BUILTIN


550 
	`__πai_Àds_öô
();

552 #ifde‡
CONFIG_RTAI_SEM_BUILTIN


553 
	`__πai_£m_öô
();

555 #ifde‡
CONFIG_RTAI_MSG_BUILTIN


556 
	`__πai_msg_öô
();

558 #ifde‡
CONFIG_RTAI_MBX_BUILTIN


559 
	`__πai_mbx_öô
();

561 #ifde‡
CONFIG_RTAI_TBX_BUILTIN


562 
	`__πai_msg_queue_öô
();

564 #ifde‡
CONFIG_RTAI_MQ_BUILTIN


565 
	`__πai_mq_öô
();

567 #ifde‡
CONFIG_RTAI_BITS_BUILTIN


568 
	`__πai_bôs_öô
();

570 #ifde‡
CONFIG_RTAI_TASKLETS_BUILTIN


571 
	`__πai_èskÀts_öô
();

573 #ifde‡
CONFIG_RTAI_FIFOS_BUILTIN


574 
	`__πai_fifos_öô
();

576 #ifde‡
CONFIG_RTAI_NETRPC_BUILTIN


577 
	`__πai_√åpc_öô
();

579 #ifde‡
CONFIG_RTAI_SHM_BUILTIN


580 
	`__πai_shm_öô
();

582 #ifde‡
CONFIG_RTAI_MATH_BUILTIN


583 
	`__πai_m©h_öô
();

585 #ifde‡
CONFIG_RTAI_USI


586 
	`¥ötk
(
KERN_INFO
 "RTAI[usi]:Énabled.\n");

590 
	}
}

592 
ölöe
 
	$πai_˛ónup_„©uªs
 () {

594 #ifde‡
CONFIG_RTAI_MATH_BUILTIN


595 
	`__πai_m©h_exô
();

597 #ifde‡
CONFIG_RTAI_SHM_BUILTIN


598 
	`__πai_shm_exô
();

600 #ifde‡
CONFIG_RTAI_NETRPC_BUILTIN


601 
	`__πai_√åpc_exô
();

603 #ifde‡
CONFIG_RTAI_FIFOS_BUILTIN


604 
	`__πai_fifos_exô
();

606 #ifde‡
CONFIG_RTAI_TASKLETS_BUILTIN


607 
	`__πai_èskÀts_exô
();

609 #ifde‡
CONFIG_RTAI_BITS_BUILTIN


610 
	`__πai_bôs_exô
();

612 #ifde‡
CONFIG_RTAI_MQ_BUILTIN


613 
	`__πai_mq_exô
();

615 #ifde‡
CONFIG_RTAI_TBX_BUILTIN


616 
	`__πai_msg_queue_exô
();

618 #ifde‡
CONFIG_RTAI_MBX_BUILTIN


619 
	`__πai_mbx_exô
();

621 #ifde‡
CONFIG_RTAI_MSG_BUILTIN


622 
	`__πai_msg_exô
();

624 #ifde‡
CONFIG_RTAI_SEM_BUILTIN


625 
	`__πai_£m_exô
();

627 #ifde‡
CONFIG_RTAI_LEDS_BUILTIN


628 
	`__πai_Àds_exô
();

630 
	}
}

632 
π_check_cuºít_°ack
();

634 
π_kthªad_öô
(
RT_TASK
 *
èsk
,

635 (*
π_thªad
)(),

636 
d©a
,

637 
°ack_size
,

638 
¥i‹ôy
,

639 
u£s_Âu
,

640 (*
sig«l
)());

642 
	`π_kthªad_öô_˝uid
(
RT_TASK
 *
èsk
,

643 (*
π_thªad
)(),

644 
d©a
,

645 
°ack_size
,

646 
¥i‹ôy
,

647 
u£s_Âu
,

648 (*
sig«l
)(),

649 
˝uid
);

654 
	~<πai_vîsi⁄.h
>

655 
	~<πai_lxπ.h
>

656 
	~<πai_sched.h
>

657 
	~<πai_mÆloc.h
>

658 
	~<πai_åa˚.h
>

659 
	~<πai_Àds.h
>

660 
	~<πai_£m.h
>

661 
	~<πai_rwl.h
>

662 
	~<πai_•l.h
>

663 
	~<πai_scb.h
>

664 
	~<πai_mbx.h
>

665 
	~<πai_msg.h
>

666 
	~<πai_tbx.h
>

667 
	~<πai_mq.h
>

668 
	~<πai_bôs.h
>

669 
	~<πai_wd.h
>

670 
	~<πai_èskÀts.h
>

671 
	~<πai_fifos.h
>

672 
	~<πai_√åpc.h
>

673 
	~<πai_shm.h
>

674 
	~<πai_usi.h
>

	@/usr/realtime/include/rtai_sem.h

24 #i‚de‡
_RTAI_SEM_H


25 
	#_RTAI_SEM_H


	)

27 
	~<πai_ty≥s.h
>

28 
	~<πai_«m2num.h
>

29 
	~<πai_sched.h
>

31 
	#RT_SEM_MAGIC
 0x3f83ebb

32 

	)

33 
	#SEM_ERR
 (
RTE_OBJINV
)

	)

34 
	#SEM_TIMOUT
 (
RTE_TIMOUT
)

	)

36 
	sπ_pﬁl_s
 { *
	mwh©
; 
	mf‹wh©
; };

39 
	#RT_POLL_NOT_TO_USE
 0

	)

40 
	#RT_POLL_MBX_RECV
 1

	)

41 
	#RT_POLL_MBX_SEND
 2

	)

42 
	#RT_POLL_SEM_WAIT_ALL
 3

	)

43 
	#RT_POLL_SEM_WAIT_ONE
 4

	)

45 #i‡
deföed
(
__KERNEL__
Ë&& !deföed(
__˝lu•lus
)

47 
	sπ_pﬁl_ql
 { 
QUEUE
 
	mpﬁlq
; 
•ölock_t
 
	mpﬁlock
; };

48 
	sπ_pﬁl_íc
 { 
	moff£t
; (*
	mt›ﬁl
)(*); };

49 
π_pﬁl_íc
 
π_pﬁl_of°fun
[];

51 
	sπ_£m≠h‹e
 {

52 
π_queue
 
	mqueue
;

53 
	mmagic
;

54 
	mty≥
, 
	mª°y≥
;

55 
	mcou¡
;

56 
π_èsk_°ru˘
 *
	mowndby
;

57 
	mqty≥
;

58 
π_queue
 
	mªsq
;

59 #ifde‡
CONFIG_RTAI_RT_POLL


60 
π_pﬁl_ql
 
	mpﬁl_waô_Æl
;

61 
π_pﬁl_ql
 
	mpﬁl_waô_⁄e
;

63 } 
	tSEM
;

65 #ifde‡
CONFIG_RTAI_RT_POLL


67 
RTAI_SYSCALL_MODE
 
_π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
, 
•a˚
);

68 
ölöe
 
	$π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

70  
	`_π_pﬁl
(
pdß
, 
ƒ
, 
timeout
, 1);

71 
	}
}

73 
π_wakeup_pﬁÀrs
(
π_pﬁl_ql
 *
ql
, 
ªas⁄
);

77 
ölöe
 
	$π_pﬁl
(
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
)

79  
RTE_OBJINV
;

80 
	}
}

82 
	#π_wakeup_pﬁÀrs
(
ql
, 
ªas⁄
)

	)

88 
	sπ_£m≠h‹e
 {

89 
	m›aque
;

90 } 
	tSEM
;

94 
SEM
 
	tCND
;

96 #ifde‡
__KERNEL__


98 
	~<löux/î∫o.h
>

100 
SEM
 
	tp£m_t
;

102 
SEM
 
	tpmuãx_t
;

104 #ifde‡
__˝lu•lus


108 
__πai_£m_öô
();

110 
__πai_£m_exô
();

112 
RTAI_SYSCALL_MODE
 
π_ty≥d_£m_öô
(
SEM
 *
£m
,

113 
vÆue
,

114 
ty≥
);

116 
RTAI_SYSCALL_MODE
 
π_£m_dñëe
(
SEM
 *
£m
);

118 
RTAI_SYSCALL_MODE
 
SEM
 *
_π_ty≥d_«med_£m_öô
(
£m_«me
,

119 
vÆue
,

120 
ty≥
,

121 *
h™dÀ
);

123 
ölöe
 
SEM
 *
π_ty≥d_«med_£m_öô
(c⁄° *
£m_«me
,

124 
vÆue
,

125 
ty≥
) {

126  
_π_ty≥d_«med_£m_öô
(
«m2num
(
£m_«me
), 
vÆue
, 
ty≥
, 
NULL
);

129 
RTAI_SYSCALL_MODE
 
π_«med_£m_dñëe
(
SEM
 *
£m
);

131 
π_£m_öô
(
SEM
 *
£m
,

132 
vÆue
);

134 
RTAI_SYSCALL_MODE
 
π_£m_sig«l
(
SEM
 *
£m
);

136 
RTAI_SYSCALL_MODE
 
π_£m_brﬂdˇ°
(
SEM
 *
£m
);

138 
RTAI_SYSCALL_MODE
 
π_£m_waô
(
SEM
 *
£m
);

140 
RTAI_SYSCALL_MODE
 
π_£m_waô_if
(
SEM
 *
£m
);

142 
π_˙t£m_waô_if_™d_lock
(
SEM
 *
£m
);

144 
RTAI_SYSCALL_MODE
 
π_£m_waô_u¡û
(
SEM
 *
£m
,

145 
RTIME
 
time
);

147 
RTAI_SYSCALL_MODE
 
π_£m_waô_timed
(
SEM
 *
£m
,

148 
RTIME
 
dñay
);

150 
RTAI_SYSCALL_MODE
 
π_£m_waô_b¨rõr
(
SEM
 *
£m
);

152 
RTAI_SYSCALL_MODE
 
π_£m_cou¡
(
SEM
 *
£m
);

154 
RTAI_SYSCALL_MODE
 
π_c⁄d_sig«l
(
CND
 *
˙d
);

156 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô
(
CND
 *
˙d
,

157 
SEM
 *
mtx
);

159 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô_u¡û
(
CND
 *
˙d
,

160 
SEM
 *
mtx
,

161 
RTIME
 
time
);

163 
RTAI_SYSCALL_MODE
 
π_c⁄d_waô_timed
(
CND
 *
˙d
,

164 
SEM
 *
mtx
,

165 
RTIME
 
dñay
);

167 
	#π_«med_£m_öô
(
£m_«me
, 
vÆue
Ë
	`π_ty≥d_«med_£m_öô
(£m_«me, vÆue, 
CNT_SEM
)

	)

169 
ölöe
 
π_p£m_öô
(
p£m_t
 *
£m
, 
psh¨ed
, 
vÆue
)

171 i‡(
vÆue
 < 
SEM_TIMOUT
) {

172 
π_ty≥d_£m_öô
(
£m
, 
vÆue
, 
psh¨ed
 | 
PRIO_Q
);

175  -
EINVAL
;

178 
ölöe
 
π_p£m_de°roy
(
p£m_t
 *
£m
)

180 i‡(
π_£m_waô_if
(
£m
) >= 0) {

181 
π_£m_sig«l
(
£m
);

182  
π_£m_dñëe
(
£m
);

184  -
EBUSY
;

187 
ölöe
 
π_p£m_waô
(
p£m_t
 *
£m
) {

188  
π_£m_waô
(
£m
Ë< 
SEM_TIMOUT
 ? 0 : -1;

191 
ölöe
 
π_p£m_timedwaô
(
p£m_t
 *
£m
, 
time•ec
 *
ab°ime
) {

192  
π_£m_waô_u¡û
(
£m
, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

195 
ölöe
 
π_p£m_åywaô
(
p£m_t
 *
£m
) {

196  
π_£m_waô_if
(
£m
Ë> 0 ? 0 : -
EAGAIN
;

199 
ölöe
 
π_p£m_po°
(
p£m_t
 *
£m
) {

200  
π_£m_sig«l
(
£m
);

203 
ölöe
 
π_p£m_gëvÆue
(
p£m_t
 *
£m
, *
svÆ
)

205 i‡((*
svÆ
 = 
π_£m_waô_if
(
£m
)) > 0) {

206 
π_£m_sig«l
(
£m
);

211 
ölöe
 
π_pmuãx_öô
(
pmuãx_t
 *
muãx
, *
muãx©å
)

213 
π_ty≥d_£m_öô
(
muãx
, 1, 
RES_SEM
);

217 
ölöe
 
π_pmuãx_de°roy
(
pmuãx_t
 *
muãx
)

219 i‡(
π_£m_waô_if
(
muãx
) > 0) {

220 
π_£m_sig«l
(
muãx
);

221  
π_£m_dñëe
(
muãx
);

223  -
EBUSY
;

226 
ölöe
 
π_pmuãx_lock
(
pmuãx_t
 *
muãx
) {

227  
π_£m_waô
(
muãx
Ë< 
SEM_TIMOUT
 ? 0 : -
EINVAL
;

230 
ölöe
 
π_pmuãx_åylock
(
pmuãx_t
 *
muãx
) {

231  
π_£m_waô_if
(
muãx
Ë> 0 ? 0 : -
EBUSY
;

234 
ölöe
 
π_pmuãx_timedlock
(
pmuãx_t
 *
£m
, 
time•ec
 *
ab°ime
) {

235  
π_£m_waô_u¡û
(
£m
, 
time•ec2cou¡
(
ab°ime
)Ë< 
SEM_TIMOUT
 ? 0 : -1;

238 
ölöe
 
π_pmuãx_u∆ock
(
pmuãx_t
 *
muãx
) {

239  
π_£m_sig«l
(
muãx
);

242 #unde‡
π_muãx_öô


243 
	#π_muãx_öô
(
mtx
Ë
	`π_ty≥d_£m_öô
(mtx, 1, 
RES_SEM
)

	)

244 
	#π_muãx_dñëe
(
mtx
Ë
	`π_£m_dñëe
(mtx)

	)

245 
	#π_muãx_de°roy
(
mtx
Ë
	`π_£m_dñëe
(mtx)

	)

246 
	#π_muãx_åylock
(
mtx
Ë
	`π_£m_waô_if
(mtx)

	)

247 
	#π_muãx_lock
(
mtx
Ë
	`π_£m_waô
(mtx)

	)

248 
	#π_muãx_timedlock
(
mtx
, 
time
Ë
	`π_£m_waô_u¡û
(mtx,Åime)

	)

249 
	#π_muãx_u∆ock
(
mtx
Ë
	`π_£m_sig«l
(mtx)

	)

251 
	#π_c⁄d_öô
(
˙d
Ë
	`π_ty≥d_£m_öô
(˙d, 0, 
BIN_SEM
 | 
PRIO_Q
)

	)

252 
	#π_c⁄d_dñëe
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

253 
	#π_c⁄d_de°roy
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

254 
	#π_c⁄d_brﬂdˇ°
(
˙d
Ë
	`π_£m_brﬂdˇ°
(˙d)

	)

256 
ölöe
 
π_c⁄d_timedwaô
(
CND
 *
˙d
, 
SEM
 *
mtx
, 
RTIME
 
time
) {

257  
π_c⁄d_waô_u¡û
(
˙d
, 
mtx
, 
time
Ë< 
SEM_TIMOUT
 ? 0 : -1;

260 #ifde‡
__˝lu•lus


266 
	~<πai_lxπ.h
>

268 #ifde‡
__˝lu•lus


272 
RTAI_PROTO
(
SEM
 *, 
π_ty≥d_£m_öô
,(
«me
, 
vÆue
, 
ty≥
))

274 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; } 
¨g
 = {Çamê?Çamê: 
π_gë_«me
(
NULL
), value,Åype };

275  (
SEM
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SEM_INIT
, &
¨g
).
v
[
LOW
];

295 
	#π_£m_öô
(
«me
, 
vÆue
Ë
	`π_ty≥d_£m_öô
“ame, vÆue, 
CNT_SEM
)

	)

297 
	#π_«med_£m_öô
(
£m_«me
, 
vÆue
) \

298 
	`π_ty≥d_«med_£m_öô
(
£m_«me
, 
vÆue
, 
CNT_SEM
)

	)

300 
RTAI_PROTO
(, 
π_£m_dñëe
,(
SEM
 *
£m
))

302 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

303  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SEM_DELETE
, &
¨g
).
i
[
LOW
];

306 
RTAI_PROTO
(
SEM
 *, 
π_ty≥d_«med_£m_öô
,(c⁄° *
«me
, 
vÆue
, 
ty≥
))

308 °ru˘ { 
«me
; 
vÆue
, 
ty≥
; *
h™dÀ
; } 
¨g
 = { 
«m2num
“ame), vÆue,Åy≥, 
NULL
 };

309  (
SEM
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_INIT
, &
¨g
).
v
[
LOW
];

312 
RTAI_PROTO
(, 
π_«med_£m_dñëe
,(
SEM
 *
£m
))

314 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

315  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SEM_DELETE
, &
¨g
).
i
[
LOW
];

318 
RTAI_PROTO
(, 
π_£m_sig«l
,(
SEM
 *
£m
))

320 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

321  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_SIGNAL
, &
¨g
).
i
[
LOW
];

324 
RTAI_PROTO
(, 
π_£m_brﬂdˇ°
,(
SEM
 *
£m
))

326 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

327  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_BROADCAST
, &
¨g
).
i
[
LOW
];

330 
RTAI_PROTO
(, 
π_£m_waô
,(
SEM
 *
£m
))

332 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

333  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT
, &
¨g
).
i
[
LOW
];

336 
RTAI_PROTO
(, 
π_£m_waô_if
,(
SEM
 *
£m
))

338 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

339  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_IF
, &
¨g
).
i
[
LOW
];

342 
RTAI_PROTO
(, 
π_£m_waô_u¡û
,(
SEM
 *
£m
, 
RTIME
 
time
))

344 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
time
; } 
¨g
 = { sem,Åime };

345  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

348 
RTAI_PROTO
(, 
π_£m_waô_timed
,(
SEM
 *
£m
, 
RTIME
 
dñay
))

350 °ru˘ { 
SEM
 *
£m
; 
RTIME
 
dñay
; } 
¨g
 = { sem, delay };

351  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

354 
RTAI_PROTO
(, 
π_£m_waô_b¨rõr
,(
SEM
 *
£m
))

356 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

357  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_WAIT_BARRIER
, &
¨g
).
i
[
LOW
];

360 
RTAI_PROTO
(, 
π_£m_cou¡
,(
SEM
 *
£m
))

362 °ru˘ { 
SEM
 *
£m
; } 
¨g
 = { sem };

363  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_COUNT
, &
¨g
).
i
[
LOW
];

381 
	#π_c⁄d_öô
(
«me
Ë
	`π_ty≥d_£m_öô
“ame, 0, 
BIN_SEM
)

	)

382 
	#π_c⁄d_dñëe
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

383 
	#π_c⁄d_de°roy
(
˙d
Ë
	`π_£m_dñëe
(˙d)

	)

384 
	#π_c⁄d_brﬂdˇ°
(
˙d
Ë
	`π_£m_brﬂdˇ°
(˙d)

	)

385 
	#π_c⁄d_timedwaô
(
˙d
, 
mtx
, 
time
Ë
	`π_c⁄d_waô_u¡û
(˙d, mtx,Åime)

	)

387 
RTAI_PROTO
(, 
π_c⁄d_sig«l
,(
CND
 *
˙d
))

389 °ru˘ { 
CND
 *
˙d
; } 
¨g
 = { cnd };

390  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_SIGNAL
, &
¨g
).
i
[
LOW
];

393 
RTAI_PROTO
(, 
π_c⁄d_waô
,(
CND
 *
˙d
, 
SEM
 *
muãx
))

395 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; } 
¨g
 = { cnd, mutex };

396  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT
, &
¨g
).
i
[
LOW
];

399 
RTAI_PROTO
(, 
π_c⁄d_waô_u¡û
,(
CND
 *
˙d
, 
SEM
 *
muãx
, 
RTIME
 
time
))

401 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; 
RTIME
 
time
; } 
¨g
 = { cnd, mutex,Åime };

402  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_UNTIL
, &
¨g
).
i
[
LOW
];

405 
RTAI_PROTO
(, 
π_c⁄d_waô_timed
,(
CND
 *
˙d
, 
SEM
 *
muãx
, 
RTIME
 
dñay
))

407 °ru˘ { 
CND
 *
˙d
; 
SEM
 *
muãx
; 
RTIME
 
dñay
; } 
¨g
 = { cnd, mutex, delay };

408  
πai_lxπ
(
BIDX
, 
SIZARG
, 
COND_WAIT_TIMED
, &
¨g
).
i
[
LOW
];

411 
RTAI_PROTO
(, 
π_pﬁl
, (
π_pﬁl_s
 *
pdß
, 
ƒ
, 
RTIME
 
timeout
))

413 #ifde‡
CONFIG_RTAI_RT_POLL


414 °ru˘ { 
π_pﬁl_s
 *
pdß
; 
ƒ
; 
RTIME
 
timeout
; 
•a˚
; } 
¨g
 = {Ödsa,Çr,Åimeout, 0 };

415  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SEM_RT_POLL
, &
¨g
).
i
[
LOW
];

417  
RTE_OBJINV
;

421 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_serial.h

20 #i‚de‡
_RTAI_SERIAL_H


21 
	#_RTAI_SERIAL_H


	)

23 
	#TTY0
 0

	)

24 
	#TTY1
 1

	)

25 
	#COM1
 
TTY0


	)

26 
	#COM2
 
TTY1


	)

28 
	#RT_SP_NO_HAND_SHAKE
 0x00

	)

29 
	#RT_SP_DSR_ON_TX
 0x01

	)

30 
	#RT_SP_HW_FLOW
 0x02

	)

32 
	#RT_SP_PARITY_EVEN
 0x18

	)

33 
	#RT_SP_PARITY_NONE
 0x00

	)

34 
	#RT_SP_PARITY_ODD
 0x08

	)

35 
	#RT_SP_PARITY_HIGH
 0x28

	)

36 
	#RT_SP_PARITY_LOW
 0x38

	)

38 
	#RT_SP_FIFO_DISABLE
 0x00

	)

39 
	#RT_SP_FIFO_SIZE_1
 0x00

	)

40 
	#RT_SP_FIFO_SIZE_4
 0x40

	)

41 
	#RT_SP_FIFO_SIZE_8
 0x80

	)

42 
	#RT_SP_FIFO_SIZE_14
 0xC0

	)

44 
	#RT_SP_FIFO_SIZE_DEFAULT
 
RT_SP_FIFO_SIZE_8


	)

46 
	#RT_SP_DTR
 0x01

	)

47 
	#RT_SP_RTS
 0x02

	)

49 
	#RT_SP_CTS
 0x10

	)

50 
	#RT_SP_DSR
 0x20

	)

51 
	#RT_SP_RI
 0x40

	)

52 
	#RT_SP_DCD
 0x80

	)

54 
	#RT_SP_BUFFER_FULL
 0x01

	)

55 
	#RT_SP_OVERRUN_ERR
 0x02

	)

56 
	#RT_SP_PARITY_ERR
 0x04

	)

57 
	#RT_SP_FRAMING_ERR
 0x08

	)

58 
	#RT_SP_BREAK
 0x10

	)

59 
	#RT_SP_BUFFER_OVF
 0x20

	)

61 
	#DELAY_FOREVER
 0x3FFFFFFFFFFFFFFFLL

	)

63 
	#FUN_EXT_RTAI_SP
 14

	)

65 
	#_SPOPEN
 0

	)

66 
	#_SPCLOSE
 1

	)

67 
	#_SPREAD
 2

	)

68 
	#_SPEVDRP
 3

	)

69 
	#_SPWRITE
 4

	)

70 
	#_SPCLEAR_RX
 5

	)

71 
	#_SPCLEAR_TX
 6

	)

72 
	#_SPGET_MSR
 7

	)

73 
	#_SPSET_MCR
 8

	)

74 
	#_SPGET_ERR
 9

	)

75 
	#_SPSET_MODE
 10

	)

76 
	#_SPSET_FIFOTRIG
 11

	)

77 
	#_SPGET_RXAVBS
 12

	)

78 
	#_SPGET_TXFRBS
 13

	)

79 
	#_SPSET_THRS
 14

	)

80 
	#_SPSET_CALLBACK
 15

	)

81 
	#_SPSET_ERR_CALLBACK
 16

	)

82 
	#_SPWAIT_USR_CALLBACK
 17

	)

83 
	#_SPREAD_TIMED
 18

	)

84 
	#_SPWRITE_TIMED
 19

	)

86 #ifde‡
__KERNEL__


88 
	~<πai.h
>

90 
RTAI_SYSCALL_MODE
 
π_•›í
(
ây
, 
baud
, 
numbôs
, 
°›bôs
, 
∑rôy
, 
mode
, 
fifŸrig
);

92 
RTAI_SYSCALL_MODE
 
π_•˛o£
(
ây
);

94 
RTAI_SYSCALL_MODE
 
π_•ªad
(
ây
, *
msg
, 
msg_size
);

96 
RTAI_SYSCALL_MODE
 
π_•evdΩ
(
ây
, *
msg
, 
msg_size
);

98 
RTAI_SYSCALL_MODE
 
π_•wrôe
(
ây
, *
msg
, 
msg_size
);

100 
RTAI_SYSCALL_MODE
 
π_•gë_rxavbs
(
ây
);

102 
RTAI_SYSCALL_MODE
 
π_•gë_tx‰bs
(
ây
);

104 
RTAI_SYSCALL_MODE
 
π_•˛ór_rx
(
ây
);

106 
RTAI_SYSCALL_MODE
 
π_•˛ór_tx
(
ây
);

108 
RTAI_SYSCALL_MODE
 
π_•£t_m¸
(
ây
, 
mask
, 
£tbôs
);

110 
RTAI_SYSCALL_MODE
 
π_•gë_m§
(
ây
, 
mask
);

112 
RTAI_SYSCALL_MODE
 
π_•£t_mode
(
ây
, 
mode
);

114 
RTAI_SYSCALL_MODE
 
π_•£t_fifŸrig
(
ây
, 
fifŸrig
);

116 
RTAI_SYSCALL_MODE
 
π_•gë_îr
(
ây
);

118 
π_•£t_ˇŒback_fun
(
ây
, (*
ˇŒback_fun
)(, ), 
rxthrs
, 
txthrs
);

120 
RTAI_SYSCALL_MODE
 
	`π_•£t_thrs
(
ây
, 
rxthrs
, 
txthrs
);

122 
	`π_•£t_îr_ˇŒback_fun
(
ây
, (*
îr_ˇŒback_fun
)());

124 
RTAI_SYSCALL_MODE
 
	`π_•£t_ˇŒback_fun_u§
(
ây
, 
ˇŒback_fun
, 
rxthrs
, 
txthrs
, 
code
, *
èsk
);

126 
RTAI_SYSCALL_MODE
 
	`π_•£t_îr_ˇŒback_fun_u§
(
ây
, 
îr_ˇŒback_fun
, 
dummy1
, 
dummy2
, 
code
, *
èsk
);

128 
RTAI_SYSCALL_MODE
 
	`π_•waô_u§_ˇŒback
(
ây
, *
ªtvÆs
);

130 
RTAI_SYSCALL_MODE
 
	`π_•ªad_timed
(
ây
, *
msg
, 
msg_size
, 
RTIME
 
dñay
);

132 
RTAI_SYSCALL_MODE
 
	`π_•wrôe_timed
(
ây
, *
msg
, 
msg_size
, 
RTIME
 
dñay
);

138 
ölöe
 
	$π_com_£tup
(
ây
,

139 
baud
, 
mode
,

140 
∑rôy
,

141 
°›bôs
,

142 
numbôs
,

143 
fifŸrig
)

145  
baud
 <0 ? 
	`π_•˛o£
(
ây
Ë: 
	`π_•›í
—ty, baud, 
numbôs
, 
°›bôs
, 
∑rôy
, 
mode
, 
fifŸrig
);

146 
	}
}

148 
ölöe
 
	$π_com_ªad
(
ây
,

149 *
msg
,

150 
msg_size
)

152 
nŸrd
;

153 i‡((
nŸrd
 = 
	`π_•ªad
(
ây
, 
msg
, 
msg_size
)) >= 0) {

154  
msg_size
 - 
nŸrd
;

156  
nŸrd
;

157 
	}
}

159 
ölöe
 
	$π_com_wrôe
(
ây
,

160 *
msg
,

161 
msg_size
)

163 
nŸwr
;

164 i‡((
nŸwr
 = 
	`π_•wrôe
(
ây
, 
msg
, 
msg_size
)) >= 0) {

165  
msg_size
 - 
nŸwr
;

167  
nŸwr
;

168 
	}
}

170 
	#π_com_˛ór_öput
(
ödx
Ë
	`π_•˛ór_rx
(ödx)

	)

171 
	#π_com_˛ór_ouçut
(
ödx
Ë
	`π_•˛ór_tx
(ödx)

	)

173 
	#π_com_wrôe_modem
(
ödx
, 
mask
, 
›
Ë
	`π_•£t_m¸
(ödx, mask, op)

	)

174 
	#π_com_ªad_modem
(
ödx
, 
mask
Ë
	`π_•gë_m§
(ödx, mask)

	)

176 
	#π_com_£t_mode
(
ödx
, 
mode
Ë
	`π_•£t_mode
(ödx, mode)

	)

177 
	#π_com_£t_fifŸrig
(
ödx
, 
fifŸrig
Ë
	`π_•£t_fifŸrig
(ödx, fifŸrig)

	)

179 
	#π_com_îr‹
(
ödx
Ë
	`π_•gë_îr
(ödx)

	)

183 
	~<î∫o.h
>

184 
	~<°dlib.h
>

185 
	~<±hªad.h
>

187 
	~<πai_lxπ.h
>

189 
RTAI_PROTO
(, 
π_•›í
, (
ây
, 
baud
, 
numbôs
, 
°›bôs
, 
∑rôy
, 
mode
, 
fifŸrig
))

191 °ru˘ { 
	gây
, 
	gbaud
, 
	gnumbôs
, 
	g°›bôs
, 
	g∑rôy
; 
	gmode
, 
	gfifŸrig
; } 
	g¨g
 = { 
ây
, 
baud
, 
numbôs
, 
°›bôs
, 
∑rôy
, 
mode
, 
fifŸrig
 };

192  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPOPEN
, &
¨g
).
	gi
[
LOW
];

195 
RTAI_PROTO
(, 
π_•˛o£
, (
ây
))

197 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

198  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPCLOSE
, &
¨g
).
	gi
[
LOW
];

201 
RTAI_PROTO
(, 
π_•ªad
, (
ây
, *
msg
, 
msg_size
))

203 
	gnŸrd
, 
	gsize
;

204 
	glmsg
[
size
 = 
abs
(
msg_size
)];

205 °ru˘ { 
	gây
; *
	gmsg
; 
	gmsg_size
; } 
	g¨g
 = { 
ây
, 
lmsg
, 
msg_size
 };

206 
	gnŸrd
 = 
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPREAD
, &
¨g
).
	gi
[
LOW
];

207 i‡(
	gnŸrd
 >0 && 
nŸrd
 !
size
) {

208 
mem˝y
(
msg
, 
lmsg
, 
size
 - 
nŸrd
);

210  
	gnŸrd
;

213 
RTAI_PROTO
(, 
π_•evdΩ
, (
ây
, *
msg
, 
msg_size
))

215 
	gnŸrd
, 
	gsize
;

216 
	glmsg
[
size
 = 
abs
(
msg_size
)];

217 °ru˘ { 
	gây
; *
	gmsg
; 
	gmsg_size
; } 
	g¨g
 = { 
ây
, 
lmsg
, 
msg_size
 };

218 
	gnŸrd
 = 
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPEVDRP
, &
¨g
).
	gi
[
LOW
];

219 i‡–
	gnŸrd
 >0 && 
nŸrd
 !
size
 ) {

220 
mem˝y
(
msg
, 
lmsg
, 
size
 - 
nŸrd
);

222  
	gnŸrd
;

225 
RTAI_PROTO
(, 
π_•wrôe
, (
ây
, *
msg
, 
msg_size
))

227 
	gsize
;

228 
	glmsg
[
size
 = 
abs
(
msg_size
)];

229 °ru˘ { 
	gây
; *
	gmsg
; 
	gmsg_size
; } 
	g¨g
 = { 
ây
, 
lmsg
, 
msg_size
 };

230 
mem˝y
(
lmsg
, 
msg
, 
size
);

231  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPWRITE
, &
¨g
).
	gi
[
LOW
];

234 
RTAI_PROTO
(, 
π_•ªad_timed
, (
ây
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

236 °ru˘ { 
	gây
; *
	gmsg
; 
	gmsg_size
; 
RTIME
 
	gdñay
; } 
	g¨g
 = { 
ây
, 
msg
, 
msg_size
, 
dñay
 };

237  
	gmsg_size
 > 0 ? 
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPREAD_TIMED
, &
¨g
).
	gi
[
LOW
] : 
msg_size
;

240 
RTAI_PROTO
(, 
π_•wrôe_timed
, (
ây
, *
msg
, 
msg_size
, 
RTIME
 
dñay
))

242 °ru˘ { 
	gây
; *
	gmsg
; 
	gmsg_size
; 
RTIME
 
	gdñay
; } 
	g¨g
 = { 
ây
, 
msg
, 
msg_size
, 
dñay
 };

243  
	gmsg_size
 > 0 ? 
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPWRITE_TIMED
, &
¨g
).
	gi
[
LOW
] : 
msg_size
;

246 
RTAI_PROTO
(, 
π_•˛ór_rx
, (
ây
))

248 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

249  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPCLEAR_RX
, &
¨g
).
	gi
[
LOW
];

252 
RTAI_PROTO
(, 
π_•˛ór_tx
, (
ây
))

254 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

255  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPCLEAR_TX
, &
¨g
).
	gi
[
LOW
];

258 
RTAI_PROTO
(, 
π_•gë_m§
, (
ây
, 
mask
))

260 °ru˘ { 
	gây
; 
	gmask
; } 
	g¨g
 = { 
ây
, 
mask
 };

261  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPGET_MSR
, &
¨g
).
	gi
[
LOW
];

264 
RTAI_PROTO
(, 
π_•£t_m¸
, (
ây
, 
mask
, 
£tbôs
))

266 °ru˘ { 
	gây
; 
	gmask
, 
	g£tbôs
; } 
	g¨g
 = { 
ây
, 
mask
, 
£tbôs
 };

267  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_MCR
, &
¨g
).
	gi
[
LOW
];

270 
RTAI_PROTO
(, 
π_•gë_îr
, (
ây
))

272 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

273  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPGET_ERR
, &
¨g
).
	gi
[
LOW
];

276 
RTAI_PROTO
(, 
π_•£t_mode
, (
ây
, 
mode
))

278 °ru˘ { 
	gây
; 
	gmode
; } 
	g¨g
 = { 
ây
, 
mode
 };

279  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_MODE
, &
¨g
).
	gi
[
LOW
];

282 
RTAI_PROTO
(, 
π_•£t_fifŸrig
, (
ây
, 
fifŸrig
))

284 °ru˘ { 
	gây
; 
	gfifŸrig
; } 
	g¨g
 = { 
ây
, 
fifŸrig
 };

285  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_FIFOTRIG
, &
¨g
).
	gi
[
LOW
];

288 
RTAI_PROTO
(, 
π_•gë_rxavbs
, (
ây
))

290 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

291  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPGET_RXAVBS
, &
¨g
).
	gi
[
LOW
];

294 
RTAI_PROTO
(, 
π_•gë_tx‰bs
, (
ây
))

296 °ru˘ { 
	gây
; } 
	g¨g
 = { 
ây
 };

297  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPGET_TXFRBS
, &
¨g
).
	gi
[
LOW
];

300 
RTAI_PROTO
(, 
π_•£t_thrs
, (
ây
, 
rxthrs
, 
txthrs
))

302 °ru˘ { 
	gây
; 
	grxthrs
, 
	gtxthrs
; } 
	g¨g
 = { 
ây
, 
rxthrs
, 
txthrs
 };

303  
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_THRS
, &
¨g
).
	gi
[
LOW
];

306 
RTAI_PROTO
(, 
π_•waô_u§_ˇŒback
, (
ây
, *
ªtvÆs
))

308 °ru˘ { 
	gây
; *
	gªtvÆs
; 
	gsize
; } 
	g¨g
 = { 
ây
, 
ªtvÆs
, 6*() };

309 
πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPWAIT_USR_CALLBACK
, &
¨g
);

313 #i‚de‡
__CALLBACK_THREAD__


314 
	#__CALLBACK_THREAD__


	)

315 *
	$ˇŒback_thªad
(*
Árg
)

317 
ªtvÆs
[6];

318 
	sÁrg_t
 { 
ây
; *
ˇŒback_fun
; 
rxthrs
, 
txthrs
, 
code
; 
RT_TASK
 *
èsk
; } *
¨g
;

320 
¨g
 = (
Árg_t
 *)
Árg
;

321 i‡(!(
¨g
->
èsk
 = 
	`π_èsk_öô_schmod
((Ôrg, 0, 0, 0, 
SCHED_FIFO
, 0xF))) {

322 
	`¥ötf
("CANNOT INIT USER SPACE CALLBACK SUPPORT\n");

325 
ªtvÆs
[0] = 
¨g
->
code
;

326 
¨g
->
code
 = 0;

327 i‡(
	`πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
ªtvÆs
[0], 
¨g
).
i
[
LOW
] < 0) {

328 
	`¥ötf
("CANNOT SET USER SPACE CALLBACK SUPPORT\n");

329 
	`π_èsk_dñëe
(
¨g
->
èsk
);

330 
	`‰ì
(
¨g
);

333 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

335 
	`π_make_h¨d_ªÆ_time
();

337 
	`π_•waô_u§_ˇŒback
(
¨g
->
ây
, 
ªtvÆs
);

338 i‡(!
ªtvÆs
[5]) ;

339 i‡(
ªtvÆs
[0]) {

340 (((*)(, ))
ªtvÆs
[0])(retvals[2],Ñetvals[3]);

342 i‡(
ªtvÆs
[1]) {

343 (((*)())
ªtvÆs
[1])(retvals[4]);

346 
	`π_make_so·_ªÆ_time
();

348 
	`π_èsk_dñëe
(
¨g
->
èsk
);

349 
	`‰ì
(
¨g
);

351 
	}
}

354 
RTAI_PROTO
(, 
π_•£t_ˇŒback_fun
, (
ây
, (*
ˇŒback_fun
)(, ), 
rxthrs
, 
txthrs
))

356 
ªt
;

357 
±hªad_t
 
thªad
;

358 °ru˘ { 
ây
; (*
ˇŒback_fun
)(, ); 
rxthrs
, 
txthrs
, 
code
; *
èsk
; } 
¨g
 = {Åty, cÆlback_fun,Ñxthrs,Åxthrs, 
_SPSET_CALLBACK
, 0 };

359 i‡((
ªt
 = 
	`πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_CALLBACK
, &
¨g
).
i
[
LOW
]Ë=
EINVAL
) {

360 *
¨gp
;

361 
¨gp
 = (*)
	`mÆloc
((
¨g
));

362 
	`mem˝y
(
¨gp
, &
¨g
, (arg));

363  
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
ˇŒback_thªad
, 
¨gp
);

365  
ªt
;

366 
	}
}

368 
RTAI_PROTO
(, 
π_•£t_îr_ˇŒback_fun
, (
ây
, (*
îr_ˇŒback_fun
)()))

370 
ªt
;

371 
±hªad_t
 
thªad
;

372 °ru˘ { 
ây
; (*
îr_ˇŒback_fun
)(); 
dummy1
, 
dummy2
, 
code
; *
èsk
; } 
¨g
 = {Åty,Éº_ˇŒback_fun, 0, 0, 
_SPSET_ERR_CALLBACK
, 0 };

373 i‡((
ªt
 = 
	`πai_lxπ
(
FUN_EXT_RTAI_SP
, 
SIZARG
, 
_SPSET_ERR_CALLBACK
, &
¨g
).
i
[
LOW
]Ë=
EINVAL
) {

374 *
¨gp
;

375 
¨gp
 = (*)
	`mÆloc
((
¨g
));

376 
	`mem˝y
(
¨gp
, &
¨g
, (arg));

377  
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
ˇŒback_thªad
, 
¨gp
);

379  
ªt
;

380 
	}
}

382 
ölöe
 
	$π_com_£tup
(
ây
, 
baud
, 
mode
, 
∑rôy
, 
°›bôs
, 
numbôs
, 
fifŸrig
)

384  
baud
 <0 ? 
	`π_•˛o£
(
ây
Ë: 
	`π_•›í
—ty, baud, 
numbôs
, 
°›bôs
, 
∑rôy
, 
mode
, 
fifŸrig
);

385 
	}
}

387 
ölöe
 
	$π_com_ªad
(
ây
, *
msg
, 
msg_size
)

389 
nŸrd
;

390 i‡((
nŸrd
 = 
	`π_•ªad
(
ây
, 
msg
, 
msg_size
)) >= 0) {

391  
	`abs
(
msg_size
Ë- 
nŸrd
;

393  
nŸrd
;

394 
	}
}

396 
ölöe
 
	$π_com_wrôe
(
ây
, *
msg
, 
msg_size
)

398 
nŸwr
;

399 i‡((
nŸwr
 = 
	`π_•wrôe
(
ây
, 
msg
, 
msg_size
)) >= 0) {

400  
	`abs
(
msg_size
Ë- 
nŸwr
;

402  
nŸwr
;

403 
	}
}

405 
	#π_com_˛ór_öput
(
ödx
Ë
	`π_•˛ór_rx
(ödx)

	)

406 
	#π_com_˛ór_ouçut
(
ödx
Ë
	`π_•˛ór_tx
(ödx)

	)

408 
	#π_com_wrôe_modem
(
ödx
, 
mask
, 
›
Ë
	`π_•£t_m¸
(ödx, mask, op)

	)

409 
	#π_com_ªad_modem
(
ödx
, 
mask
Ë
	`π_•gë_m§
(ödx, mask)

	)

411 
	#π_com_£t_mode
(
ödx
, 
mode
Ë
	`π_•£t_mode
(ödx, mode)

	)

412 
	#π_com_£t_fifŸrig
(
ödx
, 
fifŸrig
Ë
	`π_•£t_fifŸrig
(ödx, fifŸrig)

	)

414 
	#π_com_îr‹
(
ödx
Ë
	`π_•gë_îr
(ödx)

	)

	@/usr/realtime/include/rtai_shm.h

32 #i‚de‡
_RTAI_SHM_H


33 
	#_RTAI_SHM_H


	)

38 
	#GLOBAL_HEAP_ID
 0x9ac6d9e7

39 

	)

40 
	#USE_VMALLOC
 0

	)

41 
	#USE_GFP_KERNEL
 1

	)

42 
	#USE_GFP_ATOMIC
 2

	)

43 
	#USE_GFP_DMA
 3

	)

66 
	#πai_kmÆloc
(
«me
, 
size
) \

67 
	`π_shm_Æloc
(
«me
, 
size
, 
USE_VMALLOC
)

68 

	)

86 
	#πai_k‰ì
(
«me
) \

87 
	`π_shm_‰ì
(
«me
)

88 

	)

89 #i‡
deföed
(
__KERNEL__
)

91 
	~<löux/moduÀ.h
>

92 
	~<löux/vîsi⁄.h
>

93 
	~<löux/vmÆloc.h
>

94 
	~<löux/mm.h
>

97 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

98 
	~<löux/wøµî.h
>

100 
	~<löux/mm.h
>

101 
	#mem_m≠_ª£rve
(
p
Ë
	`SëPageRe£rved
’)

	)

102 
	#mem_m≠_uƒe£rve
(
p
Ë
	`CÀ¨PageRe£rved
’)

	)

106 
	#UVIRT_TO_KVA
(
adr
Ë
	`uvút_to_kva
(
	`pgd_off£t_k
◊dr), (adr))

	)

108 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,10)

109 
ölöe
 
	$ªm≠_∑ge_ønge
(
vm_¨ó_°ru˘
 *
vma
, 
uvaddr
, 
∑ddr
, 
size
, 
pg¥Ÿ_t
 
¥Ÿ
)

111  
	`ªm≠_p‚_ønge
(
vma
, 
uvaddr
, 
∑ddr
 >> 
PAGE_SHIFT
, 
size
, 
¥Ÿ
);

112 
	}
}

115 
	~<πai.h
>

118 
	~<πai_mÆloc.h
>

120 #i‚de‡
CONFIG_MMU


122 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

124  
adr
;

125 
	}
}

129 
ölöe
 
	$uvút_to_kva
(
pgd_t
 *
pgd
, 
adr
)

131 i‡(!
	`pgd_n⁄e
(*
pgd
Ë&& !
	`pgd_bad
(*pgd)) {

132 
pmd_t
 *
pmd
;

133 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,11)

134 
pmd
 = 
	`pmd_off£t
(
pgd
, 
adr
);

136 
pmd
 = 
	`pmd_off£t
(
	`pud_off£t
(
pgd
, 
adr
),ádr);

138 i‡(!
	`pmd_n⁄e
(*
pmd
)) {

139 
±e_t
 *
±ï
, 
±e
;

140 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,0)

141 
±ï
 = 
	`±e_off£t
(
pmd
, 
adr
);

143 
±ï
 = 
	`±e_off£t_kî√l
(
pmd
, 
adr
);

145 
±e
 = *
±ï
;

146 i‡(
	`±e_¥e£¡
(
±e
)) {

147  ((()
	`∑ge_addªss
(
	`±e_∑ge
(
±e
))Ë| (
adr
 & (
PAGE_SIZE
 - 1)));

152 
	}
}

154 
ölöe
 
	$kvút_to_∑
(
adr
)

156  
	`vút_to_phys
((*)
	`uvút_to_kva
(
	`pgd_off£t_k
(
adr
),ádr));

157 
	}
}

161 #ifde‡
__˝lu•lus


165 
__πai_shm_öô
();

167 
__πai_shm_exô
();

169 *
π_shm_Æloc
(
«me
,

170 
size
,

171 
su¥t
);

173 
	#π_shm_Æloc_adr
(
adr
, 
«me
, 
size
) \

174 
	`π_shm_Æloc
(
«me
, 
size
, 
su¥t
)

	)

176 
RTAI_SYSCALL_MODE
 
π_shm_‰ì
(
«me
);

178 *
π_hóp_›í
(
«me
,

179 
size
,

180 
su¥t
);

182 
	#π_hóp_›í_adr
(
adr
, 
«me
, 
size
, 
su¥t
) \

183 
	`π_hóp_›í
(
«me
, 
size
, 
su¥t
)

	)

185 
RTAI_SYSCALL_MODE
 *
π_hÆloc
(
size
);

187 
RTAI_SYSCALL_MODE
 
π_h‰ì
(*
addr
);

189 
RTAI_SYSCALL_MODE
 *
π_«med_hÆloc
(
«me
, 
size
);

191 
RTAI_SYSCALL_MODE
 
π_«med_h‰ì
(*
addr
);

193 *
π_«med_mÆloc
(
«me
,

194 
size
);

196 
π_«med_‰ì
(*
addr
);

198 *
rvmÆloc
(
size
);

200 
rv‰ì
(*
mem
,

201 
size
);

203 
rvmm≠
(*
mem
,

204 
memsize
,

205 
vm_¨ó_°ru˘
 *
vma
);

207 *
rkmÆloc
(*
size
,

208 
su¥t
);

210 
rk‰ì
(*
mem
,

211 
size
);

213 
rkmm≠
(*
mem
,

214 
memsize
,

215 
vm_¨ó_°ru˘
 *
vma
);

217 #ifde‡
__˝lu•lus


223 
	~<f˙é.h
>

224 
	~<uni°d.h
>

225 
	~<sys/mm™.h
>

226 
	~<sys/io˘l.h
>

227 
	~<πai_lxπ.h
>

231 
	#RTAI_SHM_DEV
 "/dev/πai_shm"

	)

233 
RTAI_PROTO
 (*, 
_π_shm_Æloc
, (*
°¨t
, 
«me
, 
size
, 
su¥t
, 
ishóp
))

235 
hook
;

236 *
adr
 = 
NULL
;

238 i‡((
hook
 = 
›í
(
RTAI_SHM_DEV
, 
O_RDWR
)) <= 0) {

239  
NULL
;

241 °ru˘ { 
«me
, 
¨g
, 
su¥t
; }árg = {Çame, 
size
, suprt };

242 #ifde‡
SHM_USE_LXRT


243 i‡((
size
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SHM_ALLOC
, &
¨g
).
i
[
LOW
])) {

245 i‡((
size
 = 
io˘l
(
hook
, 
SHM_ALLOC
, ()(&
¨g
)))) {

247 i‡((
adr
 = 
mm≠
(
°¨t
, 
size
, 
PROT_WRITE
 | 
PROT_READ
, 
MAP_SHARED
 | 
MAP_LOCKED
, 
hook
, 0)Ë=
MAP_FAILED
) {;

248 #ifde‡
SHM_USE_LXRT


249 
πai_lxπ
(
BIDX
, (
«me
), 
SHM_FREE
, &name);

251 
io˘l
(
hook
, 
SHM_FREE
, &
«me
);

253 } i‡(
ishóp
) {

254 
¨g
.¨g = ()
adr
;

255 #ifde‡
SHM_USE_LXRT


256 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_SET
, &
¨g
);

258 
io˘l
(
hook
, 
HEAP_SET
, &
¨g
);

263 
˛o£
(
hook
);

264  
adr
;

267 
	#π_shm_Æloc
(
«me
, 
size
, 
su¥t
) \

268 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
su¥t
, 0)

	)

270 
	#π_hóp_›í
(
«me
, 
size
, 
su¥t
) \

271 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
su¥t
, 1)

	)

297 
	#πai_mÆloc
(
«me
, 
size
) \

298 
	`_π_shm_Æloc
(0, 
«me
, 
size
, 
USE_VMALLOC
, 0)

299 

	)

343 
	#π_shm_Æloc_adr
(
°¨t_addªss
, 
«me
, 
size
, 
su¥t
) \

344 
	`_π_shm_Æloc
(
°¨t_addªss
, 
«me
, 
size
, 
su¥t
, 0)

	)

346 
	#π_hóp_›í_adr
(
°¨t
, 
«me
, 
size
, 
su¥t
) \

347 
	`_π_shm_Æloc
(
°¨t
, 
«me
, 
size
, 
su¥t
, 1)

	)

372 
	#πai_mÆloc_adr
(
°¨t_addªss
, 
«me
, 
size
) \

373 
	`_π_shm_Æloc
(
°¨t_addªss
, 
«me
, 
size
, 
USE_VMALLOC
, 0)

374 

	)

375 
RTAI_PROTO
(, 
π_shm_‰ì
, (
«me
))

377 
hook
, 
size
;

378 °ru˘ { *
«módr
; } 
¨g
 = { &
«me
 };

379 i‡((
hook
 = 
›í
(
RTAI_SHM_DEV
, 
O_RDWR
)) <= 0) {

384 #ifde‡
SHM_USE_LXRT


385 i‡((
size
 = 
πai_lxπ
(
BIDX
, 
SIZARG
, 
SHM_SIZE
, &
¨g
).
i
[
LOW
])) {

387 i‡((
size
 = 
io˘l
(
hook
, 
SHM_SIZE
, ()&
¨g
))) {

389 i‡(
munm≠
((*)
«me
, 
size
)) {

390 
size
 = 0;

393 
˛o£
(
hook
);

394  
size
;

416 
	#πai_‰ì
(
«me
, 
adr
) \

417 
	`π_shm_‰ì
(
«me
)

418 

	)

419 
RTAI_PROTO
(*, 
π_hÆloc
, (
size
))

421 °ru˘ { 
size
; } 
¨g
 = { size };

422  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_ALLOC
, &
¨g
).
v
[
LOW
];

425 
RTAI_PROTO
(, 
π_h‰ì
, (*
addr
))

427 °ru˘ { *
addr
; } 
¨g
 = {áddr };

428 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_FREE
, &
¨g
);

431 
RTAI_PROTO
(*, 
π_«med_hÆloc
, (
«me
, 
size
))

433 °ru˘ { 
«me
; 
size
; } 
¨g
 = {Çame, size };

434  
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_NAMED_ALLOC
, &
¨g
).
v
[
LOW
];

437 
RTAI_PROTO
(, 
π_«med_h‰ì
, (*
addr
))

439 °ru˘ { *
addr
; } 
¨g
 = {áddr };

440 
πai_lxπ
(
BIDX
, 
SIZARG
, 
HEAP_NAMED_FREE
, &
¨g
);

443 
RTAI_PROTO
(*, 
π_mÆloc
, (
size
))

445 °ru˘ { 
size
; } 
¨g
 = { size };

446  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MALLOC
, &
¨g
).
v
[
LOW
];

449 
RTAI_PROTO
(, 
π_‰ì
, (*
addr
))

451 °ru˘ { *
addr
; } 
¨g
 = {áddr };

452 
πai_lxπ
(
BIDX
, 
SIZARG
, 
FREE
, &
¨g
);

455 
RTAI_PROTO
(*, 
π_«med_mÆloc
, (
«me
, 
size
))

457 °ru˘ { 
«me
; 
size
; } 
¨g
 = {Çame, size };

458  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MALLOC
, &
¨g
).
v
[
LOW
];

461 
RTAI_PROTO
(, 
π_«med_‰ì
, (*
addr
))

463 °ru˘ { *
addr
; } 
¨g
 = {áddr };

464 
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_FREE
, &
¨g
);

490 
	#π_hóp_˛o£
(
«me
, 
adr
Ë
	`π_shm_‰ì
“ame)

	)

493 
	#π_hóp_öô
 
π_hóp_›í


	)

494 
	#π_hóp_¸óã
 
π_hóp_›í


	)

495 
	#π_hóp_acquúe
 
π_hóp_›í


	)

496 
	#π_hóp_öô_adr
 
π_hóp_›í_adr


	)

497 
	#π_hóp_¸óã_adr
 
π_hóp_›í_adr


	)

498 
	#π_hóp_acquúe_adr
 
π_hóp_›í_adr


	)

500 
	#π_hóp_dñëe
 
π_hóp_˛o£


	)

501 
	#π_hóp_de°roy
 
π_hóp_˛o£


	)

502 
	#π_hóp_ªÀa£
 
π_hóp_˛o£


	)

521 
	#π_globÆ_hóp_›í
(Ë
	`π_hóp_›í
(
GLOBAL_HEAP_ID
, 0, 0)

	)

539 
	#π_globÆ_hóp_˛o£
(Ë
	`π_hóp_˛o£
(
GLOBAL_HEAP_ID
, 0)

	)

	@/usr/realtime/include/rtai_signal.h

20 #i‚de‡
_RTAI_SIGNAL_H_


21 
	#_RTAI_SIGNAL_H_


	)

23 
	#RTAI_SIGNALS_IDX
 
BIDX


	)

25 
	~<πai_sched.h
>

27 
	#MAXSIGNALS
 16

	)

29 
	#SIGNAL_TASK_INIPRIO
 0

	)

31 
	sπ_sig«l_t
 { 
	mÊags
; 
RT_TASK
 *
	msigèsk
; };

33 
	ssigsu¥t_t
 { 
RT_TASK
 *
	msigèsk
; RT_TASK *
	mèsk
; 
	msig«l
; (*
	msighdl
)(, 
	mRT_TASK
 *); 
	m˝uid
; };

35 #ifde‡
__KERNEL__


37 
	#SIGNAL_ENBIT
 0

	)

38 
	#SIGNAL_PNDBIT
 1

	)

40 
	#SIGNAL_TASK_STACK_SIZE
 8192

	)

42 
RTAI_SYSCALL_MODE
 
π_sig«l_hñ≥r
(
RT_TASK
 *
èsk
);

44 
π_ªque°_sig«l
(
sig«l
, (*
sighdl
)(, 
RT_TASK
 *));

46 
RTAI_SYSCALL_MODE
 
	`π_ªque°_sig«l_
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
, 
sig«l
);

48 
RTAI_SYSCALL_MODE
 
	`π_ªÀa£_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

50 
RTAI_SYSCALL_MODE
 
	`π_íabÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

52 
RTAI_SYSCALL_MODE
 
	`π_dißbÀ_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

54 
RTAI_SYSCALL_MODE
 
	`π_åiggî_sig«l
(
sig«l
, 
RT_TASK
 *
èsk
);

56 
RTAI_SYSCALL_MODE
 
	`π_waô_sig«l
(
RT_TASK
 *
sigèsk
, RT_TASK *
èsk
);

60 
	~<sys/mm™.h
>

62 
	~<πai_lxπ.h
>

64 
	#SIGNAL_TASK_STACK_SIZE
 64*1024

	)

66 #i‚de‡
__SIGNAL_SUPPORT_FUN__


67 
	#__SIGNAL_SUPPORT_FUN__


	)

69 
	$sig«l_su¥t_fun
(
sigsu¥t_t
 *
fu«rg
)

71 
	ssigtsk_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; };

72 
	ssigªq_t
 { 
RT_TASK
 *
sigèsk
; RT_TASK *
èsk
; 
sig«l
; (*
sighdl
)(, RT_TASK *); };

73 
sigsu¥t_t
 
¨g
 = *
fu«rg
;

75 i‡((
¨g
.
sigèsk
 = 
	`π_thªad_öô
(
	`π_gë_«me
(0), 
SIGNAL_TASK_INIPRIO
, 0, 
SCHED_FIFO
, 1 <<árg.
˝uid
))) {

76 i‡(!
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigªq_t
), 
RT_SIGNAL_REQUEST
, &
¨g
).
i
[
LOW
]) {

77 
	`π_grow_™d_lock_°ack
(
SIGNAL_TASK_STACK_SIZE
/2);

78 
	`π_make_h¨d_ªÆ_time
();

79 
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
sigtsk_t
), 
RT_SIGNAL_WAITSIG
, &
¨g
).
i
[
LOW
]) {

80 
¨g
.
	`sighdl
◊rg.
sig«l
,árg.
èsk
);

82 
	`π_make_so·_ªÆ_time
();

84 
	`π_èsk_dñëe
(
¨g
.
sigèsk
);

86 
	}
}

90 
RTAI_PROTO
(, 
π_ªque°_sig«l
, (
sig«l
, (*
sighdl
)(, 
RT_TASK
 *)))

92 i‡(
sig«l
 >0 && 
sighdl
) {

93 
sigsu¥t_t
 
¨g
 = { 
NULL
, 
	`π_buddy
(), 
sig«l
, 
sighdl
 };

94 
¨g
.
˝uid
 = 
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (*), 
RT_SIGNAL_HELPER
, &¨g.
sigèsk
).
i
[
LOW
];

95 i‡(
	`π_thªad_¸óã
((*)
sig«l_su¥t_fun
, &
¨g
, 
SIGNAL_TASK_STACK_SIZE
)) {

96  
	`πai_lxπ
(
RTAI_SIGNALS_IDX
, (
RT_TASK
 *), 
RT_SIGNAL_HELPER
, &
¨g
.
èsk
).
i
[
LOW
];

99  -
EINVAL
;

100 
	}
}

102 
RTAI_PROTO
(, 
π_ªÀa£_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

104 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

105  
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_RELEASE
, &
¨g
).
	gi
[
LOW
];

108 
RTAI_PROTO
(, 
π_íabÀ_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

110 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

111 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_ENABLE
, &
¨g
);

114 
RTAI_PROTO
(, 
π_dißbÀ_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

116 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

117 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_DISABLE
, &
¨g
);

120 
RTAI_PROTO
(, 
π_åiggî_sig«l
, (
sig«l
, 
RT_TASK
 *
èsk
))

122 °ru˘ { 
	gsig«l
; 
RT_TASK
 *
	gèsk
; } 
	g¨g
 = { 
sig«l
, 
èsk
 };

123 
πai_lxπ
(
RTAI_SIGNALS_IDX
, 
SIZARG
, 
RT_SIGNAL_TRIGGER
, &
¨g
);

	@/usr/realtime/include/rtai_spl.h

19 #i‚de‡
_RTAI_SPL_H


20 
	#_RTAI_SPL_H


	)

22 
	~<πai_£m.h
>

24 
	gπai_•l
;

26 #ifde‡
__KERNEL__


28 #i‚de‡
__˝lu•lus


30 
	sπai_•l
 {

31 *
	mowndby
;

32 
	mcou¡
;

33 
	mÊags
;

34 } 
	tSPL
;

40 
RTAI_SYSCALL_MODE
 
π_•l_öô
(
πai_•l
 *
•l
);

42 
RTAI_SYSCALL_MODE
 
π_•l_dñëe
(
πai_•l
 *
•l
);

44 
RTAI_SYSCALL_MODE
 
SPL
 *
_π_«med_•l_öô
(
•l_«me
);

46 
RTAI_SYSCALL_MODE
 
π_«med_•l_dñëe
(
SPL
 *
•l
);

48 
RTAI_SYSCALL_MODE
 
π_•l_lock
(
πai_•l
 *
•l
);

50 
RTAI_SYSCALL_MODE
 
π_•l_lock_if
(
πai_•l
 *
•l
);

52 
RTAI_SYSCALL_MODE
 
π_•l_lock_timed
(
πai_•l
 *
•l
,

53 
ns
);

55 
RTAI_SYSCALL_MODE
 
π_•l_u∆ock
(
πai_•l
 *
•l
);

57 #ifde‡
__˝lu•lus


63 #ifde‡
__˝lu•lus


67 
RTAI_PROTO
(
πai_•l
 *, 
π_•l_öô
,(
«me
))

69 °ru˘ { 
«me
; } 
¨g
 = {Çame };

70  (
πai_•l
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SPL_INIT
, &
¨g
).
v
[
LOW
];

73 
RTAI_PROTO
(, 
π_•l_dñëe
,(
πai_•l
 *
•l
))

75 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

76  
πai_lxπ
(
BIDX
, 
SIZARG
, 
LXRT_SPL_DELETE
, &
¨g
).
i
[
LOW
];

79 
RTAI_PROTO
(
πai_•l
 *, 
π_«med_•l_öô
,(c⁄° *
«me
))

81 °ru˘ { 
«me
; } 
¨g
 = { 
«m2num
(name) };

82  (
πai_•l
 *)
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SPL_INIT
, &
¨g
).
v
[
LOW
];

85 
RTAI_PROTO
(, 
π_«med_•l_dñëe
,(
πai_•l
 *
•l
))

87 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

88  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_SPL_DELETE
, &
¨g
).
i
[
LOW
];

91 
RTAI_PROTO
(, 
π_•l_lock
,(
πai_•l
 *
•l
))

93 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

94  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK
, &
¨g
).
i
[
LOW
];

97 
RTAI_PROTO
(, 
π_•l_lock_if
,(
πai_•l
 *
•l
))

99 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

100  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK_IF
, &
¨g
).
i
[
LOW
];

103 
RTAI_PROTO
(, 
π_•l_lock_timed
,(
πai_•l
 *
•l
, 
RTIME
 
dñay
))

105 °ru˘ { 
πai_•l
 *
•l
; 
RTIME
 
dñay
; } 
¨g
 = { spl, delay };

106  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_LOCK_TIMED
, &
¨g
).
i
[
LOW
];

109 
RTAI_PROTO
(, 
π_•l_u∆ock
,(
πai_•l
 *
•l
))

111 °ru˘ { 
πai_•l
 *
•l
; } 
¨g
 = { spl };

112  
πai_lxπ
(
BIDX
, 
SIZARG
, 
SPL_UNLOCK
, &
¨g
).
i
[
LOW
];

115 #ifde‡
__˝lu•lus


121 #i‡!
deföed
(
__KERNEL__
Ë|| deföed(
__˝lu•lus
)

123 
	sπai_•l
 {

124 
›aque
;

125 } 
	tSPL
;

	@/usr/realtime/include/rtai_tasklets.h

26 #i‚de‡
_RTAI_TASKLETS_H


27 
	#_RTAI_TASKLETS_H


	)

33 
	~<πai_ty≥s.h
>

34 
	~<πai_sched.h
>

36 
	#TASKLETS_IDX
 1

	)

38 
	#INIT
 0

	)

39 
	#DELETE
 1

	)

40 
	#TASK_INSERT
 2

	)

41 
	#TASK_REMOVE
 3

	)

42 
	#USE_FPU
 4

	)

43 
	#TIMER_INSERT
 5

	)

44 
	#TIMER_REMOVE
 6

	)

45 
	#SET_TASKLETS_PRI
 7

	)

46 
	#SET_FIR_TIM
 8

	)

47 
	#SET_PER
 9

	)

48 
	#SET_HDL
 10

	)

49 
	#SET_DAT
 11

	)

50 
	#EXEC_TASKLET
 12

	)

51 
	#WAIT_IS_HARD
 13

	)

52 
	#SET_TSK_PRI
 14

	)

53 
	#REG_TASK
 15

	)

54 
	#GET_TMR_TIM
 16

	)

55 
	#GET_TMR_OVRN
 17

	)

59 
	#PTIMER_CREATE
 18

	)

60 
	#PTIMER_SETTIME
 19

	)

61 
	#PTIMER_OVERRUN
 20

	)

62 
	#PTIMER_GETTIME
 21

	)

63 
	#PTIMER_DELETE
 22

	)

65 
	#POSIX_TIMERS
 128

	)

69 
	gπ_èsk_°ru˘
;

71 
	#TASKLET_STACK_SIZE
 8196

	)

73 
	sπ_u•_èskÀt_°ru˘
 {

74 
π_èskÀt_°ru˘
 *
	m√xt
, *
	m¥ev
;

75 
	m¥i‹ôy
, 
	mu£s_Âu
, 
	m˝uid
;

76 
RTIME
 
	mfúög_time
, 
	m≥riod
;

77 (*
	mh™dÀr
)();

78 
	md©a
, 
	mid
;

79 
	mthªad
;

80 
π_èsk_°ru˘
 *
	mèsk
;

81 
π_èskÀt_°ru˘
 *
	mu•èskÀt
;

82 
	movîrun
;

85 #ifde‡
__KERNEL__


87 
	sπ_èskÀt_°ru˘
 {

88 
π_èskÀt_°ru˘
 *
	m√xt
, *
	m¥ev
;

89 
	m¥i‹ôy
, 
	mu£s_Âu
, 
	m˝uid
;

90 
RTIME
 
	mfúög_time
, 
	m≥riod
;

91 (*
	mh™dÀr
)();

92 
	md©a
, 
	mid
;

93 
	mthªad
;

94 
π_èsk_°ru˘
 *
	mèsk
;

95 
π_èskÀt_°ru˘
 *
	mu•èskÀt
;

96 
	movîrun
;

97 #ifde‡ 
CONFIG_RTAI_LONG_TIMED_LIST


98 
rb_roŸ_t
 
	mrbr
;

99 
rb_node_t
 
	mrbn
;

103 #ifde‡
__˝lu•lus


107 
__πai_èskÀts_öô
();

109 
__πai_èskÀts_exô
();

111 
π_èskÀt_°ru˘
 *
π_öô_èskÀt
();

113 
RTAI_SYSCALL_MODE
 
π_dñëe_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

115 
RTAI_SYSCALL_MODE
 
π_ö£π_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
, (*
h™dÀr
)(), 
d©a
, 
id
, 
pid
);

117 
RTAI_SYSCALL_MODE
 
π_ªmove_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

119 
π_èskÀt_°ru˘
 *
π_föd_èskÀt_by_id
(
id
);

121 
RTAI_SYSCALL_MODE
 
π_exec_èskÀt
(
π_èskÀt_°ru˘
 *
èskÀt
);

123 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_¥i‹ôy
(
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
);

125 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_h™dÀr
(
π_èskÀt_°ru˘
 *
èskÀt
, (*
h™dÀr
)());

127 
	#π_Á°_£t_èskÀt_h™dÀr
(
t
, 
h
Ëdÿ{ (t)->
h™dÀr
 = (h); } 0)

	)

129 
RTAI_SYSCALL_MODE
 
π_£t_èskÀt_d©a
(
π_èskÀt_°ru˘
 *
èskÀt
, 
d©a
);

131 
	#π_Á°_£t_èskÀt_d©a
(
t
, 
d
) \

133 (
t
)->
d©a
 = (
d
); \

134 } 0)

	)

156 
RTAI_SYSCALL_MODE
 
π_èsk_°ru˘
 *
π_èskÀt_u£_Âu
(
π_èskÀt_°ru˘
 *
èskÀt
, 
u£_Âu
);

173 
	#π_öô_timî
 
π_öô_èskÀt


	)

190 
	#π_dñëe_timî
 
π_dñëe_èskÀt


	)

192 
RTAI_SYSCALL_MODE
 
π_ö£π_timî
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
, 
RTIME
 
fúög_time
, RTIME 
≥riod
, (*
h™dÀr
)(), 
d©a
, 
pid
);

194 
RTAI_SYSCALL_MODE
 
π_ªmove_timî
(
π_èskÀt_°ru˘
 *
timî
);

196 
RTAI_SYSCALL_MODE
 
π_£t_timî_¥i‹ôy
(
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
);

198 
RTAI_SYSCALL_MODE
 
π_£t_timî_fúög_time
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
);

200 
RTAI_SYSCALL_MODE
 
π_£t_timî_≥riod
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
≥riod
);

202 
RTAI_SYSCALL_MODE
 
π_gë_timî_times
(
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
timî_times
[]);

204 
RTAI_SYSCALL_MODE
 
RTIME
 
π_gë_timî_ovîrun
(
π_èskÀt_°ru˘
 *
timî
);

208 
RTAI_SYSCALL_MODE
 
timî_t
 
π_±imî_¸óã
(
π_èskÀt_°ru˘
 *
timî
, (*
h™dÀr
)(), 
d©a
, 
pid
, 
thªad
);

210 
RTAI_SYSCALL_MODE
 
π_±imî_£âime
(
timî_t
 
timî
, c⁄° 
ôimî•ec
 *
vÆue
, 
d©a
, 
Êags
);

212 
RTAI_SYSCALL_MODE
 
π_±imî_ovîrun
(
timî_t
 
timî
);

214 
RTAI_SYSCALL_MODE
 
π_±imî_gëtime
(
timî_t
 
timî
, 
RTIME
 
timî_times
[]);

216 
RTAI_SYSCALL_MODE
 
π_±imî_dñëe
(
timî_t
 
timî
, 
•a˚
);

220 
	#π_Á°_£t_timî_≥riod
(
t
, 
p
) \

222 (
t
)->
≥riod
 = (
p
); \

223 } 0)

	)

247 
	#π_£t_timî_h™dÀr
 
π_£t_èskÀt_h™dÀr


	)

249 
	#π_Á°_£t_timî_h™dÀr
(
t
, 
h
Ëdÿ{ (t)->
h™dÀr
 = (h); } 0)

	)

272 
	#π_£t_timî_d©a
 
π_£t_èskÀt_d©a


	)

274 
	#π_Á°_£t_timî_d©a
(
t
, 
d
Ëdÿ{ (t)->
d©a
 = (d); } 0)

	)

276 
	#π_timî_u£_Âu
 
π_èskÀt_u£_Âu


	)

278 
RTAI_SYSCALL_MODE
 
π_waô_èskÀt_is_h¨d
(
π_èskÀt_°ru˘
 *
èskÀt
, 
thªad
);

280 
RTAI_SYSCALL_MODE
 
π_ªgi°î_èsk
(
π_èskÀt_°ru˘
 *
èskÀt
, π_èskÀt_°ru˘ *
u•èskÀt
, 
π_èsk_°ru˘
 *
èsk
);

282 #ifde‡
__˝lu•lus


288 
	~<sys/ty≥s.h
>

289 
	~<sys/waô.h
>

290 
	~<sys/mm™.h
>

291 
	~<°d¨g.h
>

293 
	~<πai_usi.h
>

294 
	~<πai_lxπ.h
>

296 
	#π_èskÀt_°ru˘
 
π_u•_èskÀt_°ru˘


	)

298 
	sπ_èskÀt_°ru˘
 {

299 
π_èskÀt_°ru˘
 *
√xt
, *
¥ev
;

300 
¥i‹ôy
, 
u£s_Âu
, 
˝uid
;

301 
RTIME
 
fúög_time
, 
≥riod
;

302 (*
h™dÀr
)();

303 
d©a
, 
id
;

304 
thªad
;

305 
π_èsk_°ru˘
 *
èsk
;

306 
π_èskÀt_°ru˘
 *
u•èskÀt
;

307 
ovîrun
;

308 #ifde‡ 
CONFIG_RTAI_LONG_TIMED_LIST


309 °ru˘ { *
rb_∑ª¡
; 
rb_cﬁ‹
; *
rb_right
, *
rb_À·
; } 
rbn
;

310 °ru˘ { *
rb_node
; } 
rbr
;

315 #i‚de‡
__SUPPORT_TASKLET__


316 
	#__SUPPORT_TASKLET__


	)

318 
	ssuµ‹t_èskÀt_s
 { 
π_èskÀt_°ru˘
 *
	mèskÀt
; 
±hªad_t
 
	mthªad
; vﬁ©ûê
	md⁄e
; };

320 
	$suµ‹t_èskÀt
(
suµ‹t_èskÀt_s
 *
¨gs
)

322 
RT_TASK
 *
èsk
;

323 
π_èskÀt_°ru˘
 
u•èskÀt
;

325 i‡((
èsk
 = 
	`π_thªad_öô
(()
¨gs
->
èskÀt
, 98, 0, 
SCHED_FIFO
, 0xF))) {

327 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
, *
u•èskÀt
; 
RT_TASK
 *
èsk
; } 
ªg
 = { 
¨gs
->tasklet, &usptasklet,Åask };

328 
	`πai_lxπ
(
TASKLETS_IDX
, (
ªg
), 
REG_TASK
, &reg);

330 
	`π_grow_™d_lock_°ack
(
TASKLET_STACK_SIZE
/2);

331 
	`mlockÆl
(
MCL_CURRENT
 | 
MCL_FUTURE
);

332 
	`π_make_h¨d_ªÆ_time
();

333 
¨gs
->
d⁄e
 = 1;

335 
	`π_èsk_su•íd
(
èsk
);

336 i‡(
u•èskÀt
.
h™dÀr
) {

337 
u•èskÀt
.
	`h™dÀr
(u•èskÀt.
d©a
);

342 
	`πai_°i
();

343 
	`π_make_so·_ªÆ_time
();

344 
	`π_èsk_dñëe
(
èsk
);

347 
	`¥ötf
("CANNOT INIT SUPPORT TASKLET\n");

350 
	}
}

353 #ifde‡
__˝lu•lus


357 
RTAI_PROTO
(, 
π_dñëe_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
));

359 
RTAI_PROTO
(
π_èskÀt_°ru˘
 *, 
π_öô_èskÀt
, ())

361 
is_h¨d
;

362 
suµ‹t_èskÀt_s
 
¨g
;

364 i‡((
¨g
.
èskÀt
 = (
π_èskÀt_°ru˘
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
INIT
, &¨g).
v
[
LOW
])) {

365 i‡((
is_h¨d
 = 
π_is_h¨d_ªÆ_time
(
NULL
))) {

366 
π_make_so·_ªÆ_time
();

368 
¨g
.
d⁄e
 = 0;

369 i‡((
¨g
.
thªad
 = 
π_thªad_¸óã
((*)
suµ‹t_èskÀt
, &¨g.
èskÀt
, 
TASKLET_STACK_SIZE
))) {

370 
i
;

371 
	#POLLS_PER_SEC
 100

	)

372 
i
 = 0; i < 
POLLS_PER_SEC
/5 && !
¨g
.
d⁄e
; i++) {

373 
time•ec
 
dñay
 = { 0, 1000000000/
POLLS_PER_SEC
 };

374 
«no¶ìp
(&
dñay
, 
NULL
);

376 #unde‡
POLLS_PER_SEC


377 i‡(!
¨g
.
d⁄e
 || 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
WAIT_IS_HARD
, &¨g).
i
[
LOW
]) {

378 
nŸd⁄e
;

381 
nŸd⁄e
:

382 
π_dñëe_èskÀt
(
¨g
.
èskÀt
);

383 
¨g
.
èskÀt
 = 
NULL
;

385 i‡(
is_h¨d
) {

386 
π_make_h¨d_ªÆ_time
();

389  
¨g
.
èskÀt
;

392 
	#π_öô_timî
 
π_öô_èskÀt


	)

394 
RTAI_PROTO
(, 
π_dñëe_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

396 
thªad
;

397 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

398 i‡((
thªad
 = 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
DELETE
, &
¨g
).
i
[
LOW
])) {

399 
π_thªad_joö
(
thªad
);

403 
	#π_dñëe_timî
 
π_dñëe_èskÀt


	)

405 
RTAI_PROTO
(, 
π_ö£π_timî
,(
π_èskÀt_°ru˘
 *
timî
,

406 
¥i‹ôy
,

407 
RTIME
 
fúög_time
,

408 
RTIME
 
≥riod
,

409 (*
h™dÀr
)(),

410 
d©a
,

411 
pid
))

413 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
¥i‹ôy
; 
RTIME
 
fúög_time
; RTIME 
≥riod
; (*
h™dÀr
)(); 
d©a
; 
pid
; } 
¨g
 = {Åimer,Öriority, firing_time,Öeriod, handler, data,Öid };

414  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TIMER_INSERT
, &
¨g
).
i
[
LOW
];

417 
RTAI_PROTO
(, 
π_ªmove_timî
, (
π_èskÀt_°ru˘
 *
timî
))

419 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; } 
¨g
 = {Åimer };

420 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TIMER_REMOVE
, &
¨g
);

423 
RTAI_PROTO
(, 
π_£t_timî_¥i‹ôy
, (
π_èskÀt_°ru˘
 *
timî
, 
¥i‹ôy
))

425 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
¥i‹ôy
; } 
¨g
 = {Åimer,Öriority };

426 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_TASKLETS_PRI
, &
¨g
);

429 
RTAI_PROTO
(, 
π_£t_timî_fúög_time
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
fúög_time
))

431 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 
fúög_time
; } 
¨g
 = {Åimer, firing_time };

432 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_FIR_TIM
, &
¨g
);

435 
RTAI_PROTO
(, 
π_£t_timî_≥riod
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
≥riod
))

437 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 
≥riod
; } 
¨g
 = {Åimer,Öeriod };

438 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_PER
, &
¨g
);

441 
RTAI_PROTO
(, 
π_gë_timî_times
, (
π_èskÀt_°ru˘
 *
timî
, 
RTIME
 
timî_times
[]))

443 i‡(
timî_times
) {

444 
RTIME
 
…imî_times
[2];

445 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; 
RTIME
 *
timî_times
; } 
¨g
 = {Åimî, 
…imî_times
 };

446 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
GET_TMR_TIM
, &
¨g
);

447 
mem˝y
(
timî_times
, 
…imî_times
, (ltimer_times));

451 
RTAI_PROTO
(
RTIME
, 
π_gë_timî_ovîrun
, (
π_èskÀt_°ru˘
 *
timî
 ))

453 °ru˘ { 
π_èskÀt_°ru˘
 *
timî
; } 
¨g
 = {Åimer };

454  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
GET_TMR_OVRN
, &
¨g
).
π
;

457 
RTAI_PROTO
(, 
π_£t_èskÀt_h™dÀr
, (
π_èskÀt_°ru˘
 *
èskÀt
, (*
h™dÀr
)()))

459 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; (*
h™dÀr
)(); } 
¨g
 = {Åasklet, handler };

460  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_HDL
, &
¨g
).
i
[
LOW
];

463 
	#π_£t_timî_h™dÀr
 
π_£t_èskÀt_h™dÀr


	)

465 
RTAI_PROTO
(, 
π_£t_èskÀt_d©a
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
d©a
))

467 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
d©a
; } 
¨g
 = {Åasklet, data };

468 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_DAT
, &
¨g
);

471 
	#π_£t_timî_d©a
 
π_£t_èskÀt_d©a


	)

473 
RTAI_PROTO
(
RT_TASK
 *, 
π_èskÀt_u£_Âu
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
u£_Âu
))

475 
RT_TASK
 *
èsk
;

476 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
u£_Âu
; } 
¨g
 = {Åasklet, use_fpu };

477 i‡((
èsk
 = (
RT_TASK
*)
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
USE_FPU
, &
¨g
).
v
[
LOW
])) {

478 
π_èsk_u£_Âu
(
èsk
, 
u£_Âu
);

480  
èsk
;

483 
	#π_timî_u£_Âu
 
π_èskÀt_u£_Âu


	)

485 
RTAI_PROTO
(, 
π_ö£π_èskÀt
,(
π_èskÀt_°ru˘
 *
èskÀt
,

486 
¥i‹ôy
,

487 (*
h™dÀr
)(),

488 
d©a
,

489 
id
,

490 
pid
))

492 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
¥i‹ôy
; (*
h™dÀr
)(); 
d©a
; 
id
; 
pid
; } 
¨g
 = {Åasklet,Öriority, handler, data, id,Öid };

493  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TASK_INSERT
, &
¨g
).
i
[
LOW
];

496 
RTAI_PROTO
(, 
π_£t_èskÀt_¥i‹ôy
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
¥i‹ôy
))

498 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; 
¥i‹ôy
; } 
¨g
 = {Åasklet,Öriority };

499 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
SET_TSK_PRI
, &
¨g
);

502 
RTAI_PROTO
(, 
π_ªmove_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

504 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

505 
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
TASK_REMOVE
, &
¨g
);

508 
RTAI_PROTO
(, 
π_exec_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
))

510 °ru˘ { 
π_èskÀt_°ru˘
 *
èskÀt
; } 
¨g
 = {Åasklet };

511  
πai_lxπ
(
TASKLETS_IDX
, 
SIZARG
, 
EXEC_TASKLET
, &
¨g
).
i
[
LOW
];

514 
	~<°dlib.h
>

516 
	sπ_èskÀts_°ru˘
 { vﬁ©ûê
ö
, 
out
, 
avb
, 
¡askÀts
; 
π_èskÀt_°ru˘
 **
èskÀts
; 
lock
; };

518 
RTAI_PROTO
(
π_èskÀts_°ru˘
 *, 
π_¸óã_èskÀts
, (
¡askÀts
))

520 
π_èskÀts_°ru˘
 *
èskÀts
;

521 i‡((
èskÀts
 = (
π_èskÀts_°ru˘
 *)
mÆloc
((rt_tasklets_struct)))) {

522 i‡((
èskÀts
->èskÀt†(
π_èskÀt_°ru˘
 **)
mÆloc
(
¡askÀts
*(rt_tasklet_struct *)))) {

523 
i
;

524 
i
 = 0; i < 
¡askÀts
; i++) {

525 i‡(!(
èskÀts
->èskÀts[
i
] = 
π_öô_èskÀt
())) {

526 
k
;

527 
k
 = 0; k < 
i
; k++) {

528 
π_dñëe_èskÀt
(
èskÀts
->èskÀts[
k
]);

530 
‰ì
(
èskÀts
->tasklets);

531 
‰ì_èskÀts
;

534 
èskÀts
->
lock
 = 0;

535 
èskÀts
->
¡askÀts
 =ÅaskÀts->
avb
 =ÅaskÀts->
ö
 =ÅaskÀts->
out
 =Çtasklets;

536  
èskÀts
;

538 
‰ì_èskÀts
:

539 
‰ì
(
èskÀts
);

542  
NULL
;

545 
	#π_¸óã_timîs
 
π_¸óã_èskÀts


	)

547 
RTAI_PROTO
(, 
π_de°roy_èskÀts
, (
π_èskÀts_°ru˘
 *
èskÀts
))

549 
i
;

550 
i
 = 0; i < 
èskÀts
->
¡askÀts
; i++) {

551 
π_dñëe_èskÀt
(
èskÀts
->èskÀts[
i
]);

553 
‰ì
(
èskÀts
->tasklets);

554 
‰ì
(
èskÀts
);

557 
	#π_de°roy_timîs
 
π_de°roy_èskÀts


	)

559 
	~<asm/πai_©omic.h
>

561 
RTAI_PROTO
(
π_èskÀt_°ru˘
 *, 
π_gë_èskÀt
, (
π_èskÀts_°ru˘
 *
èskÀts
))

563 
π_èskÀt_°ru˘
 *
èskÀt
;

564 
©omic_cmpxchg
((*)&
èskÀts
->
lock
, 0, 1));

565 i‡(
èskÀts
->
avb
 > 0) {

566 i‡(
èskÀts
->
out
 >èskÀts->
¡askÀts
) {

567 
èskÀts
->
out
 = 0;

569 
èskÀts
->
avb
--;

570 
èskÀt
 = 
èskÀts
->èskÀts[èskÀts->
out
++];

571 
èskÀts
->
lock
 = 0;

572  
èskÀt
;

574 
èskÀts
->
lock
 = 0;

575  
NULL
;

578 
	#π_gë_timî
 
π_gë_èskÀt


	)

580 
RTAI_PROTO
(, 
π_gvb_èskÀt
, (
π_èskÀt_°ru˘
 *
èskÀt
, 
π_èskÀts_°ru˘
 *
èskÀts
))

582 
©omic_cmpxchg
((*)&
èskÀts
->
lock
, 0, 1));

583 i‡(
èskÀts
->
avb
 <ÅaskÀts->
¡askÀts
) {

584 i‡(
èskÀts
->
ö
 >èskÀts->
¡askÀts
) {

585 
èskÀts
->
ö
 = 0;

587 
èskÀts
->
avb
++;

588 
èskÀts
->èskÀts[èskÀts->
ö
++] = 
èskÀt
;

589 
èskÀts
->
lock
 = 0;

592 
èskÀts
->
lock
 = 0;

593  
EINVAL
;

596 
	#π_gvb_timî
 
π_gvb_èskÀt


	)

598 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_tbx.h

21 #i‚de‡
_RTAI_RT_MSGQ_H


22 
	#_RTAI_RT_MSGQ_H


	)

24 
	~<löux/vîsi⁄.h
>

25 
	~<πai_£m.h
>

27 
	#MSGQ_INIT
 
TBX_INIT


	)

28 
	#MSGQ_DELETE
 
TBX_DELETE


	)

29 
	#NAMED_MSGQ_INIT
 
NAMED_TBX_INIT


	)

30 
	#NAMED_MSGQ_DELETE
 
NAMED_TBX_DELETE


	)

31 
	#MSG_SEND
 
TBX_SEND


	)

32 
	#MSG_SEND_IF
 
TBX_SEND_IF


	)

33 
	#MSG_SEND_UNTIL
 
TBX_SEND_UNTIL


	)

34 
	#MSG_SEND_TIMED
 
TBX_SEND_TIMED


	)

35 
	#MSG_RECEIVE
 
TBX_RECEIVE


	)

36 
	#MSG_RECEIVE_IF
 
TBX_RECEIVE_IF


	)

37 
	#MSG_RECEIVE_UNTIL
 
TBX_RECEIVE_UNTIL


	)

38 
	#MSG_RECEIVE_TIMED
 
TBX_RECEIVE_TIMED


	)

39 
	#MSG_BROADCAST
 
TBX_BROADCAST


	)

40 
	#MSG_BROADCAST_IF
 
TBX_BROADCAST_IF


	)

41 
	#MSG_BROADCAST_UNTIL
 
TBX_BROADCAST_UNTIL


	)

42 
	#MSG_BROADCAST_TIMED
 
TBX_BROADCAST_TIMED


	)

43 
	#MSG_EVDRP
 
TBX_URGENT


	)

45 
	#TBX
 
RT_MSGQ


	)

47 #ifde‡
__KERNEL__


49 
	sπ_msgh
 {

50 *
	mmÆloc
;

51 
	mbrﬂdˇ°
;

52 
	msize
;

53 
	m¥i‹ôy
;

54 *
	m√xt
;

55 } 
	tRT_MSGH
;

57 
	#RT_MSGH_SIZE
 ((
RT_MSGH
))

	)

59 
	sπ_msg
 {

60 
RT_MSGH
 
	mhdr
;

61 
	mmsg
[1];

62 } 
	tRT_MSG
;

64 
	sπ_msgq
 {

65 
	mnmsg
;

66 
	mÁ°size
;

67 
	m¶Ÿ
;

68 **
	m¶Ÿs
;

69 *
	mfú°msg
;

70 
SEM
 
	mª˚ivîs
, 
	m£ndîs
;

71 
SEM
 
	mª˚ived
, 
	m‰e¶Ÿs
;

72 
SEM
 
	mbrﬂdˇ°
;

73 
•ölock_t
 
	mlock
;

74 } 
	tRT_MSGQ
;

76 
	~<löux/ty≥s.h
>

78 #ifde‡
__˝lu•lus


82 
__πai_msg_queue_öô
();

84 
__πai_msg_queue_exô
();

86 
RTAI_SYSCALL_MODE
 
π_msgq_öô
(
RT_MSGQ
 *
msgq
, 
nmsg
, 
msg_size
);

88 
RTAI_SYSCALL_MODE
 
π_msgq_dñëe
(
RT_MSGQ
 *
msgq
);

90 
RTAI_SYSCALL_MODE
 
RT_MSGQ
 *
_π_«med_msgq_öô
(
msgq_«me
, 
nmsg
, 
size
);

91 
ölöe
 
RT_MSGQ
 *
π_«med_msgq_öô
(c⁄° *
msgq_«me
, 
nmsg
, 
size
)

93  
_π_«med_msgq_öô
(
«m2num
(
msgq_«me
), 
nmsg
, 
size
);

96 
RTAI_SYSCALL_MODE
 
π_«med_msgq_dñëe
(
RT_MSGQ
 *
msgq
);

98 
RTAI_SYSCALL_MODE
 
_π_msg_£nd
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

99 
ölöe
 
π_msg_£nd
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

101  
_π_msg_£nd
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

104 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

105 
ölöe
 
π_msg_£nd_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

107  
_π_msg_£nd_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

110 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

111 
ölöe
 
π_msg_£nd_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
)

113  
_π_msg_£nd_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

116 
RTAI_SYSCALL_MODE
 
_π_msg_£nd_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

117 
ölöe
 
π_msg_£nd_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
)

119  
_π_msg_£nd_timed
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

122 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

123 
ölöe
 
π_msg_ª˚ive
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

125  
_π_msg_ª˚ive
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

128 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

129 
ölöe
 
π_msg_ª˚ive_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

131  
_π_msg_ª˚ive_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

134 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

135 
ölöe
 
π_msg_ª˚ive_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
u¡û
)

137  
_π_msg_ª˚ive_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

140 
RTAI_SYSCALL_MODE
 
_π_msg_ª˚ive_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

141 
ölöe
 
π_msg_ª˚ive_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
RTIME
 
dñay
)

143  
_π_msg_ª˚ive_timed
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

146 
RTAI_SYSCALL_MODE
 
_π_msg_evdΩ
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
, 
•a˚
);

147 
ölöe
 
π_msg_evdΩ
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥i
)

149  
_π_msg_evdΩ
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

152 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

153 
ölöe
 
π_msg_brﬂdˇ°
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

155  
_π_msg_brﬂdˇ°
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

158 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
•a˚
);

159 
ölöe
 
π_msg_brﬂdˇ°_if
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
)

161  
_π_msg_brﬂdˇ°_if
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 1);

164 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
, 
•a˚
);

165 
ölöe
 
π_msg_brﬂdˇ°_u¡û
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
u¡û
)

167  
_π_msg_brﬂdˇ°_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
u¡û
, 1);

170 
RTAI_SYSCALL_MODE
 
_π_msg_brﬂdˇ°_timed
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
, 
•a˚
);

171 
ölöe
 
π_msg_brﬂdˇ°_dñay
(
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥i
, 
RTIME
 
dñay
)

173  
_π_msg_brﬂdˇ°_u¡û
(
msgq
, 
msg
, 
msg_size
, 
msg¥i
, 
dñay
, 1);

176 #ifde‡
__˝lu•lus


182 
	~<sig«l.h
>

183 
	~<πai_lxπ.h
>

185 
π_msgh
;

187 #ifde‡
__˝lu•lus


191 
	sπ_msgq
 {

192 
dummy
;

193 } 
	tRT_MSGQ
;

195 
RTAI_PROTO
(
RT_MSGQ
 *, 
π_msgq_öô
, (
msgq
, 
nmsg
, 
msg_size
))

197 °ru˘ { 
msgq
; 
nmsg
; 
msg_size
; } 
¨g
 = { msgq,Çmsg, msg_size };

198  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_INIT
, &
¨g
).
v
[
LOW
];

201 
RTAI_PROTO
(, 
π_msgq_dñëe
, (
RT_MSGQ
 *
msgq
))

203 °ru˘ { 
RT_MSGQ
 *
msgq
; } 
¨g
 = { msgq };

204  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_DELETE
, &
¨g
).
i
[
LOW
];

207 
RTAI_PROTO
(
RT_MSGQ
 *, 
π_«med_msgq_öô
,(c⁄° *
«me
, 
nmsg
, 
size
))

209 °ru˘ { 
«me
; 
nmsg
; 
size
; } 
¨g
 = { 
«m2num
(name),Çmsg, size };

210  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_INIT
, &
¨g
).
v
[
LOW
];

213 
RTAI_PROTO
(, 
π_«med_msgq_dñëe
, (
RT_MSGQ
 *
msgq
))

215 °ru˘ { 
RT_MSGQ
 *
msgq
; } 
¨g
 = { msgq };

216  
πai_lxπ
(
BIDX
, 
SIZARG
, 
NAMED_MSGQ_DELETE
, &
¨g
).
i
[
LOW
];

219 
RTAI_PROTO
(, 
π_msg_£nd
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

221 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

222  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND
, &
¨g
).
i
[
LOW
];

225 
RTAI_PROTO
(, 
π_msg_£nd_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

227 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

228  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_IF
, &
¨g
).
i
[
LOW
];

231 
RTAI_PROTO
(, 
π_msg_£nd_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
u¡û
))

233 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

234  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_UNTIL
, &
¨g
).
i
[
LOW
];

237 
RTAI_PROTO
(, 
π_msg_£nd_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
dñay
))

239 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

240  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_SEND_TIMED
, &
¨g
).
i
[
LOW
];

243 
RTAI_PROTO
(, 
π_msg_ª˚ive
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

245 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

246  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE
, &
¨g
).
i
[
LOW
];

249 
RTAI_PROTO
(, 
π_msg_ª˚ive_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

251 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

252  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_IF
, &
¨g
).
i
[
LOW
];

255 
RTAI_PROTO
(, 
π_msg_ª˚ive_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
, 
RTIME
 
u¡û
))

257 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

258  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_UNTIL
, &
¨g
).
i
[
LOW
];

261 
RTAI_PROTO
(, 
π_msg_ª˚ive_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
, 
RTIME
 
dñay
))

263 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

264  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_RECEIVE_TIMED
, &
¨g
).
i
[
LOW
];

267 
RTAI_PROTO
(, 
π_msg_evdΩ
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, *
msg¥io
))

269 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; *
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

270  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_EVDRP
, &
¨g
).
i
[
LOW
];

273 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

275 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

276  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST
, &
¨g
).
i
[
LOW
];

279 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_if
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
))

281 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, 0 };

282  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_IF
, &
¨g
).
i
[
LOW
];

285 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_u¡û
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
u¡û
))

287 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
u¡û
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, until, 0 };

288  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_UNTIL
, &
¨g
).
i
[
LOW
];

291 
RTAI_PROTO
(, 
π_msg_brﬂdˇ°_timed
, (
RT_MSGQ
 *
msgq
, *
msg
, 
msg_size
, 
msg¥io
, 
RTIME
 
dñay
))

293 °ru˘ { 
RT_MSGQ
 *
msgq
; *
msg
; 
msg_size
; 
msg¥io
; 
RTIME
 
dñay
; 
•a˚
; } 
¨g
 = { msgq, msg, msg_size, msgprio, delay, 0 };

294  
πai_lxπ
(
BIDX
, 
SIZARG
, 
MSG_BROADCAST_TIMED
, &
¨g
).
i
[
LOW
];

297 #ifde‡
__˝lu•lus


303 
	#π_tbx_öô
(
tbx
, 
size
, 
Êags
Ë
	`π_msgq_öô
—bx, size, 0)

	)

304 
	#π_tbx_dñëe
(
tbx
Ë
	`π_msgq_dñëe
—bx)

	)

306 
	#π_tbx_£nd
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd
—bx, msg, msg_size, 1)

	)

307 
	#π_tbx_£nd_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd_if
—bx, msg, msg_size, 1)

	)

308 
	#π_tbx_£nd_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_£nd_u¡û
—bx, msg, msg_size, 1, u¡û)

	)

309 
	#π_tbx_£nd_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_£nd_timed
—bx, msg, msg_size, 1, dñay)

	)

311 
	#π_tbx_ª˚ive
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_ª˚ive
—bx, msg, msg_size, 0)

	)

312 
	#π_tbx_ª˚ive_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_ª˚ive_if
—bx, msg, msg_size, 0)

	)

313 
	#π_tbx_ª˚ive_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_ª˚ive_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

314 
	#π_tbx_ª˚ive_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_ª˚ive_timed
—bx, msg, msg_size, 0, dñay)

	)

316 
	#π_tbx_brﬂdˇ°
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_brﬂdˇ°
—bx, msg, msg_size, 0)

	)

317 
	#π_tbx_brﬂdˇ°_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_brﬂdˇ°_if
—bx, msg, msg_size, 0)

	)

318 
	#π_tbx_brﬂdˇ°_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_brﬂdˇ°_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

319 
	#π_tbx_brﬂdˇ°_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_brﬂdˇ°_timed
—bx, msg, msg_size, 0, dñay)

	)

321 
	#π_tbx_urgít
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd
—bx, msg, msg_size, 0)

	)

322 
	#π_tbx_urgít_if
(
tbx
, 
msg
, 
msg_size
Ë
	`π_msg_£nd_if
—bx, msg, msg_size, 0)

	)

323 
	#π_tbx_urgít_u¡û
(
tbx
, 
msg
, 
msg_size
, 
u¡û
Ë
	`π_msg_£nd_u¡û
—bx, msg, msg_size, 0, u¡û)

	)

324 
	#π_tbx_urgít_timed
(
tbx
, 
msg
, 
msg_size
, 
dñay
Ë
	`π_msg_£nd_timed
—bx, msg, msg_size, 0, dñay)

	)

	@/usr/realtime/include/rtai_trace.h

21 #i‚de‡
_RTAI_TRACE_H


22 
	#_RTAI_TRACE_H


	)

24 
	~<πai_ty≥s.h
>

26 #i‡
deföed
(
CONFIG_RTAI_TRACE
Ë&& deföed(
__KERNEL__
)

28 
	~<löux/åa˚.h
>

33 
	gπ_ªgi°î_åa˚r


34 (
	gåa˚r_ˇŒ
 );

35 
	gπ_uƒegi°î_åa˚r


36 (
	gåa˚r_ˇŒ
 );

37 
	gπ_åa˚_evít


38 (
	guöt8_t
 ,

42 
	#RT_TRACE_EVENT
(
ID
, 
DATA
Ë
	`π_åa˚_evít
(ID, DATA)

	)

44 
	#TRACE_RTAI_START
 
TRACE_EV_MAX


	)

47 
	#TRACE_RTAI_EV_MOUNT
 
TRACE_RTAI_START
 + 1

	)

48 
	#TRACE_RTAI_EV_UMOUNT
 
TRACE_RTAI_START
 + 2

	)

49 
	#TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
 
TRACE_RTAI_START
 + 3

	)

50 
	#TRACE_RTAI_EV_GLOBAL_IRQ_EXIT
 
TRACE_RTAI_START
 + 4

	)

51 
	#TRACE_RTAI_EV_OWN_IRQ_ENTRY
 
TRACE_RTAI_START
 + 5

	)

52 
	#TRACE_RTAI_EV_OWN_IRQ_EXIT
 
TRACE_RTAI_START
 + 6

	)

53 
	#TRACE_RTAI_EV_TRAP_ENTRY
 
TRACE_RTAI_START
 + 7

	)

54 
	#TRACE_RTAI_EV_TRAP_EXIT
 
TRACE_RTAI_START
 + 8

	)

55 
	#TRACE_RTAI_EV_SRQ_ENTRY
 
TRACE_RTAI_START
 + 9

	)

56 
	#TRACE_RTAI_EV_SRQ_EXIT
 
TRACE_RTAI_START
 + 10

	)

57 
	#TRACE_RTAI_EV_SWITCHTO_LINUX
 
TRACE_RTAI_START
 + 11

	)

58 
	#TRACE_RTAI_EV_SWITCHTO_RT
 
TRACE_RTAI_START
 + 12

	)

59 
	#TRACE_RTAI_EV_SCHED_CHANGE
 
TRACE_RTAI_START
 + 13

	)

60 
	#TRACE_RTAI_EV_TASK
 
TRACE_RTAI_START
 + 14

	)

61 
	#TRACE_RTAI_EV_TIMER
 
TRACE_RTAI_START
 + 15

	)

62 
	#TRACE_RTAI_EV_SEM
 
TRACE_RTAI_START
 + 16

	)

63 
	#TRACE_RTAI_EV_MSG
 
TRACE_RTAI_START
 + 17

	)

64 
	#TRACE_RTAI_EV_RPC
 
TRACE_RTAI_START
 + 18

	)

65 
	#TRACE_RTAI_EV_MBX
 
TRACE_RTAI_START
 + 19

	)

66 
	#TRACE_RTAI_EV_FIFO
 
TRACE_RTAI_START
 + 20

	)

67 
	#TRACE_RTAI_EV_SHM
 
TRACE_RTAI_START
 + 21

	)

68 
	#TRACE_RTAI_EV_POSIX
 
TRACE_RTAI_START
 + 22

	)

69 
	#TRACE_RTAI_EV_LXRT
 
TRACE_RTAI_START
 + 23

	)

70 
	#TRACE_RTAI_EV_LXRTI
 
TRACE_RTAI_START
 + 24

	)

73 
	#TRACE_RTAI_EV_MAX
 
TRACE_RTAI_EV_LXRTI


	)

77 
	#TRACE_RTAI_MOUNT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_MOUNT
, 
NULL
)

	)

80 
	#TRACE_RTAI_UMOUNT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_UMOUNT
, 
NULL
)

	)

83 
	s_åa˚_πai_globÆ_úq_íåy


85 
uöt8_t
 
	múq_id
;

86 
uöt8_t
 
	mkî√l
;

87 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_globÆ_úq_íåy
;

88 #i‡
CONFIG_X86


89 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
, 
__dummy
) \

92 
uöt32_t
 
eÊags
, 
xcs
; \

93 
åa˚_πai_globÆ_úq_íåy
 
úq_íåy
;\

94 
úq_íåy
.
úq_id
 = 
ID
;\

95 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

96 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

97 
úq_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

98 
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
, &
úq_íåy
);\

99 } 0)

	)

101 #i‡
CONFIG_PPC


102 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
, 
KERNEL
) \

105 
åa˚_πai_globÆ_úq_íåy
 
úq_íåy
;\

106 
úq_íåy
.
úq_id
 = 
ID
;\

107 
úq_íåy
.
kî√l
 = 
KERNEL
;\

108 
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_ENTRY
, &
úq_íåy
);\

109 } 0)

	)

113 
	#TRACE_RTAI_GLOBAL_IRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_GLOBAL_IRQ_EXIT
, 
NULL
)

	)

116 
	s_åa˚_πai_own_úq_íåy


118 
uöt8_t
 
	múq_id
;

119 
uöt8_t
 
	mkî√l
;

120 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_own_úq_íåy
;

121 #i‡
CONFIG_X86


122 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
) \

125 
uöt32_t
 
eÊags
, 
xcs
; \

126 
åa˚_πai_own_úq_íåy
 
úq_íåy
;\

127 
úq_íåy
.
úq_id
 = 
ID
;\

128 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

129 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

130 
úq_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

131 
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_ENTRY
, &
úq_íåy
);\

132 } 0)

	)

134 #i‡
CONFIG_PPC


135 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
, 
KERNEL
) \

138 
åa˚_πai_own_úq_íåy
 
úq_íåy
;\

139 
úq_íåy
.
úq_id
 = 
ID
;\

140 
úq_íåy
.
kî√l
 = 
KERNEL
;\

141 
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_ENTRY
, &
úq_íåy
);\

142 } 0)

	)

146 
	#TRACE_RTAI_OWN_IRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_OWN_IRQ_EXIT
, 
NULL
)

	)

149 
	s_åa˚_πai_å≠_íåy


151 
uöt8_t
 
	må≠_id
;

152 
uöt32_t
 
	maddªss
;

153 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_å≠_íåy
;

154 
	#TRACE_RTAI_TRAP_ENTRY
(
ID
,
ADDR
) \

157 
åa˚_πai_å≠_íåy
 
å≠_evít
;\

158 
å≠_evít
.
å≠_id
 = 
ID
;\

159 
å≠_evít
.
addªss
 = 
ADDR
; \

160 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TRAP_ENTRY
, &
å≠_evít
);\

161 } 0)

	)

169 
	#TRACE_RTAI_TRAP_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_TRAP_EXIT
, 
NULL
)

	)

172 
	s_åa˚_πai_§q_íåy


174 
uöt8_t
 
	m§q_id
;

175 
uöt8_t
 
	mkî√l
;

176 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_§q_íåy
;

177 #i‡
CONFIG_X86


178 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
) \

181 
uöt32_t
 
eÊags
, 
xcs
; \

182 
åa˚_πai_§q_íåy
 
§q_íåy
;\

183 
§q_íåy
.
§q_id
 = 
ID
;\

184 
__asm__
 
	`__vﬁ©ûe__
("pushÊ;Ö› %0": "=g" (
eÊags
)); \

185 
__asm__
 
	`__vﬁ©ûe__
("push»%%cs;Ö› %0": "=g" (
xcs
)); \

186 
§q_íåy
.
kî√l
 = !((
VM_MASK
 & 
eÊags
Ë|| (3 & 
xcs
));\

187 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_ENTRY
, &
§q_íåy
);\

188 } 0)

	)

190 #i‡
CONFIG_PPC
 || 
CONFIG_ARM


191 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
,
KERNEL
) \

194 
åa˚_πai_§q_íåy
 
§q_íåy
;\

195 
§q_íåy
.
§q_id
 = 
ID
;\

196 
§q_íåy
.
kî√l
 = 
KERNEL
;\

197 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_ENTRY
, &
§q_íåy
);\

198 } 0)

	)

202 
	#TRACE_RTAI_SRQ_EXIT
(Ë
	`π_åa˚_evít
(
TRACE_RTAI_EV_SRQ_EXIT
, 
NULL
)

	)

205 
	s_åa˚_πai_swôchto_löux


207 
uöt8_t
 
	m˝u_id
;

208 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_swôchto_löux
;

209 
	#TRACE_RTAI_SWITCHTO_LINUX
(
ID
) \

212 
åa˚_πai_swôchto_löux
 
swôch_evít
; \

213 
swôch_evít
.
˝u_id
 = (
uöt8_t
Ë
ID
; \

214 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SWITCHTO_LINUX
, &
swôch_evít
); \

215 } 0)

	)

218 
	s_åa˚_πai_swôchto_π


220 
uöt8_t
 
	m˝u_id
;

221 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_swôchto_π
;

222 
	#TRACE_RTAI_SWITCHTO_RT
(
ID
) \

225 
åa˚_πai_swôchto_π
 
swôch_evít
; \

226 
swôch_evít
.
˝u_id
 = (
uöt8_t
Ë
ID
; \

227 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SWITCHTO_RT
, &
swôch_evít
); \

228 } 0)

	)

231 
	s_åa˚_πai_sched_ch™ge


233 
uöt32_t
 
	mout
;

234 
uöt32_t
 
	mö
;

235 
uöt32_t
 
	mout_°©e
;

236 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_sched_ch™ge
;

237 
	#TRACE_RTAI_SCHED_CHANGE
(
OUT
, 
IN
, 
OUT_STATE
) \

240 
åa˚_πai_sched_ch™ge
 
sched_evít
;\

241 
sched_evít
.
out
 = (
uöt32_t
Ë
OUT
;\

242 
sched_evít
.
ö
 = (
uöt32_t
Ë
IN
;\

243 
sched_evít
.
out_°©e
 = (
uöt32_t
Ë
OUT_STATE
; \

244 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SCHED_CHANGE
, &
sched_evít
);\

245 } 0)

	)

248 
	#TRACE_RTAI_EV_TASK_INIT
 1

	)

249 
	#TRACE_RTAI_EV_TASK_DELETE
 2

	)

250 
	#TRACE_RTAI_EV_TASK_SIG_HANDLER
 3

	)

251 
	#TRACE_RTAI_EV_TASK_YIELD
 4

	)

252 
	#TRACE_RTAI_EV_TASK_SUSPEND
 5

	)

253 
	#TRACE_RTAI_EV_TASK_RESUME
 6

	)

254 
	#TRACE_RTAI_EV_TASK_MAKE_PERIOD_RELATIVE
 7

	)

255 
	#TRACE_RTAI_EV_TASK_MAKE_PERIOD
 8

	)

256 
	#TRACE_RTAI_EV_TASK_WAIT_PERIOD
 9

	)

257 
	#TRACE_RTAI_EV_TASK_BUSY_SLEEP
 10

	)

258 
	#TRACE_RTAI_EV_TASK_SLEEP
 11

	)

259 
	#TRACE_RTAI_EV_TASK_SLEEP_UNTIL
 12

	)

260 
	s_åa˚_πai_èsk


262 
uöt8_t
 
	mevít_sub_id
;

263 
uöt32_t
 
	mevít_d©a1
;

264 
uöt64_t
 
	mevít_d©a2
;

265 
uöt64_t
 
	mevít_d©a3
;

266 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_èsk
;

267 
	#TRACE_RTAI_TASK
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

270 
åa˚_πai_èsk
 
èsk_evít
;\

271 
èsk_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
;\

272 
èsk_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

273 
èsk_evít
.
evít_d©a2
 = (
uöt64_t
Ë
DATA2
; \

274 
èsk_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

275 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TASK
, &
èsk_evít
);\

276 } 0)

	)

279 
	#TRACE_RTAI_EV_TIMER_REQUEST
 1

	)

280 
	#TRACE_RTAI_EV_TIMER_FREE
 2

	)

281 
	#TRACE_RTAI_EV_TIMER_REQUEST_APIC
 3

	)

282 
	#TRACE_RTAI_EV_TIMER_APIC_FREE
 4

	)

283 
	#TRACE_RTAI_EV_TIMER_HANDLE_EXPIRY
 5

	)

284 
	s_åa˚_πai_timî


286 
uöt8_t
 
	mevít_sub_id
;

287 
uöt32_t
 
	mevít_d©a1
;

288 
uöt32_t
 
	mevít_d©a2
;

289 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_timî
;

290 
	#TRACE_RTAI_TIMER
(
ID
, 
DATA1
, 
DATA2
) \

293 
åa˚_πai_timî
 
timî_evít
; \

294 
timî_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

295 
timî_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

296 
timî_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

297 
	`π_åa˚_evít
(
TRACE_RTAI_EV_TIMER
, &
timî_evít
); \

298 } 0)

	)

301 
	#TRACE_RTAI_EV_SEM_INIT
 1

	)

302 
	#TRACE_RTAI_EV_SEM_DELETE
 2

	)

303 
	#TRACE_RTAI_EV_SEM_SIGNAL
 3

	)

304 
	#TRACE_RTAI_EV_SEM_WAIT
 4

	)

305 
	#TRACE_RTAI_EV_SEM_WAIT_IF
 5

	)

306 
	#TRACE_RTAI_EV_SEM_WAIT_UNTIL
 6

	)

307 
	s_åa˚_πai_£m


309 
uöt8_t
 
	mevít_sub_id
;

310 
uöt32_t
 
	mevít_d©a1
;

311 
uöt64_t
 
	mevít_d©a2
;

312 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_£m
;

313 
	#TRACE_RTAI_SEM
(
ID
, 
DATA1
, 
DATA2
) \

316 
åa˚_πai_£m
 
£m_evít
; \

317 
£m_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

318 
£m_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

319 
£m_evít
.
evít_d©a2
 = (
uöt64_t
Ë
DATA2
; \

320 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SEM
, &
£m_evít
); \

321 } 0)

	)

324 
	#TRACE_RTAI_EV_MSG_SEND
 1

	)

325 
	#TRACE_RTAI_EV_MSG_SEND_IF
 2

	)

326 
	#TRACE_RTAI_EV_MSG_SEND_UNTIL
 3

	)

327 
	#TRACE_RTAI_EV_MSG_RECV
 4

	)

328 
	#TRACE_RTAI_EV_MSG_RECV_IF
 5

	)

329 
	#TRACE_RTAI_EV_MSG_RECV_UNTIL
 6

	)

330 
	s_åa˚_πai_msg


332 
uöt8_t
 
	mevít_sub_id
;

333 
uöt32_t
 
	mevít_d©a1
;

334 
uöt32_t
 
	mevít_d©a2
;

335 
uöt64_t
 
	mevít_d©a3
;

336 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_msg
;

337 
	#TRACE_RTAI_MSG
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

340 
åa˚_πai_msg
 
msg_evít
; \

341 
msg_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

342 
msg_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

343 
msg_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

344 
msg_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

345 
	`π_åa˚_evít
(
TRACE_RTAI_EV_MSG
, &
msg_evít
); \

346 } 0)

	)

349 
	#TRACE_RTAI_EV_RPC_MAKE
 1

	)

350 
	#TRACE_RTAI_EV_RPC_MAKE_IF
 2

	)

351 
	#TRACE_RTAI_EV_RPC_MAKE_UNTIL
 3

	)

352 
	#TRACE_RTAI_EV_RPC_RETURN
 4

	)

353 
	s_åa˚_πai_Ωc


355 
uöt8_t
 
	mevít_sub_id
;

356 
uöt32_t
 
	mevít_d©a1
;

357 
uöt32_t
 
	mevít_d©a2
;

358 
uöt64_t
 
	mevít_d©a3
;

359 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_Ωc
;

360 
	#TRACE_RTAI_RPC
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

363 
åa˚_πai_Ωc
 
Ωc_evít
; \

364 
Ωc_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

365 
Ωc_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

366 
Ωc_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

367 
Ωc_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

368 
	`π_åa˚_evít
(
TRACE_RTAI_EV_RPC
, &
Ωc_evít
); \

369 } 0)

	)

372 
	#TRACE_RTAI_EV_MBX_INIT
 1

	)

373 
	#TRACE_RTAI_EV_MBX_DELETE
 2

	)

374 
	#TRACE_RTAI_EV_MBX_SEND
 3

	)

375 
	#TRACE_RTAI_EV_MBX_SEND_WP
 4

	)

376 
	#TRACE_RTAI_EV_MBX_SEND_IF
 5

	)

377 
	#TRACE_RTAI_EV_MBX_SEND_UNTIL
 6

	)

378 
	#TRACE_RTAI_EV_MBX_RECV
 7

	)

379 
	#TRACE_RTAI_EV_MBX_RECV_WP
 8

	)

380 
	#TRACE_RTAI_EV_MBX_RECV_IF
 9

	)

381 
	#TRACE_RTAI_EV_MBX_RECV_UNTIL
 10

	)

382 
	s_åa˚_πai_mbx


384 
uöt8_t
 
	mevít_sub_id
;

385 
uöt32_t
 
	mevít_d©a1
;

386 
uöt32_t
 
	mevít_d©a2
;

387 
uöt64_t
 
	mevít_d©a3
;

388 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_mbx
;

389 
	#TRACE_RTAI_MBX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

392 
åa˚_πai_mbx
 
mbx_evít
; \

393 
mbx_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

394 
mbx_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

395 
mbx_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

396 
mbx_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

397 
	`π_åa˚_evít
(
TRACE_RTAI_EV_MBX
, &
mbx_evít
); \

398 } 0)

	)

401 
	#TRACE_RTAI_EV_FIFO_CREATE
 1

	)

402 
	#TRACE_RTAI_EV_FIFO_DESTROY
 2

	)

403 
	#TRACE_RTAI_EV_FIFO_RESET
 3

	)

404 
	#TRACE_RTAI_EV_FIFO_RESIZE
 4

	)

405 
	#TRACE_RTAI_EV_FIFO_PUT
 5

	)

406 
	#TRACE_RTAI_EV_FIFO_GET
 6

	)

407 
	#TRACE_RTAI_EV_FIFO_CREATE_HANDLER
 7

	)

408 
	#TRACE_RTAI_EV_FIFO_OPEN
 8

	)

409 
	#TRACE_RTAI_EV_FIFO_RELEASE
 9

	)

410 
	#TRACE_RTAI_EV_FIFO_READ
 10

	)

411 
	#TRACE_RTAI_EV_FIFO_WRITE
 11

	)

412 
	#TRACE_RTAI_EV_FIFO_READ_TIMED
 12

	)

413 
	#TRACE_RTAI_EV_FIFO_WRITE_TIMED
 13

	)

414 
	#TRACE_RTAI_EV_FIFO_READ_ALLATONCE
 14

	)

415 
	#TRACE_RTAI_EV_FIFO_LLSEEK
 15

	)

416 
	#TRACE_RTAI_EV_FIFO_FASYNC
 16

	)

417 
	#TRACE_RTAI_EV_FIFO_IOCTL
 17

	)

418 
	#TRACE_RTAI_EV_FIFO_POLL
 18

	)

419 
	#TRACE_RTAI_EV_FIFO_SUSPEND_TIMED
 19

	)

420 
	#TRACE_RTAI_EV_FIFO_SET_ASYNC_SIG
 20

	)

421 
	#TRACE_RTAI_EV_FIFO_SEM_INIT
 21

	)

422 
	#TRACE_RTAI_EV_FIFO_SEM_POST
 22

	)

423 
	#TRACE_RTAI_EV_FIFO_SEM_WAIT
 23

	)

424 
	#TRACE_RTAI_EV_FIFO_SEM_TRY_WAIT
 24

	)

425 
	#TRACE_RTAI_EV_FIFO_SEM_TIMED_WAIT
 25

	)

426 
	#TRACE_RTAI_EV_FIFO_SEM_DESTROY
 26

	)

427 
	s_åa˚_πai_fifo


429 
uöt8_t
 
	mevít_sub_id
;

430 
uöt32_t
 
	mevít_d©a1
;

431 
uöt32_t
 
	mevít_d©a2
;

432 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_fifo
;

433 
	#TRACE_RTAI_FIFO
(
ID
, 
DATA1
, 
DATA2
) \

436 
åa˚_πai_fifo
 
fifo_evít
; \

437 
fifo_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

438 
fifo_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

439 
fifo_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

440 
	`π_åa˚_evít
(
TRACE_RTAI_EV_FIFO
, &
fifo_evít
); \

441 } 0)

	)

444 
	#TRACE_RTAI_EV_SHM_MALLOC
 1

	)

445 
	#TRACE_RTAI_EV_SHM_KMALLOC
 2

	)

446 
	#TRACE_RTAI_EV_SHM_GET_SIZE
 3

	)

447 
	#TRACE_RTAI_EV_SHM_FREE
 4

	)

448 
	#TRACE_RTAI_EV_SHM_KFREE
 5

	)

449 
	s_åa˚_πai_shm


451 
uöt8_t
 
	mevít_sub_id
;

452 
uöt32_t
 
	mevít_d©a1
;

453 
uöt32_t
 
	mevít_d©a2
;

454 
uöt32_t
 
	mevít_d©a3
;

455 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_shm
;

456 
	#TRACE_RTAI_SHM
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

459 
åa˚_πai_shm
 
shm_evít
; \

460 
shm_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

461 
shm_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

462 
shm_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

463 
shm_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

464 
	`π_åa˚_evít
(
TRACE_RTAI_EV_SHM
, &
shm_evít
); \

465 } 0)

	)

468 
	#TRACE_RTAI_EV_POSIX_MQ_OPEN
 1

	)

469 
	#TRACE_RTAI_EV_POSIX_MQ_CLOSE
 2

	)

470 
	#TRACE_RTAI_EV_POSIX_MQ_SEND
 3

	)

471 
	#TRACE_RTAI_EV_POSIX_MQ_RECV
 4

	)

472 
	#TRACE_RTAI_EV_POSIX_MQ_GET_ATTR
 5

	)

473 
	#TRACE_RTAI_EV_POSIX_MQ_SET_ATTR
 6

	)

474 
	#TRACE_RTAI_EV_POSIX_MQ_NOTIFY
 7

	)

475 
	#TRACE_RTAI_EV_POSIX_MQ_UNLINK
 8

	)

476 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CREATE
 9

	)

477 
	#TRACE_RTAI_EV_POSIX_PTHREAD_EXIT
 10

	)

478 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SELF
 11

	)

479 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_INIT
 12

	)

480 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_DESTROY
 13

	)

481 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETDETACHSTATE
 14

	)

482 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETDETACHSTATE
 15

	)

483 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCHEDPARAM
 16

	)

484 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCHEDPARAM
 17

	)

485 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCHEDPOLICY
 18

	)

486 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCHEDPOLICY
 19

	)

487 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETINHERITSCHED
 20

	)

488 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETINHERITSCHED
 21

	)

489 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_SETSCOPE
 22

	)

490 
	#TRACE_RTAI_EV_POSIX_PTHREAD_ATTR_GETSCOPE
 23

	)

491 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SCHED_YIELD
 24

	)

492 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CLOCK_GETTIME
 25

	)

493 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_INIT
 26

	)

494 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_DESTROY
 27

	)

495 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_INIT
 28

	)

496 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_DESTROY
 29

	)

497 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_SETKIND_NP
 30

	)

498 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEXATTR_GETKIND_NP
 31

	)

499 
	#TRACE_RTAI_EV_POSIX_PTHREAD_SETSCHEDPARAM
 32

	)

500 
	#TRACE_RTAI_EV_POSIX_PTHREAD_GETSCHEDPARAM
 33

	)

501 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_TRY_LOCK
 34

	)

502 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_LOCK
 35

	)

503 
	#TRACE_RTAI_EV_POSIX_PTHREAD_MUTEX_UNLOCK
 36

	)

504 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_INIT
 37

	)

505 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_DESTROY
 38

	)

506 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CONDATTR_INIT
 39

	)

507 
	#TRACE_RTAI_EV_POSIX_PTHREAD_CONDATTR_DESTROY
 40

	)

508 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_WAIT
 41

	)

509 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_TIMEDWAIT
 42

	)

510 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_SIGNAL
 43

	)

511 
	#TRACE_RTAI_EV_POSIX_PTHREAD_COND_BROADCAST
 44

	)

512 
	s_åa˚_πai_posix


514 
uöt8_t
 
	mevít_sub_id
;

515 
uöt32_t
 
	mevít_d©a1
;

516 
uöt32_t
 
	mevít_d©a2
;

517 
uöt32_t
 
	mevít_d©a3
;

518 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_posix
;

519 
	#TRACE_RTAI_POSIX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

522 
åa˚_πai_posix
 
posix_evít
; \

523 
posix_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

524 
posix_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

525 
posix_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

526 
posix_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

527 
	`π_åa˚_evít
(
TRACE_RTAI_EV_POSIX
, &
posix_evít
); \

528 } 0)

	)

531 
	#TRACE_RTAI_EV_LXRT_RTAI_SYSCALL_ENTRY
 1

	)

532 
	#TRACE_RTAI_EV_LXRT_RTAI_SYSCALL_EXIT
 2

	)

533 
	#TRACE_RTAI_EV_LXCHANGE
 3

	)

534 
	#TRACE_RTAI_EV_LXRT_STEAL_TASK
 4

	)

535 
	#TRACE_RTAI_EV_LXRT_GIVE_BACK_TASK
 5

	)

536 
	#TRACE_RTAI_EV_LXRT_SUSPEND
 6

	)

537 
	#TRACE_RTAI_EV_LXRT_RESUME
 7

	)

538 
	#TRACE_RTAI_EV_LXRT_HANDLE
 8

	)

539 
	s_åa˚_πai_lxπ


541 
uöt8_t
 
	mevít_sub_id
;

542 
uöt32_t
 
	mevít_d©a1
;

543 
uöt32_t
 
	mevít_d©a2
;

544 
uöt32_t
 
	mevít_d©a3
;

545 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_lxπ
;

546 
	#TRACE_RTAI_LXRT
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

549 
åa˚_πai_lxπ
 
lxπ_evít
; \

550 
lxπ_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

551 
lxπ_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

552 
lxπ_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

553 
lxπ_evít
.
evít_d©a3
 = (
uöt32_t
Ë
DATA3
; \

554 
	`π_åa˚_evít
(
TRACE_RTAI_EV_LXRT
, &
lxπ_evít
); \

555 } 0)

	)

558 
	#TRACE_RTAI_EV_LXRTI_NAME_ATTACH
 1

	)

559 
	#TRACE_RTAI_EV_LXRTI_NAME_LOCATE
 2

	)

560 
	#TRACE_RTAI_EV_LXRTI_NAME_DETACH
 3

	)

561 
	#TRACE_RTAI_EV_LXRTI_SEND
 4

	)

562 
	#TRACE_RTAI_EV_LXRTI_RECV
 5

	)

563 
	#TRACE_RTAI_EV_LXRTI_CRECV
 6

	)

564 
	#TRACE_RTAI_EV_LXRTI_REPLY
 7

	)

565 
	#TRACE_RTAI_EV_LXRTI_PROXY_ATTACH
 8

	)

566 
	#TRACE_RTAI_EV_LXRTI_PROXY_DETACH
 9

	)

567 
	#TRACE_RTAI_EV_LXRTI_TRIGGER
 10

	)

568 
	s_åa˚_πai_lxπi


570 
uöt8_t
 
	mevít_sub_id
;

571 
uöt32_t
 
	mevít_d©a1
;

572 
uöt32_t
 
	mevít_d©a2
;

573 
uöt64_t
 
	mevít_d©a3
;

574 } 
	tLTT_PACKED_STRUCT
 
	tåa˚_πai_lxπi
;

575 
	#TRACE_RTAI_LXRTI
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
) \

578 
åa˚_πai_lxπi
 
lxπi_evít
; \

579 
lxπi_evít
.
evít_sub_id
 = (
uöt8_t
Ë
ID
; \

580 
lxπi_evít
.
evít_d©a1
 = (
uöt32_t
Ë
DATA1
; \

581 
lxπi_evít
.
evít_d©a2
 = (
uöt32_t
Ë
DATA2
; \

582 
lxπi_evít
.
evít_d©a3
 = (
uöt64_t
Ë
DATA3
; \

583 
	`π_åa˚_evít
(
TRACE_RTAI_EV_LXRTI
, &
lxπi_evít
); \

584 } 0)

	)

587 
	#RT_TRACE_EVENT
(
ID
, 
DATA
)

	)

588 
	#TRACE_RTAI_MOUNT
()

	)

589 
	#TRACE_RTAI_UMOUNT
()

	)

590 
	#TRACE_RTAI_GLOBAL_IRQ_ENTRY
(
ID
,
X
)

	)

591 
	#TRACE_RTAI_GLOBAL_IRQ_EXIT
()

	)

592 
	#TRACE_RTAI_OWN_IRQ_ENTRY
(
ID
)

	)

593 
	#TRACE_RTAI_OWN_IRQ_EXIT
()

	)

594 
	#TRACE_RTAI_TRAP_ENTRY
(
ID
,
ADDR
)

	)

595 
	#TRACE_RTAI_TRAP_EXIT
()

	)

596 #i‡
deföed
(
CONFIG_PPC
Ë&& deföed(
CONFIG_ARM
) && (CONFIG_PPC || CONFIG_ARM)

597 
	#TRACE_RTAI_SRQ_ENTRY
(
ID
,
KERNEL
)

	)

599 
	#TRACE_RTAI_SRQ_ENTRY
(
a
)

	)

601 
	#TRACE_RTAI_SRQ_EXIT
()

	)

602 
	#TRACE_RTAI_SWITCHTO_LINUX
(
ID
)

	)

603 
	#TRACE_RTAI_SWITCHTO_RT
(
ID
)

	)

604 
	#TRACE_RTAI_SCHED_CHANGE
(
OUT
, 
IN
, 
OUT_STATE
)

	)

605 
	#TRACE_RTAI_TASK
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

606 
	#TRACE_RTAI_TIMER
(
ID
, 
DATA1
, 
DATA2
)

	)

607 
	#TRACE_RTAI_SEM
(
ID
, 
DATA1
, 
DATA2
)

	)

608 
	#TRACE_RTAI_MSG
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

609 
	#TRACE_RTAI_RPC
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

610 
	#TRACE_RTAI_MBX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

611 
	#TRACE_RTAI_FIFO
(
ID
, 
DATA1
, 
DATA2
)

	)

612 
	#TRACE_RTAI_SHM
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

613 
	#TRACE_RTAI_POSIX
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

614 
	#TRACE_RTAI_LXRT
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

615 
	#TRACE_RTAI_LXRTI
(
ID
, 
DATA1
, 
DATA2
, 
DATA3
)

	)

	@/usr/realtime/include/rtai_types.h

19 #i‚de‡
_RTAI_TYPES_H


20 
	#_RTAI_TYPES_H


	)

22 
	~<πai_c⁄fig.h
>

23 
	~<πai_wøµîs.h
>

25 
	#PRIO_Q
 0

	)

26 
	#FIFO_Q
 4

	)

27 
	#RES_Q
 3

	)

29 
	#BIN_SEM
 1

	)

30 
	#CNT_SEM
 2

	)

31 
	#RES_SEM
 3

	)

33 
	#RESEM_RECURS
 1

	)

34 
	#RESEM_BINSEM
 0

	)

35 
	#RESEM_CHEKWT
 -1

	)

37 
	#RT_SCHED_FIFO
 0

	)

38 
	#RT_SCHED_RR
 1

	)

40 
	g±_ªgs
;

42 
	gπ_èsk_°ru˘
;

44 
	tRTIME
;

46 (*
	tRT_TRAP_HANDLER
)(, , 
	t±_ªgs
 *,*);

48 
	sπ_times
 {

49 
löux_tick
;

50 
≥riodic_tick
;

51 
RTIME
 
tick_time
;

52 
RTIME
 
löux_time
;

53 
RTIME
 
öå_time
;

	@/usr/realtime/include/rtai_usi.h

19 #i‚de‡
_RTAI_USI_H


20 
	#_RTAI_USI_H


	)

22 #i‚de‡
__KERNEL__


24 
	~<asm/πai_usi.h
>

25 
	~<asm/πai_§q.h
>

27 #ifde‡
__˝lu•lus


36 
ölöe
 
	$π_°¨tup_úq
(
úq
)

38  ()
	`πai_§q
(
USI_SRQ_MASK
 | 
_STARTUP_IRQ
, 
úq
);

39 
	}
}

42 
	#π_shutdown_úq
(
úq
) \

43 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_SHUTDOWN_IRQ
, 
úq
); } 0)

	)

45 
	#π_íabÀ_úq
(
úq
) \

46 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ENABLE_IRQ
, 
úq
); } 0)

	)

48 
	#π_dißbÀ_úq
(
úq
) \

49 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_DISABLE_IRQ
, 
úq
); } 0)

	)

51 
	#π_mask_™d_ack_úq
(
úq
) \

52 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_MASK_AND_ACK_IRQ
, 
úq
); } 0)

	)

54 
	#π_ack_úq
(
úq
) \

55 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ACK_IRQ
, 
úq
); } 0)

	)

57 
	#π_unmask_úq
(
úq
) \

58 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_UNMASK_IRQ
, 
úq
); } 0)

	)

60 
	#πai_˛i
() \

61 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_DISINT
, 0); } 0)

	)

63 
	#πai_°i
() \

64 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_ENINT
, 0); } 0)

	)

66 
	#πai_ßve_Êags_™d_˛i
(
Êags
) \

67 dÿ{ 
Êags
 = ()
	`πai_§q
(
USI_SRQ_MASK
 | 
_SAVE_FLAGS_CLI
, 0); } 0)

	)

69 
	#πai_ª°‹e_Êags
(
Êags
) \

70 dÿ{ 
	`πai_§q
(
USI_SRQ_MASK
 | 
_RESTORE_FLAGS
, 
Êags
); } 0)

	)

72 #ifde‡
CONFIG_SMP


74 
	s__usi_xchg_dummy
 { 
a
[100]; };

75 
	#__usi_xg
(
x
Ë((
__usi_xchg_dummy
 *)(x))

	)

77 
ölöe
 
usi_©omic_cmpxchg
(vﬁ©ûê*
±r
, 
o
, 
n
)

79 
¥ev
;

80 
__asm__
 
__vﬁ©ûe__
 ("lock; cmpxchgl %1, %2"

81 : "˜" (
¥ev
)

82 : "q"(
n
), "m" (*
__usi_xg
(
±r
)), "0" (
o
)

84  
¥ev
;

87 
	#π_•ö_lock
(
lock
) \

88 dÿ{ 
	`usi_©omic_cmpxchg
(
lock
, 0, 1)); } 0)

	)

90 
	#π_•ö_u∆ock
(
lock
) \

91 dÿ{ *(vﬁ©ûê*)
lock
 = 0; } 0)

	)

94 
	#π_•ö_lock
(
lock
);

	)

96 
	#π_•ö_u∆ock
(
lock
);

	)

99 
	#π_•ö_lock_öô
(
lock
) \

100 dÿ{ *(vﬁ©ûê*)
lock
 = 0; } 0)

	)

102 
	#π_•ö_lock_úq
(
lock
) \

103 dÿ{ 
	`πai_˛i
(); 
	`π_•ö_lock
(
lock
); } 0)

	)

105 
	#π_•ö_u∆ock_úq
(
lock
) \

106 dÿ{ 
	`π_•ö_u∆ock
(
lock
); 
	`πai_°i
(); } 0)

	)

108 
ölöe
 
π_•ö_lock_úqßve
(*
lock
)

110 
Êags
;

111 
πai_ßve_Êags_™d_˛i
(
Êags
);

112 
π_•ö_lock
(
lock
);

113  
Êags
;

116 
	#π_•ö_u∆ock_úqª°‹e
(
Êags
, 
lock
) \

117 dÿ{ 
	`π_•ö_u∆ock
(
lock
); 
	`πai_ª°‹e_Êags
(
Êags
); } 0)

	)

119 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_version.h

19 
	~<πai_c⁄fig.h
>

21 
	#RTAI_RELEASE
 
PACKAGE_VERSION


	)

22 
	#RTAI_MANGLE_VERSION
(
a
,
b
,
c
Ë((◊Ë* 65536Ë+ ((bË* 256Ë+ (c))

	)

23 
	#RTAI_VERSION_CODE
 
	`RTAI_MANGLE_VERSION
(
CONFIG_RTAI_VERSION_MAJOR
,
CONFIG_RTAI_VERSION_MINOR
,
CONFIG_RTAI_REVISION_LEVEL
)

	)

	@/usr/realtime/include/rtai_wd.h

22 #i‚de‡
_RTAI_WD_H


23 
	#_RTAI_WD_H


	)

25 
	~<πai_ty≥s.h
>

28 
	#NSECS_PER_SEC
 1000000000

	)

31 
	#WDLOG
(
fmt
, 
¨gs
...Ë
	`π_¥ötk
("RTAI[w©chdog]: " fmt, ##¨gs)

	)

34 
	ew©chdog_pﬁicy
 {

35 
	mWD_NOTHING
,

36 
	mWD_RESYNC
,

37 
	mWD_DEBUG
,

38 
	mWD_STRETCH
,

39 
	mWD_SLIP
,

40 
	mWD_SUSPEND
,

41 
	mWD_KILL


42 } 
	twd_pﬁicy
;

45 
	sbad_π_èsk
 {

46 
RT_TASK
 *
	mèsk
;

47 
	mö_u£
;

48 
	m¶ùpög
;

49 
	mcou¡down
;

50 
	mcou¡
;

51 
	mvÆid
;

52 
	mf‹˚d
;

53 
RTIME
 
	m‹ig_≥riod
;

54 
wd_pﬁicy
 
	mpﬁicy
;

55 
bad_π_èsk
 *
	m√xt
;

56 } 
	tBAD_RT_TASK
;

58 
	#WD_INDX
 2

	)

60 
	#WD_SET_GRACE
 1

	)

61 
	#WD_SET_GRACEDIV
 2

	)

62 
	#WD_SET_SAFETY
 3

	)

63 
	#WD_SET_POLICY
 4

	)

64 
	#WD_SET_SLIP
 5

	)

65 
	#WD_SET_STRETCH
 6

	)

66 
	#WD_SET_LIMIT
 7

	)

68 #ifde‡
__KERNEL__


70 #ifde‡
__˝lu•lus


74 
__πai_wd_öô
();

76 
__πai_wd_exô
();

79 
RTAI_SYSCALL_MODE
 
π_wd£t_gø˚
(
√w_vÆue
);

81 
RTAI_SYSCALL_MODE
 
π_wd£t_gø˚div
(
√w_vÆue
);

83 
RTAI_SYSCALL_MODE
 
wd_pﬁicy
 
π_wd£t_pﬁicy
(wd_pﬁicy 
√w_vÆue
);

85 
RTAI_SYSCALL_MODE
 
π_wd£t_¶ù
(
√w_vÆue
);

87 
RTAI_SYSCALL_MODE
 
π_wd£t_°ªtch
(
√w_vÆue
);

89 
RTAI_SYSCALL_MODE
 
π_wd£t_limô
(
√w_vÆue
);

91 
RTAI_SYSCALL_MODE
 
π_wd£t_ß„ty
(
√w_vÆue
);

93 #ifde‡
__˝lu•lus


99 #ifde‡
__˝lu•lus


104 
RTAI_PROTO
(, 
π_wd£t_gø˚
, (
√w_vÆue
))

106 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

107  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_GRACE
, &
¨g
).
i
[
LOW
];

110 
RTAI_PROTO
(, 
π_wd£t_gø˚div
, (
√w_vÆue
))

112 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

113  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_GRACEDIV
, &
¨g
).
i
[
LOW
];

116 
RTAI_PROTO
(
wd_pﬁicy
, 
π_wd£t_pﬁicy
, (wd_pﬁicy 
√w_vÆue
))

118 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

119  (
wd_pﬁicy
)
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_POLICY
, &
¨g
).
i
[
LOW
];

122 
RTAI_PROTO
(, 
π_wd£t_¶ù
, (
√w_vÆue
))

124 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

125  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_SLIP
, &
¨g
).
i
[
LOW
];

128 
RTAI_PROTO
(, 
π_wd£t_°ªtch
, (
√w_vÆue
))

130 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

131  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_STRETCH
, &
¨g
).
i
[
LOW
];

134 
RTAI_PROTO
(, 
π_wd£t_limô
, (
√w_vÆue
))

136 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

137  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_LIMIT
, &
¨g
).
i
[
LOW
];

140 
RTAI_PROTO
(, 
π_wd£t_ß„ty
, (
√w_vÆue
))

142 °ru˘ { 
√w_vÆue
; } 
¨g
 = {Çew_value };

143  
πai_lxπ
(
WD_INDX
, 
SIZARG
, 
WD_SET_SAFETY
, &
¨g
).
i
[
LOW
];

146 #ifde‡
__˝lu•lus


	@/usr/realtime/include/rtai_wrappers.h

19 #i‚de‡
_RTAI_WRAPPERS_H


20 
	#_RTAI_WRAPPERS_H


	)

22 #ifde‡
__KERNEL__


24 
	~<löux/vîsi⁄.h
>

25 #i‚de‡
__˝lu•lus


26 
	~<löux/moduÀ.h
>

29 
	~<löux/moduÀ∑øm.h
>

31 
	#RTAI_MODULE_PARM
(
«me
, 
ty≥
) \

32 
	`moduÀ_∑øm
(
«me
, 
ty≥
, 0444)

	)

34 #i‚de‡
DEFINE_SPINLOCK


35 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
SPIN_LOCK_UNLOCKED


	)

38 #i‚de‡
DECLARE_MUTEX_LOCKED


39 #i‚de‡
__DECLARE_SEMAPHORE_GENERIC


40 
	#DECLARE_MUTEX_LOCKED
(
«me
) \

41 
£m≠h‹e
 
«me
 = 
	`__SEMAPHORE_INITIALIZER
“ame, 0)

	)

43 
	#DECLARE_MUTEX_LOCKED
(
«me
Ë
	`__DECLARE_SEMAPHORE_GENERIC
“ame,0)

	)

47 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,18)

48 
	#IRQF_SHARED
 
SA_SHIRQ


	)

51 #i‚de‡
˝u_⁄löe_m≠


52 
	#˝u_⁄löe_m≠
 (*(
˝umask_t
 *)
˝u_⁄löe_mask
)

	)

55 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,0)

57 
	~<löux/bô›s.h
>

59 
	#CONFIG_MMU
 1

	)

61 
	t˛ockid_t
;

63 #i‚de‡
TIMER_ABSTIME


64 
	#TIMER_ABSTIME
 0x01

	)

67 
	ttimî_t
;

69 #i‚de‡
__dïªˇãd


70 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

71 ({ c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

72 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

75 #i‚de‡
__dïªˇãd


76 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

79 
	#RTAI_MODULE_PARM_ARRAY
(
«me
, 
ty≥
, 
addr
, 
size
) \

80 
ölöe
 *
__check_exi°í˚_
##
	`«me
(Ë{  &
«me
; } \

81 
	`MODULE_PARM
(
«me
, "1-" 
	`__MODULE_STRING
(
size
Ë
_MODULE_PARM_STRING_
 ## 
ty≥
);

	)

82 
	#_MODULE_PARM_STRING_ch¨p
 "s"

	)

84 
	#PID_MAX_LIMIT
 
PID_MAX


	)

85 
	#num_⁄löe_˝us
(Ë
smp_num_˝us


	)

86 
	#mm_ªm≠_∑ge_ønge
(
vma
,
‰om
,
to
,
size
,
¥Ÿ
Ë
	`ªm≠_∑ge_ønge
(‰om,to,size,¥Ÿ)

	)

87 
	#__u£r


	)

89 
	#£t_tsk_√ed_ªsched
(
t
) do { \

90 (
t
)->
√ed_ªsched
 = 1; \

91 } 0)

	)

93 
	#˛ór_tsk_√ed_ªsched
(
t
) do { \

94 (
t
)->
√ed_ªsched
 = 0; \

95 } 0)

	)

97 
	#£t_√ed_ªsched
(Ë
	`£t_tsk_√ed_ªsched
(
cuºít
)

	)

99 
	#LIST_POISON1
 
NULL


	)

100 
	#LIST_POISON2
 
NULL


	)

102 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,23Ë|| 
__˝lu•lus


103 
	túqªtu∫_t
;

106 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,4,28)

107 
	#m¶ìp
(
dñay
) \

109 
	`£t_cuºít_°©e
(
TASK_RTAISRVSLEEP
); \

110 
	`scheduÀ_timeout
(((
dñay
)*
HZ
)/1000); \

111 } 0)

	)

114 
	#gë_tsk_addr_limô
(
t
Ë(—)->
addr_limô
.
£g
)

	)

116 
	#èsk_˝u
(
t
Ë(—)->
¥o˚ss‹
)

	)

118 
	#£lf_d´m⁄ize
(
«me
) do { \

119 
	`°r˝y
(
cuºít
->
comm
,"gatekeeper"); \

120 
	`d´m⁄ize
(); \

121 } 0)

	)

123 
	#gë_thªad_±r
(
t
Ë—)

	)

125 
	#RTAI_LINUX_IRQ_HANDLED


	)

127 
ölöe
 
	$hweight_l⁄g
(
w
)

129  (
w
Ë=4 ? 
	`hweight32
(w) : hweight32(w);

130 
	}
}

134 #i‚de‡
öô_MUTEX_LOCKED


135 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

136 
	#öô_MUTEX_LOCKED
(
£m
Ë
	`£ma_öô
(£m, 0)

	)

140 
	#RTAI_MODULE_PARM_ARRAY
(
«me
, 
ty≥
, 
addr
, 
size
) \

141 
	`moduÀ_∑øm_¨øy
(
«me
, 
ty≥
, 
addr
, 0400);

	)

145 #ifde‡
CONFIG_SYSFS


146 
	~<löux/devi˚.h
>

147 #i‡ 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,25)

148 
˛ass
 
	t˛ass_t
;

150 #i‡ 
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

151 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`devi˚_¸óã
(˛s, 
NULL
, devt, NULL, fmt, ##¨g)

	)

153 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`devi˚_¸óã
(˛s, 
NULL
, devt, fmt, ##¨g)

	)

156 
	#˛ass_devi˚_de°roy
(
a
, 
b
Ë
	`devi˚_de°roy
◊, b)

	)

158 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,15)

159 
˛ass
 
	t˛ass_t
;

160 
	#CLASS_DEVICE_CREATE
(
˛s
, 
devt
, 
devi˚
, 
fmt
, 
¨g
...Ë
	`˛ass_devi˚_¸óã
(˛s, 
NULL
, devt, devi˚, fmt, ##árg)

	)

162 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,13)

163 
˛ass
 
	t˛ass_t
;

164 
	#CLASS_DEVICE_CREATE
 
˛ass_devi˚_¸óã


	)

166 
˛ass_sim∂e
 
	t˛ass_t
;

167 
	#CLASS_DEVICE_CREATE
 
˛ass_sim∂e_devi˚_add


	)

168 
	#˛ass_¸óã
 
˛ass_sim∂e_¸óã


	)

169 
	#˛ass_de°roy
 
˛ass_sim∂e_de°roy


	)

170 
	#˛ass_devi˚_de°roy
(
a
, 
b
Ë
	`˛ass_sim∂e_devi˚_ªmove
(b)

	)

176 
	#mm_ªm≠_∑ge_ønge
(
vma
,
‰om
,
to
,
size
,
¥Ÿ
Ë
	`ªm≠_∑ge_ønge
(vma,‰om,to,size,¥Ÿ)

	)

178 
	#gë_tsk_addr_limô
(
t
Ë(—)->
thªad_öfo
->
addr_limô
.
£g
)

	)

180 
	#£lf_d´m⁄ize
(
«me
Ë
	`d´m⁄ize
“ame)

	)

182 
	#gë_thªad_±r
(
t
Ë(—)->
thªad_öfo
)

	)

184 
	#RTAI_LINUX_IRQ_HANDLED
 
IRQ_HANDLED


	)

186 #i‚de‡
MODULE_LICENSE


187 
	#MODULE_LICENSE
(
s
Ë

	)

192 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(2,6,7)

193 
	#CPUMASK_T
(
«me
Ë“ame)

	)

194 
	#CPUMASK
(
«me
Ë“ame)

	)

196 
	#CPUMASK_T
(
«me
Ë((
˝umask_t
){ {Çamê} })

	)

197 
	#CPUMASK
(
«me
Ë“ame.
bôs
[0])

	)

200 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2,6,26)

202 
	~<löux/pid.h
>

204 
	#föd_èsk_by_pid
(
ƒ
) \

205 
	`föd_èsk_by_pid_ns
(
ƒ
, &
öô_pid_ns
)

	)

206 
	#kûl_¥oc
(
pid
, 
sig
, 
¥iv
) \

207 
	`kûl_¥oc_öfo
(
sig
, (
¥iv
Ë? 
SEND_SIG_PRIV
 : 
SEND_SIG_NOINFO
, 
pid
)

	)

211 #i‚de‡
CONFIG_SYSFS


212 * 
	t˛ass_t
;

213 
	#˛ass_¸óã
(
a
,
b
Ë((*)1)

	)

214 
	#CLASS_DEVICE_CREATE
(
a
, 
b
, 
c
, 
d
, ...Ë((*)1)

	)

215 
	#˛ass_devi˚_de°roy
(
a
, 
b
)

	)

216 
	#˛ass_de°roy
(
a
)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/asm/mman.h

1 #i‚de‡
_ASM_X86_MMAN_H


2 
	#_ASM_X86_MMAN_H


	)

4 
	#MAP_32BIT
 0x40

	)

6 
	#MAP_HUGE_2MB
 (21 << 
MAP_HUGE_SHIFT
)

	)

7 
	#MAP_HUGE_1GB
 (30 << 
MAP_HUGE_SHIFT
)

	)

9 
	~<asm-gíîic/mm™.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/processor-flags.h

1 #i‚de‡
_ASM_X86_PROCESSOR_FLAGS_H


2 
	#_ASM_X86_PROCESSOR_FLAGS_H


	)

5 
	~<löux/c⁄°.h
>

10 
	#X86_EFLAGS_CF_BIT
 0

	)

11 
	#X86_EFLAGS_CF
 
	`_BITUL
(
X86_EFLAGS_CF_BIT
)

	)

12 
	#X86_EFLAGS_FIXED_BIT
 1

	)

13 
	#X86_EFLAGS_FIXED
 
	`_BITUL
(
X86_EFLAGS_FIXED_BIT
)

	)

14 
	#X86_EFLAGS_PF_BIT
 2

	)

15 
	#X86_EFLAGS_PF
 
	`_BITUL
(
X86_EFLAGS_PF_BIT
)

	)

16 
	#X86_EFLAGS_AF_BIT
 4

	)

17 
	#X86_EFLAGS_AF
 
	`_BITUL
(
X86_EFLAGS_AF_BIT
)

	)

18 
	#X86_EFLAGS_ZF_BIT
 6

	)

19 
	#X86_EFLAGS_ZF
 
	`_BITUL
(
X86_EFLAGS_ZF_BIT
)

	)

20 
	#X86_EFLAGS_SF_BIT
 7

	)

21 
	#X86_EFLAGS_SF
 
	`_BITUL
(
X86_EFLAGS_SF_BIT
)

	)

22 
	#X86_EFLAGS_TF_BIT
 8

	)

23 
	#X86_EFLAGS_TF
 
	`_BITUL
(
X86_EFLAGS_TF_BIT
)

	)

24 
	#X86_EFLAGS_IF_BIT
 9

	)

25 
	#X86_EFLAGS_IF
 
	`_BITUL
(
X86_EFLAGS_IF_BIT
)

	)

26 
	#X86_EFLAGS_DF_BIT
 10

	)

27 
	#X86_EFLAGS_DF
 
	`_BITUL
(
X86_EFLAGS_DF_BIT
)

	)

28 
	#X86_EFLAGS_OF_BIT
 11

	)

29 
	#X86_EFLAGS_OF
 
	`_BITUL
(
X86_EFLAGS_OF_BIT
)

	)

30 
	#X86_EFLAGS_IOPL_BIT
 12

	)

31 
	#X86_EFLAGS_IOPL
 (
	`_AC
(3,
UL
Ë<< 
X86_EFLAGS_IOPL_BIT
)

	)

32 
	#X86_EFLAGS_NT_BIT
 14

	)

33 
	#X86_EFLAGS_NT
 
	`_BITUL
(
X86_EFLAGS_NT_BIT
)

	)

34 
	#X86_EFLAGS_RF_BIT
 16

	)

35 
	#X86_EFLAGS_RF
 
	`_BITUL
(
X86_EFLAGS_RF_BIT
)

	)

36 
	#X86_EFLAGS_VM_BIT
 17

	)

37 
	#X86_EFLAGS_VM
 
	`_BITUL
(
X86_EFLAGS_VM_BIT
)

	)

38 
	#X86_EFLAGS_AC_BIT
 18

	)

39 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

40 
	#X86_EFLAGS_AC_BIT
 18

	)

41 
	#X86_EFLAGS_AC
 
	`_BITUL
(
X86_EFLAGS_AC_BIT
)

	)

42 
	#X86_EFLAGS_VIF_BIT
 19

	)

43 
	#X86_EFLAGS_VIF
 
	`_BITUL
(
X86_EFLAGS_VIF_BIT
)

	)

44 
	#X86_EFLAGS_VIP_BIT
 20

	)

45 
	#X86_EFLAGS_VIP
 
	`_BITUL
(
X86_EFLAGS_VIP_BIT
)

	)

46 
	#X86_EFLAGS_ID_BIT
 21

	)

47 
	#X86_EFLAGS_ID
 
	`_BITUL
(
X86_EFLAGS_ID_BIT
)

	)

52 
	#X86_CR0_PE_BIT
 0

	)

53 
	#X86_CR0_PE
 
	`_BITUL
(
X86_CR0_PE_BIT
)

	)

54 
	#X86_CR0_MP_BIT
 1

	)

55 
	#X86_CR0_MP
 
	`_BITUL
(
X86_CR0_MP_BIT
)

	)

56 
	#X86_CR0_EM_BIT
 2

	)

57 
	#X86_CR0_EM
 
	`_BITUL
(
X86_CR0_EM_BIT
)

	)

58 
	#X86_CR0_TS_BIT
 3

	)

59 
	#X86_CR0_TS
 
	`_BITUL
(
X86_CR0_TS_BIT
)

	)

60 
	#X86_CR0_ET_BIT
 4

	)

61 
	#X86_CR0_ET
 
	`_BITUL
(
X86_CR0_ET_BIT
)

	)

62 
	#X86_CR0_NE_BIT
 5

	)

63 
	#X86_CR0_NE
 
	`_BITUL
(
X86_CR0_NE_BIT
)

	)

64 
	#X86_CR0_WP_BIT
 16

	)

65 
	#X86_CR0_WP
 
	`_BITUL
(
X86_CR0_WP_BIT
)

	)

66 
	#X86_CR0_AM_BIT
 18

	)

67 
	#X86_CR0_AM
 
	`_BITUL
(
X86_CR0_AM_BIT
)

	)

68 
	#X86_CR0_NW_BIT
 29

	)

69 
	#X86_CR0_NW
 
	`_BITUL
(
X86_CR0_NW_BIT
)

	)

70 
	#X86_CR0_CD_BIT
 30

	)

71 
	#X86_CR0_CD
 
	`_BITUL
(
X86_CR0_CD_BIT
)

	)

72 
	#X86_CR0_PG_BIT
 31

	)

73 
	#X86_CR0_PG
 
	`_BITUL
(
X86_CR0_PG_BIT
)

	)

78 
	#X86_CR3_PWT_BIT
 3

	)

79 
	#X86_CR3_PWT
 
	`_BITUL
(
X86_CR3_PWT_BIT
)

	)

80 
	#X86_CR3_PCD_BIT
 4

	)

81 
	#X86_CR3_PCD
 
	`_BITUL
(
X86_CR3_PCD_BIT
)

	)

82 
	#X86_CR3_PCID_MASK
 
	`_AC
(0x00000fff,
UL
Ë

	)

87 
	#X86_CR4_VME_BIT
 0

	)

88 
	#X86_CR4_VME
 
	`_BITUL
(
X86_CR4_VME_BIT
)

	)

89 
	#X86_CR4_PVI_BIT
 1

	)

90 
	#X86_CR4_PVI
 
	`_BITUL
(
X86_CR4_PVI_BIT
)

	)

91 
	#X86_CR4_TSD_BIT
 2

	)

92 
	#X86_CR4_TSD
 
	`_BITUL
(
X86_CR4_TSD_BIT
)

	)

93 
	#X86_CR4_DE_BIT
 3

	)

94 
	#X86_CR4_DE
 
	`_BITUL
(
X86_CR4_DE_BIT
)

	)

95 
	#X86_CR4_PSE_BIT
 4

	)

96 
	#X86_CR4_PSE
 
	`_BITUL
(
X86_CR4_PSE_BIT
)

	)

97 
	#X86_CR4_PAE_BIT
 5

	)

98 
	#X86_CR4_PAE
 
	`_BITUL
(
X86_CR4_PAE_BIT
)

	)

99 
	#X86_CR4_MCE_BIT
 6

	)

100 
	#X86_CR4_MCE
 
	`_BITUL
(
X86_CR4_MCE_BIT
)

	)

101 
	#X86_CR4_PGE_BIT
 7

	)

102 
	#X86_CR4_PGE
 
	`_BITUL
(
X86_CR4_PGE_BIT
)

	)

103 
	#X86_CR4_PCE_BIT
 8

	)

104 
	#X86_CR4_PCE
 
	`_BITUL
(
X86_CR4_PCE_BIT
)

	)

105 
	#X86_CR4_OSFXSR_BIT
 9

	)

106 
	#X86_CR4_OSFXSR
 
	`_BITUL
(
X86_CR4_OSFXSR_BIT
)

	)

107 
	#X86_CR4_OSXMMEXCPT_BIT
 10

	)

108 
	#X86_CR4_OSXMMEXCPT
 
	`_BITUL
(
X86_CR4_OSXMMEXCPT_BIT
)

	)

109 
	#X86_CR4_VMXE_BIT
 13

	)

110 
	#X86_CR4_VMXE
 
	`_BITUL
(
X86_CR4_VMXE_BIT
)

	)

111 
	#X86_CR4_SMXE_BIT
 14

	)

112 
	#X86_CR4_SMXE
 
	`_BITUL
(
X86_CR4_SMXE_BIT
)

	)

113 
	#X86_CR4_FSGSBASE_BIT
 16

	)

114 
	#X86_CR4_FSGSBASE
 
	`_BITUL
(
X86_CR4_FSGSBASE_BIT
)

	)

115 
	#X86_CR4_PCIDE_BIT
 17

	)

116 
	#X86_CR4_PCIDE
 
	`_BITUL
(
X86_CR4_PCIDE_BIT
)

	)

117 
	#X86_CR4_OSXSAVE_BIT
 18

	)

118 
	#X86_CR4_OSXSAVE
 
	`_BITUL
(
X86_CR4_OSXSAVE_BIT
)

	)

119 
	#X86_CR4_SMEP_BIT
 20

	)

120 
	#X86_CR4_SMEP
 
	`_BITUL
(
X86_CR4_SMEP_BIT
)

	)

121 
	#X86_CR4_SMAP_BIT
 21

	)

122 
	#X86_CR4_SMAP
 
	`_BITUL
(
X86_CR4_SMAP_BIT
)

	)

127 
	#X86_CR8_TPR
 
	`_AC
(0x0000000f,
UL
Ë

	)

136 
	#CX86_PCR0
 0x20

	)

137 
	#CX86_GCR
 0xb8

	)

138 
	#CX86_CCR0
 0xc0

	)

139 
	#CX86_CCR1
 0xc1

	)

140 
	#CX86_CCR2
 0xc2

	)

141 
	#CX86_CCR3
 0xc3

	)

142 
	#CX86_CCR4
 0xe8

	)

143 
	#CX86_CCR5
 0xe9

	)

144 
	#CX86_CCR6
 0xó

	)

145 
	#CX86_CCR7
 0xeb

	)

146 
	#CX86_PCR1
 0xf0

	)

147 
	#CX86_DIR0
 0x„

	)

148 
	#CX86_DIR1
 0xff

	)

149 
	#CX86_ARR_BASE
 0xc4

	)

150 
	#CX86_RCR_BASE
 0xdc

	)

	@/usr/include/asm/ptrace-abi.h

1 #i‚de‡
_ASM_X86_PTRACE_ABI_H


2 
	#_ASM_X86_PTRACE_ABI_H


	)

4 #ifde‡
__i386__


6 
	#EBX
 0

	)

7 
	#ECX
 1

	)

8 
	#EDX
 2

	)

9 
	#ESI
 3

	)

10 
	#EDI
 4

	)

11 
	#EBP
 5

	)

12 
	#EAX
 6

	)

13 
	#DS
 7

	)

14 
	#ES
 8

	)

15 
	#FS
 9

	)

16 
	#GS
 10

	)

17 
	#ORIG_EAX
 11

	)

18 
	#EIP
 12

	)

19 
	#CS
 13

	)

20 
	#EFL
 14

	)

21 
	#UESP
 15

	)

22 
	#SS
 16

	)

23 
	#FRAME_SIZE
 17

	)

27 #i‡
deföed
(
__ASSEMBLY__
Ë|| deföed(
__FRAME_OFFSETS
)

28 
	#R15
 0

	)

29 
	#R14
 8

	)

30 
	#R13
 16

	)

31 
	#R12
 24

	)

32 
	#RBP
 32

	)

33 
	#RBX
 40

	)

35 
	#R11
 48

	)

36 
	#R10
 56

	)

37 
	#R9
 64

	)

38 
	#R8
 72

	)

39 
	#RAX
 80

	)

40 
	#RCX
 88

	)

41 
	#RDX
 96

	)

42 
	#RSI
 104

	)

43 
	#RDI
 112

	)

44 
	#ORIG_RAX
 120

	)

47 
	#RIP
 128

	)

48 
	#CS
 136

	)

49 
	#EFLAGS
 144

	)

50 
	#RSP
 152

	)

51 
	#SS
 160

	)

52 
	#ARGOFFSET
 
R11


	)

56 
	#FRAME_SIZE
 168

	)

61 
	#PTRACE_GETREGS
 12

	)

62 
	#PTRACE_SETREGS
 13

	)

63 
	#PTRACE_GETFPREGS
 14

	)

64 
	#PTRACE_SETFPREGS
 15

	)

65 
	#PTRACE_GETFPXREGS
 18

	)

66 
	#PTRACE_SETFPXREGS
 19

	)

68 
	#PTRACE_OLDSETOPTIONS
 21

	)

71 
	#PTRACE_GET_THREAD_AREA
 25

	)

72 
	#PTRACE_SET_THREAD_AREA
 26

	)

74 #ifde‡
__x86_64__


75 
	#PTRACE_ARCH_PRCTL
 30

	)

78 
	#PTRACE_SYSEMU
 31

	)

79 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

81 
	#PTRACE_SINGLEBLOCK
 33

	)

83 #i‚de‡
__ASSEMBLY__


84 
	~<löux/ty≥s.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/termios.h

1 
	~<asm-gíîic/ãrmios.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

279 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

280 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

281 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

282 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

283 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

284 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

285 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

286 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

287 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

288 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

289 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

290 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

291 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

292 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

293 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

294 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

295 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

296 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

297 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

298 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

299 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

300 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

301 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

302 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

303 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

304 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

305 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

306 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

307 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

308 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

309 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

310 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bªak
 
__NR_bªak


	)

20 
	#SYS_brk
 
__NR_brk


	)

21 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

22 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

23 
	#SYS_chdú
 
__NR_chdú


	)

24 
	#SYS_chmod
 
__NR_chmod


	)

25 
	#SYS_chown
 
__NR_chown


	)

26 
	#SYS_chown32
 
__NR_chown32


	)

27 
	#SYS_chroŸ
 
__NR_chroŸ


	)

28 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

29 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

30 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

31 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

32 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

33 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

34 
	#SYS_˛o£
 
__NR_˛o£


	)

35 
	#SYS_¸ót
 
__NR_¸ót


	)

36 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

37 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

38 
	#SYS_dup
 
__NR_dup


	)

39 
	#SYS_dup2
 
__NR_dup2


	)

40 
	#SYS_dup3
 
__NR_dup3


	)

41 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

42 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

43 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

44 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

45 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

46 
	#SYS_evítfd
 
__NR_evítfd


	)

47 
	#SYS_evítfd2
 
__NR_evítfd2


	)

48 
	#SYS_execve
 
__NR_execve


	)

49 
	#SYS_exô
 
__NR_exô


	)

50 
	#SYS_exô_group
 
__NR_exô_group


	)

51 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

52 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

53 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

54 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

55 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

56 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

57 
	#SYS_fchdú
 
__NR_fchdú


	)

58 
	#SYS_fchmod
 
__NR_fchmod


	)

59 
	#SYS_fchmod©
 
__NR_fchmod©


	)

60 
	#SYS_fchown
 
__NR_fchown


	)

61 
	#SYS_fchown32
 
__NR_fchown32


	)

62 
	#SYS_fchow«t
 
__NR_fchow«t


	)

63 
	#SYS_f˙é
 
__NR_f˙é


	)

64 
	#SYS_f˙é64
 
__NR_f˙é64


	)

65 
	#SYS_fd©async
 
__NR_fd©async


	)

66 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

67 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kcmp
 
__NR_kcmp


	)

138 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

139 
	#SYS_key˘l
 
__NR_key˘l


	)

140 
	#SYS_kûl
 
__NR_kûl


	)

141 
	#SYS_lchown
 
__NR_lchown


	)

142 
	#SYS_lchown32
 
__NR_lchown32


	)

143 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

144 
	#SYS_lök
 
__NR_lök


	)

145 
	#SYS_lök©
 
__NR_lök©


	)

146 
	#SYS_li°x©å
 
__NR_li°x©å


	)

147 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

148 
	#SYS_lock
 
__NR_lock


	)

149 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

150 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

151 
	#SYS_l£ek
 
__NR_l£ek


	)

152 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

153 
	#SYS_l°©
 
__NR_l°©


	)

154 
	#SYS_l°©64
 
__NR_l°©64


	)

155 
	#SYS_madvi£
 
__NR_madvi£


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

231 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

232 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

233 
	#SYS_rmdú
 
__NR_rmdú


	)

234 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

235 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

236 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

237 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

238 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

239 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

240 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

241 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

242 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

243 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

244 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

245 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

246 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

247 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

248 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

249 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

250 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

251 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

252 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

253 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

254 
	#SYS_£ccomp
 
__NR_£ccomp


	)

255 
	#SYS_£À˘
 
__NR_£À˘


	)

256 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

257 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

258 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

259 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

260 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

261 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

262 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

263 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

264 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

265 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

266 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

267 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

268 
	#SYS_£tgid
 
__NR_£tgid


	)

269 
	#SYS_£tgid32
 
__NR_£tgid32


	)

270 
	#SYS_£tgroups
 
__NR_£tgroups


	)

271 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

272 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

273 
	#SYS_£tôimî
 
__NR_£tôimî


	)

274 
	#SYS_£äs
 
__NR_£äs


	)

275 
	#SYS_£çgid
 
__NR_£çgid


	)

276 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

277 
	#SYS_£åegid
 
__NR_£åegid


	)

278 
	#SYS_£åegid32
 
__NR_£åegid32


	)

279 
	#SYS_£åesgid
 
__NR_£åesgid


	)

280 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

281 
	#SYS_£åesuid
 
__NR_£åesuid


	)

282 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

283 
	#SYS_£åeuid
 
__NR_£åeuid


	)

284 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

285 
	#SYS_£ålimô
 
__NR_£ålimô


	)

286 
	#SYS_£tsid
 
__NR_£tsid


	)

287 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

288 
	#SYS_£tuid
 
__NR_£tuid


	)

289 
	#SYS_£tuid32
 
__NR_£tuid32


	)

290 
	#SYS_£tx©å
 
__NR_£tx©å


	)

291 
	#SYS_sgëmask
 
__NR_sgëmask


	)

292 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

293 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

294 
	#SYS_sig«l
 
__NR_sig«l


	)

295 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

296 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

297 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

298 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

299 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

300 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

301 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

302 
	#SYS_•li˚
 
__NR_•li˚


	)

303 
	#SYS_s£tmask
 
__NR_s£tmask


	)

304 
	#SYS_°©
 
__NR_°©


	)

305 
	#SYS_°©64
 
__NR_°©64


	)

306 
	#SYS_°©fs
 
__NR_°©fs


	)

307 
	#SYS_°©fs64
 
__NR_°©fs64


	)

308 
	#SYS_°ime
 
__NR_°ime


	)

309 
	#SYS_°ty
 
__NR_°ty


	)

310 
	#SYS_sw≠off
 
__NR_sw≠off


	)

311 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

312 
	#SYS_symlök
 
__NR_symlök


	)

313 
	#SYS_symlök©
 
__NR_symlök©


	)

314 
	#SYS_sync
 
__NR_sync


	)

315 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

316 
	#SYS_syncfs
 
__NR_syncfs


	)

317 
	#SYS_sysfs
 
__NR_sysfs


	)

318 
	#SYS_sysöfo
 
__NR_sysöfo


	)

319 
	#SYS_sy¶og
 
__NR_sy¶og


	)

320 
	#SYS_ãe
 
__NR_ãe


	)

321 
	#SYS_tgkûl
 
__NR_tgkûl


	)

322 
	#SYS_time
 
__NR_time


	)

323 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

324 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

325 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

326 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

327 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

328 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

329 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

330 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

331 
	#SYS_times
 
__NR_times


	)

332 
	#SYS_tkûl
 
__NR_tkûl


	)

333 
	#SYS_åunˇã
 
__NR_åunˇã


	)

334 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

335 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

336 
	#SYS_ulimô
 
__NR_ulimô


	)

337 
	#SYS_umask
 
__NR_umask


	)

338 
	#SYS_umou¡
 
__NR_umou¡


	)

339 
	#SYS_umou¡2
 
__NR_umou¡2


	)

340 
	#SYS_u«me
 
__NR_u«me


	)

341 
	#SYS_u∆ök
 
__NR_u∆ök


	)

342 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

343 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

344 
	#SYS_u£lib
 
__NR_u£lib


	)

345 
	#SYS_u°©
 
__NR_u°©


	)

346 
	#SYS_utime
 
__NR_utime


	)

347 
	#SYS_utimíßt
 
__NR_utimíßt


	)

348 
	#SYS_utimes
 
__NR_utimes


	)

349 
	#SYS_vf‹k
 
__NR_vf‹k


	)

350 
	#SYS_vh™gup
 
__NR_vh™gup


	)

351 
	#SYS_vm86
 
__NR_vm86


	)

352 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

353 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

354 
	#SYS_v£rvî
 
__NR_v£rvî


	)

355 
	#SYS_waô4
 
__NR_waô4


	)

356 
	#SYS_waôid
 
__NR_waôid


	)

357 
	#SYS_waôpid
 
__NR_waôpid


	)

358 
	#SYS_wrôe
 
__NR_wrôe


	)

359 
	#SYS_wrôev
 
__NR_wrôev


	)

361 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


362 
	#SYS__sys˘l
 
__NR__sys˘l


	)

363 
	#SYS_ac˚±
 
__NR_ac˚±


	)

364 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

365 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

366 
	#SYS_ac˘
 
__NR_ac˘


	)

367 
	#SYS_add_key
 
__NR_add_key


	)

368 
	#SYS_adjtimex
 
__NR_adjtimex


	)

369 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

370 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

371 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

372 
	#SYS_böd
 
__NR_böd


	)

373 
	#SYS_brk
 
__NR_brk


	)

374 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

375 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

376 
	#SYS_chdú
 
__NR_chdú


	)

377 
	#SYS_chmod
 
__NR_chmod


	)

378 
	#SYS_chown
 
__NR_chown


	)

379 
	#SYS_chroŸ
 
__NR_chroŸ


	)

380 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

381 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

382 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

383 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

384 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

385 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

386 
	#SYS_˛o£
 
__NR_˛o£


	)

387 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

388 
	#SYS_¸ót
 
__NR_¸ót


	)

389 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

390 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

391 
	#SYS_dup
 
__NR_dup


	)

392 
	#SYS_dup2
 
__NR_dup2


	)

393 
	#SYS_dup3
 
__NR_dup3


	)

394 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

395 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

396 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

397 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

398 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

399 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

400 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

401 
	#SYS_evítfd
 
__NR_evítfd


	)

402 
	#SYS_evítfd2
 
__NR_evítfd2


	)

403 
	#SYS_execve
 
__NR_execve


	)

404 
	#SYS_exô
 
__NR_exô


	)

405 
	#SYS_exô_group
 
__NR_exô_group


	)

406 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

407 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

408 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

409 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

410 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

411 
	#SYS_fchdú
 
__NR_fchdú


	)

412 
	#SYS_fchmod
 
__NR_fchmod


	)

413 
	#SYS_fchmod©
 
__NR_fchmod©


	)

414 
	#SYS_fchown
 
__NR_fchown


	)

415 
	#SYS_fchow«t
 
__NR_fchow«t


	)

416 
	#SYS_f˙é
 
__NR_f˙é


	)

417 
	#SYS_fd©async
 
__NR_fd©async


	)

418 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

419 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

420 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

421 
	#SYS_Êock
 
__NR_Êock


	)

422 
	#SYS_f‹k
 
__NR_f‹k


	)

423 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

424 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

425 
	#SYS_f°©
 
__NR_f°©


	)

426 
	#SYS_f°©fs
 
__NR_f°©fs


	)

427 
	#SYS_fsync
 
__NR_fsync


	)

428 
	#SYS_·runˇã
 
__NR_·runˇã


	)

429 
	#SYS_fuãx
 
__NR_fuãx


	)

430 
	#SYS_futimeßt
 
__NR_futimeßt


	)

431 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

432 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

433 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

434 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

435 
	#SYS_gë˝u
 
__NR_gë˝u


	)

436 
	#SYS_gëcwd
 
__NR_gëcwd


	)

437 
	#SYS_gëdíts
 
__NR_gëdíts


	)

438 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

439 
	#SYS_gëegid
 
__NR_gëegid


	)

440 
	#SYS_gëeuid
 
__NR_gëeuid


	)

441 
	#SYS_gëgid
 
__NR_gëgid


	)

442 
	#SYS_gëgroups
 
__NR_gëgroups


	)

443 
	#SYS_gëôimî
 
__NR_gëôimî


	)

444 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

445 
	#SYS_gëpgid
 
__NR_gëpgid


	)

446 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

447 
	#SYS_gëpid
 
__NR_gëpid


	)

448 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

449 
	#SYS_gëµid
 
__NR_gëµid


	)

450 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

451 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

452 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

453 
	#SYS_gëæimô
 
__NR_gëæimô


	)

454 
	#SYS_gërußge
 
__NR_gërußge


	)

455 
	#SYS_gësid
 
__NR_gësid


	)

456 
	#SYS_gësock«me
 
__NR_gësock«me


	)

457 
	#SYS_gësock›t
 
__NR_gësock›t


	)

458 
	#SYS_gëtid
 
__NR_gëtid


	)

459 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

460 
	#SYS_gëuid
 
__NR_gëuid


	)

461 
	#SYS_gëx©å
 
__NR_gëx©å


	)

462 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

463 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

464 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

465 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

466 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

467 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

468 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

469 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

470 
	#SYS_io_£tup
 
__NR_io_£tup


	)

471 
	#SYS_io_submô
 
__NR_io_submô


	)

472 
	#SYS_io˘l
 
__NR_io˘l


	)

473 
	#SYS_i›îm
 
__NR_i›îm


	)

474 
	#SYS_i›l
 
__NR_i›l


	)

475 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

476 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

477 
	#SYS_kcmp
 
__NR_kcmp


	)

478 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

479 
	#SYS_key˘l
 
__NR_key˘l


	)

480 
	#SYS_kûl
 
__NR_kûl


	)

481 
	#SYS_lchown
 
__NR_lchown


	)

482 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

483 
	#SYS_lök
 
__NR_lök


	)

484 
	#SYS_lök©
 
__NR_lök©


	)

485 
	#SYS_li°í
 
__NR_li°í


	)

486 
	#SYS_li°x©å
 
__NR_li°x©å


	)

487 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

488 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

489 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

490 
	#SYS_l£ek
 
__NR_l£ek


	)

491 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

492 
	#SYS_l°©
 
__NR_l°©


	)

493 
	#SYS_madvi£
 
__NR_madvi£


	)

494 
	#SYS_mböd
 
__NR_mböd


	)

495 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

496 
	#SYS_möc‹e
 
__NR_möc‹e


	)

497 
	#SYS_mkdú
 
__NR_mkdú


	)

498 
	#SYS_mkdú©
 
__NR_mkdú©


	)

499 
	#SYS_mknod
 
__NR_mknod


	)

500 
	#SYS_mknod©
 
__NR_mknod©


	)

501 
	#SYS_mlock
 
__NR_mlock


	)

502 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

503 
	#SYS_mm≠
 
__NR_mm≠


	)

504 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

505 
	#SYS_mou¡
 
__NR_mou¡


	)

506 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

507 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

508 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

509 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

510 
	#SYS_mq_›í
 
__NR_mq_›í


	)

511 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

512 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

513 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

514 
	#SYS_mªm≠
 
__NR_mªm≠


	)

515 
	#SYS_msg˘l
 
__NR_msg˘l


	)

516 
	#SYS_msggë
 
__NR_msggë


	)

517 
	#SYS_msgrcv
 
__NR_msgrcv


	)

518 
	#SYS_msg¢d
 
__NR_msg¢d


	)

519 
	#SYS_msync
 
__NR_msync


	)

520 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

521 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

522 
	#SYS_munm≠
 
__NR_munm≠


	)

523 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

524 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

525 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

526 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

527 
	#SYS_›í
 
__NR_›í


	)

528 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

529 
	#SYS_›í©
 
__NR_›í©


	)

530 
	#SYS_∑u£
 
__NR_∑u£


	)

531 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

532 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

533 
	#SYS_pùe
 
__NR_pùe


	)

534 
	#SYS_pùe2
 
__NR_pùe2


	)

535 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

536 
	#SYS_pﬁl
 
__NR_pﬁl


	)

537 
	#SYS_µﬁl
 
__NR_µﬁl


	)

538 
	#SYS_¥˘l
 
__NR_¥˘l


	)

539 
	#SYS_¥ód64
 
__NR_¥ód64


	)

540 
	#SYS_¥ódv
 
__NR_¥ódv


	)

541 
	#SYS_¥limô64
 
__NR_¥limô64


	)

542 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

543 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

544 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

545 
	#SYS_±ø˚
 
__NR_±ø˚


	)

546 
	#SYS_puçmsg
 
__NR_puçmsg


	)

547 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

548 
	#SYS_pwrôev
 
__NR_pwrôev


	)

549 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

550 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

551 
	#SYS_ªad
 
__NR_ªad


	)

552 
	#SYS_ªadahód
 
__NR_ªadahód


	)

553 
	#SYS_ªadlök
 
__NR_ªadlök


	)

554 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

555 
	#SYS_ªadv
 
__NR_ªadv


	)

556 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

557 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

558 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

559 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

560 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

561 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

562 
	#SYS_ª«me
 
__NR_ª«me


	)

563 
	#SYS_ª«mót
 
__NR_ª«mót


	)

564 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

565 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

566 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

567 
	#SYS_rmdú
 
__NR_rmdú


	)

568 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

569 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

570 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

571 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

572 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

573 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

574 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

575 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

576 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

577 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

578 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

579 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

580 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

581 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

582 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

583 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

584 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

585 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

586 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

587 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

588 
	#SYS_£ccomp
 
__NR_£ccomp


	)

589 
	#SYS_£curôy
 
__NR_£curôy


	)

590 
	#SYS_£À˘
 
__NR_£À˘


	)

591 
	#SYS_£m˘l
 
__NR_£m˘l


	)

592 
	#SYS_£mgë
 
__NR_£mgë


	)

593 
	#SYS_£m›
 
__NR_£m›


	)

594 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

595 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

596 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

597 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

598 
	#SYS_£ndto
 
__NR_£ndto


	)

599 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

600 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

601 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

602 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

603 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

604 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

605 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

606 
	#SYS_£tgid
 
__NR_£tgid


	)

607 
	#SYS_£tgroups
 
__NR_£tgroups


	)

608 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

609 
	#SYS_£tôimî
 
__NR_£tôimî


	)

610 
	#SYS_£äs
 
__NR_£äs


	)

611 
	#SYS_£çgid
 
__NR_£çgid


	)

612 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

613 
	#SYS_£åegid
 
__NR_£åegid


	)

614 
	#SYS_£åesgid
 
__NR_£åesgid


	)

615 
	#SYS_£åesuid
 
__NR_£åesuid


	)

616 
	#SYS_£åeuid
 
__NR_£åeuid


	)

617 
	#SYS_£ålimô
 
__NR_£ålimô


	)

618 
	#SYS_£tsid
 
__NR_£tsid


	)

619 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

620 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

621 
	#SYS_£tuid
 
__NR_£tuid


	)

622 
	#SYS_£tx©å
 
__NR_£tx©å


	)

623 
	#SYS_shm©
 
__NR_shm©


	)

624 
	#SYS_shm˘l
 
__NR_shm˘l


	)

625 
	#SYS_shmdt
 
__NR_shmdt


	)

626 
	#SYS_shmgë
 
__NR_shmgë


	)

627 
	#SYS_shutdown
 
__NR_shutdown


	)

628 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

629 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

630 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

631 
	#SYS_sockë
 
__NR_sockë


	)

632 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

633 
	#SYS_•li˚
 
__NR_•li˚


	)

634 
	#SYS_°©
 
__NR_°©


	)

635 
	#SYS_°©fs
 
__NR_°©fs


	)

636 
	#SYS_sw≠off
 
__NR_sw≠off


	)

637 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

638 
	#SYS_symlök
 
__NR_symlök


	)

639 
	#SYS_symlök©
 
__NR_symlök©


	)

640 
	#SYS_sync
 
__NR_sync


	)

641 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

642 
	#SYS_syncfs
 
__NR_syncfs


	)

643 
	#SYS_sysfs
 
__NR_sysfs


	)

644 
	#SYS_sysöfo
 
__NR_sysöfo


	)

645 
	#SYS_sy¶og
 
__NR_sy¶og


	)

646 
	#SYS_ãe
 
__NR_ãe


	)

647 
	#SYS_tgkûl
 
__NR_tgkûl


	)

648 
	#SYS_time
 
__NR_time


	)

649 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

650 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

651 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

652 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

653 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

654 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

655 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

656 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

657 
	#SYS_times
 
__NR_times


	)

658 
	#SYS_tkûl
 
__NR_tkûl


	)

659 
	#SYS_åunˇã
 
__NR_åunˇã


	)

660 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

661 
	#SYS_umask
 
__NR_umask


	)

662 
	#SYS_umou¡2
 
__NR_umou¡2


	)

663 
	#SYS_u«me
 
__NR_u«me


	)

664 
	#SYS_u∆ök
 
__NR_u∆ök


	)

665 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

666 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

667 
	#SYS_u£lib
 
__NR_u£lib


	)

668 
	#SYS_u°©
 
__NR_u°©


	)

669 
	#SYS_utime
 
__NR_utime


	)

670 
	#SYS_utimíßt
 
__NR_utimíßt


	)

671 
	#SYS_utimes
 
__NR_utimes


	)

672 
	#SYS_vf‹k
 
__NR_vf‹k


	)

673 
	#SYS_vh™gup
 
__NR_vh™gup


	)

674 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

675 
	#SYS_v£rvî
 
__NR_v£rvî


	)

676 
	#SYS_waô4
 
__NR_waô4


	)

677 
	#SYS_waôid
 
__NR_waôid


	)

678 
	#SYS_wrôe
 
__NR_wrôe


	)

679 
	#SYS_wrôev
 
__NR_wrôev


	)

681 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


682 
	#SYS_ac˚±
 
__NR_ac˚±


	)

683 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

684 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

685 
	#SYS_ac˘
 
__NR_ac˘


	)

686 
	#SYS_add_key
 
__NR_add_key


	)

687 
	#SYS_adjtimex
 
__NR_adjtimex


	)

688 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

689 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

690 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

691 
	#SYS_böd
 
__NR_böd


	)

692 
	#SYS_brk
 
__NR_brk


	)

693 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

694 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

695 
	#SYS_chdú
 
__NR_chdú


	)

696 
	#SYS_chmod
 
__NR_chmod


	)

697 
	#SYS_chown
 
__NR_chown


	)

698 
	#SYS_chroŸ
 
__NR_chroŸ


	)

699 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

700 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

701 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

702 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

703 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

704 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

705 
	#SYS_˛o£
 
__NR_˛o£


	)

706 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

707 
	#SYS_¸ót
 
__NR_¸ót


	)

708 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

709 
	#SYS_dup
 
__NR_dup


	)

710 
	#SYS_dup2
 
__NR_dup2


	)

711 
	#SYS_dup3
 
__NR_dup3


	)

712 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

713 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

714 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

715 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

716 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

717 
	#SYS_evítfd
 
__NR_evítfd


	)

718 
	#SYS_evítfd2
 
__NR_evítfd2


	)

719 
	#SYS_execve
 
__NR_execve


	)

720 
	#SYS_exô
 
__NR_exô


	)

721 
	#SYS_exô_group
 
__NR_exô_group


	)

722 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

723 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

724 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

725 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

726 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

727 
	#SYS_fchdú
 
__NR_fchdú


	)

728 
	#SYS_fchmod
 
__NR_fchmod


	)

729 
	#SYS_fchmod©
 
__NR_fchmod©


	)

730 
	#SYS_fchown
 
__NR_fchown


	)

731 
	#SYS_fchow«t
 
__NR_fchow«t


	)

732 
	#SYS_f˙é
 
__NR_f˙é


	)

733 
	#SYS_fd©async
 
__NR_fd©async


	)

734 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

735 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

736 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

737 
	#SYS_Êock
 
__NR_Êock


	)

738 
	#SYS_f‹k
 
__NR_f‹k


	)

739 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

740 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

741 
	#SYS_f°©
 
__NR_f°©


	)

742 
	#SYS_f°©fs
 
__NR_f°©fs


	)

743 
	#SYS_fsync
 
__NR_fsync


	)

744 
	#SYS_·runˇã
 
__NR_·runˇã


	)

745 
	#SYS_fuãx
 
__NR_fuãx


	)

746 
	#SYS_futimeßt
 
__NR_futimeßt


	)

747 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

748 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

749 
	#SYS_gë˝u
 
__NR_gë˝u


	)

750 
	#SYS_gëcwd
 
__NR_gëcwd


	)

751 
	#SYS_gëdíts
 
__NR_gëdíts


	)

752 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

753 
	#SYS_gëegid
 
__NR_gëegid


	)

754 
	#SYS_gëeuid
 
__NR_gëeuid


	)

755 
	#SYS_gëgid
 
__NR_gëgid


	)

756 
	#SYS_gëgroups
 
__NR_gëgroups


	)

757 
	#SYS_gëôimî
 
__NR_gëôimî


	)

758 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

759 
	#SYS_gëpgid
 
__NR_gëpgid


	)

760 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

761 
	#SYS_gëpid
 
__NR_gëpid


	)

762 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

763 
	#SYS_gëµid
 
__NR_gëµid


	)

764 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

765 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

766 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

767 
	#SYS_gëæimô
 
__NR_gëæimô


	)

768 
	#SYS_gërußge
 
__NR_gërußge


	)

769 
	#SYS_gësid
 
__NR_gësid


	)

770 
	#SYS_gësock«me
 
__NR_gësock«me


	)

771 
	#SYS_gësock›t
 
__NR_gësock›t


	)

772 
	#SYS_gëtid
 
__NR_gëtid


	)

773 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

774 
	#SYS_gëuid
 
__NR_gëuid


	)

775 
	#SYS_gëx©å
 
__NR_gëx©å


	)

776 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

777 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

778 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

779 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

780 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

781 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

782 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

783 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

784 
	#SYS_io_£tup
 
__NR_io_£tup


	)

785 
	#SYS_io_submô
 
__NR_io_submô


	)

786 
	#SYS_io˘l
 
__NR_io˘l


	)

787 
	#SYS_i›îm
 
__NR_i›îm


	)

788 
	#SYS_i›l
 
__NR_i›l


	)

789 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

790 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

791 
	#SYS_kcmp
 
__NR_kcmp


	)

792 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

793 
	#SYS_key˘l
 
__NR_key˘l


	)

794 
	#SYS_kûl
 
__NR_kûl


	)

795 
	#SYS_lchown
 
__NR_lchown


	)

796 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

797 
	#SYS_lök
 
__NR_lök


	)

798 
	#SYS_lök©
 
__NR_lök©


	)

799 
	#SYS_li°í
 
__NR_li°í


	)

800 
	#SYS_li°x©å
 
__NR_li°x©å


	)

801 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

802 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

803 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

804 
	#SYS_l£ek
 
__NR_l£ek


	)

805 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

806 
	#SYS_l°©
 
__NR_l°©


	)

807 
	#SYS_madvi£
 
__NR_madvi£


	)

808 
	#SYS_mböd
 
__NR_mböd


	)

809 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

810 
	#SYS_möc‹e
 
__NR_möc‹e


	)

811 
	#SYS_mkdú
 
__NR_mkdú


	)

812 
	#SYS_mkdú©
 
__NR_mkdú©


	)

813 
	#SYS_mknod
 
__NR_mknod


	)

814 
	#SYS_mknod©
 
__NR_mknod©


	)

815 
	#SYS_mlock
 
__NR_mlock


	)

816 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

817 
	#SYS_mm≠
 
__NR_mm≠


	)

818 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

819 
	#SYS_mou¡
 
__NR_mou¡


	)

820 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

821 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

822 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

823 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

824 
	#SYS_mq_›í
 
__NR_mq_›í


	)

825 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

826 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

827 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

828 
	#SYS_mªm≠
 
__NR_mªm≠


	)

829 
	#SYS_msg˘l
 
__NR_msg˘l


	)

830 
	#SYS_msggë
 
__NR_msggë


	)

831 
	#SYS_msgrcv
 
__NR_msgrcv


	)

832 
	#SYS_msg¢d
 
__NR_msg¢d


	)

833 
	#SYS_msync
 
__NR_msync


	)

834 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

835 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

836 
	#SYS_munm≠
 
__NR_munm≠


	)

837 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

838 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

839 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

840 
	#SYS_›í
 
__NR_›í


	)

841 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

842 
	#SYS_›í©
 
__NR_›í©


	)

843 
	#SYS_∑u£
 
__NR_∑u£


	)

844 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

845 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

846 
	#SYS_pùe
 
__NR_pùe


	)

847 
	#SYS_pùe2
 
__NR_pùe2


	)

848 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

849 
	#SYS_pﬁl
 
__NR_pﬁl


	)

850 
	#SYS_µﬁl
 
__NR_µﬁl


	)

851 
	#SYS_¥˘l
 
__NR_¥˘l


	)

852 
	#SYS_¥ód64
 
__NR_¥ód64


	)

853 
	#SYS_¥ódv
 
__NR_¥ódv


	)

854 
	#SYS_¥limô64
 
__NR_¥limô64


	)

855 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

856 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

857 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

858 
	#SYS_±ø˚
 
__NR_±ø˚


	)

859 
	#SYS_puçmsg
 
__NR_puçmsg


	)

860 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

861 
	#SYS_pwrôev
 
__NR_pwrôev


	)

862 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

863 
	#SYS_ªad
 
__NR_ªad


	)

864 
	#SYS_ªadahód
 
__NR_ªadahód


	)

865 
	#SYS_ªadlök
 
__NR_ªadlök


	)

866 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

867 
	#SYS_ªadv
 
__NR_ªadv


	)

868 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

869 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

870 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

871 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

872 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

873 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

874 
	#SYS_ª«me
 
__NR_ª«me


	)

875 
	#SYS_ª«mót
 
__NR_ª«mót


	)

876 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

877 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

878 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

879 
	#SYS_rmdú
 
__NR_rmdú


	)

880 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

881 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

882 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

883 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

884 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

885 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

886 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

887 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

888 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

889 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

890 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

891 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

892 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

893 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

894 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

895 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

896 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

897 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

898 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

899 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

900 
	#SYS_£ccomp
 
__NR_£ccomp


	)

901 
	#SYS_£curôy
 
__NR_£curôy


	)

902 
	#SYS_£À˘
 
__NR_£À˘


	)

903 
	#SYS_£m˘l
 
__NR_£m˘l


	)

904 
	#SYS_£mgë
 
__NR_£mgë


	)

905 
	#SYS_£m›
 
__NR_£m›


	)

906 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

907 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

908 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

909 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

910 
	#SYS_£ndto
 
__NR_£ndto


	)

911 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

912 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

913 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

914 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

915 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

916 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

917 
	#SYS_£tgid
 
__NR_£tgid


	)

918 
	#SYS_£tgroups
 
__NR_£tgroups


	)

919 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

920 
	#SYS_£tôimî
 
__NR_£tôimî


	)

921 
	#SYS_£äs
 
__NR_£äs


	)

922 
	#SYS_£çgid
 
__NR_£çgid


	)

923 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

924 
	#SYS_£åegid
 
__NR_£åegid


	)

925 
	#SYS_£åesgid
 
__NR_£åesgid


	)

926 
	#SYS_£åesuid
 
__NR_£åesuid


	)

927 
	#SYS_£åeuid
 
__NR_£åeuid


	)

928 
	#SYS_£ålimô
 
__NR_£ålimô


	)

929 
	#SYS_£tsid
 
__NR_£tsid


	)

930 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

931 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

932 
	#SYS_£tuid
 
__NR_£tuid


	)

933 
	#SYS_£tx©å
 
__NR_£tx©å


	)

934 
	#SYS_shm©
 
__NR_shm©


	)

935 
	#SYS_shm˘l
 
__NR_shm˘l


	)

936 
	#SYS_shmdt
 
__NR_shmdt


	)

937 
	#SYS_shmgë
 
__NR_shmgë


	)

938 
	#SYS_shutdown
 
__NR_shutdown


	)

939 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

940 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

941 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

942 
	#SYS_sockë
 
__NR_sockë


	)

943 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

944 
	#SYS_•li˚
 
__NR_•li˚


	)

945 
	#SYS_°©
 
__NR_°©


	)

946 
	#SYS_°©fs
 
__NR_°©fs


	)

947 
	#SYS_sw≠off
 
__NR_sw≠off


	)

948 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

949 
	#SYS_symlök
 
__NR_symlök


	)

950 
	#SYS_symlök©
 
__NR_symlök©


	)

951 
	#SYS_sync
 
__NR_sync


	)

952 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

953 
	#SYS_syncfs
 
__NR_syncfs


	)

954 
	#SYS_sysfs
 
__NR_sysfs


	)

955 
	#SYS_sysöfo
 
__NR_sysöfo


	)

956 
	#SYS_sy¶og
 
__NR_sy¶og


	)

957 
	#SYS_ãe
 
__NR_ãe


	)

958 
	#SYS_tgkûl
 
__NR_tgkûl


	)

959 
	#SYS_time
 
__NR_time


	)

960 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

961 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

962 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

963 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

964 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

965 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

966 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

967 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

968 
	#SYS_times
 
__NR_times


	)

969 
	#SYS_tkûl
 
__NR_tkûl


	)

970 
	#SYS_åunˇã
 
__NR_åunˇã


	)

971 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

972 
	#SYS_umask
 
__NR_umask


	)

973 
	#SYS_umou¡2
 
__NR_umou¡2


	)

974 
	#SYS_u«me
 
__NR_u«me


	)

975 
	#SYS_u∆ök
 
__NR_u∆ök


	)

976 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

977 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

978 
	#SYS_u°©
 
__NR_u°©


	)

979 
	#SYS_utime
 
__NR_utime


	)

980 
	#SYS_utimíßt
 
__NR_utimíßt


	)

981 
	#SYS_utimes
 
__NR_utimes


	)

982 
	#SYS_vf‹k
 
__NR_vf‹k


	)

983 
	#SYS_vh™gup
 
__NR_vh™gup


	)

984 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

985 
	#SYS_waô4
 
__NR_waô4


	)

986 
	#SYS_waôid
 
__NR_waôid


	)

987 
	#SYS_wrôe
 
__NR_wrôe


	)

988 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_BSD


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/pci_regs.h

22 #i‚de‡
LINUX_PCI_REGS_H


23 
	#LINUX_PCI_REGS_H


	)

29 
	#PCI_STD_HEADER_SIZEOF
 64

	)

30 
	#PCI_VENDOR_ID
 0x00

	)

31 
	#PCI_DEVICE_ID
 0x02

	)

32 
	#PCI_COMMAND
 0x04

	)

33 
	#PCI_COMMAND_IO
 0x1

	)

34 
	#PCI_COMMAND_MEMORY
 0x2

	)

35 
	#PCI_COMMAND_MASTER
 0x4

	)

36 
	#PCI_COMMAND_SPECIAL
 0x8

	)

37 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

38 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

39 
	#PCI_COMMAND_PARITY
 0x40

	)

40 
	#PCI_COMMAND_WAIT
 0x80

	)

41 
	#PCI_COMMAND_SERR
 0x100

	)

42 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

43 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

45 
	#PCI_STATUS
 0x06

	)

46 
	#PCI_STATUS_INTERRUPT
 0x08

	)

47 
	#PCI_STATUS_CAP_LIST
 0x10

	)

48 
	#PCI_STATUS_66MHZ
 0x20

	)

49 
	#PCI_STATUS_UDF
 0x40

	)

50 
	#PCI_STATUS_FAST_BACK
 0x80

	)

51 
	#PCI_STATUS_PARITY
 0x100

	)

52 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

53 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

54 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

55 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

56 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

57 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

58 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

59 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

60 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

62 
	#PCI_CLASS_REVISION
 0x08

	)

63 
	#PCI_REVISION_ID
 0x08

	)

64 
	#PCI_CLASS_PROG
 0x09

	)

65 
	#PCI_CLASS_DEVICE
 0x0®

	)

67 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

68 
	#PCI_LATENCY_TIMER
 0x0d

	)

69 
	#PCI_HEADER_TYPE
 0x0ê

	)

70 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

71 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

72 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

74 
	#PCI_BIST
 0x0‡

	)

75 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

76 
	#PCI_BIST_START
 0x40

	)

77 
	#PCI_BIST_CAPABLE
 0x80

	)

85 
	#PCI_BASE_ADDRESS_0
 0x10

	)

86 
	#PCI_BASE_ADDRESS_1
 0x14

	)

87 
	#PCI_BASE_ADDRESS_2
 0x18

	)

88 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

89 
	#PCI_BASE_ADDRESS_4
 0x20

	)

90 
	#PCI_BASE_ADDRESS_5
 0x24

	)

91 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

93 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

97 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

98 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

99 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

100 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

104 
	#PCI_CARDBUS_CIS
 0x28

	)

105 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

106 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

107 
	#PCI_ROM_ADDRESS
 0x30

	)

108 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

109 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

111 
	#PCI_CAPABILITY_LIST
 0x34

	)

114 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

115 
	#PCI_INTERRUPT_PIN
 0x3d

	)

116 
	#PCI_MIN_GNT
 0x3ê

	)

117 
	#PCI_MAX_LAT
 0x3‡

	)

120 
	#PCI_PRIMARY_BUS
 0x18

	)

121 
	#PCI_SECONDARY_BUS
 0x19

	)

122 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

123 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

124 
	#PCI_IO_BASE
 0x1¯

	)

125 
	#PCI_IO_LIMIT
 0x1d

	)

126 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

127 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

128 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

129 
	#PCI_IO_RANGE_MASK
 (~0x0fULË

	)

130 
	#PCI_IO_1K_RANGE_MASK
 (~0x03ULË

	)

131 
	#PCI_SEC_STATUS
 0x1ê

	)

132 
	#PCI_MEMORY_BASE
 0x20

	)

133 
	#PCI_MEMORY_LIMIT
 0x22

	)

134 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

135 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

136 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

137 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

138 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

139 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

140 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

141 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

142 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

143 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

144 
	#PCI_IO_BASE_UPPER16
 0x30

	)

145 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

148 
	#PCI_ROM_ADDRESS1
 0x38

	)

150 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

151 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

152 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

153 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

154 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

155 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

156 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

157 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

160 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

162 
	#PCI_CB_SEC_STATUS
 0x16

	)

163 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

164 
	#PCI_CB_CARD_BUS
 0x19

	)

165 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

166 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

167 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

168 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

169 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

170 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

171 
	#PCI_CB_IO_BASE_0
 0x2c

	)

172 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

173 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

174 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

175 
	#PCI_CB_IO_BASE_1
 0x34

	)

176 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

177 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

178 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

179 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

181 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

182 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

183 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

184 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

185 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

186 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

187 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

188 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

189 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

190 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

191 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

192 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

193 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

194 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

199 
	#PCI_CAP_LIST_ID
 0

	)

200 
	#PCI_CAP_ID_PM
 0x01

	)

201 
	#PCI_CAP_ID_AGP
 0x02

	)

202 
	#PCI_CAP_ID_VPD
 0x03

	)

203 
	#PCI_CAP_ID_SLOTID
 0x04

	)

204 
	#PCI_CAP_ID_MSI
 0x05

	)

205 
	#PCI_CAP_ID_CHSWP
 0x06

	)

206 
	#PCI_CAP_ID_PCIX
 0x07

	)

207 
	#PCI_CAP_ID_HT
 0x08

	)

208 
	#PCI_CAP_ID_VNDR
 0x09

	)

209 
	#PCI_CAP_ID_DBG
 0x0A

	)

210 
	#PCI_CAP_ID_CCRC
 0x0B

	)

211 
	#PCI_CAP_ID_SHPC
 0x0C

	)

212 
	#PCI_CAP_ID_SSVID
 0x0D

	)

213 
	#PCI_CAP_ID_AGP3
 0x0E

	)

214 
	#PCI_CAP_ID_SECDEV
 0x0F

	)

215 
	#PCI_CAP_ID_EXP
 0x10

	)

216 
	#PCI_CAP_ID_MSIX
 0x11

	)

217 
	#PCI_CAP_ID_SATA
 0x12

	)

218 
	#PCI_CAP_ID_AF
 0x13

	)

219 
	#PCI_CAP_ID_MAX
 
PCI_CAP_ID_AF


	)

220 
	#PCI_CAP_LIST_NEXT
 1

	)

221 
	#PCI_CAP_FLAGS
 2

	)

222 
	#PCI_CAP_SIZEOF
 4

	)

226 
	#PCI_PM_PMC
 2

	)

227 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

228 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

229 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

230 
	#PCI_PM_CAP_DSI
 0x0020

	)

231 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

232 
	#PCI_PM_CAP_D1
 0x0200

	)

233 
	#PCI_PM_CAP_D2
 0x0400

	)

234 
	#PCI_PM_CAP_PME
 0x0800

	)

235 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

236 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

237 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

238 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

239 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

240 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

241 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

242 
	#PCI_PM_CTRL
 4

	)

243 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

244 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

245 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

246 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

247 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

248 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

249 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

250 
	#PCI_PM_PPB_B2_B3
 0x40

	)

251 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

252 
	#PCI_PM_DATA_REGISTER
 7

	)

253 
	#PCI_PM_SIZEOF
 8

	)

257 
	#PCI_AGP_VERSION
 2

	)

258 
	#PCI_AGP_RFU
 3

	)

259 
	#PCI_AGP_STATUS
 4

	)

260 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

261 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

262 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

263 
	#PCI_AGP_STATUS_FW
 0x0010

	)

264 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

265 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

266 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

267 
	#PCI_AGP_COMMAND
 8

	)

268 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

269 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

270 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

271 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

272 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

273 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

274 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

275 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

276 
	#PCI_AGP_SIZEOF
 12

	)

280 
	#PCI_VPD_ADDR
 2

	)

281 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

282 
	#PCI_VPD_ADDR_F
 0x8000

	)

283 
	#PCI_VPD_DATA
 4

	)

284 
	#PCI_CAP_VPD_SIZEOF
 8

	)

288 
	#PCI_SID_ESR
 2

	)

289 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

290 
	#PCI_SID_ESR_FIC
 0x20

	)

291 
	#PCI_SID_CHASSIS_NR
 3

	)

295 
	#PCI_MSI_FLAGS
 2

	)

296 
	#PCI_MSI_FLAGS_ENABLE
 0x0001

	)

297 
	#PCI_MSI_FLAGS_QMASK
 0x000ê

	)

298 
	#PCI_MSI_FLAGS_QSIZE
 0x0070

	)

299 
	#PCI_MSI_FLAGS_64BIT
 0x0080

	)

300 
	#PCI_MSI_FLAGS_MASKBIT
 0x0100

	)

301 
	#PCI_MSI_RFU
 3

	)

302 
	#PCI_MSI_ADDRESS_LO
 4

	)

303 
	#PCI_MSI_ADDRESS_HI
 8

	)

304 
	#PCI_MSI_DATA_32
 8

	)

305 
	#PCI_MSI_MASK_32
 12

	)

306 
	#PCI_MSI_PENDING_32
 16

	)

307 
	#PCI_MSI_DATA_64
 12

	)

308 
	#PCI_MSI_MASK_64
 16

	)

309 
	#PCI_MSI_PENDING_64
 20

	)

312 
	#PCI_MSIX_FLAGS
 2

	)

313 
	#PCI_MSIX_FLAGS_QSIZE
 0x07FF

	)

314 
	#PCI_MSIX_FLAGS_MASKALL
 0x4000

	)

315 
	#PCI_MSIX_FLAGS_ENABLE
 0x8000

	)

316 
	#PCI_MSIX_TABLE
 4

	)

317 
	#PCI_MSIX_TABLE_BIR
 0x00000007

	)

318 
	#PCI_MSIX_TABLE_OFFSET
 0xfffffff8

	)

319 
	#PCI_MSIX_PBA
 8

	)

320 
	#PCI_MSIX_PBA_BIR
 0x00000007

	)

321 
	#PCI_MSIX_PBA_OFFSET
 0xfffffff8

	)

322 
	#PCI_MSIX_FLAGS_BIRMASK
 
PCI_MSIX_PBA_BIR


	)

323 
	#PCI_CAP_MSIX_SIZEOF
 12

	)

326 
	#PCI_MSIX_ENTRY_SIZE
 16

	)

327 
	#PCI_MSIX_ENTRY_LOWER_ADDR
 0

	)

328 
	#PCI_MSIX_ENTRY_UPPER_ADDR
 4

	)

329 
	#PCI_MSIX_ENTRY_DATA
 8

	)

330 
	#PCI_MSIX_ENTRY_VECTOR_CTRL
 12

	)

331 
	#PCI_MSIX_ENTRY_CTRL_MASKBIT
 1

	)

335 
	#PCI_CHSWP_CSR
 2

	)

336 
	#PCI_CHSWP_DHA
 0x01

	)

337 
	#PCI_CHSWP_EIM
 0x02

	)

338 
	#PCI_CHSWP_PIE
 0x04

	)

339 
	#PCI_CHSWP_LOO
 0x08

	)

340 
	#PCI_CHSWP_PI
 0x30

	)

341 
	#PCI_CHSWP_EXT
 0x40

	)

342 
	#PCI_CHSWP_INS
 0x80

	)

346 
	#PCI_AF_LENGTH
 2

	)

347 
	#PCI_AF_CAP
 3

	)

348 
	#PCI_AF_CAP_TP
 0x01

	)

349 
	#PCI_AF_CAP_FLR
 0x02

	)

350 
	#PCI_AF_CTRL
 4

	)

351 
	#PCI_AF_CTRL_FLR
 0x01

	)

352 
	#PCI_AF_STATUS
 5

	)

353 
	#PCI_AF_STATUS_TP
 0x01

	)

354 
	#PCI_CAP_AF_SIZEOF
 6

	)

358 
	#PCI_X_CMD
 2

	)

359 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

360 
	#PCI_X_CMD_ERO
 0x0002

	)

361 
	#PCI_X_CMD_READ_512
 0x0000

	)

362 
	#PCI_X_CMD_READ_1K
 0x0004

	)

363 
	#PCI_X_CMD_READ_2K
 0x0008

	)

364 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

365 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

367 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

368 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

369 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

370 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

371 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

372 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

373 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

374 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

375 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

376 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

377 
	#PCI_X_STATUS
 4

	)

378 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

379 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

380 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

381 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

382 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

383 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

384 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

385 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

386 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

387 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

388 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

389 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

390 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

391 
	#PCI_X_ECC_CSR
 8

	)

392 
	#PCI_CAP_PCIX_SIZEOF_V0
 8

	)

393 
	#PCI_CAP_PCIX_SIZEOF_V1
 24

	)

394 
	#PCI_CAP_PCIX_SIZEOF_V2
 
PCI_CAP_PCIX_SIZEOF_V1


	)

398 
	#PCI_X_BRIDGE_SSTATUS
 2

	)

399 
	#PCI_X_SSTATUS_64BIT
 0x0001

	)

400 
	#PCI_X_SSTATUS_133MHZ
 0x0002

	)

401 
	#PCI_X_SSTATUS_FREQ
 0x03c0

	)

402 
	#PCI_X_SSTATUS_VERS
 0x3000

	)

403 
	#PCI_X_SSTATUS_V1
 0x1000

	)

404 
	#PCI_X_SSTATUS_V2
 0x2000

	)

405 
	#PCI_X_SSTATUS_266MHZ
 0x4000

	)

406 
	#PCI_X_SSTATUS_533MHZ
 0x8000

	)

407 
	#PCI_X_BRIDGE_STATUS
 4

	)

411 
	#PCI_SSVID_VENDOR_ID
 4

	)

412 
	#PCI_SSVID_DEVICE_ID
 6

	)

416 
	#PCI_EXP_FLAGS
 2

	)

417 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

418 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

419 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

420 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

421 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

422 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

423 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

424 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

425 
	#PCI_EXP_TYPE_PCIE_BRIDGE
 0x8

	)

426 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

427 
	#PCI_EXP_TYPE_RC_EC
 0x®

	)

428 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

429 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

430 
	#PCI_EXP_DEVCAP
 4

	)

431 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x00000007

	)

432 
	#PCI_EXP_DEVCAP_PHANTOM
 0x00000018

	)

433 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x00000020

	)

434 
	#PCI_EXP_DEVCAP_L0S
 0x000001c0

	)

435 
	#PCI_EXP_DEVCAP_L1
 0x00000e00

	)

436 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x00001000

	)

437 
	#PCI_EXP_DEVCAP_ATN_IND
 0x00002000

	)

438 
	#PCI_EXP_DEVCAP_PWR_IND
 0x00004000

	)

439 
	#PCI_EXP_DEVCAP_RBER
 0x00008000

	)

440 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x03fc0000

	)

441 
	#PCI_EXP_DEVCAP_PWR_SCL
 0x0c000000

	)

442 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

443 
	#PCI_EXP_DEVCTL
 8

	)

444 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

445 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

446 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

447 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

448 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

449 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

450 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

451 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

452 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

453 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

454 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

455 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

456 
	#PCI_EXP_DEVSTA
 10

	)

457 
	#PCI_EXP_DEVSTA_CED
 0x0001

	)

458 
	#PCI_EXP_DEVSTA_NFED
 0x0002

	)

459 
	#PCI_EXP_DEVSTA_FED
 0x0004

	)

460 
	#PCI_EXP_DEVSTA_URD
 0x0008

	)

461 
	#PCI_EXP_DEVSTA_AUXPD
 0x0010

	)

462 
	#PCI_EXP_DEVSTA_TRPND
 0x0020

	)

463 
	#PCI_EXP_LNKCAP
 12

	)

464 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

465 
	#PCI_EXP_LNKCAP_SLS_2_5GB
 0x00000001

	)

466 
	#PCI_EXP_LNKCAP_SLS_5_0GB
 0x00000002

	)

467 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

468 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

469 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

470 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

471 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

472 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

473 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

474 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

475 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

476 
	#PCI_EXP_LNKCTL
 16

	)

477 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

478 
	#PCI_EXP_LNKCTL_ASPM_L0S
 0x0001

	)

479 
	#PCI_EXP_LNKCTL_ASPM_L1
 0x0002

	)

480 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

481 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

482 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

483 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

484 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

485 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x0100

	)

486 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

487 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

488 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

489 
	#PCI_EXP_LNKSTA
 18

	)

490 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

491 
	#PCI_EXP_LNKSTA_CLS_2_5GB
 0x0001

	)

492 
	#PCI_EXP_LNKSTA_CLS_5_0GB
 0x0002

	)

493 
	#PCI_EXP_LNKSTA_CLS_8_0GB
 0x0003

	)

494 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

495 
	#PCI_EXP_LNKSTA_NLW_X1
 0x0010

	)

496 
	#PCI_EXP_LNKSTA_NLW_X2
 0x0020

	)

497 
	#PCI_EXP_LNKSTA_NLW_X4
 0x0040

	)

498 
	#PCI_EXP_LNKSTA_NLW_X8
 0x0080

	)

499 
	#PCI_EXP_LNKSTA_NLW_SHIFT
 4

	)

500 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

501 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

502 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

503 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

504 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

505 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V1
 20

	)

506 
	#PCI_EXP_SLTCAP
 20

	)

507 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

508 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

509 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

510 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

511 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

512 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

513 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

514 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

515 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

516 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

517 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

518 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

519 
	#PCI_EXP_SLTCTL
 24

	)

520 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

521 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

522 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

523 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

524 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

525 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

526 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

527 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

528 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

529 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

530 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

531 
	#PCI_EXP_SLTSTA
 26

	)

532 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

533 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

534 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

535 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

536 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

537 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

538 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

539 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

540 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

541 
	#PCI_EXP_RTCTL
 28

	)

542 
	#PCI_EXP_RTCTL_SECEE
 0x0001

	)

543 
	#PCI_EXP_RTCTL_SENFEE
 0x0002

	)

544 
	#PCI_EXP_RTCTL_SEFEE
 0x0004

	)

545 
	#PCI_EXP_RTCTL_PMEIE
 0x0008

	)

546 
	#PCI_EXP_RTCTL_CRSSVE
 0x0010

	)

547 
	#PCI_EXP_RTCAP
 30

	)

548 
	#PCI_EXP_RTSTA
 32

	)

549 
	#PCI_EXP_RTSTA_PME
 0x00010000

	)

550 
	#PCI_EXP_RTSTA_PENDING
 0x00020000

	)

559 
	#PCI_EXP_DEVCAP2
 36

	)

560 
	#PCI_EXP_DEVCAP2_ARI
 0x00000020

	)

561 
	#PCI_EXP_DEVCAP2_LTR
 0x00000800

	)

562 
	#PCI_EXP_DEVCAP2_OBFF_MASK
 0x000c0000

	)

563 
	#PCI_EXP_DEVCAP2_OBFF_MSG
 0x00040000

	)

564 
	#PCI_EXP_DEVCAP2_OBFF_WAKE
 0x00080000

	)

565 
	#PCI_EXP_DEVCTL2
 40

	)

566 
	#PCI_EXP_DEVCTL2_COMP_TIMEOUT
 0x000‡

	)

567 
	#PCI_EXP_DEVCTL2_ARI
 0x0020

	)

568 
	#PCI_EXP_DEVCTL2_IDO_REQ_EN
 0x0100

	)

569 
	#PCI_EXP_DEVCTL2_IDO_CMP_EN
 0x0200

	)

570 
	#PCI_EXP_DEVCTL2_LTR_EN
 0x0400

	)

571 
	#PCI_EXP_DEVCTL2_OBFF_MSGA_EN
 0x2000

	)

572 
	#PCI_EXP_DEVCTL2_OBFF_MSGB_EN
 0x4000

	)

573 
	#PCI_EXP_DEVCTL2_OBFF_WAKE_EN
 0x6000

	)

574 
	#PCI_EXP_DEVSTA2
 42

	)

575 
	#PCI_CAP_EXP_ENDPOINT_SIZEOF_V2
 44

	)

576 
	#PCI_EXP_LNKCAP2
 44

	)

577 
	#PCI_EXP_LNKCAP2_SLS_2_5GB
 0x00000002

	)

578 
	#PCI_EXP_LNKCAP2_SLS_5_0GB
 0x00000004

	)

579 
	#PCI_EXP_LNKCAP2_SLS_8_0GB
 0x00000008

	)

580 
	#PCI_EXP_LNKCAP2_CROSSLINK
 0x00000100

	)

581 
	#PCI_EXP_LNKCTL2
 48

	)

582 
	#PCI_EXP_LNKSTA2
 50

	)

583 
	#PCI_EXP_SLTCAP2
 52

	)

584 
	#PCI_EXP_SLTCTL2
 56

	)

585 
	#PCI_EXP_SLTSTA2
 58

	)

588 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

589 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

590 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

592 
	#PCI_EXT_CAP_ID_ERR
 0x01

	)

593 
	#PCI_EXT_CAP_ID_VC
 0x02

	)

594 
	#PCI_EXT_CAP_ID_DSN
 0x03

	)

595 
	#PCI_EXT_CAP_ID_PWR
 0x04

	)

596 
	#PCI_EXT_CAP_ID_RCLD
 0x05

	)

597 
	#PCI_EXT_CAP_ID_RCILC
 0x06

	)

598 
	#PCI_EXT_CAP_ID_RCEC
 0x07

	)

599 
	#PCI_EXT_CAP_ID_MFVC
 0x08

	)

600 
	#PCI_EXT_CAP_ID_VC9
 0x09

	)

601 
	#PCI_EXT_CAP_ID_RCRB
 0x0A

	)

602 
	#PCI_EXT_CAP_ID_VNDR
 0x0B

	)

603 
	#PCI_EXT_CAP_ID_CAC
 0x0C

	)

604 
	#PCI_EXT_CAP_ID_ACS
 0x0D

	)

605 
	#PCI_EXT_CAP_ID_ARI
 0x0E

	)

606 
	#PCI_EXT_CAP_ID_ATS
 0x0F

	)

607 
	#PCI_EXT_CAP_ID_SRIOV
 0x10

	)

608 
	#PCI_EXT_CAP_ID_MRIOV
 0x11

	)

609 
	#PCI_EXT_CAP_ID_MCAST
 0x12

	)

610 
	#PCI_EXT_CAP_ID_PRI
 0x13

	)

611 
	#PCI_EXT_CAP_ID_AMD_XXX
 0x14

	)

612 
	#PCI_EXT_CAP_ID_REBAR
 0x15

	)

613 
	#PCI_EXT_CAP_ID_DPA
 0x16

	)

614 
	#PCI_EXT_CAP_ID_TPH
 0x17

	)

615 
	#PCI_EXT_CAP_ID_LTR
 0x18

	)

616 
	#PCI_EXT_CAP_ID_SECPCI
 0x19

	)

617 
	#PCI_EXT_CAP_ID_PMUX
 0x1A

	)

618 
	#PCI_EXT_CAP_ID_PASID
 0x1B

	)

619 
	#PCI_EXT_CAP_ID_MAX
 
PCI_EXT_CAP_ID_PASID


	)

621 
	#PCI_EXT_CAP_DSN_SIZEOF
 12

	)

622 
	#PCI_EXT_CAP_MCAST_ENDPOINT_SIZEOF
 40

	)

625 
	#PCI_ERR_UNCOR_STATUS
 4

	)

626 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

627 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

628 
	#PCI_ERR_UNC_SURPDN
 0x00000020

	)

629 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

630 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

631 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

632 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

633 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

634 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

635 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

636 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

637 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

638 
	#PCI_ERR_UNC_ACSV
 0x00200000

	)

639 
	#PCI_ERR_UNC_INTN
 0x00400000

	)

640 
	#PCI_ERR_UNC_MCBTLP
 0x00800000

	)

641 
	#PCI_ERR_UNC_ATOMEG
 0x01000000

	)

642 
	#PCI_ERR_UNC_TLPPRE
 0x02000000

	)

643 
	#PCI_ERR_UNCOR_MASK
 8

	)

645 
	#PCI_ERR_UNCOR_SEVER
 12

	)

647 
	#PCI_ERR_COR_STATUS
 16

	)

648 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

649 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

650 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

651 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

652 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

653 
	#PCI_ERR_COR_ADV_NFAT
 0x00002000

	)

654 
	#PCI_ERR_COR_INTERNAL
 0x00004000

	)

655 
	#PCI_ERR_COR_LOG_OVER
 0x00008000

	)

656 
	#PCI_ERR_COR_MASK
 20

	)

658 
	#PCI_ERR_CAP
 24

	)

659 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

660 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

661 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

662 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

663 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

664 
	#PCI_ERR_HEADER_LOG
 28

	)

665 
	#PCI_ERR_ROOT_COMMAND
 44

	)

667 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

669 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

671 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

672 
	#PCI_ERR_ROOT_STATUS
 48

	)

673 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

675 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

677 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

679 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

680 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

681 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

682 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

683 
	#PCI_ERR_ROOT_ERR_SRC
 52

	)

686 
	#PCI_VC_PORT_REG1
 4

	)

687 
	#PCI_VC_REG1_EVCC
 0x7

	)

688 
	#PCI_VC_PORT_REG2
 8

	)

689 
	#PCI_VC_REG2_32_PHASE
 0x2

	)

690 
	#PCI_VC_REG2_64_PHASE
 0x4

	)

691 
	#PCI_VC_REG2_128_PHASE
 0x8

	)

692 
	#PCI_VC_PORT_CTRL
 12

	)

693 
	#PCI_VC_PORT_STATUS
 14

	)

694 
	#PCI_VC_RES_CAP
 16

	)

695 
	#PCI_VC_RES_CTRL
 20

	)

696 
	#PCI_VC_RES_STATUS
 26

	)

697 
	#PCI_CAP_VC_BASE_SIZEOF
 0x10

	)

698 
	#PCI_CAP_VC_PER_VC_SIZEOF
 0x0C

	)

701 
	#PCI_PWR_DSR
 4

	)

702 
	#PCI_PWR_DATA
 8

	)

703 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

704 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

705 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

706 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

707 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

708 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

709 
	#PCI_PWR_CAP
 12

	)

710 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

711 
	#PCI_EXT_CAP_PWR_SIZEOF
 16

	)

714 
	#PCI_VNDR_HEADER
 4

	)

715 
	#PCI_VNDR_HEADER_ID
(
x
Ë((xË& 0xffff)

	)

716 
	#PCI_VNDR_HEADER_REV
(
x
Ë(((xË>> 16Ë& 0xf)

	)

717 
	#PCI_VNDR_HEADER_LEN
(
x
Ë(((xË>> 20Ë& 0xfff)

	)

727 
	#HT_3BIT_CAP_MASK
 0xE0

	)

728 
	#HT_CAPTYPE_SLAVE
 0x00

	)

729 
	#HT_CAPTYPE_HOST
 0x20

	)

731 
	#HT_5BIT_CAP_MASK
 0xF8

	)

732 
	#HT_CAPTYPE_IRQ
 0x80

	)

733 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

734 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

735 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

736 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

737 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

738 
	#HT_MSI_FLAGS
 0x02

	)

739 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

740 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

741 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

742 
	#HT_MSI_ADDR_LO
 0x04

	)

743 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

744 
	#HT_MSI_ADDR_HI
 0x08

	)

745 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

746 
	#HT_CAPTYPE_VCSET
 0xB8

	)

747 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

748 
	#HT_CAPTYPE_GEN3
 0xD0

	)

749 
	#HT_CAPTYPE_PM
 0xE0

	)

750 
	#HT_CAP_SIZEOF_LONG
 28

	)

751 
	#HT_CAP_SIZEOF_SHORT
 24

	)

754 
	#PCI_ARI_CAP
 0x04

	)

755 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

756 
	#PCI_ARI_CAP_ACS
 0x0002

	)

757 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

758 
	#PCI_ARI_CTRL
 0x06

	)

759 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

760 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

761 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

762 
	#PCI_EXT_CAP_ARI_SIZEOF
 8

	)

765 
	#PCI_ATS_CAP
 0x04

	)

766 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

767 
	#PCI_ATS_MAX_QDEP
 32

	)

768 
	#PCI_ATS_CTRL
 0x06

	)

769 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

770 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

771 
	#PCI_ATS_MIN_STU
 12

	)

772 
	#PCI_EXT_CAP_ATS_SIZEOF
 8

	)

775 
	#PCI_PRI_CTRL
 0x04

	)

776 
	#PCI_PRI_CTRL_ENABLE
 0x01

	)

777 
	#PCI_PRI_CTRL_RESET
 0x02

	)

778 
	#PCI_PRI_STATUS
 0x06

	)

779 
	#PCI_PRI_STATUS_RF
 0x001

	)

780 
	#PCI_PRI_STATUS_UPRGI
 0x002

	)

781 
	#PCI_PRI_STATUS_STOPPED
 0x100

	)

782 
	#PCI_PRI_MAX_REQ
 0x08

	)

783 
	#PCI_PRI_ALLOC_REQ
 0x0¯

	)

784 
	#PCI_EXT_CAP_PRI_SIZEOF
 16

	)

787 
	#PCI_PASID_CAP
 0x04

	)

788 
	#PCI_PASID_CAP_EXEC
 0x02

	)

789 
	#PCI_PASID_CAP_PRIV
 0x04

	)

790 
	#PCI_PASID_CTRL
 0x06

	)

791 
	#PCI_PASID_CTRL_ENABLE
 0x01

	)

792 
	#PCI_PASID_CTRL_EXEC
 0x02

	)

793 
	#PCI_PASID_CTRL_PRIV
 0x04

	)

794 
	#PCI_EXT_CAP_PASID_SIZEOF
 8

	)

797 
	#PCI_SRIOV_CAP
 0x04

	)

798 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

799 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

800 
	#PCI_SRIOV_CTRL
 0x08

	)

801 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

802 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

803 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

804 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

805 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

806 
	#PCI_SRIOV_STATUS
 0x0®

	)

807 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

808 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

809 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

810 
	#PCI_SRIOV_NUM_VF
 0x10

	)

811 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

812 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

813 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

814 
	#PCI_SRIOV_VF_DID
 0x1®

	)

815 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

816 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

817 
	#PCI_SRIOV_BAR
 0x24

	)

818 
	#PCI_SRIOV_NUM_BARS
 6

	)

819 
	#PCI_SRIOV_VFM
 0x3¯

	)

820 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

821 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

822 
	#PCI_SRIOV_VFM_UA
 0x0

	)

823 
	#PCI_SRIOV_VFM_MI
 0x1

	)

824 
	#PCI_SRIOV_VFM_MO
 0x2

	)

825 
	#PCI_SRIOV_VFM_AV
 0x3

	)

826 
	#PCI_EXT_CAP_SRIOV_SIZEOF
 64

	)

828 
	#PCI_LTR_MAX_SNOOP_LAT
 0x4

	)

829 
	#PCI_LTR_MAX_NOSNOOP_LAT
 0x6

	)

830 
	#PCI_LTR_VALUE_MASK
 0x000003ff

	)

831 
	#PCI_LTR_SCALE_MASK
 0x00001c00

	)

832 
	#PCI_LTR_SCALE_SHIFT
 10

	)

833 
	#PCI_EXT_CAP_LTR_SIZEOF
 8

	)

836 
	#PCI_ACS_CAP
 0x04

	)

837 
	#PCI_ACS_SV
 0x01

	)

838 
	#PCI_ACS_TB
 0x02

	)

839 
	#PCI_ACS_RR
 0x04

	)

840 
	#PCI_ACS_CR
 0x08

	)

841 
	#PCI_ACS_UF
 0x10

	)

842 
	#PCI_ACS_EC
 0x20

	)

843 
	#PCI_ACS_DT
 0x40

	)

844 
	#PCI_ACS_EGRESS_BITS
 0x05

	)

845 
	#PCI_ACS_CTRL
 0x06

	)

846 
	#PCI_ACS_EGRESS_CTL_V
 0x08

	)

848 
	#PCI_VSEC_HDR
 4

	)

849 
	#PCI_VSEC_HDR_LEN_SHIFT
 20

	)

852 
	#PCI_SATA_REGS
 4

	)

853 
	#PCI_SATA_REGS_MASK
 0xF

	)

854 
	#PCI_SATA_REGS_INLINE
 0xF

	)

855 
	#PCI_SATA_SIZEOF_SHORT
 8

	)

856 
	#PCI_SATA_SIZEOF_LONG
 16

	)

859 
	#PCI_REBAR_CTRL
 8

	)

860 
	#PCI_REBAR_CTRL_NBAR_MASK
 (7 << 5Ë

	)

861 
	#PCI_REBAR_CTRL_NBAR_SHIFT
 5

	)

864 
	#PCI_DPA_CAP
 4

	)

865 
	#PCI_DPA_CAP_SUBSTATE_MASK
 0x1F

	)

866 
	#PCI_DPA_BASE_SIZEOF
 16

	)

869 
	#PCI_TPH_CAP
 4

	)

870 
	#PCI_TPH_CAP_LOC_MASK
 0x600

	)

871 
	#PCI_TPH_LOC_NONE
 0x000

	)

872 
	#PCI_TPH_LOC_CAP
 0x200

	)

873 
	#PCI_TPH_LOC_MSIX
 0x400

	)

874 
	#PCI_TPH_CAP_ST_MASK
 0x07FF0000

	)

875 
	#PCI_TPH_CAP_ST_SHIFT
 16

	)

876 
	#PCI_TPH_BASE_SIZEOF
 12

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/fcntl.h

1 #i‚de‡
_ASM_GENERIC_FCNTL_H


2 
	#_ASM_GENERIC_FCNTL_H


	)

4 
	~<löux/ty≥s.h
>

18 
	#O_ACCMODE
 00000003

	)

19 
	#O_RDONLY
 00000000

	)

20 
	#O_WRONLY
 00000001

	)

21 
	#O_RDWR
 00000002

	)

22 #i‚de‡
O_CREAT


23 
	#O_CREAT
 00000100

	)

25 #i‚de‡
O_EXCL


26 
	#O_EXCL
 00000200

	)

28 #i‚de‡
O_NOCTTY


29 
	#O_NOCTTY
 00000400

	)

31 #i‚de‡
O_TRUNC


32 
	#O_TRUNC
 00001000

	)

34 #i‚de‡
O_APPEND


35 
	#O_APPEND
 00002000

	)

37 #i‚de‡
O_NONBLOCK


38 
	#O_NONBLOCK
 00004000

	)

40 #i‚de‡
O_DSYNC


41 
	#O_DSYNC
 00010000

	)

43 #i‚de‡
FASYNC


44 
	#FASYNC
 00020000

	)

46 #i‚de‡
O_DIRECT


47 
	#O_DIRECT
 00040000

	)

49 #i‚de‡
O_LARGEFILE


50 
	#O_LARGEFILE
 00100000

	)

52 #i‚de‡
O_DIRECTORY


53 
	#O_DIRECTORY
 00200000

	)

55 #i‚de‡
O_NOFOLLOW


56 
	#O_NOFOLLOW
 00400000

	)

58 #i‚de‡
O_NOATIME


59 
	#O_NOATIME
 01000000

	)

61 #i‚de‡
O_CLOEXEC


62 
	#O_CLOEXEC
 02000000

	)

78 #i‚de‡
O_SYNC


79 
	#__O_SYNC
 04000000

	)

80 
	#O_SYNC
 (
__O_SYNC
|
O_DSYNC
)

	)

83 #i‚de‡
O_PATH


84 
	#O_PATH
 010000000

	)

87 #i‚de‡
__O_TMPFILE


88 
	#__O_TMPFILE
 020000000

	)

92 
	#O_TMPFILE
 (
__O_TMPFILE
 | 
O_DIRECTORY
)

	)

93 
	#O_TMPFILE_MASK
 (
__O_TMPFILE
 | 
O_DIRECTORY
 | 
O_CREAT
)

	)

95 #i‚de‡
O_NDELAY


96 
	#O_NDELAY
 
O_NONBLOCK


	)

99 
	#F_DUPFD
 0

	)

100 
	#F_GETFD
 1

	)

101 
	#F_SETFD
 2

	)

102 
	#F_GETFL
 3

	)

103 
	#F_SETFL
 4

	)

104 #i‚de‡
F_GETLK


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 #i‚de‡
F_SETOWN


110 
	#F_SETOWN
 8

	)

111 
	#F_GETOWN
 9

	)

113 #i‚de‡
F_SETSIG


114 
	#F_SETSIG
 10

	)

115 
	#F_GETSIG
 11

	)

118 #i‚de‡
CONFIG_64BIT


119 #i‚de‡
F_GETLK64


120 
	#F_GETLK64
 12

	)

121 
	#F_SETLK64
 13

	)

122 
	#F_SETLKW64
 14

	)

126 #i‚de‡
F_SETOWN_EX


127 
	#F_SETOWN_EX
 15

	)

128 
	#F_GETOWN_EX
 16

	)

131 #i‚de‡
F_GETOWNER_UIDS


132 
	#F_GETOWNER_UIDS
 17

	)

135 
	#F_OWNER_TID
 0

	)

136 
	#F_OWNER_PID
 1

	)

137 
	#F_OWNER_PGRP
 2

	)

139 
	sf_ow√r_ex
 {

140 
	mty≥
;

141 
__kî√l_pid_t
 
	mpid
;

145 
	#FD_CLOEXEC
 1

	)

148 #i‚de‡
F_RDLCK


149 
	#F_RDLCK
 0

	)

150 
	#F_WRLCK
 1

	)

151 
	#F_UNLCK
 2

	)

155 #i‚de‡
F_EXLCK


156 
	#F_EXLCK
 4

	)

157 
	#F_SHLCK
 8

	)

161 
	#LOCK_SH
 1

	)

162 
	#LOCK_EX
 2

	)

163 
	#LOCK_NB
 4

	)

165 
	#LOCK_UN
 8

	)

167 
	#LOCK_MAND
 32

	)

168 
	#LOCK_READ
 64

	)

169 
	#LOCK_WRITE
 128

	)

170 
	#LOCK_RW
 192

	)

172 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

174 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


175 #i‚de‡
__ARCH_FLOCK_PAD


176 
	#__ARCH_FLOCK_PAD


	)

179 
	sÊock
 {

180 
	ml_ty≥
;

181 
	ml_whí˚
;

182 
__kî√l_off_t
 
	ml_°¨t
;

183 
__kî√l_off_t
 
	ml_Àn
;

184 
__kî√l_pid_t
 
	ml_pid
;

185 
	m__ARCH_FLOCK_PAD


189 #i‚de‡
CONFIG_64BIT


191 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


192 #i‚de‡
__ARCH_FLOCK64_PAD


193 
	#__ARCH_FLOCK64_PAD


	)

196 
	sÊock64
 {

197 
	ml_ty≥
;

198 
	ml_whí˚
;

199 
__kî√l_loff_t
 
	ml_°¨t
;

200 
__kî√l_loff_t
 
	ml_Àn
;

201 
__kî√l_pid_t
 
	ml_pid
;

202 
	m__ARCH_FLOCK64_PAD


	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/mman.h

1 #i‚de‡
__ASM_GENERIC_MMAN_H


2 
	#__ASM_GENERIC_MMAN_H


	)

4 
	~<asm-gíîic/mm™-comm⁄.h
>

6 
	#MAP_GROWSDOWN
 0x0100

	)

7 
	#MAP_DENYWRITE
 0x0800

	)

8 
	#MAP_EXECUTABLE
 0x1000

	)

9 
	#MAP_LOCKED
 0x2000

	)

10 
	#MAP_NORESERVE
 0x4000

	)

11 
	#MAP_POPULATE
 0x8000

	)

12 
	#MAP_NONBLOCK
 0x10000

	)

13 
	#MAP_STACK
 0x20000

	)

14 
	#MAP_HUGETLB
 0x40000

	)

18 
	#MCL_CURRENT
 1

	)

19 
	#MCL_FUTURE
 2

	)

	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	#POLLFREE
 0x4000

	)

33 
	#POLL_BUSY_LOOP
 0x8000

	)

35 
	spﬁlfd
 {

36 
	mfd
;

37 
	mevíts
;

38 
	mªvíts
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

	@/usr/include/asm-generic/termios.h

1 #i‚de‡
_ASM_GENERIC_TERMIOS_H


2 
	#_ASM_GENERIC_TERMIOS_H


	)

11 
	~<asm/ãrmbôs.h
>

12 
	~<asm/io˘ls.h
>

14 
	swösize
 {

15 
	mws_row
;

16 
	mws_cﬁ
;

17 
	mws_xpixñ
;

18 
	mws_ypixñ
;

21 
	#NCC
 8

	)

22 
	sãrmio
 {

23 
	mc_iÊag
;

24 
	mc_oÊag
;

25 
	mc_cÊag
;

26 
	mc_lÊag
;

27 
	mc_löe
;

28 
	mc_cc
[
NCC
];

32 
	#TIOCM_LE
 0x001

	)

33 
	#TIOCM_DTR
 0x002

	)

34 
	#TIOCM_RTS
 0x004

	)

35 
	#TIOCM_ST
 0x008

	)

36 
	#TIOCM_SR
 0x010

	)

37 
	#TIOCM_CTS
 0x020

	)

38 
	#TIOCM_CAR
 0x040

	)

39 
	#TIOCM_RNG
 0x080

	)

40 
	#TIOCM_DSR
 0x100

	)

41 
	#TIOCM_CD
 
TIOCM_CAR


	)

42 
	#TIOCM_RI
 
TIOCM_RNG


	)

43 
	#TIOCM_OUT1
 0x2000

	)

44 
	#TIOCM_OUT2
 0x4000

	)

45 
	#TIOCM_LOOP
 0x8000

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/const.h

3 #i‚de‡
_LINUX_CONST_H


4 
	#_LINUX_CONST_H


	)

15 #ifde‡
__ASSEMBLY__


16 
	#_AC
(
X
,
Y
Ë
	)
X

17 
	#_AT
(
T
,
X
Ë
	)
X

19 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

20 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

21 
	#_AT
(
T
,
X
Ë((T)(X))

	)

24 
	#_BITUL
(
x
Ë(
	`_AC
(1,
UL
Ë<< (x))

	)

25 
	#_BITULL
(
x
Ë(
	`_AC
(1,
ULL
Ë<< (x))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/mman-common.h

1 #i‚de‡
__ASM_GENERIC_MMAN_COMMON_H


2 
	#__ASM_GENERIC_MMAN_COMMON_H


	)

9 
	#PROT_READ
 0x1

	)

10 
	#PROT_WRITE
 0x2

	)

11 
	#PROT_EXEC
 0x4

	)

12 
	#PROT_SEM
 0x8

	)

13 
	#PROT_NONE
 0x0

	)

14 
	#PROT_GROWSDOWN
 0x01000000

	)

15 
	#PROT_GROWSUP
 0x02000000

	)

17 
	#MAP_SHARED
 0x01

	)

18 
	#MAP_PRIVATE
 0x02

	)

19 
	#MAP_TYPE
 0x0‡

	)

20 
	#MAP_FIXED
 0x10

	)

21 
	#MAP_ANONYMOUS
 0x20

	)

22 #ifde‡
CONFIG_MMAP_ALLOW_UNINITIALIZED


23 
	#MAP_UNINITIALIZED
 0x4000000

	)

25 
	#MAP_UNINITIALIZED
 0x0

	)

28 
	#MS_ASYNC
 1

	)

29 
	#MS_INVALIDATE
 2

	)

30 
	#MS_SYNC
 4

	)

32 
	#MADV_NORMAL
 0

	)

33 
	#MADV_RANDOM
 1

	)

34 
	#MADV_SEQUENTIAL
 2

	)

35 
	#MADV_WILLNEED
 3

	)

36 
	#MADV_DONTNEED
 4

	)

39 
	#MADV_REMOVE
 9

	)

40 
	#MADV_DONTFORK
 10

	)

41 
	#MADV_DOFORK
 11

	)

42 
	#MADV_HWPOISON
 100

	)

43 
	#MADV_SOFT_OFFLINE
 101

	)

45 
	#MADV_MERGEABLE
 12

	)

46 
	#MADV_UNMERGEABLE
 13

	)

48 
	#MADV_HUGEPAGE
 14

	)

49 
	#MADV_NOHUGEPAGE
 15

	)

51 
	#MADV_DONTDUMP
 16

	)

53 
	#MADV_DODUMP
 17

	)

56 
	#MAP_FILE
 0

	)

66 
	#MAP_HUGE_SHIFT
 26

	)

67 
	#MAP_HUGE_MASK
 0x3f

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/termbits.h

1 
	~<asm-gíîic/ãrmbôs.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm-generic/termbits.h

1 #i‚de‡
__ASM_GENERIC_TERMBITS_H


2 
	#__ASM_GENERIC_TERMBITS_H


	)

4 
	~<löux/posix_ty≥s.h
>

6 
	tcc_t
;

7 
	t•ìd_t
;

8 
	ttcÊag_t
;

10 
	#NCCS
 19

	)

11 
	sãrmios
 {

12 
tcÊag_t
 
	mc_iÊag
;

13 
tcÊag_t
 
	mc_oÊag
;

14 
tcÊag_t
 
	mc_cÊag
;

15 
tcÊag_t
 
	mc_lÊag
;

16 
cc_t
 
	mc_löe
;

17 
cc_t
 
	mc_cc
[
NCCS
];

20 
	sãrmios2
 {

21 
tcÊag_t
 
	mc_iÊag
;

22 
tcÊag_t
 
	mc_oÊag
;

23 
tcÊag_t
 
	mc_cÊag
;

24 
tcÊag_t
 
	mc_lÊag
;

25 
cc_t
 
	mc_löe
;

26 
cc_t
 
	mc_cc
[
NCCS
];

27 
•ìd_t
 
	mc_i•ìd
;

28 
•ìd_t
 
	mc_o•ìd
;

31 
	skãrmios
 {

32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 
	#NLDLY
 0000400

	)

88 
	#NL0
 0000000

	)

89 
	#NL1
 0000400

	)

90 
	#CRDLY
 0003000

	)

91 
	#CR0
 0000000

	)

92 
	#CR1
 0001000

	)

93 
	#CR2
 0002000

	)

94 
	#CR3
 0003000

	)

95 
	#TABDLY
 0014000

	)

96 
	#TAB0
 0000000

	)

97 
	#TAB1
 0004000

	)

98 
	#TAB2
 0010000

	)

99 
	#TAB3
 0014000

	)

100 
	#XTABS
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#VTDLY
 0040000

	)

105 
	#VT0
 0000000

	)

106 
	#VT1
 0040000

	)

107 
	#FFDLY
 0100000

	)

108 
	#FF0
 0000000

	)

109 
	#FF1
 0100000

	)

112 
	#CBAUD
 0010017

	)

113 
	#B0
 0000000

	)

114 
	#B50
 0000001

	)

115 
	#B75
 0000002

	)

116 
	#B110
 0000003

	)

117 
	#B134
 0000004

	)

118 
	#B150
 0000005

	)

119 
	#B200
 0000006

	)

120 
	#B300
 0000007

	)

121 
	#B600
 0000010

	)

122 
	#B1200
 0000011

	)

123 
	#B1800
 0000012

	)

124 
	#B2400
 0000013

	)

125 
	#B4800
 0000014

	)

126 
	#B9600
 0000015

	)

127 
	#B19200
 0000016

	)

128 
	#B38400
 0000017

	)

129 
	#EXTA
 
B19200


	)

130 
	#EXTB
 
B38400


	)

131 
	#CSIZE
 0000060

	)

132 
	#CS5
 0000000

	)

133 
	#CS6
 0000020

	)

134 
	#CS7
 0000040

	)

135 
	#CS8
 0000060

	)

136 
	#CSTOPB
 0000100

	)

137 
	#CREAD
 0000200

	)

138 
	#PARENB
 0000400

	)

139 
	#PARODD
 0001000

	)

140 
	#HUPCL
 0002000

	)

141 
	#CLOCAL
 0004000

	)

142 
	#CBAUDEX
 0010000

	)

143 
	#BOTHER
 0010000

	)

144 
	#B57600
 0010001

	)

145 
	#B115200
 0010002

	)

146 
	#B230400
 0010003

	)

147 
	#B460800
 0010004

	)

148 
	#B500000
 0010005

	)

149 
	#B576000
 0010006

	)

150 
	#B921600
 0010007

	)

151 
	#B1000000
 0010010

	)

152 
	#B1152000
 0010011

	)

153 
	#B1500000
 0010012

	)

154 
	#B2000000
 0010013

	)

155 
	#B2500000
 0010014

	)

156 
	#B3000000
 0010015

	)

157 
	#B3500000
 0010016

	)

158 
	#B4000000
 0010017

	)

159 
	#CIBAUD
 002003600000

	)

160 
	#CMSPAR
 010000000000

	)

161 
	#CRTSCTS
 020000000000

	)

163 
	#IBSHIFT
 16

	)

166 
	#ISIG
 0000001

	)

167 
	#ICANON
 0000002

	)

168 
	#XCASE
 0000004

	)

169 
	#ECHO
 0000010

	)

170 
	#ECHOE
 0000020

	)

171 
	#ECHOK
 0000040

	)

172 
	#ECHONL
 0000100

	)

173 
	#NOFLSH
 0000200

	)

174 
	#TOSTOP
 0000400

	)

175 
	#ECHOCTL
 0001000

	)

176 
	#ECHOPRT
 0002000

	)

177 
	#ECHOKE
 0004000

	)

178 
	#FLUSHO
 0010000

	)

179 
	#PENDIN
 0040000

	)

180 
	#IEXTEN
 0100000

	)

181 
	#EXTPROC
 0200000

	)

184 
	#TCOOFF
 0

	)

185 
	#TCOON
 1

	)

186 
	#TCIOFF
 2

	)

187 
	#TCION
 3

	)

190 
	#TCIFLUSH
 0

	)

191 
	#TCOFLUSH
 1

	)

192 
	#TCIOFLUSH
 2

	)

195 
	#TCSANOW
 0

	)

196 
	#TCSADRAIN
 1

	)

197 
	#TCSAFLUSH
 2

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
2
.
/usr/src/rtai/base
2
/usr/include
/usr/realtime/include
438
15767
/usr/src/rtai/base/arch/arm/hal/hal.c
/usr/src/rtai/base/arch/arm/hal/mach-at91/at91-timer.c
/usr/src/rtai/base/arch/arm/hal/mach-ep9301/ep9301-timer.c
/usr/src/rtai/base/arch/arm/hal/mach-imx/imx-timer.c
/usr/src/rtai/base/arch/arm/hal/mach-pxa/pxa-timer.c
/usr/src/rtai/base/arch/m68k/hal/hal.c
/usr/src/rtai/base/arch/ppc/hal/hal.c
/usr/src/rtai/base/arch/x86/calibration/calibrate-module.c
/usr/src/rtai/base/arch/x86/calibration/calibrate.c
/usr/src/rtai/base/arch/x86/calibration/calibrate.h
/usr/src/rtai/base/arch/x86/calibration/calibration_helper.c
/usr/src/rtai/base/arch/x86/calibration/rtai_calibrate.mod.c
/usr/src/rtai/base/arch/x86/calibration/rtai_smi.mod.c
/usr/src/rtai/base/arch/x86/calibration/smi-module.c
/usr/src/rtai/base/arch/x86/hal/hal.c
/usr/src/rtai/base/arch/x86/hal/hal_32.c
/usr/src/rtai/base/arch/x86/hal/hal_64.c
/usr/src/rtai/base/arch/x86/hal/rtai_hal.mod.c
/usr/src/rtai/base/config/kconfig/conf.c
/usr/src/rtai/base/config/kconfig/confdata.c
/usr/src/rtai/base/config/kconfig/expr.c
/usr/src/rtai/base/config/kconfig/expr.h
/usr/src/rtai/base/config/kconfig/gconf.c
/usr/src/rtai/base/config/kconfig/images.c
/usr/src/rtai/base/config/kconfig/kconfig_load.c
/usr/src/rtai/base/config/kconfig/lex.zconf.c
/usr/src/rtai/base/config/kconfig/lkc.h
/usr/src/rtai/base/config/kconfig/lkc_proto.h
/usr/src/rtai/base/config/kconfig/lxdialog/checklist.c
/usr/src/rtai/base/config/kconfig/lxdialog/colors.h
/usr/src/rtai/base/config/kconfig/lxdialog/dialog.h
/usr/src/rtai/base/config/kconfig/lxdialog/inputbox.c
/usr/src/rtai/base/config/kconfig/lxdialog/lxdialog.c
/usr/src/rtai/base/config/kconfig/lxdialog/menubox.c
/usr/src/rtai/base/config/kconfig/lxdialog/msgbox.c
/usr/src/rtai/base/config/kconfig/lxdialog/textbox.c
/usr/src/rtai/base/config/kconfig/lxdialog/util.c
/usr/src/rtai/base/config/kconfig/lxdialog/yesno.c
/usr/src/rtai/base/config/kconfig/mconf.c
/usr/src/rtai/base/config/kconfig/menu.c
/usr/src/rtai/base/config/kconfig/qconf.cc
/usr/src/rtai/base/config/kconfig/qconf.h
/usr/src/rtai/base/config/kconfig/symbol.c
/usr/src/rtai/base/config/kconfig/zconf.l
/usr/src/rtai/base/config/kconfig/zconf.tab.c
/usr/src/rtai/base/config/kconfig/zconf.y
/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_arch.h
/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_exports.h
/usr/src/rtai/base/include/asm-arm/arch-at91/rtai_timer.h
/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_arch.h
/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_exports.h
/usr/src/rtai/base/include/asm-arm/arch-ep9301/rtai_timer.h
/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_arch.h
/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_exports.h
/usr/src/rtai/base/include/asm-arm/arch-imx/rtai_timer.h
/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_arch.h
/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_exports.h
/usr/src/rtai/base/include/asm-arm/arch-pxa/rtai_timer.h
/usr/src/rtai/base/include/asm-arm/rtai.h
/usr/src/rtai/base/include/asm-arm/rtai_atomic.h
/usr/src/rtai/base/include/asm-arm/rtai_fpu.h
/usr/src/rtai/base/include/asm-arm/rtai_hal.h
/usr/src/rtai/base/include/asm-arm/rtai_lxrt.h
/usr/src/rtai/base/include/asm-arm/rtai_oldnames.h
/usr/src/rtai/base/include/asm-arm/rtai_sched.h
/usr/src/rtai/base/include/asm-arm/rtai_shm.h
/usr/src/rtai/base/include/asm-arm/rtai_srq.h
/usr/src/rtai/base/include/asm-arm/rtai_usi.h
/usr/src/rtai/base/include/asm-arm/rtai_vectors.h
/usr/src/rtai/base/include/asm-m68k/rtai.h
/usr/src/rtai/base/include/asm-m68k/rtai_atomic.h
/usr/src/rtai/base/include/asm-m68k/rtai_fpu.h
/usr/src/rtai/base/include/asm-m68k/rtai_hal.h
/usr/src/rtai/base/include/asm-m68k/rtai_leds.h
/usr/src/rtai/base/include/asm-m68k/rtai_lxrt.h
/usr/src/rtai/base/include/asm-m68k/rtai_oldnames.h
/usr/src/rtai/base/include/asm-m68k/rtai_sched.h
/usr/src/rtai/base/include/asm-m68k/rtai_shm.h
/usr/src/rtai/base/include/asm-m68k/rtai_srq.h
/usr/src/rtai/base/include/asm-m68k/rtai_usi.h
/usr/src/rtai/base/include/asm-m68k/rtai_vectors.h
/usr/src/rtai/base/include/asm-ppc/rtai.h
/usr/src/rtai/base/include/asm-ppc/rtai_atomic.h
/usr/src/rtai/base/include/asm-ppc/rtai_fpu.h
/usr/src/rtai/base/include/asm-ppc/rtai_hal.h
/usr/src/rtai/base/include/asm-ppc/rtai_legacy.h
/usr/src/rtai/base/include/asm-ppc/rtai_lxrt.h
/usr/src/rtai/base/include/asm-ppc/rtai_oldnames.h
/usr/src/rtai/base/include/asm-ppc/rtai_sched.h
/usr/src/rtai/base/include/asm-ppc/rtai_shm.h
/usr/src/rtai/base/include/asm-ppc/rtai_srq.h
/usr/src/rtai/base/include/asm-ppc/rtai_usi.h
/usr/src/rtai/base/include/asm-ppc/rtai_vectors.h
/usr/src/rtai/base/include/asm-x86/rtai.h
/usr/src/rtai/base/include/asm-x86/rtai_atomic.h
/usr/src/rtai/base/include/asm-x86/rtai_atomic_32.h
/usr/src/rtai/base/include/asm-x86/rtai_atomic_64.h
/usr/src/rtai/base/include/asm-x86/rtai_emulate_tsc.h
/usr/src/rtai/base/include/asm-x86/rtai_fpu.h
/usr/src/rtai/base/include/asm-x86/rtai_fpu_32.h
/usr/src/rtai/base/include/asm-x86/rtai_fpu_64.h
/usr/src/rtai/base/include/asm-x86/rtai_hal.h
/usr/src/rtai/base/include/asm-x86/rtai_hal_32.h
/usr/src/rtai/base/include/asm-x86/rtai_hal_64.h
/usr/src/rtai/base/include/asm-x86/rtai_leds.h
/usr/src/rtai/base/include/asm-x86/rtai_lxrt.h
/usr/src/rtai/base/include/asm-x86/rtai_lxrt_32.h
/usr/src/rtai/base/include/asm-x86/rtai_lxrt_64.h
/usr/src/rtai/base/include/asm-x86/rtai_oldnames.h
/usr/src/rtai/base/include/asm-x86/rtai_sched.h
/usr/src/rtai/base/include/asm-x86/rtai_sched_32.h
/usr/src/rtai/base/include/asm-x86/rtai_sched_64.h
/usr/src/rtai/base/include/asm-x86/rtai_shm.h
/usr/src/rtai/base/include/asm-x86/rtai_srq.h
/usr/src/rtai/base/include/asm-x86/rtai_usi.h
/usr/src/rtai/base/include/asm-x86/rtai_vectors.h
/usr/src/rtai/base/include/rtai.h
/usr/src/rtai/base/include/rtai_bits.h
/usr/src/rtai/base/include/rtai_fifos.h
/usr/src/rtai/base/include/rtai_hal_names.h
/usr/src/rtai/base/include/rtai_leds.h
/usr/src/rtai/base/include/rtai_lxrt.h
/usr/src/rtai/base/include/rtai_malloc.h
/usr/src/rtai/base/include/rtai_math.h
/usr/src/rtai/base/include/rtai_mbx.h
/usr/src/rtai/base/include/rtai_mq.h
/usr/src/rtai/base/include/rtai_msg.h
/usr/src/rtai/base/include/rtai_nam2num.h
/usr/src/rtai/base/include/rtai_names.h
/usr/src/rtai/base/include/rtai_netrpc.h
/usr/src/rtai/base/include/rtai_pmq.h
/usr/src/rtai/base/include/rtai_posix.h
/usr/src/rtai/base/include/rtai_prinher.h
/usr/src/rtai/base/include/rtai_proc_fs.h
/usr/src/rtai/base/include/rtai_proxies.h
/usr/src/rtai/base/include/rtai_registry.h
/usr/src/rtai/base/include/rtai_rwl.h
/usr/src/rtai/base/include/rtai_sanity.h
/usr/src/rtai/base/include/rtai_scb.h
/usr/src/rtai/base/include/rtai_sched.h
/usr/src/rtai/base/include/rtai_schedcore.h
/usr/src/rtai/base/include/rtai_sem.h
/usr/src/rtai/base/include/rtai_shm.h
/usr/src/rtai/base/include/rtai_signal.h
/usr/src/rtai/base/include/rtai_spl.h
/usr/src/rtai/base/include/rtai_tasklets.h
/usr/src/rtai/base/include/rtai_tbx.h
/usr/src/rtai/base/include/rtai_trace.h
/usr/src/rtai/base/include/rtai_types.h
/usr/src/rtai/base/include/rtai_usi.h
/usr/src/rtai/base/include/rtai_version.h
/usr/src/rtai/base/include/rtai_wd.h
/usr/src/rtai/base/include/rtai_wrappers.h
/usr/src/rtai/base/ipc/bits/bits.c
/usr/src/rtai/base/ipc/bits/rtai_bits.mod.c
/usr/src/rtai/base/ipc/fifos/fifos.c
/usr/src/rtai/base/ipc/fifos/rtai_fifos.mod.c
/usr/src/rtai/base/ipc/mbx/mbx.c
/usr/src/rtai/base/ipc/mbx/rtai_mbx.mod.c
/usr/src/rtai/base/ipc/mq/mq.c
/usr/src/rtai/base/ipc/mq/rtai_mq.mod.c
/usr/src/rtai/base/ipc/msg/msg.c
/usr/src/rtai/base/ipc/msg/rtai_msg.mod.c
/usr/src/rtai/base/ipc/netrpc/netrpc.c
/usr/src/rtai/base/ipc/netrpc/rtai_netrpc.mod.c
/usr/src/rtai/base/ipc/netrpc/rtnetP.h
/usr/src/rtai/base/ipc/sem/rtai_sem.mod.c
/usr/src/rtai/base/ipc/sem/sem.c
/usr/src/rtai/base/ipc/shm/kvmem.c
/usr/src/rtai/base/ipc/shm/rtai_shm.mod.c
/usr/src/rtai/base/ipc/shm/shm.c
/usr/src/rtai/base/ipc/tbx/rtai_tbx.mod.c
/usr/src/rtai/base/ipc/tbx/tbx.c
/usr/src/rtai/base/leds/leds.c
/usr/src/rtai/base/malloc/malloc.c
/usr/src/rtai/base/math/export_glibc.h
/usr/src/rtai/base/math/libm.c
/usr/src/rtai/base/sched/api.c
/usr/src/rtai/base/sched/liblxrt/services.c
/usr/src/rtai/base/sched/liblxrt/touchall.c
/usr/src/rtai/base/sched/rtai_sched.mod.c
/usr/src/rtai/base/sched/sched.c
/usr/src/rtai/base/sched/signal.c
/usr/src/rtai/base/sched/sys.c
/usr/src/rtai/base/tasklets/rtai_tasklets.mod.c
/usr/src/rtai/base/tasklets/tasklets.c
/usr/src/rtai/base/trace/trace.c
/usr/src/rtai/base/usi/usi.c
/usr/src/rtai/base/wd/rtai_wd.mod.c
/usr/src/rtai/base/wd/wd.c
periodic_task.c
periodic_task.mod.c
/usr/include/asm/param.h
/usr/include/asm/ptrace.h
/usr/include/asm/types.h
/usr/include/asm/unistd.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/errno.h
/usr/include/linux/fcntl.h
/usr/include/linux/fs.h
/usr/include/linux/kernel.h
/usr/include/linux/mman.h
/usr/include/linux/net.h
/usr/include/linux/oom.h
/usr/include/linux/pci.h
/usr/include/linux/poll.h
/usr/include/linux/reboot.h
/usr/include/linux/rtc.h
/usr/include/linux/sched.h
/usr/include/linux/stat.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/termios.h
/usr/include/linux/time.h
/usr/include/linux/timex.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/linux/version.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/io.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/poll.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/user.h
/usr/include/sys/utsname.h
/usr/include/sys/wait.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/realtime/include/asm/rtai.h
/usr/realtime/include/asm/rtai_atomic.h
/usr/realtime/include/asm/rtai_emulate_tsc.h
/usr/realtime/include/asm/rtai_fpu.h
/usr/realtime/include/asm/rtai_hal.h
/usr/realtime/include/asm/rtai_leds.h
/usr/realtime/include/asm/rtai_lxrt.h
/usr/realtime/include/asm/rtai_oldnames.h
/usr/realtime/include/asm/rtai_sched.h
/usr/realtime/include/asm/rtai_srq.h
/usr/realtime/include/asm/rtai_usi.h
/usr/realtime/include/asm/rtai_vectors.h
/usr/realtime/include/rtai.h
/usr/realtime/include/rtai_bits.h
/usr/realtime/include/rtai_config.h
/usr/realtime/include/rtai_fifos.h
/usr/realtime/include/rtai_hal_names.h
/usr/realtime/include/rtai_leds.h
/usr/realtime/include/rtai_lxrt.h
/usr/realtime/include/rtai_malloc.h
/usr/realtime/include/rtai_math.h
/usr/realtime/include/rtai_mbx.h
/usr/realtime/include/rtai_mq.h
/usr/realtime/include/rtai_msg.h
/usr/realtime/include/rtai_nam2num.h
/usr/realtime/include/rtai_netrpc.h
/usr/realtime/include/rtai_posix.h
/usr/realtime/include/rtai_prinher.h
/usr/realtime/include/rtai_proc_fs.h
/usr/realtime/include/rtai_proxies.h
/usr/realtime/include/rtai_registry.h
/usr/realtime/include/rtai_rwl.h
/usr/realtime/include/rtai_sanity.h
/usr/realtime/include/rtai_scb.h
/usr/realtime/include/rtai_sched.h
/usr/realtime/include/rtai_schedcore.h
/usr/realtime/include/rtai_sem.h
/usr/realtime/include/rtai_serial.h
/usr/realtime/include/rtai_shm.h
/usr/realtime/include/rtai_signal.h
/usr/realtime/include/rtai_spl.h
/usr/realtime/include/rtai_tasklets.h
/usr/realtime/include/rtai_tbx.h
/usr/realtime/include/rtai_trace.h
/usr/realtime/include/rtai_types.h
/usr/realtime/include/rtai_usi.h
/usr/realtime/include/rtai_version.h
/usr/realtime/include/rtai_wd.h
/usr/realtime/include/rtai_wrappers.h
/usr/include/alloca.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/fcntl.h
/usr/include/asm/mman.h
/usr/include/asm/poll.h
/usr/include/asm/processor-flags.h
/usr/include/asm/ptrace-abi.h
/usr/include/asm/socket.h
/usr/include/asm/termios.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/confname.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/pci_regs.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/linux/sysinfo.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/fcntl.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/mman.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/termios.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/const.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/mman-common.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/sockios.h
/usr/include/asm/termbits.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/termbits.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/wctype.h
